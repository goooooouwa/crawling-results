<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
<channel>
<title>Coding Horror</title>
<description>programming and human factors</description>
<link>https://blog.codinghorror.com/</link>
<pubDate>Sun, 19 Apr 2020 00:00:01 GMT</pubDate>
<!-- other elements omitted from this example -->
<item>
<title><![CDATA[ The History of Wumpus ]]></title>
<link>https://blog.codinghorror.com/the-history-of-wumpus/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>I sometimes go by the handle "Wumpus" online. It's <a href="http://blog.codinghorror.com/your-personal-brand/">part of my personal brand</a>, just like <a href="http://blog.codinghorror.com/on-the-meaning-of-coding-horror/">Coding Horror is</a>. Why?</p>
<p><img alt="image placeholder" >
<p><img alt="image placeholder" >
<p><img alt="image placeholder" >
<p><img alt="image placeholder" >
<p>It was one of my formative computing experiences on the first "real" computer I owned. No, <a href="http://blog.codinghorror.com/the-cult-of-coleco-adam/">my Coleco ADAM doesn't count</a>.</p>
<p>The images here refer to the The <a href="http://web.archive.org/web/20100226221837/http://www.videogamehouse.net/huntwumpus.html">TI 99/4a cartridge version of Hunt The Wumpus</a> from about 1985.</p>
<iframe width="480" height="360" src="//www.youtube.com/embed/xGVOw8gXl6Y" frameborder="0" allowfullscreen></iframe>
<p>However, Hunt The Wumpus <a href="http://en.wikipedia.org/wiki/Hunt_the_Wumpus">dates back much further</a>. Here's the <a href="http://web.archive.org/web/20100226221837/http://www.atariarchives.org/bcc1/showpage.php?page=247">original 1975 BASIC version of Hunt the Wumpus</a>, by Gregory Yob.</p>
<p><a href="http://web.archive.org/web/20100226221837/http://www.atariarchives.org/bcc1/showpage.php?page=247"><img alt="image placeholder" >
<p>There's even a <a href="http://scv.bu.edu/cgi-bin/wcl">multiplayer version online</a>.</p>
<p>A colleague was kind enough to port the original 1975 basic code to C#. You can <a href="https://github.com/coding-horror/wumpus-net">download the .NET version of Hunt The Wumpus </a>. This version has a few modern amenities, such as representing the cave maps in XML files instead of DATA statements, but it preserves the UI as-is. Here's a screenshot of the magical gameplay experience that awaits you:</p>
<p><img alt="image placeholder" >
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2005-12-05T19:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/the-history-of-wumpus/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ A Stopwatch Class for .NET 1.1 ]]></title>
<link>https://blog.codinghorror.com/a-stopwatch-class-for-net-11/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
The first rule of performance testing is to measure, then measure again, then measure one more time just to be sure. NET 2.0 adds a handy <a href="http://msdn2.microsoft.com/en-us/library/system.diagnostics.stopwatch.aspx">Diagnostics.Stopwatch</a> which is perfect for this kind of ad-hoc precision timing.
</p>
<p>
A year ago I created a Stopwatch class which was eerily similar to the one that Microsoft ended up shipping in .NET 2.0. I went ahead and <b>made the minor modifications necessary to make my Stopwatch class identical to Microsoft's</b>. This way you can use the object in .NET 1.1 and port your code as-is to .NET 2.0 with only a namespace change.
</p>
<p>
</p>
<pre language="c#">
using System;
/// &lt;summary&gt;
/// Provides a set of methods and properties that you can use to accurately
/// measure elapsed time.
/// &lt;/summary&gt;
public class Stopwatch
{
[System.Runtime.InteropServices.DllImport("Kernel32")]
static extern bool QueryPerformanceCounter(out long @ref);
[System.Runtime.InteropServices.DllImport("Kernel32")]
static extern bool QueryPerformanceFrequency(out long @ref);
private long _Start = 0;
private long _Elapsed = 0;
private bool _IsRunning = false;
/// &lt;summary&gt;
/// the current performance-counter frequency, in counts per second
/// &lt;/summary&gt;
readonly private long _CounterFrequency;
public Stopwatch()
{
/// prelinks all win32 api calls so there's less performance hit when called
System.Runtime.InteropServices.Marshal.PrelinkAll(typeof(Stopwatch));
if (QueryPerformanceFrequency(out _CounterFrequency) == false)
{
throw new Exception("High resolution timers are not available on this CPU");
}
}
/// &lt;summary&gt;
/// Starts, or resumes, measuring elapsed time for an interval.
/// &lt;/summary&gt;
public void Start()
{
if (_IsRunning) this.Stop();
_Start = this.CurrentTime;
_IsRunning = true;
}
/// &lt;summary&gt;
/// Stops measuring elapsed time for an interval.
/// &lt;/summary&gt;
public void Stop()
{
if (!_IsRunning) return;
_Elapsed += this.CurrentTime - _Start;
_Start = 0;
_IsRunning = false;
}
/// &lt;summary&gt;
/// Stops time interval measurement and resets elapsed time span to zero.
/// &lt;/summary&gt;
public void Reset()
{
if (_IsRunning) this.Stop();
_Elapsed = 0;
}
/// &lt;summary&gt;
/// retrieves the current value of the high-resolution performance counter.
/// &lt;/summary&gt;
private long CurrentTime
{
get
{
long l = 0;
QueryPerformanceCounter(out l);
return l;
}
}
/// &lt;summary&gt;
/// Indicates whether the Stopwatch timer is running.
/// &lt;/summary&gt;
public bool IsRunning
{
get { return (_IsRunning); }
}
/// &lt;summary&gt;
/// Gets the total elapsed time measured by the current instance.
/// &lt;/summary&gt;
public TimeSpan Elapsed
{
get { return new TimeSpan(this.ElapsedTicks); }
}
/// &lt;summary&gt;
/// Gets the total elapsed time measured by the current instance, in milliseconds
/// &lt;/summary&gt;
public long ElapsedMilliseconds
{
get
{
if (_Elapsed == 0) return 0;
return (long)(((double)_Elapsed / _CounterFrequency) * 1000);
}
}
/// &lt;summary&gt;
/// Gets the total elapsed time measured by the current instance, in timer ticks
/// &lt;/summary&gt;
public long ElapsedTicks
{
get
{
return (long)(this.ElapsedMilliseconds * TimeSpan.TicksPerMillisecond);
}
}
}
</pre>
<p>
Did you ever wonder <b>how the QueryPerformance* Win32 API functions work their magic</b> and provide accurate near-nanosecond timing results? There's some <a href="http://www.mattwalsh.com/twiki/bin/view/Main/HighFrequencyCounterInC">interesting trivia about these functions</a> on Matt Walsh's wiki.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2005-12-06T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/a-stopwatch-class-for-net-11/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ Animal, Vegetable, or Mineral? ]]></title>
<link>https://blog.codinghorror.com/animal-vegetable-or-mineral/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p><a href="http://www.clive.nl/detail/24424/"><img alt="image placeholder" >
<p>
The 1978 BASIC program <a href="http://www.atariarchives.org/basicgames/showpage.php?page=4">Animal</a> is an animal-specific variation of <a href="http://en.wikipedia.org/wiki/Twenty_questions">twenty questions</a>. You think of an animal, and the computer tries to guess what animal you're thinking of by asking a series of yes or no questions. <b>If the computer is stumped, the user is prompted to enter a question that would distinguish the unknown animal from the previous question.</b> Thus, the more the program runs, the more it "learns" about animals.
</p>
<p>
The <a href="http://20q.net/">20 questions website</a> is a natural extension of Animal, but with a fancier <a href="http://en.wikipedia.org/wiki/Neural_network">neural network</a> technique fed by <a href="http://en.wikipedia.org/wiki/Infinite_monkey_theorem">infinite internet monkeys</a>. And now it's even available in <a href="http://www.kk.org/cooltools/archives/000725.php">
portable handheld game format</a>:
</p>
<p>
</p>
<blockquote>
The other day Will Wright, the genius behind Sim City and the Sims, handed me this tennis ball-size orb and said, "It knows what you are thinking." Most of the time it will guess what you have in mind after asking you twenty yes/no questions. It is eerily smart, and slightly addictive. I see it as an educational toy.
<p>
Burned into its 8-bit chip is a neural net that has been learning for 17 years. <a href="http://www.yakscorner.com/stories/20questions.htm">Inventor Robin Burgener</a> programmed a simple neural net on a DOS machine in 1988. He taught it 20 questions about a cat. He than passed the program around to friends on a floppy and had them challenge the neural net with their yes/no answers to the object they had in mind. The neural net learns only when it plays a game; no data is added except for the yes/no answers of visitors. So the more people who test it, the more they teach it. In 1995 Burgener put the now robust neural net onto the new web where anyone could play it (that is, train it) 24 hours a day. And they did. Burgener's genius was to turn the hard tedious work of training a neural net into a fun game for humans.
</p>
<p>
Last year, after 1 million rounds of 20 questions online, the neural net had accumulated 10 million synaptic associations. It has a 73% success rate of guessing what you thought. Burgener then compressed the 20Q code to run on a chip, and had the neural net select 2,000 of the most popular 10,000 objects it then knew about. He then had the neural net select out the most useful 250,000 synaptic connections related to those 2,000 objects, and hard wired that learning into the chip in the orb. In other words, this sphere is a handheld version of Burgener's <a href="http://20q.net/">Twenty Questions web site</a>. Because it knows about fewer objects than the web version, it gets confused less often, so its success rate is ironically higher.
</p>
</blockquote>
<p>
My Mom, bless her heart, bought me one of these little handheld 20 question games. And it does work, after a fashion. Here's a transcript of me using the 20 Questions website to figure out "egg":
</p>
<p>
</p>
<pre>
1.  Is it Animal, Vegetable, Mineral, or Other? Animal.
2.  Does it have short fur? Irrelevant.
3.  Does it make a good pet? No.
4.  Can it scratch? No.
5.  Does it have ears? No.
6.  Does it have feelings? No.
7.  Does it dig holes? No.
8.  Does it breathe? No.
9.  Is it a specific color? Yes.
10. Does it taste good fried? Yes.
11. Do you use it in public? Sometimes.
12. Does it roll? Yes.
13. Can it be used in a pie? Rarely.
14. Can it be dried? No.
15. Does it reflect objects? No.
16. Is it healthy? Sometimes.
17. I am guessing that it is an egg? <b>Right!</b>
</pre>
<p>
Even though it got the right answer, I feel a little bit stupider having actually answered ridiculous questions like "can it be used in a pie" and "can it scratch". Maybe we should blame the users for these bad questions: <b>garbage in, garbage out</b>. But you know you're really in trouble when there's a detailed <a href="http://barelybad.com/20_questions.htm#substance">20 questions reference</a> offering extensive guidance on the very first question:
</p>
<p>
</p>
<blockquote>
To begin with, anything that's never been alive is mineral, and everything else must therefore be either animal or vegetable (unless you count microscopic entities such as bacteria and viruses, which you should).  Here are three examples:
<ul>
<li>If you've chosen as your target the clock inside London's Big Ben, you should answer, "Mineral," because the clock parts are made of steel and brass and copper and so on, which are minerals.
</li>
<li>If you've chosen as your target the wool sweater you're wearing, you should say, "Animal," because it's made of wool, which comes from sheep, which am animals.
</li>
<li>And if you've chosen the T-shirt that your date is wearing, you should say, "Vegetable," because it's made of cotton, which is a plant.
</li>
</ul>
</blockquote>
<p>
Reading a bit further on in that article, full of its contradictions and subjectivity (is a pencil vegetable or mineral?), <b>it's clear that the problem isn't the people, but the question</b>. Dividing the world into rigid hierarchies of any kind-- whether they be animal, vegetable, mineral, or other-- simply doesn't work very well.
</p>
<p>
So if, like me, you feel stupid when playing 20 questions, that's a perfectly rational reaction, because <a href="http://shirky.com/writings/ontology_overrated.html">structured, hierarchical categorization sucks</a>:
</p>
<p>
</p>
<blockquote>
<b>We are moving away from binary categorization -- books either are or are not entertainment -- and into this probabilistic world, where N% of users think books are entertainment</b>. It may well be that within Yahoo, there was a big debate about whether or not books are entertainment. But they either had no way of reflecting that debate or they decided not to expose it to the users. What instead happened was it became an all-or-nothing categorization, "This is entertainment, this is not entertainment." We're moving away from that sort of absolute declaration, and towards being able to roll up this kind of value by observing how people handle it in practice.
<p>
[..]
</p>
<p>
Critically, the semantics here are in the users, not in the system. This is not a way to get computers to understand things. When del.icio.us is recommending tags to me, the system is not saying, "I know that OSX is an operating system. Therefore, I can use predicate logic to come up with recommendations -- users run software, software runs on operating systems, OSX is a type of operating system -- and then say 'Here Mr. User, you may like these links.'"
</p>
<p>
What it's doing instead is a lot simpler: "A lot of users tagging things foobar are also tagging them frobnitz. I'll tell the user foobar and frobnitz are related." It's up to the user to decide whether or not that recommendation is useful -- del.icio.us has no idea what the tags mean. The tag overlap is in the system, but the tag semantics are in the users. This is not a way to inject linguistic meaning into the machine.
</p>
<p>
It's all dependent on human context. This is what we're starting to see with del.icio.us, with Flickr, with systems that are allowing for and aggregating tags. <b>The signal benefit of these systems is that they don't recreate the structured, hierarchical categorization so often forced onto us by our physical systems.</b> Instead, we're dealing with a significant break -- by letting users tag URLs and then aggregating those tags, we're going to be able to build alternate organizational systems, systems that, like the Web itself, do a better job of letting individuals create value for one another, often without realizing it.
</p>
</blockquote>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2005-12-07T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/animal-vegetable-or-mineral/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ Headphone Snobbery ]]></title>
<link>https://blog.codinghorror.com/headphone-snobbery/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
I've talked about all <b>the essential environmental things a programmer should have</b>: a <a href="http://blog.codinghorror.com/investing-in-a-quality-programming-chair/">good chair</a>, at least <a href="http://blog.codinghorror.com/does-more-than-one-monitor-improve-productivity/">two monitors</a>, and a <a href="http://blog.codinghorror.com/the-keyboard-cult/">great keyboard</a>.
</p>
<p>
One thing I haven't talked about, though, is headphones. Headphones are probably the most optional item in that list. But <a href="http://blog.codinghorror.com/the-programmers-bill-of-rights/">if you're not blessed with a quiet workplace</a>, they can be essential. There are lots of great choices in headphones, but the set I own and recommend is the <a href="http://www.headphone.com/products/headphones/all-headphones/sennheiser-hd-580.php">Sennheiser 580</a>.
</p>
<p>
<a href="http://www.headphone.com/products/headphones/all-headphones/sennheiser-hd-580.php"><img alt="image placeholder" >
</p>
<p>
<b>Am I really advocating spending two hundred dollars on a set of headpones?</b> <i>Yes. Yes I am.</i> Now, <a href="http://www.headphone.com/guide/by-manufacturer/akg/akg-k-1000.php">you could spend a lot more</a>. This is about extracting the maximum bang for your buck:
</p>
<p>
</p>
<ol>
<li>Unlike your computer, or your car, your headphones will never wear out or become obsolete. I hesitate to say lifetime, but they're multiple decade investments at the very least.
</li>
<li>The number one item that affects the music you hear is the speakers. Without a good set of headphones, everything else is irrelevant.
</li>
<li>The right headphones can deliver sound equivalent to extremely high-end floorstanding speakers worth thousands of dollars.
</li>
</ol>
<p>
If you're the type of person who is perfectly happy listening to 64 kilobit MP3s through a $5 set of beige headphones, that's fine. There's nothing wrong with that. Keep on scrolling; this post is not for you.
</p>
<p>
But if you're any kind of music enthusiast, or you work in noisy environments, a quality set of headphones will be one of the best $200 investments you could possibly make.
</p>
<p>
I'm a big fan of the guys at <a href="http://www.headphone.com/">HeadRoom</a>; not only are they a reputable vendor, they're a great source for <a href="http://www.headphone.com/collections/top-10-headphones">unbiased information about headphones in general</a>. You don't have to buy anything there, but it's definitely the first place you should start.
</p>
<p>
If you become a minor headphone enthusiast like myself, you might also want to <b>invest in an inexpensive external headphone amplifier</b>. It's not required by any means, but after a nice set of headphones, it can have the second biggest effect on the resulting sound you hear. The coolest model for computer geeks is the <a href="http://www.headphone.com/products/headphone-amps/the-mobile-line/headroom-bithead.php">HeadRoom BitHead</a>:
</p>
<p>
</p>
<blockquote>
Take a BitHead, plug it into the USB port on your computer, then plug the best headphones you've got into the BitHead, and BAM, knock-your-socks-off sound. Then later, pack it up in a HeadRoom bag with your favorite portable player, and you've got one of the most aurally delightful portable audio systems on the planet. Think about it: a great back end for your computer and a sweet analog headphone amp to use with your portable player for only $199. Your ears will thank you.
<p>
The BitHead has a bit of a split personality: it is a battery powered miniature headphone amp for use with portable players. And it's a USB powered external sound card and headphone amp for computers.
</p>
</blockquote>
<p>
Dan has a good <a href="http://www.dansdata.com/bithead.htm">review of the BitHead</a> which goes into more depth. It garners a "highly recommended" from him and from me.
</p>
<p>
As far as I'm concerned, wires are the way to go for headphones. But if you demand freedom from the tyranny of wires, maybe these <a href="http://www.headphone.com/guide/by-manufacturer/sennheiser/sennheiser-rs-65-wireless.php">Sennheiser 65 wireless headphones</a> are more your speed. If wireless is your bag, bear in mind that you need to be extra careful in this category-- wireless transmission isn't exactly synonymous with quality.
</p>
<p>
At the risk of sounding like a total Sennheiser shill, if you need a headset/microphone combination for things like Skype, <a href="http://www.dansdata.com/s140150.htm">the Sennheiser PC150 is passable and inexpensive</a>. But the audio quality and comfort is nowhere near what you'll get out of the HD580s.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2005-12-08T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/headphone-snobbery/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ Screenshots: JPEG vs. GIF (and PNG) ]]></title>
<link>https://blog.codinghorror.com/screenshots-jpeg-vs-gif/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>It constantly amazes me how many times I <strong>encounter pages where screenshots are inappropriately stored as JPEGs</strong>. Not to single Mike Gunderloy out, but there's yet another example in his <a href="http://developer.com/net/asp/article.php/3569166">recent article on configuring an ASP.NET 2.0 website</a>:</p>
<p><img alt="image placeholder" >
<p>That is just nasty. As in, <a href="http://www.everything2.com/index.pl?node_id=743607">Miss Jackson if you're nasty</a>.</p>
<p>Haven't the two most common image encoding formats on the web – <a href="http://en.wikipedia.org/wiki/GIF">GIF</a> and <a href="http://en.wikipedia.org/wiki/JPEG">JPEG</a> – been around long enough for editors to figure out which one is appropriate for a screenshot?</p>
<p>Evidently not. For those hapless editors, here's the handy Cliff's Notes version of which encoding algorithm to choose for your screenshots:</p>
<table>
<tbody>
<tr>
<td><img alt="image placeholder" >
<td><img alt="image placeholder" >
</tr>
<tr>
<td align="center">Use JPEG</td>
<td align="center">Use GIF (or PNG)</td>
</tr>
</tbody>
</table>
<p><strong>Most GUI screenshots lean more towards the picture on the right than the picture on the left</strong>. When all else fails, try all three commonly supported image formats (GIF, <a href="http://en.wikipedia.org/wiki/PNG">PNG</a>, and JPEG) and use your common sense to manage the quality and size tradeoffs. I know bandwidth can be expensive. <em>Just don't make our eyeballs bleed.</em></p>
<p>Unfortunately, capturing decent looking screenshots in a reasonable file size gets more difficult with each successive OS release. Windows XP's default "Luna" theme was just colorful enough to make it difficult to capture using lossless algorithms like PNG and GIF. That's one reason I prefer the <a href="http://www.theeldergeek.com/windows_classic.htm">older "classic" Windows 2000 style GUI skin</a> in XP. But later versions of Windows use color blending and color transitions even more extensively. <strong>This means you're effectively stuck with lossy JPEG for screenshots in any modern OS.</strong>
</p>
<p>
</p>
<table>
<tr>
<td valign="top">
<img alt="image placeholder" >Great for GIF and PNG!
</td>
<td valign="top">
<img alt="image placeholder" >Not so much. Use JPG.
</td>
</tr>
</table>

<p>At least JPEG images have selectable quality levels. Here's an example of the various JPEG quality levels and the resulting image sizes using <a href="http://www.cs.cmu.edu/~chuck/lennapg/lenna.shtml">the reference 512x512 Lenna image</a>:</p>
<table>
<tr>
<td>
<a href="https://blog.codinghorror.com/content/images/uploads/2005/12/6a0120a85dcdae970b017616f64bf7970c-800wi.jpg"><img alt="image placeholder" >
</td>
<td>
<a href="https://blog.codinghorror.com/content/images/uploads/2005/12/6a0120a85dcdae970b017616f64d40970c-800wi.jpg"><img alt="image placeholder" >
</td>
</tr>
<tr>
<td>
<a href="https://blog.codinghorror.com/content/images/uploads/2005/12/6a0120a85dcdae970b016769017677970b-pi.jpg"><img alt="image placeholder" >
</td>
<td>
<a href="https://blog.codinghorror.com/content/images/uploads/2005/12/6a0120a85dcdae970b017616f65612970c-pi.jpg"><img alt="image placeholder" >
</td>
</tr>
<tr>
<td>
<a href="https://blog.codinghorror.com/content/images/uploads/2005/12/6a0120a85dcdae970b017616f6570d970c-pi.jpg"><img alt="image placeholder" >
</td>
<td>
<a href="https://blog.codinghorror.com/content/images/uploads/2005/12/6a0120a85dcdae970b017743dc6fda970d-pi.jpg"><img alt="image placeholder" >
</td>
</tr>
</table>
<p>For comparison, the <b>lossless PNG version of this image is 541 kb</b> – that's more than 5 times the size of the very high quality 5% JPEG!</p>
<p>Personally, I can't tell the Lenna reference image from the 10% JPEG without zooming in excessively. That's a nearly 10:1 file size savings for an image that will be identical to most casual viewers.</p>
<p>But the Lenna image doesn't have any black on white text embedded in it, like a desktop screenshot would. And these harsh color transitions are particularly difficult for JPEG to encode, as illustrated so painfully in the first screenshot. So <strong>let's try a 1024x768 screenshot of a typical Windows Vista desktop</strong> with an explorer window, icons, desktop background, etcetera:</p>
<table cellpadding="4" cellspacing="4">
<tbody>
<tr>
<td><a href="http://www.codinghorror.com/.a/6a0120a85dcdae970b017616f666e1970c-pi">Lossless PNG (noninterlaced)</a></td>
<td>476 kb</td>
</tr>
<tr>
<td>Lossless JPEG</td>
<td>821 kb</td>
</tr>
<tr>
<td><a href="http://www.codinghorror.com/.a/6a0120a85dcdae970b016769018493970b-pi">1% JPEG</a></td>
<td>289 kb</td>
</tr>
</tbody>
</table>
<p>Unfortunately, the 1% JPEG still has quite a bit of noise around the black text to my eye. Check it out yourself and compare it with the lossless PNG. Is this acceptable?</p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2005-12-10T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/screenshots-jpeg-vs-gif/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ an Incomplete Guide to Building a Web Site that Works ]]></title>
<link>https://blog.codinghorror.com/an-incomplete-guide-to-building-a-web-site-that-works/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
Seth Godin's <a href="http://www.salted.com/unsalted/files/knockknock.pdf">Incomplete Guide to Building a Web Site that Works</a> (6mb PDF) is a great reminder of <b>how to build a popular website without becoming a marketing weasel in the process</b>:
</p>
<p>
</p>
<blockquote>
<b>Big Picture #1:</b><br>
A Web site must do at least one of two things, but probably both:
<p>
</p>
<ul>
<li>Turn a stranger into a friend, and a friend into a customer.
</li>
<li>Talk in a tone of voice that persuades people to believe the story you're telling.
</li>
</ul>
<p>
<b>Big Picture #2:</b><br>
A Web site can cause only four things to happen in the moments after someone sees it:
</p>
<p>
</p>
<ul>
<li>She clicks and goes somewhere else you want her to go.
</li>
<li>She clicks and gives you permission to follow up by email or phone.
</li>
<li>She clicks and buys something.
</li>
<li>She tells a friend, either by clicking or by blogging or phoning or talking.
</li>
</ul>
<p>
That's it.
</p>
<p>
If your site is attempting to do more than this, you're wasting time and money and, more important, focus.
</p>
</blockquote>
<p>
If you don't have a PDF reader already, I highly recommend <a href="http://www.foxitsoftware.com/pdf/rd_intro.php">Foxit Reader</a>. It's a great, ultra-lightweight alternative to the bloated, naggy Acrobat Reader.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2005-12-11T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/an-incomplete-guide-to-building-a-web-site-that-works/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ Getting Started with Indexing Service ]]></title>
<link>https://blog.codinghorror.com/getting-started-with-indexing-service/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
Microsoft's <a href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/dnindex/html/msdn_is-intro.asp">ancient circa-1997 Indexing Service</a> gets no respect. And that's a shame, because it's a surprisingly decent content indexing engine that supports <a href="http://www.codinghorror.com/blog/archives/000455.html">arbitrary metadata</a>. Sure, there may be better choices, but <b>Indexing Service's saving grace is that it's <i>completely free</i>.</b> It's a default component of Windows 2000, Windows XP Pro, and Windows 2003 Server. And I'll show you how you can programmatically query it from .NET, too.
</p>
<p>
First, let's set us up <s>the bomb</s> a little Indexing Service catalog to play with:
</p>
<p>
</p>
<ol>
<li>In Computer Management, right click Indexing Service and select New, Catalog.
</li>
<li>Give the new catalog a name. You'll use this name in code to select the right catalog, so treat it like a variable name and use something that makes sense. I used <b>test</b>.
</li>
<li>Select a location path for the catalog. Note that this is NOT the location of the content you want to index, but the physical location of the hidden <b>catalog.wci</b> index folder. I know, it's confusing. I chose <b>c:test</b> as my location.
</li>
<li>Expand the new Test catalog, and right click the Directories folder. Select New, Directory. You can ignore the UNC textbox unless you're indexing content on a remote computer. Enter the path to the content you wish to index. I chose <b>c:testindex-me</b>.
</li>
</ol>
<p>
Click OK, restart Indexing Service, and you end up with something like this:
</p>
<p>
<img alt="image placeholder" >
</p>
<p>
Now, if you plop files in the index-me folder, Index Server will automatically index them -- assuming <a href="http://www.ifilter.org/default.htm">an appropriate IFilter is installed</a>. Click on the Indexing Service node to watch it happen; the total indexed and unindexed document counts are shown in real time.
</p>
<p>
<img alt="image placeholder" >
</p>
<p>
After you've added some documents, bring up the integrated query-- click on the Query the Catalog node under your catalog-- and verify that, indeed, you can find specific words in your documents. Ok, full text search works. That's not very exciting.. <b>until you add some custom metadata to the mix!</b> Plop this HTML file in the index-me folder:
</p>
<p>
</p>
<pre><span style="COLOR: blue">&lt;</span><span style="COLOR: maroon">head</span><span style="COLOR: blue">&gt;<br>&lt;</span><span style="COLOR: maroon">title</span><span style="COLOR: blue">&gt;</span><span style="COLOR: black">Html Test Page 2</span><span style="COLOR: blue">&lt;/</span><span style="COLOR: maroon">title</span><span style="COLOR: blue">&gt;<br><br></span><span style="COLOR: green">&lt;!-- automatically maps to DocAuthor in Index Server --&gt;<br></span><span style="COLOR: blue">&lt;</span><span style="COLOR: maroon">meta</span><span style="COLOR: black"> </span><span style="COLOR: red">name</span><span style="COLOR: blue">="author"</span><span style="COLOR: black"> </span><span style="COLOR: red">content</span><span style="COLOR: blue">="John Doe"</span><span style="COLOR: black"> </span><span style="COLOR: blue">/&gt;<br></span><span style="COLOR: green">&lt;!-- automatically maps to DocKeywords in Index Server --&gt;<br></span><span style="COLOR: blue">&lt;</span><span style="COLOR: maroon">meta</span><span style="COLOR: black"> </span><span style="COLOR: red">name</span><span style="COLOR: blue">="keywords"</span><span style="COLOR: black"> </span><span style="COLOR: red">content</span><span style="COLOR: blue">="giraffe, elephant, mouse, aardvark"</span><span style="COLOR: black"> </span><span style="COLOR: blue">/&gt;<br></span><span style="COLOR: green">&lt;!-- automatically maps to DocSubject in Index Server --&gt;<br></span><span style="COLOR: blue">&lt;</span><span style="COLOR: maroon">meta</span><span style="COLOR: black"> </span><span style="COLOR: red">name</span><span style="COLOR: blue">="subject"</span><span style="COLOR: black"> </span><span style="COLOR: red">content</span><span style="COLOR: blue">="animal"</span><span style="COLOR: black"> </span><span style="COLOR: blue">/&gt;<br><br></span><span style="COLOR: green">&lt;!-- custom meta tags  --&gt;<br></span><span style="COLOR: blue">&lt;</span><span style="COLOR: maroon">meta</span><span style="COLOR: black"> </span><span style="COLOR: red">name</span><span style="COLOR: blue">="testing"</span><span style="COLOR: black"> </span><span style="COLOR: red">content</span><span style="COLOR: blue">="dos"</span><span style="COLOR: black"> </span><span style="COLOR: blue">/&gt;<br>&lt;</span><span style="COLOR: maroon">meta</span><span style="COLOR: black"> </span><span style="COLOR: red">name</span><span style="COLOR: blue">="metacategory"</span><span style="COLOR: black"> </span><span style="COLOR: red">content</span><span style="COLOR: blue">="awesome"</span><span style="COLOR: black"> </span><span style="COLOR: blue">/&gt;<br>&lt;</span><span style="COLOR: maroon">meta</span><span style="COLOR: black"> </span><span style="COLOR: red">name</span><span style="COLOR: blue">="metanumber"</span><span style="COLOR: black"> </span><span style="COLOR: red">content</span><span style="COLOR: blue">="two"</span><span style="COLOR: black"> </span><span style="COLOR: blue">/&gt;<br>&lt;</span><span style="COLOR: maroon">meta</span><span style="COLOR: black"> </span><span style="COLOR: red">name</span><span style="COLOR: blue">="metainteger"</span><span style="COLOR: black"> </span><span style="COLOR: red">content</span><span style="COLOR: blue">="222"</span><span style="COLOR: black"> </span><span style="COLOR: blue">/&gt;<br><br>&lt;/</span><span style="COLOR: maroon">head</span><span style="COLOR: blue">&gt;<br>&lt;</span><span style="COLOR: maroon">body</span><span style="COLOR: blue">&gt;<br></span><span style="COLOR: black">Jackdaws love my big sphinx of quartz.<br></span><span style="COLOR: blue">&lt;/</span><span style="COLOR: maroon">body</span><span style="COLOR: blue">&gt;</span> </pre>
<p>
Once you do, you'll notice that the Properties folder for your Catalog contains some interesting new properties that correspond to our &lt;meta&gt; tags:
</p>
<p>
<img alt="image placeholder" >
</p>
<p>
As noted in the HTML comments, a few of the &lt;meta&gt; tags automagically map directly to <a href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/indexsrv/html/ixuwebov_1qcn.asp">standard Index Server properties</a>. You can query these properties directly using <a href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/indexsrv/html/ixqlang_92xx.asp">Indexing Service Query Language</a>:
</p>
<p>
</p>
<pre>
$DocAuthor John AND Doe
$DocKeywords mouse
$DocSubject animal
$DocTitle test
</pre>
<p>
That's nice for free, but the truly custom properties require a bit more work. If you try "$testing dos", you'll get an unceremonious "No such property" message.  The first thing we need to do is <b>mark the property cacheable</b>. Right click the "testing" property in the properties folder and check the "Cached" checkbox:
</p>
<p>
<img alt="image placeholder" >
</p>
<p>
Take note of the storage level drop-down as well, because it has a special meaning: <b>properties marked as primary storage can be returned in the search results.</b> This can be a big deal for performance, since you can have as many bits of metadata as you want coming back in the initial search results.
</p>
<p>
You'll need to reindex once you mark a property cacheable. There are two ways to do that:
</p>
<p>
</p>
<ol>
<li>
<b>The scorched earth way</b>: stop the service, delete the hidden catalog.wci file, then restart the service.
</li>
<li>
<b>The obscure UI way</b>: right click the directory in the Directories folder of your Catalog, select "All Tasks", then select "Full Rescan" or "Incremental Rescan".
</li>
</ol>
<p>
Once we've cached the property and rescanned, we now need to map the friendly name "testing" to the GUID of the new property. You can either <a href="http://www.ifiltershop.com/friendly-names-iis.html">map friendly names with a manually edited text file</a> (see <a href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/indexsrv/html/ixrefreg_3s2t.asp">MSKB 1</a>, <a href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/indexsrv/html/ixrefreg_3s2t.asp">MSKB 2</a>), or you can do it in code at query time. We'll do it through code.
</p>
<p>
Create a new ASP.NET project and <b>add a project reference to the ixsso COM object</b>:
</p>
<p>
<img alt="image placeholder" >
</p>
<p>
Next, place a TextBox, Button, and DataGrid on the default webpage. Add using statements for System.Data.OleDb and Cisso. Then paste this code in the Button1_Click event:
</p>
<p>
</p>
<pre language="c#">
CissoQueryClass q = new CissoQueryClass();
CissoUtilClass util = new CissoUtilClass();
OleDbDataAdapter da = new OleDbDataAdapter();
DataSet ds = new DataSet("IndexServerResults");
q.Query = TextBox1.Text;
q.DefineColumn("testing = d1b5d3f0-c0b3-11cf-9a92-00a0c908dbf1 testing");
q.Catalog = "Test";
q.SortBy = "rank[d]";
q.Columns = "rank, path, size, testing";
//q.MaxRecords = 1000;
util.AddScopeToQuery(q, @"c:testindex-me", "deep");
object o = q.CreateRecordset("nonsequential");
da.Fill(ds, o, "IndexServerResults");
DataGrid1.DataSource = ds;
DataGrid1.DataBind();
</pre>
<p>
Entering a query of "$testing dos" returns the above HTML document, as we would expect. <b>The ability to query arbitrary metadata along with full-text search makes index server much more flexible and powerful than I had ever realized</b>. A set of custom generated HTML could easily index entirely database-driven websites, in tandem with the rich Indexing Service query language (<a href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/indexsrv/html/ixqlang_2437.asp">examples</a>, <a href="http://www.codeproject.com/asp/indexserver.asp">more examples</a>).
</p>
<p>
In general Indexing Services just works, but there are some non-obvious things I ran into while experimenting with it:
</p>
<p>
</p>
<ul>
<li>Custom properties set to primary storage can be returned in the search results, but they are always returned as datatype "object", which means the DataGrid can't bind to them automatically.
</li>
<li>I couldn't get pagination to work using the CissoQueryClass object properties. This means you'll realistically need to limit the number of results with the MaxRecords property, which does work.
</li>
<li>There's a hidden performance tuning option. Right click the Indexing Service node, then select "All Tasks" and "Tune Performance."
</li>
<li>Be sure to turn on abstracts -- short textual summaries -- for your catalog. You can do this by right clicking the Catalog, selecting Properties, unchecking Inherit, then checking "Generate Abstracts".
</li>
<li>The list of "stop words" for Indexing Services can be edited in c:windowssystem32noise.enu. See this <a href="http://support.microsoft.com/default.aspx?scid=kb;en-us;247561">MSKB article</a> for more details.
</li>
<li>If you are querying Indexing Services from ASP.NET, bear in mind that <i>your queries will only return documents that the ASP.NET process account has permissions to!</i> Don't let this one bite you like it did me.
</li>
</ul>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2005-12-12T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/getting-started-with-indexing-service/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ UI Follies, Volume III ]]></title>
<link>https://blog.codinghorror.com/ui-follies-volume-iii/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
Ever wonder how you could possibly find something in that complex, ten-tabbed options dialog? How about <b>a search function on the options dialog</b>, as featured in Quest's <a href="http://www.quest.com/toad_for_sql_server/index.asp">Toad for SQL Server</a>:
</p>
<p>
<img alt="image placeholder" >
</p>
<p>
Aside from the fact that <i>it's completely insane to build an options dialog so complicated that it needs a search function</i>.. it's not a bad feature.
</p>
<p>
In a previous life, I used the Oracle version of this product quite a bit. How do you know your options dialog is too complicated? When it takes an entire minute-- a full 60 seconds-- for the system to respond after clicking on the Tools, Options menu item.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2005-12-13T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/ui-follies-volume-iii/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ Progressive Image Rendering ]]></title>
<link>https://blog.codinghorror.com/progressive-image-rendering/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
I'm a big fan of showing the user visual feedback as soon as possible, whether you're <a href="http://www.codinghorror.com/blog/archives/000444.html">downloading a web page</a> or <a href="http://www.codinghorror.com/blog/archives/000177.html">rendering a windows form</a>.
</p>
<p>
Images already render progressively in a web browser -- but you can do even better. <b>Simply save your GIF or PNG images with the "interlaced" option, or your JPEG images with the "progressive" option.</b>
</p>
<p>
Stephan Lavavej has a great page outlining <a href="http://nuwen.net/png.html">the difference between fancy interlacing and plain old progressive rendering</a>:
</p>
<p>
</p>
<blockquote>
There are four ways to transmit an image over the Internet. Over a fast connection there won't be any apparent difference, but over a modem connection the difference is stunningly obvious. Choosing the right way can make your connection seem much faster than it really is.
<p>
</p>
<ol>
<li>
<b>Wait until every bit of image data has been sucked through the modem before displaying the whole image</b>. So blindingly dumb that not even Internet Explorer does it.
</li>
<li>
<b>Display image data as it is received, resulting in a top-down filling in of the image</b>. One variant -- the one that everyone has seen -- of JPEG does this. This is noninterlaced display, and both GIF and PNG are capable of it as well. Non-interlaced images are smaller than interlaced images.
</li>
<li>
<b>Use a one-dimensional interlacing scheme</b>. This is how GIF interlacing works. Every eighth horizontal line is transmitted in the first "pass", filling up the dimensions of the image in 1/8th of the time that the entire image will take to download. The next pass transmits every fourth line, making the image less distorted. The next pass transmits every second line, making the image even less distorted, and the fourth and final pass transmits the remaining lines.
</li>
<li>
<b>Use a two-dimensional interlacing scheme</b>. This is how PNG interlacing works. Instead of four passes through the image, PNG makes seven passes. In 1/64 of the time that the whole image will take to display, one pass is already completed, showing the image in a very rough manner. Successive passes fill in more information, never distorting the pixels by more than a factor of two to one.
</li>
</ol>
</blockquote>
<p>
Here's a demo of simple progressive as-received rendering:
</p>
<p>
<img alt="image placeholder" >
</p>
<p>
And here's a demo of the superior PNG style two-dimensional interlaced rendering:
</p>
<p>
<img alt="image placeholder" >
</p>
<p>
You don't get this for free, of course -- <b>turning this feature on adds about 20% to the size of PNG images, and about 10% to the size of JPEG and GIF images.</b> Whether this improved rendering behavior is worth the bandwidth cost I leave as an exercise to the reader.
</p>
<p>
I am not aware of any browsers that actually bilinearly interpolate the low-resolution incremental images, as shown in the sample screenshots on <a href="http://nuwen.net/png.html">Stefan's page</a>. But that would be really cool! Why doesn't Firefox add this?
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2005-12-14T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/progressive-image-rendering/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ This Just In: Internet Makes Books Obsolete ]]></title>
<link>https://blog.codinghorror.com/this-just-in-internet-makes-books-obsolete/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
Mike Gunderloy recently linked to <a href="http://www.newsday.com/news/columnists/ny-etcolumn4549299dec12,0,7399981.column?coll=ny-news-columnists">an editorial</a> by author <a href="http://www.amazon.com/exec/obidos/search-handle-url/index%3Dbooks%26field-author-exact%3DSusan%20Cheever%26rank%3D-relevance">Susan Cheever</a> on the legality of <a href="http://books.google.com/">Google's Book Search</a>:
</p>
<p>
</p>
<blockquote><i>
Is it poignantly wrongheaded to want to get paid for my work? Is it a failure of understanding to think that when my father's short stories are read and enjoyed or made into movies, his widow should be able to profit?
</i></blockquote>
<p>
I'll definitely agree that <b>the way Google has gone about this has been remarkably heavy-handed</b>. But I firmly believe that <a href="http://books.google.com/">Google Book Search</a> is akin to the Public Library: a clear public good. The human race gets access to more information, and the authors get a major new sales avenue for all their work. What's not to like?
</p>
<p>
Evidently a lot, from Susan Cheever's perspective. I emailed Susan to clarify her position:
</p>
<p>
</p>
<blockquote><i>
But that's exactly what Google Print enables: selling more copies of your books, not less! Think of the millions of people that will find (and possibly buy) your books through a Google search-- people all over the world-- that otherwise would not even know your book existed! <a href="http://books.google.com/intl/en/googlebooks/help.html#pagelimit">Only an excerpt</a> of the book can be viewed. To get the rest, you <a href="http://books.google.com/intl/en/googlebooks/help.html#11">buy the book</a>. Probably via a link provided on the very same search result page. That's perhaps the ultimate sales tool.
</i></blockquote>
<p>
Surprisingly, Susan responded to my email:
</p>
<p>
</p>
<blockquote><i>
Yes, that's what they say. They say they are trying to help writers. Don't you think it's odd that they don't ask the writers first? How about the fact that they don't even want to discuss their project with the Author's Guild thus forcing us to sue? "Help" is a funny work in this context.
</i></blockquote>
<p>
Which brings us back to the issue of heavy-handedness. All this led James Shaw to try <a href="http://books.google.com/">Google Book Search</a> and conclude that <a href="http://www.coveryourasp.net/ViewPage.aspx?page=googleisevil">yes, Google is evil</a>:
</p>
<p>
</p>
<blockquote><i>
I just tried a book search for the first time. I signed in with my gmail account (never used, just reserved my name) and was able to view all the pages that I wanted to out of a random book I found. Occasionally it would tell me that I couldn't view the next page "to protect the copyright of the author" but it then allowed me to go back to the page index and choose the next page anyway. So, from my layman's point of view Google has allowed me to view any entire book still under copyright. It didn't cost me a dime.
</i></blockquote>
<p>
I think James is vastly understating how incredibly annoying and inefficient it is to "read" a book this way. But what's even more interesting is a comment <a href="http://www.larkware.com">Mike Gunderloy</a> posted to that entry:
</p>
<p>
</p>
<blockquote><i>
I don't see Google as the villain here - indeed, I don't really think there *is* a villain, just a culmination of forces. Yes, you can still buy some of my books, and some of them are still in print. And if you buy one, thanks. But you're a vanishing breed: sales of computer books of the sort I write are, across the board, dramatically down in the past three or four years. My own diagnosis is that this is directly related to the ease of finding the same information that the books used to carry by searching on the Internet. Why pay book prices (which have also gone up hideously in those years) when you can search for free? <b>The net result is that I have seen my royalty checks all but vanish in the last three years, to the point where I can no longer afford to write computer books. The titles that are now on the shelves are the last ones from me.</b>
</i></blockquote>
<p>
This concerns me, because <a href="http://www.amazon.com/exec/obidos/ASIN/078214327X/codihorr-20">Mike's books</a> are good. They're not those narrow, throw-away tech books (<a href="http://www.amazon.com/exec/obidos/tg/detail/-/0672315335?v=glance">Learn Visual Basic 6.0 in 24 hours!</a>) that are obsolete in a few years anyway. I mean, it's not <a href="http://www.amazon.com/exec/obidos/ASIN/0735619670/codihorr-20">Code Complete</a> -- but it's well worth buying.
</p>
<p>
I've always thought of printed books as complementary to the information available on the internet. If nothing else, they're a much more eyeball-friendly way to read a large volume of information. <b>I wonder if the general sales decline Mike decries here applies to any genre other than programming and technology books?</b>
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2005-12-15T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/this-just-in-internet-makes-books-obsolete/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ Variable Bit Rate: Getting the Best Bang for Your Byte ]]></title>
<link>https://blog.codinghorror.com/variable-bit-rate-getting-the-best-bang-for-your-byte/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>I'll probably never buy music from <a href="http://www.itunes.com/">iTunes</a>, or any other online music store, because <strong>they all use constant bit rate audio encoding formats</strong>. Once I heard the incredible difference in fidelity between variable bit rate (VBR) and constant bit rate (CBR) encoding, I can never go back. And if I'm spending my own money to "own" this music, why pay for the crappy encoded version anyway? <strong>I'd rather buy the CD with the raw, uncompressed versions of the music</strong> and rip it myself.</p>
<p>Having perfect audio fidelity, however, is not my goal. If I wanted that, I'd go for a <a href="http://wiki.hydrogenaudio.org/index.php?title=Lossless_comparison">lossless audio compression format</a>. They achieve 50 percent compression ratios, but that's still <strong>pushing 20 megabytes for the average song</strong>. Interesting for archival purposes, but way too big for every other possible use.</p>
<p>What I really want is the best bang for the byte: the smallest file size I can achieve while retaining cd quality. Of course, "cd quality" is in the ear of the beholder. Here's how I judge it: A/B listening tests between the raw WAV file and the encoded file on <a href="http://www.codinghorror.com/blog/archives/000463.html">nice headphones</a>. And to my ear, <strong>the best bang for the byte is variable bit rate MP3 files with an average bitrate of at least 160 kbps</strong>. Constant bit rate MP3s at 160 kbps do such a poor job of capturing the dynamic range of the music that it isn't even a contender. Sure, I could just encode everything at extremely high constant bit rates like 256 kbps or 320 kbps, but I can't hear the difference to justify the extra filesize. Remember, it's all about bang for the byte!</p>
<p>WinAmp displays the bitrate of a song in real time, which gives you a way to roughly correlate the encoder's decisions to the music. For areas of silence, it'll dip down to 32 kbps, and for areas of high energy, it'll peak up to 320 kbps.</p>
<p>There are some downsides to variable bit rate encoding, however. The encoder has to make complicated decisions about bitrate instead of mindlessly encoding everything at the same bitrate. That means the encoding uses complex algorithms that take quite a bit longer-- at least two times longer than constant bit rate encoding, possibly more. And you want a really smart, high quality encoder, too. Choice of encoder has always been a critical factor in how your music sounds. If you've got a lot of "unknown" MP3s, you may want to check them out with the <a href="http://www.guerillasoft.co.uk/encspot/">EncSpot tool</a>. It will tell you what encoder was used and estimate the resulting quality of the file:</p>
<p><img alt="image placeholder" >
<p>MP3 isn't the only audio encoding format in the world. But it is the most ubiquitous. The good news is that <strong>variable bit rate MP3 fares surprisingly well against the hottest new audio encoding formats</strong>. A recent <a href="http://web.archive.org/web/20060101091034/http://www.rjamorim.com/test/multiformat128/results.html">multiformat 128 kbps listening test</a> puts VBR MP3 on par with the newer AAC format, and squarely ahead of both ATRAC3 and WMA. Only the newest <a href="http://www.musepack.net/">MPC</a> and <a href="http://www.vorbis.com/">Vorbis</a> formats statistically outperformed VBR MP3 in listening tests. Interestingly, both of these formats are natively variable bit rate.</p>
<p>I use the free <a href="http://www.audiograbber.com-us.net/">Audiograbber</a> GUI to rip CDs. It uses the well-respected <a href="http://lame.sourceforge.net/">LAME encoding engine</a> under the hood. You can also use LAME at the command line. Here's LAME encoding a standard 128 kbps CBR MP3 file. It took 15 seconds:</p>
<p><img alt="image placeholder" >
<p>Here's LAME encoding a VBR MP3 at quality level five. It encoded a ~153 kbps average bitrate file in 20 seconds. Most of the frames are encoded at 160 kbps.</p>
<p><img alt="image placeholder" >
<p>Here's LAME encoding a VBR MP3 at quality level three. It encoded a ~218 kbps average bitrate file in 26 seconds. Most of the encoded frames are 224 kbps.</p>
<p><img alt="image placeholder" >
<p>One thing to keep in mind about variable bit rate encoding is that it's, well… variable. If you need predictable filesizes for every song you encode, VBR is definitely not for you. I happened to pick the outlying song on this particular CD; the average bitrates range from 129 kbps to 216 kbps:</p>
<table width="400">
<tbody>
<tr>
<td>bitrate</td>
<td>filesize</td>
<td>length</td>
</tr>
<tr>
<td>157 kbps</td>
<td>3.94 mb</td>
<td>3:30</td>
</tr>
<tr>
<td>178 kbps</td>
<td>5.11 mb</td>
<td>4:01</td>
</tr>
<tr>
<td>172 kbps</td>
<td>8.04 mb</td>
<td>6:30</td>
</tr>
<tr>
<td>185 kbps</td>
<td>9.81 mb</td>
<td>7:23</td>
</tr>
<tr>
<td>182 kbps</td>
<td>6.53 mb</td>
<td>5:00</td>
</tr>
<tr>
<td><span style="color: red;">216 kbps</span></td>
<td><span style="color: red;">7.23 mb</span></td>
<td><span style="color: red;">4:40</span></td>
</tr>
<tr>
<td>129 kbps</td>
<td>3.30 mb</td>
<td>3:34</td>
</tr>
<tr>
<td>197 kbps</td>
<td>8.03 mb</td>
<td>5:42</td>
</tr>
<tr>
<td>174 kbps</td>
<td>8.86 mb</td>
<td>7:07</td>
</tr>
<tr>
<td>196 kbps</td>
<td>5.11 mb</td>
<td>3:38</td>
</tr>
<tr>
<td>175 kbps</td>
<td>7.41 mb</td>
<td>5:54</td>
</tr>
<tr>
<td>175 kbps</td>
<td>9.33 mb</td>
<td>7:25</td>
</tr>
</tbody>
</table>
<p>The goal is to achieve at least 160 kbps average. Some songs will need more, some might need less. There's something magical about that extra 32 kbps; the difference between a CBR MP3 at 128 kbps and 160 kbps has always been unusually large to my ear.</p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2005-12-16T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/variable-bit-rate-getting-the-best-bang-for-your-byte/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ The Story of SkiFree ]]></title>
<link>https://blog.codinghorror.com/the-story-of-skifree/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
Laurent Bourgeois sent in an amusing link to <a href="http://ski.ihoc.net/">the story of SkiFree</a> in the words of Chris Pirih, the original Microsoft programmer who wrote it:
</p>
<p>
</p>
<blockquote>
I wrote SkiFree in C on my home computer, entirely for my own education and entertainment. One day while I was playing with it at work, the program manager for Windows Entertainment Pack happened to look over my shoulder and immediately decided he had to have this game. I called it WinSki, but the Microsoft marketroids hated that and decided, for inscrutible marketroidal reasons, to call it SkiFree. After some token resistance I let them have their way. Since the program was not originally a Microsoft product, Microsoft licensed it from me and paid me some trivial one-time fee (something like 100 shares of MSFT stock, no royalties) for its use.
<p>
SkiFree was intended to run on a 386 PC with VGA display. Such computers were not very powerful, nothing like modern PCs that can do 3-D rendering at millions of textured polygons per second.... No, in those days there wasn't even any such thing as a "video accelerator" -- the VGA was just a dumb pixel buffer hanging off the excruciatingly slow ISA bus. This made it pretty challenging to get good performance out of even simple sprite-oriented animation! Windows didn't help matters any by introducing several layers of abstraction between the program and the video hardware.... I discovered that it was worth almost any amount of preprocessing (on the "fast" 386 CPU) to reduce the amount of video I/O (over the slow ISA), so I designed a fairly clever algorithm to combine overlapping objects/erasures and blt minimal regions in each frame. The result was perfectly flicker-free transparent sprite animation at reasonable speed even on very slow computers, such as an old 286/EGA machine I found in the testing lab. Nowadays one would probably just render the sprites back-to-front in a memory buffer and blt the entire window on each frame.
</p>
</blockquote>
<p>
Chris kindly provides an updated 32-bit version of SkiFree on his page as well.
</p>
<p>
I definitely remember SkiFree from the <a href="http://en.wikipedia.org/wiki/Microsoft_Entertainment_Pack">Windows Entertainment Pack</a>. What's particularly scary is that many of these games have <b>their own highly detailed Wikipedia pages already</b>-- including <a href="http://en.wikipedia.org/wiki/SkiFree">a page on SkiFree</a>. The infinite monkeys have been busy!
</p>
<p>
Evidently SkiFree evolved from an earlier text-mode skiing game Chris wrote for a VAX:
</p>
<p>
<img alt="image placeholder" >
</p>
<p>
And it was influenced by <a href="http://www.atariage.com/software_page.html?SoftwareID=1280">Activision's Atari 2600 Skiing cartridge</a>:
</p>
<p>
<img alt="image placeholder" >
</p>
<p>
Which brings us to the venerable SkiFree-- <b>Windows 3.0 gaming at its finest</b>.
</p>
<p>
<img alt="image placeholder" >
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2005-12-18T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/the-story-of-skifree/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ Client vs. Developer Wars ]]></title>
<link>https://blog.codinghorror.com/client-vs-developer-wars/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
The 69 page e-book <a href="http://www.newfangled.com/client_vs_developer_wars">Client vs. Developer Wars</a> documents one web design company's struggle to formulate a rational development process:
</p>
<p>
</p>
<blockquote>
Up until the middle of 2000, Newfangled's development process was much like that of every other web development company. The process started with the "planning/strategy phase," followed by "design," then "programming/testing," and finally "launch/maintenance." Like most web developers, we thought our process was carefully thought out and logical. However, while the process seemed to make sense, it didn't work. No matter how hard we planned, our projects would slowly degrade and unravel.
<p>
The downward path of our projects was not due to lack of effort. At one point we were creating generic screen illustrations prior to development that showed how all the proposed content, features, and functionality of a site would fit together. These documents were usually 20-40 pages long even for relatively simple sites. They took a long time to write and even more time to review with clients. In fact, we were investing so much time in planning that clients often grew impatient, wanting to "see something" instead of just discussing the site and reviewing specifications. Yet we knew that if we rushed the planning stages, we would pay for it later. Unfortunately, even when we thoroughly completed the planning stages, problems would still surface, usually in the final stages of the project.
</p>
</blockquote>
<p>
This, to me, is another indictment of <a href="http://www.codinghorror.com/blog/archives/000448.html">dysfunctional specifications</a>. I learned long ago that <b>clients won't listen to what you say, and they certainly won't read what you write.</b> You're much better off putting that wasted effort into a working model and setting it in front of the client. Let them play with it for a while. Refine the working model based on that feedback, then keep turning the crank on this cycle until you run out of resources.
</p>
<p>
And that's exactly what Eric Holter proposes in this e-book:
</p>
<p>
</p>
<blockquote>
Our first prototype was a desperate attempt to document our projects more effectively. We had already been writing information architectures in order to provide our clients with site details. Using an HTML model of the site instead of a printed document was simply an effort to more effectively communicate the details of a site. As we started to use this HTML prototyping method, we discovered that it was doing so much more than documenting. It was enhancing our ability to communicate with our clients.
<p>
When they had questions about how something was supposed to work we reviewed the prototype and discussed the issue in its context. It was during these interactions around the prototype that we began to realize that our clients were able to give me much more detailed feedback about how they wanted a site to work. If they had an expectation about how a particular feature would function, it would generally be discovered at this early stage. We could then deal with the expectation appropriately. If there were technical limitations or cost issues discovered, we could work them out and provide viable alternatives
before they became crises and before they had already been developed differently.
</p>
<p>
We found that building a comprehensive, simple HTML model of the site helped to solve many of my problems. The prototype also
performed the function of a technical specification (we began to add programmer notes to the pages) that accurately described the structure, content, and features of our sites.
</p>
<p>
Yet because we translated the specification into a familiar HTML model, it was something our clients could grasp. Additionally, clients spent more time looking at prototypes. They considered them more carefully than paper documents, because they understood what they were looking at. We were able to get the kind of detailed feedback that we used to get only after a site was almost complete. This solved many of the problems that stemmed from our clients' exaggerated expectations. By using the prototype to define and specify sites, we were able to communicate and educate our clients in an effective proactive manner. This improved the overall flow of information, which resulted in positive relational dynamics with our clients.
</p>
</blockquote>
<p>
Yes, some of the advice will be old news to agilists, but give the guy a break: this was written five years ago. They call it <a href="http://www.newfangled.com/invention/grayscreen.php">grayscreen prototyping</a>. I think it's a reference to the old <b>default gray background color of Netscape 4.7x</b>. So the implication is that we're talking about low-fidelity HTML layouts -- so basic that they don't even specify a background color.
</p>
<p>
There's nothing magical about the solution proposed here, but it's solid advice written well. Recommended. And if you're not into the whole reading thing, you can even download a <a href="http://www.newfangled.com/invention/tour.php">16 minute video presentation</a> that covers the whole shebang.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2005-12-19T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/client-vs-developer-wars/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ Automated Hard Drive Defragmentation ]]></title>
<link>https://blog.codinghorror.com/automated-hard-drive-defragmentation/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
I tend to ignore <b>defragmenting my hard drive</b> until I belatedly realize it probably looks like swiss cheese by now:
</p>
<p>
<img alt="image placeholder" >
</p>
<p>
Wouldn't it be nice if <b>the operating system took care of defragmentation all by itself in the background when I'm not using the computer?</b> Ah, to dream. Until that happens, there's at least one simple workaround.
</p>
<p>
Windows XP includes a disk defragmenting utility in Start, Programs, Accessories, System Tools. What's less commonly known, however, is that XP <i>also</i> includes the command line version of this utility, <b>defrag.exe</b>:
</p>
<p>
</p>
<pre>
C:&gt;defrag c: -f
Windows Disk Defragmenter
Copyright (c) 2001 Microsoft Corp. and Executive Software International, Inc.
Analysis Report
279 GB Total,  116 GB (41%) Free,  12% Fragmented (8% file fragmentation)
Defragmentation Report
279 GB Total,  116 GB (41%) Free,  0% Fragmented (0% file fragmentation)
C:&gt;
</pre>
<p>
It's easy enough to hook up automated disk drive defragmenting using defrag.exe and XP's task scheduler. Just go to Start, Control Panel, Scheduled Tasks and click "Add Scheduled Task". You'll need to edit the task properties manually to set up the proper command line syntax, as pictured here:
</p>
<p>
<img alt="image placeholder" >
</p>
<p>
I assume the defrag utility needs to run as an administrator, so set the "Run as" section appropriately.
</p>
<p>
If you have more than one drive, you can set up multiple scheduled tasks, or use this Windows Script Host file to defragment all the drives in one swell foop:
</p>
<p>
</p>
<pre>
Option Explicit
Dim sh, fso, d
Set sh = WScript.CreateObject("WScript.Shell")
Set fso = CreateObject("Scripting.FileSystemObject")
For Each d in fso.Drives
If d.DriveType = 2 Then
sh.Run "defrag " &amp; d &amp; " -f -v", 1, true
End If
Next
</pre>
<p>
I'm sure <a href="http://www.diskeeper.com/defrag.asp">commercial disk defragmenters</a> do a better job, but this one's good enough-- and it's free! However, you may want to complement defrag.exe with SysInternals' <a href="http://www.sysinternals.com/Utilities/PageDefrag.html">PageDefrag</a> utility. Some crucial system files, such as the registry hive, are always locked while the OS is running. But with PageDefrag, you can defragment those files at boot time.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2005-12-20T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/automated-hard-drive-defragmentation/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ The CSS Zen Garden and ASP.NET ]]></title>
<link>https://blog.codinghorror.com/the-css-zen-garden-and-asp-net/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>The <a href="http://www.csszengarden.com">CSS Zen Garden</a> site isn't exactly new news these days, but I've been digesting the excellent <a href="http://www.amazon.com/exec/obidos/ASIN/0321303474/codihorr-20">CSS Zen Garden book</a> over the last few months and we now have an opportunity to pursue a completely CSS-driven site layout on one of our projects.</p>
<p>Although everyone has used stylesheets before for trivial things like colors and font sizes, <strong>switching to completely CSS-driven layout is a more daunting proposition</strong>. Consider the actual Zen Garden HTML, before and after a stylesheet treatment:</p>
<p> </p>
<table>
<tbody>
<tr>
<td>HTML</td>
<td>HTML with CSS Stylesheet</td>
</tr>
<tr>
<td valign="top"><a href="http://www.csszengarden.com/zengarden-sample.html"> <img alt="image placeholder" >
<td valign="top"><a href="http://www.csszengarden.com/?cssfile=026/026.css"> <img alt="image placeholder" >
</tr>
</tbody>
</table>
<p> </p>
<p>That's one radical makeover.</p>
<p><a href="http://www.amazon.com/exec/obidos/ASIN/0321303474/codihorr-20">The book</a> does a fantastic job of breaking down a number of the CSS stylesheets and focusing on particular areas of interest within each one. I highly recommend it. It's fun to click through these to get a visual sense of what's possible, and what still works in IE6. Here are the examples presented in the book, in order by section:</p>
<p><strong>Layout</strong><br> <a href="http://www.csszengarden.com/029/">Backyard</a>, <a href="http://www.csszengarden.com/030/">Entomology</a>,  <a href="http://www.csszengarden.com/036/">White Lily</a>,  <a href="http://www.csszengarden.com/037/">Pret-a-porter</a>,  <a href="http://www.csszengarden.com/070/">CS(S) Monk</a>, <a href="http://www.csszengarden.com/024/">Not So Minimal</a></p>
<p><strong>Imagery</strong><br> <a href="http://www.csszengarden.com/096/">Japanese Garden</a>, <a href="http://www.csszengarden.com/102/">Revolution!</a>, <a href="http://www.csszengarden.com/094/">Deco</a>, <a href="http://www.csszengarden.com/097/">No Frontiers!</a>, <a href="http://www.csszengarden.com/013/">Coastal Breeze</a>, <a href="http://www.csszengarden.com/019/">What Lies Beneath</a></p>
<p><strong>Typography</strong><br> <a href="http://www.csszengarden.com/085/">Oceans Apart</a>, <a href="http://www.csszengarden.com/044/">si6</a>, <a href="http://www.csszengarden.com/035/">Release One</a>, <a href="http://www.csszengarden.com/009/">Dead or Alive</a>, <a href="http://www.csszengarden.com/005/">Blood Lust</a>, <a href="http://www.csszengarden.com/017/">Golden Mean</a></p>
<p><strong>Special Effects</strong><br> <a href="http://www.csszengarden.com/057/">This is Cereal</a>, <a href="http://www.csszengarden.com/062/">Gemination</a>, <a href="http://www.csszengarden.com/069/">Bonsai Sky</a>, <a href="http://www.csszengarden.com/088/">Tulipe</a>, <a href="http://www.csszengarden.com/041/">door to my garden</a>, <a href="http://www.csszengarden.com/063/">Elastic Lawn</a></p>
<p><strong>Reconstruction</strong><br> <a href="http://www.csszengarden.com/031/">Hedges</a>, <a href="http://www.csszengarden.com/058/">Radio Zen</a>, <a href="http://www.csszengarden.com/093/">South of the Border</a>, <a href="http://www.csszengarden.com/095/">Corporate Zenworks</a>, <a href="http://www.csszengarden.com/090/">Open Window</a>, <a href="http://www.csszengarden.com/025/">mnemonic</a></p>
<p>It's admirable how the Zen Garden puts <strong>the holy grail of separating content from presentation squarely in view</strong>.</p>
<p>But I'm a little uncertain how this will work in practice under ASP.NET 1.1 and 2.0. Ideally the user controls will emit a bunch of &lt;div&gt; tags and ultra-simple HTML, then we let the CSS file have its way with position, graphics, sizing, and even hiding elements. The one example I can find of <a href="http://support.rainbowportal.net/confluence/display/DOX/Introduction+to+Zen">someone retrofitting pure CSS layout on an existing ASP.NET 1.1 site</a> is.. rather scary. And there are pages and pages of <a href="http://www.mezzoblue.com/css/cribsheet/">advice on CSS gotchas</a>, starting with the most important rule: <strong>develop in Firefox first, then fix the inevitable CSS compatibility bugs in IE6 second.</strong></p>
<p>Although this approach has a lot to recommend it, I still worry that we're trading one set of problems for another. Has anyone gone the full CSS Zen Garden route with an ASP.NET 1.1 or 2.0 site yet?</p>
<p> </p>
<p> </p>
<p> </p>
<p> </p>
<p> </p>
<p> </p>
<p> </p>
<p> </p>
<p> </p>
<p> </p>
<p> </p>
<p> </p>
<p> </p>
<p> </p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2005-12-21T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/the-css-zen-garden-and-asp-net/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ Web Typography Hack: sIFR ]]></title>
<link>https://blog.codinghorror.com/web-typography-hack-sifr/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
Although I'm no fan of <s>Macromedia</s>Adobe Flash, I have to admit the <a href="http://www.mikeindustries.com/sifr/">sIFR JavaScript / Flash typography hack</a> is remarkably well thought out and quite effective. Here's a small GIF movie of it in action:
</p>
<p>
<img alt="image placeholder" >
</p>
<p>
It always bugged me that our only alternative for decent web typeface rendering was the misconceived &lt;font&gt; tag, or even worse, a bunch of hand-constructed image files masquerading as text. This is the best solution I've seen so far. It's in use on a few high-profile sites such as ABC News; check out the headline for <a href="http://abcnews.go.com/Entertainment/wireStory?id=1435771">this ABC News article on Don Ho</a>, for example.
</p>
<p>
Heck, it's <a href="http://www.codinghorror.com/blog/archives/000384.html">almost enough to get me to enable Flash again</a>. Almost.
</p>
<p>
Mike Davidson, the original progenitor of the sIFR technique, recently handed the reins of development for sIFR to Mark Wubben, who is <a href="http://novemberborn.net/sifr3/look-into-the-future">working on sIFR 3</a>.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2005-12-22T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/web-typography-hack-sifr/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ PC Racing Sims ]]></title>
<link>https://blog.codinghorror.com/pc-racing-sims/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
I've been a PC racing game enthusiast since the day I wrapped my hands around my first force-feedback wheel in 1999-- the classic <a href="http://www.pcstats.com/articleview.cfm?articleID=61">wire driven Logitech Formula Force</a>. There's something about <b>a quality steering wheel with physics-driven force feedback effects</b> that really delivers on the sensation of driving.
</p>
<p>
I spent many hours tooling around the tracks in <a href="http://www.gamespot.com/pc/driving/viperracing/review.html">Viper Racing</a> and <a href="http://www.gamespot.com/pc/driving/sportscargt/review.html">Sports Car GT</a>. These games had a great combination of physics and force feedback. Nothing turns me off faster than arcade driving games where you pilot a rubbery box around a track, bouncing off walls and fellow motorists with impunity. What's the point of fantasy driving without some semi-realistic risks? But that doesn't mean I'm a <a href="http://www.gamespot.com/pc/driving/grandprixlegends/review.html">Grand Prix Legends</a> masochist, either. Those guys are nuts:
</p>
<p>
</p>
<blockquote>
<i>
When the creators of the ever-popular NASCAR series of racing simulations, Papyrus, decided to create <a href="http://www.bhmotorsports.com/download/6404">a historical Grand Prix racing simulation</a>, many people were confused. "How could a racing simulation modeled after the 1967 Formula 1 Season be fun?" they asked. To put it bluntly, it's fun because it is harshly and at times brutally realistic.
</i><p>
With few of the safety features and engine restrictions required on today's race cars, the 1967 Formula 1 season was one of the most dangerous in Motorsports history. Increased horsepower, no down force, rock-hard bias-ply tires, fuel tanks placed not only in the cockpit with the drivers, but specifically fabricated and molded in such a way as to surround the driver, and seat belts... what were those? The conventional wisdom in those days was that it was better to be thrown from the car during an accident than be belted into it. Considering the drivers were actually sitting in the middle of a 40 plus gallon, thin-walled, aluminum fuel tank filled with very exotic and volatile fuel, who could blame them?
</p>
</blockquote>
<p>
I've gone through a succession of force feedback wheels since then, finally settling on the excellent <a href="http://www.envynews.com/index.php?ID=234">Logitech MOMO Force</a>.
</p>
<p>
<img alt="image placeholder" >
</p>
<p>
Unfortunately, this particular model isn't available any more. But the more recent <a href="http://www.barrys-rigs-n-reviews.com/reviews/2005/hardware/lmr/lmr.htm">Logitech Momo Racing Force</a> wheel is similar and highly recommendable. And that's just the tip of the iceberg. Here's a <a href="http://nascar.about.com/cs/pcsimulations/a/pcwheeltop_4.htm">comprehensive wheel roundup</a> to get you started. As with all things PC, there's lots of esoterica available, such as the <a href="http://www.ecci6000.com/6000_productportal.htm">ECCI Trackstar 6000</a>.
</p>
<p>
Of course, a nice wheel isn't doing me any good if it's collecting dust. Although I dabbled a little bit with <a href="http://www.gamespot.com/pc/driving/colinmcraerally04/index.html?q=colin%20mcrae%2004">Colin McRae Rally 2004</a>, I haven't been following the PC driving sim scene very closely for the last few years. Over the holiday, though, I had some time to really immerse myself. And I found some outstanding next-generation racing sims:
</p>
<p>
</p>
<ul>
<li>
<a href="http://www.rfactor.net/">rFactor</a> (downloadable, <a href="http://pc.boomtown.net/en_uk/articles/art.view.php?id=9266">review</a>)
</li>
<li>
<a href="http://www.10tacle.com/gtr-game/en/index.php?Homepage">GTR FIA racing</a> (<a href="http://www.gamespot.com/pc/driving/gtr/review.html">review</a>)
</li>
<li>
<a href="http://www.richardburnsrally.com/">Richard Burns Rally</a> (<a href="http://www.simhq.com/_motorsports/motorsports_032a.html">review</a>)
</li>
<li>
<a href="http://www.codemasters.com/colinmcrae2005/index.php?territory=EnglishUSA">Colin McRae Rally 2005</a> (<a href="http://www.gamespot.com/pc/driving/colinmcraerally5/review.html">review</a>)
</li>
<li>
<a href="http://www.gt-legends.com/home_en.php">GT Legends</a> (<a href="http://www.driverheaven.net/articles/GTL%20Review/">review</a>)
</li>
</ul>
<p>
Unfortunately, I also found that <b>most of the racing games I'm interested in are barely released in the US any more</b>. I suppose it's the <a href="http://www.nascar.com/">NASCAR factor</a>. Or maybe europeans are just more enthusiastic about motorsports as a whole. For example, rally racing-- which I find hugely entertaining-- barely even registers as a sport in the US. <a href="http://www.ebgames.com/ebx/categories/products/deptpage.asp?wherefrom=search&amp;searchword=rally">Searching for the word "rally" on the EB Games website</a> produces 30 hits on mostly NASCAR titles. Irony of ironies. Racing in a circle is about the farthest thing imaginable from rally racing. The only title in my list that's currently available from EB Games is <a href="http://www.ebgames.com/ebx/product/256852.asp">GTR</a>. You'll have to scour eBay or Froogle, like I did, for the others.
</p>
<p>
One of the downsides of having a dedicated wheel peripheral is <b>the extra work it takes to lug it out and hook it up before you play</b>. The temptation to play racing games with the keyboard-- even though it sucks for controlling driving games-- is strong. I played through most of Colin McRae Rally 2004 on the keyboard in between coding sessions for this very reason. I was too lazy to drag out the wheel then put it away when I was done! I enjoy racing games too much to let this happen again. What I really need is <b>a dedicated PC racing rig</b>.
</p>
<p>
Although I was a little put off by the <a href="http://www.gogamer.com/cgi-bin/GoGamer.storefront/SESSIONID/Product/View/000VIRTUALGT">$18,500 price tag</a> on the <a href="http://www.virtualgt.com/">Virtual GT simulator</a>, it's.. uh.. a starting point:
</p>
<p>
<img alt="image placeholder" >
</p>
<p>
I'll keep this in mind for the gaming wing of my mansion. In the meantime, some humbler but more realistic choices:
</p>
<p>
</p>
<ul>
<li>
<a href="http://www.hotseatinc.com/default.asp">Hotseat Racer</a> $589 (<a href="http://www.hotseatinc.com/ImageViewer.asp?img=U%2FMAGPUB%2FGR3%2Ejpg&amp;w=770&amp;H=550&amp;Path=uploads/30/">review</a>)
</li>
<li>
<a href="http://www.playseats.com/">Playseats Racing</a> $249-$299 (<a href="http://www.gamerz-edge.com/hardware/reviews/playseat.html">review</a>)
</li>
<li>
<a href="http://www.bobearlracing.com/">Virtual Racing Chassis</a> $389 (<a href="http://www.barrys-rigs-n-reviews.com/reviews/2005/hardware/vrc/vrc.htm">review</a>)
</li>
<li>
<a href="http://www.virtualracerx.com/products_base.php">VRX Base</a> $?
</li>
<li>
<a href="http://www.gtcockpit.com/">Sparco Racing Cockpit Pro</a> $549-$699 (<a href="http://hardware.gamespot.com/Story-ST-22514-2459-28-33-x">review</a>)
</li>
</ul>
<p>
The Hotseat is my pick of this litter, but after you factor in shipping, it's close to $750. Whereas I can get <a href="http://www.target.com/gp/detail.html/sr=2-1/602-5086768-6657439?%5Fencoding=UTF8&amp;asin=B0009VY9NY">the Playseat for $249 at Target</a>. Even with shipping and tax, that's less than one Xbox 360!
</p>
<p>
<img alt="image placeholder" >
</p>
<p>
At some point I'll probably kit it out with the optional LCD bracket advertised on the playseat website, and some rear speaker stands. I can make it as temporary or permanent as I need to. But it's definitely getting some screen time in the giant Vertigo conference room first.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2005-12-26T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/pc-racing-sims/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ Seven Habits of Highly Effective Programmers ]]></title>
<link>https://blog.codinghorror.com/seven-habits-of-highly-effective-programmers/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
<img alt="image placeholder" >
Philip Chu's <a href="http://www.technicat.com/writing/programming.html">Seven Habits of Highly Effective Programmers</a> is witty, eloquent, and peppered with illustrative real world anecdotes:
</p>
<p>
</p>
<blockquote>
<i>
Upon joining an early-stage startup called Neomar, I found myself in two months of design meetings for a wireless internet portal that was due to launch in six months. Eventually we got tired of meeting and finally started coding. Within two weeks, my part of the project had no resemblance to the original design, and the first wireless connection test two months later revealed a fundamental misunderstanding of the wireless protocol.
</i><p>
At Nichimen Graphics, a small 3D graphics software vendor, I was put in charge of porting the flagship product from SGI workstations to Windows NT. After six months, the port was so incomplete and crash-prone that I was reluctant to give the first "alpha" build our test group. Fortunately, the QA manager insisted, and the resulting bombardment of bug reports forced me to immediately focus on the problems that prevented the testers from exercising the application in any meaningful way. Left to my own devices, I would have worked on what seemed to be the harder and more important core 3D issues, and probably delayed too long on seemingly mundane issues like the user interface, load-save functionality, and compabilility with all the varieties of consumer hardware we were planning to support.
</p>
<p>
On a contract with a previous employer, I was asked to look over a piece of code that no one else had time to attend to. At first, I thought it was a mess and didn't know what was going on in there. Then I gradually figured out what the code was doing, and I grudgingly admitted the code wasn't too bad. And then I eventually realized that I had written the code two years ago. Note to self: need more comments.
</p>
</blockquote>
<p>
It's a short but high quality read. Based on that piece, it's easy to recommend the rest of the articles at Philip's site*, including <a href="http://www.technicat.com/writing/mit.html">What I Learned at MIT</a>, and <a href="http://www.technicat.com/writing/management.html">Management Means Never Having to Say You're Sorry</a>.
</p>
<p>
* which feels remarkably <i>like</i> a blog, but totally isn't. No RSS for you!
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2005-12-27T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/seven-habits-of-highly-effective-programmers/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ Of White Elephants and Gifting ]]></title>
<link>https://blog.codinghorror.com/of-white-elephants-and-gifting/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
My favorite holiday tradition is the <b>white elephant gift exchange</b>. If you don't have these in your family or at your workplace, you're missing out on a lot of fun. Maybe I'm easily amused, but it's consistently the most fun I've had during the holidays. As an adult, anyway. The rules for a white elephant gift exchange are simple:
</p>
<p>
</p>
<blockquote>
Everyone brings a gift already wrapped. Gifts should all be valued at roughly the same amount, usually $20 or $25. The gifts are strictly anonymous -- no one should know which gift you brought. All the gifts are placed on a large table, and each participant draws a number.
<p>
The person with #1 picks out a gift and opens it so all can see what it is. The person with #2 can either "steal" any unwrapped gift or choose a wrapped gift from the table. The game continues for each subsequent player with the following rules:
</p>
<p>
</p>
<ol>
<li>If someone steals your gift, you can steal someone else's gift, or choose a wrapped gift from the table.
</li>
<li>A gift can only be "stolen" once during a turn.
</li>
<li>The turn ends when a gift is opened.
</li>
</ol>
<p>
After the last turn, the person with #1 can opt to put back the gift and "steal" according to the rules. This starts the gift exchange again and ends when someone chooses or is forced to take the gift given up by the person with #1.
</p>
</blockquote>
<p>
The real fun of a white elephant party is in the <s>stealing</s>trading. Most white elephant parties are notorious for the yearly modifications to the rules to lubricate the trading process. Here's a clever one I recommend: have an "obvious" gag gift with a hidden $50 gift card in it. This encourages trading of the weirder gifts, which otherwise tend to languish with the original person who opened them. And no trading is no fun! <b>The best white elephant parties have a good mix of gifts: some tacky, some bizarre, and some genuinely useful.</b> When buying a white elephant gift, try to pick an interesting item that falls into one of those three categories. And put some thought into it-- don't just bring yet another bottle of wine, or the DVD du jour. Boring!
</p>
<p>
After participating in white elephant parties at Vertigo and my previous job, I began to wonder about the origin of the term "white elephant". The best answer I found was in <a href="http://www.houseogroove.com/cuppa/Articles.php?mat=adef&amp;pg=167">this blog post</a>:
</p>
<p>
</p>
<blockquote>
<b>white elephant</b>
<p>
1. A costly possession requiring so much upkeep that it becomes a burden.
</p>
<p>
2. Something no longer wanted by its owner.
</p>
<p>
In [Thailand], the rare albino elephant was sacred, and each new one born belonged to the king. Moreover, it was forbidden to kill such an elephant or to use it for work. Therefore, the story goes, whenever the king wished to punish an obnoxious courtier, he'd make him a present of one of these pale pachyderms.
</p>
<p>
<img alt="image placeholder" >
</p>
<p>
It was a gift to be dreaded, however. Recipients could neither use the elephant nor get rid of it -- and inevitably went broke trying to keep it fed. Nowadays, the expression white elephant is used to apply more generally to any burdensome possession.
</p>
</blockquote>
<p>
It's a great story, but it's amost certainly anecdotal. And white elephants aren't actually white. Because they're mostly hairless animals, albino elephants read as <a href="http://news.bbc.co.uk/2/hi/south_asia/3991861.stm">more of a mottled grey or pink</a>, as you can see in <a href="http://www.pbs.org/wnet/nature/megryan/photo_pop_green/images/popup2.jpg">this closeup photo</a>.
</p>
<p>
Perhaps the best thing about white elephant parties is that they relieve us of the gifting burden. <b>Buying a completely inappropriate gift for someone is way easier than trying to figure out what they might actually like.</b> My wife and family complain that I'm notoriously hard to buy for. That's what happens when you grow up and realize that you're still a big kid with, er.. a lot more money. If you're trying to figure out what to buy for someone like that, I highly recommend <a href="http://www.kk.org/cooltools/index.php">Kevin Kelly's Cool Tools list</a>. He digs up some amazing, obscure stuff. But what else would you expect from <a href="http://www.kk.org/narrative/index.php">the ex-executive editor of Wired?</a>
</p>
<p>
I tend to enjoy the wackier side of the white elephant gift exchange. Here are some memorable white elephant gifts from previous exchanges:
</p>
<p>
</p>
<ul>
<li>a full-sized top hat
</li>
<li>Henna tattoo kit
</li>
<li>Bottle of Jack Daniels
</li>
<li>Unopened boxed copy of Windows 3.1
</li>
<li>Barbie calendar
</li>
<li>Handheld blood alcohol level tester
</li>
<li>Cow flashlight (complete with moo sound effect)
</li>
</ul>
<p>
What are some of your most memorable white elephant gifts?
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2005-12-28T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/of-white-elephants-and-gifting/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ New Year's Resolutions -- for Microsoft ]]></title>
<link>https://blog.codinghorror.com/new-years-resolutions-for-microsoft/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
For better or worse, I've been a Microsoft fan since Windows 3.1. <b>Microsoft is far from perfect, but the alternatives were always so much worse.</b> Can you imagine a dystopian future where we're all running IBM's OS/2 2004 and Lotus Notes Express? Brr. <a href="http://blogs.vertigosoftware.com/jatwood/archive/2005/08/11/1366.aspx">I get a chill just thinking about it</a>. The other contenders have similar glaring flaws. Oracle*? Intel? Sun? Apple? Thanks, but no thanks. To <a href="http://www.quotationspage.com/quote/24926.html">quote Winston Churchill</a>:
</p>
<p>
</p>
<blockquote><i>
Many forms of Government have been tried, and will be tried in this world of sin and woe. No one pretends that democracy is perfect or all-wise. Indeed, it has been said that democracy is the worst form of government except all those other forms that have been tried from time to time.
</i></blockquote>
<p>
Microsoft succeeds not because they're an evil monopoly, but because they release decent products that are relatively easy to use. <a href="http://www.seattleweekly.com/features/0330/news-microsoft.php">Most of the time</a>.
</p>
<p>
Personally, I think Microsoft's biggest enemy isn't Google, Linux, Yahoo, or the relegation of PCs to a niche. <b>Microsoft's biggest enemy is Microsoft.</b> The company has grown so large that it can't turn the massive battleship fast enough to respond to competitive pressures. The BusinessWeek article <a href="http://businessweek.com/magazine/content/05_39/b3952001.htm">Troubling Exits at Microsoft</a> outlines the scale problems Microsoft faces:
</p>
<p>
</p>
<blockquote>
<i>
Some workers express frustration that Microsoft is so busy protecting its PC-based businesses that it comes up short when competing on the Web. Take the customer relationship management (CRM) market -- software that companies use to track sales and customer service activities. Microsoft targeted it 2 1/2 years ago with a traditional software package, Microsoft CRM. Today roughly 4,000 companies run the software for nearly 100,000 staff. Not bad, but Microsoft hasn't been nearly as successful as Salesforce.com Inc., a trailblazer of Web-based CRM software, with 308,000 users at 17,000 companies.
</i><p>
The secret to Salesforce.com's success: the speed with which it can update its software. Microsoft last updated its original CRM software in January, 2004, with plans for a new version in first quarter, 2006. Meanwhile, Salesforce is constantly fixing bugs and adds features without interruption to the customer or added expense. All customers need to do is open a Web browser to run the program. Microsoft CRM boss Brad Wilson argues that business software is complex and best sold as a package that customers run on their own computers. "This is really about business process where you've got multiple steps," Wilson says. "It is a much more extensive thing that often requires a lot of people, a lot of time, and a lot of resources."
</p>
</blockquote>
<p>
Perhaps most tellingly, it's been five years since the release of Windows XP. That's <a href="http://en.wikipedia.org/wiki/History_of_Microsoft_Windows#Timeline">the longest gap between Windows releases ever.</a>
</p>
<p>
There's also internal criticism at <a href="http://minimsft.blogspot.com/">the Mini-Microsoft blog</a>, which if anything, is evidence that corrective forces are already at work within Microsoft. <b>Microsoft, the company everyone loves to hate, has adopted transparency and blogging aggressively.</b> So aggressively, in fact, you'd almost mistake them for a Web 2.0 company. For example, Scott Koon says <a href="http://www.lazycoder.com/weblog/index.php/archives/2005/12/27/scott-guthrie-is-the-best-thing-going-for-aspdotnet/">the product manager for ASP.NET is the best thing going for it</a>. I agree. I can point to a dozen Microsoft blogs off the top of my head that are absolutely amazing-- incredibly smart, articulate people any talented developer would be privileged to work with.
</p>
<p>
But blogging and transparency alone won't be enough. What else can Microsoft do to shed the bureaucracy problem? <b>If you were Microsoft, what would your new year's resolutions be?</b> Here are a few of my suggestions:
</p>
<p>
</p>
<ul>
<li>
<b>For Windows products, release betas earlier and to larger audiences.</b> Incorporate substantial user feedback before the product ships. Office 12 and Visual Studio 2005 are good examples of how to do this-- but make sure there's ample time to actually <i>implement</i> the suggestions and not just defer all the suggestions to some unspecified future release.
</li>
<li>
<b>For web-based solutions, do away with formal releases entirely and treat them as works in progress</b>, ala <a href="http://weblogs.asp.net/scottgu/archive/2005/06/28/416185.aspx">Atlas</a>.
</li>
<li>
<b>Stop being shy about releasing service packs.</b> Why does Visual Studio 2003 have no service packs after nearly 3 years? Because it's bug free? Yeah.
</li>
<li>
<b>Don't let <a href="http://minimsft.blogspot.com/2005_06_01_minimsft_archive.html">eeyore design your products</a></b>.
<blockquote>
<i>
.. if you reward people for demonstrating that they excel at process excellence then, well, hell, forget if you actually ship features. Look at all these pretty, beguiling graphs about promising features! And fetch me a crop of dithering middle managers! If you openly reward and promote people for killing work by bemoaning the risk and the testing cost and localization impact of each feature and interrogating a DCR as if it were Dan Brown shackled in-front of a wild-eyed, hot-poker wielding Pope, well, everyone is going to grab pitchforks and jump on that "No can do! No can ship!" bandwagon.
</i><p>
It makes me think of how many feature meetings I've had and what a small percent of those features have actually ever shipped. Not that every feature is a good idea, but it's damn near wake-worthy sometimes for a feature to actually get out into shipping bits. Que Eeyore: "Oh no. Now we have to support it. I suppose a hotfix request will come in any moment now..."
</p>
</blockquote>
</li>
</ul>
<p>
Most of these suggestions are ways to speed up the software development cycle at Microsoft. The hallmark of Web 2.0 companies is that they evolve faster, as ex-Microsoft employee Mark Lucovsky, who now works for Google, <a href="http://mark-lucovsky.blogspot.com/2005/02/shipping-software.html">so famously pointed out</a>:
</p>
<p>
</p>
<blockquote><i>
When an Amazon engineer fixes a minor defect, makes something faster or better, makes an API more functional and complete, how do they "ship" that software to me? What is the lag time between the engineer completing the work, and the software reaching its intended customers? A good friend of mine investigated a performance problem one morning, he saw an obvious defect and fixed it. His code was trivial, it was tested during the day, and rolled out that evening. By the next morning millions of users had benefited from his work. Not a single customer had to download a bag of bits, answer any silly questions, prove that they are not software thieves, reboot their computers, etc. The software was shipped to them, and they didn't have to lift a finger. Now that's what I call shipping software.
</i></blockquote>
<p>
I think Microsoft is doing the right things-- <i>but they need to do them a lot faster</i>. Company size and red tape be damned. Otherwise that <a href="http://www.micropersuasion.com/2005/03/microsoft_offic.html">much-maligned dinosaur advertising campaign for Microsoft Office</a> is going to seem awfully prophetic in retrospect.
</p>
<p>
* <a href="http://www.amazon.com/exec/obidos/ASIN/0060008768/codihorr-20">What's the difference between God and Larry Ellison?</a>
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2005-12-31T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/new-years-resolutions-for-microsoft/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ Filesystems Aren't a Feature ]]></title>
<link>https://blog.codinghorror.com/filesystems-arent-a-feature/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
Don Park recently made <a href="http://www.docuverse.com/blog/donpark/EntryViewPage.aspx?guid=27ea0bf8-abda-40f4-aa23-493461c54f26">an interesting observation about how his family uses the computer</a>:
</p>
<p>
</p>
<blockquote>
When I observe how my wife and son uses the family computer, I can't help noticing how little use they have for the desktop. They look bewildered when I open the Windows Explorer. <b>To them, file open or file save dialog is where the files go. My Documents? It's just an icon they never touch.</b>
</blockquote>
<p>
I've observed the same filesystem phobia many times in many different users, including my wife. When you observe the same problem across so many users, you have to wonder-- <b>isn't the real problem the filesystem itself?</b> <a href="http://jef.raskincenter.org/home/index.html">Jef Raskin</a> has a lot to say about this in <a href="http://www.amazon.com/exec/obidos/ASIN/0201379376/codihorr-20">The Humane Interface</a>, starting with filenames:
</p>
<p>
</p>
<blockquote>
File names are bothersome when you are about to save work, because you have to stop in the middle of your activity, which is trying to store your work away, and invent a file name. Creating names is an onerous task: you are required to invent, on the spot and in a few moments, a name that is unique, memorable, and within the naming conventions of the filesystem you are using. At that moment, the question of a file name is not your locus of attention; preserving your work is.
<p>
File names are also a nuisance when you have to retrieve a file. The name you thought up was probably not particularly memorable, and you probably forgot it after a few weeks (or less). I for one, can rarely remember a file name unless it is quite recent. Even looking through lists of filenames is frustrating. Just what is in that file labeled "notes ybn 32"? The name seemed so clever and memorable when I created it. Then, too, many files are nearly the same. How many different, creative, readily remembered names can you think up for letters to your accountant about last year's taxes? Filing them by date may be useful, but how many of us remember that the letter about the deduction for the company truck was written on August 14?
</p>
</blockquote>
<p>
Raskin's modest proposal to solve this conundrum is nothing less than <b>the complete elimination of the filesystem</b>:
</p>
<p>
</p>
<blockquote>
There should be no distinction between a file name and a file. A human mind can more effectively use a fast, whole-text search engine, so that any word or phrase from the file can serve as a key to it. (Eventually, we'd want more: a request for "a letter about dragonflies" would [search] for something that had the form of a letter and looked not only for the word dragonfly but also related terms and expressions, such as Odonata-- in case dragonflies had been referred to by their scientific name-- and if no instances of such letters were found, the search would look for nonletter documents, and so forth, extending out to networked computers and the internet.) You do not remember the content of "Letter 12/21/92 to Jim" when you see that title, but you do remember that you once wrote to Jim about the blue Edsel that ran across your eyeglasses. A search on Edsel is likely to find only one or two entries on your whole system-- unless you are an Edsel fancier, in which case you would probably choose another pattern on which to search. <b>An unlimited length file name is a file. The content of a text file is its own best name.</b>
</blockquote>
<p>
Raskin actually shipped products that lacked filesystems entirely in the mid 80's -- the standalone <a href="http://www.old-computers.com/museum/doc.asp?c=642&amp;st=1">Canon Cat</a> and the Apple //e add-in card version, the <a href="http://www.digibarn.com/collections/parts/swyft-card/">SwyftCard</a>. Both were critical if not popular successes:
</p>
<p>
</p>
<blockquote>
This discussion is not theoretical: on the <a href="http://www.jagshouse.com/swyft.html">SwyftWare and Canon Cat products</a>, the elimination of file names, directories, and the various mechanisms usually provided for manipulating them proved one of their most successful features.
</blockquote>
<p>
I remember reading about the SwyftCard when I was a teenage Apple //c owner and not quite comprehending what it was, or what it did. Like the Canon Cat, it was clearly far ahead of its time-- maybe too far ahead to sell. If you're curious about the LEAP interface used in both products, there's <a href="http://rchi.raskincenter.org/index.php?title=Home">a Windows port called "Archy" available at the Raskin Center</a>.
</p>
<p>
Raskin isn't the only notable UI figure to have serious misgivings about the filesystem, though. <a href="http://www.uidesign.net/2000/interviews/cooper1.html">Alan Cooper</a> derides it for an entire chapter of <a href="http://www.amazon.com/exec/obidos/ASIN/0764526413/codihorr-20">About Face</a>, Rethinking Files and Save:
</p>
<p>
</p>
<blockquote>
<b>The implementation model of the file system runs contrary to the mental model almost all users bring to it.</b> Most users picture electronic files like printed documents in the real world, and they imbue them with the behavioral characteristics of these real objects. Users visualize two salient facts about all documents: First, there is only one document; and second, it belongs to them. The file system's implementation model violates both of these rules. There are always two copies of the document, and they both belong to the program.
<p>
Every data file, every document, and every program, while in use by the computer, exists in two places at once: on disk and in main memory. The user, however, imagines his document as a book on a shelf. Let's say it is a journal. Occasionally, it comes down off the shelf to have something added to it. There is only one journal, and it either resides on the shelf or it resides in the user's hands. On the computer, the disk drive is the shelf, and main memory is the place where editing takes place, equivalent to the user's hands. But in the computer world, the journal doesn't come off the shelf. Instead a copy is made, and that copy is what resides in computer memory. As the user makes changes, he is actually making changes to the copy in memory, while the original remains untouched on disk. When the user is done and closes the document, the program is faced with a decision: whether to replace the original on disk with the changed copy from memory, or to discard the altered copy. From the programmer's point of view, equally concerned with all possibilities, this choice could go either way. From the software's implementation model point of view, the choice is the same either way. However, from the user's point of view, there is no decision to be made at all. He just made his changes and now he is just putting the document away. If this were happening with a paper journal in the physical world, the user would have pulled it off the shelf, penciled in some additions, and then replaced it on the shelf. It's as if the shelf were to speak up, asking him if he really wants to keep those changes!
</p>
</blockquote>
<p>
Alan proposes a less radical solution than Jef: <b>instead of doing away with the filesystem, do everything you can to hide it from the user</b>. This includes automatic saving with no prompts, automatic versioning, etcetera. The end result is a rebranded File menu:
</p>
<p>
<img alt="image placeholder" >
</p>
<p>
Cooper closes the chapter with a single design tip: <b>disks are a hack, not a design feature.</b> We can't afford computers with 50 gigabytes of non-volatile main memory, so hard drives and filesystems are a necessity for permanent storage. But just because us programmers are stuck with the annoying two-copy filesystem model doesn't mean we have to mindlessly subject users to it, either.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2006-01-02T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/filesystems-arent-a-feature/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ I Heart Cheatsheets ]]></title>
<link>https://blog.codinghorror.com/i-heart-cheatsheets/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
I'm a huge fan of <a href="http://www.codinghorror.com/blog/archives/000030.html">Beagle Brothers</a> style <a href="http://www.turbo-2.com/apple/#dl">cheat sheets</a>, because nothing promotes the illusion of mastery like a <b>densely packed chart of obscure reference information</b>:
</p>
<p>
</p>
<table>
<tr>
<td>
<img alt="image placeholder" >
</td>
<td>
<img alt="image placeholder" >
</td>
</tr>
<tr>
<td>
<img alt="image placeholder" >
</td>
<td>
<img alt="image placeholder" >
</td>
</tr>
</table>
<p>
Just throw some of those babies up on your walls and people will know that they're clearly dealing with a <i>coding genius!</i>
</p>
<p>
<a href="http://www.visibone.com/">VisiBone</a> makes great modern equivalents of these classic references, and they're available in <a href="http://www.visibone.com/products/cardcollection.html">dense card</a>, <a href="http://www.visibone.com/html/foldouts.html">dense foldout</a>, <a href="http://www.visibone.com/products/browserbook.html">large print book</a>, and <a href="http://www.visibone.com/products/chartsuite.html">huge wall chart</a> formats. The Visibone <a href="http://www.visibone.com/javascript/foldouts.html">regular expression reference</a> is the best concise regex reference I've found to date -- and there's a <a href="http://www.visibone.com/regular-expressions/">free online version</a>, too. It is limited to the JavaScript regex syntax, but that's 98 percent of what most people will need.
</p>
<p>
I've seen the <a href="http://addedbytes.com/css/css-cheat-sheet/">CSS Cheat Sheet</a> before, but I didn't realize there's an <b>entire set of cheatsheets freely available from <a href="http://addedbytes.com/cheat-sheets/">the same site</a></b>:
</p>
<p>
</p>
<ul>
<li>
<a href="http://addedbytes.com/cheat-sheets/asp-vbscript-cheat-sheet/">ASP/VBscript</a>
</li>
<li>
<a href="http://addedbytes.com/design/html-character-entities-cheat-sheet/">HTML Character Entities</a>
</li>
<li>
<a href="http://addedbytes.com/javascript/javascript-cheat-sheet/">JavaScript</a>
</li>
<li>
<a href="http://addedbytes.com/php/mysql-cheat-sheet/">MySQL</a>
</li>
<li>
<a href="http://addedbytes.com/cheat-sheets/mod_rewrite-cheat-sheet/">Apache mod_rewrite</a>
</li>
<li>
<a href="http://addedbytes.com/css/css-cheat-sheet/">CSS</a>
</li>
<li>
<a href="http://addedbytes.com/php/php-cheat-sheet/">PHP</a>
</li>
<li>
<a href="http://addedbytes.com/resources/colour-chart/">RGB Hex Color</a>
</li>
</ul>
<p>
These are all conveniently provided in PDF or PNG formats. If you're a Microsoft .NET programmer, there's no shortage of cheatsheets for you as well:
</p>
<p>
</p>
<ul>
<li>
<a href="http://www.microsoft.com/downloads/details.aspx?FamilyID=6bb41456-9378-4746-b502-b4c5f7182203&amp;DisplayLang=en">Visual Basic 2005 Keyboard Reference</a>
</li>
<li>
<a href="http://www.microsoft.com/downloads/details.aspx?FamilyID=c15d210d-a926-46a8-a586-31f8a2e576fe&amp;DisplayLang=en">Visual C# 2005 Keyboard Reference</a>
</li>
<li>
<a href="http://www.microsoft.com/downloads/details.aspx?FamilyID=bccf84f4-4136-48b2-b4ec-83eaa484da20&amp;DisplayLang=en">Visual C++ Keyboard Reference</a>
</li>
<li>
<a href="http://john-sheehan.com/blog/wp-content/uploads/msnet-formatting-strings.pdf">Format String</a>
</li>
<li>
<a href="http://john-sheehan.com/blog/wp-content/uploads/aspnet-life-cycles-events.pdf">ASP.NET 2.0 Page Lifecycle and Events</a>
</li>
<li>
<a href="http://john-sheehan.com/blog/wp-content/uploads/vs2005-code-snippets.pdf">Visual Studio 2005 C# code snippets</a>
</li>
</ul>
<p>
If you don't see the one you want, here are few other sites that aggregate cheatsheets. Many of them are open-source / UNIX oriented, but they run the gamut.
</p>
<p>
</p>
<ul>
<li>
<a href="http://www.drweb.de/weblog/weblog/?p=571">Dr. Web's Cheat Sheet List</a>
</li>
<li>
<a href="http://mypage.bluewin.ch/yuppi/links/cheatsheets.html">Bluewin's Cheatsheet Sites</a>
</li>
</ul>
<p>
Know of any other good cheatsheets not listed here? Share in the comments!
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2006-01-03T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/i-heart-cheatsheets/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ Getting Back to Web Basics ]]></title>
<link>https://blog.codinghorror.com/getting-back-to-web-basics/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
Every few years, Jakob Nielsen takes websites to task with a Top Ten Web Design Mistakes article. Although things have clearly improved since <a href="http://www.useit.com/alertbox/9605a.html">the original 1996 list</a>, I'm particularly concerned that <b>in the competitive frenzy to get all JavaScripted up for Web 2.0, we may be defeating the very simplicity that made the web so popular</b>. Nielsen shares this concern:
</p>
<p>
</p>
<blockquote>
<i>
<a href="http://www.useit.com/alertbox/designmistakes.html">This year's list of top problems</a> clearly proves the need to get back to Web design basics. There's much talk about new fancy "Web 2.0" features on the Internet industry's mailing lists and websites, as well as at conferences. But users don't care about technology and don't especially want new features. They just want quality improvements in the basics:
<ul>
<li>text they can read;
</li>
<li>content that answers their questions;
</li>
<li>navigation and search that help them find what they want;
</li>
<li>short and simple forms (streamlined registration, checkout, and other workflow); and
</li>
<li>no bugs, typos, or corrupted data; no linkrot; no outdated content.
</li>
</ul>
</i><p>
Anytime you feel tempted to add a new feature or advanced technology to your site, first consider whether you would get a higher ROI by spending the resources on polishing the quality of what you already have. Most companies, e-commerce sites, government agencies, and non-profit organizations would contribute more to their website's business goals with better headlines than with any new technology (aside from a better search engine, of course).
</p>
</blockquote>
<p>
Of course, Web 2.0 isn't just JavaScript. But according to Paul Graham, JavaScript is one of <a href="http://www.paulgraham.com/web20.html">the three key characteristics that define Web 2.0</a>:
</p>
<p>
</p>
<blockquote>
<i>
One ingredient of its meaning is certainly Ajax, which I can still only just bear to use without scare quotes. Basically, <b>what "Ajax" means is "Javascript now works."</b> And that in turn means that web-based applications can now be made to work much more like desktop ones.
</i><p>
In fact <a href="http://www.codinghorror.com/blog/archives/000479.html">the new generation of software is being written way too fast for Microsoft even to channel it, let alone write their own in house</a>. Their only hope now is to buy all the best Ajax startups before Google does. And even that's going to be hard, because Google has as big a head start in buying microstartups as it did in search a few years ago. After all, Google Maps, the canonical Ajax application, was the result of a startup they bought.
</p>
</blockquote>
<p>
I've visited quite a few Ajax sites that <b>committed the cardinal sin of the web: they broke the back button.</b> Nothing demonstrates an utter disregard for the user quite like breaking the back button does. Going "back" is the second most common user activity after clicking a hyperlink. Didn't we learn our lesson with &lt;frame&gt;? Frame based layouts are so widely reviled for their address bar and back button breaking ways that they have been banished to <a href="http://www.useit.com/alertbox/9612.html">freak-in-a-sideshow status</a>. And yet when an Ajax app breaks the back button, it's no big deal, it's an acceptable side-effect of all that cool client-side processing?
</p>
<p>
Well, it is a big deal, and it isn't acceptable. I hate to single out everyone's favorite whipping boy, but it's the most recent example:
</p>
<ol>
<li>Visit <a href="http://www.live.com">http://www.live.com</a>
</li>
<li>Click the Add Content link
</li>
<li>Search for anything; I used "news"
</li>
<li>Now click the back button
</li>
</ol>
<p>
I don't care how many fancy client-side features your site has-- if you break the back button, you broke the internet for your users. I can't emphasize this enough.
</p>
<p>
A big part of the web's ease of use is basic visibility-- if you can see it, you can click it. Nothing hidden. Nothing up our sleeves. But the minute you throw a drop-down menu on your page, you've broken that contract with the user. That's why <b>drop-down menus don't belong on the web</b>. And yet we can't seem to get away from the damn things.
</p>
<p>
<a href="http://www.amazon.com/">Amazon</a>, of all places, has an incredibly annoying DHTML menu on their home page. Just mouse over the "See All 32 Product Categories" tab. Is it really necessary for this tab to spawn an aggravating DHTML javascript popup, complete with its own click-interrupting animation? It's disconcerting to accidentally mouse over this area and have a popup blasted in your face. Why not just let me click the link and see the categories, like every other web page I've ever visited?
</p>
<p>
Worse, many sites' implementations of drop-down menus are erratic and inferior to the menus in the operating system. Consider the <a href="http://www.3leaf.com">3leaf site</a>: why can't I click on the Services menu, while all the others are clickable? Why doesn't the pointer change to indicate that I'm clicking on a hyperlink? <a href="http://www.codinghorror.com/blog/archives/000397.html">The future of drop-down menus is uncertain even in Windows</a>; shoehorning a marginal GUI convention on today's web is asking for trouble. Better to avoid these problems altogether by ditching drop-down menus entirely.
</p>
<p>
<a href="http://www.shauninman.com/plete/">Shaun Inman's site</a>, which was inexplicably nominated for a <a href="http://2005.bloggies.com/">best-designed bloggie award</a>, is truly painful to visit. It reads like a laundry list of Nielsen's complaints:
</p>
<p>
</p>
<ul>
<li>The font is tiny by default, on both IE and Firefox
</li>
<li>Visited links are shown in unreadable strikeout font
</li>
<li>Crazy, confusing top and bottom navigation slide-out panels
</li>
</ul>
<p>
Shaun Inman seems to be a well-regarded web designer-- shouldn't he know better? Or is it the Web 2.0 kool-aid? If that's what it takes to get a bloggie design award, I'm sure hoping <a href="http://web.utk.edu/~gwhitney/awful/awful2.html">this guy</a> starts a blog, because he's a shoo-in for 2006.
</p>
<p>
I don't want to turn this into a rant session, so I'll stop here. <b>Clever JavaScript on your web page does not exempt you from good web design.</b> Instead of spending all this time exerting maximum cleverness to transcend the weakesses of the web medium, It might be a better idea to play to the web's strengths-- such as <a href="http://bravenewword.typepad.com/brave_new_word/2005/11/web_developers_.html%0A">speeding up how fast your pages load</a>, or avoiding <a href="http://blog.outer-court.com/archive/2005-12-31-n34.html">recent ill-advised design trends</a>. And whatever you do, <i>don't break the freaking back button</i>.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2006-01-04T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/getting-back-to-web-basics/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ The Impossibly Small PC: Nano-ITX ]]></title>
<link>https://blog.codinghorror.com/the-impossibly-small-pc-nano-itx/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
VIA's Nano-ITX fits an entire PC motherboard into an <b>impossibly small 12 by 12 centimeter format</b>:
</p>
<p>
<img alt="image placeholder" >
</p>
<p>
This board has been gestating for a while at VIA, and according to <a href="http://nanoitx.blogspot.com/">the nanoitx blog</a>, it's evidently because of interference and heat problems presented by the extremely small form factor. But a retail board was <a href="http://www.mini-itx.com/news/10246161/">sighted in Japan's Akiba district in late November</a>, so it can't be too far off now.
</p>
<p>
</p>
<table width="600">
<tr>
<td valign="top">
<table width="100%">
<tr>
<td>
<b>Format</b>
</td>
<td>
<b>Size in cm</b>
</td>
</tr>
<tr>
<td>
<a href="http://www.via.com.tw/en/products/mainboards/nano_itx/epia_n/index.jsp">Nano-ITX</a>
</td>
<td>12 x 12
</td>
</tr>
<tr>
<td>
<a href="http://www.mini-itx.com/hardware/intro.asp">Mini-ITX</a>
</td>
<td>17 x 17
</td>
</tr>
<tr>
<td>
<a href="http://www.tomshardware.com/2005/01/05/casing_out_microatx/">Micro-ATX</a>
</td>
<td>24.4 x 24.4
</td>
</tr>
<tr>
<td>
<a href="http://www.pctechguide.com/01mboards_FlexATX.htm">Flex-ATX</a>
</td>
<td>22.9 x 19.1
</td>
</tr>
<tr>
<td>
<a href="http://www.formfactors.org/FFDetail.asp?FFID=1&amp;CatID=1">Standard ATX</a>
</td>
<td>30.5 x 24.4
</td>
</tr>
</table>
</td>
<td valign="top">
<img alt="image placeholder" >
</td>
</tr>
</table>
<p>
If you've ever purchased a motherboard, chances are it was standard ATX size. The ITX specifications are essentially a VIA creation, but detailed information on the other form factors is available at <a href="http://www.formfactors.org/formfactor.asp">formfactors.org</a>
</p>
<p>
The Nano-ITX will be available in two versions: fanless 800 mhz for ~$300 and a 1 ghz version that requires a small fan for ~$350. You'd need a few more pieces to make a complete mini-PC, though:
</p>
<p>
</p>
<ul>
<li>40gb 2.5" IDE drive, $65
</li>
<li>512mb SODIMM, $45
</li>
<li>Slim DVD drive, $45
</li>
<li>Nano-ITX case and power supply, ~$100 (?)
</li>
</ul>
<p>
<b>It'd be easy to build a PC smaller than a Mac Mini using a Nano-ITX board</b>. Just don't expect a lot of power; the VIA CPUs aren't exactly barn-burners. The VIA boards are fine for basic web browsing and productivity tasks with undemanding users, but if you need more than that, you'll want a <a href="http://www.epiacenter.com/modules.php?name=News&amp;file=article&amp;sid=374">Pentium M Mini-ITX motherboard</a>.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2006-01-05T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/the-impossibly-small-pc-nano-itx/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ The Zen of Mustard and Pickles ]]></title>
<link>https://blog.codinghorror.com/the-zen-of-mustard-and-pickles/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
A co-worker and I went over to Scott's house today at around 1pm PST to pick something up for work. Scott just got a new television, so he demoed it for us, flipping through the channels, comparing HD signals to regular signals and so forth. As we were doing this we happened across <a href="http://www.boingboing.net/2006/01/06/moment_of_trash_tv_c.html">this exact episode of the Maury Povich show featured on Boing Boing</a>:
</p>
<p>
<img alt="image placeholder" >
</p>
<p>
Quite a Zen moment. It could be worse. Your fear of mustard and pickles could be ruining your life.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2006-01-06T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/the-zen-of-mustard-and-pickles/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ Anisotropic Filtering ]]></title>
<link>https://blog.codinghorror.com/anisotropic-filtering/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
I've talked about <a href="http://www.codinghorror.com/blog/archives/000367.html">Bilinear vs. Bicubic filtering</a> before in the context of 2D images, but bilinear filtering is a key ingredient in 3D graphics, too. When a texture is applied to a polygon, the texture may be scaled up or down to fit, depending on your screen resolution. This is done via bilinear filtering.
</p>
<p>
A full discussion of 3D graphics is way outside the scope of this post-- plus I don't want to bore you to death with concepts like <a href="http://www.gamasutra.com/features/19981211/flavell_01.htm">trilinear filtering and mip-mapping</a>. But I do want to highlight one particular peculiarity of bitmap scaling in 3D graphics. <b>As you rotate a texture-mapped polygon away from the viewer, simple bilinear filtering and mip-mapping cause the texture to lose detail as the angle increases:</b>
</p>
<p>
<img alt="image placeholder" >
</p>
<p>
Now, <b>some detail loss with distance is intentional</b>. That's essentially what <a href="http://www.gamedev.net/reference/articles/article1233.asp">mip-mapping</a> is. if we didn't mip-map into the distance, the image would look extremely noisy:
</p>
<p>
</p>
<table>
<tr>
<td>No mip-mapping
</td>
<td>Mip-mapping
</td>
</tr>
<tr>
<td>
<img alt="image placeholder" >
</td>
<td>
<img alt="image placeholder" >
</td>
</tr>
</table>
<p>
The problem with simple mip-mapping and bilinear filtering is that they're <i>too simple</i>. Much more detail should be retained into the distance. And <b>that's what anisotropic filtering does</b>:
</p>
<p>
<img alt="image placeholder" >
</p>
<p>
Because you're typically viewing most of the polygons in the world at an angle at any given time, <b>anisotropic filtering has a profound impact on image quality</b>. Here are some screenshots I took from the <a href="http://www.flatoutgame.com/">PC game FlatOut</a> which illustrate the dramatic difference between standard filtering and anisotropic filtering:
</p>
<p>
</p>
<table>
<tr>
<td>Standard filtering
</td>
<td>16x Anisotropic filtering
</td>
</tr>
<tr>
<td>
<img alt="image placeholder" >
</td>
<td>
<img alt="image placeholder" >
</td>
</tr>
<tr>
<td>
<img alt="image placeholder" >
</td>
<td>
<img alt="image placeholder" >
</td>
</tr>
</table>
<p>
These are detail elements cropped from the full-size 1024x768 screenshots: <a href="http://www.codinghorror.com/blog/images/flatout-no-aniso-full.jpg">standard</a>, <a href="http://www.codinghorror.com/blog/images/flatout-aniso-full.jpg">anisotropic</a>.
</p>
<p>
Proper anisotropic filtering is <a href="http://www.xbitlabs.com/articles/video/display/gf3-anis-filtering.html">computationally expensive</a>, even on dedicated 3D hardware. And the performance penalty increases with resolution. ATI was the first 3d hardware vendor to introduce some <a href="http://www.3dcenter.org/artikel/2003/11-21_a_english.php">anisotropic filtering optimizations</a>-- some would say shortcuts-- in their cards which allowed much higher performance. There is one small caveat, however: at some angles, textures don't get fully filtered. ATI effectively optimized for common angles you'd see in 3D level geometry (floor, walls, ceiling) at the cost of the others.
</p>
<p>
For better or worse, these optimizations are now <a href="http://www.xbitlabs.com/articles/video/display/nv40_16.html">relatively standard now</a> even <a href="http://www.xbitlabs.com/articles/video/display/geforce6600g-games_3.html">on nVidia cards</a>. I think it's a reasonable tradeoff for the increased image quality and performance.
</p>
<p>
In my opinion, <b>anisotropic filtering is the most important single image quality setting available on today's 3D hardware</b>. It's like <a href="http://www.urbandictionary.com/define.php?term=Freedom+Rock&amp;defid=1564108">Freedom Rock</a>: make sure you've turned it up, man!
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2006-01-08T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/anisotropic-filtering/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ Cleaning Word's Nasty HTML ]]></title>
<link>https://blog.codinghorror.com/cleaning-words-nasty-html/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
I recently wrote a Word 2003 document that I <a href="http://blogs.vertigosoftware.com/jatwood/archive/2006/01/06/Guidelines_and_Tips_for_Pure_CSS_Layouts.aspx">later turned into a blog post</a>. The transition between Word doc and HTML presented some problems. Word offers two HTML options in its save dialog: "Save as HTML" and "Save as Filtered HTML". In practice, that means <b>you get to choose between totally nasty HTML and slightly less nasty HTML.</b>
</p>
<p>
I searched around for any existing Word cleanup solutions and found the <a href="http://textism.com/wordcleaner/">Textism Word HTML Cleaner</a>, and <a href="http://tim.mackey.ie/CleanWordHTMLUsingRegularExpressions.aspx">Tim Mackey's set of regular expressions</a>. The Textism solution is great, but requires a subscription for files over 20kb. And I wasn't quite happy with Tim's regular expressions, either. So I created my own Word HTML cleanup solution.
</p>
<p>
This c# 2.0 code removes all unnecessary cruft from Word documents saved as HTML, stripping the HTML down to the bare-bones basics:
</p>
<p>
</p>
<pre language="c#">
static void Main(string[] args)
{
if (args.Length == 0 || String.IsNullOrEmpty(args[0]))
{
Console.WriteLine("No filename provided.");
return;
}
string filepath = args[0];
if (Path.GetFileName(filepath) == args[0])
{
filepath = Path.Combine(Environment.CurrentDirectory, filepath);
}
if (!File.Exists(args[0]))
{
Console.WriteLine("File doesn't exist.");
}
string html = File.ReadAllText(filepath);
Console.WriteLine("input html is " + html.Length + " chars");
html = CleanWordHtml(html);
html = FixEntities(html);
filepath = Path.GetFileNameWithoutExtension(filepath) + ".modified.htm";
File.WriteAllText(filepath, html);
Console.WriteLine("cleaned html is " + html.Length + " chars");
}
static string CleanWordHtml(string html)
{
StringCollection sc = new StringCollection();
// get rid of unnecessary tag spans (comments and title)
sc.Add(@"&lt;!--(w|W)+?--&gt;");
sc.Add(@"&lt;title&gt;(w|W)+?&lt;/title&gt;");
// Get rid of classes and styles
sc.Add(@"s?class=w+");
sc.Add(@"s+style='[^']+'");
// Get rid of unnecessary tags
sc.Add(
@"&lt;(meta|link|/?o:|/?style|/?div|/?std|/?head|/?html|body|/?body|/?span|![)[^&gt;]*?&gt;");
// Get rid of empty paragraph tags
sc.Add(@"(&lt;[^&gt;]+&gt;)+&amp;nbsp;(&lt;/w+&gt;)+");
// remove bizarre v: element attached to &lt;img&gt; tag
sc.Add(@"s+v:w+=""[^""]+""");
// remove extra lines
sc.Add(@"(nr){2,}");
foreach (string s in sc)
{
html = Regex.Replace(html, s, "", RegexOptions.IgnoreCase);
}
return html;
}
static string FixEntities(string html)
{
NameValueCollection nvc = new NameValueCollection();
nvc.Add(""", "&amp;ldquo;");
nvc.Add(""", "&amp;rdquo;");
nvc.Add("Ã¢â‚¬â€œ", "&amp;mdash;");
foreach (string key in nvc.Keys)
{
html = html.Replace(key, nvc[key]);
}
return html;
}
</pre>
<p>
Some caveats:
</p>
<ol>
<li>I haven't tested this with anything but Word 2003 documents saved as HTML. No guarantees on Word 97, Word 2000, Word XP, etcetera.
</li>
<li>Tables, basic formatting, and images are preserved as simple HTML. I have only tested it with a handful of Word 2003 docs saved as HTML, but it has worked fine on the few I tried.
</li>
<li>This requires .NET 2.0; I used .NET 2.0 because it's less code.
</li>
</ol>
<p>
If you're feeling frisky, you can cut and paste the code above to build it yourself. Or you can just download it, lazyweb style:
</p>
<p>
</p>
<ul>
<li>
<a href="http://www.codinghorror.com/blog/files/WordHtmlCleaner-vsnet2005-solution.zip">Download the VS.NET 2005 solution</a> (3kb)
</li>
<li>
<a href="http://www.codinghorror.com/blog/files/WordHtmlCleaner-executable.zip">Download the CleanWordHtml console application</a> (3kb, requires <a href="http://www.microsoft.com/downloads/details.aspx?FamilyID=0856EACB-4362-4B0D-8EDD-AAB15C5E04F5&amp;displaylang=en">.NET 2.0 runtime</a>)
</li>
</ul>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2006-01-09T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/cleaning-words-nasty-html/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ Flattening Arrow Code ]]></title>
<link>https://blog.codinghorror.com/flattening-arrow-code/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>I often encounter code like this:</p>
<pre language="c#">if (rowCount &gt; rowIdx)
    {
      if (drc[rowIdx].Table.Columns.Contains("avalId"))
      {
        do
        {
          if (Attributes[attrVal.AttributeClassId] == null)
          {
            // do stuff
          }
          else
          {
            if (!(Attributes[attrVal.AttributeClassId] is ArrayList))
            {
              // do stuff
            }
            else
            {
              if (!isChecking)
              {
                // do stuff
              }
              else
              {
                // do stuff
              }
            }
          }
          rowIdx++;
        }
        while (rowIdx &lt; rowCount &amp;&amp; GetIdAsInt32(drc[rowIdx]) == Id);
      }
      else
        rowIdx++;
    }
    return rowIdx;
  }  </pre>  
<p>The excessive nesting of conditional clauses pushes the code out into an arrow formation:</p>
<table width="550">
<tr>
<td valign="middle">
<pre>
if
  if
    if
      if
        do something
      endif
    endif
  endif
endif
</pre>
</td>
<td valign="middle">
<img alt="image placeholder" >
</td>

</tr>
</table>
<p>And you know you're definitely in trouble when <b>the code you're reading is regularly exceeding the right margin on a typical 1280x1024 display</b>. This is the <a href="http://c2.com/cgi/wiki?ArrowAntiPattern">Arrow Anti-Pattern</a> in action.</p>
<p>One of my primary refactoring tasks is "flattening" arrow code like this. Those sharp, pointy barbs are dangerous! Arrow code has a high <a href="http://www.sei.cmu.edu/str/descriptions/cyclomatic_body.html">cyclomatic complexity</a> value – a measure of how many distinct paths there are through code:</p>
<blockquote>
<b>Studies show a correlation between a program's cyclomatic complexity and its error frequency</b>. A low cyclomatic complexity contributes to a program's understandability and indicates it is amenable to modification at lower risk than a more complex program. A module's cyclomatic complexity is also a strong indicator of its testability.</blockquote>
<p>Where appropriate, I flatten that arrow code by doing the following:</p>
<ol>
<li>
<b>Replace conditions with guard clauses.</b> This code..
<p>
</p>
<pre>
if (SomeNecessaryCondition)
{
  // function body code
}
</pre>
<p>
.. works better as a guard clause:
</p>
<p>
</p>
<pre>
if (!SomeNecessaryCondition)
{
  throw new RequiredConditionMissingException;
}
// function body code
</pre>
<p>
</p>
</li>
<li>
<b>Decompose conditional blocks into seperate functions.</b> In the above example, we're in a do..while loop which could be decomposed:
<p>
</p>
<pre>
do
{
  ValidateRowAttribute(drc[rowIdx]);
  rowIdx++;
}
while(rowIdx &lt; rowCount &amp;&amp; GetIdAsInt32(drc[rowIdx]) == Id);
</pre>
<p>
</p>
</li>
<li>
<b>Convert negative checks into positive checks.</b> As a broad rule, I prefer to put the positive comparison first and let the negative comparison fall out naturally into the else clause. I think this reads a lot better and, more importantly, avoids the "I ain't not never doing that" syndrome:
<p>
</p>
<pre>
if (Attributes[attrVal.AttributeClassId] is ArrayList)
{
  // do stuff
}
else
{
  // do stuff
}
</pre>
<p>
</p>
</li>
<li>
<b>Always opportunistically return as soon as possible from the function.</b> Once your work is done, get the heck out of there! This isn't always possible – you might have resources you need to clean up. But whatever you do, you have to abandon the ill-conceived idea that there should only be one exit point at the bottom of the function.</li>
</ol>
<p>The goal is to have code that scrolls vertically a lot… but not so much horizontally.</p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2006-01-10T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/flattening-arrow-code/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ Return to the Planet of Managed Code Bloat ]]></title>
<link>https://blog.codinghorror.com/return-to-the-planet-of-managed-code-bloat/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
I just updated my post <a href="http://www.codinghorror.com/blog/archives/000271.html">The Bloated World of Managed Code</a> with baseline memory footprints for Console and Winforms apps in .NET 2.0.
</p>
<p>
I'll admit <b>I am a bit of a hypocrite when it comes to managed code apps</b>. Now that tiny, native BitTorrent clients are available such as <a href="http://www.utorrent.com/">uTorrent</a> and <a href="http://www.bitcomet.com/">BitComet</a>, I just can't force myself to suffer through the Java (<a href="http://azureus.sourceforge.net/">Azeureus</a>) and Python (<a href="http://pingpong-abc.sourceforge.net/">ABC</a>) clients. They're nice enough, but I want small, clean and fast for this kind of app. And where's the .NET BitTorrent client, anyway?
</p>
<p>
Managed code can be <a href="http://www.codinghorror.com/blog/archives/000234.html">plenty</a> <a href="http://www.codinghorror.com/blog/archives/000299.html">fast</a>, but I've always said that <a href="http://www.codinghorror.com/blog/archives/000366.html">managed code isn't appropriate for every kind of application</a>. It's another tool in your toolbox, but not the only one.
</p>
<p>
One particularly egregious example of <b>managed code misuse</b>, however, is in <a href="http://www.anandtech.com/video/showdoc.aspx?i=2188&amp;p=2">ATI's Catalyst video card drivers</a>. The "control center" is a client app which allows you to manipulate the settings. It's written in .NET 1.1 and launched via a button in the graphics driver tab.
</p>
<p>
<img alt="image placeholder" >
</p>
<p>
It's a reasonable <i>concept</i>, but in practice-- it sucks. Even on a clean Pentium 4 3.2 machine with 1gb of RAM, loading the control center for the first time feels like almost a full minute of waiting for something to happen. As <a href="http://blogs.msdn.com/junfeng/archive/2004/09/19/231628.aspx">commenters on Junfeng Zhang's log point out</a>, this is likely due more to poor coding than anything else. But what really irks me is that <b>all I want to do is adjust a few minor video card settings</b>. Is it really appropriate to have such a heavyweight app for such a simple task?
</p>
<p>
Which brings me back to using managed code in appropriate places. Although there was a bit of a hubbub <a href="http://www.microsoft-watch.com/article2/0,1995,1820607,00.asp">about managed code and Vista last year</a>, Microsoft is pursuing managed code aggressively, as Dan Fernandez notes in <a href="http://blogs.msdn.com/danielfe/archive/2005/12/16/504847.aspx">Debunking the Microsoft's not using Manged Code Myth</a>. He provides a succinct list of recent Microsoft products and the number of lines of managed code in each one:
</p>
<p>
</p>
<ul>
<li>Visual Studio 2005: 7.5 million lines
</li>
<li>SQL Server 2005: 3 million lines
</li>
<li>BizTalk Server: 2 million lines
</li>
<li>Visual Studio Team System: 1.7 million lines
</li>
<li>Windows Presentation Foundation: 900K lines
</li>
<li>Windows Sharepoint Services: 750K lines
</li>
<li>Expression Interactive Designer: 250K lines
</li>
<li>Sharepoint Portal Server: 200K lines
</li>
<li>Content Management Server: 100K lines
</li>
</ul>
<p>
Managed code is great. But a world where everything is managed code-- including the operating system and essential utilities-- is still pretty far off.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2006-01-11T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/return-to-the-planet-of-managed-code-bloat/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ Regex Performance ]]></title>
<link>https://blog.codinghorror.com/regex-performance/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>I was intrigued by a recent comment from a Microsoft Hotmail developer on <a href="http://spaces.msn.com/members/hsuehw/Blog/cns!1popOEGeDYOoHJubtIoXsS-A!123.entry">the ptifalls they've run into while upgrading Hotmail to .NET 2.0</a>:</p>
<blockquote>Regular Expressions can be very expensive.  Certain (unintended and intended) strings may cause RegExes to exhibit exponential behavior.  We've taken several hotfixes for this.  RegExes are so handy, but devs really need to understand how they work; we've gotten bitten by them. </blockquote>
<p>I'm definitely guilty of this. When I throw a regex together, I never worry about performance; I know the target strings will generally be far too small to ever cause a problem. But you may not need a large string to cause a major performance bottleneck – it's entirely possible to formulate regular expression patterns that consume <strong>exponentially more CPU time for each additional input character</strong>, as noted in <a href="http://mail.python.org/pipermail/python-dev/2003-May/035916.html">this python mailing list posting</a>:</p>
<blockquote>I'm acutely aware of that one because it burns people regularly.  These aren't cases of hostile input, they're cases of innocently "erroneous" input.  After maybe a year of experience, people using a backtracking regexp engine usually figure out how to write a regexp that doesn't go resource-crazy when parsing strings that *do* match.  Those are the inputs the program expects.  But all inputs can suffers errors, and a regexp that works well when the input matches can still go nuts trying to match a non-matching string, consuming an exponential amount of time trying an exponential number of futile backtracking possibilities.</blockquote>
<p>The example provided in that email is a pattern of</p>
<pre>(x+x+)+y
</pre>
<p>Which means, in regex-ese:</p>
<ul>
<li>One or more of the character X </li>
<li>One or more of the character X </li>
<li>One or more of the previous two matches combined </li>
<li>Followed by a single character Y </li>
</ul>
<p>I tried this pattern in <a href="http://www.regexbuddy.com/cgi-bin/affref.pl?aff=jatwood">RegexBuddy</a>'s debugger first, with a simple 20 character test string:</p>
<pre>xxxxxxxxxxxxxxxxxxxx
</pre>
<p><a href="http://www.regexbuddy.com/cgi-bin/affref.pl?aff=jatwood"><img alt="image placeholder" >
<p>This is no problem in RegexBuddy, because it has an advanced regular expression engine that throttles regex expressions before they hang your machine. Now let's try it in .NET and see what happens:</p>
<pre>Dim pattern As String = "(x+x+)+y"
Dim sw As New Stopwatch
sw.Start()
Regex.Match("xxxxxxxxxxxxxy", pattern)
sw.Stop()
Console.Write("Valid match took ")
Console.Write(sw.ElapsedMilliseconds)
Console.WriteLine(" ms")
Dim s As String = "xx"
For n As Integer = 1 To 24
sw.Start()
Regex.Match(s, pattern)
sw.Stop()
Console.Write("Invalid match of ")
Console.Write(s.Length)
Console.Write(" chars took ")
Console.Write(sw.ElapsedMilliseconds)
Console.WriteLine(" ms")
s = s + "x"
Next
</pre>
<p>Here's the output from this console app:</p>
<pre>Valid match took 0 ms
Invalid match of 2 chars took 0 ms
Invalid match of 3 chars took 0 ms
Invalid match of 4 chars took 0 ms
Invalid match of 5 chars took 0 ms
Invalid match of 6 chars took 0 ms
Invalid match of 7 chars took 0 ms
Invalid match of 8 chars took 0 ms
Invalid match of 9 chars took 0 ms
Invalid match of 10 chars took 1 ms
Invalid match of 11 chars took 2 ms
Invalid match of 12 chars took 3 ms
Invalid match of 13 chars took 6 ms
Invalid match of 14 chars took 13 ms
Invalid match of 15 chars took 25 ms
Invalid match of 16 chars took 50 ms
Invalid match of 17 chars took 100 ms
Invalid match of 18 chars took 202 ms
Invalid match of 19 chars took 403 ms
Invalid match of 20 chars took 808 ms
Invalid match of 21 chars took 1624 ms
Invalid match of 22 chars took 3257 ms
Invalid match of 23 chars took 6432 ms
Invalid match of 24 chars took 12857 ms
Invalid match of 25 chars took 25657 ms
</pre>
<p>Looks like <a href="http://www.codinghorror.com/blog/2007/09/everything-is-fast-for-small-n.html">n-squared behavior</a> to me.</p>
<p>I can see where the Hotmail devs would be freaking out about this, considering matching against only 20 characters eats almost a full second of server CPU time! It's too bad the .NET regex engine doesn't implement some kind of throttling or exception behavior when the cost of the regex grows too large.</p>
<p>The author of RegexBuddy calls this <strong>catastrophic backtracking</strong>, and he has a page describing <a href="http://www.regular-expressions.info/catastrophic.html">how to avoid catastrophic backtracking</a> in your regular expressions:</p>
<blockquote>The solution is simple. When nesting repetition operators, <strong>make absolutely sure that there is only one way to match the same match</strong>. If repeating the inner loop 4 times and the outer loop 7 times results in the same overall match as repeating the inner loop 6 times and the outer loop 2 times, you can be sure that the regex engine will try all those combinations.</blockquote>
<p>The essential part of the customer example he gives is converting a dot (any character) match to a [^,rn] (not comma, not carriage return, not newline) match. In other words – be as specific as possible!</p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2006-01-12T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/regex-performance/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ Is there an optimal piracy rate? ]]></title>
<link>https://blog.codinghorror.com/is-there-an-optimal-piracy-rate/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
I've recently been struggling with a number of <a href="http://www.codinghorror.com/blog/archives/000476.html">racing sims</a> I bought to use after work hours in our <a href="http://blogs.vertigosoftware.com/jatwood/archive/2006/01/13/1861.aspx">new racing cockpit</a>. I'm a big believer in supporting developers. I'm a developer myself. But digging around for CDs or DVDs is impractical for dedicated gaming rigs, so I install no-cd patches when I can.
</p>
<p>
Unfortunately, finding no-cd patches is getting harder and harder because of <a href="http://en.wikipedia.org/wiki/StarForce">a relatively new copy protection known as StarForce</a>. It's a kernel-mode device driver that talks directly to the IDE hardware to validate the CD or DVD. Beyond that, the technical details are sketchy, probably to prevent crackers from gaining the upper hand. But the net result is that <b>no-cd patches for games with the latest StarForce protection are rare</b>.
</p>
<p>
For example, <a href="http://www.gamespot.com/pc/action/splintercell3/">Splinter Cell: Chaos Theory</a>, which was released early last year, has no known working no-cd patch as of today-- almost a year later. That's <i>amazing</i>. There are legions of hackers and crackers out there. Fending them off for this long is completely unprecedented. For as long as there has been software, there have been crackers-- and they've always won.
</p>
<p>
My hat is off to <a href="http://www.star-force.com/">the developers of StarForce</a>. However you feel about copy protection, they've accomplished what many thought could never be done. Now, before you spam the comments with diatribes about how much StarForce sucks, how it kills small children and formats your hard drive, etcetera, take the time to read their point of view in this <a href="http://www.firingsquad.com/features/starforce_interview/">interview with a StarForce rep</a>. It has their side of the story, and many additional details. I'll also add that I played, completed, and sold Splinter Cell Chaos Theory earlier this year without once knowing that I was playing a StarForce protected game.
</p>
<p>
Now, this is not to say that StarForce can't be circumvented. It can. The primary method of circumventing StarForce at the moment is to <b>stop using parallel ATA optical drives</b>:
</p>
<p>
</p>
<ol>
<li>physically unplug your optical drives*
</li>
<li>use a special utility to completely disable parallel ATA on your PC (that's assuming you're using serial ATA hard drives)
</li>
<li>switch to external USB optical drives
</li>
</ol>
<p>
It's kind of a scorched earth solution, but it's the only thing that works. And once you've done that, you're still not done! The very, very latest versions of StarForce monitor hard drive access at the time of disc validation to see if that "DVD" you mounted is really being read from the hard drive. So you have to load an additional device driver that hides the physical drive access from StarForce.
</p>
<p>
All in all, a giant pain in the ass. <b>Which is entirely the point of copy protection</b>.
</p>
<p>
But is StarForce <i>too much</i> copy protection? Chris Anderson maintains that <a href="http://longtail.typepad.com/the_long_tail/2005/08/just_enough_pir.html">there is an optimal level of piracy for any industry</a>, due to the following effects:
</p>
<p>
</p>
<ul>
<li>Remember <a href="http://en.wikipedia.org/wiki/Dongle">dongles</a>? Any protection technology that is really difficult to crack is probably too cumbersome to be accepted by consumers.
</li>
<li>Piracy can let you raise your prices. Rather than pricing between the absolute economic bottom and the top, you cede the bottom to piracy-- no price can compete with free-- and set your price between the middle and the top.
</li>
<li>Piracy helps seed technology markets. The ubiquity of pirated Windows and Office have made them de-facto national standards in many countries.
</li>
</ul>
<p>
Chris proposes that a certain level of piracy is simply good business:
</p>
<p>
</p>
<blockquote><i>
When all these effects are considered, it appears that there actually is an optimal level of piracy. That right level would vary from industry to industry. Today the estimated piracy rates are 33% for CDs and 15% for DVDs. The industries say that's too high, but most anti-copying technologies they've brought in to lower that figure have proven unpopular. Would even tighter lock-downs help? Probably not. Maybe 15%-30% is simply the market saying that this is the optimal rate of piracy for those industries, and any effort to lower that significantly would either choke demand or push even more people to the dark side.
</i></blockquote>
<p>
I tend to agree. I think DVDs are an excellent example of this "good enough" theory in action. They have a basic level of copy protection, but they're priced so reasonably very few people bother to pirate them. The people that continue to pirate DVDs probably wouldn't buy them no matter how low they were priced.
</p>
<p>
* no, disabling them in the BIOS doesn't work. StarForce talks directly to the ATA hardware at the kernel level.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2006-01-14T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/is-there-an-optimal-piracy-rate/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ Software Developers and Asperger's Syndrome ]]></title>
<link>https://blog.codinghorror.com/software-developers-and-aspergers-syndrome/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>When I read <a href="http://wesnerm.blogs.com/net_undocumented/2003/09/asperger_syndro.html">Wesner Moise's post on Asperger's Syndrome</a>, I wasn't surprised. Many of the best software developers I've known share <a href="http://en.wikipedia.org/wiki/Asperger's_syndrome">some of the traits associated with Asperger's Syndrome</a>:</p>
<ol>
<li>
<b>Social impairments</b><br>
<i>It is worth noting that because it is classified as a spectrum disorder, some people with Asperger syndrome are nearly normal in their ability to read and use facial expressions and other subtle forms of communication. However, this ability does not come naturally to most people with Asperger syndrome. Such people must learn social skills intellectually, delaying social development.</i>
</li>
<li>
<b>Narrow, intense interests</b><br>
<i>Asperger syndrome can involve an intense and obsessive level of focus on things of interest. [..] Particularly common interests are means of transport (such as trains), computers, math (particularly specific aspects, such as pi), wikipedia, and dinosaurs. Note that all of these last items are normal interests in ordinary children; the difference in Asperger children is the unusual intensity of their interest.</i>
</li>
<li>
<b>Speech and language peculiarities</b><br>
<i>Literal interpretation is another common but not universal hallmark of this condition. Attwood gives the example of a girl with Asperger syndrome who answered the telephone one day and was asked "Is Paul there?". Although the Paul in question was in the house, he was not in the room with her, so after looking around to ascertain this, she simply said "no" and hung up. The person on the other end had to call back and explain to her that he meant for her to find him and get him to pick up the telephone.</i>
</li>
</ol>
<p>I often joke that you have to be a little obsessive-compulsive to be a good developer. Software development ..</p>
<ul>
<li>skews heavily male</li>
<li>is fixated with order, syntax, and literal interpretation</li>
<li>allows you to deal with machines instead of people</li>
<li>requires a nearly obsessive focus</li>
</ul>
<p>.. just like Asperger's.</p>
<p>This isn't a new idea; there's a classic Wired article on <a href="http://www.wired.com/wired/archive/9.12/aspergers_pr.html">the disturbing connection between programming and asperger's syndrome</a>:</p>
<blockquote>
<p>It's a familiar joke in the industry that many of the hardcore programmers in IT strongholds like Intel, Adobe, and Silicon Graphics - coming to work early, leaving late, sucking down Big Gulps in their cubicles while they code for hours - are residing somewhere in Asperger's domain. Kathryn Stewart, director of the Orion Academy, a high school for high-functioning kids in Moraga, California, calls Asperger's syndrome "the engineers' disorder." Bill Gates is regularly diagnosed in the press: His single-minded focus on technical minutiae, rocking motions, and flat tone of voice are all suggestive of an adult with some trace of the disorder. Dov's father told me that his friends in the Valley say many of their coworkers "could be diagnosed with ODD - they're odd." In Microserfs, novelist Douglas Coupland observes, "I think all tech people are slightly autistic."</p>
<p>Though no one has tried to convince the Valley's best and brightest to sign up for batteries of tests, the culture of the area has subtly evolved to meet the social needs of adults in high-functioning regions of the spectrum. In the geek warrens of engineering and R&amp;D, social graces are beside the point. You can be as off-the-wall as you want to be, but if your code is bulletproof, no one's going to point out that you've been wearing the same shirt for two weeks. Autistic people have a hard time multitasking - particularly when one of the channels is face-to-face communication. Replacing the hubbub of the traditional office with a screen and an email address inserts a controllable interface between a programmer and the chaos of everyday life. Flattened workplace hierarchies are more comfortable for those who find it hard to read social cues. A WYSIWYG world, where respect and rewards are based strictly on merit, is an Asperger's dream.</p>
</blockquote>
<p>There's a documented <b>genetic component</b> to this spectrum of developmental disorders, which has unfortunate implications for areas where software engineers congregate:</p>
<blockquote>
<p>High tech hot spots like the Valley, and Route 128 outside of Boston, are a curious oxymoron: They're fraternal associations of loners. In these places, if you're a geek living in the high-functioning regions of the spectrum, your chances of meeting someone who shares your perseverating obsession (think Linux or Star Trek) are greatly expanded. As more women enter the IT workplace, guys who might never have had a prayer of finding a kindred spirit suddenly discover that she's hacking Perl scripts in the next cubicle.</p>
<p>One provocative hypothesis that might account for the rise of spectrum disorders in technically adept communities like Silicon Valley, some geneticists speculate, is an increase in assortative mating. Superficially, assortative mating is the blond gentleman who prefers blondes; the hyperverbal intellectual who meets her soul mate in the therapist's waiting room. There are additional pressures and incentives for autistic people to find companionship - if they wish to do so - with someone who is also on the spectrum. Grandin writes, "Marriages work out best when two people with autism marry or when a person marries a handicapped or eccentric spouse.... They are attracted because their intellects work on a similar wavelength."</p>
<p>At clinics and schools in the Valley, the observation that most parents of autistic kids are engineers and programmers who themselves display autistic behavior is not news. And it may not be news to other communities either. Last January, Microsoft became the first major US corporation to offer its employees insurance benefits to cover the cost of behavioral training for their autistic children. One Bay Area mother told me that when she was planning a move to Minnesota with her son, who has Asperger's syndrome, she asked the school district there if they could meet her son's needs. "They told me that the northwest quadrant of Rochester, where the IBMers congregate, has a large number of Asperger kids," she recalls. "It was recommended I move to that part of town."</p>
</blockquote>
<p>But it's ultimately a question of degree; who decides what is functional, what is normal? Hans Asperger, the Austrian psychiatrist who first identified the condition, once wrote <i>it seems that for success in science and art, a dash of autism is essential.</i></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2006-01-15T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/software-developers-and-aspergers-syndrome/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ Our Virtual Machine Future ]]></title>
<link>https://blog.codinghorror.com/our-virtual-machine-future/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>Lately I've been spending more and more time inside virtual machines. Whenever I need to try out a new bit of software, whether it's a small shell extension, or a giant product like Team System-- I tear off a new VM first. I don't want to junk up my primary install until I'm totally confident I know what that software does. It's guilty until proven innocent.</p>
<p>In fact, I'll go one step further. I think <strong>all software will eventually be distributed as virtual machine images.</strong> And why not? Consider the advantages:</p>
<ul>
<li>
<strong>It's the ultimate security sandbox.</strong> Too many scary vulnerabilities in crusty old IE6? You <a href="http://www.codinghorror.com/blog/archives/000347.html">can't stop clicking on dancing bunnies</a>? Just run your OS session in a virtual machine. At the end of every session, you blow it away. No spyware or virus is virulent enough to escape a VM. If you want to log in again, you tear off a new VM and start fresh. It's like formatting your hard drive every time you turn off your PC. And this doesn't have to be done at the OS level to be beneficial, either; why not selectively launch apps in their own private VMs?
<p> </p>
</li>
<li>
<strong>It makes software installation a no-brainer</strong>. Forget installation or setup.exe; just boot a fully pre-configured VM that has the application locked, loaded, and primed. Now you're up and running in seconds. That's the ultimate out of box experience!
</li>
<li>
<strong>The operating system doesn't matter.</strong> Who cares if your app requires Linux or OS X to run if I can boot it in a pre-configured VM within a few seconds? This could be a huge industry sea change -- albeit helped a lot by the way Apple has cemented x86 as <a href="http://www.codinghorror.com/blog/archives/000312.html">the industry standard CPU instruction set for the next millennium</a>. But on the plus side, think of the vast number of applications you can choose from once you no longer have to worry about OS choice.
</li>
<li>
<strong>New CPUs will accelerate VMs.</strong> Virtual machines are reasonably fast now. But Intel has their <a href="http://www.intel.com/technology/computing/vptech/">"vanderpool" technology</a> and AMD has an equivalent in <a href="http://enterprise.amd.com/Enterprise/serverVirtualization.aspx">"pacifica"</a>; both promise to radically speed up virtualization via dedicated hardware.
</li>
<li>
<strong>What else are we going to do with all this power?</strong> Within a few years, quad-core chips will be available on the desktop and dual-core will be bog-standard on all new PCs. Terabyte hard drives? Check. 64-bit memory addressing and more than 4 gigabytes of RAM? Check. Outside of gaming, there's a handful of legitimate uses for all that power. But to be truly pervasive on the desktop, virtual machines <em>need</em> all that power. </li>
</ul>
<p>And virtual machine software keeps getting cheaper, too. <a href="http://www.parallels.com/en/products/workstation/">Parallels Workstation</a> is only $45, and VMWare offers their <a href="http://www.vmware.com/products/player/">free player</a> which runs both VMWare and Virtual PC images. <a href="http://www.microsoft.com/windows/virtualpc/default.mspx">Virtual PC</a> is effectively free for any developer with an MSDN subscription.</p>
<p>All we really lack, I suppose, is VM built into the operating system as a first-class citizen rather than a standalone application. But the solipsist operating system is surely coming:</p>
<p> </p>
<blockquote><em> <a href="http://en.wikipedia.org/wiki/Solipsism">solipsism</a> (n): a theory holding that the self can know nothing but its own modifications and that the self is the only existent thing. </em></blockquote>
<p>Eventually, all applications will believe they're the only applications in the world. And they'll be right.</p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2006-01-16T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/our-virtual-machine-future/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ DIVX vs. DivX ]]></title>
<link>https://blog.codinghorror.com/divx-vs-divx/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
It's ironic that the popular <a href="http://en.wikipedia.org/wiki/DivX">DivX codec</a> has all but obliterated the identity of <b>the ill-fated DIVX pay-per-view rental system</b>.
</p>
<p>
</p>
<table width="700">
<tr>
<td align="right">
<a href="http://en.wikipedia.org/wiki/DivX"><img alt="image placeholder" >
</td>
<td align="center" width="50">
vs.
</td>
<td align="left">
<a href="http://en.wikipedia.org/wiki/DIVX"><img alt="image placeholder" >
</td>
</tr>
</table>
<p>
So what was <a href="http://en.wikipedia.org/wiki/DIVX">DIVX</a>?
</p>
<p>
</p>
<blockquote><i>
DIVX (Digital Video Express) was a rental format variation on the DVD player in which a customer would buy a DIVX disc -- physically similar to a DVD -- at a low cost, which would be able to be freely viewed up to 48 hours from its initial viewing. After this period, the disc could be viewed by paying a continuation fee, typically $3.25. DIVX discs could only be played on special DIVX/DVD combo players that needed to be connected to a phone line. DIVX Viewers had to set up an account that additional viewing fees could be charged to. The player would call an account server over the phone line to charge for viewing fees similar to the way DirecTV and Dish Network satellite systems handle pay-per-view. Viewers who wanted unlimited viewing of a particular disc could pay to convert the disc to "Silver" status for a special fee. The physical disc was not altered in any way. The viewer's account kept track of the status of each disc. The Silver disc could be kept for future viewing, resold, given away, or discarded.
</i></blockquote>
<p>
This particular bad idea was intensely unpopular online. In 1998 and early 1999, it felt like you couldn't visit a website without seeing an anti-DIVX banner plastered on it somewhere.
</p>
<p>
<img alt="image placeholder" >
</p>
<p>
The format barely lasted a year.
</p>
<p>
The DivX codec was introduced in 1998 and intentionally named to parody the besieged DIVX format:
</p>
<p>
</p>
<blockquote><i>
Early versions of DivX included only a codec, and were named "DivX ;-)", where the winking emoticon was a tongue-in-cheek reference to the failed DIVX system.
</i></blockquote>
<p>
The DivX codec has a rather storied history itself:
</p>
<p>
</p>
<table width="700">
<tr>
<td width="100">1998
</td>
<td>3.11 Alpha
</td>
<td>Codec created from an illegally hacked MPEG-4 video codec
</td>
</tr>
<tr>
<td>2001
</td>
<td>4.0
</td>
<td>DivX corporation formed; clean room codec "created" from OpenDivx project*
</td>
</tr>
<tr>
<td>2002
</td>
<td>5.0
</td>
<td>Codec improvements
</td>
</tr>
<tr>
<td>2005
</td>
<td>6.0
</td>
<td>Codec expanded to full media container format (eg, *.divx)
</td>
</tr>
</table>
<p>
The name replacement is so complete that the <a href="http://www.divx.com/">divx domain</a> has been subsumed as well. You can watch it change hands via <a href="http://web.archive.org/web/*/http://www.divx.com">the internet archive wayback machine</a>. The last DIVX snapshot is in October 1999; the site goes dark throughout 2000, and reappears in February 2001 as DivX.
</p>
<p>
It sure is funny when a little hacked codec name joke turns into a multi-million dollar business under the same exact name.
</p>
<p>
* The ethically questionable 2001 commercial DivX fork of the OpenDivx project is where the open source <a href="http://en.wikipedia.org/wiki/XviD">XviD</a> codec originates from. It's DivX backwards, naturally.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2006-01-18T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/divx-vs-divx/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ The World's Slowest Windows XP System ]]></title>
<link>https://blog.codinghorror.com/the-worlds-slowest-windows-xp-system/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
I'm not sure exactly why, but the guys at <a href="http://winhistory.de/more/386/xpmini_eng.htm">winhistory.de</a> managed to install Windows XP on a <b>20 megahertz Pentium 1</b> system with <b>32 megabytes of RAM</b>:
</p>
<p>
<a href="http://winhistory.de/more/386/xpmini_eng.htm"><img alt="image placeholder" >
</p>
<p>
That puts the XP in back in Windows XP -- Xtremely Pokey:
</p>
<p>
</p>
<blockquote>
<i>
The CPU is working at 60% of full capacity at the Desktop! Nowadays with a modern CPU you have to run many tasks in background to reach such a high level of work.
</i><p>
For this reason you had to have patience, very often. Do recognize the changing of the blue color on the screen before the "Welcome"-page?? At 20 MHz you can see all 8 blues line by line!
</p>
</blockquote>
Great stuff. The actual minimum system requirements for Windows XP are a 233 MHz CPU and 64 megabytes of RAM. But even a 20 MHz Pentium is still orders of magnitude more powerful than this <a href="http://www.computercloset.org/OsborneExecutive.htm">Osborne Executive</a>:
<p>
<img alt="image placeholder" >
</p>
<p>
Most people associate Osborne Computers with the Osborne Effect-- pre-announcing the next model too early and decimating the sales of your current models. But as it turns out, that's <a href="http://en.wikipedia.org/wiki/Osborne_effect">an urban legend</a>.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2006-01-19T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/the-worlds-slowest-windows-xp-system/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ 3D positional audio and HRTFs ]]></title>
<link>https://blog.codinghorror.com/3d-positional-audio-and-hrtfs/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
I've always been fascinated with 3d positional audio through <a href="http://www.codinghorror.com/blog/archives/000463.html">headphones</a>. The nice thing about headphones is that they don't bug your neighbors or your wife-- and they're actually <a href="http://www.dansdata.com/spkvshead.htm">the best way to hear surround sound, too</a>:
</p>
<p>
</p>
<blockquote>
<i>
But for some surround sound, particularly 3D positional computer audio, headphones can actually work better than speakers.
</i><p>
The reason for this is that you've only got two ears. The way you tell whether a sound's in front, behind or above you, rather than just to your left or your right, is by processing the complex differences in phase, time delay and frequency balance that're imparted to differently located sounds by nearby objects (like walls), and by the sonic characteristics of your head.
</p>
<p>
Your pinnae - the outer parts of your ears - strongly influence sound waves that pass through and bounce off them. 3D game audio uses Head Related Transfer Function (HRTF) algorithms to fake the effects of the pinnae, the head and various listening environments, so that injecting the sound straight into the ear canal can produce the impression of real 3D audio sources.
</p>
<p>
When you've got HRTF-massaged two-channel audio already, for instance when you're playing a game, headphones are obviously the best way to get the sound into your head. There's no way for speakers to do the job as well, because there's no way for them to stop each ear hearing the sound that's intended for the other.
</p>
</blockquote>
<p>
There's a long history of audiophile interest in stereo and binaural recordings, but 3d sound on a computer is <a href="http://www.hitl.washington.edu/scivw/EVE/I.B.1.3DSoundSynthesis.html">a bit different</a>:
</p>
<p>
</p>
<blockquote><i>
<ol>
<li>
<b>Monaural sound</b> is a recording of a sound with one microphone. No sense of sound positioning is present in monaural sound.
</li>
<li>
<b>Stereo sound</b> is recorded with two microphones several feet apart separated by empty space. Most people are familiar with stereo sound; it is heard commonly through stereo headphones and in the movie theater. When a stereo recording is played back, the recording from one microphone goes into the left ear, while the recording from the other microphone is channeled into the right ear. This gives a sense of the sound's position as recorded by the microphones. Listeners of stereo sound often perceive the sound sources to be at a position inside the listener's head -- that's because humans do not normally hear sounds this way, separated by empty space. The human head should be there acting as a filter to incoming sounds.
</li>
<li>
<b>Binaural recordings</b> sound more realistic, as they are recorded in a manner that more closely resembles the human acoustic system: with the recording microphones embedded in a dummy head. Binaural recordings sound closer to what humans hear in the real world; the dummy head filters sound in a manner similar to the human head.
</li>
<li>
<b>3D sound</b> attempts to take binaural recordings one step further by recording sounds with tiny probe microphones in the ears of a real person. These recordings are compared with the original sounds to compute the person's head-related transfer function. The HRTF is a linear function that is based on the sound source's position and takes into account many of the cues humans used to localize sounds. The HRTF is used to develop pairs of finite impulse response (FIR) filters for specific sound positions; each sound position requires two filters, one for the left ear, and one for the right. To place a sound at a certain position in virtual space, the set of FIR filters that correspond to the position is applied to the incoming sound, yielding spatial sound.
</li>
</ol>
</i></blockquote>
<p>
Your ear shape (a.k.a. your pinnae) has a dramatic effect on <a href="http://en.wikipedia.org/wiki/Sound_localization">how you hear sound</a>. But don't take my word for it -- hear it for yourself. The 3D hearing test page has <a href="http://www.waisman.wisc.edu/hdrl/take_Test.html">a binaurally recorded sound sample using eight different ear shapes</a>.
</p>
<p>
<a href="http://www.waisman.wisc.edu/hdrl/take_Test.html"><img alt="image placeholder" >
</p>
<p>
You can hear your PC sound card perform HRTFs using <a href="http://audio.rightmark.org/products/rm3ds.shtml">RightMark's 3DSound Positioning Accuracy test</a>. Note that you must switch to <b>DirectSound3D Hardware mode</b> (or better) via the System menu to hear anything more than stereo positioning!
</p>
<p>
<a href="http://audio.rightmark.org/products/rm3ds.shtml"><img alt="image placeholder" >
</p>
<p>
If your card supports EAX modes, try those too. However, when using EAX, make sure you switch to the "plain" environment for apples-to-apples testing. For some reason it defaults to "generic", which colors the sound a bit.
</p>
<p>
HRTF functions magically convert stereo sound into 3D sound, but they are <b>computationally expensive</b>. That's probably why DirectSound Software mode offers no HRTFs. You need an add-in sound card with hardware acceleration to achieve 3D sound with headphones. The first PC sound card to offer 3D positional sound was the <a href="http://en.wikipedia.org/wiki/A3D">Aureal Vortex via the A3D API</a> circa 1998. I was a huge fan. But unfortunately, Aureal isn't around any more.
</p>
<p>
So called "onboard" sound -- the kind you get on your motherboard for free -- has improved, but it generally has lower sound quality than a dedicated sound card, and it's certainly not capable of meaningful hardware acceleration. <b>Onboard sound is simply not an option if you're a gamer of any kind.</b> Although I grudgingly installed Creative sound cards in my PCs after the demise of Aureal, it was only because I had no other viable options. I always felt that Creative's 3D sound HRTF algorithms were never as good as Aureal's. Creative's <a href="http://www.soundblaster.com/products/x-fi/technology/">new X-Fi sound cards</a>, however, are finally poised to change that. For one thing, they have a lot more horsepower:
</p>
<p>
</p>
<table width="600">
<tr>
<td>Sound Blaster Live!</td>
<td>1998</td>
<td>2 million transistors
</td>
</tr>
<tr>
<td>Sound Blaster Audigy 2</td>
<td>2002</td>
<td>4.1 million transistors
</td>
</tr>
<tr>
<td>Pentium 4 "Northwood" 2.0GHz</td>
<td>2002</td>
<td>55 million transistors
</td>
</tr>
<tr>
<td>Sound Blaster X-Fi</td>
<td>2005</td>
<td>
<span style="color:red">51 million transistors</span>
</td>
</tr>
</table>
<p>
The X-Fi sound cards are also comically overpriced. <i>Three hundred bucks</i> for a sound card? But the lowest-end model, <b>the X-Fi XtremeMusic, sacrifices almost nothing compared to the fancier models and is priced within reason at around $110</b> online. That's still double the cost of an Audigy 2, but unlike the last umpteen zillion Creative sound card "upgrades", you get a much more powerful card this time with some truly useful new features:
</p>
<p>
</p>
<ul>
<li>Up to 128 simultaneous sounds
</li>
<li>Vastly improved CMSS-3D headphone HRTFs
</li>
<li>Real time Smart Volume Management aka dynamic range compression
</li>
<li>Real time upsampling of 16-bit sound to 24-bit
</li>
</ul>
<p>
If you're looking for performance improvements over an earlier Sound Blaster card, there are none. It's just more functionality with no performance loss. For more details, check out <a href="http://www.extremetech.com/article2/0,1697,1850381,00.asp">Extremetech's review of the X-Fi</a> by my pal Loyd Case.
</p>
<p>
I've been <a href="http://www.soundblaster.com/products/x-fi/technology/battlefield2/">testing the X-Fi with Battlefield 2</a>. It's one of the only two games that explicitly supports the new card's features at the moment (the other being the execrable Quake 4). I always play with headphones, and <b>I noticed the improved 3D sound HRTFs immediately</b>. The sound is also much richer with 128 voices; it's easy to exceed the previous limit of 64 simultaneous sounds in large multiplayer games. I'm very impressed. I also tried the card with Doom 3 using the <a href="http://soundblaster.com/Gaming/doom3/?downloadtypedesc=12">1.3 EAX patch</a> and noticed similar improvements.
</p>
<p>
Although the X-Fi is a wee bit spendy, I can heartily recommend <a href="http://castle.pricewatch.com/s/search.asp?s=+X-Fi+XtremeMusic+">the basic model</a> to fans of 3D audio and headphones. And if you want a clean, non-cluttered install, don't bother with the CD in the box. Just <a href="http://us.creative.com/support/downloads/">download the latest X-Fi drivers</a> from Creative's website and install those instead.
</p>
<p>
<img alt="image placeholder" >
</p>
<p>
The Creative Audio Console comes with the base driver, and it's all you need to configure the card.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2006-01-20T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/3d-positional-audio-and-hrtfs/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ Code Reviews: Just Do It ]]></title>
<link>https://blog.codinghorror.com/code-reviews-just-do-it/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>In <a href="http://www.processimpact.com/articles/humanizing_reviews.html">Humanizing Peer Reviews</a>, Karl Wiegers starts with a powerful pronouncement:</p>
<blockquote>
Peer review – an activity in which people other than the author of a software deliverable examine it for defects and improvement opportunities – is one of the most powerful software quality tools available. Peer review methods include inspections, walkthroughs, peer deskchecks, and other similar activities. After experiencing the benefits of peer reviews for nearly fifteen years, I would never work in a team that did not perform them.
</blockquote>
<p>After participating in code reviews for a while here at Vertigo, I believe that <b>peer code reviews are the single biggest thing you can do to improve your code.</b> If you're not doing code reviews <i>right now</i> with another developer, you're missing a lot of bugs in your code and cheating yourself out of some key professional development opportunities. As far as I'm concerned, my code isn't done until I've gone over it with a fellow developer.</p>
<p>But don't take my word for it. McConnell provides plenty of evidence for the efficacy of code reviews in <a href="http://www.amazon.com/exec/obidos/ASIN/0735619670/codihorr-20">Code Complete</a>:</p>
<blockquote>
<p>… software testing alone has limited effectiveness – the average defect detection rate is only 25 percent for unit testing, 35 percent for function testing, and 45 percent for integration testing. In contrast, <b>the average effectiveness of design and code inspections are 55 and 60 percent</b>. Case studies of review results have been impressive:</p>
<ul>
<li>In a software-maintenance organization, 55 percent of one-line maintenance changes were in error before code reviews were introduced. After reviews were introduced, only 2 percent of the changes were in error. When all changes were considered, 95 percent were correct the first time after reviews were introduced. Before reviews were introduced, under 20 percent were correct the first time.</li>
<li>In a group of 11 programs developed by the same group of people, the first 5 were developed without reviews. The remaining 6 were developed with reviews. After all the programs were released to production, the first 5 had an average of 4.5 errors per 100 lines of code. The 6 that had been inspected had an average of only 0.82 errors per 100. Reviews cut the errors by over 80 percent.</li>
<li>The Aetna Insurance Company found 82 percent of the errors in a program by using inspections and was able to decrease its development resources by 20 percent.</li>
<li>IBM's 500,000 line Orbit project used 11 levels of inspections. It was delivered early and had only about 1 percent of the errors that would normally be expected.</li>
<li>A study of an organization at AT&amp;T with more than 200 people reported a 14 percent increase in productivity and a 90 percent decrease in defects after the organization introduced reviews.</li>
<li>Jet Propulsion Laboratories estimates that it saves about $25,000 per inspection by finding and fixing defects at an early stage.</li>
</ul>
</blockquote>
<p>The only hurdle to a code review is finding a developer you respect to do it, and making the time to perform the review. Once you get started, I think you'll quickly find that every minute you spend in a code review is paid back tenfold.</p>
<p>If your organization is new to code reviews, I highly recommend Karl's book, <a href="http://www.amazon.com/exec/obidos/ASIN/0201734850/codihorr-20">Peer Reviews in Software: A Practical Guide</a>. The <a href="http://www.processimpact.com/reviews_book/reviews_book_toc.shtml">sample chapters</a> Karl provides on his website are a great primer, too.</p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2006-01-21T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/code-reviews-just-do-it/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ .. and a Pony! ]]></title>
<link>https://blog.codinghorror.com/and-a-pony/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
From the "why I don't read Robert Scoble any more" <a href="http://scobleizer.wordpress.com/2006/01/01/one-wish-for-2006/">department</a>:
</p>
<p>
</p>
<blockquote>
One thing I wish is that Web site developers/designers would look at their site on a small screen with limited bandwidth. So many sites suck really bad. I'm going to call these sites out with increasing frequency in 2006.
<p>
If your site makes you scroll for 20 minutes just to see your content, it sucks. It'll get called out.
</p>
<p>
If your site squeezes a column so that it's only one word wide, it sucks. It'll get called out.
</p>
<p>
My wish? Please try your site on a cell phone (tonight I was comparing sites on a Treo, on a Blackbery, and on my phone. My phone was best, but there were lots of sites that sucked on all three).
</p>
<p>
Millions of Web users are out there with cell phones. If you don't get your site to work properly with a cell phone, you're turning away customers and that sucks. It'll get called out.
</p>
</blockquote>
<p>
You know, it <i>would</i> be nice if <b>every single website was designed to scale perfectly across all resolutions from 176x220 to 1920x1440</b>.
</p>
<p>
It'd also be nice if trees were made of cotton candy, and rain was delicious lemonade.
</p>
<p>
This is what I refer to as <b>".. and a Pony!" thinking</b>: the person asking the question doesn't know that what they're asking for is essentially <i>impossible</i>. So you might as well throw a Pony in there while you're at it. Everyone loves Ponies.
</p>
<p>
<img alt="image placeholder" >
</p>
<p>
I don't mean to single Robert out here. I'm sure he's a nice guy, but he's the absolute poster child for this phenomenon; it comes up over and over again in his blog.
</p>
<p>
It'd be helpful if he actually offered any thoughts on exactly how one would go about implementing a web site that <b>scales up seamlessly seventy times in resolution</b>. But <a href="http://www.penny-arcade.com/comic/2001/06/22">why explain yourself when you can just use magic?</a>
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2006-01-23T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/and-a-pony/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ Dependency Avoidance ]]></title>
<link>https://blog.codinghorror.com/dependency-avoidance/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
Have you ever worked with developers that were <b>charter members of the third-party-control-of-the-month club</b>? You know the kind-- they never met a third party control they didn't like. They spend all day trolling downloads and experimenting with every tool listed on <a href="http://www.larkware.com/">The Daily Grind</a>. Which means deploying your solution is now a tricky balancing act of obtaining and installing the proper license files from a half-dozen different control vendors. Who all do things slightly differently. Oh, and don't forget to make sure the versions of all your controls are all up to date with the latest bugfixes, too.
</p>
<p>
These are also the kind of developers who are prone to adopt <a href="http://msdn.microsoft.com/practices/">giant, complex frameworks</a> just to get tiny additional bits of functionality. If you're not careful, your entire project is liable to come down with a severe case of <a href="http://blogs.sun.com/roller/page/swinger?anchor=frameworkitis_and_reuse">frameworkitis</a>.
</p>
<p>
I, on the other hand, think <b>anything outside the base framework is guilty until proven innocent</b>. I'll adopt third-party code, but as little as I can get away with, and <i>only</i> if it offers significant, proven benefit to the problem I'm working on. I've been burned too many times. My code may suck, but it's a constant level of sucking that I can plan around.
</p>
<p>
That's why I was heartened to read Joel's account of how the Excel team
<a href="http://www.joelonsoftware.com/articles/fog0000000007.html">aggressively avoids dependencies</a>:
</p>
<p>
</p>
<blockquote>
When I was the program manager in charge of the first implementation of Visual Basic for Applications, I put together a careful coalition of four, count them, four different teams at Microsoft to get custom dialog boxes in Excel VBA. The idea was complicated and fraught with interdependencies. There was a team called AFX that was working on some kind of dialog editor. Then we would use this brand new code from the OLE group which let you embed one app inside another. And the Visual Basic team would provide the programming language behind it. After a week of negotiation I got the AFX, OLE, and VB teams to agree to this in principle.
<p>
I stopped by Andrew Kwatinetz's office. He was my manager at the time and taught me everything I know. "The Excel development team will never accept it," he said. <b>"You know their motto? 'Find the dependencies -- and eliminate them.' They'll never go for something with so many dependencies."</b>
</p>
<p>
In-ter-est-ing. I hadn't known that. I guess that explained why Excel had its own C compiler.
</p>
<p>
By now I'm sure many of my readers are rolling on the floor laughing. "Isn't Microsoft stupid," you're thinking, "they refused to use other people's code and they even had their own compiler just for one product."
</p>
<p>
Not so fast, big boy! The Excel team's ruggedly independent mentality also meant that they always shipped on time, their code was of uniformly high quality, and they had a compiler which, back in the 1980s, generated pcode and could therefore run unmodified on Macintosh's 68000 chip as well as Intel PCs. The pcode also made the executable file about half the size that Intel binaries would have been, which loaded faster from floppy disks and required less RAM.
</p>
<p>
"Find the dependencies -- and eliminate them." When you're working on a really, really good team with great programmers, everybody else's code, frankly, is bug-infested garbage, and nobody else knows how to ship on time. When you're a cordon bleu chef and you need fresh lavender, you grow it yourself instead of buying it in the farmers' market, because sometimes they don't have fresh lavender or they have old lavender which they pass off as fresh.
</p>
</blockquote>
<p>
The .NET Framework was intended to be <b>the dependency to end all dependencies</b>. It's huge. It's also comprehensive and generally well-written. Any time you're reaching outside the framework for a giant swath of functionality, pause first and think about what you're trying to accomplish. Before you start <a href="http://www.codinghorror.com/blog/archives/000277.html">stacking dependencies</a> on top of <a href="http://msdn.microsoft.com/netframework/">the mother of all dependencies</a> itself, make sure what you're getting justifies that risk.
</p>
<p>
Is it possible to take dependency avoidance too far? Of course. The flip side of reducing dependencies too aggressively is the <a href="http://www.antipatterns.com/lavaflow.htm">Lava Flow anti-pattern</a>:
</p>
<p>
</p>
<blockquote>
As we delved into it, we interviewed many of the developers concerning certain components of the massive pages of code printed out for us. Over and over again we got the same answer, "I don't know what that class is for, it was written before I got here." We gradually realized that between 30 and 50%
of the actual code comprising this complex system was not understood or documented by any one currently working on it. Furthermore, as we analyzed it, we learned that the questionable code really served no purpose in the current system, rather it was mostly there from previous attempts or approached by long-gone developers. The current staff, while very bright, was loath to modify or delete code that they didn't write or didn't know what it did for fear of breaking something and not knowing why or how to fix it.
</blockquote>
<p>
I've never had a problem with lava flow because I am pathologically addicted to <a href="http://www.codinghorror.com/blog/archives/000057.html">deleting code</a>. I'm not afraid to get all <a href="http://polaris.gseis.ucla.edu/pagre/272/needless.html">Strunk and White</a> on that codebase. I don't care if it woulda, coulda, shoulda been used-- <i>is it being used right now?</i> No? Then it's gone. Period. If you need it back, well, that's why God invented source control systems.
</p>
<p>
I'm not against dependencies. Everything software developers do is one giant string of dependencies. I'm a pragmatist. <b>Strive to make your dependency stack as small as you possibly can.</b>
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2006-01-24T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/dependency-avoidance/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ Visual Design Patterns ]]></title>
<link>https://blog.codinghorror.com/visual-design-patterns/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
A recent post by Steve Makofsky reminded me that the excellent UI Patterns and Techniques site is now a book from O'Reilly -- <a href="http://www.amazon.com/exec/obidos/ASIN/0596008031/codihorr-20">Designing Interfaces</a>.
</p>
<p>
There's technically no reason to buy a book on visual design patterns when you can <a href="http://www.codinghorror.com/blog/archives/000386.html">find the same information online</a> ..
</p>
<ul>
<li>
<a href="http://www.welie.com/">GUI design patterns</a>
</li>
<li>
<a href="http://time-tripper.com/uipatterns/">UI Patterns and Techniques</a>
</li>
<li>
<a href="http://toastytech.com/guis/">The GUI Gallery</a>
</li>
<li>
<a href="http://www.guidebookgallery.org/">The GUIdebook</a>
</li>
</ul>
.. but what a glorious, infinitely browsable <b>full-color</b> book this is.  It's highly visual and truly does justice to the concept: a <a href="http://www.amazon.com/exec/obidos/ASIN/0201633612/codihorr-20">Design Patterns</a> for the eye instead of the mind. Sometimes atoms <i>are</i> better than bytes.
<p>
Unlike any of the Design Patterns in <a href="http://www.amazon.com/exec/obidos/ASIN/0201633612/codihorr-20">that famous book</a>, these patterns are <a href="http://www.codinghorror.com/blog/archives/000053.html">visible to your users</a>. Plan accordingly.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2006-01-25T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/visual-design-patterns/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ Google is the Help Menu ]]></title>
<link>https://blog.codinghorror.com/google-is-the-help-menu/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
Jensen Harris recently cited some Microsoft Office usability research which <a href="http://blogs.msdn.com/jensenh/archive/2005/11/29/497861.aspx">produced a rather counter-intuitive result</a>:
</p>
<p>
</p>
<blockquote>
One of the most interesting epiphanies I've had over the last few years seems on the surface like a paradox: "help" in Office is mostly used by experts and enthusiasts.
<p>
How can this be?  I think my biased assumption was that experts know how to use the software already and eager novices would be poring over the documentation trying to learn how to be more effective using it.
</p>
<p>
Yet, <b>in usability tests we see it again and again: novices and intermediates click around and experiment, experts try to reason things out and look them up in help</b>.
</p>
</blockquote>
<p>
Dispelling myths based on actual usability data. I love it. Jensen offers a few potential explanations for this phenomenon:
</p>
<p>
</p>
<ul>
<li>Only experts know the right "magic words" to search for.
</li>
<li>Users need a broader scope of help: not a recipe, but a community college course in cooking.
</li>
<li>Help requires a context switch-- it's difficult to look at help side-by-side with the software.
</li>
</ul>
<p>
While there's definitely merit to these observations, Jensen misses the biggest one. You need only read through a few of the many post comments to see what it is:
</p>
<p>
</p>
<blockquote>
It's been my experience that Office help often doesn't include anything useful, so I don't use it. For example, I was using Access and somehow became aware of the DoCmd object. It seemed like it would do what I want, but there is no help for it. How could this object with 100 different features have no online help? Luckily Google came to the rescue, pointing me directly to the microsoft.com page telling me all about it. Why wasn't the included in the help originally?
<p>
I once found an Excel function in the help that required I install one of the add-in tools to use it, but the help didn't mention this add-in at all. So I did a google search and found out what I needed to do to use this function.
</p>
<p>
I have to agree that the online help in Office is not the best. It is a great product, but when I need help I usually give up after examining the first 50 hits and the move directly to Google.
</p>
<p>
Regarding relevance, I would suggest adopting Google's algorithms for ranking. A Google search for "Excel operators" yields what I was looking for ("About calculation operators") as the second hit from Microsoft, with another relevant document (differences between 1-2-3 and Excel operators) being first. Excel 2002's help gives rankings 4 and 14 respectively, with most of the other hits having nothing whatsoever to do with operators.
</p>
<p>
I practically never use online help. However, I literally live and die by Google Groups. I am almost never the only person to encounter a problem or misunderstand a feature and Google Groups usually proves a much faster route to success.
</p>
<p>
I have stopped using help in Office and just rely on Google. The replies are more relevant and better sorted, and it's faster. Even if the answer turns out to reside on the Office Assistance site, it's easier to find it there with Google.
</p>
</blockquote>
<p>
It seems to me that the best "help file" for your software is <b>no help file at all</b>. It's a <s>Google</s>MSN Search query.
</p>
<p>
Local help simply can't compete with internet search. I'll go even further-- <b>if you are building local help files for your application, you're wasting your time.</b> And more importantly, you are wasting your users' time.
</p>
<p>
Smart developers will stop wasting time on useless local help and <b>build community around their product on the internet</b>. One of my favorite examples of this is <a href="http://www.regular-expressions.info/">http://www.regular-expressions.info</a>. It's the top hit for a Google search on the term "regular expressions". The author, Jan Goyvaerts, is also the author of <a href="http://www.regexbuddy.com/cgi-bin/affref.pl?aff=jatwood">RegexBuddy</a>, a fantastic regular expression tool. The tool is great, but when I need help with my regular expressions, I don't bother with the local help file. I just type what I'm looking for into MSN Search and bring the full weight of billions of dollars of search optimization to bear on the entire internet. If I happen to be offline, Jan has thoughtfully provided both PDF and CHM versions of the content on regular-expressions.info.
</p>
<p>
Local help seems rather quaint in comparison.
</p>
<p>
This kind of online community can easily be linked from the UI, too. One of the few generally helpful "help" features is contextual point-and-help -- eg, clicking on a "what the heck does this do?" button. But even those should spawn generic search engine queries to be truly useful.
</p>
<p>
If you really want to help your users, set up a wiki for your product. Set up forums for them to participate in. Become an impartial nexus for all information related to your product, whether your company wrote it or not. And most importantly, <i>have the guts to give your users control over these sites</i>. You may have written it, but they have to live with it.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2006-01-26T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/google-is-the-help-menu/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ Not All Bugs Are Worth Fixing ]]></title>
<link>https://blog.codinghorror.com/not-all-bugs-are-worth-fixing/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
<img alt="image placeholder" >
One thing that continually frustrates me when working with dedicated test teams is that, well, <i>they find too many bugs</i>.
</p>
<p>
Don't get me wrong. I want to be the first person to know about any bug that results in inconvenience for a user.  But <b>how do you distinguish between bugs that users are likely to encounter, and bugs that users will probably never see?</b>
</p>
<p>
The first thing you do is take that list of bugs from the testers and have yourself a <a href="http://www.bobcongdon.net/blog/2005/11/triage.html">triage meeting</a>:
</p>
<p>
</p>
<blockquote>
The term "triage" was <a href="http://en.wikipedia.org/wiki/Triage">borrowed from medical triage</a> where a doctor or nurse has to prioritize care for a large group of injured people. The main job of a software bug triage team is to decide which bugs need to be fixed (or conversely, which bugs we're willing to ship with).
<p>
Eric lists four questions that need to be answered during triage to decide whether a bug should be fixed or not:
</p>
<p>
</p>
<ol>
<li>
<b>Severity</b>: When this bug happens, how bad is the impact?
</li>
<li>
<b>Frequency</b>: How often does this bug happen?
</li>
<li>
<b>Cost</b>: How much effort would be required to fix this bug?
</li>
<li>
<b>Risk</b>: What is the risk of fixing this bug?
</li>
</ol>
</blockquote>
<p>
Triage isn't exactly my idea of a good time. But you have to do it, because you'll always have far more bugs than you have development time. Nobody has the luxury of fixing all the bugs in their software.
</p>
<p>
Testers produce two kinds of bugs:
</p>
<p>
</p>
<ol>
<li>A small subset of very serious bugs that everyone can immediately agree on. These are great. They're the kind of catches that make me thank my lucky stars that we have dedicated testers. You go, girl-slash-boy!
</li>
<li>Everything else. A vast, gray wasteland of pseudo-bugs that nobody can really agree on. Is it an inconvenience for the user? Would users really do things this way? Would a user ever run into this? Do we even care?
</li>
</ol>
<p>
It's a clear win for the bugs everyone agrees on. That's usually about ten to twenty percent of the bug list in my experience. But for everything else, there's a serious problem: <b>testers aren't real users</b>. I'd give a bug from a customer ten times the weight of a bug reported by a tester.
</p>
<p>
The source of the bug is just one factor to consider. Bug triage isn't a science. It's highly subjective and totally dependent on the specifics of your application. In <a href="http://www.shareware-beach.com/2005/12/bugs-are-a-business-decision/">Bugs Are a Business Decision</a>, Jan Goyvaerts describes how different triage can be for applications at each end of that spectrum:
</p>
<p>
</p>
<blockquote>
Last July I flew to Denver to attend the Shareware Industry Conference. I flew the leg from Taipei to Los Angeles on a Boeing 747 operated by China Airlines. This aircraft has two major software systems on board: the avionics software (flight computer), and the in-flight entertainment system. These two systems are completely independent of each other, developed by different companies, to different standards.
<p>
The avionics software is the software that flies the plane. No, the pilots don't fly the plane, the flight computer does. How many bugs would you tolerate in the avionics software? How many do you think Boeing left unfixed? How many people have ever been killed by software bugs in modern airliners? Zero. A flawed flight computer would immediately ground all 747s worldwide. Boeing would not recover.
</p>
<p>
The in-flight entertainment system is a completely different story. It's not essential to the plane. It only serves to make the passengers forget how uncomfortable those economy seats really are. If the entertainment system barfs all over itself, the cost is minimal. Passengers are already out of their money, and most will choose their next flight based on price and schedule rather than which movies are on those tiny screens, if any. I was actually quite pleased with Chine Airlines' system, which offered economy passengers individual screens and a choice of a dozen or so on-demand movies (i.e. each passenger can start viewing any movie at any time, and even pause and rewind). That is, until the system started acting up. It locked up a few times causing everybody's movie to pause for several minutes. Once, the crew had to reboot the whole thing. That silly Linux penguin mocked me for several minutes while the boot messages crept by. X11 showed off its X-shaped cursor right in the middle of the screen even longer. Judging from the crew's attitude about it, the reboot seemed like something that's part of their training.
</p>
</blockquote>
<p>
Bugs also cost money to fix. In <a href="http://software.ericsink.com/articles/Four_Questions.html">My Life as a Code Economist</a>, Eric Sink outlines all the decisions that go into whether or not a bug gets fixed at his company:
</p>
<p>
</p>
<blockquote>
Don't we all start out with the belief that software only gets better as we work on it?  The fact that we need regression testing is somehow like evidence that there is something wrong with the world.  After all, it's not like anybody on our team is intentionally creating new bugs.  We're just trying to make sure our product gets better every day, and yet, somewhere between 3.1.2 and 3.1.3, we made it worse.
<p>
But that's just the way it is.  Every code change is a risk.  A development cycle that doesn't recognize this will churn indefinitely and never create a shippable product.  At some point, if the product is ever going to converge toward a release, you have to start deciding which bugs aren't going to get fixed.
</p>
<p>
To put it another way, think about what you want to say to yourself when look in the mirror just after your product is released.  The people in group 2 want to look in the mirror and say this:
</p>
<p>
"Our bug database has ZERO open items.  We didn't defer a single bug.  We fixed them all.  After every bug fix, we regression tested the entire product, with 100% code coverage.  Our product is perfect, absolutely flawless and above any criticism whatsoever."
</p>
<p>
The group 1 person wants to look in the mirror and say this:
</p>
<p>
"Our bug database has lots of open items.  We have carefully reviewed every one of them and consider each one to be acceptable.  In other words, most of them should probably not even be called bugs.  We are not ashamed of this list of open items.  On the contrary, we draw confidence from this list because we are shipping a product with a quality level that is well known.  There will be no surprises and no mulligans.  We admit that our product would be even better if all of these items were "fixed", but fixing them would risk introducing new bugs.  We would essentially be exchanging these bugs which we find acceptable for the possibility of newly introduced bugs which might be showstoppers."
</p>
<p>
I'm not talking about shipping crappy products.  I'm not suggesting that anybody ship products of low quality.  I'm suggesting that decisions about software quality can be tough and subtle, and we need to be really smart about how to make those decisions. <b>Sometimes a "bug" should not be fixed.</b>
</p>
</blockquote>
<p>
To me, triage is about one thing: making life better for your users. And the best way to do that is to <b>base your triage decisions on data from actual usage</b> -- via <a href="http://www.codinghorror.com/blog/archives/000102.html">exception reporting</a>, user feedback, and beta testing. Otherwise, triage is just a bunch of developers and testers in a room, trying to <i>guess</i> what users might do.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2006-01-29T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/not-all-bugs-are-worth-fixing/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ Presentation Magnification ]]></title>
<link>https://blog.codinghorror.com/presentation-magnification/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
Here at <a href="http://www.codinghorror.com/blog/archives/000502.html">VSLive! 2006 San Francisco</a>, I've been sitting through a lot of presentations. Unfortunately, I've spent a disproportionate amount of that time staring at <b>tiny, unreadable 12 and 10 point IDE text</b>.
</p>
<p>
<b>Presenters, please don't do this to your audiences</b>. If you can't pre-scale the font appropriately in the application, <a href="http://www.hanselman.com/blog/content/radiostories/2003/01/22/scottHanselmansTipsForASuccessfulMsftPresentation.html">make use of one of the many automatic magnification utilities out there</a>.
</p>
<p>
Heck, you can even use Windows XP's built in magnifier utility: <b>Start, Run, Magnify</b>.
</p>
<p>
<img alt="image placeholder" >
</p>
<p>
The options for magnify.exe are limited but entirely servicable:
</p>
<p>
</p>
<ul>
<li>It can automatically follow:
<ul>
<li>the mouse cursor
</li>
<li>the keyboard focus
</li>
<li>text editing
</li>
</ul>
</li>
</ul>
<li>Click and drag the magnification surface to move it. It can float as a window or it can dock to any side of the screen like the taskbar.
</li>
<li>Drag the corners to resize the surface. </li>
<li>The magnification is adjustable from 1x to 9x.
</li>
<p>
In the screenshot above, I have the magnification window docked to the top of the screen. The IDE is maximized normally under it. Since magnify follows all my mouse and keyboard actions automatically, <b>everything I do is now perfectly visible -- even from the last row of the room</b>.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2006-01-30T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/presentation-magnification/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ How Not to Give a Presentation ]]></title>
<link>https://blog.codinghorror.com/how-not-to-give-a-presentation/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
I hold speakers to relatively high standards. They get paid to present to large groups because they're ostensibly good communicators. And I cannot believe the beginner mistakes some of the speakers are making here at VSLive.
</p>
<p>
Based on my experiences over the last two days, here are a few sure-fire ways <i>not</i> to give a presentation:
</p>
<p>
</p>
<ol>
<li>
<b>Begin by establishing how impressive you are.</b> Make sure we know all about your accomplishments and any books you've written. Be sure to plug your company and/or website. After all, this presentation is <a href="http://headrush.typepad.com/creating_passionate_users/2005/01/users_shouldnt_.html">about you</a>.
<p></p>
</li>
<li>
<b>Present a detailed presentation agenda</b>. Before you can get to any content at all, you must dutifully itemize the <i>table of contents!</i> You know how people love reading the table of contents. It builds suspense. It's exciting. It keeps the audience on the edges of their seats, wondering "when will I actually see any content in this presentation"?
<p></p>
</li>
<li>
<b>Every slide should be absolutely jam-packed with information.</b> Use as many bullet points and words on your slides as possible.  Feel free to slap a few helpful URLs in there, too. If you can't fit it all on one slide, try a smaller font.
<p>
<img alt="image placeholder" >
</p>
<p>
</p>
</li>
<li>
<b>Explain everything with bullet points.</b> Don't show the audience. <a href="http://headrush.typepad.com/creating_passionate_users/2005/06/kill_your_prese.html">Tell them</a>. Avoid pictures or, even worse, actual demonstrations. Feel free to use several slides to properly explain things.
<p></p>
</li>
<li>
<b>Read every word on your slides.</b> Audiences can't read. It's your responsibility to do all the reading for them. But don't waste their time with a bunch of elaboration. Be succinct. Say exactly what is on each slide, then move on to the next slide.
<p></p>
</li>
<li>
<b>If you make a mistake or something goes wrong, take a few minutes to fix it.</b> The audience can wait. While you're fixing things up, try that NASCAR joke again. It's hilarious.
<p></p>
</li>
<li>
<b>Use the highest possible desktop resolution.</b> Show off your laptop's new widescreen LCD. Besides, limited resolutions and large fonts are <a href="http://www.codinghorror.com/blog/archives/000503.html">childish and unprofessional</a>.
<p></p>
</li>
<li>
<b>Summarize everything at the end.</b> Audiences are notoriously forgetful. Spend the last few minutes patiently recapping everything they just saw.
<p></p>
</li>
<li>
<b>If you run out of time at the end of your session, keep going.</b> The audience paid good money to see your presentation, so make sure they see it all. Your time is important.
<p></p>
</li>
<li>
<b>Don't take any questions.</b> The content and quality of your presentation speaks for itself.
</li>
</ol>
<p>
This stuff would be funny if it wasn't happening every single day. <a href="http://blogs.technet.com/jesper_johansson/archive/2005/08/24/Death_by_PowerPoint.aspx">Death by PowerPoint</a>, indeed.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2006-01-31T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/how-not-to-give-a-presentation/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ Don't Acronymize Your Users ]]></title>
<link>https://blog.codinghorror.com/dont-acronymize-your-users/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
As a commenter noted in my previous post on <a href="http://www.codinghorror.com/blog/archives/000504.html">how not to give a presentation</a>, I have another complaint about software development presentations that I didn't list. <b>They're chock full of meaningless acronyms</b>. <a href="http://www.w3acronyms.com/Computing/Software-Acronyms">SOAP, BI, SOA, RDBMS, SGML, CRUD, RMS, RDBMS, XML, ORM, FAQ</a>. I appreciate the need for brevity on slides, but can you at least have one slide that <i>explains what the acronym means</i> before giving up on words altogether?
</p>
<p>
The problem of acronymization was highlighted in bold relief for me last night as I was browsing through Dell's <a href="http://www.intel.com/products/processor/coreduo/">Core Duo</a> laptops. "Gee", I thought, "I wonder what resolution this laptop screen has?" 1600 by 1200? 1280 by 1024?
</p>
<p>
You might expect the resolution of the display to be expressed in something typical and understandable, like pixels.  But you'd be wrong.
</p>
<p>
This particular laptop has a "17 inch Wide Screen XGA+ display". <a href="http://www.fourmilab.ch/documents/howmanydots/">What the hell does that mean?</a>
</p>
<p>
</p>
<blockquote>
<i>
What's a "WUXGA"? You might make a stab at guessing it's a rare four-horned bovid found in Central Asia, but in fact it's one of the grotesque acronyms vendors of personal computers, display boards, monitors, and projectors use to obfuscate one of the most fundamental specifications of the gear they're selling you: just how many pixels it can display.
</i><p>
After the introduction of the IBM Personal Computer in 1982, the PC industry got into the (bad) habit of identifying various screen resolutions by the name of the IBM or equivalent display adaptor having the corresponding maximum resolution. At the outset, this made sense: a user whose machine was equipped with an EGA (Enhanced Graphics Adaptor) need only look for monitors labeled "EGA Compatible". <b>As the years passed and Moore's Law worked its magic on display resolution as well as compute speed, more and more mnemonics were coined as higher resolutions appeared and were adopted, resulting in today's ridiculous alphabet soup.</b> Many of the current acronyms are, in fact, examples of "nested acronyms" of which Lisp programmers and other ber-nerds are so fond. "WUXGA", for example, is "Wide UXGA", where "UXGA" means "Ultra XGA", and "XGA" is itself an acronym for "Extended Graphics Array--three levels of acronyms!
</p>
</blockquote>
<p>
I needed an entire translation page just to determine that "wide" XGA+ is probably 1366 x 768. Or thereabouts. I'm not entirely sure. Thanks a lot, Dell.
</p>
<p>
Don't do this to your users. If you must use acronyms in your application, <b>be sure the acronym is explained up front</b>. And in at least a few other places that are easily discoverable, too.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2006-02-01T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/dont-acronymize-your-users/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ Smart Tags and Sane Keyboard Shortcuts ]]></title>
<link>https://blog.codinghorror.com/smart-tags-and-sane-keyboard-shortcuts/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><style type="text/css">
.kbd {font-family:arial,helvetica,sans-serif;padding:5px 3px;white-space:nowrap;color:#000;background:#eee;border-width:2px 4px 5px 3px;border-style:solid;border-color:#ccc #aaa #888 #bbb;}
.i20{margin:15px 30px;}
</style>
<p>
I constantly rename variables. It's probably the single most frequent refactoring activity I do. And that's why I love <a href="http://msdn.microsoft.com/vcsharp/2005/overview/productivity/#smarttags">Visual Studio 2005's built-in Smart Tags feature</a>.
</p>
<p>
If you're not familiar with smart tags, check out <a href="http://odetocode.com/Blogs/scott/archive/2006/01/23/2771.aspx">K. Scott Allen's post</a>; he has some nice screenshots illustrating how it works. Here's a demo movie of it in action:
</p>
<p>
<img alt="image placeholder" >
</p>
<p>
Unfortunately, as Scott points out, <b>the smart tags are a pain to use via the keyboard</b>. To maintain compatibility with Microsoft Office's implementation of smart tags, they chose the same keyboard shortcut:
</p>
<p>
<span class="kbd">Shift</span> + <span class="kbd">Alt</span> + <span class="kbd">F10</span>
</p>
<p>
Go ahead. Just try to type that. I double dast dare you. It's the most psychotic keyboard shortcut <i>ever</i>.
</p>
<p>
If that's the best keyboard shortcut they can come up, I'll stick with mousing over the approximately 5 pixel drop-down trigger area of the smart tag. This is really unfortunate, because <a href="http://www.codinghorror.com/blog/archives/000315.html">the keyboard shortcuts in Visual Studio</a> are generally well thought-out and usable in my experience.
</p>
<p>
Luckily, I don't have to suffer through this bad keyboard shortcut for a frequent activity. There's an alternate shortcut defined:
</p>
<p>
<span class="kbd">Ctrl</span> + <span class="kbd">.</span>
</p>
<p>
But that's still not very intuitive. I prefer to use ..
</p>
<p>
<span class="kbd">Alt</span> + <span class="kbd">Down</span>
</p>
<p>
.. which is an excellent physical map to the conceptual activity of "dropping down" a smart tag menu. You can easily set this new keyboard shortcut up via Options, Environment, Keyboard. Search for commands containing "ShowSmartTag":
</p>
<p>
<img alt="image placeholder" >
</p>
<p>
Then just map a new global shortcut. Way better!
</p>
<p>
In general, it's safer to learn the default keyboard shortcuts for an environment-- <a href="http://www.codinghorror.com/blog/archives/000382.html">too much customization is a self-defeating exercise</a>. <b>But sometimes the defaults are poorly chosen and you have no alternative but to customize them.</b> What default keyboard shortcuts are you obliged to change in your environment, and why?
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2006-02-02T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/smart-tags-and-sane-keyboard-shortcuts/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ Keeping Private Keys Private ]]></title>
<link>https://blog.codinghorror.com/keeping-private-keys-private/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
After I posted the CodeProject article <a href="http://www.codeproject.com/dotnet/SimpleEncryption.asp">.NET Encryption Simplified</a>, a reader asked this question in the comments:
</p>
<p>
</p>
<blockquote><i>
I would like to know what your thoughts are on private key storage in applications. I believe the recommended practice is to use the <a href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/dnsecure/html/windataprotection-dpapi.asp">DPAPI</a>, but I have found this to be too cumbersome for practical use. I would like to encrypt certain aspects of my apps and even parts of my database, but without secure key storage it is pointless. Thoughts?
</i></blockquote>
<p>
The class in that article is suitable for most encryption scenarios, but I was using it in a web service. That meant <b>I had the luxury of keeping my private key on a different physical server</b>. I had never even considered the problem of private key storage on the same machine!
</p>
<p>
At the risk of belaboring the obvious, asymmetric encryption hinges on keeping the public key public, and the private key private. This is a snap if you're doing cross-machine calls. You slap the private key on your server, and freely distribute the public key to clients. The private key is never transmitted over the network, so unless a disgruntled user manages to battle his way into your data center and <i>physically access your server</i>, you're secure. But if all the encryption work you're doing is on the local machine, then the private key and the public key are both stored somewhere on the local machine. <b>How in the world do you keep the private key away from the prying eyes of the local user?</b>
</p>
<p>
It seems like an insoluble problem to me, since users have complete physical control over their own machines. However, a user named "bigals" posted this helpful response in the comments:
</p>
<p>
</p>
<blockquote>
<i>
First of all, convert your private key to a PKCS12 file, which is a nice little container for private keys. Then you have a few options for <b>storing the private key</b>:
</i><p>
</p>
<ol>
<li>
<b>In your machine's key store.</b><br>
This is not as safe as the user store, as it can be accessed by any user if they have enough permissions.
</li>
<li>
<b>In the current user's key store.</b><br>
This is more secure than the machine store, because it's protected by windows ACL's. But it can play havok on you if passwords and permissions are changed for that particular user.
</li>
<li>
<b>In the registry.</b><br>
You can use ACL's to protect the registry key.
</li>
<li>
<b>On a <a href="http://www.microsoft.com/technet/security/topics/identitymanagement/scard.mspx">smart card</a>.</b>
<ul>
<li>The CryptoAPI has native support for this.
</li>
<li>Smart cards can be removed and secured.
</li>
<li>The keys are never stored on the machine, so it is a very secure solution.
</li>
</ul>
</li>
</ol>
<p>
Remember, never store an instance of your keys or passwords in a string!
The .NET GC does not clear these values very well, and they are visible in the string table memory for anyone to steal! .NET 2.0 has a new object called <a href="http://msdn2.microsoft.com/system.security.securestring.aspx">SecureString</a>, which <a href="http://blogs.msdn.com/shawnfa/archive/2004/05/27/143254.aspx">keeps strings in encrypted memory</a>.
</p>
</blockquote>
<p>
This is another reason why <a href="http://www.codinghorror.com/blog/archives/000421.html">the user comments are the best part of a blog</a>. A two-way dialog between author and reader is often the difference between good content and <i>great</i> content.
</p>
<p>
The only way to keep a private key truly private is to store it on a completely different machine. If you must store the private key on the same machine, some vulnerability is inevitable. You can only make it <i>inconvenient</i> for a user to find the private key through software protection. If you want to make it really <i>difficult</i>, you have to <a href="http://www.free60.org/wiki/Documentation">embed the private key in specialized hardware, like the Xbox 360 does</a>.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2006-02-03T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/keeping-private-keys-private/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ Revisiting Edit and Continue ]]></title>
<link>https://blog.codinghorror.com/revisiting-edit-and-continue/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
Edit and Continue, which shipped in Visual Studio 2005, is generally regarded as <i>A Good Thing</i>. It's pretty difficult to argue against <a href="http://www.codinghorror.com/blog/archives/000026.html">the benefits of immediacy when debugging</a>, but that isn't about to stop some people:
</p>
<p>
</p>
<ul>
<li>
<a href="http://weblogs.asp.net/fbouma/archive/2003/08/01/22211.aspx">Frans Bouma</a><br>
<i>
People who grew up with assemblers, the gnu commandline C debugger and other terrible tools, know that debugging using a debugger is a last resort and also learned that debugging is not about using a debugger, but about understanding the difference between the sourcecode which should have been written and the sourcecode that is written. Edit and Continue doesn't help you with finding more bugs at a faster rate. You know what does? Design by contract like Eiffel has, pre/post conditions in the code and proper design by designing algorithms first on paper or in a design tool, not behind a keyboard with a code editor in front of you.
</i>
</li>
<li>
<a href="http://wintellect.com/WEBLOGS/wintellect/archive/2004/10/17/546.aspx">John Robbins</a><br>
<i>
Edit and continue is a bug-introducing machine. Why?  Because you get to focusing on that one bug and twiddle the code to fix that one bug and introduce six more.  When you're debugging, you're debugging, not editing.  When you start editing, you need to stop to think and plan for the ramifications of those changes.  To paraphase Dykstra: "Use of a debugger is an indication of sloppy thinking.  Use of edit and continue is an indication of insanity!"
</i>
</li>
<li>
<a href="http://samgentile.com/blog/archive/2004/10/19/12240.aspx">Sam Gentile</a><br>
<i>
Program logic should not be tested in the debugger. You are wasting your time and your company's time if you do so. The debugger is for intractable problems. It was John who taught me that lesson in his seminal Windows Debugging book - you shouldn't be in the debugger unless you have to be. Unit tests are the place to verify, refector and edit as you go; not the debugger.
</i>
</li>
</ul>
<p>
While they raise some valid points, the underlying argument is essentially the same in all three cases: <b>Edit and Continue should be removed because it's dangerous</b>. And we're clearly too stupid to be trusted with a dangerous tool like edit and continue!
</p>
<p>
This reminds me of a similar scenario in video games. There are two types of video games:
</p>
<p>
</p>
<ol>
<li>games that allow you to save your progress anywhere you like.
</li>
<li>games that only allow you to save your progress at specific points placed in the game by the developers.
</li>
</ol>
<p>
If you are killed between saves, you have to go back to the last save.
</p>
<p>
Certain groups of hard-core gamers think "save anywhere" games are fatally flawed. Real men, they say, work their way through a level and earn the save point. They believe that games should remove the "save anywhere" option, lest we all become a bunch of spoiled, lazy gamers who can barely lift our thumbs.
</p>
<p>
But here's what drives me crazy: <b>the hard-core gamers <i>don't have to use save anywhere!</i></b> If they're so hard-core, they should easily be able to resist the temptation to save their game. They can simply save at the beginning of a level, or confine themselves a few saves per level, or whatever. So when they say the "save anywhere" option should be removed, <b>what they're really saying is, "everyone should play games the same way we do,"</b> and veiling it in some macho rhetoric to intimidate people into agreeing with them.
</p>
<p>
The comparison between game saves and edit and continue is fairly apt; either you can edit a program whenever you want-- even at a breakpoint in a debugger-- or you can only do it when the program is stopped. Clearly, offering both options is more flexible and inhibits no one.
</p>
<p>
However, there's a big difference between <i>encouraging people to take challenges</i> and <i>forcing them to take challenges by removing flexibility from the product</i>. Not everyone plays games for the same reasons you do. And not everyone writes code for the same reasons you do, either.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2006-02-05T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/revisiting-edit-and-continue/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ .NET Pet Shop 4 ]]></title>
<link>https://blog.codinghorror.com/net-pet-shop-4/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
Vertigo Software's <a href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/dnbda/html/bdasamppet4.asp">.NET Pet Shop 4.0 article</a> just went live on MSDN.
</p>
<p>
It's Pet Shop! You know... our old pal, <a href="http://www.gotdotnet.com/team/compare/petshop.aspx">Pet Shop</a>:
</p>
<p>
<img alt="image placeholder" >
</p>
<p>
However, unlike previous versions of Pet Shop, <span style="color:red;"><b>this version is not a benchmark comparison with Java</b></span>. It's purely a showcase for ASP.NET 2.0 features and best practices when porting a site from ASP.NET 1.1.
</p>
<p>
The lineage of Pet Shop is a little hard to trace, but it goes something like this:
</p>
<p>
</p>
<table width="800">
<tr>
<td width="100">
<a href="http://www.gotdotnet.com/team/compare/petshop.aspx">1.x</a>
</td>
<td width="150">ASP.NET 1.0
</td>
<td>Direct port of <a href="http://java.sun.com/developer/releases/petstore/">Java Pet Store</a> reference application.
</td>
</tr>
<tr>
<td>
<a href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/dnbda/html/bdasamppet2.asp">2.x</a>
</td>
<td>ASP.NET 1.1
</td>
<td>Minor update for new ASP.NET 1.1 release.
</td>
</tr>
<tr>
<td>
<a href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/dnbda/html/petshop3x.asp">3.x</a>
</td>
<td>ASP.NET 1.1
</td>
<td>Incorporates community feedback; improved architecture to better align with <a href="http://msdn.microsoft.com/practices/">Microsoft Patterns &amp; Practices</a> recommendations.
</td>
</tr>
<tr>
<td>
<a href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/dnbda/html/bdasamppet4.asp">4.x</a>
</td>
<td>ASP.NET 2.0
</td>
<td>Complete rewrite; no longer functionally equivalent to Java reference application.
</td>
</tr>
</table>
<p>
Although Pet Shop was developed here at Vertigo over the last 8 months, I wasn't personally involved with Pet Shop in any capacity. We are definitely interested in your feedback, however. Dialog with the community is what drove <a href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/dnbda/html/petshop3x.asp">Pet Shop 3.0</a> development. <a href="http://blogs.vertigosoftware.com/alanl/default.aspx">Alan</a> created a public blog entry on the <a href="http://blogs.vertigosoftware.com/petshop/default.aspx">Vertigo Pet Shop blog</a> soliciting comments; feel free to drop by and comment any time.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2006-02-06T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/net-pet-shop-4/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ The Day Performance Didn't Matter Any More ]]></title>
<link>https://blog.codinghorror.com/the-day-performance-didnt-matter-any-more/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>OSNews published a <a href="http://osnews.com/story.php?news_id=5602&amp;page=3">nine-language performance roundup</a> in early 2004. The results are summarized here:</p>
<table border="0" cellpadding="4" cellspacing="4">
<tr>
<td align="right"></td>
<td align="right"><b>int</b></td>
<td align="right"><b>long</b></td>
<td align="right"><b>double</b></td>
<td align="right"><b>trig</b></td>
<td align="right"><b>I/O</b></td>
<td align="right"></td>
</tr>
<tr>
<td align="right">Visual C++</td>
<td align="right">9.6</td>
<td align="right">18.8</td>
<td align="right">6.4</td>
<td align="right">3.5</td>
<td align="right">10.5</td>
<td align="right" style="color: maroon">48.8</td>
</tr>
<tr>
<td align="right">Visual C#</td>
<td align="right">9.7</td>
<td align="right">23.9</td>
<td align="right">17.7</td>
<td align="right">4.1</td>
<td align="right">9.9</td>
<td align="right" style="color: maroon">65.3</td>
</tr>
<tr>
<td align="right">gcc C</td>
<td align="right">9.8</td>
<td align="right">28.8</td>
<td align="right">9.5</td>
<td align="right">14.9</td>
<td align="right">10.0</td>
<td align="right" style="color: maroon">73.0</td>
</tr>
<tr>
<td align="right">Visual Basic</td>
<td align="right">9.8</td>
<td align="right">23.7</td>
<td align="right">17.7</td>
<td align="right">4.1</td>
<td align="right">30.7</td>
<td align="right" style="color: maroon">85.9</td>
</tr>
<tr>
<td align="right">Visual J#</td>
<td align="right">9.6</td>
<td align="right">23.9</td>
<td align="right">17.5</td>
<td align="right">4.2</td>
<td align="right">35.1</td>
<td align="right" style="color: maroon">90.4</td>
</tr>
<tr>
<td align="right">Java 1.3.1</td>
<td align="right">14.5</td>
<td align="right">29.6</td>
<td align="right">19.0</td>
<td align="right">22.1</td>
<td align="right">12.3</td>
<td align="right" style="color: maroon">97.6</td>
</tr>
<tr>
<td align="right">Java 1.4.2</td>
<td align="right">9.3</td>
<td align="right">20.2</td>
<td align="right">6.5</td>
<td align="right">57.1</td>
<td align="right">10.1</td>
<td align="right" style="color: maroon">103.1</td>
</tr>
<tr>
<td align="right">Python/Psyco</td>
<td align="right">29.7</td>
<td align="right">615.4</td>
<td align="right">100.4</td>
<td align="right">13.1</td>
<td align="right">10.5</td>
<td align="right" style="color: maroon">769.1</td>
</tr>
<tr>
<td align="right">Python</td>
<td align="right">322.4</td>
<td align="right">891.9</td>
<td align="right">405.7</td>
<td align="right">47.1</td>
<td align="right">11.9</td>
<td align="right" style="color: maroon">1679.0</td>
</tr>
</table>
<p>It's not a very practical benchmark, but it does tell us a few things. It's no surprise that C++ is at the head of the pack. But the others aren't terribly far behind. What I find really interesting, though, is how <b>most of the languages clump together in the middle</b>. There's no significant performance difference between Java and .NET if you throw out the weirdly anomalous trig results.</p>
<p>However, there is one language definitely bringing up the rear –  <a href="http://en.wikipedia.org/wiki/Python_programming_language">Python</a>. That's because it's an <a href="http://en.wikipedia.org/wiki/Interpreted_language">interpreted language</a>. This is explained in <a href="http://www.amazon.com/exec/obidos/ASIN/0735619670/codihorr-20">Code Complete</a>:</p>
<blockquote>Interpreted languages tend to exact significant performance penalties because they must process each programming-language instruction before creating and executing machine code. In the performance benchmarking I performed for this chapter and chapter 26, I observed these approximate relationships in performance among different languages:
<table cellpadding="4" cellspacing="4" width="500">
<tr>
<td>
<strong>Language</strong>
</td>
<td>
<strong>Type of Language</strong>
</td>
<td>
<strong>Execution Time Relative to C++</strong>
</td>
</tr>
<tr>
<td>
C++</td>
<td>
Compiled</td>
<td>
1:1</td>
</tr>
<tr>
<td>
Visual Basic</td>
<td>
Compiled</td>
<td>
1:1</td>
</tr>
<tr>
<td>
C#</td>
<td>
Compiled</td>
<td>
1:1</td>
</tr>
<tr>
<td>
Java</td>
<td>
Byte code</td>
<td>
1.5:1</td>
</tr>
<tr>
<td style="color: red">
PHP</td>
<td style="color: red">
Interpreted</td>
<td style="color: red">
&gt; 100:1</td>
</tr>
<tr>
<td style="color: red">
Python</td>
<td style="color: red">
Interpreted</td>
<td style="color: red">
&gt; 100:1</td>
</tr>
</table>
</blockquote>
<p>Clearly, the performance penalty for interpreted languages is extreme. How extreme? If you have to ask, <i>you probably can't afford it.</i></p>
<p>One of the biggest stigmas for early Visual Basic developers was that our code wasn't compiled. It was interpreted. Interpreted executables were yet another reason so-called<br>
"professional" developers didn't take VB seriously. It was too slow. This finally changed when we got <a href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/vbcon98/html/vbconcompiledvsinterpretedapplications.asp">compiled executables</a> in 1997 with VB 5.</p>
<p>The most commonly used interpreted language today, however, is JavaScript. And <a href="http://www.paulgraham.com/web20.html">JavaScript is the very backbone of Web 2.0</a>. How is this feasible if JavaScript is a hundred times slower than Java? Consider this <a href="http://web.archive.org/web/20060630033935/http://www.geocities.com/SiliconValley/7116/jv_bench.html">ancient 1996 JavaScript benchmark page</a><br>
:</p>
<table cellpadding="4" cellspacing="0" width="275">
<tr>
<td></td>
<td style="text-align: right">
<strong>1996</strong>
</td>
<td style="text-align: right">
<strong>
2006</strong>
</td>
<td>
</td>
</tr>
<tr>
<td>
primes</td>
<td style="text-align: right">
0.15</td>
<td style="text-align: right">
0.02</td>
<td style="color: maroon; text-align: right;">
8x</td>
</tr>
<tr>
<td>
pgap</td>
<td style="text-align: right">
3.13</td>
<td style="text-align: right">
0.06</td>
<td style="color: maroon; text-align: right">
52x</td>
</tr>
<tr>
<td>
sieve</td>
<td style="text-align: right">
5.05</td>
<td style="text-align: right">
0.02</td>
<td style="color: maroon; text-align: right">
252x</td>
</tr>
<tr>
<td>
fib(20)</td>
<td style="text-align: right">
2.15</td>
<td style="text-align: right">
0.03</td>
<td style="color: maroon; text-align: right">
72x</td>
</tr>
<tr>
<td>
tak</td>
<td style="text-align: right">
10.44</td>
<td style="text-align: right">
0.08</td>
<td style="color: maroon; text-align: right">
131x</td>
</tr>
<tr>
<td>
mb100</td>
<td style="text-align: right">
8.4</td>
<td style="text-align: right">
0.2</td>
<td style="color: maroon; text-align: right">
42x</td>
</tr>
</table>
<p>In ten years, <strong>JavaScript performance has improved a hundredfold</strong>. But so what, right? Computers get faster every year. Well, our computers are now so fast that –  with very few exceptions –  <em>we don't care how much interpreted code costs any more.</em></p>
<p><strong></strong>What many pundits don't realize is that <strong>the viability of interpreted JavaScript for mainstream applications is a relatively recent development</strong>. Consider <a href="http://web.archive.org/web/20060223030711/http://kazdan.com/current/technology/javabenchmark.html">this JavaScript benchmark</a> of "ridiculously long algorithms and looping statements". The top three results are all of 2003 vintage:</p>
<table border="0" cellpadding="4" cellspacing="4">
<tr>
<td style="width: 100px">
AMD 1900+</td>
<td style="width: 100px">
1.6 GHz</td>
<td style="width: 100px">
12.25 sec</td>
</tr>
<tr>
<td style="width: 100px">
P4 Mobile</td>
<td style="width: 100px">
2.2 GHz</td>
<td style="width: 100px">
15.48 sec</td>
</tr>
<tr>
<td style="width: 100px">
P4 Celeron</td>
<td style="width: 100px">
1.4 GHz</td>
<td style="width: 100px">
17.43 sec</td>
</tr>
</table>
<p>The slowest computer I own, a 1.2 GHz Pentium M laptop purchased in 2003, completes this test in 13.64 seconds. The one I'm currently typing on completes it in around 7 seconds. So even in the <em>last three years</em>, we've almost doubled the speed of JavaScript.</p>
<p>I don't expect this trend of doubling performance to continue. <strong>I think JavaScript is about as fast as it can get now without some kind of really advanced dynamic compilation scheme</strong>. If you <a href="http://www.24fun.com/downloadcenter/benchjs/benchjs.html">browse the results of BenchJS</a>, a more recent JavaScript test suite, I think you'll agree that they've plateaued. We might reduce that from 6 seconds to 4 seconds over the next two years, but that's minor compared to the 100x speedup we've already had.</p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2006-02-07T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/the-day-performance-didnt-matter-any-more/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ Hazmat Placards and Icons ]]></title>
<link>https://blog.codinghorror.com/hazmat-placards-and-icons/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
It's good to know that others share <a href="http://www.codinghorror.com/blog/archives/000438.html">my weird fascination with signs</a>. Ian Albert has a page dedicated to <a href="http://ian-albert.com/misc/hazmat.php">hazmat placards</a>:
</p>
<p>
<img alt="image placeholder" >
</p>
<p>
Ian created high quality, hand-traced PDFs for each placard. Now that's dedication. But he also offers this amusing warning:
</p>
<p>
</p>
<blockquote><i>
Don't use these decoratively in a public place. When emergency workers see a hazmat placard they react accordingly. That is, after all, the purpose of hazmat placards. You could get in some real trouble if your house is burning down and they have to call in the bomb squad because you've got an "explosives" sign hanging somewhere.
</i></blockquote>
<p>
I still think the software industry can learn a lot from studying pre-digital iconography.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2006-02-08T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/hazmat-placards-and-icons/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ On Audio Visualization ]]></title>
<link>https://blog.codinghorror.com/on-audio-visualization/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>I'm a big music fan. And as a longtime computer enthusiast, I've always been intrigued by the intersection of computers and music: <strong>audio visualization</strong>. The first experience I had with visualization was the 1993 <a href="http://www.atariage.com/Jaguar/archives/hardware/">
CD-ROM add-on for Atari's short-lived Jaguar console</a>.
It included
<a href="http://llamasoft.co.uk/vlm.php">
Jeff Minter's VLM-1 (Visual Light Machine)</a>
burned into the firmware:</p>
<p>
</p>
<blockquote>Atari [was] developing a CD-ROM add-on for the Jaguar, and me and
Ian Bennett, one of the Inmos guys, flew out to Sunnyvale to pitch them the idea
of building a VLM implementation into the CD-ROM's firmware, to be invoked whenever
the user played an audio CD. I was in particularly good favour at Atari, since "Tempest
2000" had been released to a degree of critical approval, and we got the green light
to develop VLM for the add-on. It took about six months to make, with me doing all
the graphical stuff and Ian writing the code to sample the audio stream and generate
a frequency spectrum analysis which I then used to drive the visuals.
<p>
<img alt="image placeholder" >
</p>
<p>
The results
were very pleasing - I have vivid memories of going into the office in Sunnyvale
when we were out there finishing off the code, and finding Leonard Tramiel playing
classical music through it and dancing ecstatically around my cube.
</p>
</blockquote>
<p>
The VLM-1 was just the latest in this <a href="http://www.geocities.com/rmelick/19.htm">llama-obsessed developer's</a> series of software experiments with audio visualization, going
all the way back to 1984..</p>
<p>
</p>
<table width="600">
<tr>
<td style="width: 100px">
<a href="http://llamasoft.co.uk/psychedelia.php">Psychedelia</a>
</td>
<td style="width: 100px">
1984</td>
<td style="width: 100px">
Commodore 64</td>
</tr>
<tr>
<td style="width: 100px">
<a href="http://llamasoft.co.uk/colourspace.php">Colourspace</a>
</td>
<td style="width: 100px">
1985</td>
<td style="width: 100px">
Atari 400/800, Atari ST</td>
</tr>
<tr>
<td style="width: 100px">
<a href="http://llamasoft.co.uk/ttron.php">Trip-a-tron</a>
</td>
<td style="width: 100px">
1987</td>
<td style="width: 100px">
Amiga, Atari ST</td>
</tr>
<tr>
<td style="width: 100px">
<a href="http://llamasoft.co.uk/vlm.php">VLM-0</a>
</td>
<td style="width: 100px">
1990 (unreleased)</td>
<td style="width: 100px">
<a href="http://en.wikipedia.org/wiki/Transputer">Inmos Transputer</a>
</td>
</tr>
<tr>
<td style="width: 100px">
<a href="http://llamasoft.co.uk/vlm.php">VLM-1</a>
</td>
<td style="width: 100px">
1994</td>
<td style="width: 100px">
Atari Jaguar CD-ROM</td>
</tr>
<tr>
<td style="width: 100px">
<a href="http://llamasoft.co.uk/vlm.php">VLM-2</a>
</td>
<td style="width: 100px">
2000</td>
<td style="width: 100px">
<a href="http://en.wikipedia.org/wiki/Nuon">Nuon</a>
</td>
</tr>
<tr>
<td style="width: 100px">
<a href="http://llamasoft.co.uk/vlm.php">VLM-3</a>
</td>
<td style="width: 100px">
2003 (unreleased)</td>
<td style="width: 100px">
Gamecube</td>
</tr>
<tr>
<td style="width: 100px">
<a href="http://llamasoft.co.uk/neon.php">Neon</a>
</td>
<td style="width: 100px">
2005</td>
<td style="width: 100px">
Xbox 360</td>
</tr>
</table>
<strong></strong>

<p>
.. and ending with the Xbox 360.
It was quite a coup for Microsoft to get Minter to write <a href="http://llamasoft.co.uk/neon.php">the visualization software embedded in every Xbox 360</a>:</p>
<blockquote>
[Neon] finally realizes my design of a modular lightsynth on top of that awesome
computational power, and inheriting the multi-user controllability from VLM-3, and
the results are simply amazing. Even I am continually amazed at what it is possible
to get out of it, and I designed it. It is a true light synthesiser, and easily
the most beautiful thing I have ever made, by a very long way. We thought VLM-3
was good, but this makes VLM-3 look like Psychedelia. It's truly a generational
increment - hence after years of long service I decided it's finally time to lose
the VLM name.
<p>
It can be used purely as a visualizer - but a visualizer which instantly obsoletes
all those still currently struggling along with VLM-1 techniques straight into the
Stone Age. Or you can pick up the controllers and feel what it's like to fly it
as a Crew. It is truly a thing of beauty... I believe it finally begins to achieve
the potential that I saw all those years ago when I first made Psychedelia... and
I am happier with it than I have ever been with anything I've created in my entire
career.</p>
</blockquote>
<p>
Talking about the Neon visualization doesn't do it justice. You have to see it in action to appreciate how impressive
it really is. If you have an Xbox 360, rip an audio CD and try it yourself. If you
don't, Minter provides <a href="http://www.llamasoft.co.uk/neon-screenshots.php">screenshots</a>
and <a href="http://www.llamasoft.co.uk/neon-movies.php">movies</a>.</p>
<p>
I remember looking around in vain for PC audio CD visualization software in 1996;
<strong>it took the MP3 revolution and WinAmp to make audio visualization mainstream</strong>
several years later. Minter clearly influenced an entire generation of PC programmers:</p>
<blockquote>
A while after [the Atari Jaguar's CD-ROM add-on] was released, other "visualisers"
started to appear on the PC, and at one time I was at a computer show in the US
and one of the guys from Nullsoft came up to me and apologised for "borrowing" the
techniques I'd used on the Jaguar VLM for their own visualisations. And, in fact,
to this day much of the visualisation stuff that you see in the likes of Winamp,
Windows Media Player and iTunes uses fundamentally the same technique - using feedback
to amplify small source input dynamics - that I used in VLM-1.</blockquote>
Although the grandaddy of the PC visualization scene is the DOS based <a href="http://www.afn.org/~cthugha/">
Cthuga</a>, <strong>the breakthrough PC visualizers were both WinAmp plugins: </strong>
<a href="http://www.geisswerks.com/geiss/index.html"><strong>Geiss</strong></a><strong>
and </strong><a href="http://www.soundspectrum.com/g-force/"><strong>G-Force</strong></a><strong>.</strong>
G-Force, as noted in this 2001 <a href="http://www.wired.com/news/business/1,42870-0.html">Wired article</a>,
has an interesting history:
<blockquote>
For Andy O'Meara, creating a trend-setting computer graphics program has been a thoroughly depressing experience. After launching his program-turned-phenomenon, O'Meara had to ship out on a five-year tour of duty in the U.S. Navy.
<p>
Last year, O'Meara released G-Force, software that "visualizes" music through an ever-changing stream of trippy graphics that morph and pulse to the music's beat.
G-Force, and other "vis" software like it, are rapidly becoming the equivalent of flying toasters -- a wildly popular and instantly recognizable icon of the times, like lava lamps or disco balls.
</p>
<p>
But for O'Meara, finding himself at the vanguard of the movement has been anything but uplifting. Thanks to the Navy ROTC scholarship program that paid his way through college, O'Meara spends most of his time on a nuclear submarine when he could be embarking on a multimedia career.
He has already been offered the chance to join pop star Seal's forthcoming Togetherland tour, and he signed a lucrative licensing deal with Apple that convinced him he can make a living writing code. "If I wasn't in the Navy, I'd be on tour with Seal working on visuals for him," said O'Meara from his home port of San Diego. "Am I depressed about it? Yeah."
</p>
</blockquote>
<p>
As alluded to in the article, <strong>G-Force was licensed for inclusion in iTunes</strong>.
It looks like O'Meara <a href="http://www.55ware.com/about-andy.html">survived his stint
in the Navy</a> and is now actively maintaining and selling G-Force, with plugins
available for virtually every player out there. Geiss, on the other hand, is still
WinAmp-only, and <a href="http://www.nullsoft.com/free/geiss2/">the latest version</a>
was released in 2003.</p>
<p>
Although G-Force and Geiss are still decent visualizers, they've barely evolved
at all: they are limited to 8-bit color internally, and make no use of hardware
acceleration. On the plus side, they use very little CPU time on a modern PC, either.
Seeing the Xbox 360 Neon visualizer next to these two makes them look antiquated:</p>
<p>
<img alt="image placeholder" >
 
<img alt="image placeholder" >
</p>
<p>
 I suppose we'll have to wait another few years for the audio visualization
developers to <strong>catch up to the hardware capabilities of newer PCs</strong>.</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2006-02-09T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/on-audio-visualization/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ Presentation Zen ]]></title>
<link>https://blog.codinghorror.com/presentation-zen/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>So I've been <a href="https://blog.codinghorror.com/how-not-to-give-a-presentation/">critical of other people's presentations</a>. Which naturally leads to a few questions:</p>
<ul>
<li>What makes a presentation good?</li>
<li>Why don't <i>you</i> try giving a presentation?</li>
</ul>
<p>I realize that giving presentations isn't easy. But I still feel that some speakers haven't done the basic due diligence that's necessary to give a good presentation. It's either that or they <i>just don't care</i>. So I'm giving them the benfefit of the doubt here.</p>
<p>Well, one easy way to deliver a better presentation is to <b>keep it simple</b>. Garr Reynolds' <a href="http://presentationzen.blogs.com/presentationzen/2005/11/the_zen_estheti.html">Gates, Jobs &amp; the Zen Aesthetic</a> illustrates this brilliantly:</p>
<img alt="image placeholder" >
<p>Not simple.</p>
<img alt="image placeholder" >
<p>Simple.</p>
<p>Which presentation would you rather be attending?</p>
<p>As Garr noted, when it comes to presentations, less is more:</p>
<blockquote>
<p>You do not need to (nor can you) pound every detail into the head of each member of your audience either visually or verbally. Instead, the combination of your words, along with the visual images you project, should motivate the viewer and arouse his imagination helping him to empathize with your idea and visualize your idea far beyond what is visible in the ephemeral PowerPoint slide before him.</p>
</blockquote>
<p><a href="http://en.wikipedia.org/wiki/Lawrence_Lessig">Lawrence Lessig</a> is a professor at Stanford Law, founder and chairman of <a href="http://creativecommons.org/">Creative Commons</a> and a board member of the <a href="http://www.eff.org/">EFF</a>.</p>
<p>Among <a href="http://www.lessig.org/">other things</a>, he's noted for <a href="http://presentationzen.blogs.com/presentationzen/2005/10/the_lessig_meth.html">exactly this kind of minimalist presentation style</a>. Consider his most recent presentation, <i>Is Google Book Search fair use?</i></p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/TmU2i1hQiN0" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
<p>Lessig doesn't just ignore the classic "no more than five bullets per slide" rule in his presentation, he practically <i>defenestrates</i> it. He uses <b>a single phrase or image per slide</b>. Sometimes there's only a single <i>word</i> on each slide!</p>
<p>It's better to experience it than it is to read about it. <a href="http://www.lessig.org/blog/archives/003287.shtml">Download the full torrent</a>, or <a href="https://www.youtube.com/embed/TmU2i1hQiN0">watch his presentation</a>.</p>
<p>This style clearly works for Lessig, but <b>can it work for other speakers?</b> Dick Hardt gave a <a href="https://www.dailymotion.com/video/xdr0f">presentation on Identity 2.0 at OSCON 2005</a> in the Lessig style – he even attributes it to Lessig in his final slide. It's a bit more frantic than Lessig's presentation, but I found it every bit as effective.</p>
<p>I urge you to watch these presentations. Compare how you felt about them with the many other presentations you've seen. And if, like me, you were utterly transfixed by content presented this way, consider moving toward minimalism in <i>your</i> next presentation.</p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2006-02-10T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/presentation-zen/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ Lotus Notes: Survival of the Unfittest ]]></title>
<link>https://blog.codinghorror.com/lotus-notes-survival-of-the-unfittest/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
Via <a href="http://w-uh.com/">Ole Eichhorn</a>, the UK Guardian's <a href="http://technology.guardian.co.uk/weekly/story/0,,1705106,00.html">Survival of the Unfittest</a>:
</p>
<p>
</p>
<blockquote><i>
Lotus Notes is used by millions of people, but almost all of them seem to hate it. How can a program be so bad, yet thrive?
</i></blockquote>
<p>
We've all had bad software experiences. However, at one of my jobs, our corporate email client of choice was Lotus Notes. And <b>until you've used Lotus Notes, you haven't truly experienced bad software.</b> It is death by a thousand tiny annoyances -- the digital equivalent of being kicked in the groin upon arrival at work every day.
</p>
<p>
<a href="http://lotusnotessucks.4t.com/index.html"><img alt="image placeholder" >
</p>
<p>
I won't say that Lotus Notes was the reason I quit that job, but it was definitely a factor in my decision. <a href="http://www.codinghorror.com/blog/archives/000371.html">The UI is the application.</a>
</p>
<p>
Lotus Notes is a trainwreck of epic (enterprise?) proportions, but it might be worth studying to <b>learn what not to do when developing software</b>.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2006-02-12T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/lotus-notes-survival-of-the-unfittest/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ Standard Browser Keyboard Shortcuts ]]></title>
<link>https://blog.codinghorror.com/standard-browser-keyboard-shortcuts/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>All modern browsers have extensive keyboard shortcuts:
</p>
<ul>
<li>
<a href="http://windows.microsoft.com/en-US/windows7/Internet-Explorer-9-keyboard-shortcuts">Internet Explorer</a>
</li>
<li>
<a href="http://support.mozilla.org/en-US/kb/Keyboard%20shortcuts">Firefox</a>
</li>
<li>
<a href="https://support.google.com/chrome/bin/answer.py?hl=en&amp;answer=157179">Chrome</a>
</li>
<li>
<a href="http://docs.info.apple.com/article.html?artnum=42951">Safari</a>
</li>
</ul>
<p>I tested every shortcut, and here's my list of <b>keyboard shortcuts that work in all browsers</b> – or, for the rare keyboard shortcuts I found <i>especially</i> useful, those that work in at least two of the above browsers.</p>
<table>
<tr>
<td valign="top">
<h3>Standard toolbar buttons</h3>
<div style="margin-left: 20px;">
<p><kbd>Alt</kbd>+<kbd>←</kbd>, or <kbd>Backspace</kbd><br>Back</p>
<p><kbd>Alt</kbd>+<kbd>→</kbd>, or <kbd>Shift</kbd>+<kbd>Backspace</kbd><br>Forward</p>
<p><kbd>F5</kbd><br>Reload</p>
<p><kbd>Ctrl</kbd>+<kbd>F5</kbd><br>Force Reload (no cache)</p>
<p><kbd>Esc</kbd><br>Stop</p>
<p><kbd>Alt</kbd>+<kbd>Home</kbd><br>Homepage</p>
<p><kbd>Ctrl</kbd>+<kbd>N</kbd><br>New browser window</p>
</div>
<h3>Address Bar</h3>
<div style="margin-left: 20px;">
<p><kbd>Alt</kbd>+<kbd>D</kbd>, or <kbd>Ctrl</kbd>+<kbd>L</kbd>, or <kbd>F6</kbd><br>Set focus to Address Bar</p>
<p><kbd>Ctrl</kbd>+<kbd>Enter</kbd><br>Add "www." and ".com" prefix to Address Bar</p>
<p><kbd>Alt</kbd>+<kbd>Enter</kbd><br>Open Address Bar location in a new tab</p>
</div>
<h3>Tabs</h3>
<div style="margin-left: 20px;">
<p><kbd>Ctrl</kbd>+<kbd>1</kbd>…<kbd>8</kbd><br>Switch to n<sup>th</sup> tab</p>
<p><kbd>Ctrl</kbd>+<kbd>9</kbd><br>Switch to last tab</p>
<p><kbd>Ctrl</kbd>+<kbd>Tab</kbd>, or <kbd>Ctrl</kbd>+<kbd>Page Up</kbd><br>Switch to next tab</p>
<p><kbd>Ctrl</kbd>+<kbd>Shift</kbd>+<kbd>Tab</kbd>, or <kbd>Ctrl</kbd>+<kbd>Page Down</kbd><br>Switch to previous tab</p>
<p><kbd>Ctrl</kbd>+<kbd>W</kbd>, or Middle Click tab, or <kbd>Ctrl</kbd>+<kbd>F4</kbd><br>Close current tab</p>
<p><kbd>Ctrl</kbd>+<kbd>T</kbd><br>Open new tab in the foreground</p>
<p><kbd>Ctrl</kbd>+<kbd>Shift</kbd>+<kbd>T</kbd><br>Reopen last closed tab</p>
<p><kbd>Ctrl</kbd>+Left Click, or Middle Click<br>Open clicked link in a new background tab</p>
<p><kbd>Shift</kbd>+Left Click<br>Open clicked link in a new browser window</p>
<p><kbd>Ctrl</kbd>+<kbd>Shift</kbd>+Left Click<br>Open clicked link in a new tab, and set focus to it</p>
</div>
</td>
<td valign="top">
<h3>Reading</h3>
<div style="margin-left: 20px;">
<p><kbd>Space</kbd><br>Scroll down</p>
<p><kbd>Shift</kbd>+<kbd>Space</kbd><br>Scroll up</p>
<p><kbd>Home</kbd><br>Go to top of page</p>
<p><kbd>End</kbd><br>Go to bottom of page</p>
<p><kbd>F11</kbd><br>Toggle full page mode</p>
<p><kbd>Ctrl</kbd>+<kbd>+</kbd>, or <kbd>Ctrl</kbd>+Mousewheel down<br><a href="http://www.codinghorror.com/blog/2009/01/the-two-types-of-browser-zoom.html">Zoom</a> page larger</p>
<p><kbd>Ctrl</kbd>+<kbd>-</kbd>, or <kbd>Ctrl</kbd>+Mousewheel up<br><a href="http://www.codinghorror.com/blog/2009/01/the-two-types-of-browser-zoom.html">Zoom</a> page smaller</p>
<p><kbd>Ctrl</kbd>+<kbd>0</kbd><br>Set to default <a href="http://www.codinghorror.com/blog/2009/01/the-two-types-of-browser-zoom.html">zoom</a></p>
</div>
<h3>Bookmarks</h3>
<div style="margin-left: 20px;">
<p><kbd>Ctrl</kbd>+<kbd>D</kbd><br>Add current site to bookmarks</p>
<p><kbd>Ctrl</kbd>+<kbd>H</kbd><br>Open browsing history</p>
<p><kbd>Ctrl</kbd>+<kbd>J</kbd><br>Open download history</p>
</div>
<h3>Search</h3>
<div style="margin-left: 20px;">
<p><kbd>Ctrl</kbd>+<kbd>E</kbd>, or <kbd>Ctrl</kbd>+<kbd>K</kbd><br>Set focus to search box</p>
<p><kbd>Alt</kbd>+<kbd>Enter</kbd><br>Perform search in new tab</p>
<p><kbd>F3</kbd>, or <kbd>Ctrl</kbd>+<kbd>F</kbd><br>In-page search</p>
<p><kbd>F3</kbd><br>Scroll to next in-page search item</p>
<p><kbd>Ctrl</kbd>+<kbd>F3</kbd><br>Scroll to previous in-page search item</p>
</div>
<h3>Developer</h3>
<div style="margin-left: 20px;">
<p><kbd>Ctrl</kbd>+<kbd>U</kbd><br>View source of current page</p>
<p><kbd>F12</kbd><br>Developer tools</p>
<p><kbd>Ctrl</kbd>+<kbd>Shift</kbd>+<kbd>Del</kbd><br>Delete browsing history</p>
</div>
</td>
</tr>
</table>
<p>While it's not a keyboard shortcut per se, also note that <b>left-click-and-hold on the forward and back buttons</b> will show a list of the last (n) pages to select from, if you want to go forward or back more than a single page at once. This comes in handy at least once a week for me.</p>
<p>It's good to see browser developers standardizing on at least a few common keyboard shortcuts rather than making up their own.</p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2006-02-13T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/standard-browser-keyboard-shortcuts/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ Fear of Writing ]]></title>
<link>https://blog.codinghorror.com/fear-of-writing/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>When I meet people that <a href="http://www.codinghorror.com/blog/archives/000297.html">have something to say, and an interesting way of saying it</a>, I encourage them to blog. But there's one big hurdle many people simply never get past: the actual writing.</p>
<p>
I can respect that. <strong>Writing is hard.</strong> People spend their entire lives learning how to write effectively. It isn't something you can fake. It isn't something you can buy. You have to work at it.</p>
<p>That's exactly why people who are afraid they can't write <em>should</em> be blogging. It's exercise. No matter how out of shape you are, if you exercise a few times a week, you'll inevitably get fitter. <strong>Write a small blog entry a few times every week and you're bound to become a better writer.</strong> If you're not writing because you're intimidated by writing, well, you're likely to stay that way forever.</p>
<p>If you're still hesitant, I highly recommend John Scalzi's <a href="http://www.scalzi.com/whatever/004023.html">Writing Tips for Non-Writers Who Don't Want to Work at Writing</a>, and Brian Marick's <a href="http://web.archive.org/web/20050403185924/http://www.testing.com/cgi-bin/blog/2004/11/16">Hints for Revising</a>. They're absolutely dead on with every point. <strong>Consider your writing a natural extension of your spoken conversations</strong>. If you aren't comfortable reading it out loud, rewrite it until you are. In the words of <a href="http://www.elmoreleonard.com/index.php?/forums/viewthread/20">Elmore Leonard</a>:</p>
<blockquote>If it sounds like writing, I rewrite it.</blockquote>
<p>Blogging isn't for everyone. But if you think it might be for you, <strong>don't let fear of writing keep you from doing it</strong>.</p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2006-02-14T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/fear-of-writing/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ The Real Cost of Hello World ]]></title>
<link>https://blog.codinghorror.com/the-real-cost-of-hello-world/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
The archetypal <a href="http://en.wikipedia.org/wiki/Hello_world_program">Hello World program</a> has always had a calming effect on developers. It's been a programming staple for decades:
</p>
<p>
</p>
<blockquote>
[Hello World] is typically one of the simplest programs possible in a computer language. Some, however, are surprisingly complex, especially in some GUI contexts; but most are very simple, especially those which rely heavily on a particular command line interpreter ("shell") to perform the actual output. In many embedded systems, the text may be sent to a one or two-line LCD. In yet other systems, a single LED may be turned on.
<p>
A "hello world" program can be a useful sanity test to make sure that a language's compiler, development environment, and run-time environment are correctly installed. Configuring a complete programming toolchain from scratch to the point where even trivial programs can be compiled and run may involve substantial amounts of work.
</p>
<p>
While small test programs existed since the development of programmable computers, the tradition of using the phrase "Hello world!" as the test message was influenced by <a href="http://cm.bell-labs.com/cm/cs/cbook/">the 1978 book The C Programming Language</a>. The example program from that book prints "hello, world" (no capital letters, no exclamation sign; those entered the tradition later). The book inherited the program from a 1974 Bell Laboratories internal memorandum by Kernighan -- <a href="http://www.lysator.liu.se/c/bwk-tutor.html">Programming in C: A Tutorial</a> -- which shows <a href="http://www.lysator.liu.se/c/bwk-tutor.html#simple-c">the first known version of the program</a>.
</p>
</blockquote>
<p>
Wikipedia also has a <a href="http://en.wikibooks.org/wiki/List_of_hello_world_programs">ridiculously comprehensive list of Hello World programs</a> in hundreds of programming languages, some of them extremely esoteric (read: joke) languages.
</p>
<p>
On the <a href="http://dada.perl.it/shootout/index.html">Great Win32 Computer Language Shootout</a> page, amongst all the various benchmark tests, there's even a <a href="http://dada.perl.it/shootout/hello.html">Hello World performance test</a> :
</p>
<p>
<img alt="image placeholder" >
</p>
<p>
Of course, it's a <i>completely useless</i> performance test. But that's very much in the spirit of Hello World.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2006-02-15T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/the-real-cost-of-hello-world/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ Colorization Required ]]></title>
<link>https://blog.codinghorror.com/colorization-required/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
Black and white works fine when I'm reading newspapers. But when I'm reading computer languages of any kind-- from Perl to SQL, from C# to Regular Expressions, from HTML to XML -- <b>I can't bear to read them in black and white any more.</b>
</p>
<p>
Consider this <a href="http://www.docuverse.com/blog/donpark/EntryViewPage.aspx?guid=f8375d1c-d355-486f-bb15-de9bee369fc0">Infocard XML</a> as you'd see it in a basic Notepad style text editor, perhaps with a little line numbering:
</p>
<p>
<img alt="image placeholder" >
</p>
<p>
It's just a <b>slew of angle bracket noise that makes my brain hurt</b>. But if view the same file in an editor that can colorize the XML..
</p>
<p>
<img alt="image placeholder" >
</p>
<p>
.. all of a sudden we can clearly see what's going on.
</p>
<p>
Plain old Notepad is perfectly adequate for reading text files. But if you're reading code or markup of any kind, Notepad doesn't work very well. <b>We need colorization to truly understand what we're looking at.</b>
</p>
<p>
Why is that? Are we just spoiled?
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2006-02-16T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/colorization-required/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ Choosing between .NET Pepsi and .NET Coke ]]></title>
<link>https://blog.codinghorror.com/choosing-between-net-pepsi-and-net-coke/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>I've increasingly come to believe that the debate between C# and VB.NET is a <a href="http://en.wikipedia.org/wiki/Red_herring">red herring</a>. Choosing between C# and VB.NET isn't a <em>meaningful</em> choice. <strong>It's like choosing between .NET Pepsi and .NET Coke</strong>.</p>
<p><img alt="image placeholder" >
<p>Either way, <em>you're getting a cola flavored carbonated beverage</em>.</p>
<p>If C# is Coke and VB.NET is Pepsi, then Python is <a href="http://www.drinkyoo-hoo.com/about/history.html">Yoohoo</a>. It's more than mild differences in syntax. It's a completely <a href="http://en.wikipedia.org/wiki/Dynamic_language">dynamic language</a> with <a href="http://en.wikipedia.org/wiki/Duck_typing">Duck typing</a> where <a href="http://www.secnetix.de/~olli/Python/block_indentation.hawk">indentation is used in place of squigglies or End statements</a>.</p>
<p>Wasn't this the promise of the .NET runtime-- that we'd have <strong>real, meaningful choice of language?</strong> That's why I'm so excited about <a href="http://www.ironpython.com/">IronPython</a>. IronPython has been a fine <a href="http://www.python.org/pycon/dc2004/papers/9/">proof of concept</a>, but it had no IDE integration. Until now.</p>
<p>As <a href="http://blogs.msdn.com/aaronmar/archive/2006/02/16/533273.aspx">documented</a> in Aaron Marten's blog, the latest CTP of the <a href="http://affiliate.vsipmembers.com/affiliate/downloadfiles.aspx">Visual Studio SDK</a> finally <strong>makes Python a first-class citizen in the Visual Studio 2005 IDE:</strong></p>
<p><img alt="image placeholder" >
<p>And here's the requisite <a href="http://www.codinghorror.com/blog/archives/000517.html">Hello World</a> example:</p>
<p><img alt="image placeholder" >
<p>I can't see any obvious way to build a web or winforms app in Python yet. But it's coming.</p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2006-02-17T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/choosing-between-net-pepsi-and-net-coke/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ Darwinia ]]></title>
<link>https://blog.codinghorror.com/darwinia/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>One of the most amazing gaming experiences I've had in recent memory was playing Introversion Software's <a href="http://www.darwinia.co.uk/">Darwinia</a>.</p>
<p><img alt="image placeholder" >
<p>It's a bit difficult to explain, but the game is a cross between <a href="http://www.imdb.com/title/tt0084827/">Tron</a>, <a href="http://www.mobygames.com/game/syndicate">Syndicate</a>, <a href="http://www.mobygames.com/game/populous">Populous</a>, and <a href="http://www.mobygames.com/game/lemmings">Lemmings</a>. It has a distinct, beautiful retro style all its own. And the music is fantastic. You can sample some of the <a href="http://store.introversion.co.uk/product_info.php?products_id=49">Darwinia soundtrack</a> at <a href="http://www.trash80.net/mp3s/">the Trash80 site</a>; try <a href="http://trash80.com/content/57/pain-fade-down">Pain Fade Down</a> to start.</p>
<p>It's an incredibly immersive experience. <strong>I actually began to care about Dr. Sepulveda and the tiny, fantastical Darwinian world he created</strong>. Darwinia has garnered highly positive reviews not just from me, but from <a href="http://www.gamerankings.com/htmlpages2/925872.asp">everyone</a>; here's what <a href="http://www.gamespot.com/pc/strategy/darwinia/review.html">GameSpot had to say</a>:</p>
<blockquote><em> Darwinia is a deceptively simple, poignant real-time strategy game wrapped in an abstract, minimalist veneer that somehow manages to make perfect sense within the context of the game. It's a brilliant and addictive experience that's unlike anything you've played before. </em></blockquote>
<p>One of the many clever touches in the game is the way it alternates through nine different bootloaders at startup. One is a darwinian version of Life, others emulate classic boot screens -- including an old-school 8-bit pirate crack loader!</p>
<p><img alt="image placeholder" >
<p><img alt="image placeholder" >
<p><img alt="image placeholder" >
<p>The UI for the game is also outstanding. It supports mouse gestures and uses <a href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/dnhfact/html/hfactor9_3.asp">Fitt's Law</a> to drive the control and status overlays.</p>
<p>I highly recommend the <a href="http://www.darwinia.co.uk/downloads/index.html">Darwinia demo</a>. If you enjoy the demo, purchase the full game <a href="http://storefront.steampowered.com/v2/?area=game&amp;AppId=1500">through Valve's Steam download service</a> or <a href="http://store.introversion.co.uk/product_info.php?products_id=54">on CD direct from Introversion</a>. If you decide to buy, you'll want to <a href="http://db.gamefaqs.com/computer/doswin/file/darwinia.txt">read through the faq</a>, too.</p>
<p>Introversion's first game, <a href="http://www.uplink.co.uk/screenshots.html">Uplink</a>, was released in 2001. It's essentially a hacking simulator. I played it a little bit; it's unique but ultimately too repetitive. Their next game, <a href="http://www.introversion.co.uk/defcon/index.html">Defcon</a>, should be out sometime this summer.</p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2006-02-19T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/darwinia/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ Will Mouse Gestures Ever Be Mainstream? ]]></title>
<link>https://blog.codinghorror.com/will-mouse-gestures-ever-be-mainstream/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
<a href="http://www.codinghorror.com/blog/archives/000520.html">Darwinia</a> is the third game I've played with <a href="http://en.wikipedia.org/wiki/Mouse_gestures">mouse gesture</a> support:
</p>
<ol>
<li>Bungie's classic 1998 game <a href="http://projectmagma.net/what/index.php">Myth</a> used gestures in a limited way to indicate squad facing post-movement.
</li>
<li>Lionhead's 2001 game <a href="http://www.lionhead.com/bw/index.html">Black and White</a> used gestures to invoke various spells.
</li>
<li>Introversion Software's 2005 game <a href="http://www.darwinia.co.uk/">Darwinia</a> offers gestures as an alternative control scheme.
</li>
</ol>
<p>
I've never been comfortable with mouse gestures in any of these games. It seems like a great idea in concept, but it breaks down in execution, at least for me. I distinctly remember the awkwardness of getting my squads to face the right direction in Myth. And although there was a certain element of mysticism in scrawling spells on the screen in Black and White, the game sometimes had difficulty recognizing what I had drawn. It ultimately ended up feeling like extra work when I could have simply clicked an icon or pressed a key to cast the very same spell. Perhaps problems like these are why mouse gesture control mode is not the default control mode in Darwinia.
</p>
<p>
Games tend to be experimental when it comes to UI. But mouse gestures are slowly-- <i>very</i> slowly-- making their way into mainstream operating systems and applications:
</p>
<p>
</p>
<ul>
<li>There's a <a href="http://optimoz.mozdev.org/gestures/defaultmappings.html">plugin</a> to add gesture support to Firefox
</li>
<li>
<a href="http://www.tcbmi.com/strokeit/actions.shtml?app=./files/actions/Default.cfg">Strokeit</a> offers system-wide gesture support in Windows
</li>
<li>The Opera browser <a href="http://www.opera.com/features/mouse/">natively supports gestures</a>
</li>
<li>
<a href="http://www.sensiva.com/symbolcommander/index.html">Sensiva</a> provides system-wide gestures for Tablet PCs
</li>
<li>There's a <a href="http://www.codeproject.com/atl/MouseGestures.asp">plugin</a> that brings gestures to Internet Explorer
</li>
<li>Here's <a href="http://www.vbaccelerator.com/home/NET/Code/Libraries/Windows_Messages/Mouse_Gestures/article.asp">sample code</a> that demonstrates how to add gesture support to a .NET app
</li>
</ul>
<p>
Even without any of this software installed, you can use one very familiar mouse gesture: <b>dragging and dropping</b>.
</p>
<p>
I've experimented with several of the above utilities at various times, and I'm still ambivalent about mouse gestures for a few reasons:
</p>
<ul>
<li>
<b>Gestures have <a href="http://www.codinghorror.com/blog/archives/000096.html">the one-button mouse problem</a></b>. There are zero visual cues that any of these fancy gestures are possible. Additional buttons on a mouse, or toolbar buttons on the screen, can prompt a "I wonder what this does?" reaction from a new user. There is no such discoverability for mouse gestures.
</li>
<li>
<b>Gestures are extremely mouse-centric.</b> Have you ever tried "writing" your name with the mouse? Very few users have that kind of fine motor control. But the mouse isn't your only option. Left-hand keyboard accelerator keys can be just as effective-- without requiring you to take your other hand off the mouse.
</li>
<li>
<b>There are only so many gestures you can draw.</b> Once you get beyond a dozen simple strokes in the cardinal directions (up, down, diagonal, etc), you're in trouble. It's a slippery slope to something overwhelming like <a href="http://palm.vanbrayne.com/graffiti.html">Graffiti</a>.
</li>
<li>
<b>Gestures require a dedicated accelerator key.</b> There's no way to automatically detect a mouse gesture; they have to be manually initiated via a button or keypress. In most apps, you hold down the right mouse button to begin your gesture, then release it when you're done. It's one more accelerator to remember. And it's now possible to accidentally trigger a gesture when all you wanted was the right-click menu.
</li>
</ul>
<p>
In short, <i>gestures are for extremely advanced users only</i>, perhaps even more so than traditional keyboard shortcuts. But they do have some specific uses that are <a href="http://news.com.com/2100-1023-960408.html">interesting</a>:
</p>
<p>
</p>
<blockquote><i>
"The motion of performing a gesture is more natural than sliding the mouse over to a button or menu," he said. "And because it works anywhere in the window (not just on the button), it saves a bit of time and effort, especially as screens get bigger and you have to move farther to reach a button."
</i></blockquote>
<p>
Rather than mousing over and clicking on the relatively small minimize, maximize, or close buttons, it's faster to invoke a gesture right where your mouse is to perform the same action. This is particularly nice when the gesture has some conceptual mapping to the activity: drawing a diagonal slash to close, down to minimize, up to maximize/restore, etcetera.
</p>
<p>
<img alt="image placeholder" >
</p>
<p>
For mouse gestures to become mainstream, they need to be simple, discoverable, and most definitely system-wide.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2006-02-20T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/will-mouse-gestures-ever-be-mainstream/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ C# Snippet Parity ]]></title>
<link>https://blog.codinghorror.com/c-snippet-parity/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
Microsoft recently released a <a href="http://msdn.microsoft.com/vstudio/downloads/codesnippets/default.aspx">complete set of C# code snippets for Visual Studio 2005</a>. This brings C# to parity with VB.NET, which had many more code snippets "in the box".
</p>
<p>
Unfortunately, Microsoft's installation strategy for these new snippets leaves a lot to be desired. You can download and "install" all the snippets at once, but you must manually add each of the snippet folders via the Snippet Manager (Ctrl+K, Ctrl+B). <a href="http://www.codinghorror.com/blog/archives/000419.html">I loves me some snippets</a>, but this is unacceptable!
</p>
<p>
The snippets themselves, of course, are just individual XML files that end in .snippet sitting in a bunch of folders. There are two valid snippet paths: per-user and system-wide. The system-wide C# snippet path is:
</p>
<p>
<code>C:Program FilesMicrosoft Visual Studio 8VC#Snippets1033</code>
</p>
<p>
There's an index file in that folder, <code>SnippetsIndex.xml</code>, which appears to store the snippet paths. You might think editing this file would cause the folders to appear in the snippet browser (Ctrl+K, Ctrl+X). Seems logical, right?
</p>
<p>
Unfortunately, it's not that easy.
</p>
<p>
I think that file <i>may</i> be used the first time the IDE is initialized, but edits to that file don't appear in the Snippet Manager.
</p>
<p>
The real snippet paths are stored in the registry at:
</p>
<p>
<code>[HKCUSoftwareMicrosoftVisualStudio8.0LanguagesCodeExpansionsVisual C#]</code>
</p>
<p>
Why they chose to store this stuff in the registry <i>and</i> in an XML file is beyond me. Anyway, I packaged the correctly pathed snippets and a registry file together. Now you can quickly get the snippets installed on your system without running a pointless installer that does virtually nothing for you.
</p>
<p>
You can go from tired ..
</p>
<p>
<img alt="image placeholder" >
</p>
<p>
.. to wired ..
</p>
<p>
<img alt="image placeholder" >
</p>
<p>
.. in no time at all. If you've forgotten the keyboard shortcuts for snippets, revisit my <a href="http://www.codinghorror.com/blog/archives/000419.html">snippet blog entry</a> to refresh your memory.
</p>
<p>
Microsoft provides 295 new C# code snippets, and they're 508 KB in total size. I chose to package the snippets as a 7zip file for compression efficiency:
</p>
<p>
</p>
<ul>
<li>ZIP: 229kb
</li>
<li>RAR: 73kb
</li>
<li>7Zip: 56kb
</li>
</ul>
<p>
To be fair to ZIP, it probably would have done better if the format supported <a href="http://www.win-rar.com/solidarchive.html">solid archiving</a> for this set of small files.
</p>
<p>
To decompress the archive, I recommend switching to <a href="http://www.rarlab.com/">WinRAR</a> if you aren't already. It supports 7zip as well as RAR and ZIP, but more importantly, it won the <a href="http://www.donationcoder.com/Reviews/Archive/ArchiveTools/index.html">best archive tool DonationCoder roundup</a>. I'm not a huge fan of the UI, but I encounter RAR files often enough that WinZIP isn't cutting it any more.
</p>
<p>
<a href="http://www.codinghorror.com/blog/files/ms-csharp-snippets.7z.zip">Download C# snippets and registry file</a> (60kb 7zip archive)
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2006-02-21T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/c-snippet-parity/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ Sometimes a Word is Worth a Thousand Icons ]]></title>
<link>https://blog.codinghorror.com/sometimes-a-word-is-worth-a-thousand-icons/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>Pop quiz, hotshot. <strong>What do these toolbar icons do</strong>-- and what application are they from?</p>
<p><img alt="image placeholder" >
<p>Okay, maybe that's a bit too monochrome. Does color help?</p>
<p><img alt="image placeholder" >
<p>Okay, let's try something less abstract. Does a more traditional look help?</p>
<p><img alt="image placeholder" >
<p>So we can see there's some kind of VCR-like functionality, and some arrows. And <a href="http://www.furrygoat.com/2005/05/furrygoats_law.html">Furrygoat's Law</a> is at work, because I smell some RSS in there.. somewhere. Perplexing.</p>
<p>I think you can see where this is going. Sometimes, the best icon choice isn't an icon. <strong>It's a word</strong>. <a href="http://jef.raskincenter.org/home/index.html">Jef Raskin</a> explains in his book <a href="http://www.amazon.com/exec/obidos/ASIN/0201379376/codihorr-20">The Humane Interface</a>:</p>
<blockquote>Icons contribute to the visual attractiveness of an interface and, under the appropriate circumstances, can contribute to clarity; however, the failings of icons have become clearer with time. For example, both the Mac and Windows 95 operating systems now provide aids to explain icons: when you point at the icon, a small text box appears that tells you what the icon stands for. The obvious reaction, which I have observed repeatedly when users first see this facility, is-- why not just use the words in the first place?
<p><strong>Instead of icons explaining, we have found that icons often require explanation.</strong> If you wanted to obscure or to encode an idea to keep it from prying eyes, substituting icons for the words might not be a bad start. The problem with icons can be considered an issue of diminished visibility: the interface presents an icon, but the meaning of the icon is not visible, or it may give the wrong message to someone for whom the graphic is unfamiliar or has a different interpretation. For example, an icon that shows the palm of an upraised hand indicates "halt" in the United States, but signifies "here's excrement in your face" in Greece.</p>
</blockquote>
<p>Now take a look at this alternate, ultra-minimal toolbar skin:</p>
<p><img alt="image placeholder" >
<p>Which of these toolbar skins would you rather use?</p>
<p>I'm not proposing that all icons be replaced with words. Of all the <a href="http://www.utorrent.com/skins.php">user-created toolbar skins on this page</a>, <strong>the best are invariably a combination of icons and words.</strong> Graphics alone isn't enough.</p>
<p>Consider Microsoft Word with all possible toolbars visible:</p>
<p><img alt="image placeholder" >
<p><strong>Which of these toolbar buttons are decipherable to you?</strong> My eye is inexorably drawn to the toolbar buttons with icons <em>and</em> text. The rest are lost in a morass of 16x16 graphics noise.</p>
<p>It's experiments like this that convince me the Office 12 UI team is <a href="http://blogs.msdn.com/jensenh/archive/2005/09/14/467126.aspx">really on to something with the ribbon</a>. Even the traditional menu seperators are <a href="http://blogs.msdn.com/jensenh/archive/2006/01/30/519335.aspx">plumped up with text</a> now.</p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2006-02-22T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/sometimes-a-word-is-worth-a-thousand-icons/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ Levelling Up in the IDE ]]></title>
<link>https://blog.codinghorror.com/levelling-up-in-the-ide/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
I have nothing against World of Warcraft, but the Gamasutra editorial <a href="https://www.gamasutra.com/view/feature/130976/soapbox_world_of_warcraft_teaches_.php">World of Warcraft Teaches the Wrong Things</a> highlights one problem I have with the entire <a href="http://en.wikipedia.org/wiki/MMORPG">MMORPG</a>* genre:
</p>
<p>
</p>
<blockquote>
<b>[WOW teaches players that] investing a lot of time in something is worth more than actual skill.</b> If you invest more time than someone else, you "deserve" rewards. People who invest less time "do not deserve" rewards. This is an absurd lesson that has no connection to anything I do in the real world. The user interface artist we have at work can create 10 times more value than an artist of average skill, even if the lesser artist works way, way more hours. The same is true of our star programmer. The very idea that time &gt; skill is alien.
</blockquote>
<p>
Nothing demonstrates the massive disconnect between time, skill, and value better than <a href="http://www.progressquest.com/">ProgressQuest</a>. My character <a href="http://www.progressquest.com/knoram.php?name=superwumpus">SuperWumpus</a> is on the cusp of level 86:
</p>
<p>
<img alt="image placeholder" >
</p>
<p>
ProgressQuest does away with all that tedious gameplay grinding and lets us focus on what really matters-- <b>levelling up</b>. The game's Latin motto is  <i>quamvis progressio</i>, which means "as much progress as you please." To further emphasize the point, the logo is two crossed <s>swords</s>progress bars:
</p>
<p>
<img alt="image placeholder" >
</p>
<p>
You're fighting with <i>time</i>: the person who "plays" the most ProgressQuest wins.
</p>
<p>
This is something that the <a href="http://www.pragmaticprogrammer.com/">Pragmatic Programmers</a> warn us about on slide 46 of their <a href="https://www.slideshare.net/pragdave/how-to-keep-your-job">How to Keep Your Job</a> presentation, which is about becoming a better, more deeply skilled programmer:
</p>
<p>
<img alt="image placeholder" >
</p>
<p>
The EverQuest Syndrome is the same problem highlighted in the GamaSutra article: <b>just because you spend a lot of time doing something doesn't mean you're doing it well.</b> Here's a good example from Weinberg's <a href="http://www.amazon.com/exec/obidos/ASIN/0932633420/codihorr-20">The Psychology of Computer Programming</a>:
</p>
<p>
</p>
<blockquote>
Using this sort of measure, we can easily fall into believing that the worst programmers are the best-- because they work so hard at it. A case in point was a programmer who worked 14 hours a day, seven days a week, for eight weeks to get a small program running in a new installation. For his efforts, the company gave him an award for exceptional service. Shortly thereafter, another programmer (the first had been promoted to a management position as an additional reward) was tasked with making some additions to this program. He found that the program was such a confusing mess that it was easier to rewrite than modify.
<p>
The rewriting and debugging took exactly one week, working normal hours. Even considering that writing a program for the second time is far easier, the difference is significant. Moreover, the new program ran eight times aster, took half the storage, and was half as many lines of code. Clearly, the first programmer had been rewarded for making a mountain out of a molehill. The discovery of this misapplication of management largesse led to a severe drop in morale.
</p>
</blockquote>
<p>
<b>If you want to "level up" in your IDE</b>, you can't do it by <a href="https://blog.codinghorror.com/because-i-love-the-smell-of-compilation-in-the-morning/">grinding through all-nighters</a>. You have to <a href="https://www.slideshare.net/pragdave/how-to-keep-your-job">build your skill portfolio</a>.
</p>
<p>
* I searched for this link and one of the top hits is this <a href="http://meta.wikimedia.org/wiki/Wikipedia_is_an_MMORPG">Wikipedia is a MMORPG</a> article. I've often thought that online forums were, in essence, multiplayer games.
</p>
<p>
<!--kg-card-end: markdown-->
            </p> ]]></content>
<pubDate>2006-02-23T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/levelling-up-in-the-ide/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ Error Codes Must Die ]]></title>
<link>https://blog.codinghorror.com/error-codes-must-die/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
A <a href="http://www.hanselman.com/blog/WindowsDefenderErrors0x8024402c0x80240022And1609.aspx">recent Scott Hanselman post</a> described a problem he had with <a href="http://www.microsoft.com/athome/security/spyware/software/default.mspx">Windows Defender</a>:
</p>
<p>
</p>
<blockquote>
Defender was unable to update my signatures, instead throwing a COM-ish 0x8024402c. Others are getting Error 1609 and still others 0x80240022.
<p>
<img alt="image placeholder" >
</p>
</blockquote>
<p>
This isn't an isolated incident. The latest release candidate of <a href="http://msdn.microsoft.com/vstudio/teamsystem/team/default.aspx">Team Foundation Server</a> also returns <a href="http://blogs.vertigosoftware.com/teamsystem/archive/2006/01/16/Team_System_Tips.aspx">error codes during install</a>:
</p>
<p>
</p>
<blockquote>
Most of my installations of TFS have been pretty straight forward. However, certain instances where my installation failed, I would get weird, cryptic error messages. For example, one common error I keep getting when trying to install TFS on a certain server configuration is:
<p>
The installer has encountered an unexpected error installing this package. This may indicate a problem with this package. The error code is 26105.
</p>
<p>
Can anyone decrypt this error message? I've seen this error so many times that the number 26105 is now tattoo'd into my brain! Looking at the log files helped me pinpoint the error, but I still couldn't figure out the problem.
</p>
</blockquote>
<p>
I thought error codes went out with 8-bit computers over a decade ago. <b>Is it unreasonable to expect human-readable error messages instead of undecipherable error codes in the year 2006?</b>
</p>
<p>
Allow me to channel Alan Cooper's classic <a href="http://www.amazon.com/exec/obidos/ASIN/0764526413/codihorr-20">About Face</a> for a second, because here's how users see that error code dialog:
</p>
<p>
<img alt="image placeholder" >
</p>
<p>
It really isn't that hard to build a decent error dialog. Just <b>try to communicate like a human being instead of a computer</b>. Alan Cooper provides these three guidelines:
</p>
<p>
</p>
<blockquote>
<b>Be Polite</b><br>
Never forget that an error message box is the program reporting on its failure to do its job, and it is interrupting the user to do this. The error message box must be unfailingly polite. It must never even hint that the user caused this problem, because that is simply not true from the user's perspective. The customer is always right.
<p>
<b>Be Illuminating</b><br>
The error message must illuminate the problem for the user. This means it must give him the kind of information he needs to make an appropriate determination to solve the program's problem. It needs to make clear the scope of the problem, what the alternatives are, what the program will do as a default, and what information was lost, if any. The problem should treat this as a confession.
</p>
<p>
<b>Be Helpful</b><br>
It is wrong for the program to just dump the problem on the user's lap and wipe its hands of the matter. It should directly offer to implement at least one suggested solution right there on the error message box. It should offer buttons that will take care of the problem in various ways. If a printer is missing, the message box should offer options for deferring the printout or selecting another printer.
</p>
</blockquote>
<p>
Error code dialogs go 0 for 3: they're rude, unhelpful, and about as illuminating as a mineshaft. This is one scenario where it's easy for us to write better software than Microsoft.
</p>
<p>
A dialog presenting an error code is utter and complete failure. <b>Don't <i>ever</i> use error codes</b>.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2006-02-24T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/error-codes-must-die/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ Quick and Dirty Internet Connection Troubleshooting ]]></title>
<link>https://blog.codinghorror.com/quick-and-dirty-internet-connection-troubleshooting/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
So I had a few <a href="http://scobleizer.wordpress.com/2006/02/16/im-getting-into-coding-horror/">bandwidth issues</a> recently, which you can see in the <a href="http://www.alexa.com/data/details/traffic_details?q=&amp;url=codinghorror.com">six-month alexa traffic graph</a> for this domain.
</p>
<p>
There wasn't much I could do about the traffic spike. But I did make good use of <b>two of my favorite tools for quick and dirty internet connection troubleshooting</b>. The two most important questions to ask are:
</p>
<p>
<b>How wide is your internet connection?</b>
</p>
<p>
In other words, <b>bandwidth</b>. How many kilobytes per second does your ISP allow you to transmit and receive? Most consumer internet connections are highly asymmetric-- they offer extremely fast downloads but only a tiny fraction of that for uploads. Your typical cable modem is around 300 kilobytes per second when downloading (sometimes even faster), but only 30 kilobytes per second when uploading.
</p>
<p>
For quick bandwidth measurements, I like <a href="http://readerror.gmxhome.de/">NetMeter</a>. It only shows traffic on a single computer, but when run on a server it can give you a nice idea of how much bandwidth you're using at any given time. For such a lightweight little applet, it also has some surprisingly sophisticated long-term logging and reporting abilities-- you can see how much bandwidth you've used over weeks and even months.
</p>
<p>
<img alt="image placeholder" >
</p>
<p>
<b>How fast is your internet connection?</b><br>
</p>
<p>
In other words, <b>latency</b>. How quickly does your ISP get your packets from point A to point B? Do they arrive in a timely fashion? Do they arrive at all? Unless your connection suffers from severe packet loss, this is a bit less of a priority than raw bandwidth. But it can be frustrating if your connection isn't responsive or is unreliable.
</p>
<p>
For latency measurements, I like <a href="http://www.pingplotter.com/">PingPlotter</a>. It comes in a few editions, including free. To test for latency or connectivity problems you'll want to run a few instances of PingPlotter over a series of days, all pinging large websites.
</p>
<p>
<img alt="image placeholder" >
</p>
<p>
Set the graph interval to something wide like 24 or 48 hours, and once you collect enough samples, you'll have a nice idea of when your ISP's network is busy or unavailable:
</p>
<p>
<img alt="image placeholder" >
</p>
<p>
Now, these are intentionally lightweight tools. They're no match for fancy, dedicated networking diagnostic apps. But they're simple to use and easy to gather data with. When you're calling your ISP's tech support, having these kinds of graphs to email them carries a heck of a lot more weight than generic complaints about "slowness".
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2006-02-27T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/quick-and-dirty-internet-connection-troubleshooting/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ Making a Video Game out of your code ]]></title>
<link>https://blog.codinghorror.com/making-a-video-game-out-of-your-code/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
I just installed <a href="http://www.devexpress.com/Products/NET/CodeRush/">CodeRush</a>, and now my IDE looks like this:
</p>
<p>
<img alt="image placeholder" >
</p>
<p>
From Mike Gunderloy's <a href="http://www.larkware.com/Reviews/refactor.html">review of Refactor! Pro</a>:
</p>
<p>
</p>
<blockquote><i>
Refactor! uses the same drawing technology as CodeRush, <b>making a video game out of your code</b>. When you introduce an overload, for example, you actually see strikethroughs appear on parameters being removed; when you change the name of a method in one place, the typing appears in several places at once, and is highlighted everywhere. Things move smoothly and color and animation are used well. Some people may find this distracting but once you get used to this sort of thing it's hard to go back to a text editor that doesn't take advantage of the dynamic nature of Windows. The tool is utterly non-modal, and never interrupts your work with annoying dialog boxes.
</i></blockquote>
<p>
A more interactive and dynamic IDE <a href="http://www.codinghorror.com/blog/archives/000195.html">isn't an unreasonable thing to want</a>. From <a href="http://weblogs.asp.net/rweigelt/archive/2003/07/10/9894.aspx">Roland Weigelt</a>:
</p>
<p>
</p>
<blockquote><i>
It's kind of frustrating to see computers rendering 3D worlds with 100s of frames/sec, but source code editors advancing only in very small steps.
</i></blockquote>
<p>
Amen. Just try beating my high score in <a href="http://www.devexpress.com/Products/NET/CodeRush/">CodeRush</a>. Just <i>try!</i>
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2006-02-28T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/making-a-video-game-out-of-your-code/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ Snippet Enumeration Macro ]]></title>
<link>https://blog.codinghorror.com/snippet-enumeration-macro/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
Inspired by my <a href="http://www.codinghorror.com/blog/archives/000522.html">recent post on C# code snippets</a>, I found <a href="http://www.dotnet2themax.com/blogs/fbalena/PermaLink,guid,4ca4874e-1e9d-4c75-a291-dea053cbf850.aspx">a little console app</a> by Francesco Balena* that enumerates all the <a href="http://www.codinghorror.com/blog/archives/000419.html">snippets</a> on your system along with their shortcut text.
</p>
<p>I improved his console app and turned it into a convenient IDE macro along the lines of my <a href="http://www.codinghorror.com/blog/archives/000412.html">keyboard shortcut enumerating IDE macro</a>:
</p>
<p>
<img alt="image placeholder" >
</p>
<p>
<a href="http://www.codinghorror.com/blog/files/snippets-list-macro-2.zip">Download the Snippet List Macro</a> (3kb ZIP)
</p>
<p>
I found out the hard way that the snippet manager writes all of its changes to the registry. So I use the registry to enumerate all possible snippet paths (this picks up all the per-system snippets and per-user snippets) and also to locate the snippet XML index file that cross-references all the physical paths.
</p>
<p>
The macro defaults to enumerating the C# snippets, but you can change the _Lang variable to enumerate any available snippet library: VB, C#, J#**, and Xml.
</p>
<p>
This macro only works in <b>Visual Studio 2005</b>, obviously. Here's how to run it:
</p>
<p>
</p>
<ol>
<li>go to Tools - Macros - IDE
</li>
<li>create a new Module named "Snippets" under "MyMacros"
</li>
<li>paste the macro code into the module
</li>
<li>close the macro IDE window
</li>
<li>go to Tools - Macros - Macro Explorer
</li>
<li>A new macro named "List" will be under "Snippets." Double-click it to run.
</li>
<li>The macro will take a minute or so to write a HTML file to your My Documents file, and open that HTML file in the IDE.
</li>
</ol>
<p>
* One of my earliest coding heroes!
</p>
<p>
** Does anyone actually <i>use</i> J#? C'mon. Seriously.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2006-03-01T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/snippet-enumeration-macro/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ In Pursuit of Simplicity ]]></title>
<link>https://blog.codinghorror.com/in-pursuit-of-simplicity/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
John Maeda created quite a stir with his montage of the Yahoo and Google homepages from 1996 to 2006 in <a href="http://weblogs.media.mit.edu/SIMPLICITY/archives/000263.html">simple is about staying simple</a>:
</p>
<p>
<img alt="image placeholder" >
</p>
<p>
Although Philipp Lenssen has posted on this topic before (he calls it <a href="http://blog.outer-court.com/archive/2003_08_01_index.html">the portal plague</a>), it's still striking. Altavista made <a href="http://blog.outer-court.com/archive/2005-02-18-n47.html">the same mistake</a>, and they didn't survive.
</p>
<p>
There's an interesting anecdote about Google's absolute focus on minimalism in Seth Godin's book <a href="http://www.amazon.com/exec/obidos/ASIN/159184021X/codihorr-20">Purple Cow</a>:
</p>
<blockquote>
It turns out that the folks at Google are obsessed with the email they get criticizing the service. They take it very seriously. One person writes in every once and a while and he never signs his name. According to Marissa Meyer at Google, "Every time he writes, the e-mail contains only a two-digit number. It took us a while to figure out what he was doing. He's counting the number of words on the home page. When the number goes up, he gets irritated, and e-mails us the new word count. As crazy as it sounds, his emails are helpful, because they put an interesting discipline on the UI team not to introduce too many links. It's like a scale that tells you that you've gained two pounds."
</blockquote>
<p>
And of course, <a href="http://www.37signals.com">37signals</a> is famous for their mantra of <a href="http://www.37signals.com/svn/archives2/less_as_a_competitive_advantage_my_10_minutes_at_web_20.php">less as a competitive advantage</a>:
</p>
<p>
</p>
<blockquote>
Conventional wisdom says to beat your competitors you need to one-up them. If they have 4 features, you need 5. Or 15. Or 25. If they're spending X, you need to spend XX. If they have 20, you need 30.
<p>
While this strategy may still work for some, it's expensive, resource intensive, difficult, defensive, and not very satisfying. And I don't think it's good for customers either. It's a very Cold War mentality  --  always trying to one-up. When everyone tries to one-up, we all end up with too much. There's already too much "more"  --  what we need are simple solutions to simple, common problems, not huger solutions to huger problems.
</p>
<p>
What I'd like to suggest is a different approach. Instead of one-upping, try one-downing. Instead of outdoing, try underdoing. Do less than your competitors to beat them.
</p>
</blockquote>
<p>
Usability guru Donald Norman thinks the comparison between Google and Yahoo is misleading, and offers <a href="http://www.jnd.org/dn.mss/the_truth_about.html">the truth about Google's so-called "simplicity"</a>:
</p>
<p>
</p>
<blockquote>
Is Google simple? No. Google is deceptive. It hides all the complexity by simply showing one search box on the main page. The main difference, is that if you want to do anything else, the other search engines let you do it from their home pages, whereas Google makes you search through other, much more complex pages. Why aren't many of these just linked together? Why isn't Google a unified application? Why are there so many odd, apparently free-standing services?
</blockquote>
<p>
I think this is a completely wrongheaded analysis, because <b>I don't want to do anything else</b>. All I want is to find what I'm searching for. Like Damien Katz, I believe <a href="http://damienkatz.net/2006/02/why_features_do.html">features don't matter</a>:
</p>
<p>
</p>
<blockquote>
These people don't care about your flexible, brilliant architecture. They don't wish to tweak settings. They don't want to spend more than 10 consecutive seconds confused. They just want simple, they want to get their task done and move on. They don't want to spend time learning anything because they know they'll probably just forget it long before they'll need to do it again anyway.
</blockquote>
<p>
We should always be <b>in pursuit of simplicity</b>, in whatever form it takes.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2006-03-02T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/in-pursuit-of-simplicity/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ Sucking Less Every Year ]]></title>
<link>https://blog.codinghorror.com/sucking-less-every-year/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
Steve Yegge's <b>whirlwind language tour</b> is, as he points out, neither good nor complete, which makes it <a href="http://steve.yegge.googlepages.com/tour-de-babel">one of the best blog posts I've read this year</a>. I'll spoil the ending for you: according to Steve, Ruby combines the best features of Perl, Smalltalk, Python, and Lisp into one bag of unparalleled goodness, while avoiding the pitfalls these languages fell into.
</p>
<p>
I really ought to look into this Ruby thing.
</p>
<p>
What's really remarkable about this article, though, are the many random gems of programming wisdom peppered throughout. Like this one:
</p>
<p>
</p>
<blockquote>
When I started at Amazon, I could recite for you all the incantations, psalms, voodoo chants and so on that I'd learned, all in lieu of intelligence or experience, the ones that told me Multiple Inheritance is Evil 'cuz Everyone Says So, and Operator Overloading Is Evil, and so on. I even vaguely sort of knew why, but not really. <b>Since then I've come to realize that it's not MI that sucks, it's developers who suck. I sucked, and I still do, although hopefully less every year.</b>
</blockquote>
<p>
I've often thought that sucking less every year is how <a href="http://www.codinghorror.com/blog/archives/000051.html">humble programmers</a> improve. You <i>should</i> be unhappy with code you wrote a year ago. If you aren't, that means either A) you haven't learned anything in a year, B) your code can't be improved, or C) you never revisit old code. All of these are the kiss of death for software developers.
</p>
<p>
<a href="http://www.codinghorror.com/blog/archives/000099.html">We all write shitty software</a>. But only the <i>best</i> developers realize they're doing it. It'd be ironic if it wasn't so <a href="http://www.thedailywtf.com">depressing</a>.
</p>
<p>
(via <a href="http://damienkatz.net/2006/03/tour_de_babel_1.html">Damien Katz</a>)
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2006-03-03T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/sucking-less-every-year/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ The Cult of Coleco Adam ]]></title>
<link>https://blog.codinghorror.com/the-cult-of-coleco-adam/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>My second true computer, after the TI-99/4a, was the <a href="http://oldcomputers.net/adam.html">Coleco Adam</a>:</p>
<img alt="image placeholder" >
<p>I remember waiting in line in the snow with my Dad to get our hands on one of the first ADAM computers. Oh, the awful SmartBASIC programs I would write! I spent hours and hours hacking away in that terrible AppleBASIC clone. And loving every minute of it.</p>
<p>But the ADAM had some serious drawbacks:</p>
<ul>
<li>
<p><b>The world's loudest daisywheel printer</b>. It was loud when powered on doing <i>nothing</i>. You know that's a bad sign. When it was printing, it was quite literally deafening. I kept a towel nearby to toss over it while it was printing, otherwise nobody in the room, myself included, could think straight. All this for a whopping <i>10 characters per second</i>.</p>
</li>
<li>
<p><b>Cassette tape drives</b>. Okay, they weren't technically cassette tapes, they were fancy 256 kilobyte "custom data packs". Man, were these things slow. I could handle the slowness, but they also had a very unfortunate tendency to unspool. And when you've spent the last week writing the ultimate tank combat game – which happens to be stored on that unspooled tape – you develop some serious tape surgery skills, stat. I must have reconstructed those data packs fifteeen times over.</p>
</li>
</ul>
<p>As with so many computers of my youth, I quickly outgrew it, <a href="http://blog.codinghorror.com/a-lesson-in-apple-economics/">moving on to the Apple //c</a>. Coleco discontinued the ADAM in 1985, barely two years later.</p>
<p>Though it was never a particularly good computer by any objective measure, <b>some people never gave up on the ADAM</b>. Richard Drushel delivered <a href="http://web.archive.org/web/20060503064420/http://buffy.sighup.org.uk/hfiles/abjg.html">this incredible, poignant speech</a> at ADAMcon 7 in 1995, nearly ten years after the official death of the ADAM:</p>
<blockquote>
<p>In 1995, if you are an active ADAM programmer, like me, there is no way that you can be doing it for hope of financial gain – by now, there's none to be had. I'm an ADAM programmer because I'm intrinsically interested in the ADAM. I write software for me, and if other people find it useful, that's great, but I'll program whether anybody else cares about what I'm doing or not. For me, it's been fun (though often challenging and frustrating) to learn about how the ADAM works, and how to make it do interesting things.</p>
<p>Unfortunately, I have not found many other people like me in the ADAM community. There aren't many of us programmers left, for a variety of personal and professional reasons. I don't believe you need a Ph.D. in order to learn how to write your own software in SmartBASIC or even assembler, but most of you out there believe otherwise; and I can't overcome the strength of your belief. There are many practical benefits to doing your own programming, not the least of which is that you can make your program do exactly what you want it to do. More important nowadays, however, is that ADAM programming skills can be part of your maintenance toolkit. If all the ADAM newsletters disappear, all the ADAM BBSes go off-line, no more ADAMcons are held, and you can't find anybody else who has an ADAM, then you, like Robinson Crusoe, can be self-sufficient on your own desert island. For me, that is an important motivation – because I'm really worried that the ADAM is about to become a desert island.</p>
</blockquote>

<p>I don't remember how I found that speech. It must have been in 1996 or 1997 that I stumbled across it in some random pre-Google internet search. But <b>I was completely unprepared for the depth of emotion and attachment people had developed for what was, at best, a footnote in computing history</b>.</p>
<p>It's sad and irrational, yet oddly inspiring. Perhaps, as Richard points out, it isn't about the ADAM, but the people:</p>
<blockquote>
<p>The ADAMcons are a public service to the ADAM community. They aren't supposed to turn a profit, but they have to break even. In order to break even, there has to be a certain critical mass of attendees. In order to make it worth someone's while, or some users group's while, to put effort into planning and running an ADAMcon, you'd like to see a little more than the bare minimum attendance. But I'm not sure that it's reasonable to expect much attendance at all. Already, the evidence is clear that there are not enough dollar votes to support new ADAM hardware and software development. What's the attraction of yet another ADAMcon? There won't be much new to see, the sessions will be pretty much the same as they've always been, most of the big-name personalities from the first 5 years of ADAM have moved on to other things, so those of you who like to hobnob with royalty will find only Johnny-come-latelies like me. Unless this is your first or second ADAMcon, everything is as familiar as an old shoe, only the city and hotel are different. Is it really worth $250 US for the same hamburger in a different bun?</p>
<p>Well, it must be, since all of you are here now. Unless you are a first-timer just discovering that there is a wider ADAM world, like me at ADAMcon 04, you must admit that the ADAM per se is only a flimsy excuse for your attendance this year. The real reason you're here is social. At past ADAMcons, or via now- defunct newsletters, or through now-disconnected BBSes, you met people who have become your friends. The ADAM brought you together, originally for some concrete and practical purpose (such as, you wrote some software that I want to buy), but now the ADAM connection is a historical artifact. Some of you would keep in touch whether there were still ADAMcons or not, whether you ever used your ADAMs again or not.</p>
</blockquote>
<p>In case you were wondering, <a href="http://www.adamcon.org/">ADAMCon 2006 is in Chicago</a>.</p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2006-03-06T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/the-cult-of-coleco-adam/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ Web Forms: Death By a Thousand Textboxes ]]></title>
<link>https://blog.codinghorror.com/web-forms-death-by-a-thousand-textboxes/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
Why do HTML forms have to be <b>death by a thousand tiny textboxes?</b>
</p>
<p>
The classic example of this is phone number, which typically forces you to tab through three annoying little textboxes to enter a single number:
</p>
<p>
<img alt="image placeholder" >
</p>
<p>
Why can't we let the user enter the number however they like, and accept lots of formats?
</p>
<p>
<img alt="image placeholder" >
</p>
<p>
Yes, it's a bit more work for the programmer. But <i>who cares?</i> The developers will only code and debug this once. Users, however, will be forced to enter thousands of telephone numbers in that tedious, time-consuming tiny textbox way. <b>Forcing hundreds of users to do more work to make a single programmer's life slightly easier is a false economy.</b>
</p>
<p>
I also wonder why we have to enter addresses in a bunch of textboxes.
</p>
<p>
<img alt="image placeholder" >
</p>
<p>
Wouldn't it be easier if I just filled out a mailing label and typed my address <i>exactly the same way I write it?</i>
</p>
<p>
<img alt="image placeholder" >
</p>
<p>
Everyone has filled out an address label before. It's completely and utterly intuitive, even if you live in another country.
</p>
<p>
I realize this doesn't work for the entire order form. We still need to collect email address, phone numbers, and so forth. But it sure would make the address entry a lot easier -- and more obvious -- for the users.
</p>
<p>
We have to stop optimizing for programmers and start optimizing for users.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2006-03-07T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/web-forms-death-by-a-thousand-textboxes/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ Doing It Like Everyone Else Does ]]></title>
<link>https://blog.codinghorror.com/doing-it-like-everyone-else-does/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
<a href="http://weblogs.asp.net/jgalloway/">Jon Galloway</a> called me out in a comment yesterday for <a href="http://www.codinghorror.com/blog/archives/000532.html">advocating a non-standard approach</a>:
</p>
<p>
</p>
<blockquote>
Web forms have become a convention, and users have been trained for 10 years on how to fill out forms. Users would get confused, and some would bail out (abandon carts, etc.). Web forms work, and we know how to use them. Your form example violates the <a href="http://www.codinghorror.com/blog/archives/000377.html">"Don't Make Me Think"</a> principle on many levels.
</blockquote>
<p>
In a sense, he's right. When it comes to coding, as <a href="http://blogs.msdn.com/steverowe/archive/2005/09/28/475036.aspx">Steve Rowe points out</a>, <b>always favor consistency over cleverness</b>:
</p>
<p>
</p>
<blockquote>
The class isn't the main point of this post, however.  Rather, it is some advice that Peter gave a few times during the class.  Someone might ask a question like "Can't I do x in some funky way?" and he would answer, "You could, but no one would expect to see it so don't."  The point he was making is that we, as programmers, should stay away from being clever.  <b>We should, as much as possible, try to do things the same way everyone else does them.</b>  Why?  Because you won't be the only person to work on this code.  Even if you are, the next time you touch it might be a year or two from now.  If you did something clever, the next person to touch it will look at the code and not immediately understand.  This will have one of two consequences.  Either they will have to spend 10 minutes just trying to understand what it is you did or, worse, they will assume you made a mistake and "fix" it by making it less clever.  Neither of these results is desireable.  Unless you are writing one-off code for yourself you need to write it in a manner to make it easily understandable so that it can be easily maintained.
</blockquote>
<p>
It's clearly a bad idea to write code with a "how 'bout we try it <i>this</i> way" mentality, as <a href="http://weblogs.asp.net/alex_papadimoulis/archive/2005/05/25/408925.aspx">humorously noted by Alex Papadimoulis</a>:
</p>
<p>
</p>
<blockquote>
"A client has asked me to build and install a custom shelving system. I'm at the point where I need to nail it, but I'm not sure what to use to pound the nails in. <b>Should I use an old shoe or a glass bottle?</b>"
<p>
a) It depends. If you are looking to pound a small (20lb) nail in something like drywall, you'll find it much easier to use the bottle, especially if the shoe is dirty. However, if you are trying to drive a heavy nail into some wood, go with the shoe: the bottle with shatter in your hand.
</p>
<p>
b) There is something fundamentally wrong with the way you are building; you need to use real tools. Yes, it may involve a trip to the toolbox (or even to the hardware store), but doing it the right way is going to save a lot of time, money, and aggravation through the lifecycle of your product. You need to stop building things for money until you understand the basics of construction.
</p>
</blockquote>
<p>
However, when it comes to issues of user interface, consistency isn't <i>always</i> a virtue. <b>User interfaces should be internally consistent, but not necessarily consistent with every other application in the rest of the world.</b> That said, some UI elements become so ingrained into popular culture that they should be followed for consistency's sake. Some good examples are:
</p>
<p>
</p>
<ul>
<li>A search box in the upper-right hand corner
</li>
<li>A logo in the upper-left hand corner that takes you back home
</li>
<li>The "forward" and "back" buttons
</li>
</ul>
<p>
But not all user interface conventions are created equal. Some are timeless. Some are there by default, because nobody bothered to sufficiently question them. Some grow old and outlive their usefulness. <b>How do we discriminate between conventions that actually help us and those that are merely.. expected?</b>
</p>
<p>
The answer, of course, is to try multiple approaches and collect usage data to determine what works and what doesn't. This is (relatively) easy for web apps, which is why <a href="http://blog.outer-court.com/archive/2005-12-01.html#n20">Amazon</a>, <a href="http://blog.outer-court.com/archive/2006-02-08-n53.html">Yahoo</a> and <a href="http://blog.outer-court.com/archive/2005-11-29-n37.html">Google</a> are all notorious for doing it. They'll serve up experimental features to a tiny fraction of the user base, collect data on how those features are used, then feed that back into their decision making process.
</p>
<p>
If we built UI with an iron-clad guarantee that we would "do it like everyone else", would we have ever experienced the ultra simple Mom-friendly <a href="http://www.pvrblog.com/pvr/2004/12/the_pvrblog_int.html">Tivo UI</a>? Or Windows Media Center's amazing, utterly un-Windows-like ten foot UI? Would Office 12 be using the <a href="http://www.codinghorror.com/blog/archives/000397.html">innovative new ribbon</a> instead of traditional toolbars and menus? Heck, would we have ever made the transition from character mode to GUIs?
</p>
<p>
I think <b>UI experimentation is not only desirable, but necessary</b>. If we don't experiment, we can't evolve UI forward. However, you have to do it the right way:
</p>
<p>
</p>
<ol>
<li>Have a complete understanding of the current convention and how it arose
</li>
<li>Have a good, reasoned argument for deviating from the convention
</li>
<li>Collect usage data on your experiments
</li>
<li>Make decisions based on the usage data
</li>
</ol>
<p>
If you're not collecting usage data, or your reason is "it looks better this way", then you're doing it wrong, and you should stick with the conventions.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2006-03-08T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/doing-it-like-everyone-else-does/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ SDWest 2006: My McConnell Moment ]]></title>
<link>https://blog.codinghorror.com/sdwest-2006-my-mcconnell-moment/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
I'll be attending <a href="http://www.sdexpo.com/">SDWest 2006</a> all next week (March 13 - 17) in Santa Clara, California.
</p>
<p>
If you're attending, let's meet up somewhere! I've met a handful of people in person at past conferences:
</p>
<p>
</p>
<ul>
<li>
<a href="http://blogs.msdn.com/saraford/default.aspx">Sara Ford</a>
</li>
<li>
<a href="http://hyperthink.net/blog/">Steve Maine</a>
</li>
<li>
<a href="http://waltritscher.com/blog/ramblings/">Walt Rischler</a>
</li>
</ul>
<p>
The highlight of SDWest, however, will hopefully be meeting <a href="http://www.stevemcconnell.com/">Steve McConnell</a>, who is giving the keynote on Monday.
</p>
<p>
<img alt="image placeholder" >
</p>
<p>
McConnell was <b>my first coding hero</b>.*
</p>
<p>
I discovered his book <a href="http://www.amazon.com/exec/obidos/ASIN/0735619670/codihorr-20">Code Complete</a> in 1994 and it was a revelation. Programming is such a solitary pursuit, and particularly so in those pre-internet days. In Code Complete, I found an amazingly passionate, incredibly literate, and consummately professional programmer to learn from. <b>Code Complete convinced me that writing software is what I want to do for the rest of my life</b>. The book-- now upgraded to <a href="http://www.codinghorror.com/blog/archives/000022.html">version 2.0</a>-- has been my bible ever since.
</p>
<p>
<b>Update</b>: Steve was very gracious, talking at some length with me both before and after his keynote. He even signed my copy of Code Complete 2. As he said, "I guess I should sign on a page with a Coding Horror":
</p>
<p>
<img alt="image placeholder" >
</p>
<p>
Who are your coding heroes-- and why?
</p>
<p>
* and hey, I'm <a href="http://activedeveloper.dk/weblogs/mrjs/gallery/image/2.aspx">not the only one</a>.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2006-03-09T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/sdwest-2006-my-mcconnell-moment/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ Users Don't Care About You ]]></title>
<link>https://blog.codinghorror.com/users-dont-care-about-you/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>Seth Godin showed this slide during a recent <a href="http://video.google.com/videoplay?docid=-6909078385965257294">presentation at Google</a>:</p>
<blockquote>Users don't care about YOU.</blockquote>
<p>What's the <a href="http://www.webpagesthatsuck.com/biggest-web-design-mistakes-in-2004.html">biggest web design mistake of 2004?</a></p>
<blockquote> 1. Believing people care about you and your web site. </blockquote>
<p>Why isn't <a href="http://www.gapingvoid.com/Moveable_Type/archives/002173.html">anyone reading our blog?</a></p>
<blockquote> 1. You're not a good-looking female who likes <a href="http://www.samugliestdog.com/pastwinners.html">posting naked pictures of herself</a>.<br> 2. There's nothing in it for them. </blockquote>
<p>This is not to say that <a href="http://headrush.typepad.com/creating_passionate_users/2006/02/rethinking_test.html">users don't care</a>:</p>
<blockquote>The main point: <strong>users don't care about you as much as they care about themselves.</strong>
</blockquote>
<p>Users just <a href="http://headrush.typepad.com/creating_passionate_users/2005/01/users_shouldnt_.html">aren't that into you</a>. It's not personal. It's business. Unless what you're writing …</p>
<ul>
<li>solves their problem </li>
<li>provides useful information </li>
<li>entertains them </li>
<li>makes them feel like <a href="http://headrush.typepad.com/creating_passionate_users/2005/10/making_happy_us.html">they rule</a> </li>
</ul>
<p>…  it's irrational to expect users to care about it.</p>
<p>Every time you create something – whether it's a website, a client app, a blog post, a powerpoint presentation, or an email – ask yourself, "so what?" If you can't answer that question convincingly, reformulate and try again.</p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2006-03-10T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/users-dont-care-about-you/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ History of the OK Button ]]></title>
<link>https://blog.codinghorror.com/history-of-the-ok-button/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
Our old friend, the OK Button, has gone through a few visual tweaks in the last twenty years of Windows:
</p>
<p>
<img alt="image placeholder" >
</p>
<p>
<img alt="image placeholder" >
</p>
<p>
<img alt="image placeholder" >
</p>
<p>
<img alt="image placeholder" >
</p>
<p>
<img alt="image placeholder" >
</p>
<p>
There is one constant, however: the use of OK. It's an abbreviated form of Okay. But where did this word, and its convenient two-letter abbreviation, come from? The question is answered in <a href="http://www.straightdope.com/classics/a2_250">this straight dope column on the etymology of OK</a>:
</p>
<p>
</p>
<blockquote>
<i>
The etymology of OK was masterfully explained by the distinguished Columbia University professor Allen Walker Read in a series of articles in the journal American Speech in 1963 and 1964.
</i><p>
The letters, not to keep you guessing, stand for "oll korrect." They're the result of a fad for comical abbreviations that flourished in the late 1830s and 1840s.
</p>
<p>
Read buttressed his arguments with hundreds of citations from newspapers and other documents of the period. As far as I know his work has never been successfully challenged.
</p>
</blockquote>
<p>
The <a href="http://en.wikipedia.org/wiki/Okay">Wikipedia entry on OK</a> offers many other theories on the etymology of the word-- but the timing of the first written appearance seems to support Reed.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2006-03-12T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/history-of-the-ok-button/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ Firefox Excessive Memory Usage ]]></title>
<link>https://blog.codinghorror.com/firefox-excessive-memory-usage/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
I like Firefox. I've even grown to like it slightly more than IE6, mostly because it has a far richer add-on ecosystem.
</p>
<p>
But I have one serious problem with Firefox:
</p>
<p>
<img alt="image placeholder" >
</p>
<p>
This screenshot was taken after a few days of regular Firefox usage. That's <b>over 900 megabytes of memory for a single, non-tabbed instance of Firefox</b>.
</p>
<p>
What's going on? Well, according to my tests, <b>Firefox never seems to release any of the memory it uses-- until you close <i>all</i> instances of Firefox.</b> If you spend enough time browsing the web, and never close Firefox completely, you'll consume nearly a gigabyte of memory!
</p>
<p>
Because I often keep at least one browser window open for research or reminder purposes, this bites me <i>a lot</i>. I'll look at Task Manager and Firefox will <b>regularly be gobbling up over 400 megabytes</b>. This isn't uncommon. It's normal.
</p>
<p>
I don't ever recall having this problem with IE 6.
</p>
<p>
Of course, I can close all instances of Firefox and reduce memory usage back to zero, but why should I have to? I've read <a href="http://news.yahoo.com/s/cmp/20060217/tc_cmp/180203308">this techweb news article</a> on the controversy around Firefox and memory usage, and I've implemented the workaround suggested in that article:
</p>
<p>
</p>
<ol>
<li>Within Firefox, enter "about:config" (minus the quotation marks) in the address bar
</li>
<li>Scroll down to the entry "browser.sessionhistory.max_total_viewers" and double-click it.
</li>
<li>In "Enter integer value" field, type..
<ul>
<li>"0" to disable the cache
</li>
<li>"1" through "8" to set the maximum cache as 1 through 8 previously-viewed pages
</li>
<li>"-1" to return the cache to its default
</li>
</ul>
</li>
</ol>
<p>
Sadly, this fix did very little to address the problem. The above screenshot was taken <i>after</i> setting that value to 1!
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2006-03-13T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/firefox-excessive-memory-usage/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ In Praise of Good Design ]]></title>
<link>https://blog.codinghorror.com/in-praise-of-good-design/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
Which pill bottle would you rather use?
</p>
<p>
<img alt="image placeholder" >
</p>
<p>
The rightmost bottle was <a href="http://newyorkmetro.com/nymetro/health/features/11700/index.html">designed  by Target to address the shortcomings of traditional pill bottles</a>. And you probably decided which pill bottle you liked best within <a href="http://news.bbc.co.uk/1/hi/technology/4616700.stm">a twentieth of a second</a>.
</p>
<p>
When I suggested <a href="http://www.codinghorror.com/blog/archives/000401.html">redesigning address input in web forms</a>, there was some resistance. Current web forms are <i>good enough</i>. Yeah, they have some shortcomings. But why change what works? Why change what people are used to?
</p>
<p>
<b>Why did we have to wait 50 years for a better pill bottle?</b> Because the shortcomings of pill bottles weren't <i>important</i> enough to justify a new design? I think that's a crock. We should constantly be striving to overcome existing shortcomings with better designs.
</p>
<p>
Donald Norman has a <a href="http://www.jnd.org/GoodDesign.html">page with examples of well-designed products</a> that he calls <b>In Praise of Good Design</b>. Did the kitchen whisk <i>need</i> to be redesigned? No. Is it better <i>because</i> it was redesigned? Absolutely.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2006-03-14T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/in-praise-of-good-design/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ Selling Usability ]]></title>
<link>https://blog.codinghorror.com/selling-usability/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
It can be very difficult to sell usability, as Jared Spool notes in <a href="http://www.informationdesign.org/special/spool_interview.php">this 2004 interview</a>:
</p>
<p>
</p>
<blockquote>
<i>
I learned quickly that <b>business executives didn't care about usability testing or information design</b>. Explaining the importance of these areas didn't get us any more work. Instead, when we're in front of executives, we quickly learned to talk about only five things:
</i><p>
</p>
<ol>
<li>How do we increase revenue?
</li>
<li>How do we reduce expenses?
</li>
<li>How do we bring in more customers?
</li>
<li>How do we get more business out of each existing customer?
</li>
<li>How do we increase shareholder value?
</li>
</ol>
<p>
Notice that the words 'design', 'usability', or 'navigation' never appear in these questions. We found, early on, that the less we talked about usability or design, the bigger our projects got. Today, I'm writing a proposal for a $470,000 project where the word 'usability' isn't mentioned once in the proposal.
</p>
</blockquote>
<p>
If you can't talk about usability, what do you talk about? How many customers you're losing. In the internet era, <b>the cost of switching to a competitor is approaching zero</b>. If your site is more difficult to use than your competition's, you're in trouble. A recent A List Apart article highlights <a href="http://www.alistapart.com/articles/flywheelsandfriction">the dramatic results of a usability overhaul</a>:
</p>
<p>
</p>
<blockquote>
<i>
We tested a subscription route that [..] asked for a lot less information on the subscription page.
</i><p>
The outcome? An increase in conversion rates of over 500%. That is to say, of the people who arrived at the subscription offer page, we increased the number who actually signed up by over 500%.
</p>
<p>
And while we sold a little harder -- and offered an incentive at the back end -- the primary cause of the increase was almost certainly that we reduced the friction during the sign-up process. We offered more and asked for less.
</p>
<p>
With another partner we cut back on the number of pages involved in signing up for a paid subscription service from nine to three. (Yes, a nine-page process was more than excessive.) The result? An increase in sign-ups of 293%.
</p>
</blockquote>
<p>
You may have trouble selling usability improvements-- but I don't think you'd have any trouble selling a three to five fold increase in sign-up rates.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2006-03-15T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/selling-usability/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ Programmers as Human Beings ]]></title>
<link>https://blog.codinghorror.com/programmers-as-human-beings/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
It's remarkable how much you can learn from other programmers. Not by reading their code, mind you, but by realizing that <a href="http://www.artima.com/weblogs/viewpost.jsp?thread=4414">programmers are human beings</a>. Nowhere is that more evident than <b>these two collections of interviews with notable programmers</b>:
</p>
<p>
<a href="http://www.amazon.com/exec/obidos/ASIN/0387982698/codihorr-20">
<img alt="image placeholder" >
 
<a href="http://www.amazon.com/exec/obidos/ASIN/1556152116/codihorr-20">
<img alt="image placeholder" >
</p>
<p>
Both <a href="http://www.amazon.com/exec/obidos/ASIN/1556152116/codihorr-20">
Programmers At Work: Interviews with 19 Programmers Who Shaped the Computer Industry</a> and <a href="http://www.amazon.com/exec/obidos/ASIN/0387982698/codihorr-20">
Out of Their Minds: The Lives and Discoveries of 15 Great Computer Scientists</a> are packed with amazing insights, even though these interviews are now more than 15 years old.
</p>
<p>
For more of the human side of software development, I also recommend this list of <a href="http://c2.com/cgi/wiki?SoftwareDevelopmentStories">real world programming stories</a>.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2006-03-16T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/programmers-as-human-beings/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ Microsoft Doesn't Trust .NET ]]></title>
<link>https://blog.codinghorror.com/microsoft-doesnt-trust-net/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
Richard Grimes recently posted an <a href="http://www.grimes.demon.co.uk/dotnet/vistaAndDotnet.htm">Analysis of .NET Use in Longhorn and Vista</a>, wherein he draws two conclusions:
</p>
<p>
</p>
<ol>
<li>Between PDC 2003 and the release of Vista Beta 1, Microsoft has decided that it is better to use native code for the operating system
</li>
<li>
<b>Microsoft has shown no intention so far to use .NET on a large scale on XP</b> or the server versions of Windows, neither in the operating system, nor in their major revenue generating applications.
</li>
</ol>
<p>
I agree with the first point. If you're writing an OS, you need to get down to the metal. Managed code trades off CPU cycles for protection from buffer overruns and other C++ nastiness, but I'd rather <a href="http://www.codinghorror.com/blog/archives/000491.html">spend those CPU cycles on virtualization to protect myself</a>. That said, there is <a href="http://research.microsoft.com/os/singularity/">Microsoft's Singularity project</a>, which is an OS written entirely in managed code.
</p>
<p>
But the second point is <i>just plain wrong</i>. The <b>Windows XP Media Center Edition functionality was, and is, written in .NET!</b> Just ask <a href="http://www.winsupersite.com/showcase/freestyle_joeb.asp">Joel Belfiore</a>:
</p>
<p>
</p>
<blockquote><i>
From a technical standpoint, Media Center user interface functionality is
almost entirely written in C# managed code, on top of native Win32 and
DirectX Windows XP components. These operating system components render
video and draw fluid animations smoothly on the screen at 60 frames per
second, with hardware acceleration and MPEG decoding provided by 3rd
parties. Getting all these technology components to work together well was
our biggest challenge.
</i></blockquote>
<p>
Windows XP Media Center Edition happens to be one of the <a href="http://blog.mediacentersandbox.com/PermaLink,guid,ff63be76-1a1c-4f25-a37b-6acaa9efa174.aspx">fastest selling versions of Windows at the moment</a>:
</p>
<p>
</p>
<blockquote><i>
Sales of Media Center have reached the 6.5 million mark in just three years.
</i></blockquote>
<p>
MCE is a superset of Pro, in that it is based on Pro (it has IIS, etc) but with added MCE functionality. Now <a href="http://www.newegg.com/Product/ProductList.asp?Brand=1149&amp;N=2060350368+50001149&amp;Submit=ENE&amp;Manufactory=1149&amp;SubCategory=368">check out the newegg.com Windows pricing</a>:
</p>
<p>
XP Pro : $139.95<br>
XP MCE : $114.95
</p>
<p>
So you're getting <i>more</i> functionality for <i>less</i> money. Hmm. I wonder which version of Windows is going to sell faster?
</p>
<p>
I would say the 6.5 million sales of XP MCE to date clearly indicates "[Microsoft's] intention to use .NET on a large scale on XP", wouldn't you?
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2006-03-17T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/microsoft-doesnt-trust-net/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ Everything You Know Will Be Obsolete in Five Years ]]></title>
<link>https://blog.codinghorror.com/everything-you-know-will-be-obsolete-in-five-years/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
One of the peculiarities of software development is <b>how rapidly knowledge becomes obsolete</b>. Dan Appleman cited a parable from Lewis Carroll's <a href="http://www.sabian.org/Alice/lgchap02.htm">Through the Looking Glass</a> which illustrates this wonderfully:
</p>
<p>
</p>
<blockquote>
'Now! Now!' cried the Queen. 'Faster! Faster!' And they went so fast that at last they seemed to skim through the air, hardly touching the ground with their feet, till suddenly, just as Alice was getting quite exhausted, they stopped, and she found herself sitting on the ground, breathless and giddy.
<p>
<img alt="image placeholder" >
</p>
<p>
The Queen propped her up against a tree, and said kindly, 'You may rest a little now.'
</p>
<p>
Alice looked round her in great surprise. 'Why, I do believe we've been under this tree the whole time! Everything's just as it was!'
</p>
<p>
'Of course it is,' said the Queen, 'what would you have it?'
</p>
<p>
'Well, in <i>our</i> country,' said Alice, still panting a little, 'you'd generally get to somewhere else -- if you ran very fast for a long time, as we've been doing.'
</p>
<p>
'A slow sort of country!' said the Queen. `Now, <i>here</i>, you see, it takes all the running <i>you</i> can do, to keep in the same place.
</p>
<p>
If you want to get somewhere else, you must run at least twice as fast as that!'
</p>
</blockquote>
<p>
<a href="http://en.wikipedia.org/wiki/AJAX">AJAX</a> and <a href="http://atlas.asp.net/quickstart/">Atlas</a> are the hot topics du jour here at MIX06, but will we be using them in five years? Unlikely.
</p>
<p>
I am all for learning new technology, but <b>immersing yourself in new technologies is merely running as fast as you can to stay in the same place</b>. To get somewhere else, you must run twice as fast. That means studying the topics that <i>won't</i> be obsolete in five years: human factors and design. And that's exactly what my <a href="http://www.codinghorror.com/blog/archives/000020.html">recommended reading list</a> is about. If you haven't read the top 5 books on that list, ask yourself-- <i>am I too busy running as fast as I can?</i>
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2006-03-20T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/everything-you-know-will-be-obsolete-in-five-years/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ The Login Explosion ]]></title>
<link>https://blog.codinghorror.com/the-login-explosion/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
I have fifty online logins, and I can't remember any of them.
</p>
<p>
<img alt="image placeholder" >
</p>
<p>
What's my password? I can't use the same password for every website. That's not secure. So every password is unique and specific to that website.  And what's my login name? Hopefully it's my email address, if the site allows that. But which email address?
</p>
<p>
What's a poor user to do?
</p>
<p>
Scott Hanselman recently highlighted <a href="http://www.hanselman.com/blog/MicrosoftFingerprintReaderAndPasswordMinder.aspx">what he uses</a> to combat the login explosion:
</p>
<p>
</p>
<ul>
<li>
<a href="http://www.microsoft.com/hardware/mouseandkeyboard/productdetails.aspx?pid=036">Microsoft Fingerprint Reader</a>
</li>
<li>
<a href="http://www.pluralsight.com/tools.aspx">Keith's Password Minder</a>
</li>
<li>
<a href="http://weblogs.asp.net/rosherove/archive/2006/02/16/438417.aspx">Foldershare</a> to synchronize the password file across multiple computers
</li>
</ul>
<p>
When you need two programs, a bit of hardware, your finger, and a file-sharing web service to solve a problem, you don't really have a solution for the login explosion. <b>What you have is an even bigger problem</b>.
</p>
<p>
<img alt="image placeholder" >
</p>
<p>
One particular pitfall is <b>the idea that your fingerprint is a secure substitute for your password</b>. This <a href="http://www.dansdata.com/uareu.htm">review of a typical USB fingerprint reader</a> illustrates just how foolish that misconception is:
</p>
<p>
</p>
<blockquote>
<i>
The jelly fingertip peeled off the putty very easily, as you'd expect - clean, cold Silly Putty doesn't stick very well to anything but itself. The gelatine was full of bubbles from my stirring, but the jelly thumb nonetheless had a pretty good complement of print-ridges on it.
</i><p>
Ugly and bubble-y the jelly thumb was, but the scanner loved it. <b>It thought the jelly finger was a real one more than 50% of the time.</b> And since you can attempt recognition about once a second, that means it'd be trivially easy to log in with a thing like this, even with people watching. Trim the jelly so it fits over the end of your real finger, and some very rudimentary prestidigitation will keep your fakery from the attention of onlookers.
</p>
<p>
I also found it was possible to enroll the jelly thumb as a new finger. It took me four attempts to do it, and its recognition rate wasn't any better than when I was trying to match it to my real finger. But that's still quite good enough to be useable in an, um, covert situation.
</p>
</blockquote>
<p>
Making a <a href="http://cryptome.org/gummy.htm">gummi fingertip</a> is not difficult, and all current fingerprint readers are fooled by even marginal gummi fingertips <a href="http://cryptome.org/fake-prints.htm">a hundred percent of the time</a>. In fact, all biometric systems have significant weaknesses:
</p>
<p>
</p>
<blockquote>
<i>
Earlier [in 2002], German tech mag c't <a href="http://www.heise.de/ct/english/02/11/114/">tested nine fingerprint scanners</a> (six capacitive, two optical and one thermal), plus Panasonic's Authenticam iris scanner, and Cognitec Systems' FaceVACS-Logon facial recognition system. All of the widgets tested were current models, and all came with impressive marketing claims.
</i><p>
Two finger scanners c't tested just didn't work properly. Of the remainder, the capacitive sensors could be fooled in a number of ways if an authorised user hasn't cleaned the sensor after fingering it. A latent print on many capacitive sensors can be revived by, for instance, breathing on it, applying graphite powder, or pressing a plastic carrier bag with water in it up against the sensor.
</p>
<p>
The graphite powder method works with lifted prints, too - follow your target to the pub, grab his glass after he's finished with it, dust a print with graphite, lift it with tape, and you're ready to go.
</p>
<p>
Optical sensors didn't fare any better. C't fooled them with silicone fingers made from an impression in wax, and also succeeded with backlit graphite print-copies on tape.
</p>
</blockquote>
<p>
All biometrics can be easily attacked with commonly available materials and widely known techniques.
</p>
<p>
But the real problem isn't the biometrics. <b>The real problem is relying on a single method of security</b>. Any security expert can tell you that security is based on..
</p>
<p>
</p>
<ol>
<li>What you are
</li>
<li>What you know
</li>
<li>What you have
</li>
</ol>
<p>
Any authentication method that relies on only <i>one</i> of these things is inherently insecure. If you lose your laptop (something you have), you're still somewhat protected because the thief does not have your password (something you know). Ditto for your cell phone. Switching from only using passwords to only using fingerprints is simply trading one set of insecurities for another.
</p>
<p>
I have high hopes that Microsoft's <a href="http://msdn.microsoft.com/winfx/reference/infocard/default.aspx?pull=/library/en-us/dnwebsrv/html/identitymetasystem.asp">InfoCard</a> will be a more viable solution to the login explosion. The InfoCard related MIX06 sessions I've attended so far look promising: it's simple, it does not require any Microsoft servers or software, and it has been developed in conjuction with the rest of the online community. Kim Cameron's <a href="http://msdn.microsoft.com/winfx/reference/infocard/default.aspx?pull=/library/en-us/dnwebsrv/html/lawsofidentity.asp">Laws of Identity</a> whitepaper has the most comprehensible high-level overview of the problems InfoCard is trying to solve. It's a great read.
</p>
<p>
Until InfoCard arrives, I guess I'll be clicking the "Having trouble logging in" link. Again.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2006-03-21T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/the-login-explosion/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ Rapid Prototyping Fun ]]></title>
<link>https://blog.codinghorror.com/rapid-prototyping-fun/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
This <a href="http://www.gamasutra.com/features/20051026/gabler_01.shtml">Gamasutra article</a> highlights some intriguing real world experiences in rapid prototyping:
</p>
<p>
</p>
<blockquote>
The project started in Spring 2005 with the goal of discovering and rapidly prototyping as many new forms of gameplay as possible. A team of four grad students, we locked ourselves in a room for a semester with three rules:
<p>
</p>
<ol>
<li>Each game must be made in less than seven days,
</li>
<li>Each game must be made by exactly one person,
</li>
<li>Each game must be based around a common theme i.e. "gravity", "vegetation", "swarms", etc.
</li>
</ol>
<p>
As the project progressed, we were amazed and thrilled with the onslaught of web traffic, with the attention from gaming magazines, and with industry professionals and academics all asking the same questions, "How are you making these games so quickly?" and "How can we do it too?"
</p>
<p>
We lay it all out here. Through the following tips, tricks, and examples, we will discuss the methods that worked and those that didn't. <b>We will show you how to slip into a rapid prototyping state of mind, how to set up an effective team, and where to start if you've thought about making something new, but weren't sure how.</b> We hope these well-tested guidelines come in useful for you and your next project, big or small!
</p>
</blockquote>
<p>
Few of us have the luxury of protyping games, but the principles they outline (embrace failure, use short cycles, etc) are broadly applicable to all software development.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2006-03-22T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/rapid-prototyping-fun/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ But It's Just One More ]]></title>
<link>https://blog.codinghorror.com/but-its-just-one-more/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
The <a href="http://local.live.com/">Windows Live Local</a> mapping service is surprisingly difficult to use. It certainly <em>looks</em> simple enough:
</p>
<p>
<img alt="image placeholder" >
</p>
<p>
Like everyone else, the first thing I do when I encounter a new mapping solution is try my current address. In this case it's my work address. But when I press enter, I get this error:
</p>
<blockquote>
No results were found. Try another search, or if entering an address, enter it in the <strong>Where</strong> box. Click help to learn more.
</blockquote>
<p>
This is admittedly a sample size of one. But <strong>everyone I know makes this mistake when using Windows Live Local search for the first time</strong>. Yes, the two text boxes are labeled. Sort of. But <a href="http://www.codinghorror.com/blog/archives/000114.html">users won't read anything you put on the screen</a>, even so-called professional computer users like ourselves. <strong>There's simply one textbox too many on that form</strong>.
</p>
<p>
It may seem irrational to declare that two of anything is one too many, but consider <a href="http://www.stopwatchesusa.com/hanhart__stopwatches__FAQ.htm">these stopwatches</a>:
</p>
<p>
<img alt="image placeholder" >
</p>
<p>
Here's a stopwatch with one button. So this button must start, stop, and reset the time. It's a little overloaded, but like an <a href="http://www.codinghorror.com/blog/archives/000096.html">Apple mouse</a>, at least nobody gets confused. In theory.
</p>
<p>
<img alt="image placeholder" >
</p>
<p>
Let's add one more button. Maybe one button starts and stops, and the other resets? Or maybe one button starts and the other stops. But which one? It'll take a bit of trial and error to get this to work.
</p>
<p>
<img alt="image placeholder" >
</p>
<p>
Now we add another button. And an extra sweeping hand. I don't even know where to begin. The complexity just went up exponentially.
</p>
<p>
<img alt="image placeholder" >
</p>
<p>
This stopwatch has three <em>colored</em> buttons. And no sweeping hand. The colors definitely help: red means stop, green means go. So I'm guessing black is reset.
</p>
<p>
The last stopwatch illustrates that it <em>is</em> possible to add interface elements without adding confusion. But you have to do it very carefully. <strong>If you have to add "just one more.." of any UI element, be sure that you're not adding the one UI element that breaks the camel's back.</strong>
</p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2006-03-23T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/but-its-just-one-more/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ The Value of Repetition.. Again ]]></title>
<link>https://blog.codinghorror.com/the-value-of-repetition-again/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
I was struck by a comment in Steve Yegge's <a href="http://opal.cabochon.com/~stevey/blog-rants/">not-so-new</a> <a href="http://steve-yegge.blogspot.com/">blog</a>:
</p>
<blockquote>
How could you have arrived at [the conclusion that top tech companies do a good job at interviewing] after reading <a href="http://steve-yegge.blogspot.com/2006/03/truth-about-interviewing.html">this blog entry</a>? <strong>Did you read a different post than the one I wrote?</strong> I said interviewing is a terrible mess, and 10% of all interviewers ask the same ridiculous questions to every candidate year in and year out, and I'm not a fan of interviewing the way it's practiced in our industry, on account of it being a "crapshoot", and that even good engineers can wind up not getting offers [because of the inherent randomness and poor selection power of the process most places use.]
</blockquote>
<p>
I've often been accused of repeating myself. But I firmly maintain that there is absolutely no shame in repeating yourself. In fact, you <em>should</em> be repeating yourself. And here's why. <strong>At any given time, only a fraction of the people listening to you will really hear what you're saying. If you repeat your message a few times in different ways, you increase the odds of getting your message across.</strong>
</p>
<p>
Now, that doesn't mean that you should pound on the table and state the same sentence five times:
</p>
<p>
I understand the value of repetition.<br>
I understand the value of repetition.<br>
I understand the value of repetition.<br>
I understand the value of repetition.<br>
I understand the value of repetition.</p>
<p>
Mechanical repetition isn't helpful. It doesn't enhance understanding.
</p>
<p>
<a href="http://www.simpsoncrazy.com/information/lists/blackboard.shtml">
<img alt="image placeholder" >
</a>
</p>
<p>
But covering the same topic using a variety of different viewpoints and resources definitely does.
</p>
<p>
To emphasize my point, I'll just <a href="http://blogs.vertigosoftware.com/jatwood/archive/2006/03/10/The_value_of_repetition.aspx">repeat a post</a> I made to my Vertigo blog.
</p>
<p>
<a href="http://sethgodin.typepad.com/">Seth Godin</a> has <a href="http://sethgodin.typepad.com/seths_blog/2006/02/once_more_but_s.html">an interesting insight about repetition</a>:
</p>
<blockquote>
Of course you're listening. You're the one that's sharing such
valuable insight with the universe. You're busy talking about your
product or your new book or your organization. You walk into a meeting
and there are four impatient people sitting around the table, urging
you on, faster faster faster don't waste our time.
<p>So you assume that they're getting it the first time.</p>
<p>They're not.</p>
<p>Odds are, your very clear, very useful ideas are getting garbled in
translation. I'll do a post on a topic, and people will trackback to
it, announcing that I've said something quite different. I double check
my riff to be sure I said what I meant to say, and yes, I did. But they
didn't hear me.</p>
<p>It's so tempting to compress your ideas into the smallest possible
space and assume that the text or the images or the design will carry
the day. But we know that repetition is essential.</p>
<p><strong>The paradox is that the long stuff gets skipped. The long stuff gets
ignored. Short books sell better, short commercials get more viewers.
So repetition becomes essential.</strong> It'll bore your biggest fans, but you
can do that (a little). </p>
<p>Sticking to (and building on) your story works if you do it over time.</p>
</blockquote>
<p>I've always felt that repetition helped me learn. And I repeat myself to help <em>others</em> learn.
<br><br>We're often accused, as software developers, of <a href="http://www.codinghorror.com/blog/archives/000190.html">writing solutions to the same problem over and over</a>. I don't see this as repetition, but <a href="http://headrush.typepad.com/creating_passionate_users/2006/03/dont_forget_squ.html">practicing the fundamentals</a>:<br>
</p>
<blockquote>
<p>The problem the Parelli's see in those trying to transition from
skilled amateur to expert virtually always comes down to something from
the fundamentals that they either never quite mastered, or that they
forgot over time. So, perhaps that's one more thing the superior
performers do better than the rest of us – <strong>they keep practicing the fundamentals</strong>. This fits with the notion that experts practice things that aren't necessarily fun, which can include both the things they still don't do well, AND the non-exciting basics.</p>
<p>Bert Bates (my co-author) is a blackbelt level go player, one of the
best amateur players in the state. But when a visiting expert – four
belt levels above Bert – showed up at the local go tournament, Bert was
surprised to see the guy reading a book on fundamental go problems that
Bert had read much earlier in his learning. The expert said, "I must
have read this at least a hundred times. My goal each time is to see
how much more quickly I can solve all the problems in the book than I
did the last time."</p>
</blockquote>
<p>
I absolutely love practicing the fundamentals. I can never get enough of <a href="http://www.codinghorror.com/blog/archives/000517.html">Hello World</a>, and I happily re-read <a href="http://www.amazon.com/exec/obidos/ASIN/0735619670/codihorr-20">Code Complete</a> and <a href="http://www.amazon.com/exec/obidos/ASIN/020161622X/codihorr-20">The Pragmatic Programmer</a> about once a year.
</p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2006-03-24T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/the-value-of-repetition-again/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ Making Considerate Software ]]></title>
<link>https://blog.codinghorror.com/making-considerate-software/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>I'm currently re-reading the book About Face. I hadn't revisited this book since I bought the original version way back in 1995. The update, which was published in 2003, is <strong>a significant overhaul – and frankly much better than the original</strong>. Adding the second author, Robert Reimann, was a smart move. Alan Cooper is a usability legend, but he can be bombastic and overbearing at times. Having another viewpoint in the book helps moderate and refine the message. (Since this was written, <a href="http://www.codinghorror.com/blog/2007/06/the-three-faces-of-about-face.html">About Face 3.0 was released</a>, with yet another author added to the mix.)</p>
<p>One part of About Face that I found particularly compelling was the section on considerate software:</p>
<ol>
<li>Considerate software <strong>takes an interest</strong>
<p> To the programmer writing the program, it's a just-in-time information world, so when the program needs some tidbit of information, it demands that the user provide it. The program then discards that tidbit, assuming it can merely ask for it again if necessary. Not only is the program better suited to remembering than the human, the program is also inconsiderate when, acting as a supposedly helpful tool, it forgets. </p>
</li>
<li>Considerate software <strong>is deferential</strong>
<p> Inconsiderate software supervises and passes judgment on human actions. Software is within its rights to express its opinion that we are making a mistake, but it is being presumptuous when it judges our actions. Software can suggest that we not not Submit our entry until we've typed in our telephone number. It should also explain the consequences, but if we wish to Submit without the number, we expect the software to do as it is told. </p>
</li>
<li>Considerate software <strong>is forthcoming</strong>
<p> Most software doesn't attempt to provide related information. Instead, it narrowly answers the precise question we ask it, and it is not forthcoming about other information even if it is clearly related to our goals. When we tell our word processor to print a document, it doesn't tell us when the paper is low, or when forty other documents are queued up in front of us, or when another nearby printer is free. A helpful human would. </p>
</li>
<li>Considerate software <strong>uses common sense</strong>
<p> You can easily find menus offering simple, harmless functions adjacent to irreversible ejector-seat-lever expert functions. It's like seating you at a dining table right next to an open grill. Horror stories abound of customers offended by computer systems that repeatedly sent them checks for $0.00 or bills for $957,142,039.58. One would think that the system might alert a human in the accounts receivable or payable departments when an event like this happens. </p>
</li>
<li>Considerate software <strong>anticipates needs</strong>
<p> A web browser spends most of its time idling while we peruse web pages. It could easily anticipate needs and prepare for them while we are reading. It could use that idle time to preload all the visible links. Chances are good that we will soon ask the browser to examine one or more of those links. It is easy to abort an unwanted request, but it is always time-consuming to wait for a request to be filled. </p>
</li>
<li>Considerate software <strong>is conscientious</strong>
<p> If we rely on a word processor to draft a new MicroBlitz Contract and then try to [save it in the same folder as an existing, but older, MicroBlitz Contract], the program offers the choice of either overwriting and destroying the old contract or not saving it at all. The program not only isn't as capable as [a human assistant who saw the name conflict and appropriately renamed the contracts], it isn't even as capable as [a human assistant who put the two contracts in the same folder]. It is stupider than a complete idiot. The software is dumb enough to make an assumption that because they have the same name, I meant to throw the old one away. </p>
</li>
<li>Considerate software <strong>doesn't burden you with its personal problems</strong>
<p> Software whines at us with error messages, interrupts us with confirmation dialog boxes, and brags to us with unnecessary notifications. We aren't interested in the program's crisis of confidence about whether or not to purge its recycle bin. We don't want to hear its whining about not being sure where to put a file on disk. We don't need to see information about the computer's data transfer rates and its loading sequence, any more than we need information about the customer service agent's unhappy love affair. </p>
</li>
<li>Considerate software <strong>keeps you informed</strong>
<p> We don't want our local bartender to grouse about his recent divorce, but we appreciate it when he posts his prices in plain sight and when he writes what time the pregame party begins on his chalkboard, along with who's playing and the current Vegas spread. Nobody is interrupting us to tell us this information: it's there in plain sight whenever we need it. </p>
</li>
<li>Considerate software <strong>is perceptive</strong>
<p> Software should watch our preferences and remember them without being explicitly asked to do so. If we always maximize an application to use the entire screen, the application should get the idea after a few sessions and always launch in that configuration. The same goes for placement of palettes, default tools, frequently used templates, and other useful settings. </p>
</li>
<li>Considerate software <strong>is self-confident</strong>
<p> Are you sure? Are you really sure? Are you really, really sure? </p>
</li>
<li>Considerate software <strong>doesn't ask a lot of questions</strong>
<p> Choices can be offered in different ways. They can be offered in the way that we window shop. We peer in the window at our leisure, considering, choosing, or ignoring the goods offered to us -- no questions asked. Alternatively, questions can be forced on us like an interrogation by a customs official at a border crossing: "Do you have anything to declare?" Software should never put users through this kind of intimidation. </p>
</li>
<li>Considerate software <strong>takes responsibility</strong>
<p> Most programs are filled with data and settings. When they crash, that information is normally discarded; the user is left holding the bag. Let's say you are downloading your email from a server, when your email program runs out of memory at some procedure buried deep in the internals of the program. The program, like most desktop software, issues a message that says, in effect, "You are completely hosed," and terminates immediately after you click OK. You restart the program, or sometimes the whole computer, only to find that the program lost your email and, when you interrogate the server, you find that it has also erased your mail because the mail was already handed over to your program. This is not what we should expect of good software. </p>
</li>
<li>Considerate software <strong>knows when to bend the rules</strong>
<p> In most computerized systems, there are only two states: non-existence or full-compliance. No intermediate states are recognized or accepted. In any manual system, there is an important but paradoxical state -- unspoken, undocumented, but widely relied upon -- of suspense, wherein a transaction can be accepted although still not fully processed. The human operator creates that state in his head or on his desk or in his back pocket. For example, a digital system needs both customer and order information before it can post an invoice. Whereas the human clerk can go ahead and post an order in advance of detailed  customer information, the computerized system will reject the transaction, unwilling to allow the invoice to be entered without it. </p>
<p> The characteristic of manual systems that let humans perform actions out of sequence or before prerequisites are satisfied is called fudgeability. It is one of the first casualties when systems are computerized, and its absence is a key contributor to the inhumanity of digital systems. It is a natural result of the implementation model. The programmers don't see any reason to create intermediate states because the computer has no need for them. Yet there are strong human needs to be able to bend the system slightly. </p>
</li>
</ol>
<p>Lots of food for thought there. So many applications I use fail even the most basic criteria on this list. I wish I could get every working developer to read <a href="http://www.amazon.com/exec/obidos/ASIN/0321344758/codihorr-20">Don't Make Me Think</a> and <a href="http://www.amazon.com/exec/obidos/ASIN/0470084111/codihorr-20">About Face</a>.</p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2006-03-26T11:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/making-considerate-software/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ The Ideal Computer Desk ]]></title>
<link>https://blog.codinghorror.com/the-ideal-computer-desk/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
A few years ago, I did a bit of research on computer desks and decided on <a href="http://www.anthro.com/ppage.aspx?pmid=18">this AnthroCart model</a>:
</p>
<p>
<img alt="image placeholder" >
</p>
<p>
And it's a fantastic computer desk. But its Wife Acceptance Factor (<a href="http://www.boston.com/business/technology/articles/2004/06/28/waf_wife_acceptance_factor/">WAF</a>) is abysmal for a few reasons:
</p>
<p>
</p>
<ul>
<li>It's absolutely enormous
</li>
<li>It's black
</li>
<li>Its design is better suited to an office than a home
</li>
</ul>
<p>
Plus, we just bought a small home in the Bay Area*, and we need to optimize for space. Looks like I'll be selling the Anthrocart.
</p>
<p>
Which means I'm looking for a smaller desk now.
</p>
<p>
I had to buy an additional desk when I moved to California, prior to all our stuff arriving. Since we have easy access to IKEA, I went with the <a href="http://www.ikea.com/webapp/wcs/stores/servlet/ProductDisplay?catalogId=10101&amp;storeId=12&amp;productId=47022&amp;langId=-1&amp;parentCats=10121*10389">IKEA Jerker desk</a>.
</p>
<p>
<img alt="image placeholder" >
</p>
<p>
You can see the edge of the Jerker in the bottom-most photo of <a href="http://haacked.com/archive/2005/03/23/2432.aspx">Phil's dog Twiggy</a>. There's something about the Jerker that inspires people: <a href="http://adam.pra.to/content/jerker/">Behold! The shrine to the IKEA Jerker desk!</a>
</p>
<p>
Although I really do like the Jerker-- and the name alone is worth the 99 bucks-- I'm still researching my options. <b>What is your favorite computer desk, and why?</b>
</p>
<p>
* <a href="http://ifindkarma.typepad.com/relax/2004/12/relentless_rise.html">Holy crap</a>. That was written in 2004, so add another ~20% appreciation for 2005.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2006-03-27T11:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/the-ideal-computer-desk/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ How Not To Become a Rockstar Programmer ]]></title>
<link>https://blog.codinghorror.com/how-not-to-become-a-rockstar-programmer/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
Tom's <a href="http://ironmonkey.blogspot.com/2006/03/one-tip-that-rules-them-all.html">criticism </a> of Mikael Grey's article, <a href="http://www.javalobby.org/java/forums/t65399.html">How to Become a Rock Star Programmer</a>, starts off promisingly enough:
</p>
<p>
</p>
<blockquote>
Let's start with the title. <b>There is no such thing as a "Rock Star Programmer,"</b> so if you want to become one, you already have problems that reading a blog post can't fix. Rock stars get sex, drugs, parties, limousines, fame, glory, dates with supermodels, and Rolling Stone covers. Good programmers get . . . uh . . . <a href="http://www.codinghorror.com/blog/archives/000261.html">fewer compiler errors</a>. Or fewer runtime errors, depending on which language you're using. So let's not pretend that "Rock Star Programmer" makes any more sense than "lighter-than-air paperweight" or "Rock Star Babysitter."
<p>
<a href="http://en.wikipedia.org/wiki/Michael_Angelo_Batio"><img alt="image placeholder" >
</p>
</blockquote>
<p>
But <a href="http://ironmonkey.blogspot.com/2006/03/one-tip-that-rules-them-all.html">the tip he offers</a> is just as flawed as the top ten list he's criticizing:
</p>
<p>
</p>
<blockquote>
<b>The best way to improve is to study code that is better than your own.</b> Read good code written by experts, in a variety of programming languages. Study it until you understand how it works and what makes it good. That's it. That's the one tip.
</blockquote>
<p>
<b>You won't become a better programmer by passively studying other people's code.</b> Similarly, you don't magically become a better writer by reading a lot of books. You become a better writer by.. wait for it.. <i>writing</i>.
</p>
<p>
Studying code is reasonable advice. It's helpful. But the absolute best way to improve is to <b>write your own damn code!</b> Nothing teaches faster than making your own mistakes, on your own time, on your own terms.
</p>
<p>
So study "good code*" all you want, but <i>write as much code as you can</i>.
</p>
<p>
* whatever that is
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2006-03-28T11:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/how-not-to-become-a-rockstar-programmer/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ I Shall Call It.. SomethingManager ]]></title>
<link>https://blog.codinghorror.com/i-shall-call-it-somethingmanager/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
Alan Green rails against <a href="http://www.bright-green.com/blog/2003_02_25/naming_java_classes_without_a.html">the meaninglessness of <code>SomethingManager</code></a>:
</p>
<blockquote>
How many classes do you come across named <code>SomethingManager</code>? Any decent sized commercial system seems to have plenty – <code>SessionManager</code>, <code>ConnectionManager</code>, <code>PolicyManager</code>, <code>QueueManager</code>, <code>UrlManager</code>, <code>ConfigurationManager</code>, or even, sadly, <code>EJBManager</code>.
<p>
A quick look at the dictionary entry for <a href="http://www.merriam-webster.com/dictionary/manager">"manager"</a> and <a href="http://www.merriam-webster.com/dictionary/manage">"manage"</a> gives at least ten different meanings - from "to make and keep compliant" through to "to achieve one's purpose". I remember one day when the receptionist briefly retitled herself as Switchboard Manager. The common semantic to all these definitions seem to be a vague "looks after stuff".
</p>
<p>
This imprecision makes Manager a bad word to use in naming classes. For instance, take a class named <code>UrlManager</code> – you cannot tell whether it pool URLs, manipulates URLs or audits the use of them. All the name tells you is that this class does something with URLs. On the other hand, the name <code>UrlBuilder</code> provides a much clearer picture of what the class does.
</p>
<p>
In the Java world, the Manager suffix is thrown around a lot. Almost anywhere you have a class that is responsible in any way for other objects, it automatically earns the Manager label.
</p>
</blockquote>
<p>
There's nothing more ambiguous than a <code>SomethingManager</code>. Avoid this word. Alan proposes a few alternatives in <a href="http://www.bright-green.com/blog/2003_02_25/naming_java_classes_without_a.html">his blog post</a> that might be helpful in narrowing down what your class actually does.
</p>
<p>
Giving your classes and objects good, descriptive names isn't easy. Steve McConnell provides a few helpful guidelines for routine naming in <a href="http://www.amazon.com/exec/obidos/ASIN/0735619670/codihorr-20">Code Complete</a>:
</p>
<ol>
<li>
<strong>Describe everything the routine does</strong><br>
And we mean literally <em>everything</em>. If that makes the name ridiculously long, the name isn't the problem. Your routine is.<br><br>
</li>
<li>
<strong>Avoid meaningless, vague, or wishy-washy verbs</strong><br>
Like <code>UrlManager</code>, or <code>HandleOutput()</code>, or <code>PerformServices()</code>. Be specific. What does it <em>do?</em> If you can't answer that question succinctly, it may be time to refactor the code until you can.<br><br>
</li>
<li>
<strong>Don't differentiate routine names solely by number</strong><br>
I include this only for completeness. If you ever find yourself writing <code>OutputUser1()</code> and <code>OutputUser2()</code>, God help you. And God help the team you work with.<br><br>
</li>
<li>
<strong>Make names as long as necessary</strong><br>
According to McConnell, the optimum name length for a variable is 9 to 15 characters; routines tend to be more complex and therefore deserve longer names. Make your names as long as they need to be in order to make them understandable.<br><br>
</li>
<li>
<strong>For functions, try using a description of the return value</strong><br>
An easy, straightforward rule. Some examples are <code>printer.IsReady()</code>, <code>pen.CurrentColor()</code>, etcetera.<br><br>
</li>
<li>
<strong>Use opposites precisely</strong><br>
For every <code>Open()</code>, there should be a <code>Close()</code>; for every <code>Insert()</code>, a <code>Delete()</code>; for every <code>Start()</code>, a <code>Stop()</code>.<br><br>
</li>
<li>
<strong>Establish conventions for common operations</strong><br>
This is best illustrated with an example, and McConnell provides an excellent one:
<p>
</p>
<pre>
employee.id.Get()
dependent.GetId()
supervisor()
candidate.id()
</pre>
<p>
Now how do I get an Id again?
</p>
</li>
</ol>
<p>
I'd say renaming classes and variables is one of my most frequent refactoring activities. <a href="http://martinfowler.com/bliki/TwoHardThings.html">Creating good names is hard</a>, but it <em>should</em> be hard, because a great name captures essential meaning in just one or two words
</p>
<p>
It's difficult to tell what something should be named until you're completely finished writing it. And like most code, it's never quite done, so the name may change over time. Succinct, descriptive variable, object, and function names can make the difference between <a href="http://thedailywtf.com/">Daily WTF code</a> and… well, code you'd actually want to work on.
</p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2006-03-29T11:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/i-shall-call-it-somethingmanager/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ STOP! Having Trouble? ]]></title>
<link>https://blog.codinghorror.com/stop-having-trouble/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>From Engadget's <a href="http://www.engadget.com/2005/04/01/iriver-h10-hands-on-review/">review of the iRiver H10</a>:</p>
<blockquote>
<p>So the first thing we noticed about this player when we opened it up was, unfortunately, a huge orange flyer [..]</p>
</blockquote>
<p>From Larry Osterman's <a href="http://blogs.msdn.com/larryosterman/archive/2006/01/03/508840.aspx">review of the iRiver H10</a>:</p>
<blockquote>
<p>My concerns started when I opened the box. To the left of the H10 was a plastic bag with the manual etc.  On the top of the plastic bag, plain to see was a bright orange piece of paper with:</p>
</blockquote>
<img alt="image placeholder" >
<p>Do you really want your user's <a href="https://en.wikipedia.org/wiki/Out-of-box_experience">out of box experience</a> to be a bright orange warning sign that screams <strong>STOP!</strong> and <strong>Having Trouble?</strong> That negative first impression sets the tone for the rest of the device's life. It's all downhill from there.</p>
<p>It's details like this that <a href="http://www.shahine.com/omar/TheIPod.aspx">drove Omar back to the iPod</a>. But that's a natural consequence, as Omar points out, of the business model: Apple owns the device, the software, and the music licensing. They control the entire experience. <strong>Nobody can screw that up behind Apple's back.</strong></p>
<p>Now compare that with the out of box experience of the <a href="http://www.pcmag.com/article2/0,1895,1933653,00.asp">new Lenovo T60 Thinkpad</a> we received at work today. This is the taskbar after the machine has <em>literally been booted for the first time</em>:</p>
<img alt="image placeholder" >
<p><strong>The operating system is loaded down with so many pre-installed craplets that the taskbar takes up half the screen.</strong> The hardware is excellent, but you'd never know that based on the abysmal software experience you're about to have. And that's <em>just the taskbar!</em> Take a look at <a href="https://blog.codinghorror.com/content/images/2015/08/lenovo-t60-oob-experience.png">the full desktop screenshot</a>. It's even worse.</p>
<p>Is it any wonder that I recommend people wipe their systems as soon as they receive them and perform a clean install of Windows XP SP2? If I've learned anything about computers in the last 35 years, it's this: <strong>if you leave the user experience up to third parties, they will screw it up behind your back.</strong> Royally. Every single time.</p>
<p>That's why I'm encouraged by the Windows Media Center team's insistence that they tightly control the core user experience. As <a href="http://blog.retrosight.com/">Charlie Owen</a> explained to me at MIX06, third parties can create all the external add-ins they want, but they can't mimic the Media Center UI, and they definitely can't muck around with the core functionality of Media Center.</p>
<p>Good call.</p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2006-03-30T11:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/stop-having-trouble/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ The 2GB Windows XP Hibernation Problem ]]></title>
<link>https://blog.codinghorror.com/the-2gb-windows-xp-hibernation-problem/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
If you ..
</p>
<ul>
<li>use Windows XP SP2 of any flavor
</li>
<li>have 1+ gigabytes or more of system memory
</li>
<li>use hibernate functionality
</li>
</ul>
<p>
.. you may have experienced this error at some point when attempting to hibernate:
</p>
<p>
<img alt="image placeholder" >
</p>
<p>
I know I have. It drives me nuts, because my system fails to hibernate after I've already initiated the hibernation process and walked away from it. This is on my desktop*. You can imagine how catastrophic this could be on a laptop; you'd be putting a laptop in your bag that was still fully on!
</p>
<p>
To avoid the error, install <a href="http://www.u-g-h.com/InsufficientSystemResourcesExistToCompleteTheAPISOLIVED.aspx">this Microsoft hotfix</a>, which is graciously hosted by Owen Cutajar. It's from <a href="http://support.microsoft.com/?kbid=909095">Microsoft KB909095</a>, which also explains the problem in a bit more detail:
</p>
<p>
</p>
<blockquote>
<i>
To prepare the computer to hibernate, the Windows kernel power manager requires a block of contiguous memory. The size of this contiguous memory is proportional to the number of physical memory regions that the computer is using. A computer that uses lots of RAM is likely to use more physical memory regions when the computer prepares to hibernate. Therefore, a larger amount of contiguous memory is required to prepare the computer to hibernate.
</i><p>
Additionally, the number of physical memory regions varies according to the programs, services, and device drivers that the computer uses. Therefore, the hibernate feature occasionally fails.
</p>
<p>
When the Windows kernel power manager detects that the hibernate feature has failed, the hibernate feature remains disabled until you restart the computer.
</p>
</blockquote>
<p>
I originally researched this <a href="http://www.ntwizards.net/2004/10/13/hibernate">back in December</a>, but the problem wasn't happening with enough frequency to make me call Microsoft support and dig up a hotfix. Now it is. And people have mirrored the patch so we don't have to go through <b>the busywork exercise of calling Microsoft support to obtain a necessary hotfix.</b> What a ridiculous policy.
</p>
<p>
* I would use sleep, but the motherboard I use isn't smart enough to restore the correct overclocked CPU speed. I get bumped down to stock CPU speeds every time I resume from a sleep state.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2006-03-31T11:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/the-2gb-windows-xp-hibernation-problem/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ Code Elegance, Code Balance ]]></title>
<link>https://blog.codinghorror.com/code-elegance-code-balance/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
I've been reading <a href="http://www.codinghorror.com/blog/archives/000541.html">a great book of interviews with programmers</a> circa 1989. One of the most fascinating interviews is with Wayne Ratliff, the author of <a href="http://en.wikipedia.org/wiki/DBASE">dBase</a>. Wayne's description of <b>balance in programming</b> really resonated with me:
</p>
<p>
</p>
<blockquote>
Interviewer: Can you elaborate on this feeling for balance and elegance?
<p>
Balance takes many forms. The code should be crisp and concise. You should be able to explain any module in one sentence, and things should be in alphabetical order, if possible. Just from a visual view of indentation, it shouldn't go off the edge of the paper at any point. It shouldn't have one "if" that's huge and an "else" that's small. Everything should be balanced everywhere. Balance is the key word.
</p>
<p>
Interviewer: When you write code, does it come out balanced the first time, or does it need a lot of changes?
</p>
<p>
I do a lot of changing. I like to make an analogy between writing code and sculpting a clay figure. You start with a lump of clay and then you scrape away, add more clay, then scrape away again. And every now and then you decide that a leg doesn't look right, so you tear it off and put a new one on. There's a lot of interaction.
</p>
<p>
The ideal module should be a page long. If it grows beyond a page, I have to decide, now what is it I'm doing here? How many seperate things am I working on? Should they be broken down into seperate modules? Part of the elegance, and the balance, is that a certain level, in this layer-cake hierarchy of a program, all the modules should be about the same weight, same size, same duty, and same functionality.
</p>
<p>
Interviewer: How does balance help a program?
</p>
<p>
The program becomes maintainable. When you have a good balance, it's as if you've discovered some basic physical underlying principle and implemented it. When things get really out of balance, you know something is wrong. There's probably some inherent fault that makes it out of balance. Generally, when I get this feeling that something's out of whack or one module is just too big, I think about what I'm doing, and I reorient or juggle the pieces.
</p>
</blockquote>
<p>
I think you could sum up reams of programming advice with that one concept: balance. We're striving for balance between complexity and simplicity. And we're constantly evaluating and re-evaluating the tradeoffs we have to make to get there.
</p>
<p>
Balance also applies to the way you physically lay out your code. There's a great visual device in <a href="http://www.amazon.com/exec/obidos/ASIN/0735619670/codihorr-20">Code Complete's</a> layout chapter where the actual characters of code are replaced with black bars. Like <a href="http://www.codinghorror.com/blog/archives/000289.html">well-designed web pages in other languages</a>, <b>you should be able to understand the general flow of the code even if you can't read any of it</b>:
</p>
<p>
<img alt="image placeholder" >
</p>
<p>
The aesthetics of your code is purely an internal implementation detail. How you place your squigglies won't affect users in the slightest. But attention to internal code layout details implies that you're equally attentive to the external details. <b>If you're structuring your code to be accurate, consistent, readable, and maintainable, your application will work better-- because it's balanced</b>.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2006-04-02T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/code-elegance-code-balance/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ Menus and Toolbars Don't Scale ]]></title>
<link>https://blog.codinghorror.com/menus-and-toolbars-dont-scale/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
I've witnessed <a href="http://www.codinghorror.com/blog/archives/000397.html">the death of the main menu</a>. And <a href="http://www.codinghorror.com/blog/archives/000523.html">toolbars are on their last legs</a>, too. This <a href="http://splasho.com/blog/wp-content/pic.html">screenshot</a>* clinches it for me:
</p>
<p>
<a href="http://splasho.com/blog/wp-content/pic.html"><img alt="image placeholder" >
</p>
<p>
Granted, very few people would install this many <a href="https://addons.mozilla.org/extensions/?application=firefox">Firefox extensions</a>. But between this and the Office 2003 debacle, it's patently obvious that <a href="http://blogs.msdn.com/jensenh/archive/2005/10/24/484131.aspx">the whole menu-and-toolbar paradigm doesn't scale</a>. <i>At all.</i>
</p>
<p>
</p>
<blockquote>
<i>
[..] many of today's UI paradigms attributed to Apple were introduced well before the Lisa or the Macintosh.  Regardless of who gets credit for them, they're good paradigms.  There's nothing wrong with menu and toolbar based UI for certain applications.  These paradigms served Office well for a number of releases.
</i><p>
It's not that menus and toolbars are bad or that the people who created them weren't smart.  The problem is that Office has outgrown them.  There's a point beyond which menus and toolbars cease to scale well.  A flat menu with 8 well-organized commands on it works just great; a three-level hierarchical menu containing 35 loosely-related commands can be a bit of a disaster.
</p>
</blockquote>
<p>
I'm now <b>starting to question whether traditional menus and toolbars are even appropriate for small applications any more</b>. Web applications tend to be small by design-- and you never see drop-down menus or tiny 16x16 draggable toolbar icons. And they're better without these things.
</p>
<p>
* via <a href="http://blog.outer-court.com/archive/2006-04-03.html#n90">Google Blogoscoped</a>
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2006-04-03T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/menus-and-toolbars-dont-scale/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ A Fistful of Connectors ]]></title>
<link>https://blog.codinghorror.com/a-fistful-of-connectors/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
Loyd Case <a href="http://www.extremetech.com/article2/0,1697,1918934,00.asp">recently noted</a> that the standard 3-prong computer power connector is.. not so standard any more:
</p>
<p>
<img alt="image placeholder" >
</p>
<p>
I have yet to see any of these mutant rounded power connectors yet, but I'm surprised that Dell-- a company that built its entire empire around the very concept of beige box PC standardization-- would be cheeky enough to introduce a non-standard power connector. Dell has improved a bit in the design area, but the <i>last</i> thing they need to be redesigning is the standard 3-pin computer power connector.
</p>
<p>
The 3-pin power connector isn't much to look at, but <b>it's one of the few bright spots in an otherwise hopeless morass of incompatible consumer electronics connectors.</b> Take a look at this fistful of 2-pin power connectors:
</p>
<p>
<img alt="image placeholder" >
</p>
<p>
Given the three zillion different 2-pin power cords out there, <b>it's a miracle that the <i>other</i> end of the cable is standardized</b>. How did we screw that up?
</p>
<p>
<img alt="image placeholder" >
</p>
<p>
And this is just for computers, mind you. Once we factor in cell phones, PDAs, MP3 players, routers, etcetera, the situation worsens considerably. We moved from North Carolina to California almost a year ago and I <i>still</i> can't find the power adapter for our <a href="http://www.xmradio.com/catalog/product_detail.jsp?id=28644&amp;type=Accessory">XM Satellite radio boombox</a>.. among other things.
</p>
<p>
One possible answer is to pick up a third-party solution like <a href="http://us.kensington.com/html/6368.html">Kensington's 120w mobile power</a> or <a href="http://www.igo.com/product.asp?sku=2701967">iGo's 70w Juice</a>.
</p>
<p>
<img alt="image placeholder" >
</p>
<p>
These power bricks can power a multitude of devices via interchangeable cord tips. Assuming the correct power tip is available, of course. <b>The best solution would be for manufacturers to standardize on a common set of power connectors.</b> I won't be holding my breath until that happens.
</p>
<p>
Jef Raskin, in <a href="http://www.amazon.com/exec/obidos/ASIN/0201379376/codihorr-20">The Humane Interface</a>, points out yet another problem with connectors: <b>sex</b>.
</p>
<p>
</p>
<blockquote>
<i>
A conventional connector pair is typically built as a male connector with pins and a mating female connector with sockets. This approach results in an inventory of eight kinds of parts that can be used as connectors on equipment or cables:
</i><p>
</p>
<ul>
<li>Male connector for equipment
</li>
<li>Female connector for equipment
</li>
<li>Male connector for cables
</li>
<li>Female connector for cables
</li>
<li>Male-to-female adapters
</li>
<li>Female-to-male adapters
</li>
<li>Male-to-male adapters
</li>
<li>Female-to-female adapters
</li>
</ul>
</blockquote>
<p>
Jef proposes a hermaphroditic connector:
</p>
<p>
<img alt="image placeholder" >
</p>
<p>
Raskin outlines the advantages of a connector that's both male and female:
</p>
<p>
</p>
<blockquote>
<i>
If you have two hermaphroditic cables of a given class, you can use the cables either as two seperate cables or joined together into one extended cable. In some cases, the hermaphroditic connector would be no more expensive or complex than a standard, sexed connector. This will not always be true; in many cases, a hermaphroditic connector will be somewhat more complex and more expensive to manufacture. But the added expense is counterbalanced by such factors as:
</i><p>
</p>
<ul>
<li>Increased user satisfaction
</li>
<li>Simpler manuals
</li>
<li>Fewer manufacturing setups are required
</li>
<li>Distributors and retailers needing to stock fewer different items
</li>
</ul>
</blockquote>
<p>
Unfortunately, hermaphroditic connectors haven't caught on, at least for consumer electronics. And I still have about a fifty percent chance of plugging a USB cable in right side up on any given day.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2006-04-04T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/a-fistful-of-connectors/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ Teach Yourself Programming in 23 Hours ]]></title>
<link>https://blog.codinghorror.com/teach-yourself-programming-in-23-hours/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>I see that Scott Mitchell has a new book out,  <strong><a href="http://www.amazon.com/dp/0672327384/?tag=codihorr-20">Teach Yourself ASP.NET 2.0 in 24 Hours</a></strong>.</p>
<img alt="image placeholder" >
<p>Let me preface this post with a disclaimer: Scott Mitchell is a great writer. I've been a fan of his work since his <a href="http://www.4guysfromrolla.com/">4 Guys From Rolla</a> days. <a href="http://www.4guysfromrolla.com/ScottMitchell.shtml#expWriting">Anything he writes</a> is bound to be worth reading, especially in this internet era of exploding content, 99.9% of which is crap. Furthermore, what I'm complaining about is determined entirely by the publisher. Not by Scott.</p>
<p>That said, the book's title reminds me of this scene in <a href="http://www.imdb.com/title/tt0129387/">There's Something About Mary</a>:</p>
<video poster="/content/images/2015/08/seven-minute-abs-poster.jpg" width="100%" preload="none" controls>
<source src="http://discourse-cdn.codinghorror.com/uploads/default/original/3X/b/4/b48e71c0729375dda0ea4733dd54de20e97f5ed7.mp4">
</source></video>
<blockquote>
<p>HITCHHIKER<br>
Think about it. You walk into a video store and you see Eight-Minute Abs and right next to it you see Seven-Minute Abs – which one you gonna spring for?</p>
<p>TED<br>
I'd go with the seven.</p>
<p>HITCHHIKER<br>
Bingo. Especially since we guarantee you'll get every bit as good a work-out.</p>
<p>TED<br>
How do you guarantee that?</p>
<p>HITCHHIKER<br>
Well it's the company motto: 'If you ain't  happy we'll send you the extra minute.'</p>
<p>TED<br>
Huh. That sounds great. (pause) Unless someone else comes out with Six-Minute Abs.</p>
</blockquote>
<p>It's a joke, of course, but there's a kernel of truth there. <strong>If you can truly learn ASP.NET in 24 hours, what's to stop you from learning it in 23 hours? Or 20 hours? or 12 hours?</strong></p>
<p>Yes, the book title is just marketing hype to drive sales. It isn't meant to be a rational statement of expectactions. The implication that you can learn a giant swath of technology like ASP.NET 2.0 in 24 hours, much less become competent in it, is funny to those of us who know better. That part is obvious. But on a deeper level, it's also offensive. <strong>It implies that the field of software development is so shallow that a complete beginner can become competent in 24 hours.</strong> Yes, we know better, but not everyone does. And the type of people buying this book most certainly won't know what they're getting themselves into.</p>
<p>As Peter Norvig points out in <a href="http://www.norvig.com/21-days.html">Teach Yourself Programming in Ten Years</a>, the computer book industry is particularly prone to this weird 24 hour meme:</p>
<blockquote>
<p>I did <a href="http://www.amazon.com/gp/search/ref=sr_adv_b/?search-alias=stripbooks&amp;unfiltered=1&amp;field-keywords=&amp;field-author=&amp;field-title=teach+yourself+hours&amp;field-isbn=&amp;field-publisher=&amp;node=&amp;field-p_n_condition-type=&amp;field-feature_browse-bin=&amp;field-subject=&amp;field-language=&amp;field-dateop=After&amp;field-datemod=&amp;field-dateyear=2000&amp;sort=relevanceexprank&amp;Adv-Srch-Books-Submit.x=16&amp;Adv-Srch-Books-Submit.y=5">a search for books with the word "days" in the title</a> at Amazon.com and got back 248 hits. The first 78 were computer books (number 79 was Learn Bengali in 30 days). I replaced "days" with "hours" and got remarkably similar results: 253 more books, with 77 computer books followed by Teach Yourself Grammar and Style in 24 Hours at number 78. Out of the top 200 total, 96% were computer books.</p>
<p>The conclusion is that either people are in a big rush to learn about computers, or that computers are somehow fabulously easier to learn than anything else. There are no books on how to learn Beethoven, or Quantum Physics, or even Dog Grooming in a few days.</p>
</blockquote>
<p>Like Peter, I humbly submit that <strong>books with titles like <em>Teach Yourself ASP.NET 2.0 in 24 Hours</em> cheapen our craft</strong>. Any computer book with a length of time in the title – weeks, months, days, hours – is doing its readers a disservice by demoting software development from a craft you <a href="http://blog.codinghorror.com/sucking-less-every-year/">spend your life practicing</a> to a mechanical activity that can be learned in a limited time window.</p>
<p>Which is exactly why I'll be publishing <em>Teach Yourself ASP.NET 2.0 in 23 Hours</em> next month. Keep an eye out for it on bookshelves near you!</p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2006-04-05T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/teach-yourself-programming-in-23-hours/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ Blocking Image Bandwidth Theft with URL Rewriting ]]></title>
<link>https://blog.codinghorror.com/blocking-image-bandwidth-theft-with-url-rewriting/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
I like to periodically <a href="http://www.codinghorror.com/blog/archives/000063.html">watch the HTTP traffic on my server</a>. I can see what I'm actually serving up over the wire, and how much bandwidth I'm using.
</p>
<p>
That's how I noticed that I've become somewhat popular with <b>direct-link image bandwidth thieves</b>. In other words, people who thoughtlessly (or maliciously) embed these IMG links in their web page:
</p>
<p>
&lt;img  src="http://www.codinghorror.com/blog/images/qbert_regex_16.png"&gt;
</p>
<p>
That means the image <a href="http://www.codinghorror.com/blog/images/qbert_regex_16.png">qbert_regex_16.png </a> is served by <i>my webserver</i> to every user who happens to request <a href="http://profile.myspace.com/index.cfm?fuseaction=user.viewprofile&amp;friendid=27727152">this myspace profile page</a>.
</p>
<p>
Warning: like all myspace pages, that page is
</p>
<ul>
<li>Not really safe for work
</li>
<li>Incredibly, mind-bendingly ugly
</li>
<li>Filled with thousands of images, animated images, flash, MIDI samples, embedded MP3s
</li>
<li>Utterly and completely incomprehensible
</li>
</ul>
<p>
In short, a trainwreck. Every time I visit myspace, I feel a little bit stupider, ala <a href="http://www.imdb.com/title/tt0112508/">Billy Madison</a>:
</p>
<p>
</p>
<blockquote>
<i>
Principal: Mr. Madison, what you've just said is one of the most insanely idiotic things I have ever heard. At no point in your rambling, incoherent response were you even close to anything that could be considered a rational thought. Everyone in this room is now dumber for having listened to it. I award you no points, and may God have mercy on your soul.
</i><p>
Billy Madison: Okay, a simple no would've done just fine.
</p>
</blockquote>
<p>
I have no idea why myspace is so popular. I guess the best I can hope for is that those damn kids stay off my lawn.
</p>
<p>
Anyway, back to business. The most common technique for blocking direct image links is to <b>check the HTTP referer header</b>. Here's the complete HTTP header set of an image request that just came through:
</p>
<p>
</p>
<pre>
<b>GET</b> /blog/images/logitech_g15_keyboard.jpg HTTP/1.1
<b>Accept:</b> */*
<span style="color:red;">Referer: http://www2.gamelux.nl/forum/topics/10072/38/</span>
<b>Accept-Language:</b> nl
<b>Accept-Encoding:</b> gzip, deflate
<b>User-Agent:</b> Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1)
<b>Host:</b> www.codinghorror.com
<b>Connection:</b> Keep-Alive
</pre>
<p>
Prior to serving up the image, we should check the Referer HTTP header, and make sure it's either:
</p>
<p>
</p>
<ol>
<li>Blank
</li>
<li>In a list of known whitelisted referring domains
</li>
</ol>
<p>
If it isn't, we will serve up either a 404 error, or a "hey, stop stealing our bandwidth" image of some kind. Because I'm a <a href="http://en.wikipedia.org/wiki/Goatse.cx">nice guy</a>, I chose this image:
</p>
<p>
<img alt="image placeholder" >
</p>
<p>
All this can be done through incredibly powerful <a href="http://httpd.apache.org/docs/2.0/misc/rewriteguide.html">URL Rewriting</a>, which has been standard on Apache for some time. There's a nice <a href="http://underscorebleach.net/jotsheet/2004/11/stop-image-hotlinking-tutorial-htaccess-apache">walkthrough on how to set up image link blocking in Apache</a> on Tom Sherman's site.
</p>
<p>
Unfortunately, IIS 6 doesn't have native support for URL Rewriting*, but there are any number of third party ISAPI filters that can do it. The one I use is <a href="http://www.isapirewrite.com/">ISAPI Rewrite</a>. It's very similar to the Apache version, in that it is driven by the httpd.ini file in the root of each website. I struggled a bit with the rules, but thanks to a <a href="http://www.helicontech.com/forum/forum_posts-TID-4280.asp">helpful forum post</a>, I realized that I needed to put all the whitelisted domains on a single line to get a boolean "or" that included the empty referer case, like so:
</p>
<p>
</p>
<pre>
[ISAPI_Rewrite]
<p>
# Block external image linking
RewriteCond Referer: (?!http://(?:www.codinghorror.com|www.bloglines.com|www.google.com)).+
RewriteRule .*.(?:gif|jpg|png) /images/block.gif [I,O]
</p></pre>
<p>
So, as outlined above: unless the referer is blank, or in the whitelist, they get shunted to the blocked image.**
</p>
<p>
<b>Take that, 26 zillion myspace users</b>.
</p>
<p>
* I'm pretty sure URL Rewriting will be in IIS7, since they're finally getting around to making a really good copy of Apache's modular architecture in version 7.
</p>
<p>
** This is done at the ISAPI level, so unlike the cheesy ASP.NET "URL rewriting" solutions, it also works on generic URLs, not just URLs that end in .aspx or some other extension that is sent to the ASP.NET handler. This has long been a pet peeve of mine, but it's really the fault of IIS. And it's changing in IIS 7.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2006-04-06T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/blocking-image-bandwidth-theft-with-url-rewriting/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ Best Practices and Puffer Fish ]]></title>
<link>https://blog.codinghorror.com/best-practices-and-puffer-fish/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
James Bach's seminal rant, <a href="http://blackbox.cs.fit.edu/blog/james/archives/000187.html">No Best Practices</a>, is a great reality check for <a href="http://www.codinghorror.com/blog/archives/000165.html">architecture astronaut rhetoric</a>. It's worth revisiting even if you've read it before.
</p>
<p>
Some might say Bach's viewpoint is pessimistic, even cynical:
</p>
<p>
</p>
<blockquote>
The way to get rich in this world is mainly by making people feel large hope about a small exertion (i.e. <a href="http://www.codinghorror.com/blog/archives/000560.html">"six-second abs"</a>, lottery tickets, voting in an election, maturity models, and stuff like that). If you want to get rich, do not tie yourself to the truth.
</blockquote>
<p>
I say his viewpoint is not only healthy, but necessary. If it feels painful, that's good. The truth is always a little painful.
</p>
<p>
You <i>should</i> question all the advice you get. And you should <i>especially</i> question any so-called "best practices". The very utterance of the words "best practice" should set off warning klaxons, sirens, and flashing red lights. At that moment, you've left the realm of opinion and advice. You've entered the realm of evangelism and <a href="http://www.codinghorror.com/blog/archives/000247.html">true believers</a>.
</p>
<p>
And yet the world is full of <a href="http://www.google.com/search?q=.net+%22best+practices%22">best practices</a> and tidy little checklists. Developers are all too eager to <a href="http://headrush.typepad.com/creating_passionate_users/2006/04/when_only_the_g.html">preach the one true solution</a> ..
</p>
<p>
</p>
<blockquote>
In way too many meetings, the fastest talkers win. And by "fastest talkers", I mean those who are the first to articulate an idea, challenge, issue, whatever. <b>Too many of us assume that if it sounds smart, it probably is, especially when we aren't given the chance to think about it.</b>
</blockquote>
<p>
.. but problems are rarely that simple in the real world. Why? James Bach has a theory:
</p>
<p>
</p>
<blockquote>
Do you know what's behind all this? I think it's simply that so few of us know how to do our jobs. <b>Like puffer fish, many of us feel that we need to huff ourselves up so that predators won't devour us. We fluff ourselves full of impressive words.</b>
<p>
<img alt="image placeholder" >
</p>
</blockquote>
<p>
All this impressive talk is fueled by <b>fear</b>. The field of software development is so vast-- and the piece of it we know is so impossibly tiny. We're constantly living in fear that people will find out <i>how little we know</i>. That people will realize we're <a href="http://usfweb2.usf.edu/counsel/SELF-HLP/impostor.htm">impostors</a> who are lucky to still have a job.
</p>
<p>
Rather than simply stating what we've done and how we did it, we feel compelled to puff it up into a spiny, intimidating best practice. We attach our egos to our code frameworks. If someone doesn't agree with our approach, they're attacking us personally. If someone has a different best practice, they're amateurs who don't understand the problem domain.
</p>
<p>
Fear can make you do some irrational things. Being honest and humble is difficult-- it's painful to admit that you don't have the answer; that you're not an expert; that there are so many variables you can't control. But whatever you do, <b>always avoid the empty trap of the puffer fish</b>.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2006-04-07T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/best-practices-and-puffer-fish/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ How Much Power Does My Laptop Really Use? ]]></title>
<link>https://blog.codinghorror.com/how-much-power-does-my-laptop-really-use/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
I've determined power usage <a href="http://www.codinghorror.com/blog/archives/000353.html">on my desktop</a> and <a href="http://www.codinghorror.com/blog/archives/000426.html">on my server</a>, but I hadn't gotten around to testing the power usage of my laptop. As battery life is always a concern with a laptop, I was particularly curious to see which parts of the laptop draw the most power. So I ran a few tests with <a href="http://www.codinghorror.com/blog/archives/000353.html">my trusty kill-a-watt</a> on my <a href="http://compreviews.about.com/cs/laptops/gr/aaprDellIns300m.htm">Dell Inspiron 300m</a>. It's an ultaportable 2 pound laptop of late 2003 vintage with the following specs:
</p>
<p>
</p>
<ul>
<li>Intel Pentium M 1.2GHz low voltage processor
</li>
<li>640 megabytes of RAM
</li>
<li>60 gigabyte hard drive
</li>
<li>12.1" 1024x768 LCD screen
</li>
<li>Windows XP Pro
</li>
</ul>
<p>
Let's start with some baselines:
</p>
<p>
</p>
<blockquote><table width="450">
<tr>
<td>Laptop off, battery charging
</td>
<td width="50">63w
</td>
</tr>
<tr>
<td>Laptop off, battery disconnected
</td>
<td>1w
</td>
</tr>
<tr>
<td>Laptop off, sleeping
</td>
<td>1w
</td>
</tr>
<tr>
<td>Laptop on, idle at Windows desktop
</td>
<td>15w
</td>
</tr>
</table></blockquote>
<p>
All subsequent tests were run with the laptop connected to AC power and the battery physically removed from the machine.
</p>
<p>
<b>How much power does the LCD display use?</b>
</p>
<p>
</p>
<blockquote><table width="450">
<tr>
<td>maximum screen brightness</td>
<td width="50">15w
</td>
</tr>
<tr>
<td>minimum screen brightness</td>
<td>11w
</td>
</tr>
</table></blockquote>
<p>
<b>How much power does the hard drive use?</b>
</p>
<p>
</p>
<blockquote><table width="450">
<tr>
<td>hard drive sleeping</td>
<td width="50">14w
</td>
</tr>
<tr>
<td>hard drive idle</td>
<td>15w
</td>
</tr>
<tr>
<td>hard drive defragmenting</td>
<td>18w
</td>
</tr>
</table></blockquote>
<p>
<b>How much power does the onboard WiFi use?</b>
</p>
<p>
</p>
<blockquote><table width="450">
<tr>
<td>wifi disabled</td>
<td width="50">15w
</td>
</tr>
<tr>
<td>wifi enabled</td>
<td>16w
</td>
</tr>
<tr>
<td>wifi <a href="http://www.codinghorror.com/blog/archives/000339.html">bandwidth test</a>
</td>
<td>19w
</td>
</tr>
</table></blockquote>
<p>
<b>How much power does the CPU use?</b>
</p>
<p>
</p>
<blockquote><table width="450">
<tr>
<td>cpu idle</td>
<td width="50">15w
</td>
</tr>
<tr>
<td>cpu running <a href="http://www.mersenne.org/">prime95</a> torture test</td>
<td>26w
</td>
</tr>
</table></blockquote>
<p>
<b>How much power does the integrated video use?</b>
</p>
<p>
</p>
<blockquote>
Running 3dMark2001 produced a peak power usage of 29 watts. We can subtract the Prime95 number of 26 watts -- which is entirely CPU-only-- to estimate <i>about three watts</i> are used exclusively by the integrated Intel "extreme"* video hardware.
</blockquote>
<p>
Bear in mind the kill-a-watt is only accurate to plus or minus a watt. And these are all rough figures based on a sample size of one laptop. But I think the rules here can be generalized to most laptops.
</p>
<p>
Here's what I learned:
</p>
<p>
</p>
<ol>
<li>
<b>The CPU is, by far, the biggest consumer of power in a laptop</b>. No surprise there. If you want to drain your battery lickety-split, run a bunch of apps that peg your CPU at 100 percent.
</li>
<li>
<b>Putting your hard drive to sleep isn't worth it.</b> Ever. You save a whopping.. single watt. Why bother?
</li>
<li>
<b>For maximum battery life, dim your screen</b>. I was surprised that the screen alone accounted for 25% of the total power draw of my laptop at idle. You can moderate use of WiFi or your hard drive, but you can't exactly moderate the use of your screen. Plan accordingly.
</li>
</ol>
<p>
Of course, your mileage may vary.
</p>
<p>
* it's extreme, all right. Extremely <i>crappy</i>.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2006-04-09T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/how-much-power-does-my-laptop-really-use/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ (Very) Basic Textbox Keyboard Shortcuts ]]></title>
<link>https://blog.codinghorror.com/very-basic-textbox-keyboard-shortcuts/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>Everyone knows how to use the arrow keys to navigate within textboxes. But not many people know <strong>there are a slew of handy keyboard shortcuts for editing text in textboxes</strong>. And these keyboard shortcuts work <i>everywhere</i>, even in the most basic input areas – including vanilla HTML forms, such as the Wikipedia edit box.</p>
<p>
<textarea style="width:600px; height:50px">Try the keyboard shortcuts out here!
Alice was beginning to get very tired of sitting by her sister on the bank, and of having nothing to do: once or twice she had peeped into the book her sister was reading, but it had no pictures or conversations in it, 'and what is the use of a book,' thought Alice 'without pictures or conversation?'
So she was considering in her own mind (as well as she could, for the hot day made her feel very sleepy and stupid), whether the pleasure of making a daisy-chain would be worth the trouble of getting up and picking the daisies, when suddenly a White Rabbit with pink eyes ran close by her.
There was nothing so VERY remarkable in that; nor did Alice think it so VERY much out of the way to hear the Rabbit say to itself, 'Oh dear! Oh dear! I shall be late!' (when she thought it over afterwards, it occurred to her that she ought to have wondered at this, but at the time it all seemed quite natural); but when the Rabbit actually TOOK A WATCH OUT OF ITS WAISTCOAT-POCKET, and looked at it, and then hurried on, Alice started to her feet, for it flashed across her mind that she had never before seen a rabbit with either a waistcoat-pocket, or a watch to take out of it, and burning with curiosity, she ran across the field after it, and fortunately was just in time to see it pop down a large rabbit-hole under the hedge.</textarea>
</p>
<p>(Note that on a Mac you may need to substitute <kbd>Cmd</kbd> for <kbd>Ctrl</kbd>.)</p>
<table>
<tr>
<td valign="top">
<h3>Moving the Cursor</h3>
<div style="margin-left: 20px;">
<p><kbd>Ctrl</kbd>+<kbd>→</kbd><br>Move cursor to next word</p>
<p><kbd>Ctrl</kbd>+<kbd>←</kbd><br>Move cursor to previous word</p>
<p><kbd>Ctrl</kbd>+<kbd>↑</kbd><br>Scroll text area up (only works in some apps)</p>
<p><kbd>Ctrl</kbd>+<kbd>↓</kbd><br>Scroll text area down (only works in some apps)</p>
<p><kbd>End</kbd><br>Move cursor to end of line</p>
<p><kbd>Home</kbd><br>Move cursor to start of line</p>
<p><kbd>Ctrl</kbd>+<kbd>Home</kbd><br>Move cursor to beginning of text</p>
<p><kbd>Ctrl</kbd>+<kbd>End</kbd><br>Move cursor to end of text</p>
</div>
<h3>Cut, Paste, and Undo</h3>
<div style="margin-left: 20px;">
<p><kbd>Ctrl</kbd>+<kbd>X</kbd>, or <kbd>Shift</kbd>+<kbd>Del</kbd><br>Cut selected text</p>
<p><kbd>Ctrl</kbd>+<kbd>C</kbd>, or <kbd>Ctrl</kbd>+<kbd>Ins</kbd><br>Copy selected text</p>
<p><kbd>Ctrl</kbd>+<kbd>V</kbd>, or <kbd>Shift</kbd>+<kbd>Ins</kbd><br>Paste selected text</p>
<p><kbd>Ctrl</kbd>+<kbd>Z</kbd><br>Undo last edit</p>
<p><kbd>Ctrl</kbd>+<kbd>Y</kbd><br>Redo last edit</p>
</div>
<h3>Deleting Text</h3>
<div style="margin-left: 20px;">
<p><kbd>Ctrl</kbd>+<kbd>Del</kbd><br>Delete forward to word break</p>
<p><kbd>Ctrl</kbd>+<kbd>Backspace</kbd><br>Delete back to word break</p>
</div>
</td>
<td valign="top">
<h3>Selecting Text</h3>
<div style="margin-left: 20px;">
<p><kbd>Ctrl</kbd>+<kbd>A</kbd><br>Select all text</p>
<p><kbd>Shift</kbd>+<kbd>→</kbd><br>Extend selection one character to the right</p>
<p><kbd>Shift</kbd>+<kbd>←</kbd><br>Extend selection one character to the left</p>
<p><kbd>Shift</kbd>+<kbd>↓</kbd><br>Extend selection down one line</p>
<p><kbd>Shift</kbd>+<kbd>↑</kbd><br>Extend selection up one line</p>
<p><kbd>Shift</kbd>+<kbd>Home</kbd><br>Extend selection to beginning of line</p>
<p><kbd>Shift</kbd>+<kbd>End</kbd><br>Extend selection to end of line</p>
<p><kbd>Shift</kbd>+<kbd>Ctrl</kbd>+<kbd>→</kbd><br>Extend selection to next word break</p>
<p><kbd>Shift</kbd>+<kbd>Ctrl</kbd>+<kbd>←</kbd><br>Extend selection to previous word break</p>
<p><kbd>Shift</kbd>+<kbd>Ctrl</kbd>+<kbd>↓</kbd><br>Extend selection to below paragraph</p>
<p><kbd>Shift</kbd>+<kbd>Ctrl</kbd>+<kbd>↑</kbd><br>Extend selection to above paragraph</p>
<p><kbd>Shift</kbd>+<kbd>Ctrl</kbd>+<kbd>Home</kbd><br>Extend selection to top of text</p>
<p><kbd>Shift</kbd>+<kbd>Ctrl</kbd>+<kbd>End</kbd><br>Extend selection to bottom of text</p>
</div>
<h3>Navigation</h3>
<div style="margin-left: 20px;">
<p><kbd>Tab</kbd><br>Move to next input area on form</p>
<p><kbd>Shift</kbd>+<kbd>Tab</kbd><br>Move to previous input area on form</p>
</div>
</td>
</tr>
</table>
<h3>Other</h3>
<div style="margin-left: 20px;">
<p><kbd>Shift</kbd>+<kbd>Enter</kbd><br>Add a manual line break</p>
<p><kbd>Ctrl</kbd>+<kbd>Enter</kbd><br>Submit form (if textarea is part of a form and has support)</p>
</div>
<p>All of these shortcuts work in <i>any</i> standard textbox, like the ones on every web page and in most apps for your operating system. Try them out!</p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2006-04-10T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/very-basic-textbox-keyboard-shortcuts/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ It's Better Than Nothing ]]></title>
<link>https://blog.codinghorror.com/its-better-than-nothing/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
I was struck by this quote from a <a href="http://www.newyorker.com/fact/content/articles/060410fa_fact">New Yorker article on Muzak</a>:
</p>
<p>
</p>
<blockquote><i>
"Our biggest competitor," a member of Muzak's marketing department told me, "is silence."
</i></blockquote>
<p>
The problem with comparing something to nothing is that nothing is, well, <i>nothing</i>. James Bach <a href="http://blackbox.cs.fit.edu/blog/james/archives/000188.html">elaborates</a>:
</p>
<p>
</p>
<blockquote>
<i>
I was watching <a href="http://www.dcmt.cranfield.ac.uk/dois/ciseg/stuartreid">Dr. Stuart Reid</a> talk about model-based testing, some months ago. During the presentation, he complained that so few people used UML for model-making. Why don't more people use UML, he asked the audience?
</i><p>
I suppose his question was rhetorical, but I couldn't help myself. I called out "Because it's clunky!"
</p>
<p>
"It's better than nothing," he replied.
</p>
<p>
Think about that. Think about that phrase. <b>A comparison is offered between something and nothing. Who could prefer nothing? Nothing is a void.</b> It's scary and black. It makes us think about death. Ick. But wait a minute, the comparison that matters is not between something and nothing, it's probably between something and some other thing.
</p>
</blockquote>
<p>
As Bach points out, <b>any comparsion that ends in "It's better than nothing" is an invalid one</b>. There are <i>always</i> alternatives, whether the person speaking chooses to acknowledge them or not. Instead of UML, you could..
</p>
<p>
</p>
<ul>
<li>model in your head
</li>
<li>model via pencil and paper sketches
</li>
<li>model through your source code
</li>
</ul>
<p>
In my opinion, code is a perfectly reasonable place to model. That's why I was so encouraged by the fact that <a href="http://blogs.msdn.com/classdesigner/default.aspx">visual, two-way class modeling support</a> was pushed down from <a href="http://msdn.microsoft.com/vstudio/teamsystem/products/arch/">Visual Studio Team Edition for Software Architects</a> into almost all the editions of Visual Studio 2005 (Standard or better). It isn't formal UML, but it is a kinder, gentler modeling tool that <a href="http://blogs.vertigosoftware.com/teamsystem/archive/2006/04/06/2531.aspx">a lot more people are likely to use</a>.
</p>
<p>
</p>
<table>
<tr>
<td>As code
</td>
<td> 
</td>
<td>As model
</td>
</tr>
<tr>
<td valign="top">
<img alt="image placeholder" >
</td>
<td> 
</td>
<td valign="top">
<img alt="image placeholder" >
</td>
</tr>
</table>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2006-04-11T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/its-better-than-nothing/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ Automatic Login for Virtual Machines ]]></title>
<link>https://blog.codinghorror.com/automatic-login-for-virtual-machines/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
Virtual machine images typically don't need much security, so the login prompt is more of a formality than anything else. Plus, if you're planning to share the VM image with others, you need to communicate the login information along with the image. It's a pain.
</p>
<p>
I've seen <a href="http://www.hanselman.com/blog/WindowsPreLoginWallpaper.aspx">tips</a> on how to <a href="http://blogs.officezealot.com/charles/archive/2004/05/04/830.aspx">force the login background to be an image containing the username and password</a> which appears directly above the login dialog.
</p>
<p>
But there's an even easier solution. <a href="http://download.microsoft.com/download/f/c/a/fca6767b-9ed9-45a6-b352-839afb2a2679/TweakUiPowertoySetup.exe">Tweak UI</a>, one of the <a href="http://www.microsoft.com/windowsxp/downloads/powertoys/xppowertoys.mspx">official Microsoft PowerToys</a>, allows you to enable a default login, with no typing at all. It calls this feature "autologon":
</p>
<p>
<img alt="image placeholder" >
</p>
<p>
I don't know why you would bother with the "bitmap login background" method, as the autologin method is so much cleaner.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2006-04-12T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/automatic-login-for-virtual-machines/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ Wikipedia: Inclusionists vs. Deletionists ]]></title>
<link>https://blog.codinghorror.com/wikipedia-inclusionists-vs-deletionists/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
Jason Scott, of <a href="http://www.textfiles.com/">textfiles.com</a> and <a href="http://www.bbsdocumentary.com/">BBS: The Documentary</a>, presented a <a href="http://www.archive.org/details/20060408-jscott-wikipedia">talk on the failure of Wikipedia</a> at <a href="http://www.notacon.org/">Notacon 3</a> this weekend. I highly recommend listening to his talk. It's fascinating-- full of insights into what makes Wikipedia work so well, but specifically highlighting some of the social problems they've run into as they grow.
</p>
<p>
Although my experiences with Wikipedia have been almost uniformly positive, I was taken aback when I noticed that <b>there appears to be a Wikipedia entry for every single comic book character ever created</b>. Surely <a href="http://en.wikipedia.org/wiki/Superman">Superman</a> and <a href="http://en.wikipedia.org/wiki/Batman">Batman</a> are worthy of inclusion in Wikipedia-- but what about <a href="http://en.wikipedia.org/wiki/Monica_Rambeau">Monica Rambeau</a> and <a href="http://en.wikipedia.org/wiki/Jubilee_%28comics%29">Jubilee</a>?
</p>
<p>
Jason's talk provides a name for this conundrum: <b>inclusionists versus deletionists</b>.
</p>
<p>
</p>
<blockquote>
The inclusionist versus deletionist debate [within Wikipedia] is as firm and strong as the abortion debate, gun control debate, or the death penalty debate.
<p>
Inclusionism says, Wikipedia, because it is a virtual encyclopedia, is capable of carrying the sum of human knowledge-- coincidentally, the theme of Wikipedia. Because of the fact that you can sort things, and you can work things out, you're able to actually keep the sum of all human knowledge on a place, keep it changed, and use the power of the computer. F**k yeah!
</p>
<p>
The deletionists take the attitude [that] Wikipedia is not a junkyard. An area for the cruft of all aspects of humanity that ever existed, turning into an untenable, <a href="http://www.namco.com/games/katamari_damacy/">Katamari Damacy</a>-like ball of s**t that rolls through the internet. We should clean up stuff that is not important, not interesting, and we should just get that s**t out of there. Who cares about what the names of every character in Serenity is? Who cares? So the idea is, delete that.
</p>
</blockquote>
<p>
Although I tend to side with the deletionists, there's no rational way to decide what's "notable". So the inclusionists-- and the ever-spiraling increase of storage, bandwidth, and CPU power-- will win by default. I'm not sure this is a bad thing. The long tail of micro-content doesn't need to appear in any massive table of contents; it's only a few search keywords away.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2006-04-13T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/wikipedia-inclusionists-vs-deletionists/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ UML, Circuit Diagrams, and God's Rules ]]></title>
<link>https://blog.codinghorror.com/uml-circuit-diagrams-and-gods-rules/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
Very few software engineers use <a href="http://www.phruby.com/stencildownload.html">UML symbols</a> to design software, but electrical engineers regularly use circuit symbols to design electronics:
</p>
<p>
<img alt="image placeholder" >
</p>
<p>
<a href="http://www.kpsec.freeuk.com/symbol.htm">Circuit symbols</a> are constructed into <a href="http://en.wikipedia.org/wiki/Circuit_diagram">circuit diagrams</a>-- the <b>the visual language of electricity</b>:
</p>
<p>
<img alt="image placeholder" >
</p>
<p>
If circuit diagrams are a standard, universally understood way to talk about electronics, <b>why doesn't UML enjoy the same currency for software development?</b>
</p>
<p>
Well, one obvious difference is that software, unlike electricity, isn't subject to God's laws.* And <a href="http://www.codinghorror.com/blog/archives/000298.html">God didn't invent x86</a>. Software development is far less amenable to formal diagrams because, well, it's something <i>we just made up</i>. And we keep changing the rules all the time. As Brooks points out in <a href="http://www.amazon.com/exec/obidos/ASIN/0201835959/codihorr-20">The Mythical Man-Month</a>, software developers are essentially <a href="http://www.ercb.com/feature/feature.0001.html">playing the role of God</a>:
</p>
<p>
</p>
<blockquote>
Why is programming fun? What delights may its practioner expect as his reward?
<p>
First is the sheer joy of making things. As the child delights in his mud pie, so the adult enjoys building things, especially things of his own design. I think this delight must be an image of God's delight in making things, a delight shown in the distinctiveness of each leaf and each snowflake.
</p>
<p>
Second is the pleasure of making things that are useful to other people. Deep within, we want others to use our work and to find it helpful. In this respect the programming system is not essentially different from the child's first clay pencil holder "for Daddy's office."
</p>
<p>
Third is the fascination of fashioning complex puzzle-like objects of interlocking moving parts and watching them work in subtle cycles, playing out the consequences of principles built in from the beginning. The programmed computer has all the fascination of the pinball machine or the jukebox mechanism, carried to the ultimate.
</p>
<p>
Fourth is the joy of always learning, which springs from the nonrepeating nature of the task. In one way or another the problem is ever new, and its solver learns something: sometimes practical, sometimes theoretical, and sometimes both.
</p>
<p>
<b>Finally, there is the delight of working in such a tractable medium. The programmer, like the poet, works only slightly removed from pure thought-stuff. He builds his castles in the air, from air, creating by exertion of the imagination. Few media of creation are so flexible, so easy to polish and rework, so readily capable of realizing grand conceptual structures.</b> (As we shall see later, this tractability has its own problems.)
</p>
<p>
Yet the program construct, unlike the poet's words, is real in the sense that it moves and works, producing visible outputs separately from the construct itself. It prints results, draws pictures, produces sounds, moves arms. The magic of myth and legend has come true in our time. One types the correct incantation on a keyboard, and a display screen comes to life, showing things that never were nor could be.
</p>
<p>
Programming then is fun because it gratifies creative longings built deep within us and delights sensibilities we have in common with all men.
</p>
</blockquote>
<p>
Software developers do not have a monopoly on creativity. A clever circuit is no less imaginative than a clever algorithm. But software development is a "tractable medium." If we decide the speed of light is not to our liking, <i>we just change it</i>. Imagine the difficulty an electrical engineer would have working on your circuit diagram if, on that diagram, you had changed something fundamental, like the conductivity of copper.
</p>
<p>
But even with the helpful constraint of God's rules, <b>circuit diagrams are still idealized representations of the final product.</b> You need a <a href="http://en.wikipedia.org/wiki/Printed_circuit">printed circuit board</a> to implement the circuit diagram-- and the translation from circuit digram into PCB  typically invoves a lot of real-world compromises.
</p>
<p>
This is not to say that formal software diagramming systems like UML aren't useful in software engineering. They can be. But they'll never be as useful as circuit diagrams are to electrical engineers.
</p>
<p>
* Or <a href="http://www.venganza.org/">the deity of your choice</a>.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2006-04-14T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/uml-circuit-diagrams-and-gods-rules/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ Your Personal Brand ]]></title>
<link>https://blog.codinghorror.com/your-personal-brand/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p><a href="http://blog.lifebeyondcode.com/blog">Rajesh Setty</a> has some <a href="http://www.cioupdate.com/career/article.php/3581436">unusual advice</a> for IT professionals: stop wasting time in the technology skill-set rat race, and <b>start building your personal brand</b>:</p>
<blockquote>
<p>Jack meets Janet and they start talking. Jack explains who he is and what he does for a living and Janet does the same. While Jack is speaking, Janet is very busy trying to "box" Jack.</p>
<p>She's looking for some tag –  "software engineer", "technical architect", "project manager" –   something that will make it easy for her to remember. Of course, Jack is doing the same thing. It's a "boxing" contest.</p>
<p>There's nothing wrong with this approach. We all do it. Here's why: When Janet finishes her meeting with Jack and later meets an old friend Paul, Janet needs an easy way to explain who she met. She'll say, "I met Jack for coffee and he's a software engineer" rather than repeating the whole spiel she just heard from Jack.</p>
<p>There is hope, though. If Jack made a compelling introduction, something memorable and remarkable, Janet would be compelled to say a few more words about Jack. Jack won the "boxing" game.</p>
<p>This requires more than communication skills. <b>You need to be working on something that is remarkable or be remarkable yourself. In other words, you need to be working on your "personal brand."</b></p>
</blockquote>
<p>Mere competence in a technical discipline is not enough. That's <a href="http://blog.codinghorror.com/everything-you-know-will-be-obsolete-in-five-years/">the minimum required to keep your head above water</a>. To have a personal brand, you must do something remarkable:</p>
<ul>
<li>lead a user group</li>
<li>create a popular open-source project</li>
<li>write a blog</li>
<li>publish a book</li>
<li>publish articles</li>
<li>speak at conferences</li>
</ul>
<p>Do whatever you like. Pick one, pick them all, or pick something that's not on this list.* As long as it's public, and it advances your skills, you're creating a personal brand. And that will help your career far more than technical chops <i>ever</i> will.</p>
<p>Prior to reading this article, <b>I often joked with coworkers that I had a personal branding strategy</b>. The <a href="http://www.codinghorror.com/blog/files/wumpus_origin.htm">Wumpus</a> is my <a href="http://www.hundland.com/scripts/Fight-Club_third.htm">power animal</a>, which I've placed, well, all over the place:</p>
<p>front license plate</p>
<img alt="image placeholder" >
<p>polo shirts</p>
<img alt="image placeholder" >
<p>stickers</p>
<img alt="image placeholder" >
<p>Now I'm not so sure if it's a joke –  or an actual branding strategy.</p>
<p>* This is, of course, a tiny subset of all the remarkable things you could possibly do. Rajesh maintains a <a href="http://changethis.com/manifesto/show/17.25WaystoDistinguish">Distinguish Yourself manifesto</a> which has lots of additional ideas.</p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2006-04-16T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/your-personal-brand/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ Are You Following the Instructions on the Paint Can? ]]></title>
<link>https://blog.codinghorror.com/are-you-following-the-instructions-on-the-paint-can/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>We're currently undertaking some painting projects at home. Which means I'll be <a href="http://www.codinghorror.com/blog/archives/000283.html">following the instructions on the paint can</a>.</p>
<p><img alt="image placeholder" >
<p>But what would happen if I <em>didn't</em> follow the instructions on the paint can? Here's a list of common interior painting mistakes:</p>
<blockquote>
<strong>The single most common mistake in any project is failure to read and follow manufacturer's instructions for tools and materials being used.</strong> In regard to painting, the most common mistakes are:
<ul>
<li>Not preparing a clean, sanded, and primed (if needed) surface. </li>
<li>Failure to mix the paints properly. </li>
<li>Applying too much paint to the applicator. </li>
<li>Using water-logged applicators. </li>
<li>Not solving dampness problems in the walls or ceilings. </li>
<li>Not roughing up enamel paint before painting over it. </li>
</ul>
</blockquote>
<p>What I find particularly interesting is that <strong>none of the mistakes on this checklist have anything to do with my skill as a painter.</strong> My technical proficiency (or lack thereof) as a painter doesn't even register! To guarantee a reasonable level of quality, you don't have to spend weeks practicing your painting skills. You don't even have to be a good painter. All you have to do is <em>follow the instructions on the paint can!</em></p>
<p>Sure, it seems like common sense. But take a close look at the houses on the streets you drive by. Each street has that one house where the owners, for whatever reason, chose not to follow the instructions on the paint can.*</p>
<p>For years, software development was an entire subdivision of badly painted houses. But the field of software development is now mature enough that we have a number of <a href="http://www.extremeprogramming.org/">paint</a> <a href="http://www.controlchaos.com/">cans</a> to <a href="http://www.martinfowler.com/articles/newMethodology.html">refer to</a>. Here's <a href="http://www.joelonsoftware.com/articles/fog0000000043.html">one such checklist from Joel Spolsky</a>, circa 2000:</p>
<ol>
<li>Do you use source control? </li>
<li>Can you make a build in one step? </li>
<li>Do you make daily builds? </li>
<li>Do you have a bug database? </li>
<li>Do you fix bugs before writing new code? </li>
<li>Do you have an up-to-date schedule? </li>
<li>Do you have a spec? </li>
<li>Do programmers have quiet working conditions? </li>
<li>Do you use the best tools money can buy? </li>
<li>Do you have testers? </li>
<li>Do new candidates write code during their interview? </li>
<li>Do you do hallway usability testing? </li>
</ol>
<p>The type of paint can you choose – and the instructions you follow – are highly debatable, of course. But make sure, at the very least, you're following the instructions on the paint can for your software development project.</p>
<p>* <a href="http://www.codinghorror.com/blog/2005/07/a-tribute-to-the-windows-31-hot-dog-stand-color-scheme.html">oddball color choices</a> notwithstanding</p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2006-04-17T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/are-you-following-the-instructions-on-the-paint-can/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ Remote Desktop Tips and Tricks ]]></title>
<link>https://blog.codinghorror.com/remote-desktop-tips-and-tricks/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><style type="text/css">
.kbd {font-family:arial,helvetica,sans-serif;padding:5px 3px;white-space:nowrap;color:#000;background:#eee;border-width:2px 4px 5px 3px;border-style:solid;border-color:#ccc #aaa #888 #bbb;}
</style>
<p>
I'm with <a href="http://odetocode.com/Blogs/scott/comments/3334.aspx">K. Scott Allen</a>: the pervasiveness of <a href="http://www.microsoft.com/windowsxp/using/mobility/getstarted/remoteintro.mspx">Remote Desktop</a> functionality in Windows has fundamentally changed the way I work.
</p>
<p>
The fact that it shipped in the Windows XP box-- and as a default component of all the server operating systems since Windows 2000-- has done wonders for its adoption. It's truly ubiquitous. And it doesn't hurt that it's actually the best performing remote control tool I've ever used; I have yet to try <a href="http://www.codinghorror.com/blog/archives/000338.html">any other remote control tool</a> that performs as well. It's so responsive that it almost makes the idea of physically sitting in front of a computer seem quaint.
</p>
<p>
Almost.
</p>
<p>
One thing you quickly learn with Remote Desktop is that <b>not all the windows shortcut keys work as you would expect them to</b>. The "Apply Windows key combinations" setting defaults to "full screen only", so you may see different behavior depending on whether or not you're running full-screen; use the Ctrl+Alt+Pause shortcut to switch back and forth.
</p>
<p>
The help file contains a list of the <b>special Remote Desktop key combinations</b>:
</p>
<p>
<span class="kbd">Alt</span> + <span class="kbd">Page Up</span>
</p>
<p>
Switches between programs from left to right.
</p>
<p>
<span class="kbd">Alt</span> + <span class="kbd">Page Down</span>
</p>
<p>
Switches between programs from right to left.
</p>
<p>
<span class="kbd">Alt</span> + <span class="kbd">Insert</span>
</p>
<p>
Cycles through the programs in the order they were started.
</p>
<p>
<span class="kbd">Alt</span> + <span class="kbd">Home</span>
</p>
<p>
Displays the Start menu.
</p>
<p>
<span class="kbd">Ctrl</span> + <span class="kbd">Alt</span> + <span class="kbd">Break</span>
</p>
<p>
Switches the client between a window and full screen.
</p>
<p>
<span class="kbd">Ctrl</span> + <span class="kbd">Alt</span> + <span class="kbd">End</span>
</p>
<p>
Brings up the Windows Security dialog box.<br>
</p>
<p>
<span class="kbd">Ctrl</span> + <span class="kbd">Alt</span> + <span class="kbd">Pause</span>
</p>
<p>
Toggles between fullscreen and windowed mode<br>
(note that this does not set the client desktop to the correct size)
</p>
<p>
<span class="kbd">Alt</span> + <span class="kbd">Del</span>
</p>
<p>
Displays the Windows menu
</p>
<p>
<span class="kbd">Ctrl</span> + <span class="kbd">Alt</span> + <span class="kbd">Num -</span>
</p>
<p>
Places a snapshot of the client's active window on the clipboard
</p>
<p>
<span class="kbd">Ctrl</span> + <span class="kbd">Alt</span> + <span class="kbd">Num +</span>
</p>
<p>
Places a snapshot of the client's entire desktop area on the clipboard
</p>
<p>
To <b>shut down or restart the remote computer</b>, either bring up the Windows Security dialog , or use Task Manager.
</p>
<p>
Scott also provides a great list of additional resources for hacking Remote Desktop:
</p>
<p>
</p>
<ul>
<li>
<a href="http://support.microsoft.com/default.aspx?scid=kb;en-us;278845">Shadowing the current login session with Windows Server 2003</a>
</li>
<li>
<a href="http://support.microsoft.com/default.aspx?scid=kb;en-us;279656&amp;sd=tech">Shadowing the current login session with Windows XP</a> (aka Remote Assistance)
</li>
<li>
<a href="http://dev.remotenetworktechnology.com/ts/rdpfile.htm">A description of the .RDP file format</a>
</li>
<li>
<a href="http://weblogs.asp.net/owscott/archive/2003/12/30/46776.aspx">Managing  Remote Desktop Sessions Remotely</a> (or use <a href="http://www.codinghorror.com/blog/archives/000222.html">the GUI tool</a>)
</li>
<li>
<a href="http://www.rdesktop.org/">Connect to Remote Desktop via Linux</a>
</li>
<li>
<a href="http://support.microsoft.com/?kbid=306759">Change the default Remote Desktop listening port</a>
</li>
</ul>
<p>
I have two tips of my own. The first has to do with multiple monitors. Both my work and home computers have <a href="http://www.codinghorror.com/blog/archives/000217.html">three monitors</a>. Before you laugh, <a href="http://blogs.vertigosoftware.com/jatwood/comments/1444.aspx">guess who else was on the three monitor tip back in the day?</a> Google's Larry Page. And Bill Gates. At any rate, I've gotten at least one email on this, so I know it's not easy to figure out. <b>Here's how you run a remote desktop session maximized to a particular monitor</b>:
</p>
<p>
</p>
<ol>
<li>Start a windowed (non-fullscreen) remote desktop session
</li>
<li>Drag the windowed session to the monitor you want
</li>
<li>Close the remote desktop session
</li>
<li>Set the properties for the connection to "full screen". It must be "full screen", <i>not</i> the actual resolution of your monitor (1280x1024, etc).
</li>
<li>Start a remote desktop connection; it'll be full screen on the target monitor
</li>
</ol>
<p>
I know it's convoluted. But at least it remembers which monitor it is full screen to. It'd be simpler if we had a way to change the client desktop size without closing and re-opening the connection, say via the display properties dialog. But we don't.
</p>
<p>
Here's my second tip: <b>if you're not on a fast LAN, drop the color depth down to either 256 or 15-bit color</b>, and <b>select "Modem" on the Experience tab</b>.  Color depth is the single biggest contributor to performance over a slow connection. You may be tempted to go to 16-bit color or even 24-bit color to make things look prettier, but remember all those additional bits have to be transmitted across the wire. I know 256 colors can look desperately bad with most of today's websites and applications-- but 15-bit color is a good compromise.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2006-04-18T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/remote-desktop-tips-and-tricks/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ Windows Vista: Security Through Endless Warning Dialogs ]]></title>
<link>https://blog.codinghorror.com/windows-vista-security-through-endless-warning-dialogs/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
Paul Thurrott's scathing article <a href="http://www.winsupersite.com/reviews/winvista_5308_05.asp">Where Vista Fails</a> highlights my biggest concern with Windows Vista:
</p>
<p>
</p>
<blockquote>
Modern operating systems like Linux and Mac OS X operate under a security model where even administrative users don't get full access to certain features unless they provide an in-place logon before performing any task that might harm the system. This type of security model protects users from themselves, and it is something that Microsoft should have added to Windows years and years ago.
<p>
Here's the good news. In Windows Vista, Microsoft is indeed moving to this kind of security model. The feature is called User Account Protection (UAP) and, as you might expect, it prevents even administrative users from performing potentially dangerous tasks without first providing security credentials, thus ensuring that the user understands what they're doing before making a critical mistake. It sounds like a good system. But this is Microsoft, we're talking about here. They completely botched UAP.
</p>
<p>
<img alt="image placeholder" >
</p>
<p>
<b>The bad news, then, is that UAP is a sad, sad joke. It's the most annoying feature that Microsoft has ever added to any software product</b>, and yes, that includes <a href="http://blogs.vertigosoftware.com/jatwood/archive/2006/02/22/2242.aspx">that ridiculous Clippy character from older Office versions</a>. The problem with UAP is that it throws up an unbelievable number of warning dialogs for even the simplest of tasks. That these dialogs pop up repeatedly for the same action would be comical if it weren't so amazingly frustrating. It would be hilarious if it weren't going to affect hundreds of millions of people in a few short months. It is, in fact, almost criminal in its insidiousness.
</p>
</blockquote>
<p>
We have fairly recent internal builds of Vista for a project we're working on at Vertigo, and we've run into this problem too. Even though you're ostensibly logged in as an "Administrator", you're inundated with a sea of security dialogs if you try to do anything even remotely, well, Administrator-y.
</p>
<p>
The problem with the <b>Security Through Endless Warning Dialogs</b> school of thought is that <i>it doesn't work</i>. All those earnest warning dialogs eventually blend together into a giant "click here to get work done" button that nobody bothers to read any more. The operating system cries wolf so much that when a real wolf-- in the form of a virus or malware-- rolls around, you'll mindlessly allow it access to whatever it wants, just out of habit. As Rick Strahl notes, <a href="http://west-wind.com/weblog/posts/4678.aspx">this is the ultimate form of nagware</a>:
</p>
<p>
</p>
<blockquote>
Then there are the security dialogs. Ah yes, now we're making progress: Ask users on EVERY program you launch that isn't signed whether they want to elevate permissions. Uh huh, this is going to work REAL WELL. We know how well that worked with unsigned ActiveX controls in Internet Explorer Ã¢â‚¬â€œ so well that even Microsoft isn't signing most of its own ActiveX controls. Give too many warnings that are not quite reasonable and people will never read the dialogs and just click them anywayÃ¢â‚¬Â¦ I know I started doing that in the short use I've had on Vista.
</blockquote>
<p>
But there's an even deeper problem lurking under the surface. <b>Why doesn't Vista respect my choice to be an Administrator?</b> Who is really in control here: me, or my operating system? There's something awfully paternalistic about an operating system that lets me log in as an Administrator, but treats me like a regular User. If you're going to treat me like a User, at least have the decency to create a regular User account for me. That would certainly make more sense.
</p>
<p>
Rick Strahl confirmed that, indeed, Vista downgrades Adminstrators to regular Users by default, in a misguided attempt to enhance security. He also posted a workaround that applied only to the Vista Beta. But the good news is that in the final, released version of Vista, it's quite easy to disable UAC:
</p>
<p>
</p>
<ol>
<li>Launch Control Panel
</li>
<li>Type "UAC" in the search box at the upper-right hand corner of the window
</li>
<li>The option to disable UAC is the first search result.
</li>
</ol>
<p>
</p>
<p>
Then log off and log back on.
</p>
<p>
I seriously hope Microsoft reconsiders these bizarre policies before Vista is released, but sadly they did not.
</p>
<ol>
<li>Let administrators really be Administrators!
</li>
<li>Create all new users by default as plain Users. If a user opts to upgrade to an Administrator, that's the appropriate time to pop the scary warning dialog.
</li>
<li>If a user tries to do something that requires Administrator rights, show a dialog telling them so, and offering links to a) log in temporarily as an Admin, or b) enter the Admin credentials in-place for a quick one time operation.
</li>
</ol>
<p>
It could be so much simpler if Microsoft just followed the established conventions.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2006-04-19T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/windows-vista-security-through-endless-warning-dialogs/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ The Cartoon Guide to.. Programming? ]]></title>
<link>https://blog.codinghorror.com/the-cartoon-guide-to-programming/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>I recently found a link to a <a href="http://www.msri.org/ext/larryg/">series of Larry Gonick's mathematical cartoons</a> that were originally published in Discover magazine:</p>
<ul>
<li>
<a href="http://www.msri.org/ext/larryg/pages/01.htm">Beauty and the Beasts</a> (neural nets) </li>
<li>
<a href="http://www.msri.org/ext/larryg/pages/03.htm">Prime Time</a> (cryptography) </li>
<li>
<a href="http://www.msri.org/ext/larryg/pages/05.htm">Proof Positive?</a> (probabalistic proofs) </li>
<li>
<a href="http://www.msri.org/ext/larryg/pages/07.htm">Lumps, with Mother Nature</a> (chaotic mixing) </li>
<li>
<a href="http://www.msri.org/ext/larryg/pages/09.htm">Speed</a> (relativity) </li>
<li>
<a href="http://www.msri.org/ext/larryg/pages/11.htm">The Solution</a> (traveling salesman's problem) </li>
<li>
<a href="http://www.msri.org/ext/larryg/pages/13.htm">Filler Up!</a> (space-filling solids) </li>
<li>
<a href="http://www.msri.org/ext/larryg/pages/15.htm">The Bowerbird's Dilemma</a> (game theory) </li>
<li>
<a href="http://www.msri.org/ext/larryg/pages/17.htm">El Topo</a> (DNA topology) </li>
<li>
<a href="http://www.msri.org/ext/larryg/pages/19.htm">Portrait of a Problem</a> (protein-folding energy landscsapes) </li>
<li>
<a href="http://www.msri.org/ext/larryg/pages/21.htm">It's the Pits</a> (wavelets) </li>
</ul>
<p>It's great stuff. Here's a sample panel from the one on cryptography:</p>
<p><img alt="image placeholder" >
<p>I've followed <a href="http://en.wikipedia.org/wiki/Larry_Gonick">Larry Gonick's</a> work for ages.  He's famous for his easy to grasp, beautifully illustrated treatment of complex topics – as exemplified in <a href="http://www.larrygonick.com/html/pub/pub.html">the series of books he's published</a>:</p>
<ul>
<li>
<a href="http://www.amazon.com/exec/obidos/ASIN/0385265204/codihorr-20">Cartoon History of the Universe Vol I</a> (1990) </li>
<li>
<a href="http://www.amazon.com/exec/obidos/ASIN/0385420935/codihorr-20">Cartoon History of the Universe Vol II</a> (1994) </li>
<li>
<a href="http://www.amazon.com/exec/obidos/ASIN/0393324036/codihorr-20">Cartoon History of the Universe Vol III</a> (2002) </li>
<li>
<a href="http://www.amazon.com/exec/obidos/ASIN/0060760044/codihorr-20">Cartoon History of the Modern World Vol I</a> (ETA late 2006) </li>
<li>
<a href="http://www.amazon.com/exec/obidos/ASIN/0062730983/codihorr-20">Cartoon History of the United States</a> (1991) </li>
<li>
<a href="http://www.amazon.com/exec/obidos/ASIN/0060936770/codihorr-20">Cartoon Guide to Chemistry</a> (2005) </li>
<li>
<a href="http://www.amazon.com/exec/obidos/ASIN/0064604179/codihorr-20">Cartoon Guide to the Computer</a> (1983) </li>
<li>
<a href="http://www.amazon.com/exec/obidos/ASIN/0062732749/codihorr-20">Cartoon Guide to the Environment</a> (1996) </li>
<li>
<a href="http://www.amazon.com/exec/obidos/ASIN/0062730991/codihorr-20">Cartoon Guide to Genetics</a> (1991) </li>
<li>
<a href="http://www.amazon.com/exec/obidos/ASIN/006273217X/codihorr-20">Cartoon Guide to (non)Communication</a> (1993) </li>
<li>
<a href="http://www.amazon.com/exec/obidos/ASIN/0062731009/codihorr-20">Cartoon Guide to Physics</a> (1992) </li>
<li>
<a href="http://www.amazon.com/exec/obidos/ASIN/0062734318/codihorr-20">Cartoon Guide to Sex</a> (1999) </li>
<li>
<a href="http://www.amazon.com/exec/obidos/ASIN/0062731025/codihorr-20">Cartoon Guide to Statistics</a> (1994) </li>
</ul>
<p>Although I made fun of the <a href="http://www.codinghorror.com/blog/archives/000560.html">Learn ASP.NET in 24 Hours</a> meme, <strong>I am a big fan of learning subjects in cartoon form</strong>. You learn more when you're having fun doing it.</p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2006-04-21T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/the-cartoon-guide-to-programming/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ If the User Can't Find It... ]]></title>
<link>https://blog.codinghorror.com/if-the-user-cant-find-it/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
I was lucky enough to attend a week-long <a href="http://www.humanfactors.com">Human Factors International </a> session on usability a few years ago*. As a developer with a long term interest in getting to the human root cause of so many programming problems, I loved it. One of the freebies from the course was this button:
</p>
<p>
<img alt="image placeholder" >
</p>
<p>
It's excellent advice. I still have this button clipped to my <a href="http://www.amazon.com/exec/obidos/ASIN/B000037X0F/codihorr-20">mug boss</a> to periodically remind me that, no matter how cool the feature may be, if users can't find it – or understand it – <em>you're wasting your time</em>. So make sure you have your priorities in order before you start: usability first, feature second.
</p>
<p>
Jensen Harris provided <a href="http://blogs.msdn.com/jensenh/archive/2006/04/24/582154.aspx">a striking example of this phenomenon in action</a> today:
</p>
<blockquote>
One of the most startling and consistent pieces of feedback we've received from the early deployments of Office 2007 Beta 1 has been: "It's great that you added the drawing tools to all of the Office programs! Now I don't need to create the drawings in PowerPoint and copy them into Word/Excel/Outlook..."
<p>
Surprised? I certainly was.
</p>
<p>
While the drawing and graphics engine has certainly been massively improved in Office 2007, <strong>the same basic drawing capabilities have been available in Word/Excel/PowerPoint since Office 97</strong>. Yet, again and again we hear stories about people assiduously creating drawings in PowerPoint and copying them over piece by piece into their Word or Excel document. I remember during a site visit watching a man create a simple flowchart in Excel which should have taken 3 minutes actually take 15 minutes because of all of the cross-application, clipboard, and windowing work it took to keep moving shapes between the apps.
</p>
</blockquote>
<p>
When is a ten year old feature suddenly a "new" feature? When users can actually find it!
</p>
<p>
* HFI also has a great technical reference section on their site, which includes the archives of their <a href="http://www.humanfactors.com/downloads/pastissues_all.asp">UI Design Newsletter</a> back to 1998. It's worth checking out if you haven't done so already.
</p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2006-04-23T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/if-the-user-cant-find-it/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ Web 2.0 and The "Whatever Box" Server ]]></title>
<link>https://blog.codinghorror.com/web-2-0-and-the-whatever-box-server/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>One of the key differences between the original dot-com bubble and the Web 2.0 bubble we're entering now is that our servers are a lot cheaper and a lot more powerful. <a href="http://en.wikipedia.org/wiki/Moore's_law">Moore's Law</a> in action isn't exactly news, but the new web is definitely <a href="http://bnoopy.typepad.com/bnoopy/2005/06/its_a_great_tim.html">powered by cheap "whatever boxes"</a>:</p>
<blockquote>In the 10 years between Excite and JotSpot, hardware has literally become 100X cheaper. It's two factors Ã¢â‚¬â€œ Moore's law and the rise of Linux as an operating system designed to run on generic hardware. Back in the Excite days, we had to buy proprietary Sun hardware and Sun hard drive arrays. Believe me, none of it was cheap. Today, we buy generic Intel boxes provided by one of a million different suppliers.</blockquote>
<p>We recently specced out a new server at work and I was curious about this: <strong>exactly how much more powerful did servers get in the last six years?</strong></p>
<p>The parts list for our homebrew server is saved in a <a href="http://secure.newegg.com/NewVersion/wishlist/PublicWishDetail.asp?WishListNumber=3117244">newegg wishlist</a>. I set out to find a year 2000 equivalent by looking up a typical Dell server on <a href="http://web.archive.org/web/20000619133552/commerce.us.dell.com/welcome/minicat.asp?brand_id=PEDGE&amp;family_id=9720&amp;keycode=6W300">the mid-2000 internet archive of Dell's website</a>. According to that page, an entry-level <a href="http://support.dell.com/support/edocs/systems/pe4400/en/index.htm">PowerEdge 4400</a> server started at <strong>$4,814</strong>. I can't get to the detailed spec pages, so I'm estimating the entry-level specs based on the <a href="http://search.ebay.com/search/search.dll?satitle=poweredge+4400">many PowerEdge 4400 machines for sale on eBay</a>.<br> <br></p>
<table width="600">
<tbody>
<tr>
<td><strong>Typical 2006 server</strong></td>
<td><strong>Typical 2000 server</strong></td>
</tr>
<tr>
<td>Dual Core 64-bit CPU, 2.0 Ghz</td>
<td>Two 32-bit CPUs, 733 Mhz</td>
</tr>
<tr>
<td>4 GB DDR400 memory</td>
<td>512mb PC133 ECC memory</td>
</tr>
<tr>
<td>150 GB 10,000 RPM SATA-II mirrored</td>
<td>9 GB 10,000 RPM UltraSCSI mirrored</td>
</tr>
<tr>
<td>1000baseT network</td>
<td>100baseT network</td>
</tr>
<tr>
<td><span style="color: red;">$1,743</span></td>
<td><span style="color: red;">$4,814</span></td>
</tr>
</tbody>
</table>
<p><a href="http://www1.us.dell.com/content/topics/global.aspx/power/en/ps3q02_ramesh?c=us&amp;cs=555&amp;l=en&amp;s=biz"></a></p>
<p>Now, this comparison isn't entirely fair. The PowerEdge 4400 supports real hot-swappable power supplies and hardware RAID-ed hard drives; our homebrew rig has to be powered down to switch out a failed hard drive or (single) power supply.</p>
<p>But the general thrust of the comparison is still valid.         In a nutshell, we get..</p>
<ul>
<li>10x the network bandwidth</li>
<li>8x the memory</li>
<li>4x the memory bandwidth</li>
<li>16x the disk space</li>
<li>10x the CPU power </li>
</ul>
<p>.. all for about one-third the price. And we have the luxury of running a commonly available 64-bit operating system in <a href="http://www.codinghorror.com/blog/archives/000435.html">native 64-bit mode</a>, too.</p>
<p>I would still argue that the the relative costs of software and hardware-- relative to the cost of human labor, I mean-- haven't changed that much in the last six years. But you can plainly see where <strong>this extravagant excess of server power makes it possible to use labor-saving software that wasn't viable in the year 2000</strong>. You can build your site on extremely high-level software, <a href="http://www.codinghorror.com/blog/archives/000509.html">such as interpreted languages like Ruby and Python</a>, and still scale across thousands of simultaneous user requests.. even on a single "whatever box" server.</p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2006-04-24T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/web-2-0-and-the-whatever-box-server/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ A Blog Without Comments Is Not a Blog ]]></title>
<link>https://blog.codinghorror.com/a-blog-without-comments-is-not-a-blog/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>James Bach responded to my recent post, <a href="http://www.codinghorror.com/blog/archives/000568.html">Are You Following the Instructions on the Paint Can?</a>, with <a href="http://blackbox.cs.fit.edu/blog/james/archives/000211.html">Studying Jeff Atwood's Paint Can</a>. I didn't realize how many assumptions I made in that post until I read Mr. Bach's pointed response. The most amusing assumption I made – and I had no idea I was doing this – was that <i>I ran a painting business in college!</i> The paint can instructions make sense to me because of that prior experience. Pity the would-be handyman who has never painted anything before and has only a few paragraphs of text on the back of a can to refer to.</p>
<p>But I'll reserve a complete response to Mr. Bach for later. My immediate frustration is that <b>James has comments disabled on his blog, so I can't form a public reply to James without creating a post on my own blog.</b></p>
<p>I firmly maintain that <a href="http://www.codinghorror.com/blog/archives/000421.html">a blog without comments enabled is not a blog</a>. It's more like a <b>church pulpit</b>. You preach the word, and the audience passively receives your evangelical message. Straight from God's lips to their ears. When the sermon is over, the audience shuffles out of the church, inspired for another week. And there's definitely no question and answer period afterward.</p>
<img alt="image placeholder" >
<p>Of course, I'm exaggerating for comedic effect. Maybe a blog with comments disabled is more analogous to a newspaper editorial. But even with a newspaper editorial, readers can make public comments by sending a letter to the editor, which may be published in a later edition of the paper.</p>
<p>However we slice it, with comments disabled the reader's hands are tied. If readers want to have a public dialog with you, then <b>your readers must have blogs of their own.</b> This strikes me as awfully elitist.</p>
<ul>
<li>
<p>It's unreasonable to expect people that disagree with the tenets of your religion to build a church and start their own religion.</p>
</li>
<li>
<p>It's unreasonable to expect people that disagree with your newspaper editorial to buy a printing press and start their own newspaper.</p>
</li>
<li>
<p>And it's unreasonable to expect people to start their own blogs to make a public reply to your post.</p>
</li>
</ul>
<p>Yes, the barriers to entry for blogging are radically lower, but <b>not everyone has the time or inclination to become a full-bore blogger.</b> Are you really comfortable saying, in effect, <i>unless you have a blog I am not interested in what you have to say?</i> Because I'm not.</p>
<p>That said, I realize that <a href="http://www.adactio.com/journal/1094">comments aren't appropriate for every blog in the world</a>:</p>
<blockquote>
<p>Blogs are susceptible to the same problems as social software sites (as well as having to deal with comment spamming scum). The more popular the blog, the bigger the problem. Just ask Heather or Jason.</p>
<p>Most blogs allow comments. There's no doubt about it; having comments enabled is likely to increase the popularity of your blog.</p>
<p>But that, in and of itself, is not a good justification. It assumes that popularity is desirable. The truth is that, when it comes to personal publishing, it's not the amount of people who visit that count, it's who those people are why they're visiting that's important.</p>
<p>Comments are a shortcut to a Pyrrhic victory of popularity at the cost of having your pages cluttered with pointless remarks (by pointless, I don't just mean the negative stuff: "me too!" and "great post!" achieve as little as "you suck!"). If popularity is your aim, it's better in the long run to claw your way towards that goal on the strength of your writing or design skills.</p>
<p>But comments can add value. They are particularly useful on sites that have a narrow, focused scope. The focused nature of the subject matter ensures that visitors share a common interest – otherwise, they wouldn't be there.<br>
The more general a site's focus, the less chance there is of it receiving quality comments. A site that covers everything from politics (Republican vs. Democrat) to computing (Mac vs. PC) is going to be flame-war central.</p>
</blockquote>
<p>Jeremy's observation about the effect of topic on comments is interesting. Again, something I wouldn't have anticipated based on my experience with a very focused blog.</p>
<p>However, to deny public conversation by disabling comments right out of the gate – based on the <i>presumption</i> that the comments will be of low quality – is, again, awfully elitist. Have some respect for your audience. Enable comments and experiment before making the assumption that 90 percent of the comments will be crap! Personally, I've found that <a href="http://jerryslezak.net/scissors/?p=133">the comments can be the best, most informative part of a blog</a>. Anyone who has <b>visited Amazon and skipped directly to the user reviews</b> will know exactly what I'm talking about.</p>
<p>Some people refuse to enable comments because <b>they don't want to deal with the spam problem</b>. I can appreciate this concern, but a simple <a href="http://en.wikipedia.org/wiki/Captcha">CAPTCHA</a> is extremely effective at blocking machine spam. And a simple daily browse of your comments will catch those rare manually entered spam comments. Why in the world would you enable comments if you're not planning to read them at some point?</p>
<p>I am sympathetic to issues of scale. Comments don't scale worth a damn. If you have thousands of readers and hundreds of comments for every post, you should disable comments and switch to forums, probably moderated forums at that. But the number of bloggers who have that level of readership is so small as to be practically nil. And when you get there, believe me, you'll know. Until then, you should enable comments.</p>
<p>The more I think about this, the more I keep coming back to my original position: <b>a blog without comments enabled is not a blog</b>. I'm not sure what it is, exactly, but it definitely isn't a blog.</p>
<p>Comments?</p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2006-04-25T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/a-blog-without-comments-is-not-a-blog/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ Of Spaces, Underscores and Dashes ]]></title>
<link>https://blog.codinghorror.com/of-spaces-underscores-and-dashes/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>I try to avoid using spaces in filenames and URLs. They're great for human readability, but they're remarkably inconvenient in computer resource locators:</p>
<ol>
<li>
<p>A filename with spaces has to be surrounded by quotes when referenced at the command line:</p>
<pre><code> XCOPY "c:\test files\reference data.doc" d:
 XCOPY c:\test-files\reference-data.doc d:
</code></pre>
</li>
<li>
<p>Any spaces in URLs are converted to the encoded space character by the web browser:</p>
<pre><code> http://domain.com/test%20files/reference%20data.html
 http://domain.com/test-files/reference-data.html
</code></pre>
</li>
</ol>
<p>So it behooves us to <b>use something other than a space in file and folder names</b>. Historically, I've used underscore, but I recently discovered that <b>the correct character to substitute for space is the dash</b>. Why?</p>
<p>The short answer is, <a href="http://weblog.philringnalda.com/2004/04/22/underscores-are-bad-mmkay">that's what Google expects</a>:</p>
<blockquote>
<p>If you use an underscore '_' character, then Google will combine the two words on either side into one word. So <code>bla.com/kw1_kw2.html</code> wouldn't show up by itself for kw1 or kw2. You'd have to search for <code>kw1_kw2</code> as a query term to bring up that page.</p>
</blockquote>
<p>The slightly longer answer is, <a href="http://www.regular-expressions.info/charclass.html">the underscore is traditionally considered a word character by the w regex operator</a>.</p>
<p>Here's <a href="http://www.regexbuddy.com/cgi-bin/affref.pl?aff=jatwood">RegexBuddy</a> <b>matching the w operator against multiple ASCII character sets</b>:</p>
<img alt="image placeholder" >
<p>As you can see, the dash is not matched, but underscore is. <b><code>This_is_a_single_word</code>, but <code>this-is-multiple-words</code></b>.</p>
<p>Like NutraSweet and Splenda, neither is really an <i>acceptable</i> substitute for a space, but we might as well follow the established convention instead of inventing our own. That's how we <a href="http://blogs.msdn.com/larryosterman/archive/2005/06/24/432386.aspx">ended up with the backslash as a path separator</a>.</p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2006-04-26T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/of-spaces-underscores-and-dashes/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ Keeping Up and "Just In Time" Learning ]]></title>
<link>https://blog.codinghorror.com/keeping-up-and-just-in-time-learning/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>Do you ever feel like <strong>you're buried under umpteen zillion backlogged emails, feeds, books, articles, journals, magazines, and printouts?</strong> Do you ever feel that you're hopelessly behind, with so much new stuff created every day that you can never possibly hope to keep up?<br>
Well, you're not alone.</p>
<p>Via <a href="http://secretgeek.net/inadequate.asp">SecretGeek</a>:</p>
<ul>
<li>You do NOT have to refactor all your code.</li>
<li>You do NOT have to keep up with the latest news from microsoft, and know everythnig there is to know about longhorn, whidbey, avalon, XAML, indigo and star wars III.</li>
<li>You do not have to have perfectly de-coupled tiers in your technology independent SOA software.</li>
<li>You do not have to comply to every standard, achieve the perfect balance between maintainability and performance. Usability and familiarity.</li>
<li>You don't have to do "first things first every day"</li>
<li>You DO NOT have to memorize and understand every patten the gang of four have catalogued.</li>
<li>You do NOT have to read every technical blog, print out every technical article and learn every technical thing there is to learn.</li>
<li>You are beautiful just the way you are.</li>
<li>You are brilliant, interesting, wise and fun to be around.</li>
<li>You rock.</li>
</ul>
<p>Via <a href="http://headrush.typepad.com/creating_passionate_users/2006/04/the_myth_of_kee.html">Kathy Sierra</a>:</p>
<blockquote>
<p>I remember when the first public release of Java came out, and it had 200 classes. You could fit the entire class library in the same space as Miss January. But then 1.1 came out and the API more than doubled to 500 classes. It no longer fit on a centerfold – but you could get it on a wall poster. With 200 classes, you really could master the entire API. With 500, it took some effort, but you could at least be familiar with just about everything, given enough time. By Java 1.4, the library had swelled to 2300 classes. And today? It's something like 3500 classes just in the Standard Edition – not including the mobile and enterprise extensions. You could wallpaper an entire room with the class library.</p>
<p>By the year 2000, it had become impossible for even a Sun Java engineer – someone creating the API – to be familiar with everything in the standard library. Yet the rest of us were feeling guilty. Like we were falling behind. Like we weren't hardcore Java programmers.</p>
<p>It's time to let that go. <strong>You're not keeping up. I'm not keeping up. And neither is anyone else. At least not in everything.</strong></p>
</blockquote>
<p>Kathy has a few suggestions to combat  <a href="http://www.google.com/search?hl=en&amp;q=%22information+anxiety%22">Information Anxiety</a>:</p>
<ul>
<li>Find the best aggregators</li>
<li>Get summaries</li>
<li>Cut redundancy</li>
<li>Unsubscribe from as many things as possible</li>
<li>Recognize black holes (gaming, slashdot, etc)</li>
<li>Pick categories for balance; include some from outside your main field</li>
<li>Be more realistic about what you're likely to get to; throw the rest out</li>
<li>In anything you need to learn, find someone who can tell you what is
<ul>
<li>Need to know</li>
<li>Should know</li>
<li>Nice to know</li>
<li>Edge case</li>
<li>Useless</li>
</ul>
</li>
</ul>
<p>I don't worry about keeping up with the Joneses; I focus on the specific problem at hand. <strong>I take a "Just In Time" attitude to learning new technology.</strong> I can't possibly learn everything. But I do try to learn enough to know what the new thing is, and when I might need it. Most of the time, <a href="http://blog.codinghorror.com/kiss-and-yagni/">I don't need it</a>. And when I do, I can learn it <a href="http://www.strategosinc.com/just_in_time.htm">Just In Time</a> to help me solve the current problem I'm working on.</p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2006-04-27T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/keeping-up-and-just-in-time-learning/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ Why Do We Have So Many Screwdrivers? ]]></title>
<link>https://blog.codinghorror.com/why-do-we-have-so-many-screwdrivers/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
Jon Raynor added this comment to my previous post about <a href="http://www.codinghorror.com/blog/archives/000575.html">keeping up</a> with the pace of change in software development:
</p>
<p>
</p>
<blockquote>
The IT field is basically a quagmire. It's better to accept that fact right away or move on to a different field. I guess someday I wish for Utopia where I won't be obsoleted when I get out of bed each and every morning.
<p>
The industry needs to stop running around like a chicken with its head cut off trying to find the next big thing. <b>The tools constantly change, but yet they do the same thing, create code to run on machines.</b> First we get a screwdriver and learn how to use it. Then out comes the newdriver, different than the screwdriver, but does the same thing. Then out comes the phewdriver which is totally different than the screw and new driver but performs the same function of both previous tools.
</p>
</blockquote>
<p>
It's an interesting observation. I'm far from a handyman, but even I own many different screwdrivers: different sizes, different tips, different lengths. They're all performing the same job-- screwing*-- but each one is uniquely useful in the right scenario. I'd hate to throw out all the screwdrivers I own and opt for a one-size-fits-all approach. Sure, I may choose the standard screwdriver 90 percent of the time, but what about that other ten percent?
</p>
<p>
<img alt="image placeholder" >
</p>
<p>
So a case can be made for having multiple languages and multiple tools, redundancies and all.
</p>
<p>
However, software developers are awfully eager to throw out existing tools for new ones. Unfortunately, these decisions are often based on myth and wishful thinking, and the decisions are typically made in favor of whatever the hot new thing of the moment is. Here are two mistakes that I see a lot:
</p>
<p>
<b>1. Let's buy this whiz-bang power screwdriver that will double our productivity.</b>
</p>
<p>
A <a href="http://www-inst.eecs.berkeley.edu/~maratb/readings/NoSilverBullet.html">silver bullet</a> brand screwdriver, if you will. Just replace the word "Ada" with "Ruby", below:
</p>
<p>
</p>
<blockquote>
One of the most touted recent developments is Ada, a general-purpose high-level language of the 1980's. Ada not only reflects evolutionary improvements in language concepts, but indeed embodies features to encourage modern design and modularization. Perhaps the Ada philosophy is more of an advance than the Ada language, for it is the philosophy of modularization, of abstract data types, of hierarchical structuring. Ada is over-rich, a natural result of the process by which requirements were laid on its design. That is not fatal, for subsetted working vocabularies can solve the learning problem, and hardware advances will give us the cheap MIPS to pay for the compiling costs. Advancing the structuring of software systems is indeed a very good use for the increased MIPS our dollars will buy. Operating systems, loudly decried in the 1960's for their memory and cycle costs, have proved to be an excellent form in which to use some of the MIPS and cheap memory bytes of the past hardware surge.
<p>
Nevertheless, Ada will not prove to be the silver bullet that slays the software productivity monster. <b>It is, after all, just another high-level language, and the biggest payoff from such languages came from the first transition -- the transition up from the accidental complexities of the machine into the more abstract statement of step-by-step solutions. Once those accidents have been removed, the remaining ones will be smaller, and the payoff from their removal will surely be less.</b>
</p>
<p>
I predict that a decade from now, when the effectiveness of Ada is assessed, it will be seen to have made a substantial difference, but not because of any particular language feature, nor indeed because of all of them combined. Neither will the new Ada environments prove to be the cause of the improvements. Ada's greatest contribution will be that switching to it occasioned training programmers in modern software-design techniques.
</p>
</blockquote>
<p>
<b>2. This screwdriver is for amateurs and hacks. We should buy a newer, more professional screwdriver.</b>
</p>
<p>
<a href="http://www.megginson.com/Background/">David Megginson</a> notes <a href="http://www.megginson.com/blogs/quoderat/archives/2006/03/06/programming-languages-of-distinction/">the self-perpetuating cycle of successful programming languages</a>:
</p>
<p>
</p>
<blockquote>
<ul>
<li>Elite (guru) developers notice too many riff-raff using their current programming language, and start looking for something that will distinguish them better from their mediocre colleagues.
</li>
<li>Elite developers take their shopping list of current annoyances and look for a new, little-known language that apparently has fewer of them.
</li>
<li>Elite developers start to drive the development of the new language, contributing code, writing libraries, etc., then evangelize the new language.
</li>
<li>Sub-elite (senior) developers follow the elite developers to the new language, creating a market for books, training, etc., and also accelerating the development and testing of the language.
</li>
<li>Sub-elite developers, who have huge influence (elite developers tend to work in isolation on research projects rather than on production development teams), begin pushing for the new language in the workplace.
</li>
<li>The huge mass of regular developers realize that they have to start buying books and taking courses to learn a new language.
</li>
<li>Elite developers notice too many riff-raff using their current programming language, and start looking for something that will distinguish them better from their mediocre colleagues.
</li>
</ul>
</blockquote>
<p>
It's OK to add a new screwdriver to your toolkit every few years. But make sure you're adding it for the right reasons.
</p>
<p>
* Yes, it's still funny.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2006-04-30T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/why-do-we-have-so-many-screwdrivers/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ Fail Early, Fail Often ]]></title>
<link>https://blog.codinghorror.com/fail-early-fail-often/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>Scott Hanselman thinks <a href="http://www.hanselman.com/blog/ScottHanselman11SuccessfulLargeProjects3OpenSourceApplications1CollossalFailure.aspx">signing your name with a bunch of certifications</a> is <a href="http://wordnet.princeton.edu/perl/webwn?s=gauche">gauche</a>:</p>
<blockquote>
<p>If it's silly to suggest putting my SATs on my resume, why is …</p>
<p>Scott Hanselman, MCSD, MCT, MCP, MC*.*</p>
<p>… reasonable? Having a cert means you have a capacity to hold lots of technical stuff in your head. Full stop. I propose we sign our names like this:</p>
<p>Scott Hanselman, 11 Successful Large Projects, 3 Open Source Applications, 1 Colossal Failure</p>
<p>Wouldn't that be nice?</p>
</blockquote>
<p>I agree. Your credentials should be the sum of the projects you've worked on. But I think Scott has this backwards: <a href="https://blog.codinghorror.com/success-through-failure/">you should emphasize the number of <i>failed</i> projects you've worked on</a>.</p>
<p>How do we define "success", anyway? What were the goals? Did the project make money? Did users like the software? Is the software still in use? It's a thorny problem. I used to work in an environment where <i>every project was judged a success</i>. Nobody wanted to own up to the limitations, compromises, and problems in the software they ended up shipping. And the managers in charge of the projects desperately wanted to be perceived as successful. So what we got was the special olympics of software: every project was a winner. The users, on the other hand, were not so lucky.</p>
<p>Success is relative and ephemeral. But failure is a near-constant. If you really want to know if someone is competent at their profession, <i>ask them about their failures</i>. Last year I cited an article on <a href="http://gladwell.com/the-physical-genius/">predicting the success or failure of surgeons</a>:</p>
<blockquote>
<p>Charles Bosk, a sociologist at the University of Pennsylvania, once conducted a set of interviews with young doctors who had either resigned or been fired from neurosurgery-training programs, in an effort to figure out what separated the unsuccessful surgeons from their successful counterparts.</p>
<p>He concluded that, far more than technical skills or intelligence, what was necessary for success was the sort of attitude that Quest has – a practical-minded obsession with the possibility and the consequences of failure.</p>
<p>"When I interviewed the surgeons who were fired, I used to leave the interview shaking," Bosk said. "I would hear these horrible stories about what they did wrong, but the thing was that they didn't know that what they did was wrong. In my interviewing, I began to develop what I thought was an indicator of whether someone was going to be a good surgeon or not. It was a couple of simple questions: Have you ever made a mistake? And, if so, what was your worst mistake? The people who said, 'Gee, I haven't really had one,' or, 'I've had a couple of bad outcomes but they were due to things outside my control' – invariably those were the worst candidates. <b>And the residents who said, 'I make mistakes all the time. There was this horrible thing that happened just yesterday and here's what it was.' They were the best. They had the ability to rethink everything that they'd done and imagine how they might have done it differently."</b></p>
</blockquote>
<p>The best software developers embrace failure – in fact, they're <i>obsessed with failure</i>. If you <a href="https://blog.codinghorror.com/defeating-optimism/">forget how easy it is to make critical mistakes</a>, you're likely to fail. And that should concern you.</p>
<p>Michael Hunter takes this concept one step beyond mere vigilance. He encourages us to <a href="https://blogs.msdn.microsoft.com/micahel/2005/08/17/fail-fast/">fail early and often</a>:</p>
<blockquote>
<p>If you're lucky, however, your family encourages you to fail early and often. If you're really lucky your teachers do as well. It takes a lot of courage to fight against this, but the rewards are great. <b>Learning doesn't happen from failure itself but rather from analyzing the failure, making a change, and then trying again. Over time this gives you a deep understanding of the problem domain</b> (be that programming or combining colors or whatever) - you are learning. Exercising your brain is good in its own right ("That which is not exercised atrophies", my trainer likes to say), plus this knowledge improves your chances at functioning successfully in new situations.</p>
</blockquote>
<p>I say the more failed projects in your portfolio, the better. If you're not failing some of the time, <i>you're not trying hard enough</i>. You need to overreach to find your limits and grow. But do make sure you <b>fail in spectacular new ways on each subsequent project</b>.</p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2006-05-01T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/fail-early-fail-often/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ Following Instructions for Dummies ]]></title>
<link>https://blog.codinghorror.com/following-instructions-for-dummies/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>James Bach responded to my recent post, <a href="http://www.codinghorror.com/blog/archives/000568.html">Are You Following the Instructions on the Paint Can?</a>, with <a href="http://www.satisfice.com/blog/archives/47">Studying Jeff Atwood's Paint Can</a>.</p>
<p>Being under Bach's intensive analytical microscope feels a lot like <a href="http://www.imdb.com/character/ch0001399/quotes">an interview</a> with <a href="http://en.wikipedia.org/wiki/Hannibal_Lecter">Hannibal Lecter</a>. It's flattering, but it's also a little scary. You learn a tremendous number of things about yourself – at the risk of your professional dignity, and maybe even your soul.</p>
<p>In a previous entry, I complained about <a href="http://www.codinghorror.com/blog/archives/000538.html">the fact that Bach's blog doesn't allow comments</a>. Some readers took this as a personal attack on James. Nothing could be further from the truth. I've been meaning to write about that topic for months, and James' blog just happened to be the most recent case. <strong>I have tremendous respect for Bach and the way he aggressively questions convention.</strong> Prior to this paint can dialog, I had already based two blog entries on his writing: <a href="http://www.codinghorror.com/blog/archives/000564.html">It's Better Than Nothing</a> and <a href="http://www.codinghorror.com/blog/archives/000557.html">Best Practices and Puffer Fish</a>. If anything, we should form a mutual admiration society.</p>
<p>Now that I've gotten all the disclaimers out of the way, I can respond to the actual content of Mr. Bach's entry. First, I want to give James credit for identifying a key assumption:</p>
<blockquote>"What I find particularly interesting is that none of the mistakes on this checklist have anything to do with my skill as a painter."
<p>I think what Jeff meant to say [here] is that they have nothing to do with what he recognizes as his skill as a painter. <strong>I would recognize these mistakes, assuming for the moment that they are mistakes, as being strongly related to his painting skill. Perhaps since I don't have any painting skill, it's easier for me to see it than for him.</strong> Or maybe he means something different by the idea of skill than I do. (I think skill is an improvable ability to do something) Either way, there's nothing slam dunk obvious about his point. I don't see how it can be just a matter of "read the instructions stupid."</p>
</blockquote>
<p>This is dead on. <em>I used to run a painting business in college</em>. So my idea of "painting skill" – for the record, it's how cleanly and evenly you physically apply a coat of paint to the surface – is quite different than James'. If you read any of <a href="http://www.satisfice.com/blog/">his writing</a>, you'll quickly determine Mr. Bach is <strong>incredibly effective at sussing out all the assumptions you're making that you don't realize you're making</strong>. And questioning assumptions is a tremendously powerful method of investigation, particularly when someone helps you identify the ones that you're blind to.</p>
<p>Beyond that, the general thrust of Bach's reply is that <strong>instructions aren't always helpful</strong>:</p>
<blockquote>Consider all the instructions you encounter and do not read. Consider the software you install without reading the "quickstart" guide. Consider the clickwrap licenses you don't read, or the rental cars you drive without ever consulting the drivers manual in states where you have not studied the local driving laws. Consider the doors marked push that you pull upon. Consider the shampoo bottle that says "wash, rinse, repeat." Well, I have news for the people who make Prell: I don't repeat. Did you hear me? I don't repeat.
<p>I would have to say that most instructions I come across are unimportant and some are harmful. Most instructions I get about software development process, I would say, would be harmful if I believed them and followed them. Most software process instructions I encounter are fairy tales, both in the sense of being made up and in the sense of being cartoonish. Some things that look like instructions, such as "do not try this at home" or "take out the safety card and follow along," are not properly instructions at all, they are really just ritual phrases uttered to dispel the evil spirits of legal liability. Other things that really are instructions are too vague to follow, such as "use common sense" or "be creative" or "follow the instructions."</p>
<p>There are, of course, instructions I could cite that have been helpful to me. I saw a sign over a copy room that said "Do not use three hole paper in this copy machine... unless you want it to jam." and one next to it that said "Do not use the Microwave oven while making copies... unless you want the fuse to blow." I often find instructions useful when putting furniture together; and I find signs at airports generally useful, even though I have occasionally been steered wrong.</p>
<p><strong>Instructions can be useful, or useless, or something in between. Therefore, I propose that we each develop a skill: the skill of knowing when, where, why and how to follow instructions in specific contexts. Also, let's develop the skill of giving instructions.</strong></p>
</blockquote>
<p>Although I absolutely agree that you must be critical of everything you read, James' statement that "instructions can be useful, useless, or something in between" is just as unhelpful as my "for best results, follow the instructions" advice. I implicitly assumed that the person reading the instructions on the paint can was <strong>smart enough to read those instructions as suggestions, reminders, and guidelines – not as a recipe to be slavishly followed to the letter.</strong></p>
<p><img alt="image placeholder" >
<p>I agree with Bach's assertion that <em>a paint can is neither a supervisor, nor a mentor, nor a judge of quality.</em> A static list of instructions is no substitute for hands-on help with your painting project from someone who has extensive painting experience.</p>
<p>But you rarely have the luxury of working with experts. <strong>Most of the time, you're on your own, and the bulleted list is all you have</strong>. Consider this <a href="http://blogs.msdn.com/johnmont/archive/2004/11/29/272007.aspx">list of painting tips from John Montgomery</a>. We had a problem a few days ago while painting. Our latex paint was drying exceptionally fast on the second coat and causing problems with the smoothness of the finish. Because I had read John's painting tips, I remembered this bullet point from his list:</p>
<blockquote>Mix your paint and add Flotrol. If you're more than 24 hours from the paint store, open your paint and mix it. You should also add Flotrol (latex) or Penetrol (oil) to it – these paint conditioners don't thin the paint or change its color, but they do affect how smoothly it goes on and limit brush and roller stroke evidence.</blockquote>
<p>I went to the store, bought some Flotrol, mixed it in, and our problem was solved.</p>
<p>It's doubtful I would have been able to fix this problem if I hadn't followed at least some of the instructions on John's blog. Although I agree with James Bach's central point – you should question everything you read – I sort of assumed everyone does this already. Maybe I assume too much. <strong>But sometimes a bulleted list of instructions sure does come in handy</strong>.</p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2006-05-02T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/following-instructions-for-dummies/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ Design Matters -- but Content is King ]]></title>
<link>https://blog.codinghorror.com/design-matters-but-content-is-king/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
In <a href="http://www.codinghorror.com/blog/archives/000152.html">Never design what you can steal</a>, I praised <a href="http://www.designbyfire.com/000094.html">this amusing guerilla redesign</a> of <a href="http://www.useit.com/">Jakob Neilsen's useit.com</a>-- which is widely derided by the design community for its radically bare-bones layout.
</p>
<p>
Well, the <a href="http://designeye.org/">design guerillas</a> are at it again. This time, they've <a href="http://www.thebignoob.com/Blog/367/craigslist--design-eye-for-the-list-guy">set their design eye on Craigslist</a>:
</p>
<p>
</p>
<table>
<tr>
<td>Original
</td>
<td>Redesign
</td>
</tr>
<tr>
<td valign="top">
<a href="http://austin.craigslist.com/"><img alt="image placeholder" >
</td>
<td valign="top">
<a href="http://craigslist.thebignoob.com/"><img alt="image placeholder" >
</td>
</tr>
<tr>
<td>Original
</td>
<td>Redesign
</td>
</tr>
<tr>
<td valign="top">
<a href="http://austin.craigslist.org/apa/"><img alt="image placeholder" >
</td>
<td valign="top">
<a href="http://craigslist.thebignoob.com/listings.html"><img alt="image placeholder" >
</td>
</tr>
</table>
<p>
I like the redesign. It feels more usable, better organized, and less cluttered. Heck, it even uses <a href="http://weblogs.asp.net/jgalloway/archive/2006/04/13/442763.aspx">sparklines</a>. But I can't get over <b>the nagging feeling that redesigning craigslist is a waste of time</b>. Joel Spolsky <a href="http://www.joelonsoftware.com/articles/NotJustUsability.html">elaborates</a>:
</p>
<p>
</p>
<blockquote>
But there's a scary element of truth to [Napster's hideous user interface]  --  scary to UI professionals, at least: <b>an application that does something really great that people really want to do can be pathetically unusable, and it will still be a hit</b>. And an application can be the easiest thing in the world to use, but if it doesn't do anything anybody wants, it will flop. UI consultants are constantly on the defensive, working up improbable ROI formulas about the return on investment clients will get from their $75,000 usability project, precisely because usability is perceived as "optional," and the scary thing is, in a lot of cases, it is. In a lot of cases. The CNN website has nothing to be gained from a usability consultant. I'll go out on a limb and say that there is not a single content-based website online that would gain even one dollar in revenue by improving usability, because content-based websites (by which I mean, websites that are not also applications) are already so damn usable.
</blockquote>
<p>
Craigslist is the very definition of a content-based website. The content is such a strong attraction that you could probably change the stylesheet to use <a href="http://hubel.sfasu.edu/research/survreslts.html">green text on a red background</a> and usage would still continue to climb. The redesign is clearly a small improvement, but it's just a statistical rounding error next to the value of the content.
</p>
<p>
And that's why, sometimes, <a href="http://9rules.com/whitespace/myspace_is_ghetto_a_design_choice.php">'ghetto' is a valid design choice:</a>
</p>
<blockquote>
[MySpace] empowers people to get their message out and make connections. That's the only way I can put it. Same reason why Xanga, FaceBook and LiveJournal are crazy popular. Get a community together where people can communicate easily and you have yourself a winner. Ask Amazon.
<p>
<b>Besides all of that, [the MySpace] site sucks and I never use it, but I know that doesn't matter much when I can enter a club and the first question out of a woman's mouth is "Are you on MySpace?"</b>*
</p>
<p>
Happens more times then you would think...
</p>
</blockquote>
<p>
Someone we know at a venture capital firm once said he'll only fund for two reasons: <b>if it gets you laid, or it gets you paid</b>. Design is important, but content is king. Make sure you set your priorities appropriately.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2006-05-03T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/design-matters-but-content-is-king/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ Virtualization and Ring Negative One ]]></title>
<link>https://blog.codinghorror.com/virtualization-and-ring-negative-one/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
This <a href="http://www.devx.com/amd/Article/30186">article on AMD's upcoming CPU support for hardware virtualization</a> has the best description of virtualization I've read to date:
</p>
<p>
</p>
<blockquote>
In a modern-day virtualization system, a thin layer of software, called the virtual machine manager or hypervisor (both terms are common) runs on the processor. The VMM creates a number of virtual machines, into which it loads a standard, unmodified operating system, such as Linux, Solaris, or Windows.
<p>
Each virtual machine thinks it's running on the bare metal, and has the computer entirely to itself. However, the VMM is constantly monitoring the execution of the virtual machines, interceding to redirect memory, storage and I/O requests to the specific allocated resources (think of paging, as an example), and emulating hardware interrupts that might let the software running within one virtual machine affect what's happening in another virtual machine, or even compromise the stability of the VMM itself. This software emulation includes, by the way, rewriting instructions, substituting instructions, changing calling parameters  --  there's a lot of stuff going on behind the scenes at the virtual machine manager level.
</p>
</blockquote>
<p>
Evidently <b>the x86 architecture is not well suited to virtualization</b> because it doesn't meet something called the <a href="http://en.wikipedia.org/wiki/Popek_and_Goldberg_virtualization_requirements">Popek and Goldeberg virtualization requirements</a>. There are a number of <a href="http://en.wikipedia.org/wiki/Popek_and_Goldberg_virtualization_requirements#IA-32__.28x86.29">problematic x86 instructions</a> that require software interception and translation, eg, emulation:
</p>
<p>
</p>
<blockquote>
All modern operating systems expect that their kernel and driver code is running in [Ring 0] privileged mode, which of course is fine in a non-virtualized PC. <b>However, in a virtual machine, you don't want that kernel and driver code, or the interrupt handlers, to really have full control over the hardware</b>; you need the VMM to be able to be able to transparently manage the system. But because both the VMM itself, and the virtualized guest operating system kernel and drivers are running in Ring 0 --  in other words, they're peers --  the VMM has to do a lot of work to maintain control of the guest operating system. Thus, the emulation, and the performance hit that it represents.
</blockquote>
<p>
How can we avoid this emulation penalty with hardware? <b>Enter the dramatic, mysterious Ring Negative One</b>:
</p>
<p>
</p>
<blockquote>
That's where [hardware virtualization support] comes in. It comprises a set of instructions and architectural constructs that solve several of the thorniest problems in VMM software emulation of things like IO calls or interrupt handling. <b>In effect, they create a superprivileged mode (sometimes referred to as "Ring -1"), which can only be used by the VMM.</b> Because virtual machines and guest operating systems and applications continue to use traditional privileged and user modes, the VMM now has unique abilities to control the execution of virtual machine code running in Ring 0 -- without software emulation.
</blockquote>
<p>
Intel is already shipping a number of CPUs that <a href="http://en.wikipedia.org/wiki/X86_virtualization#Hardware_support_in_x86_processors">support hardware virtualization</a>. Future versions may even allow you to <b>hot-swap CPUs and memory</b>:
</p>
<blockquote>
Intel is working on a version of "Vanderpool" code named "Silvervale" for Xeon and Itanium server platforms. "Silvervale" differs from "Vanderpool" in terms of mission critical requirements such as hot-plug options as well as ability to change memory modules or even microprocessors on the fly, without shutting down the server.
</blockquote>
<p>
AMD will follow suit with CPUs that have virtualization support later this year.
</p>
<p>
I firmly believe that, in the not too distant future, <a href="http://www.codinghorror.com/blog/archives/000491.html">we'll always be running in a virtual machine</a>. Hardware support for faster x86 virtualization is yet another important step in that direction.
</p>
<p>
Aside: I was going to title this post "Ring -1", but when I searched for that term in Google, I belatedly realized I was being stymied by something I just wrote about: <a href="http://www.codinghorror.com/blog/archives/000574.html">dashes are treated as word seperators</a>. As far as I can tell, it's impossible to search for the phrase "Ring -1" in Google.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2006-05-04T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/virtualization-and-ring-negative-one/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ A Setup Conundrum ]]></title>
<link>https://blog.codinghorror.com/a-setup-conundrum/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
A colleague forwarded this perplexing dialog to me:
</p>
<p>
<img alt="image placeholder" >
</p>
<p>
Quite the catch-22. I guess the only thing to do is <a href="http://www.imdb.com/title/tt0086567/quotes">try something else</a>:
</p>
<p>
</p>
<blockquote><i>
A strange game. The only winning move is not to play. How about a nice game of chess?
</i></blockquote>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2006-05-05T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/a-setup-conundrum/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ Spam via SMTP Non-Delivery Reports ]]></title>
<link>https://blog.codinghorror.com/spam-via-smtp-non-delivery-reports/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
I have modest email needs, so I use the default SMTP and POP3 services in Windows Server 2003. Although I have <a href="http://support.microsoft.com/default.aspx?scid=kb;en-us;324281">email relay disabled</a>, <b>spammers are still managing to send spam through my SMTP service</b> -- via non-delivery reports!
</p>
<p>
In other words, spammers are <i>intentionally sending email messages to nonexistent email addresses on my domain</i>. Here's a representative <a href="http://www.codinghorror.com/blog/archives/000063.html">sniffer trace</a> from earlier today:
</p>
<p>
</p>
<pre>
MAIL FROM:<b>&lt;lolando@glocos.com&gt;</b>
250 2.1.0 OK
RCPT TO:<b>&lt;uucp@codinghorror.com&gt;</b>
250 2.1.5 OK
354 Start mail input
DATA
(spam email body elided)
250 2.6.0  Queued mail for delivery
<p></p>
MAIL FROM:<b>&lt;meskes@getinthepicture.com&gt;</b>
250 2.1.0 OK
RCPT TO:<b>&lt;support@codinghorror.com&gt;</b>
250 2.1.5 OK
DATA
(spam email body elided)
250 2.6.0  Queued mail for delivery
</pre>
<p>
This repeats dozens of times, with different from and to email address. <b>The person in the "from" address will get a non-delivery report from my server that includes the original spam message as an attachment</b>.
</p>
<p>
This is also known as a "Reverse NDR attack", because the non-delivery report goes to the recipient (eg, the victim) instead of the sender.
</p>
<p>
I've pored over the SMTP settings in Windows Server 2003 and I can't figure out a way to fix this. I did find this cool <a href="http://support.microsoft.com/kb/842851">STMP tar pit feature</a> which sounds appropriate -- but unfortunately, will have no effect in my case. As you can see from the above sniffer trace, the basic SMTP service is not smart enough to perfom "recipient filtering"-- to reject email for users that don't exist at the time of submission. The validation of the address occurs <i>after</i> the email delivery process begins, which is too late.
</p>
<p>
I thought about suppressing non-delivery reports entirely, but this breaks the email protocol:
</p>
<p>
</p>
<blockquote><i>
Some of you might think it would be better to simply turn off recipient filtering, rely on your 3rd party antispam product, and suppress NDRs (as spammers typically use spoofed domains anyway). This is possible but unfortunately doing so breaks <a href="http://www.faqs.org/rfcs/rfc2821.html">RFC 2821</a>, which states that a NDR must be returned if an e-mail message for an invalid recipient is accepted. In addition it also means normal users that perhaps make a typo in an e-mail address will never receive an NDR informing them of the issue.
</i></blockquote>
<p>
What I really need is some way to <b>make the default SMTP service in Windows Server 2003 reject emails for invalid recipients prior to accepting the message</b>. That, along with the built-in tarpit support, should break spammers.
</p>
<p>
I hate to buy a commercial mail server to replace the simple STMP and POP3 services provided with Windows Server 2003. But unless I can stem the tide of SMTP non-delivery report spam, I guess I'll have to.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2006-05-07T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/spam-via-smtp-non-delivery-reports/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ Invisible Formatting Tags are Evil ]]></title>
<link>https://blog.codinghorror.com/invisible-formatting-tags-are-evil/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
So I'm merrily editing my document in Word, or the WYSWYG editor of my choice, and <b>I accidentally delete one of the invisible formatting tags embedded in the document</b>. Carnage ensues. Here's an example from Outlook:
</p>
<p>
<img alt="image placeholder" >
</p>
<p>
It's enough to drive me absolutely bonkers. And it happens all the time. Not to put too fine a point on it, but <b>the problem with invisible formatting tags is that they're, well, <i>invisible</i>.</b>
</p>
<p>
I'm not against WYSIWYG editors, but at least <b>give us a way to optionally reveal the formatting tags in the document</b> so I can tell what the heck I'm deleting. You know, <i>before</i> I destroy the formatting in the document. I can't even begin to tell you how many times I've been utterly dumbfounded by the effects of an innocuous edit in Microsoft Word-- just because I happened to overwrite the wrong invisible formatting tag. Thank goodness for my old friend, CTRL+Z, but editing a Word document is a nerve wracking experience not unlike walking through a field of formatting land mines.
</p>
<p>
I've grown to dislike the rather severe limitations of browser-based WYSIWYG editors like <a href="http://freetextbox.com/demos/">FreeTextBox</a>, too, but at least they allow you to make the formatting tags visible by switching to HTML view.
</p>
<p>
I like my markup clean, simple, and most of all-- visible. Maybe I'm too old school for my own good, but I now prefer to edit my blog posts in a plain textbox, or possibly in the Visual Studio HTML editor for colorization and intellisense support.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2006-05-08T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/invisible-formatting-tags-are-evil/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ The Ten Commandments of Egoless Programming ]]></title>
<link>https://blog.codinghorror.com/the-ten-commandments-of-egoless-programming/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p><img alt="image placeholder" >
<ol>
<li>
<b>Understand and accept that you will make mistakes.</b> The point is to find them early, before they make it into production. Fortunately, except for the few of us developing rocket guidance software at JPL, mistakes are rarely fatal in our industry, so we can, and should, learn, laugh, and move on.<br><br>
</li>
<li>
<b>You are not your code.</b> Remember that the entire point of a review is to find problems, and problems will be found. Don't take it personally when one is uncovered.<br><br>
</li>
<li>
<b>No matter how much "karate" you know, someone else will always know more.</b> Such an individual can teach you some new moves if you ask. Seek and accept input from others, <em>especially</em> when you think it's not needed.<br><br>
</li>
<li>
<b>Don't rewrite code without consultation.</b> There's a fine line between "fixing code" and "rewriting code." Know the difference, and pursue stylistic changes within the framework of a code review, not as a lone enforcer.<br><br>
</li>
<li>
<b>Treat people who know less than you with respect, deference, and patience.</b> Nontechnical people who deal with developers on a regular basis almost universally hold the opinion that we are prima donnas at best and crybabies at worst. Don't reinforce this stereotype with anger and impatience.<br><br>
</li>
<li>
<b>The only constant in the world is change.</b> Be open to it and accept it with a smile. Look at each change to your requirements, platform, or tool as a new challenge, not as some serious inconvenience to be fought.<br><br>
</li>
<li>
<b>The only true authority stems from knowledge, not from position.</b> Knowledge engenders authority, and authority engenders respect – so if you want respect in an egoless environment, cultivate knowledge.<br><br>
</li>
<li>
<b>Fight for what you believe, but gracefully accept defeat.</b> Understand that sometimes your ideas will be overruled. Even if you do turn out to be right, don't take revenge or say, "I told you so" more than a few times at most, and don't make your dearly departed idea a martyr or rallying cry.<br><br>
</li>
<li>
<b>Don't be "the guy in the room."</b> Don't be the guy coding in the dark office emerging only to buy cola. The guy in the room is out of touch, out of sight, and out of control and has no place in an open, collaborative environment.<br><br>
</li>
<li>
<b>Critique code instead of people – be kind to the coder, not to the code.</b> As much as possible, make all of your comments positive and oriented to improving the code. Relate comments to local standards, program specs, increased performance, etc.<br>
</li>
</ol>
<p>The human principles of software are truly timeless; <a href="http://www.amazon.com/exec/obidos/ASIN/0932633420/codihorr-20">The Psychology of Computer Programming</a> was written way back in 1971, a year after I was born!</p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2006-05-09T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/the-ten-commandments-of-egoless-programming/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ Power, Influence, and Copywriting ]]></title>
<link>https://blog.codinghorror.com/power-influence-and-copywriting/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
I often struggle when writing new blog entries. What should I write about? What's the first sentence? What should the <a href="http://www.smileycat.com/miaow/archives/typography-for-headlines.html">title</a> be? When do I end, and what do I end with?
</p>
<p>
Copyblogger's <a href="http://www.copyblogger.com/copywriting-101/">Copywriting 101</a> has some excellent writing advice masquerading as marketing advice:
</p>
<p>
</p>
<blockquote>
Copywriting skills are an essential element to the new conversational style of marketing. Whether you're looking to sell something or to build traffic by earning links from others, you'll need to tell compelling stories that grab attention and connect with people.
</blockquote>
<p>
But there's an immediate problem: <b>what the hell is "copy"?</b> Even the word is boring: <i>copy</i>. Who wants to read that?
</p>
<p>
Good writing is good writing. But good copywriting is <i>marketing</i>.
</p>
<p>
The second you start thinking in terms of copywriting instead of writing, you've already lost. Forget marketing. Drop the copy. Stick with plain old writing, the kind we've been practicing for the last few thousand years.
</p>
<p>
Still, <b>copyblogger's writing advice applies to anything you want people to actually read.</b> What are you selling? The topic you're writing about. Net profit? Zero. But you <i>have</i> to sell your topic to <a href="http://www.joelonsoftware.com/articles/CollegeAdvice.html">communicate effectively in the din of noise that is the internet</a>:
</p>
<p>
</p>
<blockquote>
The difference between a tolerable programmer and a great programmer is not how many programming languages they know, and it's not whether they prefer Python or Java. <b>It's whether they can communicate their ideas.</b> By persuading other people, they get leverage. By writing clear comments and technical specs, they let other programmers understand their code, which means other programmers can use and work with their code instead of rewriting it. Absent this, their code is worthless. By writing clear technical documentation for end users, they allow people to figure out what their code is supposed to do, which is the only way those users can see the value in their code. There's a lot of wonderful, useful code buried on sourceforge somewhere that nobody uses because it was created by programmers who don't write very well (or don't write at all), and so nobody knows what they've done and their brilliant code languishes.
<p>
I won't hire a programmer unless they can write, and write well, in English. If you can write, wherever you get hired, you'll soon find that you're getting asked to write the specifications and that means you're already leveraging your influence and getting noticed by management.
</p>
</blockquote>
<p>
I posted the same Spolsky quote in a different context on <a href="http://blogs.vertigosoftware.com/jatwood/archive/2006/04/25/2638.aspx">another blog</a>, and <a href="http://www.enginefour.com/blogs/shawn/">Shawn Oster</a> made an interesting comment:
</p>
<p>
</p>
<blockquote>
Of course, all of this assumes that you are actually after, as Mr. Spolsky puts it, "power and influence" as a programmer. Me? I just want to do what I love which is to architect and write code.
</blockquote>
<p>
Power and influence aren't what we're after. They're a side effect, a necessary evil, a form of <i>currency</i> that makes it easier for us to get things done. It's not <a href="http://en.wikipedia.org/wiki/Machiavelli">machiavellian</a>-- although it can seem that way. <b>Power and influence give you the freedom to architect and write code as you see fit.</b>
</p>
<p>
Power and influence achieved solely on the basis of solid communication skills is a virtue, not a vice. It's the ultimate form of citizen leadership.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2006-05-10T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/power-influence-and-copywriting/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ Excess Blog Flair ]]></title>
<link>https://blog.codinghorror.com/excess-blog-flair/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
I recently happened upon <a href="http://www.tomrafteryit.net/finally-you-can-subscribe-to-an-irish-job-search/">Tom Raftery's blog</a>. I'm sure Tom's a great guy, but what's up with all the <a href="http://web-graphics.com/mtarchive/001736.php">visual noise on his blog</a>?
</p>
<p>
<img alt="image placeholder" >
</p>
<p>
I count 24 pieces of <a href="http://www.imsdb.com/scripts/Office-Space.html">flair</a> in the bookmark section alone.
</p>
<p>
</p>
<blockquote>
<i>
<b>STAN
</b>I need to talk about your flair.
</i><p>
<b>JOANNA
</b>Really? I have 15 buttons on. I, uh, (shows him)
</p>
<p>
<b>STAN
</b>Well, ok, 15 is minimum, ok?
</p>
<p>
<b>JOANNA
</b>Ok.
</p>
<p>
<b>STAN
</b>Now, it's up to you whether or not you want to just do the bare
minimum. Well, like Brian, for example, has 37 pieces of flair. And a
terrific smile.
</p>
<p>
<b>JOANNA
</b>Ok. Ok, you want me to wear more?
</p>
<p>
<b>STAN
</b>Look. Joanna.
</p>
<p>
<b>JOANNA
</b>Yeah.
</p>
<p>
<b>STAN
</b>People can get a cheeseburger anywhere, ok? They come to Chotchkie's
for the atmosphere and the attitude. That's what the flair's about.
It's about fun.
</p>
</blockquote>
<p>
I only recognized a few of these bookmark icons. For reference, here's the complete list of sites represented in that set of 16x16 <a href="http://www.google.com/url?sa=t&amp;ct=res&amp;cd=1&amp;url=http%3A%2F%2Fwww.codinghorror.com%2Fblog%2Farchives%2F000523.html&amp;ei=ENljRMunAbiEYfKcka4H&amp;sig2=MoyAnLCpHPh8HB503SmazA">icon noise</a>:
</p>
<p>
</p>
<ul>
<li>blinkbits
</li>
<li>blinklist
</li>
<li>blogmarks
</li>
<li>connotea
</li>
<li>del.icio.us
</li>
<li>de.lirio.us
</li>
<li>digg
</li>
<li>fark
</li>
<li>feedmelinks
</li>
<li>furl
</li>
<li>linkagogo
</li>
<li>ma.gnolia.com
</li>
<li>newsvine
</li>
<li>netvouz
</li>
<li>rawsugar
</li>
<li>reddit
</li>
<li>scuttle
</li>
<li>shadows
</li>
<li>simpy
</li>
<li>smarking
</li>
<li>spurl
</li>
<li>tailrank
</li>
<li>wists
</li>
<li>yahoo
</li>
</ul>
<p>
The users of the above social bookmarking sites surely know how to bookmark a site without these "helpful" icons. Everyone else is befuddled by 24 meaningless icons.
</p>
<p>
And if you were thinking of subscribing to Tom's feed, he has you covered there too:
</p>
<p>
<img alt="image placeholder" >
</p>
<p>
Why do people want their blogs to look like NASCAR vehicles?
</p>
<p>
<img alt="image placeholder" >
</p>
<p>
<b>Blogs work because they're simple. Adding a bunch of flair just makes them harder to navigate and more difficult to read.</b>
</p>
<p>
Take <a href="http://underscorebleach.net/jotsheet/">Tom Sherman's blog</a>, for example. Great content. But navigating his blog is painful:
</p>
<ol>
<li>I have to click "continue reading" to see the rest of the entry. Why? Are we afraid the main page is going to grow too long and break my scroll bar?
</li>
<li>The "websites I've linked to" and "websites I've cited" sections at the bottom aren't particularly helpful. And they obscure the links to browse more entries, which is the most natural thing to do at the bottom of a page, assuming the reader gets that far.
</li>
<li>I can only view 15 more entries, then I'm shunted to the monthly archives.
</li>
<li>While viewing the monthly archives, I couldn't figure out how to see more than one page.
</li>
</ol>
<p>
I'd love to browse the rest of Tom's entries, but he's made it awfully difficult for me to do so.
</p>
<p>
And then there's <a href="http://www.scottonwriting.net/sowBlog/">Scott Mitchell's blog</a>. Scott's a fantastic writer with a long history in ASP and ASP.NET. But do we really need to see those daily comment statistics and hourly hit statistics along the right side of the page? I'm sure Scott finds them interesting, but they're just noise to me.
</p>
<p>
Perhaps this is really an argument in favor of RSS-- <b>all of the content with none of the excess flair</b>.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2006-05-11T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/excess-blog-flair/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ Egoless Programming: You Are Not Your Job ]]></title>
<link>https://blog.codinghorror.com/egoless-programming-you-are-not-your-job/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
The concept of egoless programming, as described by <a href="http://www.jrothman.com/">Johanna Rothman</a>:
</p>
<p>
</p>
<blockquote>
Twenty-five years ago, Jerry Weinberg published The <a href="http://www.amazon.com/exec/obidos/ASIN/0932633420/codihorr-20">Psychology of Computer Programming</a>. I discovered the book in 1977, and decided I wanted to work as an egoless software engineer, not as a radio disk jockey.
<p>
Egoless programming occurs when a technical peer group uses frequent and often peer reviews to find defects in software under development. The objective is for everyone to find defects, including the author, not to prove the work product has no defects. People exchange work products to review, with the expectation that as authors, they will produce errors, and as reviewers, they will find errors. Everyone ends up learning from their own mistakes and other people's mistakes. <b>That's why it's called egoless programming.</b> My ego is not tied to my "perfect" or "imperfect" work product. My ego is only tied to my attempts to do the best job I know how, and to learn from my mistakes, not the initial result of my work.
</p>
</blockquote>
<p>
It's important to disconnect your idea of self-worth from your job function.
</p>
<p>
<img alt="image placeholder" >
</p>
<p>
I am reminded of these quotes from <a href="http://www.hundland.com/scripts/Fight-Club_third.htm">the movie Fight Club</a>:
</p>
<p>
</p>
<blockquote>
<b>You are not your job.</b> You are not how much money you have in the bank.  You are not the shoes you wear. You are not the contents of your wallet.</blockquote>
<p>
It's a lot easier to embrace criticism of your work when you don't let your work define who you are.
</p>
<p>
Unfortunately, the world is full of people who don't give a damn about their work. Those of us who love programming enough to become highly skilled at it tend to have the opposite problem-- <b>we care too much</b>:
</p>
<p>
</p>
<blockquote>
In the early years of programming, a program was regarded as the private property of the programmer. One would no more think of reading a colleague's program unbidden than of picking up a love letter and reading it. This is essentially what a program was, a love letter from the programmer to the hardware, full of the intimate details known only to partners in an affair. Consequently, programs became larded with the pet names and verbal shorthand so popular with lovers who live in the blissful abstraction that assumes that theirs is the only  existence in the universe. Such programs are unintelligible to those outside the partnership.
</blockquote>
<p>
That's one of my favorite quotes from <a href="http://www.amazon.com/exec/obidos/ASIN/0735619670/codihorr-20">Code Complete</a>; it's attributed to Michael Marcotty.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2006-05-12T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/egoless-programming-you-are-not-your-job/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ The Long, Dismal History of Software Project Failure ]]></title>
<link>https://blog.codinghorror.com/the-long-dismal-history-of-software-project-failure/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
From the IEEE article <a href="http://www.spectrum.ieee.org/sep05/1685">Why Software Fails</a>:
</p>
<p>
</p>
<blockquote>
Last October, for instance, the giant British food retailer <a href="http://en.wikipedia.org/wiki/J_Sainsbury">J Sainsbury</a> had to write off its US $526 million investment in an automated supply-chain management system. Merchandise was stuck in the company's depots and warehouses and was not getting through to many of its stores. Sainsbury was forced to hire about 3000 additional clerks to stock its shelves manually.
<p>
This is only one of the latest in a long, dismal history of [software] projects gone awry. Most IT experts agree that such failures occur far more often than they should. What's more, the failures are universally unprejudiced: they happen in every country; to large companies and small; in commercial, nonprofit, and governmental organizations; and without regard to status or reputation. The business and societal costs of these failures -- in terms of wasted taxpayer and shareholder dollars as well as investments that can't be made -- are now well into the billions of dollars a year.
</p>
<p>
The problem only gets worse as IT grows ubiquitous. This year, organizations and governments will spend an estimated $1 trillion on IT hardware, software, and services worldwide. Of the IT projects that are initiated, from 5 to 15 percent will be abandoned before or shortly after delivery as hopelessly inadequate. Many others will arrive late and over budget or require massive reworking. Few IT projects, in other words, truly succeed.
</p>
</blockquote>
<p>
From <a href="http://www.amazon.com/exec/obidos/ASIN/1556159005/codihorr-20">Rapid Development</a>:
</p>
<p>
</p>
<blockquote>
If Las Vegas sounds too tame for you, software might just be the right gamble. Software projects include a glut of risks that would give Vegas oddsmakers nightmares. The odds of a large project finishing on time are close to zero. The odds of a large project being canceled are an even-money bet (Jones 1991).
<p>
In 1998, Peat Marwick found that about 35 percent of 600 firms surveyed had at least one runaway software project (Rothfeder 1988). The damage done by runaway software projects makes the Las Vegas prize fights look as tame as having high tea with the queen. Allstate set out in 1982 to automate all of its office operations. They set a 5-year timetable and an $8 million budget. Six years and $15 million later, Allstate set a new deadline and readjusted its sights on a new budget of $100 million. In 1988, Westpac Banking Corporation decided to redefine its information systems. It set out on a 5-year, $85 million project. Three years later, after spending $150 million with little to show for it, Westpac cut its losses, canceled the project, and eliminated 500 development jobs (Glass 1992). Even Vegas prize fights don't get this bloody.
</p>
</blockquote>
<p>
The history of software development is a tremendous success. Just look around you for evidence of that. But that success has a long, dark shadow that we don't talk about very much: it's littered with colossal failures. What's particularly disturbing is that the colossal failures keep recurring year after year. The names and dollar amounts may change, but the story is otherwise the same. Two recent examples are the <a href="http://www.cbc.ca/story/news/national/2004/02/13/gunregistry_rdi040213.html">Canadian gun registry</a> and the <a href="http://www.cnn.com/2005/US/02/03/fbi.computers/">FBI's Virtual Case File system</a>.
</p>
<p>
If you're looking for more examples of colossal software project failure, you don't have to look very far:
</p>
<p>
</p>
<ul>
<li>
<a href="http://spectrum.ieee.org/sep05/1685/failt1">Software Hall of Shame</a> (from IEEE article <a href="http://www.spectrum.ieee.org/sep05/1685">Why Software Fails</a>)
</li>
<li>
<a href="http://www.wired.com/news/technology/bugs/0,2924,69355,00.html">History's Worst Software Bugs</a> (Wired)
</li>
<li>
<a href="http://www.cs.tau.ac.il/~nachumd/horror.html">Software Horror Stories</a> (Nachum Deshowitz, Tel Aviv University)
</li>
<li>
<a href="http://catless.ncl.ac.uk/Risks">Forum on Computer Risks</a> (ACM moderated mailing list)
</li>
<li>
<a href="http://www.it-cortex.com/Stat_Failure_Rate.htm">Failure Rate</a> (collection of failure rate statistics from IT surveys)
</li>
</ul>
<p>
You'd think that the software development industry would have matured over the last ten years. And <a href="http://www.softwaremag.com/L.cfm?Doc=newsletter/2004-01-15/Standish">it has</a>:
</p>
<p>
</p>
<blockquote>
The 10th edition of the annual CHAOS report from The Standish Group, which researches the reasons for IT project failure in the United States, indicates that project success rates have increased to 34 percent of all projects. That's more than a 100-percent improvement from the success rate found in <a href="http://www.standishgroup.com/sample_research/chaos_1994_1.php">the first study in 1994</a>.
<p>
Asked for the chief reasons project success rates have improved, Standish Chairman Jim Johnson says, "The primary reason is the projects have gotten a lot smaller. Doing projects with iterative processing as opposed to the waterfall method, which called for all project requirements to be defined up front, is a major step forward."
</p>
<p>
The Standish Group has studied over 40,000 projects in 10 years to reach the findings.
</p>
<p>
Project failures have declined to 15 percent of all projects, a vast improvement over the 31-percent failure rate reported in 1994. Projects meeting the "challenged" description -- meaning that they are over time, over budget and/or lacking critical features and requirements --  total 51 percent of all projects in the current survey.
</p>
</blockquote>
<p>
Failing is OK. <a href="http://www.codinghorror.com/blog/archives/000576.html">Failing can even be desirable</a>. But you must <a href="http://www.codinghorror.com/blog/archives/000300.html">learn from your failures</a>, and that requires concerted <a href="http://www.codinghorror.com/blog/archives/000456.html">postmortem introspection and analysis</a>. I'd like to think that a large part of the statistical improvement cited above is attributable to sharp project managers and savvy developers who <b>studied the first CHAOS report</b>. Once you know what <a href="http://www.codinghorror.com/blog/archives/000017.html">the common pitfalls are</a>, it's easier to avoid them.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2006-05-15T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/the-long-dismal-history-of-software-project-failure/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ Localhost HTTP debugging with Fiddler ]]></title>
<link>https://blog.codinghorror.com/localhost-http-debugging-with-fiddler/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
I've had great success using ethernet sniffers (such as <a href="http://www.etherdetect.com/">Etherdetect</a>, or <a href="http://www.ethereal.com/">Ethereal</a>) to troubleshoot communication problems. Installing a sniffer, even after installing the <a href="http://www.winpcap.org/install/default.htm">required WinPcap packet capture library</a>, doesn't require a reboot. I frequently use sniffers to troubleshoot servers and desktops alike. Ethernet sniffers should be a standard tool in your development troubleshooting toolkit, too.
</p>
<p>
However, Windows ethernet sniffers do have one significant limitation: <b>they can't sniff localhost traffic</b>. Localhost packets don't pass through the regular network stack, so they're invisible to an ethernet sniffer.
</p>
<p>
What's a poor developer to do? The only recourse is a <b>local HTTP proxy</b>, such as <a href="http://www.fiddlertool.com/fiddler/">Fiddler</a>:
</p>
<p>
<img alt="image placeholder" >
</p>
<p>
Fiddler has some special integration with IE that makes it particularly easy to use, but <a href="http://west-wind.com/weblog/posts/4085.aspx">it can be used with Firefox as well</a>.
</p>
<p>
I had some erratic results under IE7, but Fiddler basically works as advertised. There's tons of <a href="http://www.fiddlertool.com/Fiddler/help/">supporting documentation on how to use it</a>, including two MSDN articles. I'm using Fiddler as a localhost sniffer that's limited to the HTTP protocol, but it does have some capabilities beyond what you'd see in a sniffer. For example, with Fiddler <b>you can set breakpoints and tamper with the HTTP data before it is sent or received</b>.
</p>
<p>
On the whole, I'd prefer to stick with a sniffer for localhost debugging. But a HTTP proxy like Fiddler is a reasonable workaround.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2006-05-16T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/localhost-http-debugging-with-fiddler/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ Snappy Answers to Stupid Programming Questions ]]></title>
<link>https://blog.codinghorror.com/snappy-answers-to-stupid-programming-questions/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>Here's a not-so-gentle reminder from David Pickett that <a href="http://blogs.msdn.com/davidlem/archive/2006/05/16/598696.aspx">some programming interview questions</a> – in this case, "how would you write a routine to copy a file?" – are, well, <a href="http://exold.com/article/stupid-interview-questions">stupid</a>*:</p>
<blockquote>Q. What about the attributes?<br> A. Make the attributes the same.
<p>Q. Should I modify the attributes of the source file? If this file copy is part of a backup or archive operation, it'd probably be a mistake to leave the 'Archive' attribute on.<br> A. No, leave them as-is.</p>
<p>Q. What if the source file has the Archive attribute off? If I make it off on the new file as well, it could screw up the user's backup software.<br> A. Just make it the same. I don't care about the user's backup software.</p>
<p>Q. Well, I'm not sure that's the best approach to take when thinking about designing software FOR users, but if you say so.<br> A. ...</p>
<p>Q. What about compression? It's a file attribute, but the copy destination may not support compression.<br> A. Don't compress the copy.</p>
<p>Q. Even if the source is compressed, and the destination supports compression?<br> A. YES.</p>
<p>Q. What about encryption? What if the source file is encrypted, but the destination does not support encryption?<br> A. Don't encrypt the copy if the destination doesn't support it.</p>
<p>Q. Mmmmm, sorry, don't mean to digress, but … that could be a serious security hole. Especially if wherever this file copy function ends up supports arbitrary parameters (directly or indirectly).<br> A. <strong>Look, just copy the damn file.</strong></p>
</blockquote>
<p>"How would you write a routine to copy a file" is just another <a href="http://www.ocf.berkeley.edu/~wwu/riddles/intro.shtml">interview riddle</a>; it doesn't deserve a face value response. <a href="http://exold.com/article/stupid-interview-questions">David's answers</a> are even better-- they implode the question under its own weight.
</p>
<p>
<img alt="image placeholder" >
</p>
<p>
The only rational answer to "how would you write a routine to copy a file?" is another question: <strong>why would any competent programmer ever write a file copy routine?</strong></p>
<p>The last time I checked, <a href="http://w-uh.com/articles/030524-moving_Mount_Fuji.html">moving mount Fuji</a> wasn't a part of our business plan, either.</p>
<p><small>* With apologies to Al Jaffee.</small></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2006-05-17T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/snappy-answers-to-stupid-programming-questions/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ Code Smells ]]></title>
<link>https://blog.codinghorror.com/code-smells/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>I'm often asked why the book <a href="http://www.amazon.com/exec/obidos/ASIN/0201485672/codihorr-20">Refactoring</a> isn't included in my <a href="http://blog.codinghorror.com/recommended-reading-for-developers/">recommended developer reading list</a>. Although I own the book, and I've read it twice, I felt it was too prescriptive – if you see (x), then you must do (y). Any programmer worth his or her salt should already be refactoring aggressively. It's so essential to the craft that if you have to read a book to understand how it works, you probably shouldn't be a programmer in the first place.</p>
<p>There's nothing wrong with codifying refactoring guidelines in a book. But the most important guideline is to <b>watch for warning signs in your own code – so called <a href="http://en.wikipedia.org/wiki/Code_smell">"code smells"</a>.</b></p>
<img alt="image placeholder" >
<p>Developing your "code nose" is something that happens early in your programming career, if it's going to happen at all. I combined all the documented code smells I could find into this reference; most of these smells should be familiar to you.</p>
<h3>Code Smells Within Classes</h3>
<table cellpadding="4" cellspacing="6" width="100%">
<tr>
<td style="font-weight: bold;" valign="top" width="200">Comments</td>
<td style="" valign="top">
There's a fine line between comments that illuminate and comments that obscure. Are the comments necessary? Do they explain "why" and not "what"? Can you refactor the code so the comments aren't required? And remember, you're writing comments for people, not machines.</td>
</tr>
<tr>
<td style="font-weight: bold;" valign="top">
Long Method</td>
<td valign="top">
All other things being equal, a shorter method is easier to read, easier to understand, and easier to troubleshoot. Refactor long methods into smaller methods if you can.</td>
</tr>
<tr>
<td style="font-weight: bold;" valign="top">
Long Parameter List</td>
<td valign="top">
The more parameters a method has, the more complex it is. Limit the number of parameters you need in a given method, or use an object to combine the parameters.</td>
</tr>
<tr>
<td style="font-weight: bold;" valign="top">
Duplicated code</td>
<td valign="top">
Duplicated code is the bane of software development. Stamp out duplication whenever possible. You should always be on the lookout for more subtle cases of near-duplication, too. <a href="http://www.artima.com/intv/dry.html">Don't Repeat Yourself!</a>
</td>
</tr>
<tr>
<td style="font-weight: bold;" valign="top">
Conditional Complexity</td>
<td valign="top">
Watch out for large conditional logic blocks, particularly blocks that tend to grow larger or change significantly over time. Consider alternative object-oriented approaches such as decorator, strategy, or state.</td>
</tr>
<tr>
<td style="font-weight: bold;" valign="top">
Combinatorial Explosion</td>
<td valign="top">
You have lots of code that does <i>almost</i> the same thing.. but with tiny variations in data or behavior. This can be difficult to refactor-- perhaps using generics or an interpreter?</td>
</tr>
<tr>
<td style="font-weight: bold;" valign="top">
Large Class</td>
<td valign="top">
Large classes, like long methods, are difficult to read, understand, and troubleshoot. Does the class contain too many responsibilities? Can the large class be restructured or broken into smaller classes?</td>
</tr>
<tr>
<td style="font-weight: bold;" valign="top">
Type Embedded in Name</td>
<td valign="top">
Avoid placing types in method names; it's not only redundant, but it forces you to change the name if the type changes. </td>
</tr>
<tr>
<td style="font-weight: bold;" valign="top">
Uncommunicative Name</td>
<td valign="top">
Does the name of the method succinctly describe what that method does? Could you read the method's name to another developer and have them explain to you what it does? If not, rename it or rewrite it.</td>
</tr>
<tr>
<td style="font-weight: bold;" valign="top">
Inconsistent Names</td>
<td style="" valign="top">
Pick a set of standard terminology and stick to it throughout your methods. For example, if you have Open(), you should probably have Close().</td>
</tr>
<tr>
<td style="font-weight: bold;" valign="top">
Dead Code</td>
<td valign="top">
Ruthlessly delete code that isn't being used. That's why we have source control systems!</td>
</tr>
<tr>
<td style="font-weight: bold;" valign="top">
Speculative Generality</td>
<td valign="top">
Write code to solve today's problems, and worry about tomorrow's problems when they actually materialize. Everyone loses in the "what if.." school of design. <a href="http://xp.c2.com/YouArentGonnaNeedIt.html">You (Probably) Aren't Gonna Need It</a>. </td>
</tr>
<tr>
<td style="font-weight: bold;" valign="top">
Oddball Solution</td>
<td valign="top">
There should only be one way of solving the same problem in your code. If you find an oddball solution, it could be a case of poorly duplicated code-- or it could be an argument for the adapter model, if you really need multiple solutions to the same problem.</td>
</tr>
<tr>
<td style="font-weight: bold;" valign="top">
Temporary Field</td>
<td valign="top">
Watch out for objects that contain a lot of optional or unnecessary fields. If you're passing an object as a parameter to a method, make sure that you're using all of it and not cherry-picking single fields.</td>
</tr>
</table>
<h3>Code Smells Between Classes</h3>
<table cellpadding="4" cellspacing="6" width="100%">
<tr>
<td style="font-weight: bold;" valign="top" width="200">
Alternative Classes with Different Interfaces</td>
<td valign="top">
If two classes are similar on the inside, but different on the outside, perhaps they can be modified to share a common interface.</td>
</tr>
<tr>
<td style="font-weight: bold;" valign="top">
Primitive Obsession</td>
<td valign="top">
Don't use a gaggle of primitive data type variables as a poor man's substitute for a class. If your data type is sufficiently complex, write a class to represent it. </td>
</tr>
<tr>
<td style="font-weight: bold;" valign="top">
Data Class</td>
<td valign="top">
Avoid classes that passively store data. Classes should contain data <i>and</i> methods to operate on that data, too.</td>
</tr>
<tr>
<td style="font-weight: bold;" valign="top">
Data Clumps</td>
<td valign="top">
If you always see the same data hanging around together, maybe it belongs together. Consider rolling the related data up into a larger class.</td>
</tr>
<tr>
<td style="font-weight: bold;" valign="top">
Refused Bequest</td>
<td valign="top">
If you inherit from a class, but never use any of the inherited functionality, should you really be using inheritance?</td>
</tr>
<tr>
<td style="font-weight: bold;" valign="top">
Inappropriate Intimacy</td>
<td style="" valign="top">
Watch out for classes that spend too much time together, or classes that interface in inappropriate ways.
Classes should know as little as possible about each other.</td>
</tr>
<tr>
<td style="font-weight: bold;" valign="top">
Indecent Exposure</td>
<td style="" valign="top">
Beware of classes that unnecessarily expose their internals. Aggressively refactor classes to minimize their public surface. You should have a compelling reason for every item you make public. If you don't, hide it.</td>
</tr>
<tr>
<td style="font-weight: bold;" valign="top">
Feature Envy</td>
<td valign="top">
Methods that make extensive use of another class may belong in another class. Consider moving this method to the class it is so envious of.</td>
</tr>
<tr>
<td style="font-weight: bold;" valign="top">
Lazy Class</td>
<td valign="top">
Classes should pull their weight. Every additional class increases the complexity of a project. If you have a class that isn't doing enough to pay for itself, can it be collapsed or combined into another class?</td>
</tr>
<tr>
<td style="font-weight: bold;" valign="top">
Message Chains</td>
<td style="" valign="top">
Watch out for long sequences of method calls or temporary variables to get routine data. Intermediaries are dependencies in disguise. </td>
</tr>
<tr>
<td style="font-weight: bold;" valign="top">
Middle Man</td>
<td valign="top">
If a class is delegating all its work, why does it exist? Cut out the middleman. Beware classes that are merely wrappers over other classes or existing functionality in the framework.</td>
</tr>
<tr>
<td style="font-weight: bold;" valign="top">
Divergent Change</td>
<td valign="top">
If, over time, you make changes to a class that touch completely different parts of the class, it may contain too much unrelated functionality. Consider isolating the parts that changed in another class.</td>
</tr>
<tr>
<td style="font-weight: bold;" valign="top">
Shotgun Surgery</td>
<td valign="top">
If a change in one class requires cascading changes in several related classes, consider refactoring so that the changes are limited to a single class.</td>
</tr>
<tr>
<td style="font-weight: bold;" valign="top">
Parallel Inheritance Hierarchies</td>
<td valign="top">
Every time you make a subclass of one class, you must also make a subclass of another. Consider folding the hierarchy into a single class.</td>
</tr>
<tr>
<td style="font-weight: bold;" valign="top">
Incomplete Library Class</td>
<td valign="top">
We need a method that's missing from the library, but we're unwilling or unable to change the library to include the method. The method ends up tacked on to some other class. If you can't modify the library, consider isolating the method. </td>
</tr>
<tr>
<td style="font-weight: bold;" valign="top">
Solution Sprawl</td>
<td valign="top">
If it takes five classes to do anything useful, you might have solution sprawl. Consider simplifying and consolidating your design.</td>
</tr>
</table>
<p>This list was derived from the <a href="http://industriallogic.com/papers/smellstorefactorings.pdf">Smells to Refactorings PDF</a>, and the <a href="http://wiki.java.net/bin/view/People/SmellsToRefactorings">Smells to Refactorings Wiki</a>, which also provide additional guidance on the specific refactorings that might be helpful in each instance. The important thing, from my perspective, isn't the refactoring – it's <b>learning to recognize the scent of your own code</b>.</p>
<p>And if you want examples of the stinkiest code imaginable, <a href="http://thc.org/root/phun/unmaintain.html">How to Write Unmaintainable Code</a> is a good place to start.</p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2006-05-18T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/code-smells/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ Programmers and Chefs ]]></title>
<link>https://blog.codinghorror.com/programmers-and-chefs/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
From an <a href="http://www.extragroup.de/weblog/hmk/archives/003129.html">audio interview with Ron Jeffries</a>:
</p>
<blockquote>
The reason the kitchen is a mess is not because the kitchen is poorly designed, it's because we didn't do the dishes after every meal.
</blockquote>
<p>
Michael Feathers recently wrote <a href="http://butunclebob.com/ArticleS.MichaelFeathers.WorkingClean">an eerily similar entry</a> about the professional chef's concept of <b>working clean</b>:
</p>
<p>
</p>
<blockquote>
One other thing that I liked about the Pastry Chef's competition was the way that the chefs were judged. There was more to it than just the final judging. All during the preparation, judges walked from station to station with clipboards, making little notes. One of the criteria that they used was working clean. Imagine that.. working clean.. The judges were watching to make sure that the chefs rubbed clean every bowl and utensil immediately after use. If they didn't, well, they were marked off.
</blockquote>
<p>
Micah Martin left a great comment that illustrates how integral "working clean" is to professionals in the restaurant industry:
</p>
<p>
</p>
<blockquote>
In my college years I was a chef/line cook at a few restaurants. Indeed working clean is a common theme in the kitchen. The term I heard over and over was "Clean as you go!".  "Clean as you go!" wasn't so much a suggestion, but rather a law. Those cooks who didn't constantly clean would wind up in trouble. Their workspace would become so messy within a matter of an hour or two that the quality of food rapidly diminished. This problem would progress until the other cooks were forced to step in and clean up. This had a negative impact on the entire kitchen and Nobody was happy it happened. Interestingly, line cooks, even without college degrees, were extremely efficient as self-management. Those cook who didn't work clean, were taunted, teased, and pushed around until they cleaned up, or quit.
</blockquote>
<p>
For software developers, <b>working clean means constant refactoring</b>. If you don't stop occasionally-- frequently, actually-- to revisit and clean up the code you've already written, you're bound to end up with a big, sloppy ball of code. If you forget to regularly clean up behind yourself, things get <a href="http://www.codinghorror.com/blog/archives/000589.html">smelly</a>. Working clean means following your nose and addressing those nagging issues <i>before</i> they become catastrophic.
</p>
<p>
In addition to working clean, cooks also spend a lot of time thinking about <b><i>mise en place</i></b>, how their cooking stations are arranged for optimal work. Michael Feathers <a href="http://butunclebob.com/ArticleS.MichaelFeathers.WorkingClean">explains</a>:
</p>
<p>
</p>
<blockquote>
There's an section in [the book <a href="http://www.amazon.com/exec/obidos/ASIN/158234082X/codihorr-20">Kitchen Confidential</a>] where he talks about what cooks do late at night after the customers have gone home. They generally do what many people after work, they go out for beers and sit around talking about work, but what do they talk about really? Tony says that the subject that always comes up is something called mise en place. Mise en place is a blanket term for how you set up your station.
<p>
<img alt="image placeholder" >
</p>
<p>
Is your tub of butter at the eleven o'clock position or at the one o'clock? Do you have two paring knives, and do you keep them next to your cutting board or next to your garnish bin? When you spend the night churning out meals, these decisions make a difference. Everyone has their favorite theory about the proper miz. Tony says that many cooks get downright mystical about it. According Tony, you'd better run if you are caught messing with another cook's miz. Sharp knives have multiple uses, apparently.
</p>
</blockquote>
<p>
The concept of <i>mise en place</i> should be familiar to software developers.  It's why every member of the team has their development system set up identically. It's why we use a common set of development tools. It's why we take advantage of existing frameworks like nUnit and Log4Net instead of writing our own.
</p>
<p>
Good programmers should be <a href="http://www.codinghorror.com/blog/archives/000490.html">borderline obsessive</a> about their "miz". Our craft changes too rapidly for us to ever be completely satisifed with the way we're working today. There's always something better on the horizon.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2006-05-19T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/programmers-and-chefs/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ Are Recipes for Novices? ]]></title>
<link>https://blog.codinghorror.com/are-recipes-for-novices/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
The last post about <a href="http://www.codinghorror.com/blog/archives/000593.html">programmers and chefs</a> reminded me of a point raised in the classic <a href="http://www.pragmaticprogrammer.com/">Pragmatic Progammers'</a> presentation <a href="http://www.google.com/search?q=%22herding+racehorses%22+%22racing+sheep%22+ppt">Herding Racehorses, Racing Sheep</a>:
</p>
<p>
</p>
<table>
<tr>
<td>
<img alt="image placeholder" >
</td>
<td>
vs
</td>
<td>
<a href="http://www.codinghorror.com/blog/images/unix-magic-overacre-poster-large.jpg"><img alt="image placeholder" >
</td>
</tr>
</table>
<p>
<b>Instructions that are appropriate for a novice may be totally inappropriate for an expert</b>. This is something I touched on a while back in <a href="http://www.codinghorror.com/blog/archives/000203.html">Level 5 Means Never Having to Say You're Sorry</a>. As James Bach <a href="http://blackbox.cs.fit.edu/blog/james/archives/000187.html">said</a>:
</p>
<p>
</p>
<blockquote>
A maturity model is basically a gang of best practices hooked on crystal meth. In my maturity model of the industry, promoting a maturity model is mere level 2 behavior. By level 3, we outgrow it.
</blockquote>
<p>
However, I do think Bach's views on this issue are unnecessarily black and white. The idea that a recipe (eg, a best practice, a methodology, or a maturity model) is completely worthless is just as wrongheaded as the idea that everything should be based on a strict recipe. In other words, <b>even an expert chef may occasionally find it helpful to refer to a recipe card.</b>
</p>
<p>
There's no reason these two models can't coexist. You should always start with the common denominator recipe, of course, but you may want to provide some alternative guidelines and ideas for those cooks who have outgrown traditional recipes, too. The point is to avoid an onerous, religious one-methodology-fits-all view of the world.
</p>
<p>
The image of the UNIX wizard used in Andy's presentation is striking. I researched the image and found <a href="http://www.unix.org/uposter.html">this bit of history at unix.org</a>:
</p>
<p>
</p>
<blockquote>
The <a href="http://www.codinghorror.com/blog/images/unix-magic-overacre-poster.jpg">classic UNIX magic poster</a> by Overacre was distributed at past USENIX conferences and featured a white bearded wizard with UNIX related things around him, for example a spool of thread, a black cat, a boot, a fork, pipes, buckets, a number of containers, labelled with things like tar, null, awk, uucp. There is even a 'C' container, and a partially obscured and broken 'B' container.The wizard is pouring mysterious liquids into a giant shell. Subsequent posters in the series included UNIX wars and UNIX views.
</blockquote>
<p>
I can't find images of the other two posters, unfortunately, but you can see <a href="http://www.garyoveracre.com/portfolio/thumbnails.html%0A">more of Gary Overacre's amazing art</a> at his website.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2006-05-22T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/are-recipes-for-novices/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ Apple Laptops: Good, Cheap, Fast -- pick three ]]></title>
<link>https://blog.codinghorror.com/apple-laptops-good-cheap-fast-pick-three/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
When I wrote that the Mac Mini was <a href="http://www.codinghorror.com/blog/archives/000186.html">an underpowered, expensive box</a> at the beginning of 2005, I had no idea that Apple would do something wonderful to fix this: <a href="http://www.codinghorror.com/blog/archives/000312.html">switch to Intel x86 CPUs</a>.
</p>
<p>
I guess Apple has conveniently forgotten that whole "supercomputer on a chip" <a href="http://money.cnn.com/1999/09/20/technology/apple/index.htm">marketing campaign for the G4 processor</a>:
</p>
<p>
</p>
<blockquote><i>
Apple has been promoting the G4 as the world's first "supercomputer on a chip," noting it can process data in 128-bit chunks - double the speed of most traditional computers. Apple officials claim the chip is nearly three times faster than the 600MHz Pentium III chip manufactured by rival Intel Corp.
</i></blockquote>
<p>
Today's modern Macs are powered by Intel Core Duo CPUs. And according to Apple, they <a href="http://www.networkworld.com/columnists/2006/050106cooltools.html">run nearly five times faster than the G4 models they replace</a>.
</p>
<p>
</p>
<p>
<a href="http://www.esm.psu.edu/Faculty/Gray/movies.html"><img alt="image placeholder" >
</p>
<p>
That's gotta sting a little.
</p>
<p>
But no matter. Forget the <a href="http://en.wikipedia.org/wiki/Reality_distortion_field">reality distortion field</a> advertising. Forget the fact that Apple just obsoleted their entire PC line overnight. <a href="http://www.kaomso.com/FullStory.php?TheStory=78">Again</a>. The important thing is that <b>the new Apple models really are as fast as PCs-- <i>because they are PCs</i></b>.
</p>
<p>
Although John Gruber's overbearing Mac zealotry grates on me, I have to agree with him on <a href="http://daringfireball.net/2006/03/ipod_juggernaut">one very important point</a>:
</p>
<p>
</p>
<blockquote>
<i>
But second, look at that quote in the context of Apple's iPod strategy. "At the critical juncture [Ã¢â‚¬Â¦] when they should have gone for market share, they went for profits." Of all the myriad ways that Apple's iPod position today differs from their Macintosh position 20 years ago, perhaps none is greater than this: With the iPod, Apple is going for market share.
</i><p>
iPods are certainly premium products, at least in the greater context of "portable audio players"  --  handheld audio tape and CD players typically cost around $20 or $30. Go back in time to early 2001, and I wager you'd have a hard time getting most people to believe that they'll soon be purchasing $300 and $400 handheld music players.
</p>
<p>
But when compared to other digital music players, <b>iPods are not only competitively priced, they're often cheaper</b>. Today's Apple is very different than the old Apple, but many people still haven't caught on.
</p>
</blockquote>
<p>
I <a href="http://www.codinghorror.com/blog/archives/000481.html">cut my computing teeth on the Apple //</a>, and to a lesser extent, the Macintosh. I can personally attest that these were <i>incredibly</i> expensive machines at the time. But <b>the current crop of x86 Apple laptops are cheaper than nearly every other x86 laptop of equivalent spec.</b> That's amazing.
</p>
<p>
But don't take my word for it. Core Duo news <a href="http://www.coreduonews.com/2006/04/24/17-apple-macbook-pro-released/">examines the Macbook Pro</a>:
</p>
<p>
</p>
<blockquote><i>
[The Macbook Pro] is actually $500 cheaper then 17Ã¢â‚¬Â³ Dell XPS1710 with similar configuration. Granted, Apple Macbook doesn't have the latest and greatest nVidia 7900 card. But with the ability to run Windows XP, 17Ã¢â‚¬Â³ Apple Macbook Pro looks like a great choice to replace your old Wintel desktop.
</i></blockquote>
<p>
.. and the <a href="http://www.coreduonews.com/2006/05/16/apple-macbook-pro-is-here/">latest MacBooks</a>:
</p>
<p>
</p>
<blockquote>
<i>
We already told you that the Intel based high end MacBook Pro was very competitive in price with high end Windows based rivals. So we checked the latest 13.3" MacBook with available PC alternatives. And we weren't disappointed:
</i><p>
</p>
<ul>
<li>Asus W7J with 1.83 GHz chip, 1 GB of memory and 100 GB HDD will cost $1939. MacBook with the same configuration - $1699
</li>
<li>Rock Pegasus 330 with 1.66GHz chip, 512MB of memory, 80GB HDD and TV Tuner - $1343, MacBook with the 1.83GHz chip, same memory and HDD, without TV tuner - $1149
</li>
<li>Fujitsu Lifebook S6310 with 1.66 GHz processor, 512 MB of memory and 80GB HDD - $2033. MacBok with the 2.GHz Intel chip, same memory, HDD and other specs - $1349
</li>
</ul>
<p>
If earlier you usually paid premium for Apple's laptops and desktops compared to Wintel PCs of similar performance, <b>now you can get a MacBook cheaper then most of its PC rivals.</b> The Apple MacBook is cheaper as a PC even if you have to purchase standalone Windows XP OS and run it on MacBook via Bootcamp. Is there any reason not to buy a MacBook if you want a highly portable 13" notebook?
</p>
</blockquote>
<p>
I spent quite a bit of time searching for x86 laptops of similar spec and form factor, and there's just no avoiding it: the Apple x86 laptops are a great deal for the price. Sure, you can find a few edge cases where Apple loses, such as the <a href="http://www.shopfujitsu.com/Q_teaser/index.shtml">ultraportable category</a>. But the rare few laptops that are comparable in price and specification can't compete with Apple's design chops.
</p>
<p>
Running Windows on an Apple x86 laptop is relatively easy with Bootcamp, but it still takes some juggling to get a few essential things we take for granted with other x86 laptops, such as <a href="http://www.mac-kenzie.net/blog/2006/04/06/getting-windows-xp-installed-on-a-macbook-proand-making-it-usable/">proper right-click support</a>, and <a href="http://weblogs.asp.net/jeff/archive/2006/05/05/445343.aspx">standard keyboard mappings</a>.
</p>
<p>
If these kinks get worked out over time-- and I'm sure they will-- my next wintel laptop might just be an Apple.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2006-05-23T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/apple-laptops-good-cheap-fast-pick-three/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ You may be a victim of software counterfeiting. ]]></title>
<link>https://blog.codinghorror.com/you-may-be-a-victim-of-software-counterfeiting/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
Microsoft has finally <b>activated the most aggressive part of their Windows Genuine Advantage program -- active notifications</b>.
</p>
<p>
After downloading the latest <a href="http://windowsupdate.microsoft.com/">Windows updates</a>, if your Windows cd-key doesn't validate against Microsoft's online database of cd-keys, you may be greeted with this unpleasant five-second mandatory delay dialog at the login page:
</p>
<p>
<img alt="image placeholder" >
</p>
<p>
On top of that, you get a repeating balloon notification that nags you periodically while you use the operating system:
</p>
<p>
<img alt="image placeholder" >
</p>
<p>
The warnings also get <a href="http://windowsobserver.com/gallery2/v/WindowsGenuineAdvantage/slide30.jpg.html">more dire as time progresses</a>:
</p>
<p>
</p>
<blockquote><i>
This copy of Windows is not genuine and you have not resolved the issue. This computer is no longer eligible to receive select security upgrades from Microsoft. To protect your computer, you must click Get Genuine now.
</i></blockquote>
<p>
The language here is a little misleading. <b>Microsoft is socially obligated to provide critical security updates to pirated machines</b>. Otherwise those vulnerable machines will eventually be compromised and potentially used in denial of service attacks and other nefarious schemes. Microsoft does provide so-called "critical" updates to all Windows machines, regardless of whether or not they're genuine.
</p>
<p>
This is all courtesy of the <a href="http://support.microsoft.com/?kbid=905474">mandatory "Windows Genuine Advantage Notification" service</a> that is being delivered now through Windows Update. This isn't just a service you can disable, or a process you can kill in task manager, either. You'll have to <a href="http://filesharingtalk.com/vb3/showthread.php?t=116679">install some kind of questionable third-party hack to get around it</a>.
</p>
<p>
I suppose <i>it's only malware if you're a pirate</i>. What's a poor, beleaguered user to do? Microsoft offers five options:
</p>
<p>
</p>
<ol>
<li>Purchase a valid Windows XP cd-key online from Microsoft.
</li>
<li>If you can produce high-quality counterfeit media, along with a proof of purchase, you can get a free replacement key from Microsoft.
</li>
<li>Contact your reseller for redress.
</li>
<li>Purchase Windows XP from a local OEM reseller.
</li>
<li>Purchase Windows XP at a retail location.
</li>
</ol>
<p>
Notice the word "Purchase" appears in three of those five options. There's almost no way to finagle a free cd-key out of this.
</p>
<p>
I found a <a href="http://windowsobserver.com/gallery2/v/WindowsGenuineAdvantage/slide4.jpg.html">Microsoft presentation on Windows Genuine Advantage (WGA)</a> which goes into a lot more detail. It also provides this graph of WGA validation failure rates across the United States:
</p>
<p>
<img alt="image placeholder" >
</p>
<p>
All I can say is, <b>get used to increased forms of online discrimination between genuine and pirated versions of software</b>. Windows Vista will have an even more advanced form of WGA; pirated versions of Vista, for example, <a href="http://www.longhornblogs.com/robert/archive/2006/05/09/16232.aspx">will not be able to enable the fancy Aero "glass" interface</a>.
</p>
<p>
Microsoft is certainly entitled to protect their IP by annoying pirates into buying cd keys. But I wonder if they're veering too far into the enforcement side of the <a href="http://www.codinghorror.com/blog/archives/000489.html">optimal piracy rate</a>.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2006-05-24T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/you-may-be-a-victim-of-software-counterfeiting/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ Is the Command Prompt the New Desktop? ]]></title>
<link>https://blog.codinghorror.com/is-the-command-prompt-the-new-desktop/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
People keep <a href="http://37signals.com/svn/archives2/is_don_norman_right_about_google.php">rediscovering</a> the article Don Norman posted a few months ago criticizing what he thinks of as <a href="http://www.jnd.org/dn.mss/the_truth_about.html">Google's faux simplicity</a>:
</p>
<p>
</p>
<blockquote>
"Oh," people rush to object, "the Google search page is so spare, clean, elegant, not crowded with other stuff." True, but that's because you can only do one thing from their home page: search.
</blockquote>
<p>
<img alt="image placeholder" >
</p>
<p>
Of course, <a href="http://www.codinghorror.com/blog/archives/000529.html">I don't agree</a>. Philipp Lenssen notes that Don <a href="http://blog.outer-court.com/archive/2006-05-21-n50.html">completely ignored the search results page UI</a>:
</p>
<p>
</p>
<blockquote>
The second point I disagree with in Donald Norman's article is that Google only does one thing. Apparently, Donald doesn't understand Google oneboxes Ã¢â‚¬â€œ <a href="http://www.google.com/help/interpret.html">the query-specific boxes on top of organic search results</a>, interfacing services Google News, Google Maps and so on Ã¢â‚¬â€œ or he purposely omits them. While a Google onebox is not a solution to all needs (for one thing, it doesn't allow me to explore, because I need to know what I want in order to form a search query), there's also the "more" link leading to a Google sitemap with an overview of additional services.
</blockquote>
<p>
But Bill de hra expands the argument in <a href="http://www.dehora.net/journal/2006/05/useiness.html">an intriguing direction</a>:
</p>
<p>
</p>
<blockquote>
<b>Perhaps the hunt and peck approach of searching (along with gaming) is becoming the dominant computing metaphor, replacing nearly 3 decades of user interfaces based on the metaphor of an office desktop</b> (ironically the metaphor itself being pushed into irrelevancy by desktop computing). If so, usability experts will need to reconsider what they deem to be best and appropriate.
</blockquote>
<p>
The Google search box could be viewed as the ultimate <a href="http://www.codinghorror.com/blog/archives/000296.html">command prompt</a>; you type what you want, and it provides the answer. Eventually. Once you realize that the Google search box is really a type of command prompt, the criticism that Google "only does one thing" is.. well, downright hilarious. Search is the beginning of every command. You can go anywhere and do anything from there.
</p>
<p>
I've never been a huge fan of the desktop metaphor. It's easier to see the problems if you take it to an extreme, as <a href="http://en.wikipedia.org/wiki/General_Magic">General Magic's</a> defunct Magic Cap operating system did:
</p>
<p>
<img alt="image placeholder" >
</p>
<p>
As much as I dislike <a href="http://www.acm.org/pubs/cacm/AUG96/antimac.htm">the limitations of the desktop metaphor</a>, I'm a little uneasy about the idea that the ultimate user interface we end up with in the next ten years will bear more resemblance to a command prompt ..
</p>
<p>
<a href="http://ldopa.net/2006/01/14/glterminal/"><img alt="image placeholder" >
</p>
<p>
.. than to the point and click GUI interfaces pioneered at PARC.
</p>
<p>
Still, <b>there's a lot to be said for typing stuff to quickly get to what you want</b>. For example, I often bail out when attempting to visually point and click my way around crowded web pages; instead, I search for a relevant word on the page using <a href="http://www.codinghorror.com/blog/archives/000432.html">incremental search</a>. It's nearly always faster than visually scanning the entire page for the right content or link.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2006-05-25T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/is-the-command-prompt-the-new-desktop/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ Pixels, Megapixels, and Desktop Resolutions ]]></title>
<link>https://blog.codinghorror.com/pixels-megapixels-and-desktop-resolutions/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
I've always wondered why digital cameras express their resolutions in terms of <b>megapixels</b>, rather than the typical pixel height and width numbers you find on computer displays. Nobody buys a 21" LCD with 1.9 megapixels of resolution; they buy a 21" LCD that can display 1600 x 1200. But they're technically the same thing: 1600 x 1200 is 1,920,000 pixels, or 1.9 megapixels. It looks like we're using the old hard drive manufacturer's trick of <a href="http://blogs.msdn.com/oldnewthing/archive/2003/09/19/55024.aspx">dividing by powers of ten</a>.
</p>
<p>
One problem with using the megapixel designation alone is that you have no idea what the aspect ratio of those pixels are-- 16:9? 5:4? 1.33:1? Who knows, maybe that 1.9 megapixel camera is really taking 192 x 10,000 pictures. Pixels are pixels, right?
</p>
<p>
The <a href="http://en.wikipedia.org/wiki/Computer_display_standard">wikipedia entry on computer display resolutions</a> has a great <a href="http://en.wikipedia.org/wiki/Image:Vector_Video_Standards.png">chart</a> that contrasts the most common monitor resolutions, along with the ratio line that each falls on:
</p>
<p>
<a href="http://en.wikipedia.org/wiki/Image:Vector_Video_Standards.png"><img alt="image placeholder" >
</p>
<p>
It's interesting to note that <b>the most common monitor resolutions (800x600, 1024x768, etc) are 4:3</b>. I didn't realize how oddball the 1280x1024 ratio was. The widescreen variants are really catching on quickly, too, if the <a href="http://www.newegg.com/ProductSort/SubCategory.asp?SubCategory=20">current LCD monitor selection at Newegg</a> is any indication.
</p>
<p>
But the <a href="http://www.codinghorror.com/blog/archives/000505.html">alphabet soup of display designations</a> isn't doing anyone a favor, either. I'd much rather know that a display is capable of 1600 x 1200 instead of the cryptic designation <a href="http://en.wikipedia.org/wiki/UXGA">UXGA</a>.
</p>
<p>
You can compare the different resolutions of most common electronic devices (cameras, screens, video, etc) and many common formats using this nifty <a href="http://web.forret.com/tools/megapixel_chart.asp">dynamic megapixel overview tool</a>. Some of the camera models listed tend to have 4:3 aspect ratios, like PC displays. But not all. The 3:2 ratio is also common. Here are a few samples:
</p>
<p>
</p>
<ul>
<li>Canon Powershot Pro 1<br>3264 x 2448 (8 megapixels, 4:3)
</li>
<li>Canon EOS 5D<br>4368 x 2912 (12.7 megapixels, 3:2)
</li>
<li>Nikon D70s<br>3006 x 2000 (6 megapixels, 3:2)
</li>
</ul>
<p>
Evidently <a href="http://fotogenetic.dearingfilm.com/golden_rectangle.html">the 3:2 ratio derives from the native dimensions of classic 35mm film</a>.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2006-05-26T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/pixels-megapixels-and-desktop-resolutions/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ Do Modems Still Matter? ]]></title>
<link>https://blog.codinghorror.com/do-modems-still-matter/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
One of the key ingredients for Web 2.0 success is <b>pervasive high speed internet access</b>. The latest Pew internet report, which tracks broadband growth, was <a href="http://www.pewinternet.org/PPF/r/184/report_display.asp">just released</a>:
</p>
<p>
</p>
<blockquote><i>
At the end of March 2006, <b>42% of Americans had high-speed at home, up from 30% in March 2005, or a 40% increase</b>. And 48 million Americans -- mostly those with high-speed at home -- have posted content to the internet.
</i></blockquote>
<p>
In total, 84 million Americans now have high speed internet connections at home.
</p>
<p>
<img alt="image placeholder" >
</p>
<p>
At the height of the last dot-com bubble in mid-2000, <b>less than five percent of Americans had access to a high speed internet connection at home.</b> But by the end of 2006, that figure will reach nearly fifty percent.
</p>
<p>
It's hard to imagine what investors and analysts were thinking back in 2000 with those wildly optimistic dot-com growth curves, because <b>using the internet with a modem truly sucks</b>. It's painful. When 95 percent of users are stuck   with a crappy dial-up experience, it's unrealistic to expect widespread adoption of services offered via the internet.
</p>
<p>
<img alt="image placeholder" >
</p>
<p>
I recently sold my 1997-vintage US Robotics Courier analog modems on eBay, after hanging on to them for years "just in case". I haven't used a dialup connection in at <i>least</i> five years.
</p>
<p>
As good as the 2006 numbers are, <a href="http://www.lessig.org/blog/archives/002260.shtml">according to Lawrence Lessig</a>, the United States still lags the world in broadband adoption-- at least through 2004:
</p>
<p>
<img alt="image placeholder" >
</p>
<p>
With broadband adoption at an all-time high in the United States, can we finally assume that all users will have high-speed internet connections-- and by association, an enjoyable, responsive, non-painful way to use the internet? Or <b>do web developers still need to accommodate dial-up users?</b>
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2006-05-29T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/do-modems-still-matter/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ Touchpad vs. Trackpoint ]]></title>
<link>https://blog.codinghorror.com/touchpad-vs-trackpoint/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
When it comes to pointing devices on laptops, there are two schools of thought. There's the touchpad..
</p>
<p>
<img alt="image placeholder" >
</p>
<p>
.. and there's the trackpoint, which was popularized by IBM thinkpads:
</p>
<p>
<img alt="image placeholder" >
</p>
<p>
I recently switched to a work-provided Thinkpad T40 as my primary laptop, and it has both trackpoint and touchpad-- great for an apples-to-apples comparison.
</p>
<p>
<b>I'm a touchpad man, myself</b>. This entire post, including the image editing, was performed with the touchpad. At no point was I frustrated or rate-limited by the touchpad. I've had such good results with touchpads lately that I find myself <i>forgetting to use the external USB mouse I regularly carry in my laptop bag</i>. There is no stronger praise for any alternative input device.
</p>
<p>
The touchpad wins, for me, because it's such a simple input method -- yet it supports some complex, subtle nuances that are surprisingly intuitive:
</p>
<ol>
<li>click, double-click, and right-click by tapping the pad. In case you were wondering, on the Mac, a right click is a two-finger tap.
</li>
<li>scroll horizontally or vertically by dragging your finger along the edges of the pad.
</li>
<li>press harder to drag items further.
</li>
<li>slide faster to move faster.
</li>
</ol>
<p>
A lot of the touchpad's functionality is dependent on the software drivers. And Synaptics has done an incredible job, year after year, of harnessing the touchpad functionality in useful, usable ways. The first thing I do when I get a new laptop is make sure I have the <a href="http://www.synaptics.com/support/drive.cfm">latest Synaptics drivers</a>. In fact, the Synaptics drivers are the <i>only</i> OEM input drivers I ever install.
</p>
<p>
I noticed that the trackpoint has improved over the years as well. For one thing, I can now press the trackpoint to click. But scrolling is out of the question, of course. And the trackpoint's motion is a lot smoother compared to the old models I remember, which makes it less fiddly. On the new T60's at work, it's so smooth it almost feels like a slider. Still, it speaks volumes that even IBM/Lenovo offers both input methods by default on their laptops. <b>If the trackpoint is such a great input device, why would anyone need a trackpad?</b> But choice is good, I suppose. And the trackpoint is a clear winner if space is at a premium.
</p>
<p>
If you're looking for an empirical way to prove the superiority of one input method over the other, good luck. This <a href="http://www.tele-actor.net/fitts/fitts_background.html">Fitt's law backgrounder</a>, and the related <a href="http://www.tele-actor.net/fitts/consent_form.html">Java test applet</a>, will at least give you some actual data points to support your position.
</p>
<p>
Before we get too worked up on this topic, <b>I suspect the most common pointing device for most laptop users is an external USB mouse.</b> Which renders the whole touchpad vs. trackpoint debate moot.
</p>
<p>
Still, the fact that I can use any kind of alternative input device and not feel compelled to immediately plug in an external mouse is pretty amazing to me.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2006-05-30T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/touchpad-vs-trackpoint/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ Peopleware Revisited ]]></title>
<link>https://blog.codinghorror.com/peopleware-revisited/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
Kevin Kelly's <a href="http://www.kk.org/cooltools/index.php">Cool Tools list</a> just selected a book from my <a href="http://www.codinghorror.com/blog/archives/000020.html">recommended reading list</a>. And it's one of my favorites, too. It's that perennial evergreen of project management, <a href="http://www.kk.org/cooltools/archives/001248.php">Peopleware</a>:
</p>
<p>
</p>
<blockquote>
Hard-won wisdom fills this small book: How to create a team, place, or company that is productive. First published 20 years ago, and updated once since then, copies of it have quietly served as a guru for many start ups and successful projects in Silicon Valley. Neither academic nor faddish, two veteran consultant authors offer real intelligence. This book has totally informed how I do projects. I learned about the myth of overtime, the need for closure and ceremonies, how teams jell, and why everyone should and can have a window. <b>I first read it decades ago and re-read it every time I embark on anything involving more than one person and several years of my life.</b> Unlike a lot of management lore, it is aim at the project level (where I want to be) rather than the large organization. The message in the book touts productivity, without ever mentioning the dreary idea of time management. It's more about optimizing people, and thus the title, Peopleware.
</blockquote>
<p>
As if I needed another reason to love Cool Tools. If you don't have a copy of Peopleware yet, <a href="http://www.amazon.com/exec/obidos/ASIN/0932633439/codihorr-20">what are you waiting for?</a>
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2006-05-31T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/peopleware-revisited/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ Love It, Hate It ]]></title>
<link>https://blog.codinghorror.com/love-it-hate-it/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
<a href="http://www.glump.net/dokuwiki/">Brendan Kidwell</a> noted something interesting about the comments on <a href="http://www.codinghorror.com/blog/archives/000600.html">Trackpoint versus Touchpad</a>:
</p>
<p>
</p>
<blockquote>
You know, I just realized that there is a lot of LOVE and HATE going on, and it doesn't seem to be very unified.
</blockquote>
<p>
<b>Software development is <a href="http://www.codinghorror.com/blog/archives/000699.html">basically a religion</a>.</b> It's not surprising that software developers are predisposed to these kinds of <a href="http://www.codinghorror.com/blog/archives/000247.html">religious arguments</a>. Pick your poison:
</p>
<p>
</p>
<ul>
<li>Linux vs. Windows
</li>
<li>Mac vs. PC
</li>
<li>C# vs. VB.Net
</li>
<li>Ruby vs. Python
</li>
<li>Static typing vs. Dynamic typing
</li>
<li>Spaces vs. Tabs
</li>
</ul>
.. and <a href="http://haacked.com/archive/2006/02/08/OnReligiousWarsinSoftware.aspx">so on, and so on, and so on</a>, ad nauseam.
<p>
I am reminded of Robert Mitchum's character in the movie <a href="http://en.wikipedia.org/wiki/The_Night_of_the_Hunter">The Night of the Hunter</a>, a preacher with the words "love" and "hate" tattooed on his left and right hands:
</p>
<p>
</p>
<p>
</p>
<blockquote>
<img alt="image placeholder" >
<p>
Would you like me to tell you the little story of right-hand/left-hand? The story of good and evil? H-A-T-E! It was with this left hand that old brother Cain struck the blow that laid his brother low. L-O-V-E! You see these fingers, dear hearts? These fingers has veins that run straight to the soul of man. The right hand, friends, the hand of love.
</p>
</blockquote>
<p>
Heavily partisan discussion-- lovers on one side, haters on another-- isn't conducive to civilized discourse. Jon Stewart's <a href="http://www.ifilm.com/ifilmdetail/2652831?htv=12">now-legendary appearance on Crossfire</a> was a textbook indictment of this style of debate. It's not debate at all; it's pure theater. Entertainment. <a href="http://www.codinghorror.com/blog/archives/000630.html">Professional wrestling</a>, if you will.
</p>
<p>
This is a common problem with online reviews at Amazon and other sites. The people most strongly motivated to post reviews are those who either:
</p>
<ol>
<li>had such a good experience with the product that they can't stop talking about how great it is.
</li>
<li>had such a bad experience with the product that they dedicate the next few days of their life to warning everyone they can away from it.
</li>
</ol>
<p>
Either way, you're getting a distorted opinion based on the select few who had a strong enough negative or positive reaction to spur them into action. It may be fun to read, in a partisan sort of way, but it's difficult to distill the vitriol into something you can base a reasonable opinion on. What about the vast, silent audience who liked it despite its flaws?
</p>
<p>
That said, <b>a certain amount of controversy is desirable</b>. If nobody cares enough about what you're doing to tell you that they loved it or that they hated it, it's probably not interesting enough to be good, either. As Kathy Sierra points out, <a href="http://headrush.typepad.com/creating_passionate_users/2005/01/be_brave.html">you should strive for a little controversy</a>:
</p>
<p>
</p>
<blockquote>
If you're out there creating something on the edge, someone's going to hate it. Probably a lot of someones. One thing we noticed from our Amazon reviews was that we get mainly five-stars and one-stars, but not much in the middle. They either love it a lot or they hate it with a passion. Whenever I start to feel bad about a scathing review, I remind myself that Don Norman said, "If someone doesn't really hate your product, it's mediocre." And mediocre is where you SO do not want to go.
<p>
Ever since we started this crazy scheme (18 months ago with the release of the the first book in the series), we've been thinking that the extremeness of our reviews was a good thing, and now someone's confirmed it. A NYTimes article looks at a professor who analyzed Amazon book rankings for, among other things, a book's "controversiality index". From the article:
</p>
<p>
"But the most telling variable is the one star rating. Professor Gronas found that books high on what he called the "controversiality index" are given almost as many one-star as five-star ratings, creating a horseshoe-shaped curve. As it turns out, these books also tend to have high sales."
</p>
</blockquote>
<p>
The last reaction you want to anything you've done is a resounding "Meh." Go out of your way to create something that will inspire people to love it. Unfortunately, that means a few people will probably hate it, too. The love/hate dichotomy has value. But it's also important to maintain perspective. It's all too easy to fall into the trap of framing your discussions in that old timey religious love/hate dynamic.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2006-06-01T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/love-it-hate-it/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ Road Warrior Revisited ]]></title>
<link>https://blog.codinghorror.com/road-warrior-revisited/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
I've been traveling a bit more lately, which reminded me to update my list of <a href="http://www.codinghorror.com/blog/archives/000155.html">recommended laptop travel accessories</a>.
</p>
<p>
Although I was happy with the <a href="http://www.microsoft.com/hardware/mouseandkeyboard/productdetails.aspx?pid=070">Microsoft Notebook Optical Mouse</a>, the snap-in power off switch never worked very well for me. As a result, it got switched on a few times in my laptop bag, leaving me with a dead mouse when I needed it. So I needed a <b>new notebook mouse</b>. I switched to the <a href="http://www.logitech.com/index.cfm/products/details/US/EN,CRID=2146,CONTENTID=9508">Logitech V500</a>:
</p>
<p>
<img alt="image placeholder" >
</p>
<p>
It's got a neat pop-up panel on the bottom which serves three functions:
</p>
<p>
</p>
<ol>
<li>it's a power switch
</li>
<li>it provides a larger, angled profile for comfort
</li>
<li>it serves as a secure storage compartment for the wireless USB receiver
</li>
</ol>
<p>
The solid-state scrolling surface (instead of a wheel) takes a little getting used to, but it works well, and there's a satisfying audible click that plays as you "scroll." It takes up less space than any of the Microsoft notebook mice, too.
</p>
<p>
If you've ever been trapped at a crowded airport with all the power outlets occupied by opportunistic travellers, you'll wish you had brought <b>a mini power strip</b> with you. The <a href="http://www.monstercable.com/power/lineOutlets.asp">Monster Cable Outlets to Go</a> mini power strip looks like it will fit the bill nicely:
</p>
<p>
<img alt="image placeholder" >
</p>
<p>
Too bad it's not available yet. If you can't wait, most hardware stores carry the good old three-port power outlet expander:
</p>
<p>
<img alt="image placeholder" >
</p>
<p>
I also occasionally need to <b>network multiple PCs on the road</b>. Given the prices of today's routers, there's absolutely no reason to carry something that's merely a switch or hub. Consider the <a href="http://www.linksys.com/servlet/Satellite?c=L_Product_C2&amp;childpagename=US%2FLayout&amp;cid=1115416825655&amp;pagename=Linksys%2FCommon%2FVisitorWrapper">Linksys WRT54GC compact wireless router</a>, which I picked up on eBay for under $40 shipped:
</p>
<p>
<img alt="image placeholder" >
</p>
<p>
The newer <a href="http://www.linksys.com/servlet/Satellite?c=L_Product_C2&amp;childpagename=US%2FLayout&amp;cid=1122062241008&amp;pagename=Linksys%2FCommon%2FVisitorWrapper">Wireless-G Travel Router</a> is even smaller, and it plugs directly into the wall, obviating the need for any external power brick.
</p>
<p>
<img alt="image placeholder" >
</p>
<p>
However, it only has one client ethernet port, so it's not suitable as a wired switch. That's kind of a bummer.
</p>
<p>
I still recommend (and use) my <a href="http://www.hawkingtech.com/products/productlist.php?CatID=32&amp;FamID=60&amp;ProdID=280">external USB wireless antenna</a>, and a <a href="http://www.google.com/search?q=retractable+cable+kit">retractable cable kit</a>. Oh yeah, and the <a href="http://www.codinghorror.com/blog/archives/000167.html">portable laptop stand</a> can be a lifesaver, too.
</p>
<p>
What are <i>your</i> essential laptop travel kit items?
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2006-06-02T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/road-warrior-revisited/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ Don't Ask Us Questions. We'll Just Ignore You. ]]></title>
<link>https://blog.codinghorror.com/dont-ask-us-questions-well-just-ignore-you/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
One of the funniest things on the internet, for my money, is Eric S. Raymond's epic FAQ, <a href="http://www.catb.org/~esr/faqs/smart-questions.html">How To Ask Questions The Smart Way</a>.
</p>
<p>
It's 32 pages, 1,066 paragraphs, 10,289 words, and 51,757 characters. That you must read before you ask a technical question of any kind.
</p>
<p>
It opens with this disclaimer, which sets the tone for the entire document:
</p>
<p>
</p>
<blockquote>
We have learned the hard way that without [a notice that this document is not a help desk], we will repeatedly be pestered by idiots who think having published this document makes it our job to solve all the world's technical problems.
<p>
If you're reading this document because you need help, and you walk away with the impression you can get it directly from the authors, you are one of the idiots in question. <b>Don't ask us questions. We'll just ignore you.</b> We are here to show you how to get help from people who actually know about the software or hardware you're dealing with, but 99% of the time that will not be us. Unless you know for certain that one of the authors is an expert on what you're dealing with, leave us alone and everybody will be happier.
</p>
</blockquote>
<p>
And if you dare to ask a question without reading the question FAQ first, well, you're a loser:
</p>
<p>
</p>
<blockquote>
Among hackers, "Good question!" is a strong and sincere compliment.
<p>
Despite this, hackers have a reputation for meeting simple questions with what looks like hostility or arrogance. It sometimes looks like we're reflexively rude to newbies and the ignorant. But this isn't really true.
</p>
<p>
<b>What we are, unapologetically, is hostile to people who seem to be unwilling to think or to do their own homework before asking questions.</b> People like that are time sinks  --  they take without giving back, and they waste time we could have spent on another question more interesting and another person more worthy of an answer. We call people like this "losers" (and for historical reasons we sometimes spell it "lusers").
</p>
</blockquote>
<p>
Of course, <b>users who ask clueless questions haven't the foggiest idea where to find a question FAQ-- and even if they did, they certainly wouldn't have the patience to read it.</b> This inevitable fact of life is utterly and completely lost on <a href="http://en.wikipedia.org/wiki/Eric_S._Raymond">Eric S. Raymond</a>. It'd be funnier if it wasn't so sad.
</p>
<p>
<a href="http://www.despair.com/cluelessness.html"><img alt="image placeholder" >
</p>
<p>
This speaks volumes about the difficulty the open source community has had delivering usable software. You can't fix users by berating and browbeating them into better modes of behavior. What you can do, however, is develop software that is tolerant of mistakes, software that gently guides users in the right direction.
</p>
<p>
But there's one question that nags at me. If we know the intended audience will probably never see it, who exactly <i>was</i> <a href="http://www.catb.org/~esr/faqs/smart-questions.html">How To Ask Questions The Right Way</a> written for?
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2006-06-05T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/dont-ask-us-questions-well-just-ignore-you/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ Programming Your Hands ]]></title>
<link>https://blog.codinghorror.com/programming-your-hands/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>Software developers, like pianists, <strong>rely on their hands to practice their craft</strong>. I've used a keyboard and mouse obsessively since my early teens. Fortunately, I have never had any problems with hand or wrist pain – nor have I experienced any <a href="http://rsi.unl.edu/">Repetitive Stress Injury</a>, which includes <a href="http://www.ninds.nih.gov/disorders/carpal_tunnel/detail_carpal_tunnel.htm">carpal tunnel syndrome</a>. But others <a href="http://www.hanselman.com/blog/TheProgrammersHands.aspx">aren't</a> so <a href="http://haacked.com/archive/2004/06/10/590.aspx">fortunate</a>.</p>
<p>So what can you do to keep your hands and wrists strong under the duress of <i>extreme computing?</i>*</p>
<h3>Get some exercise</h3>
<p><em>Real</em> exercise. Surprisingly, this stuff is good for you, or <a href="http://headrush.typepad.com/creating_passionate_users/2006/04/animals_love_ex.html">so I'm told</a>:<br>
</p>
<blockquote>Want to be a little smarter? Have a better memory? Stay mentally sharp? Improve higher brain function? Run. <a href="http://www.fi.edu/brain/exercise.htm#physicalexercise">Those who exercise have a mental advantage over those who don't</a>.
<p>"…exercisers showed significant improvements in the higher mental processes of memory and in "executive functions" that involve planning, organization, and the ability to mentally juggle different intellectual tasks at the same time. What we found so fascinating was that exercise had its beneficial effect in specific areas of cognitive function that are rooted in the frontal and prefrontal regions of the brain."</p>
<p>The brain-boosting (and prevention of brain decline) effects of physical exercise have been studied nearly to death. The confusing part is why so many humans do not exercise.</p>
</blockquote>
<p>I once took a class in college taught by a clinical psychiatrist. He believed so strongly in the connection between physical health and mental health that he forced all of his patients to undertake an exercise regimen. And his classes, too. Part of our grade was determined by a weekly exercise journal. In the journal, we recorded what exercise we chose, and how we felt before and after. And I'll be damned if I didn't feel better after exercising – every single time!</p>
<p>Of course, talking about the many benefits of exercise is easy. The real difficulty is getting over the inertia and actually doing it regularly. <a href="http://www.codinghorror.com/blog/2007/10/geek-diet-and-exercise-programs.html">We geeks have a certain way of approaching exercise that's … unique</a>.</p>
<h3>Vary your working position</h3>
<p>
It's called <em>repetitive</em> stress injury for a reason. Try changing things up on a regular basis:
</p>
<ul>
<li>Get a <a href="http://www.codinghorror.com/blog/2008/07/investing-in-a-quality-programming-chair.html">more ergonomic chair</a>. </li>
<li>Adjust the <a href="http://www.codinghorror.com/blog/2007/08/computer-workstation-ergonomics.html">position of your desk</a>. </li>
<li>Change your seating position. <a href="http://www.spineuniverse.com/displayarticle.php/article1290.html">Posture adjustments can help</a>. </li>
<li>Try a different keyboard. There are zillions, and I like the <a href="http://www.codinghorror.com/blog/archives/000400.html">ergonomic models</a> the best. Or you can experiment with alternative keyboard layouts, like <a href="http://en.wikipedia.org/wiki/Dvorak_Simplified_Keyboard">Dvorak</a>. </li>
<li>Try a different pointing device. If you're using a mouse, switch to a trackball or a trackpad. Even within mice, there are hundreds of different form factors; a few people here use a <a href="http://solutions.3m.com/wps/portal/3M/en_US/ergonomics/home/products/ergonomicmouse/">joystick-shaped mouse</a>. You could even go with <a href="http://www.naturalpoint.com/">eye tracking</a>. </li>
</ul>
<p>If nothing else, just take a break to stretch every hour or so. Some of the <a href="http://www.eatonhand.com/hw/ctexercise.htm">carpal tunnel prevention stretches</a> are pretty quick and easy to integrate into your day. </p>
<p>
<a href="http://www.eatonhand.com/hw/ctexercise.htm"><img alt="image placeholder" >
</p>
<p>And it might be a good idea to use a different mouse and keyboard at home than you use at work, for variety's sake. It's not just fun to experiment with different mice and keyboards, it's healthier, too.</p>
<h3>Exercise your hands</h3>
<p>
Now we get to the fun stuff.
</p>
<p><a href="http://www.puttyworld.com/">Crazy Aaron's Thinking Putty</a> is my all time favorite desk tchotchke. They have some <a href="http://www.puttyworld.com/supers.html">new super illusion colors</a> that are <i>amazing</i>.</p>
<p>
<a href="http://www.puttyworld.com/"><img alt="image placeholder" >
</p>
<p>Putty is a fascinating, endlessly malleable toy; it's also a legitimate form of hand exercise. And there are lots of cool <a href="http://www.puttyworld.com/thingstodo.html">experiments and tricks</a> you can perform with it, too.</p>
<p>
</p>
<p><img alt="image placeholder" >
<p><img alt="image placeholder" >

<p>The <a href="http://www.powerballs.com/">Powerball</a> is another hit at the office. It's a major gyroscopic hand workout.</p>
<p>
<a href="http://www.amazon.com/dp/B006LVJKGM/?tag=codihorr-20"><img alt="image placeholder" >
</p>
<p>Be sure to <a href="http://www.amazon.com/dp/B006LVJKGM/?tag=codihorr-20">get the model with the RPM readout</a>, because you'll have a lot of fun challenging co-workers to see how fast they can get it to spin. Once they try a few times, they'll have no doubt that this little gyroscopic toy is a serious hand, wrist, and forearm workout! The only downside of the powerball is that it's a little noisy.</p>
<p>
<a href="http://www.amazon.com/dp/B000UMFT22/?tag=codihorr-20"><img alt="image placeholder" >
</p>
<p>The <a href="http://www.prohands.net/">Gripmaster</a> is another popular hand exercise device. It was originally popularized by climbers who used this tool to strengthen their holds. But it's also useful for anyone who works with their hands. <a href="http://www.amazon.com/dp/B000UMFT22/?tag=codihorr-20">It comes in several spring strengths</a>.</p>
<p>Toys, particularly those with therapeutic value, are fun. But if you're experiencing pain in your hands or wrists while programming, you should take it <a href="http://alumnus.caltech.edu/~dank/rsi.htm">very seriously</a> – it's one of the few things that can <a href="http://raibledesigns.com/page/rd?entry=carpal_tunnel1">put you out of commission as a programmer</a>.</p>
<p><small>* I am not a doctor. I'm just some random guy on the internet. So take this advice with a grain, nay, a <em>warehouse</em> full of salt.</small></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2006-06-06T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/programming-your-hands/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
</channel>
</rss>
