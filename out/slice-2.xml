<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
<channel>
<title>Coding Horror</title>
<description>programming and human factors</description>
<link>https://blog.codinghorror.com/</link>
<pubDate>Sun, 19 Apr 2020 00:00:01 GMT</pubDate>
<!-- other elements omitted from this example -->
<item>
<title><![CDATA[ Gee, I Wish I Had Spent More Time Alone With My Computer ]]></title>
<link>https://blog.codinghorror.com/gee-i-wish-i-had-spent-more-time-alone-with-my-computer/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>I was recently reminded of this <a href="http://www.mobygames.com/developer/sheet/view/developerId,8515/">Dani Berry quote</a>:</p>
<blockquote>One of the great pioneers of computer and online gaming, Dani Berry died in 1998. He was born 'Dan Bunten,' but underwent what she always referred to as her "pronoun change" in the early 90s. Some of her aphorisms are still frequently quoted by game developers, including <strong>"No one ever said on their deathbed, 'Gee, I wish I had spent more time alone with my computer.'"</strong>
</blockquote>
<p>Strangely enough, Dani is just one of a <a href="http://www.codinghorror.com/blog/files/Next-Generation-Online-Game-Designers-Just-Wanna-Be-Girls.htm">number of transgendered game designers</a>. But you may remember Dan Bunten as the mind behind 1983's <a href="http://www.worldofmule.net/index.htm">M.U.L.E.</a>, revered by many as among the finest computer games ever published.</p>
<p><img alt="image placeholder" >
<p>M.U.L.E. was <a href="http://mule.eichberger.net/about.php">designed for 4-player multiplayer</a>, a rarity in games of that era:</p>
<blockquote>M.U.L.E. is widely considered considered a groundbreaking classic in multiplayer computer gaming today, but it was widely underestimated at its time. Compared to popular arcade games of the eighties like Arkanoid, Frantic Freddie or The Last Ninja, M.U.L.E. had simple graphics and did not depend on joystick skills. Like chess, it required thinking skills and strategy to win, especially when playing against other human players. M.U.L.E. was somewhat complex to learn, at a time when electronic entertainment was new and simple.</blockquote>
<p>Dani also went on to design <a href="http://www.gamespot.com/gamespot/features/pc/unsung_heroes/sec2_07.html">Modem Wars</a>, which was arguably the first commercially released network multiplayer game:</p>
<blockquote>Basing the design around head-to-head modem play gave Modem Wars an unparalleled fun factor, but it is ultimately what caused the game to fail. Consumer modems in 1988 topped out at 1200 baud and were expensive peripherals. The networking technology employed by Modem Wars ensured that the low bandwidth wasn't a problem, but the relatively low installed base of modems was. The fact that you had to scare up a friend who also had a modem (and a mouse, as most PCs in those days were controlled via the keyboard) didn't help matters.</blockquote>
<p>Programming has been described as "a private love letter between the developer and the hardware", but the explosive growth of the internet <strong>makes me wonder if any developer can truly be alone while using a computer today</strong>. It's hard to imagine using a computer – any computer – without being immersed in IM, blogs, message boards, email, skype, and a dozen other "always on" communication services.</p>
<p>Dani Bunten spent a significant part of her career writing computer games that encouraged social behavior. It was the topic of her final lecture at the 1997 GDC titled <a href="http://web.archive.org/web/20040206233214/http://www.worldofmule.net/mulememo.htm#cgdclecture">Imaginary Playmates in Real-time</a>. It's unfortunate that she didn't live to see the internet fully expose the computer as the social tool she so clearly wanted it to be.</p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2005-05-31T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/gee-i-wish-i-had-spent-more-time-alone-with-my-computer/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ Recursive Page.FindControl ]]></title>
<link>https://blog.codinghorror.com/recursive-pagefindcontrol/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
I'm currently writing my first ASP.NET 2.0 website. VS.NET 2005 is worlds better than VS.NET 2003, but I was mildly surprised to find that Microsoft still hasn't added a recursive overload for <code>Page.FindControl</code>. So, courtesy of <a href="http://weblogs.asp.net/omagnusson/">Oddur Magnusson</a>, here it is:
</p>
<p>
</p>
<pre language="C#">
private Control FindControlRecursive(Control root, string id)
{
if (root.ID == id)
{
return root;
}
foreach (Control c in root.Controls)
{
Control t = FindControlRecursive(c, id);
if (t != null)
{
return t;
}
}
return null;
}
</pre>
<p>
This makes life much easier when you're trying to get to controls that are themselves contained within other containers, eg, a <code>TextBox</code> inside a <code>DataView</code> or <code>DataList</code>. Would it have killed Microsoft to add an overloaded, recursive version of this?
</p>
<p>
One interesting semi-undocumented feature of <code>Page.FindControl</code>: you can specify a full "path" to a control using colons as seperators, like so:
</p>
<p>
</p>
<pre language="C#">
Page.FindControl("DataList1:_ctl0:TextBox3")
</pre>
<p>
That's assuming all the containers in the hierarchy have explicit names. You can view source to determine what the dynamically generated 'null' IDs are.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2005-06-01T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/recursive-pagefindcontrol/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ Are Design Patterns How Languages Evolve? ]]></title>
<link>https://blog.codinghorror.com/are-design-patterns-how-languages-evolve/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
Paul Graham's essay Revenge of the Nerds is a <a href="http://www.paulgraham.com/icad.html">nearly pornographic love letter to Lisp</a>. If you can manage to read all the way to the end, there's an interesting footnote buried at the bottom:
</p>
<p>
</p>
<blockquote>
<a href="http://norvig.com/design-patterns/">Peter Norvig</a> found that 16 of the 23 patterns in Design Patterns were "invisible or simpler" in Lisp.
</blockquote>
<p>
He should have opened the essay with that evidence, because it strengthens his conclusion considerably:
</p>
<blockquote>
In the OO world you hear a good deal about "patterns". <b>When I see patterns in my programs, I consider it a sign of trouble.</b> The shape of a program should reflect only the problem it needs to solve. Any other regularity in the code is a sign, to me at least, that I'm using abstractions that aren't powerful enough-- often that I'm generating by hand the expansions of some macro that I need to write.
</blockquote>
<p>
There's a Wiki entry called <a href="http://c2.com/cgi/wiki?AreDesignPatternsMissingLanguageFeatures">Are Design Patterns Missing Language Features?</a> which expands and elaborates on Paul Graham's hypothesis. It even has a handy chart of the <a href="http://www.amazon.com/exec/obidos/ASIN/0201633612/codihorr-20">classic Gang of Four patterns</a> and the corresponding language features that implement each one. It then degrades into a weird little Wiki-fight, but the saner comments look like this:
</p>
<p>
</p>
<blockquote>
Has anyone ever considered that <b>design patterns are the way that programming languages evolve?</b> In the same way as communicative language, commonly used abbreviations ( or patterns ) may become standard. In english words like "won't" and "isn't" are abbreviations, but are more or less considered standard words today. In the same way, 'if-then-else' or 'do-while' could be considered design patterns that have now become standard features in many languages. Perhaps later languages will include many design patterns as standard features.
</blockquote>
<p>
According to Graham, Lisp is so malleable that design patterns immediately become part of the base language; they are indistinguishable from the original core language constructs. Lisp doesn't need to evolve-- it just instantly <i>becomes</i>. One wonders, then, why Lisp hasn't become sentient and taken over the world by now. As Paul helpfully points out, it could be because <a href="http://www.paulgraham.com/icadmore.html">we're so stupid</a>:
</p>
<p>
</p>
<blockquote>
I also disagree that it is not believable that the vast majority of programmers have been boneheads for 40 years. It seems to me entirely possible.
</blockquote>
<p>
All kidding aside, I tend to agree on two points:
</p>
<ol>
<li>
<b>Excessive reliance on design patterns is indicative of failings in the language</b>. As many commenters in the wiki point out, you'd see dozens of "design patterns" in assembly or C code; these are language features that we take for granted today. We've certainly seen evolution along those lines even in the modest lifetime of .NET so far. There are plenty of "syntactical sugar" constructs such as <code>Using</code> which encapsulate common patterns, and even more (such as <code>Nullable</code> and Generics) on the way.
</li>
<li>
<b>Languages evolve-- slowly.</b> It takes time to figure out the failings, shortcomings, and weaknesses of any language. Even Lisp. That's why <a href="http://www.levenez.com/lang/">the language family tree has roots going all the way back to 1954</a>. New languages are created; old ones fall out of favor. And there's a lot of cross-pollination between family trees. Almost all modern languages have a very complete implementation of regular expressions, which is one of the central features of the PERL language.
</li>
</ol>
<p>
If anything, Lisp is strong evidence that computer language evolution is quite slow; it's one of the oldest languages on <a href="http://www.oreilly.com/news/graphics/prog_lang_poster.pdf">the chart</a>, and we're still adapting features from it.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2005-06-02T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/are-design-patterns-how-languages-evolve/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ Alternative Keyboarding ]]></title>
<link>https://blog.codinghorror.com/alternative-keyboarding/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
The <a href="http://www.codinghorror.com/blog/archives/000209.html">standard computer keyboard</a> is the quintessential human input device. Although it's amazingly adaptable, a recent <a href="http://www.tomshardware.com/game/20050308/">Tom's Hardware review of the Ergodex DX1</a> underscores the limitations of the keyboard as an input device-- and also highlights some of the crazier keyboard alternatives out there:
</p>
<p>
</p>
<blockquote>
<i>
</i><p>
So far, technology hasn't provided us with the ability to customize a hardware interface that meets our individual needs. Thus, we are usually forced to retreat to the 138-year-old quintessence of ubiquity: <a href="http://home.earthlink.net/~dcrehr/whyqwert.html">Christopher Sholes' "QWERTY" keyboard</a>.
</p>
<p>
<img alt="image placeholder" >
</p>
<p>
This is a collection of just a few of the author's pit stops along his quest to find the perfect input peripheral. (The rest can be found in a landfill somewhere.) They are, clockwise from the top: The <a href="http://www.avault.com/hardware/getreview.asp?review=idizmsd&amp;page=2">Devilfish</a>, <a href="http://www.saitek.com/uk/prod/gamerskey.htm">Saitek Command Pad</a>, <a href="http://www.zboard.com/">Ideazon Zboard</a>, Essential Reality's <a href="http://www.vrealities.com/P5.html">P5 Glove</a>, Belkin's <a href="http://catalog.belkin.com/IWCatProductPage.process?Merchant_Id=&amp;Section_Id=2071&amp;pcount=&amp;Product_Id=157024">Nostromo Speedpad N52</a>, and Microsoft's <a href="http://www.neoseeker.com/Articles/Hardware/Reviews/strategiccommander/">Strategic Commander</a>.
</p>
</blockquote>
<p>
Keyboard alternatives have always fascinated me. I've owned two of the peripherals the author lists, and I recently ordered the <a href="http://www.ergodex.com/">Ergodex DX1</a>.
</p>
<p>
<a href="http://www.ergodex.com/content.php?id=20"><img alt="image placeholder" >
</p>
<p>
Unfortunately, my unit arrived DOA and is in the process of being exchanged, but you can read reviews of this unique "have it your way" keyboard in the following places:
</p>
<p>
</p>
<ul>
<li>
<a href="http://www.hanselman.com/blog/GuildWarsAndTheErgoDexDX1.aspx">Scott Hanselman</a>, fellow input junkie
</li>
<li>
<a href="http://hardware.gamespot.com/Story-ST-16045-1849-x-x-x">GameSpot</a>
</li>
<li>
<a href="http://www.extremetech.com/article2/0,1558,1817460,00.asp">ExtremeTech</a>
</li>
<li>
<a href="http://gear.ign.com/articles/605/605225p1.html">IGN</a>
</li>
<li>
<a href="http://www.tomshardware.com/game/20050308/">Tom's Hardware</a>
</li>
</ul>
<p>
None of these devices, including the Ergodex, are positioned as true "throw away your keyboard" alternatives. I'm not sure that's even possible; I can tell you from personal experience that <b>the struggle to defeat a decade of existing keyboard muscle memory is a losing battle</b>. It's really <a href="http://www.mwbrooks.com/dvorak/dissent.html">the same problem the Dvorak keyboard layout has always had</a>. However, these keyboard alternative don't replace but <i>complement</i> your existing keyboard by presenting an optimized subset of what you already know. Even then, it's a tricky business. But I suspect that the extreme flexibility of the Ergodex will make it workable where all the others failed.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2005-06-03T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/alternative-keyboarding/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ The Game Controller Family Tree ]]></title>
<link>https://blog.codinghorror.com/the-game-controller-family-tree/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
Remember when anything you could possibly imagine could be controlled with <a href="http://www.thinkgeek.com/cubegoodies/toys/5d39/">a single stick and a single button</a>? Trace the evolution of human interaction in video gaming from 1980 to the present through this <a href="http://www.axess.com/twilight/console/index.html">remarkable visual game controller family tree</a>.
</p>
<p>
<a href="http://www.axess.com/twilight/console/index.html"><img alt="image placeholder" >
</p>
<p>
This tree isn't quite as complete as I would like (where is the Odyssey2, for example), but it's got the major players. I had half forgotten how weird the controllers with keypads were, and that the Atari Jaguar was the last console to adopt this oddball convention. Input conventions have certainly changed a lot over the last 20 years; the most profound change-- single digital axis to dual analog axes-- was prompted by the broad switch from 2D to 3D games around 1997.
</p>
<p>
If you're feeling particularly retro, you can pick up a modern USB incarnation of the no-frills Atari 2600 joystick that started it all for <a href="http://www.redoctane.com/atarigamejoystick.html">a mere five bucks</a>.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2005-06-04T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/the-game-controller-family-tree/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ x86 Uber Alles ]]></title>
<link>https://blog.codinghorror.com/x86-uber-alles/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
I guess John Gruber <a href="http://daringfireball.net/2005/06/intel_apple_odds_and_ends">isn't as savvy</a> as he <a href="http://daringfireball.net/2005/05/intelmania">thought he was</a>:
</p>
<p>
<a href="http://news.yahoo.com/s/ap/apple_chips;_ylt=Amq8XRa8MRu3eIbCRFbpHlADW7oF;_ylu=X3oDMTBiMW04NW9mBHNlYwMlJVRPUCUl">Apple Announces Switch to Intel Chips</a>
</p>
<p>
After seeing NT slowly shed its <a href="http://www.windowsitpro.com/Article/ArticleID/7153/7153.html">MIPS, Alpha, and PPC versions,</a> you have to wonder: will our children be using architectures that emulate some form of x86?
</p>
<p>
Even with a flash new CPU powering it, <b>Apple's OSX has some performance issues of its own to resolve</b>. A recent AnandTech article by Johan De Galas documents <a href="http://www.anandtech.com/mac/showdoc.aspx?i=2436&amp;p=1">OSX running Apache and MySQL 5-10 times slower than Linux on the same hardware</a>. This is evidently due to a bizarre "worst of both worlds" kernel architecture where applications have no access to the kernel-level threads commonly used for performance reasons on Windows and Linux:
</p>
<blockquote><i>
The server performance of the Apple platform is, however, catastrophic. When we asked Apple for a reaction, they told us that some database vendors, Sybase and Oracle, have found a way around the threading problems. We'll try Sybase later, but frankly, we are very sceptical. The whole "multi-threaded Mach microkernel trapped inside a monolithic FreeBSD cocoon with several threading wrappers and coarse-grained threading access to the kernel", with a "backwards compatibility" millstone around its neck sounds like a bad fusion recipe for performance.
</i></blockquote>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2005-06-06T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/x86-uber-alles/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ Compression and Cliffs ]]></title>
<link>https://blog.codinghorror.com/compression-and-cliffs/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
I set up a number of Windows XP SP2 Virtual PC base images today. A WinXP SP2 clean install, after visiting Windows Update, is <b>1.70 gigabytes</b>. Building up a few baseline images like this can chew up a substantial amount of disk space and network bandwidth. So, taking <a href="http://thedotnet.com/blogs/jon_galloway/archive/2005/05/07/343015.aspx">a page from Jon Galloway's book</a>, I decided to see what I'd get if I compressed the virtual hard drive file. My results?
</p>
<p>
</p>
<table>
<tr>
<td>App</td>
<td>Size</td>
<td>Time taken (approx)
</td>
</tr>
<tr>
<td><b>WinZip 9.0 SR-1</b></td>
<td>880 megabytes</td>
<td>3 minutes
</td>
</tr>
<tr>
<td><b>7Zip 4.20</b></td>
<td>739 megabytes</td>
<td>
<span style="color:red;">22 minutes</span>
</td>
</tr>
</table>
<p>
(All apps were used with out of box defaults). I do end up with a file that is 17% smaller, <b>but it takes 7.3 times longer</b>. That sure doesn't seem like a very good deal to me. Now, in fairness to Jon, his only goal was to squeeze a largish 10gb VHD image into a single 4.7 gigabyte DVD-R; compression time wasn't a criteria.
</p>
<p>
Although this is my first exposure to 7zip, I've run these kinds of comparions before with ZIP and RAR and reached the same conclusion. Although there are certainly different algorithmic efficiencies, no matter what compression algorithm you choose-- <b>beyond a certain optimal compression level, performance falls off a cliff.</b> After you hit that point, you'll spend obscene amounts of time for rapidly diminishing benefits. Nowhere is this better illustrated than in Wim Heirman's <a href="http://www.elis.ugent.be/~wheirman/compression/">Practical Compressor Test</a> results:
</p>
<p>
<img alt="image placeholder" >
</p>
<p>
Note that the scale on the bottom of the graph is <i>logarithmic</i>. This is the only comparison I could find that properly expresses compression as the zero-sum game it really is: you can either have efficiency, or you can have speed. That's why, except for the truly obsolete algorithms, you see the "diagonal line" effect on this graph: better compression algorithms always take longer. Sometimes a <i>lot</i> longer. If you're holding out for Hyper Turbo Extreme Compression X algorithm, you may be waiting a while. Consider RAR, which offers the best blend of compression and speed currently available:
</p>
<p>
</p>
<table>
<tr>
<td>Level</td>
<td>Time (secs)</td>
<td>Compression ratio</td>
<td>Time factor</td>
<td>Gain
</td>
</tr>
<tr>
<td>-m1</td>
<td>5.7</td>
<td>22.1%</td>
<td>1x</td>
<td>-
</td>
</tr>
<tr>
<td>-m2</td>
<td>28.3</td>
<td>14.5%</td>
<td><span style="color:red;">5x longer</span></td>
<td>
<span style="color:red;">7.6% smaller</span>
</td>
</tr>
<tr>
<td>-m3</td>
<td>40.2</td>
<td>13.4%</td>
<td><span style="color:red;">7x longer</span></td>
<td>
<span style="color:red;">8.7% smaller</span>
</td>
</tr>
<tr>
<td>-m4</td>
<td>40.2</td>
<td>13.1%</td>
<td><span style="color:red;">7x longer</span></td>
<td>
<span style="color:red;">9.0% smaller</span>
</td>
</tr>
<tr>
<td>-m5</td>
<td>46.7</td>
<td>12.5%</td>
<td><span style="color:red;">8x longer</span></td>
<td>
<span style="color:red;">9.6% smaller</span>
</td>
</tr>
</table>
<p>
<b>When it takes 5 times longer for barely 8% more compression, you've fallen off a cliff.</b> But it still might be worth the extreme cost, depending on your goals. For most usages, it boils down to these three questions:
</p>
<ol>
<li>How often will your data be compressed?
</li>
<li>How many times will it be transferred?
</li>
<li>How fast is the network?
</li>
</ol>
<p>
Decompression time in this scenario is usually a tiny, relatively constant fraction of the compression time, so it's not a factor. Wim provides <a href="http://www.elis.ugent.be/~wheirman/compression/index.php#ranking">a helpful calculator</a> to assist in making this decision:
</p>
<p>
</p>
<blockquote>
<i>
total time = compression time + n * (compressed file size / network speed + decompression time)
</i><p>
For instance, if you compress a file to send it over a network once, n equals one and compression time will have a big influence. If you want to post a file to be downloaded many times, n is big so long compression times will weigh less in the final decision. Finally, slow networks will do best with a slow but efficient algorithm, while for fast networks a speedy, possibly less efficient algorithm is needed.
</p>
</blockquote>
<p>
Of course, there are still a few variables Wim's page hasn't considered. Most notably, he only compresses a single file (the GIMP source TAR file), which has two consequences:
</p>
<ol>
<li>Filetype specific compression can perform far better than the generic compression considered here. Compression tailored to file contents (eg, <a href="http://www.firstpr.com.au/audiocomp/lossless/">lossless audio compression</a>) is generally a huge win.
</li>
<li>When compressing groups of files, programs that can do "solid" archiving will always outperform those that can't. Solid archiving means that the files are compressed as one giant binary blob and not as a bunch of individual files. This provides a much higher level of overall compression due to (generally) repeated data between files.
</li>
</ol>
<p>
No one set of benchmarks offers a complete picture. <a href="http://www.maximumcompression.com/benchmarks/benchmarks.php">Most other compression benchmark pages</a> tend to focus on absolute compression ratios to the detriment of all other variables, which is a little crazy once you've fallen off the cliff. On Wim's page, the slowest three times are 198 (7zip), 47 (rar), and 43 (bzip2) seconds respectively. Some of the <a href="http://www.cs.fit.edu/~mmahoney/compression/">more extreme space-optimized compression algorithms</a> can take <b>several hours to compress the same file!</b>
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2005-06-07T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/compression-and-cliffs/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ Flickr Hacks ]]></title>
<link>https://blog.codinghorror.com/flickr-hacks/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
There's so much buzz around Flickr right now it's practically deafening. Or maybe I should say <i>blinding</i>, because Flickr is a collaborative photo sharing service. I was perplexed why Yet Another Photo Sharing Website was so hot until I started browsing the myriad hacks and tools available for this site. Flickr has a <a href="http://www.flickr.com/services/api/">web API</a>, and there's a .NET wrapper around that API available at <a href="http://flickrdotnet.wdevs.com/Default.aspx?tabid=56">Flickr.NET</a>. It's truly astonishing; a case study in what having an open API and community-driven content can do for your business. Here are some of the cooler Flickr hacks (warning-- heavy use of Flash ahead)
</p>
<p>
</p>
<ul>
<li>
<a href="http://krazydad.com/colrpickr/">Flickr color picker</a>. Shows all pictures for any given color you click in the color wheel. Quite mesmerizing.
</li>
<li>
<a href="http://www.airtightinteractive.com/projects/flickr_postcard_browser/app/">Flickr postcard browser</a>. Photos are "tagged" in Flickr with various descriptive words by the users. This is a quick way to browse around a specific tag.
</li>
<li>
<a href="http://www.airtightinteractive.com/projects/related_tag_browser/app/">Flickr related tag browser</a>. This is like the postcard browser, but it also shows related tags that are frequently associated with whatever tag you're browsing in a ring around the pictures. Fantastic for browsing around and getting a sense of what tags are in use.
</li>
<li>
<a href="http://www.marumushi.com/apps/flickrgraph/flickrgraph.cfm">FlickrGraph</a>. Flickr also contains social networks-- users who mark each other's photos as "favorites". This tool lets you map out the relationships between users in graphical form.
</li>
<li>
<a href="http://www.kokogiak.com/flickreplacr.html">Flickr Replacer</a>. A neat bookmarklet that takes any highlighted word on the web page and replaces it with an image representing that word (via tags, of course). Perfect for getting your <a href="http://en.wikipedia.org/wiki/Rebus">rebus</a> on.
</li>
<li>
<a href="http://metaatem.net/words/test">Spell with Flickr</a>. Spells a word of your choice using Flickr images representing each of the letters.
</li>
</ul>
<p>
As you can see from the above sampling, <b>Flickr is all about tags</b>. There's a neat <a href="http://www.flickr.com/photos/tags/">page on Flickr that shows the most popular tags at any given moment</a>.
</p>
<p>
Amateur photographers take far better pictures, on the whole, than I could have ever possibly imagined. After seeing this, who needs professional photographers? Still, there's a big gap between the good and great pictures. My biggest frustration with flickr is that <b>there's no rating system for the pictures</b>. You can only browse pictures by user, or by keyword. I have a hard time coming up with tag keywords (frogs? dogs? clouds? graffiti?), and I don't really know any Flickr users. I'd rather just subscribe to some feed of highly rated pictures. Sort of an <a href="http://amihotornot.com">AmIHOTorNOT</a> for photos, but hopefully without the prurience and desperation.
</p>
<p>
This is, of course, only the tip of the iceberg. There's an exhaustive list of all the Flickr hacks at <a href="http://pchere.blogspot.com/2005/03/great-flickr-tools-collection.html">The Great Flickr Tools Collection</a>.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2005-06-08T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/flickr-hacks/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ Visual Studio .NET 2003 and 2005 Keyboard Shortcuts ]]></title>
<link>https://blog.codinghorror.com/visual-studio-net-2003-and-2005-keyboard-shortcuts/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><style type="text/css">
.kbd {font-family:arial,helvetica,sans-serif;padding:5px 3px;white-space:nowrap;color:#000;background:#eee;border-width:2px 4px 5px 3px;border-style:solid;border-color:#ccc #aaa #888 #bbb;}
.i20{margin:15px 30px;}
</style>
<p>
I've been trying to improve my use of keyboard shortcuts in Visual Studio .NET.  Here are the ones I use most often, what I consider my "core" keyboard shortcuts:
</p>
<p>Go to declaration
</p>
<p class="i20"><span class="kbd">F12</span>
</p>
<p>Debug: step over
</p>
<p class="i20"><span class="kbd">F10</span>
</p>
<p>Debug: run to cursor
</p>
<p class="i20"><span class="kbd">ctrl</span> + <span class="kbd">F10</span>
</p>
<p>Debug: step into
</p>
<p class="i20"><span class="kbd">F11</span>
</p>
<p>Debug: step out
</p>
<p class="i20"><span class="kbd">shift</span> + <span class="kbd">F11</span>
</p>
<p>Toggle a breakpoint
</p>
<p class="i20"><span class="kbd">F9</span>
</p>
<p>Go to next item in task list or search results
</p>
<p class="i20"><span class="kbd">F8</span>
</p>
<p>Go to previous item in task list or search results
</p>
<p class="i20"><span class="kbd">shift</span> + <span class="kbd">F8</span>
</p>
<p>Switch to code view
</p>
<p class="i20"><span class="kbd">F7</span>
</p>
<p>Switch to designer view
</p>
<p class="i20"><span class="kbd">shift</span> + <span class="kbd">F7</span>
</p>
<p>Run with debugging
</p>
<p class="i20"><span class="kbd">F5</span>
</p>
<p>Stop debugging
</p>
<p class="i20"><span class="kbd">shift</span> + <span class="kbd">F5</span>
</p>
<p>Run without debugging
</p>
<p class="i20"><span class="kbd">ctrl</span> + <span class="kbd">F5</span>
</p>
<p>Move to previous edit point (back)
</p>
<p class="i20"><span class="kbd">ctrl</span> + <span class="kbd">-</span>
</p>
<p>Switch to the Task List
</p>
<p class="i20"><span class="kbd">ctrl</span> + <span class="kbd">alt</span> + <span class="kbd">K</span>
</p>
<p>Switch to the Immediate window
</p>
<p class="i20"><span class="kbd">ctrl</span> + <span class="kbd">alt</span> + <span class="kbd">I</span>
</p>
<p>Switch to the Output window
</p>
<p class="i20"><span class="kbd">ctrl</span> + <span class="kbd">alt</span> + <span class="kbd">O</span>
</p>
<p>Find
</p>
<p class="i20"><span class="kbd">ctrl</span> + <span class="kbd">F</span>
</p>
<p>Find in all files
</p>
<p class="i20"><span class="kbd">ctrl</span> + <span class="kbd">shift</span> + <span class="kbd">F</span>
</p>
<p>Replace
</p>
<p class="i20"><span class="kbd">ctrl</span> + <span class="kbd">H</span>
</p>
<p>Incremental find (it's pure sex!)
</p>
<p class="i20"><span class="kbd">ctrl</span> + <span class="kbd">I</span>
</p>
<p>
<s>I'm still struggling to find a keyboard shortcut that sets the input focus back to the code window after doing a ctrl+alt+O or ctrl+alt+K.</s> As it turns out, that key is
</p>
<p class="i20"><span class="kbd">Esc</span>
</p>
<p>
</p>
<p>
But enough about me. <b>Which keyboard shortcuts do <i>you</i> use most often?</b>
</p>
<p>
The best early reference for keyboard shortcuts in VS.NET 2003 was <a href="http://safari.oreilly.com/?x=1&amp;mode=section&amp;sortKey=title&amp;sortOrder=asc&amp;view=&amp;xmlid=0-596-00360-9">Mastering Visual Studio .NET</a>;  Appendix C contains <a href="http://safari.oreilly.com/?XmlId=0-596-00360-9/mastvsnet-APP-C">an excellent reference table</a> of all the keyboard shortcuts in .NET.
</p>
<p>
As good as that reference table is, <b>you can generate a better keyboard reference yourself</b> using my <a href="http://www.codinghorror.com/blog/archives/000412.html">improved keyboard shortcut enumerator macro</a>.*
</p>
<p>
<img alt="image placeholder" >
</p>
<p>
It groups the results by scope and sorts by primary keyboard key so related key accelerators are all displayed together (eg, F5, ctrl+F5, shift+F5, etc).
</p>
<p>
The <a href="http://www.codinghorror.com/blog/archives/000412.html">macro</a> works in VS.NET 2003 and VS 2005, and unless you are a total Visual Studio Ninja<sup>tm</sup> I guarantee you'll find at least a few keyboard shortcuts in there that you didn't know about. I also did a diff on the resulting files to see <b>what keyboard shortcuts have changed in Visual Studio 2005</b>:
</p>
<ul>
<li>
<a href="http://www.codinghorror.com/blog/files/Visual%20Studio%20.NET%202003%20Keyboard%20Shortcuts.htm">VS.NET 2003 Keyboard Shortcuts</a>
</li>
<li>
<a href="http://www.codinghorror.com/blog/files/Visual%20Studio%20.NET%202005%20Keyboard%20Shortcuts.htm">VS.NET 2005 Keyboard Shortcuts</a>
</li>
<li>
<a href="http://www.codinghorror.com/blog/files/new%20visual%20studio%20net%202005%20beta%202%20keyboard%20shortcuts.html">Keyboard shortcuts that are new to VS.NET 2005</a>
</li>
</ul>
<p>
* Originally based on an <a href="http://www.mobydisk.com/softdev/techinfo/dotnetkeyboard.html">earlier macro</a> I discovered.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2005-06-09T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/visual-studio-net-2003-and-2005-keyboard-shortcuts/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ Phantom DOS files in my root ]]></title>
<link>https://blog.codinghorror.com/phantom-dos-files-in-my-root/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
Maybe it's just my <a href="http://www.ocfoundation.org/">OCD kicking in again</a>, but it's incredibly annoying how these phantom, zero-byte <a href="http://searchwin2000.techtarget.com/sDefinition/0,,sid1_gci214057,00.html">IO.SYS</a> and <a href="http://www.annoyances.org/exec/show/article07-021">MSDOS.SYS</a> files keep showing up in the root of my c: drive on every computer I own.
</p>
<p>
<img alt="image placeholder" >
</p>
<p>
It's a gentle reminder of the Bad Old Days. The last time I checked, I wasn't running DOS 6.22, Win95, Win98SE, or even WinME. <b>No matter how many times I delete these spurious DOS-related files, the next time I look-- they're back</b>.  What's next? <a href="http://www.computerhope.com/ac.htm">AUTOEXEC.BAT and CONFIG.SYS</a>? <a href="http://users.cybercity.dk/~bse26236/batutil/help/HIMEM_S.HTM">HIMEM.SYS</a> and optimizing my high memory area? Argh.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2005-06-13T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/phantom-dos-files-in-my-root/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ Formatting HTML code snippets with Ten Ton Wrecking Balls ]]></title>
<link>https://blog.codinghorror.com/formatting-html-code-snippets-with-ten-ton-wrecking-balls/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
If you've ever tried to cut and paste code from the VS.NET IDE, you may have noticed that the code generally comes across looking like crap. The root of this problem is that VS.NET copies code into your clipboard in <a href="http://www.codinghorror.com/blog/archives/000107.html">the accursed Rich Text Format</a>. If you were expecting something like standard HTML, <i>think again, bucko!</i>
</p>
<p>
Brad Abrams posted a quick and dirty workaround <a href="http://blogs.msdn.com/brada/archive/2004/10/05/238427.aspx">to convert the clipboard to HTML using Word</a>. Cory Smith took that workaround and turned it into a <a href="http://addressof.com/blog/archive/2004/10/06/966.aspx">VS.NET Macro</a>. It works fairly well, but...
</p>
<ul>
<li>Using Word automation to color-code a code snippet in your clipboard is... not exactly lightweight. But my motto is, <b>why use a hammer when you can use a frickin' ten ton wrecking ball?!</b>
</li>
<li>Word doesn't seem to pick up background colors, only foreground colors. That's kind of a bummer.
</li>
<li>The resulting HTML is kinda nasty, even though we are specifically asking for Word's simplified "filtered" HTML. But it does work in Firefox and IE just fine.</li>
</ul>
<p>
I experimented with Cory's macro, simplifying it slightly, and forcing a standard font. (I normally <a href="http://www.codinghorror.com/blog/archives/000157.html">use a custom font for programming</a>, but not everyone will have that font installed.) </p> I knew Word's HTML wasn't going to be optimal, but after taking a closer look at it, I was profoundly unhappy with it. The fact that copying and pasting it back into VS.NET resulted in extra line breaks was kind of a showstopper, too. Here's a little taste:
<p>
</p>
<pre>
&lt;P class=MsoNormal style="MARGIN: 0in 0in 0pt"&gt;
&lt;SPAN style="FONT-SIZE: 9pt; FONT-FAMILY: 'Courier New';
mso-bidi-font-size: 12.0pt"&gt; &lt;o:p&gt;&lt;/o:p&gt;
</pre>
<p>
If this is Word's idea of "filtered" HTML, I'd hate to see the unfiltered version. And what's up with those empty &lt;o:p&gt; tags all over the place? After I figured out the <a href="http://mail.localplanet.co.uk/Blogs/stuart/archive/0001/01/01/OneNoteInsertHyperlink.aspx">threading issue preventing me from accessing the clipboard in a macro</a>, I added some code to postfix Word's crazy HTML into something resembling standard, basic HTML. This worked OK.
</p>
<p>
But then I wondered-- <b>why not convert the native RTF on the clipboard to HTML myself and cut out the middleman?</b> I'm all for using ten ton wrecking balls, but not when they er.. wreck stuff! Fortunately, I've written RTF to HTML converters before, and even more fortunately, VS.NET only uses a tiny subset of RTF to place colored code on the clipboard. Here's the main conversion function:
</p>
<p>
</p>
<pre language="vb.net">
Private Function RtfToHtml(ByVal rtf As String) As String
Const tabSpaces As String = "&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"
'-- remove line breaks
rtf = Regex.Replace(rtf, "[nrf]", "")
'-- parse RTF color table
Dim colorTable As New Collections.Hashtable
Dim i As Integer = 1
For Each m As Match In Regex.Matches(rtf, _
"red(?&lt;red&gt;d+)green(?&lt;green&gt;d+)blue(?&lt;blue&gt;d+);")
colorTable.Add(i, HtmlColor(m))
i += 1
Next
'-- remove header and footer RTF tags
rtf = Regex.Replace(rtf, "{rtf1[^s]+s", "")
rtf = Regex.Replace(rtf, "}$", "")
rtf = Regex.Replace(rtf, "deff0{fonttbl{fd+[^}]+}}", "")
rtf = Regex.Replace(rtf, "{colortbl;(redd+greend+blued+;)+}", "")
'-- fix escaped C# brackets
rtf = Regex.Replace(rtf, "{", "{")
rtf = Regex.Replace(rtf, "}", "}")
'-- replace any HTML-specific characters
rtf = Web.HttpUtility.HtmlEncode(rtf)
'-- convert RTF tags to HTML tags
rtf = Regex.Replace(rtf, "tabs", tabSpaces)
rtf = Regex.Replace(rtf, "pars", "&lt;br/&gt;" &amp; Environment.NewLine)
'-- remove unmapped RTF tags
rtf = Regex.Replace(rtf, "fs(?&lt;size&gt;d+)s", "")
rtf = Regex.Replace(rtf, "cbd+highlightd+s", "")
'-- map foreground color RTF tags using &lt;font&gt; tag
rtf = Regex.Replace(rtf, "cf0s", "&lt;/span&gt;&lt;span style='color:black'&gt;")
For Each m As Match In Regex.Matches(rtf, "cf(?&lt;num&gt;d+)s")
i = Convert.ToInt32(m.Groups("num").Value)
rtf = Regex.Replace(rtf, "cf" &amp; i &amp; "s", _
"&lt;/span&gt;&lt;span style='color:" &amp; colorTable.Item(i) &amp; "'&gt;")
Next
'-- fix up orphaned spans at start and end
rtf = Regex.Replace(rtf, "(^.*?)&lt;/span&gt;", "$1")
rtf = rtf &amp; "&lt;/span&gt;"
'-- convert remaining spaces to HTML spaces
rtf = Regex.Replace(rtf, "  ", "&amp;nbsp;&amp;nbsp;")
'-- add wrapping div
rtf = "&lt;div style='font-family:" &amp; CodeFontName &amp; _
"; font-size: " &amp; CodeFontSize &amp; "pt;'&gt;" &amp; _
rtf &amp; "&lt;/div&gt;"
Return rtf
End Function
</pre>
<p>
All this RTF spelunking revealed an interesting fact. I've always been disappointed that none of the copied code had background color highlighting. Well, that's because <b>the RTF on the clipboard doesn't contain any of the background colors!</b> The actual background formatting codes are there, but there are absolutely no entries in the RTF color table for them. Weird.
</p>
<p>
<span style="color:red;"><b>Update 4/2006:</b> I have a <a href="http://www.codinghorror.com/blog/archives/000429.html">much improved RTF conversion macro</a>. This macro is only interesting for historical reasons, or if you need the Word interop conversion.</span>
</p>
<p>
Anyway, here's the full <a href="http://www.codinghorror.com/blog/files/FormatToHtml_macro.zip">FormatToHtml macro (zip)</a>. It contains the direct RTF clipboard to HTML conversion, as well as the RTF clipboard to Word clipboard to HTML conversion. To get started:
</p>
<p>
</p>
<ol>
<li>go to Tools - Macros - IDE
</li>
<li>create a new Module named "FormatToHtml" under "MyMacros"
</li>
<li>paste the downloaded code into the module
</li>
<li>add references to System.Drawing, System.Web, and System.Windows.Forms via the Add Reference menu
</li>
<li>save and close the macro IDE window
</li>
<li>go to Tools - Macros - Macro Explorer
</li>
<li>two new macros named "UsingWord" and "UsingRtfConversion" will be under "FormatToHtml":
<p>
<img alt="image placeholder" >
</p>
<p>
Double-click to run the macro, then paste away..</p>
</li>
</ol>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2005-06-14T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/formatting-html-code-snippets-with-ten-ton-wrecking-balls/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ Where Are The .NET Blogging Solutions? ]]></title>
<link>https://blog.codinghorror.com/where-are-the-net-blogging-solutions/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
Owen Winkler put together <a href="http://www.asymptomatic.net/blogbreakdown.htm">an overview of all self-installable blogging software</a>, circa mid-2004. After surveying his options, he notes one clear trend:
</p>
<p>
</p>
<blockquote>
Even more dishearteningÃ¢â‚¬Â¦ <b>.Text is the only blogware that anyone suggested for the Windows platform.</b> I asked and asked about it because I wanted to give Windows a fair shake. Well, it seems that the only thing that .net developers care about is .net. That is, who cares about the applications you can create with it as long as you have this wonderful language to create them with. I wish them well in ever getting anyone off the ground with .Text, since I couldn't even figure out how to get a copy. Yeah, it was that user-unfriendly.
</blockquote>
<p>
To be fair, the comparison is a year old, and it doesn't include <a href="http://sourceforge.net/projects/dasblogce/">DasBlog</a>, which is unfortunate. But even after accounting for those factors, the question remains-- why are there so many PHP/MySql solutions for self-install blogging software, and only two for .NET? He makes an interesting observation in <a href="http://asymptomatic.net/wp/2004/05/28/568/blogware-choice/">a followup post</a>:
</p>
<p>
</p>
<blockquote>
I want to like .Text because I'm running on a Windows server. But the fact of the matter is that (as the anonymous commenter above makes an excellent example) <b>the only thing that the .net developers seem to care about is pretty code/pretty language. They don't care if the software works. They don't care if the software is easily installed. They don't care what the software depends on in order to run.</b>
<p>
.Text is too complicated for the average user to use. There seem to be different versions of the software depending on what you want. And anyone who is not a developer will have a devil of a time trying to work the gotdotnet workspace. Ick.
</p>
<p>
The code in WordPress is admittedly a bit messy. But any coder worth his salt (and I'll make this hasty generalization in a heartbeat - not the myriad of erudite but inexperienced VB devs) can easily figure it out.
</p>
<p>
This leads me to my final conclusion that .net developers (especially those coding blog software) just don't "get it". I'm sure in a few years after everyone is done cooing over .net itself, .net developers will start to focus back on the user instead of how nice their new toy is.
</p>
</blockquote>
<p>
.Text is now <a href="http://communityserver.org/">Community Server</a>, but I've installed Community Server and I feel this is a valid criticism.
</p>
<p>
Of course, I'm one to talk, since I am running a WIMP (Windows - IIS - MySql - Perl) blog solution myself. Doh!
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2005-06-15T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/where-are-the-net-blogging-solutions/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ The Pontiac Aztek and the Perils of Design by Committee ]]></title>
<link>https://blog.codinghorror.com/the-pontiac-aztek-and-the-perils-of-design-by-committee/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
In a <a href="http://www.jnd.org/RecentPressCoverage.html">recent interview</a>, Don Norman warns of the perils of design by committee:
</p>
<p>
</p>
<blockquote>
<b>You don't do good software design by committee. You do it best by having a dictator.</b> From the user's point of view, you must have a coherent design philosophy, and I don't see how that could come about from open source software. The person who's done it best is Steve Jobs, and he's well-known for being a tyrant.
</blockquote>
<p>
Nowhere are those perils illustrated better than in this <a href="http://news.yahoo.com/news?tmpl=story&amp;u=/washpost/20050611/ts_washpost/biggest_automaker_needs_big_changes">cautionary tale from General Motors</a>:
</p>
<p>
</p>
<blockquote>
In the mid-1990s, then-General Motors Corp. Chairman John G. Smale decided to bring the world's biggest automaker a dose of the give-the-people-what-they-want ethic that had animated Smale's old company, Procter &amp; Gamble Co. And what the people wanted was sexy, edgy and a bit off-key; in short, a head-turner. General Motors' culture took over from there. <b>Design would be by committee, the focus groups extensive. And production would have to stick to a tight budget, with all that sex appeal packed onto an existing minivan platform.</b> The result rolled off the assembly line in 2000: <b>the Pontiac Aztek, considered by many to be one of the ugliest cars produced in decades and a flop from Day One.</b>
</blockquote>
<p>
<img alt="image placeholder" >
</p>
<p>
What's worse, the Aztek was actually a good idea at the right time. It was killed by poor execution:
</p>
<p>
</p>
<blockquote>
The Aztek represented all that is wrong with GM's design process, that official said. The concept car actually did something few GM designs do: arrive before a trend -- this time, the crossover SUV that combines the attributes of a truck and a passenger car. And GM had high hopes to sell 50,000 to 70,000 Azteks a year, establishing Pontiac on the cutting edge.
<p>
Then came production, the executive said. The penny-pinchers demanded that costs be kept low by putting the concept car on an existing minivan platform. That destroyed the original proportions and produced the vehicle's bizarre, pushed-up back end. But the designers kept telling themselves it was good enough. <b>"By the time it was done, it came out as this horrible, least-common-denominator vehicle where everyone said, 'How could you put that on the road?'"</b> the official said.
</p>
<p>
Sales never reached the 30,000 level needed to make money on the Aztek, so it abruptly went out of production last year. The tongue-in-cheek hosts of National Public Radio's "Car Talk" named it the ugliest car of 2005. "It looks the way Montezuma's revenge feels," one listener quipped.
</p>
</blockquote>
<p>
The Pontiac Aztek is such an egregious case of compromised design that it is referenced multiple times in Steve McConnell's <a href="http://www.amazon.com/exec/obidos/ASIN/0735619670/codihorr-20">Code Complete 2</a>:
</p>
<p>
</p>
<blockquote>
Maybe you think the Pontiac Aztek was the greatest car ever made, belong to the Flat Earth Society, and make a pilgrimage to the alien landing site at Roswell, New Mexico, every four years. If you do, go ahead and believe that requirements won't change on your projects. (p.40)
<p>
If we didn't know about geometric shapes like circles, squares, and triangles, for example, we might come up with more unusual shapes like squash shape, rutabaga shape, and Pontiac Aztek shape. (p.152)
</p>
<p>
This technique is useful about as often as you find someone who would rather have a used Pontiac Aztek than a new Corvette. (p. 365)
</p>
</blockquote>
<p>
I was intrigued by the number of times the Aztek was referenced in the book-- three times is not a coincidence. And at least one international reader was a little miffed since he <a href="http://www.amazon.com/gp/cdp/member-reviews/A2IYKLZWSLSH44/ref=cm_aya_rev_more/103-8135153-6651000?%5Fencoding=UTF8">had no idea what the Pontiac Aztek was</a>:
</p>
<p>
</p>
<blockquote>
Another thing I didn't appreciate is the use of a few American comparisons and references. I presume the book is written for an international audience, in which case such culture-specific idioms should be avoided. The Pontiac Aztek is featured quite prominently (never having seen one, nor being aware of its reputation, I have no idea whether the choice for that particular car has any meaning, be it positive or negative). I also remember at least one reference to some sports terminology which is obsure to most non-Americans, probably baseball-related. [..] Only four stars due to the superficial discussion of some interesting topics and the Pontiac Aztek references.
</blockquote>
<p>
The Aztek is uniquely American. And too often, <a href="http://headrush.typepad.com/creating_passionate_users/2005/04/difference_betw.html">so is the least common denominator result of design by committee</a>.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2005-06-16T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/the-pontiac-aztek-and-the-perils-of-design-by-committee/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ Why Anyone Can Succeed ]]></title>
<link>https://blog.codinghorror.com/why-anyone-can-succeed/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
In <a href="http://www.codinghorror.com/blog/archives/000187.html">who needs talent when you have intensity</a>,  I proposed that success has very little to do with talent. This <a href="http://draginol.joeuser.com/index.asp?aid=20053">blog entry by Brad Wardell</a> offers even more proof:
</p>
<p>
</p>
<blockquote>
In 1992, OS/2 came out and I felt I could get a competitive advantage by pre-loading OS/2 onto the computers I sold. I became quite familiar with OS/2.  In early 1993, I thought there would be demand for an OS/2 video game.  <b>The only problem was that I didn't know how to program.  So I bought a book called "Teach yourself C in 21 days" and a book called "OS/2 Presentation Manager Programming".  With those two books I programmed Galactic Civilizations.</b>  Anyone who ever played the game and also knows programming can verify that only the techniques in OS/2 PM programming are in that game.  What that meant is that all the "graphics" were merely iconic windows, not real images because OS/2 PM programming didn't include chapters on how to do graphics programming and I couldn't afford any more books.
<p>
Even still, my plan once I graduated was to go work at some cool company. I sent my resume to Texas Instruments and tons of other big companies. No response.  I later learned from a friend who worked at Ratheon at the time that these big companies won't look at resumes from minor colleges like WMU.  He got in because he went to (wait for it) University of Michigan, the school I was accepted at but couldn't afford (my friend's parents paid his way through and drove a firebird).
</p>
<p>
So while failing to get a job, the little game I made did really well. Except that I didn't get paid any royalties. Our publisher ripped us off and because I was poor and couldn't afford a lawyer, I was screwed. If you bought a copy of Galactic Civilizations, that's cool but I never got a penny of it.  But the game was such a success that I was able to use the good publicity to build Stardock up with other products while I waited to see if I could get a job anywhere.
</p>
<p>
Because I worked 3 jobs during college my gradepoint was only 2.6 so I was at a competitive disadavantage. But that time allowed me to keep working on Stardock stuff which led to Star Emperor (a GalCiv derivative I wrote for IBM) and Object Desktop for OS/2 which I teamed up with a fellow OS/2 fanatic Kurt Westerfeld to bring to market.
</p>
<p>
And the rest is history. By 24 I was a millionaire. And during the stock bubble, my company's valuation was ridiculously high (wish I could just stick with that number ) which fortunately coincided with my 10 year class reunion! So what's the excuse of able bodied people who are poor? <b>I'm not particularly intelligent. I don't enjoy working any more than anyone else (just ask my mom).  But I did what I had to do.</b> And now I pay 6 figures in income taxes of which a large percentage of it goes to other people.  If I can make it, why can't others? If you are able bodied, what's stopping you?
</p>
</blockquote>
<p>
Even if you've never heard of <a href="http://www.galciv.com/">Galactic Civilizations</a>, you may know one of Brad's other products. The most notable are <a href="http://www.windowblinds.net/">WindowBlinds</a> and <a href="http://www.politicalmachine.com">Political Machine</a>.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2005-06-19T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/why-anyone-can-succeed/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ World Zone Pricing ]]></title>
<link>https://blog.codinghorror.com/world-zone-pricing/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
Cory Doctorow is releasing <a href="http://craphound.com/someone/">his new novel</a> under a creative commons license.
</p>
<p>
</p>
<blockquote><i>
As with my first and second novels, I've posted the entire text of this book online under a Creative Commons license that allows the unlimited, noncommercial redistribution of the text. You can send it around, paste it into a chat, beam it to a friend's PDA, or print out a chapter to hand out in the university common room. Like Woody Guthrie said, "Publish it. Write it. Sing it. Swing to it. Yodel it. We wrote it, that's all we wanted to do."
</i></blockquote>
<p>
I immediately assumed he was releasing it under the standard Creative Commons license, like that <a href="http://ascii.textfiles.com/archives/000123.html">recent documentary about BBS culture</a>, but not so. He's releasing it under the <a href="http://creativecommons.org/licenses/devnations/2.0/">Developing Nations License</a>. If you live in a <a href="http://rru.worldbank.org/DoingBusiness/ExploreEconomies/EconomyCharacteristics.aspx">medium/low income country</a>, the book is in the public domain. Otherwise, you pay. That reminded me of <a href="http://www.codinghorror.com/blog/archives/000011.html">last year's blgo entry about software pricing.</a> Microsoft charges US customers $299 for a copy of Microsoft Office, and Thai customers $38.
</p>
<p>
Isn't this the same pricing strategy that drug companies get clobbered for? Drugs cost more in the US, so the US ends up subsidizing a big part of the R&amp;D bill. That's why seniors take buses to Mexico or Canada to buy their drugs; they don't want to be charged US rates. It's <a href="http://news.yahoo.com/news?tmpl=story&amp;u=/latimests/20050619/ts_latimes/zonesofcontentioningasolinepricing">also known as "zone pricing" in the oil industry</a>:
</p>
<p>
</p>
<blockquote>
<i>
Such price variations may seem odd, but they are not unique to Anaheim. <b>On any given day, in any major U.S. city, a single brand of gasoline will sell for a wide range of prices even when the cost to make and deliver the fuel is the same.</b>
</i><p>
The primary culprit is zone pricing, a secret and pervasive oil company strategy to boost profits by charging dealers different amounts for fuel based on traffic volume, station amenities, nearby household incomes, the strength of competitors and other factors.
</p>
<p>
It's a controversial strategy, but the courts have thus far deemed it legal, and the Federal Trade Commission recently said the effect on consumers was ambiguous because some customers got hurt by higher prices while others benefited from lower ones.
</p>
</blockquote>
<p>
Granted, the life preserving qualities of drugs makes zone pricing a little more questionable in that case. Nobody's going to die if they can't fill up their Hummer H2 with premium. Or afford a copy of Microsoft Train Simulator 2006.
</p>
<p>
Giving developing countries a break is clearly a good thing. But I wonder if these zone pricing strategies will continue to work in an era of increasing global communication. Why not buy <a href="http://www.canadadrugs.com/">drugs online from Canada?</a> Or check a website to <a href="http://www.ahding.com/cheapgas/">see where the cheapest gas is in your area</a>? Any system that expressly prohibits goods from moving from zone to zone-- like <a href="http://hometheater.about.com/cs/dvdlaserdisc/a/aaregioncodesa.htm">DVD region coding</a>-- doesn't work so well.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2005-06-20T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/world-zone-pricing/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ High Dynamic Range Lighting ]]></title>
<link>https://blog.codinghorror.com/high-dynamic-range-lighting/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
At the <a href="http://blogs.pcworld.com/staffblog/archives/000743.html">nVidia 7800 launch event</a> today, one of the video rendering technology highlights was <a href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/directx9_c/directx/graphics/TutorialsAndSamples/Samples/HDRLighting.asp">high dynamic range lighting</a>. Almost all video cards in use today are limited to 32 bit color values-- that's 8 bits for red, green, and blue, with the "rounded" 8 bits typically thrown away*. 24 bits is enough to represent most of the colors the human eye can see. But <b>those 8 bits per color also represent intensity</b>. That means the brightest white is 255, 255, 255-- only 256 times brighter than the blackest black. This vastly underrepresents both the dynamic range of light in the real world (10<sup>12</sup> to 1) and the dynamic range of the human eyeball (1000 to 1).
</p>
<p>
That's why HDR lighting uses 64-bit values to represent color, which offers both 16 bits of color precision and 16 bits of brightness. As the chief scientist at nVidia points out in <a href="http://www.extremetech.com/print_article2/0,2533,a=141480,00.asp">a recent Q&amp;A session</a>, don't underestimate the importance of good old black and white:</p>
<p>
</p>
<p>
</p>
<blockquote>
Reader Question: What is your opinion about some of the new graphical features that are being implemented in games? Some are quite beneficial to GPU performance, such as normal-map compression and virtual displacement mapping. But others are very costly to performance, specifically high-dynamic-range lighting. After seeing the extreme over-saturation of light with HDR in Far Cry (even on the lower levels of HDR) and the performance hit it took, I personally am not convinced that HDR is a method that should be pursued any longer. What are your opinions on this subject? -- cfee2000
<p>
David Kirk: <b>I think that High Dynamic Range Lighting is going to be the single most significant change in the visual quality over the next couple of years. It's almost as big as shading.</b>
</p>
<p>
The reason for this is that games without HDR look flat. They should, since they are only using a range of 256:1 in brightness -- a small fraction of what our eyes can see. Consequently, low-dynamic-range imagery looks flat and featureless, no highs, and no detail in the shadows, the lows. If you game using a DFP (LCD display), you probably can't tell the difference anyway, since most LCD displays only have 5 or 6 bits of brightness resolution -- an even narrower 32:1 or 64:1 range of brightness. On a CRT, you can see a lot more detail, and on the newer high-resolution displays, you can see not only the full 8 bits, but even more. There are new HDR displays that can display a full 16-bit dynamic range, and I can tell you that the difference is stunning. When these displays become more affordable in the next year or two, I don't know how we'll ever go back to the old way.
</p>
</blockquote>
<p>
Here are some comparative screenshots from <a href="http://www.farcry.ubi.com/">Far Cry</a>, which supports HDR lighting as of the 1.3 patch:
</p>
<p>
<img alt="image placeholder" >
High dynamic range lighting (64-bit color)
</p>
<p>
<img alt="image placeholder" >
<br>
Standard lighting (32-bit color)
</p>
<p>
The effect is not always obvious, but it's just as significant as the move from 16-bit color to 32-bit color in my opinion. It's like going from dial-up to broadband; you don't really know what you've been missing until you've seen it in action.
</p>
<p>
Of course, <a href="http://en.wikipedia.org/wiki/TANSTAAFL">TANSTAAFL</a>: increasing the data payload from 32-bit to 64-bit hurts performance. Although the GeForce 6 supported HDR lighting, the <a href="http://www.nvidia.com/page/geforce_7800.html">new GeForce 7</a> is supposedly the first generation of video card that can deliver HDR without significantly impairing performance.
</p>
<p>
* The data has to be rounded to the nearest power of two for performance.  I'm not entirely sure what is done with the "extra" bits in 32-bit and 64-bit color framebuffers.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2005-06-21T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/high-dynamic-range-lighting/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ UI is Hard ]]></title>
<link>https://blog.codinghorror.com/ui-is-hard/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
Some users <a href="http://www.shacknews.com/ja.zz?comments=37492">commenting</a> on the poor pre-game user interface in EA's <a href="http://www.gamespot.com/pc/action/battlefield2/index.html">Battlefield 2</a>:
</p>
<p>
</p>
<blockquote>
Poster #1: They need to stop hiring angry little men and romantically spurned women to design user interfaces.
<p>
Poster #2: But doesn't that describe most programmers?
</p>
<p>
Poster #3: No, that describes all programmers.
</p>
</blockquote>
<p>
It's funny because it's true. Not the romantically spurned part, mind you, but the accusation that most programmers are bad at designing user interfaces. That's partly because <a href="http://www.oreillynet.com/pub/wlg/4649">UI is hard</a>:
</p>
<blockquote>
GUI builders make GUI programming look easy. Nearly anybody can whip up a decent-looking GUI in no time at all using a GUI builder. Done.
<p>
It is much harder to whip up a quick and dirty EJB system, giving the impression that server-side coding is harder to do. A bad programmer will continue to struggle with EJB, but a good programmer will find ways to automate nearly every aspect of EJB. That's the secret of server-side programming: it is very well-defined and repetitive. Thus, it can be automated.
</p>
<p>
Take your favorite Model-Driven-Architecture (MDA) tool. They work best when generating server-side code, things like EJBs, database access code, and web services. <b>They might be able to generate a rudimentary GUI, but a really GREAT GUI cannot be automated.</b>
</p>
</blockquote>
<p>
But programmers are partly to blame, too. Most programmers <a href="http://blogs.msdn.com/rick_schaut/archive/2004/04/02/106929.aspx">begin by thinking about the code instead of the user interface</a>:
</p>
<p>
</p>
<blockquote>
John almost hit on the most important point in all of this. No one else did. When you're working on end-user software, and it doesn't matter if you're working on a web app, adding a feature to an existing application, or working on a plug-in for some other application, <b>you need to design the UI first</b>.
<p>
This is hard for a couple of reasons. The first is that most programmers, particularly those who've been trained through University-level computer science courses, learned how to program by first writing code that was intended to be run via the command line (Terminal window for you Mac OS X users). As a consequence, we learned how to implement efficient algorithms for common computer science problems, but we never learned how to design a good UI.
</p>
<p>
The second problem is that the tools we use to create UI are often good tools for more simple usability issues, but tend to fall well short when it comes to designing UI for a more complex set of user scenarios. Forms designers are great when you're working within the problem domain that forms are intended to solve, but once you step outside those problem domains, the work gets much harder. Use a more flexible tool, like Xcode's nib tool and the Mac OS X HIView object, and you're going to have to write considerably more code just to manage the UI objects.
</p>
</blockquote>
<p>
This is also known as <a href="http://www.sapdesignguild.org/resources/ui_first.asp">UI First Development</a>, but I can't find many other references.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2005-06-22T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/ui-is-hard/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ The Broken Window Theory ]]></title>
<link>https://blog.codinghorror.com/the-broken-window-theory/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>In a <a href="https://blog.codinghorror.com/pragmatic-programming/">previous entry</a>, I touched on the broken window theory. You might be familiar with <a href="http://www.artima.com/intv/fixit.html">the Pragmatic Progammers' take on this</a>:</p>
<blockquote>
Don't leave "broken windows" (bad designs, wrong decisions, or poor code) unrepaired. Fix each one as soon as it is discovered. If there is insufficient time to fix it properly, then board it up. Perhaps you can comment out the offending code, or display a "Not Implemented" message, or substitute dummy data instead. Take some action to prevent further damage and to show that you're on top of the situation.
<p>We've seen clean, functional systems deteriorate pretty quickly once windows start breaking. There are other factors that can contribute to software rot, and we'll touch on some of them elsewhere, but <b>neglect accelerates the rot faster than any other factor.</b></p>
</blockquote>
<p>That's excellent advice for programmers, but it's not the complete story.</p>
<img alt="image placeholder" >
<p>The broken window theory is based on an <a href="https://www.theatlantic.com/ideastour/archive/windows.html">Atlantic Monthly article</a> published in 1982. It's worth reading the article to get a deeper understanding of the human factors driving the theory:</p>
<blockquote>
Second, at the community level, disorder and crime are usually inextricably linked, in a kind of developmental sequence. Social psychologists and police officers tend to agree that if a window in a building is broken and is left unrepaired, all the rest of the windows will soon be broken. This is as true in nice neighborhoods as in rundown ones. Window-breaking does not necessarily occur on a large scale because some areas are inhabited by determined window-breakers whereas others are populated by window-lovers; rather, one unrepaired broken window is a signal that no one cares, and so breaking more windows costs nothing. (It has always been fun.)
<p>Philip Zimbardo, a Stanford psychologist, reported in 1969 on some experiments testing the broken-window theory. <b>He arranged to have an automobile without license plates parked with its hood up on a street in the Bronx and a comparable automobile on a street in Palo Alto, California.</b> The car in the Bronx was attacked by "vandals" within ten minutes of its "abandonment." The first to arrive were a family — father, mother, and young son — who removed the radiator and battery. Within twenty-four hours, virtually everything of value had been removed. Then random destruction began — windows were smashed, parts torn off, upholstery ripped. Children began to use the car as a playground. Most of the adult "vandals" were well-dressed, apparently clean-cut whites. <b>The car in Palo Alto sat untouched for more than a week. Then Zimbardo smashed part of it with a sledgehammer. Soon, passersby were joining in. Within a few hours, the car had been turned upside down and utterly destroyed. Again, the "vandals" appeared to be primarily respectable whites. </b></p>
<p>Untended property becomes fair game for people out for fun or plunder and even for people who ordinarily would not dream of doing such things and who probably consider themselves law-abiding. Because of the nature of community life in the Bronx — its anonymity, the frequency with which cars are abandoned and things are stolen or broken, the past experience of "no one caring" — vandalism begins much more quickly than it does in staid Palo Alto, where people have come to believe that private possessions are cared for, and that mischievous behavior is costly. But vandalism can occur anywhere once communal barriers — the sense of mutual regard and the obligations of civility — are lowered by actions that seem to signal that "no one cares."</p>
</blockquote>
<p>There's even <a href="http://www.amazon.com/exec/obidos/ASIN/0684837382/codihorr-20">an entire book on this subject</a>. What's fascinating to me is that the mere <i>perception</i> of disorder — <b>even with seemingly irrelevant petty crimes like graffiti or minor vandalism</b> — precipitates a negative feedback loop that can result in total disorder:</p>
<blockquote>
We suggest that "untended" behavior also leads to the breakdown of community controls. A stable neighborhood of families who care for their homes, mind each other's children, and confidently frown on unwanted intruders can change, in a few years or even a few months, to an inhospitable and frightening jungle. A piece of property is abandoned, weeds grow up, a window is smashed. Adults stop scolding rowdy children; the children, emboldened, become more rowdy. Families move out, unattached adults move in. Teenagers gather in front of the corner store. The merchant asks them to move; they refuse. Fights occur. Litter accumulates. People start drinking in front of the grocery; in time, an inebriate slumps to the sidewalk and is allowed to sleep it off. Pedestrians are approached by panhandlers.
<p>At this point it is not inevitable that serious crime will flourish or violent attacks on strangers will occur. But many residents will think that crime, especially violent crime, is on the rise, and they will modify their behavior accordingly. They will use the streets less often, and when on the streets will stay apart from their fellows, moving with averted eyes, silent lips, and hurried steps. "Don't get involved." For some residents, this growing atomization will matter little, because the neighborhood is not their "home" but "the place where they live." Their interests are elsewhere; they are cosmopolitans. But it will matter greatly to other people, whose lives derive meaning and satisfaction from local attachments rather than worldly involvement; for them, the neighborhood will cease to exist except for a few reliable friends whom they arrange to meet.</p>
</blockquote>
<p>Programming is insanely detail oriented, and perhaps this is why: if you're not on top of the details, the perception is that things are out of control, and it's only a matter of time before your project spins out of control. <b>Maybe we should be sweating the small stuff</b>.</p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2005-06-23T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/the-broken-window-theory/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ Comic Sans, the Font Of The Gods ]]></title>
<link>https://blog.codinghorror.com/comic-sans-the-font-of-the-gods/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>You may be familiar with the font <a href="http://www.microsoft.com/typography/web/fonts/comicsns/default.htm">Comic Sans MS</a>:</p>
<p>
<img alt="image placeholder" >
</p>
<p>Over the last 5 years, my wife and I noticed that this annoying font is inordinately popular "in the wild" -- we've seen it in the strangest places. Enough so that it has become a running joke whenever we see it.</p>
<p><img alt="image placeholder" >
<p>We may be weird, but we're not alone: there's a <a href="http://bancomicsans.com/home.html">Ban Comic Sans</a> website.</p>
<blockquote>Like the tone of a spoken voice, the characteristics of a typeface convey meaning. The design of the typeface is, in itself, its voice. Often this voice speaks louder than the text itself. Thus when designing a "Do Not Enter" sign the use of a heavy-stroked, attention-commanding font such as Impact or Arial Black is appropriate. Typesetting such a message in Comic Sans would be ludicrous. Though this is sort of misuse is frequent, it is unjustified. Clearly, Comic Sans as a voice conveys silliness, childish naivete, irreverence, and is far too casual for such a purpose. <strong>It is analogous to showing up for a black tie event in a clown costume.</strong>
</blockquote>
<p>There's also a rather amusing <a href="http://www.connare.com/comic.htm">history of comic sans</a> presentation which I recommend-- now we know to blame Vincent Connare for this font. Vincent does his best to <a href="http://www.connare.com/comic.htm">defend the font</a> on his website:</p>
<blockquote>Comic Sans was designed because when I was working at Microsoft I received a beta version of Microsoft Bob. It was a comic software package that had a dog called Rover at the beginning and he had a balloon with messages using Times New Roman.
<p>Comic Sans was NOT designed as a typeface but as a solution to a problem with the often overlooked part of a computer program's interface, the typeface used to communicate the message [in a comic character's message balloon].</p>
<p><strong>There was no intention to include the font in other applications other than those designed for children when I designed Comic Sans.</strong> The inspiration came at the shock of seeing Times New Roman used in an inappropriate way.</p>
</blockquote>
<p>Proving, yet again, that anything which came from <a href="http://www.telecommander.com/pics/links/application%20software/microsoft/Microsoft_Bob_1_0/Microsoft_Bob_1_0.htm">Microsoft Bob</a> cannot be good. The misappropriation of Comic Sans is truly epidemic. At this point, we're bracing for the inevitable <strong>Comic Serif</strong>.</p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2005-06-27T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/comic-sans-the-font-of-the-gods/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ Uncrippling Windows XP's IIS 5.1 ]]></title>
<link>https://blog.codinghorror.com/uncrippling-windows-xps-iis-51/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
Scott Mitchell says the best new ASP.NET feature in VS.NET 2005 is <a href="http://scottonwriting.net/sowblog/posts/3447.aspx">the integrated webserver</a>. I agree. No more ditzing around with annoying IIS dependencies and install issues: aspnet_regiis, anyone? Tight coupling of VS.NET to IIS is also number three in K Scott Allen's <a href="http://odetocode.com/Blogs/scott/archive/2005/03/22/1118.aspx">worst of the .NET 1.x years</a>. Good riddance IIS, hello <a href="http://dotnetjunkies.com/WebLog/anoras/archive/2005/01/04/41146.aspx">Son of Cassini!</a>
</p>
<p>
Unfortunately, we're still stuck with VS.NET 2003 in the meantime, and <b>Windows XP's IIS 5.1 is thoroughly crippled out of the box</b>. It allows only one root website, and a maximum of ten concurrent connections to that website. Microsoft really, really doesn't want us hosting slashdot.org on our XP Pro box. These limits are so aggressive that they can get in the way of legitimate localhost development. But there are workarounds.
</p>
<p>
</p>
<ol>
<li>
<b>Increase the 10 concurrent connection limit</b><br><br>
Are you getting 403.9 "Access Forbidden: Too many users are connected" errors on an XP Pro website? You're limited by default to 10 concurrent connections by design, but this can be increased. First, make sure your default windows script host is set to the console (cscript.exe) one.
<p>
</p>
<pre>
cscript //h:cscript
</pre>
<p>
Next, let's increase the connection limit to 40.
</p>
<p>
</p>
<pre>
C:InetpubAdminScriptsadsutil set w3svc/MaxConnections 40
</pre>
<p>
Note that this is a hard-coded limit; it can't be increased any further unless you like patching windows system files. You can, however, make the IIS connection timeout more aggressive so connections don't last as long.
</p>
<p>
</p>
</li>
<li>
<b>Run more than one root website</b><br><br>
IIS 5.1 only allows one root website. This is fine if your websites run under subfolders:
<p>
</p>
<pre>
http://localhost/MyWebsite1
http://localhost/MyWebsite2
</pre>
<p>
But it's kind of a pain if your websites must run as root, or need to be tested when running as root:
</p>
<p>
</p>
<pre>
http://MyWebsite1/
http://MyWebsite2/
</pre>
<p>
In that case, you'd have to edit your <a href="http://www.mvps.org/winhelp2002/hosts.htm">hosts file</a>, and switch the default home directory for the default website. But there's a better way. You can <a href="http://www.xoc.net/works/tips/multiple-iis-sites-professional.asp">hack up multiple web sites</a> in IIS 5.1 via command line tricks, or you can use <a href="http://www.firstserved.net/services/iisadmin.php">this nifty little GUI utility</a> which automates that for you. It works great-- you'll even see multiple websites show up in the IIS manager. But bear in mind that, unlike the server versions of IIS, only one website can be active at any given time.
</p>
</li>
</ol>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2005-06-28T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/uncrippling-windows-xps-iis-51/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ For Best Results, Forget the Bonus ]]></title>
<link>https://blog.codinghorror.com/for-best-results-forget-the-bonus/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
The anonymous mini-microsoft blog has a fascinating entry on the pitfalls of <a href="http://minimsft.blogspot.com/2005/06/microsofts-30-or-how-i-learned-to-stop.html">Microsoft's curve rating system</a>:
</p>
<p>
</p>
<blockquote><i>
I totally accept that we need to have a rating system, especially to reward our kick-butt super-contributors who end up doing most the hard work around here. I have not, however, come to accept the bucketing rating system we employ, especially around the 3.0 review score. Now then, I have met dev managers who have reached acceptance with our system and with dolling out the 3.0s. In their presence, I experience a cult-like allure to these folks as they tell me how they are totally behind the peer relative 3.0 review rating and that's how we do business in managing our performers. They make it sound so calm and simple that I feel like if I could just drink up that Kool-Aid I, too, could not rip myself up inside over this.
</i></blockquote>
<p>
I touched on this briefly in <a href="http://www.codinghorror.com/blog/archives/000225.html">managing with trust</a>. Performance metrics are useful, but only privately to the person who is being measured. The minute you make these performance metrics available to the manager as anything other than a sanitized average, you've turned them into a self-defeating cudgel to beat people into submission. I know, it seems like a logical idea-- measure and reward performance-- but there's tons of data supporting the harm this does. <a href="http://www.amazon.com/exec/obidos/ASIN/0932633439/codihorr-20">Peopleware</a> goes into great detail on this; without belaboring the point, <a href="http://www.alfiekohn.org/managing/fbrftb.htm">for best results, forget the bonus</a>.
</p>
<p>
</p>
<blockquote>
<i>
"Do this and you'll get that." These six words sum up the most popular way in which American business strives to improve performance in the workplace.
</i><p>
And it is very popular. At least three of four American corporations rely on some sort of incentive program. Piecework pay for factory workers, stock options for top executives, banquets and plaques for Employees of the Month, commissions for salespeople -- the variations go on and on. The average company now resembles a television game show: "Tell our employees about the fabulous prizes we have for them if productivity improves!"
</p>
<p>
Most of us, accustomed to similar tactics at home and school, take for granted that incentives in the workplace are successful. After all, such incentives are basically rewards, and rewards work, don't they?
</p>
<p>
The answer, surprisingly, is mostly no. While rewards are effective at producing temporary compliance, they are strikingly ineffective at producing lasting changes in attitudes or behavior. The news gets worse. <b>About two dozen studies from the field of social psychology conclusively show that people who expect to receive a reward do not perform as well as those who expect nothing. This result, which holds for all sorts of rewards, people and tasks, is most dramatic when creativity is involved.</b>
</p>
</blockquote>
<p>
I suppose this only works for software development if you consider it <a href="http://www.codinghorror.com/blog/archives/000220.html">a creative activity</a>, but the <b>arguments against the use of rewards</b> are quite compelling:
</p>
<p>
</p>
<ul>
<li>for every reward, there is the lack of a reward, an implicit punishment.
</li>
<li>rewards discourage cooperation and encourage competition.
</li>
<li>rewards are one-size-fits all approach that ignores causality.
</li>
<li>rewards deter risk.
</li>
<li>rewards undermine interest by focusing on the reward rather than the process itself.
</li>
</ul>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2005-06-29T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/for-best-results-forget-the-bonus/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ Bayesian Kryptonite - spoofed email ]]></title>
<link>https://blog.codinghorror.com/bayesian-kryptonite-spoofed-email/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
I use <a href="http://www.codinghorror.com/blog/archives/000086.html">POPFile bayesian filtering</a> to keep email spam at bay. With a little training, this works amazingly well-- I'm at 99.8% accuracy, and that's with a little over a month of "training" precipitated by a recent server migration. But bayesian filtering has one big weakness that I'm seeing more and more: <a href="http://www.cert.org/tech_tips/email_spoofing.html">spoofed emails</a>.
</p>
<p>
You know what I mean-- emails titled <b>Your Account Has Been Violated</b> from, ostensibly from service@paypal.com. The body is a direct cut and paste from a real PayPal email:
</p>
<p>
</p>
<blockquote>
<i>
Security Center Advisory!
</i><p>
We recently noticed one or more attempts to log in to your PayPal account from a foreign IP address and we have reasons to belive that your account was hacked by a third party without your authorization. If you recently accessed your account while traveling, the unusual log in attempts may have been initiated by you.
</p>
<p>
If you are the rightful holder of the account you must click the link below and then complete all steps from the following page as we try to verify your identity.
</p>
</blockquote>
<p>
Of course, the spoofer is desperately hoping you won't notice that the crazy URLs in their email ..
</p>
<p>
</p>
<pre>
http://paypaldemo.com.previewyoursite.com/source/service/ema/helpextsourcepage/PaypalISAPIruhttp3A2F2Fmyebamcom3A802Fws2FeBayISAPIdll3FMyeBay26ssPageName3DH253AH253A/
http://ebay.doubleclick.net/clk;13012399;10693575;h?http://cardsavetransfer.com/cmdr_login/index.htm
http://ebay.doubleclick.net/clk;13012399;10693575;h?http://paypalcardstraznact.com/cmdr_login/index.htm
</pre>
<p>
.. aren't actually pointing to paypal.com (or ebay.com), and you'll key in your account and password on their servers.
</p>
<p>
These spoof emails contain so-called "kryptonite" because they so closely mimic actual emails from PayPal with valid words and phrases. Bayesian filtering is useless against this type of spam; if the spammer knows what any email in your actual inbox looks like, he can construct one that will <a href="http://www.codinghorror.com/blog/archives/000088.html">beat any Bayesian filter</a>. This is a a strict requirement at the very heart of bayesian filtering itself; any knowledge of valid contents (eg, things that "get through") <i>has to be strictly eliminated</i>.
</p>
<p>
I usually just delete these emails from my inbox; what else can I do? One thing is for sure: <b>popular web-based services can no longer communicate via email with their customers</b>. That's like giving spoofers a free pass; once they have the "template" email they can copy and paste it into a spoof email that is almost guaranteed to get past bayesian filtering for users of that service.
</p>
<p>
eBay, for example, has <a href="http://news.com.com/eBay+fights+back+against+phishers/2100-1029_3-5512182.html">almost given up altogether on email communication</a>. You have to visit eBay.com and check your web-based "message center" to communicate with them. I can't say I blame them; what other choice do they have?
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2005-06-30T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/bayesian-kryptonite-spoofed-email/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ VS.NET and Code Regions ]]></title>
<link>https://blog.codinghorror.com/vsnet-and-code-regions/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
I'm currently working on a project where almost every function has its own region. At first I found this convention onerous, but as I used it, I saw why it was necessary. <b>The default Visual Studio .NET outlining support leaves a lot to be desired.</b> Take your typical commented Page_Load method:
</p>
<p>
</p>
<pre language="c#">
/// &lt;summary&gt;
/// This method is called when the Page's Load event has been fired.
/// &lt;/summary&gt;
/// &lt;param name="sender"&gt;The &lt;see cref="object"/&gt; that fired the event.&lt;/param&gt;
/// &lt;param name="e"&gt;The &lt;see cref="EventArgs"/&gt; of the event.&lt;/param&gt;
private void Page_Load(object sender, System.EventArgs e)
{
if (!Page.IsPostBack)
{
// do stuff
}
}
</pre>
<p>
That function will outline in two blocks: one for the XML comments, and another for the actual code itself:
</p>
<p>
<img alt="image placeholder" >
</p>
<p>
It's aggravating that there is no built in support for <b>outlining the entire function and the comments.</b> Hence, the need for a simple region around the comments and the function, which provides the outlining support you might expect in the first place:
</p>
<p>
<img alt="image placeholder" >
</p>
<p>
I just checked, and VS.NET 2005 (aka Whidbey) has this same bad behavior. What a bummer. I am working on a macro that Region-izes all the functions in a file, but in the meantime you might want to check out the <a href="http://www.codeproject.com/csharp/DocumentatorMacros.asp">Documentator macros on CodeProject</a>. They combine commenting and regionizing into one function, which isn't always what I want, but it's close enough to start.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2005-07-04T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/vsnet-and-code-regions/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ Martin Fowler hates XSLT too ]]></title>
<link>https://blog.codinghorror.com/martin-fowler-hates-xslt-too/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
I have no problem with XML. It's a fine way to store hierarchical data in a relatively simple, mostly human-readable format. But I've always disliked its companion technology, <a href="http://www.w3.org/TR/xslt">XSLT</a>. While useful in theory-- "using a simple XSLT transform, XML can be converted into anything!"-- in practice, it takes painful contortions to do anything practical. Evidently I'm not alone; <a href="http://www.martinfowler.com/bliki/MovingAwayFromXslt.html">Martin Fowler hates XSLT too</a>:
</p>
<p>
</p>
<blockquote>
All of this site is written in simple XML documents and transformed to HTML. I find this works really well, and means I never have to worry about dealing with HTML formats. (Not that fancy layout is my style, as you can tell.) I've even <a href="http://www.martinfowler.com/articles/writingInXml.html">written a whole book that way</a>.
<p>
For most of this time I've used XSLT as my transformation language. I've got pretty good with slinging XSLT around and getting it to do what I want.
</p>
<p>
But no more.
</p>
<p>
When I wrote the software for this Bliki (on a long flight) I did it in Ruby. Prior to that I used Ruby to do a new version of my home page. <b>My conclusion from this exercise was that using Ruby for XML transforms was much easier than using XSLT.</b>
</p>
</blockquote>
<p>
I've had almost the same exact argument with a few developers I used to work with. After working through a bit of the XSLT necessary to accomplish something, <b>I concluded that it was easier and simpler to use procedural code to do the same thing.</b> Not always, of course, but most of the time. As Fowler points out, this does beg the question: what good is XSLT?
</p>
<p>
</p>
<blockquote>
I think this may raise some real questions about XSLT. There's still much I like about the power of XSLT, but I hate the syntax and the walls you keep running into. I'm not going to convert my whole site over to Ruby tomorrow - most of the XSLT works fine - but I can certainly see my way to doing that at some point in the future. But the bigger question is whether you're better off with scripting language for this kind of task than XSLT.
</blockquote>
<p>
Maybe the idea of XSLT transforming XML into "anything" is fundamentally unrealistic-- just more <a href="http://dir.salon.com/tech/col/garf/2001/01/08/bad_java/index.html">Write Once, Run Anywhere snake oil</a>.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2005-07-05T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/martin-fowler-hates-xslt-too/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ Stupid Command Prompt Tricks ]]></title>
<link>https://blog.codinghorror.com/stupid-command-prompt-tricks/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
Windows XP isn't known for its powerful command line interface. Still, one of the first things I do on any fresh Windows install is set up the <a href="http://www.codinghorror.com/blog/files/OpenCommandWindowHere.zip">"Open Command Window Here" right click menu</a>. And hoary old cmd.exe does have a few tricks up its sleeve that you may not know about.
</p>
<p>
<img alt="image placeholder" >
</p>
<p>
The first thing you'll want to do is Start, Run, cmd.exe, then right click the window menu and choose properties. Be sure to enable the following quality of life improvements:
</p>
<p>
</p>
<ul>
<li>Options | Command History | Buffer Size | 500
</li>
<li>Options | Command History | Discard Old Duplicates | True
</li>
<li>Options | Edit Options | QuickEdit Mode | True
</li>
<li>Layout | Screen buffer size | Height | 999
</li>
<li>Layout | Window size | Height | 50
</li>
</ul>
<p>
Now we've got some room to actually see stuff! QuickEdit mode enables copying from the command prompt by intuitively dragging and right clicking with the mouse. Furthermore, you can paste what's in the clipboard to the command line by right clicking with nothing selected.
</p>
<p>
And of course, set the font and colors to taste. I use green-screen style colors (background 0 55 0, foreground 0 255 0) with Lucida Console as pictured above. But if you prefer  <a href="http://www.codinghorror.com/blog/archives/000328.html">Comic Sans</a> here, be my guest! When exiting this dialog, you'll be prompted to save. Make sure you select "Save properties for future windows with same title" so all future command prompts will benefit from these improved settings.
</p>
<p>
There are also a few helpful keyboard shortcuts that aren't always widely known:
</p>
<p>
</p>
<ul>
<li>Pressing arrow up selects a previous command from your command history; similarly, arrow down selects the next command.
</li>
<li>Pressing F7 pops up your command history list.
</li>
<li>You can drag n' drop files or folders from an explorer window into a command prompt; this inserts the quoted path as if you had manually pasted it.
</li>
<li>
<a href="http://en.wikipedia.org/wiki/Tab_completion">Tab completion</a> is fully supported; type edit *.ini then hit TAB to iterate through all matches. Use SHIFT+TAB to move to the previous match. This works for partial filenames as you would expect, and in all commands.
</li>
<li>Tired of the typical "c:windowssystem32cmd.exe" window title? Change it using the TITLE command.
</li>
<li>ALT+ENTER takes your command prompt to fullscreen mode and back again.
</li>
</ul>
<p>
If you're really a hard-core cmd.exe junkie (or maybe a UNIX user), you may want to look into the <a href="http://msmvps.com/coad/archive/2005/02/19/36473.aspx">4nt command shell replacement</a>. It's a direct descendant of the venerable 4dos shell.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2005-07-06T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/stupid-command-prompt-tricks/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ Desktop RAID: Oversold? ]]></title>
<link>https://blog.codinghorror.com/desktop-raid-oversold/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
I've seen a number of <a href="http://www.iunknown.com/CommentsWithEntry.aspx?entryid=%7B1D2B47DB-E479-472F-9BE9-1D23AA72C73A%7D">hardware-oriented developers</a> talk about setting up striped RAID arrays on their personal desktops. It does seem like a reasonable idea, given the current strong trend towards "doubling up" on hardware to leverage performance benefits from parallelism in various forms-- dual core CPUs, dual channel DDR, dual graphics cards in SLI, and dual hard drives in RAID 0.
</p>
<p>
However, except for dual channel memory, <b>none of these parallel hardware approaches are clear across-the-board performance wins</b>. They can be twice as fast <i>in very specific circumstances</i>, but as a general rule they're just somewhat faster, and not without adding significant costs and even risks of their own.
</p>
<p>
<a href="http://www.pcguide.com/ref/hdd/perf/raid/levels/singleLevel0-c.html">RAID 0 (aka striping)</a> on the desktop, is especially dubious in my opinion. Just because current motherboard chipsets now make it easy and (relatively) inexpensive to do this doesn't mean that you should:
</p>
<p>
</p>
<ol>
<li>
<b>RAID 0 literally doubles your chance of drive failure</b>. All it takes is a single drive failure on either drive to render your striped array completely and utterly unrecoverable. A "normal" single drive failure is at least theoretically recoverable, albeit expensive. How expensive? <a href="http://forums.actionfront.com/showthread.php?t=59">If you have to ask, you probably can't afford it.</a>
</li>
<li>
<b>Of all the hardware failures you can have, drive failure is by far the most traumatic.</b> Losing a CPU, video card, or even motherboard, means you just go out and buy another one. Losing a drive means you've probably lost your critical data, unless you have a good backup regimen in place. And 99% of us don't. Kudos to the 1% of you reading this who do.
</li>
<li>
<b>The performance benefits of RAID 0 aren't that compelling</b> for typical desktop usage scenarios.
</li>
</ol>
<p>
So why would you go to the trouble of building a RAID 0 array if it's more expensive, more complex, prone to failure, and not all that much faster? Short answer: you probably shouldn't, <b>unless you know you have a specific scenario that justifies this setup.</b> There are a number of articles on the web that debunk the myth that RAID 0 is a universal performance improvement for a typical desktop PC:
</p>
<p>
</p>
<ul>
<li>
<a href="http://www.anandtech.com/storage/showdoc.aspx?i=2101&amp;p=11">Western Digital's Raptors in RAID-0: Are two drives better than one?</a>
</li>
<li>
<a href="http://www.techreport.com/reviews/2004q2/chipset-raid/index.x?pg=27">Chipset Serial ATA and RAID performance comparison</a>
</li>
<li>
<a href="http://www.storagereview.com/articles/200406/20040625TCQ_6.html">TCQ, RAID, SCSI, and SATA</a>
</li>
</ul>
<p>
All these articles are variations on the same theme; the AnandTech article <a href="http://www.anandtech.com/storage/showdoc.aspx?i=2101&amp;p=11">summarizes nicely</a>:
</p>
<p>
</p>
<blockquote>
If you haven't gotten the hint by now, we'll spell it out for you: there is no place and no need for a RAID-0 array on a desktop computer. The real world performance increases are negligible at best and the reduction in reliability, thanks to a halving of the mean time between failure, makes RAID-0 far from worth it on the desktop.
<p>
There are some exceptions, especially if you are running a particular application that itself benefits considerably from a striped array, and obviously, our comments do not apply to server-class IO of any sort. But for the vast majority of desktop users and gamers alike, save your money and stay away from RAID-0.
</p>
</blockquote>
<p>
The original hard drive benchmark review website, storagereview.com, <a href="http://www.storagereview.com/articles/200406/20040625TCQ_6.html">offers this guidance</a>:
</p>
<p>
</p>
<blockquote>
The enthusiasm of the power user community combined with the marketing apparatus of firms catering to such crowds has led to an extraordinarily erroneous belief that striping data across two or more drives yields significant performance benefits for the majority of non-server uses. This could not be farther from the truth! Non-server use, even in heavy multitasking situations, generates lower-depth, highly-localized access patterns where read-ahead and write-back strategies dominate. Theory has told those willing to listen that striping does not yield significant performance benefits. Some time ago, a controlled, empirical test backed what theory suggested. Doubts still lingered- irrationally, many believed that results would somehow be different if the array was based off of an SATA or SCSI interface. As shown above, the results are the same. Save your time, money and data- leave RAID for the servers!
</blockquote>
<p>
If you have your heart set on RAID 0, go for it. It won't <i>hurt</i> performance. But be sure you're making <a href="http://www.devhardware.com/c/a/Storage-Devices/RAID-Not-Such-a-Clever-Idea-for-Your-Home-PC/">an informed decision</a>. There's a lot to be said for simplicity.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2005-07-07T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/desktop-raid-oversold/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ How to be Successful, Happy, Fulfilled, and Drive a Totally Hot Car ]]></title>
<link>https://blog.codinghorror.com/how-to-be-successful-happy-fulfilled-and-drive-a-totally-hot-car/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
Wil Shipley, the entity behind <a href="http://arstechnica.com/reviews/apps/delicious-library.ars">Delicious Library</a>, has a hilarious (and informative) talk on why he develops software for the Mac-- and also netted $54,000 from Delicious Library on the first day with zero advertising.
</p>
<p>
<a href="http://wilshipley.com/blog/WWDC_Student_Talk.pdf">How to Succeed Writing Mac Software</a>  (176kb PDF)
</p>
<p>
One of the funniest and most oddly inspiring things I've read in a long time. Highly recommended.
</p>
<p>
(via <a href="http://www.furrygoat.com/">Steve Makofsky</a>)
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2005-07-08T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/how-to-be-successful-happy-fulfilled-and-drive-a-totally-hot-car/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ Blue LED Backlash ]]></title>
<link>https://blog.codinghorror.com/blue-led-backlash/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
I recently purchased the <a href="http://games.dlink.com/products/?pid=370">DGL-4300 wireless router</a>, mainly because it <a href="http://www.codinghorror.com/blog/archives/000211.html">includes gigabit ethernet</a>, which is still quite rare in routers. It certainly looks cool, as routers go, with its sleek rubbery design and all-blue LEDs. But those blue LEDs-- particularly a bank of them, all blinking away-- are blindingly bright! They're actually painful to look at, which is sort of ironic considering they are status and activity LEDs.
</p>
<p>
Evidently, <a href="http://www.dcontinuum.com/content/news.php?id=209">this is a known issue with blue LEDs</a>:
</p>
<p>
</p>
<blockquote>
Blue LEDs really are brighter than their old-fashioned red and green counterparts. Barney O'Meara, vice president of Canadian LED manufacturer The Fox Group, said <b>blue LEDs have at least 20 times the luminous intensity of old-fashioned red and green indicators</b>. O'Meara said his company has developed technology to manufacture low-intensity blue LEDs.
<p>
"Blue tends to cause more discomfort and disability glare than other, longer wavelengths," said Dr. David Sliney, an expert on the harmful effects of bright light sources at the U.S. Army Center for Health Promotion and Preventive Medicine in Maryland. Sliney said the eye's lens cannot focus sharply on the blue lights. While red or green light is focused precisely onto the retina, blue light is focused slightly in front of it, which causes a distracting halo around bright blue lights.
</p>
<p>
In addition, blue scatters more widely than other colors as it passes through the eyeball, Sliney said. Together, these two effects cause the intense blue light from a point source, like an LED, to spread out across the retina, interfering with other parts of the scene. It's called dispersion: Blue's shorter wavelength makes it refract at a greater angle than, say, red or green.
</p>
<p>
Also, human vision becomes far more sensitive to blue when ambient light levels are low, a phenomenon known as the Purkinje shift. So a blue light that is merely eye-catching on a brightly lit store shelf can become dazzling when the lights are low, such as when watching a movie on a laptop in a dimly lit room.
</p>
<p>
Some researchers report that, at night, even low-level blue light may be enough to trigger recently discovered receptors in the retina that can depress melatonin production, disrupt sleep patterns and suppress the immune system.
</p>
</blockquote>
<p>
If there's a bright blue LED in your field of view, your only recourse may be <a href="http://martybugs.net/articles/bling.cgi">"painting" it with a permanent black magic marker</a>. My room is dimly lit now, and if I glance over to the router, it's <b>like getting tiny little blue LED punji sticks right in the eye</b>. And I wear glasses, which doesn't help, either. Blue LEDs may look cool, but for actual functional use, give me green or red LEDs any day.
</p>
<p>
Blue LEDs weren't even commercially viable until the mid 1990's, largely thanks to the research of one <a href="http://www.sciencewatch.com/jan-feb2000/sw_jan-feb2000_page3.htm">Shuji Nakamura</a>:
</p>
<p>
</p>
<blockquote>
I kept at it, but I was dispirited. For ten years I had worked very hard to make these products. I worked twelve hours a day, seven days a week, except holidays. I had a very, very small budget and had to make everything I needed myself. I even made my own reactors -- the furnaces needed to do the crystal work. The commercial reactors were too expensive. I made three products all by myself, and still my salary and position were not good at the company. My bosses always complained that my results were terrible, because I spent a lot of money, as far as they were concerned, and nothing sold. But for ten years I had been working to make these LED materials and I knew at the time there were no high-brightness blue LEDs. For LED researchers, this was a dream. But my bosses said it would be impossible to create a blue LED at Nichia, because many big companies and many research teams in big universities were trying to do it and were failing.
</blockquote>
<p>
Except for the blue LED problem, I give the DGL-4300 router a big thumbs up. The <a href="http://www.tomsnetworking.com/Reviews-191-ProdID-DGL4300-7.php">Quality of Service (QoS) feature they call "GamerFuel" really works</a>. I can download stuff in BitTorrent while playing Battlefield 2 with hardly any impact on my ping in the game.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2005-07-10T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/blue-led-backlash/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ VNC vs. Remote Desktop ]]></title>
<link>https://blog.codinghorror.com/vnc-vs-remote-desktop/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
Microsoft's <a href="http://en.wikipedia.org/wiki/Remote_Desktop_Protocol">Remote Desktop</a> is incredibly convenient. It's the next best thing to physically being in front of the target computer-- and it's by far the fastest remoting protocol I've ever used. Over a fast network, you can <i>almost</i> convince yourself that you're using the local machine. Remote desktop is great stuff, and it's basically free. It does have a few annoying limitations, though:
</p>
<ol>
<li>it insists on treating every remote login as a <b>separate user session</b>. Except in the special case where you log into your own session.
</li>
<li>it <b>can't handle multiple monitors</b> in any way; you'll only see the primary monitor. Fortunately, <a href="http://www.realtimesoft.com/ultramon/">UltraMon</a> has a convenient one-click taskbar enable/disable function for the alternate monitors. It even remembers the position of windows when moving them back.
</li>
<li>in fine Microsoft tradition, <b>it's intentionally crippled</b>. You can only have one active Remote Desktop session under XP, and two sessions under Windows 2003/2000 server. I suppose this is to keep us from setting up our own OS/360 timeshare boxes.
</li>
</ol>
<p>
Point #1 is in stark contrast to "old school" remoting programs such as pcAnywhere and Carbon Copy, which simply <b>displayed whatever happened to be on the client's screen</b>-- sort of like virtual video adapters. Sometimes, this is what you want. And in those situations, <a href="http://www.tightvnc.com/">you want TightVNC</a>. VNC follows the older model of simply showing whatever is on the screen with no forced logins required. Of course, this has security implications; if you remote into a machine that an Administrator is logged into, you'll effectively be an Administrator. And if you're both trying to use the computer at the same time, it's even more fun!
</p>
<p>
VNC has been around for years in various incarnations; what makes TightVNC so useful is that it's free, natch, but more importantly, <b>it implements a video hook driver</b>. One of the long-running historical weaknesses of the VNC protocol was that it didn't interface at the video driver level with Windows; it had to poll for screen changes. This works, and it's a very cross-platform approach, but it's also hellaciously inefficient and highly CPU intensive. Why poll for changes when the video driver can tell you what the changes were? When you <a href="http://www.tightvnc.com/download.html">download TightVNC</a>, be sure to download the "developmental" version (at the time of writing, 1.3d7) and the dfrimage.zip video hook driver.
</p>
<p>
Even with this hook driver, it isn't as fast as Remote Desktop, but it's at least in the ballpark. If you ever used VNC in the past and were disappointed with how slow and CPU intensive it was, you should try again with TightVNC and the video hook driver. There's a world of difference.
</p>
<p>
If you're feeling really adventurous, there's even an <a href="http://dnvnccl.sourceforge.net/">open-source C# VNC client</a>. TightVNC implements a few specially optimized protocols of its own, but it does support the "classic" VNC protocols as well. I was able to remote into a TightVNC server using this C# client.
</p>
<p>
Unfortunately, neither Remote Desktop nor VNC does a good job of handling multiple monitors on the target machine, so that's a wash. You'll get the primary monitor, and you'll like it. There is some support for multimon in the latest versions of pcAnywhere, as <a href="http://www.realtimesoft.com/multimon/reviews/pcanywhere/">this review at RealTimeSoft points out</a>.
</p>
<p>
Note that a few key sequences, such as CTRL+ALT+DEL, can't be intercepted by any remote desktop client, even in fullscreen mode. There's <a href="http://www.microsoft.com/resources/documentation/Windows/XP/all/reskit/en-us/Default.asp?url=/resources/documentation/Windows/XP/all/reskit/en-us/pree_rem_qsva.asp">a handy list of keyboard shortcuts for the Remote Desktop key equivalents</a> in the online XP resource kit.
</p>
<p>
Incidentally, there are <a href="http://www.kvmpartnership.co.uk/eric.htm">hardware-level remote desktop solutions</a> which are capable of remotely displaying BIOS setup screens-- even the <a href="http://www.daimyo.org/bsod/">Blue Screen o' Death</a>! Pretty gnarly stuff.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2005-07-11T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/vnc-vs-remote-desktop/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ Gigabit Ethernet and Back of the Envelope Calculations ]]></title>
<link>https://blog.codinghorror.com/gigabit-ethernet-and-back-of-the-envelope-calculations/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
At work today, we had a problem with a particular workstation. Although it was connected to a gigabit ethernet hub, network file transfers were "too slow". How do you quantify "too slow"?
</p>
<p>
<img alt="image placeholder" >
</p>
<p>
I was reminded of chapter seven of <a href="http://www.amazon.com/exec/obidos/ASIN/0201657880/codihorr-20">Programming Pearls</a> -- <a href="http://www.cs.bell-labs.com/cm/cs/pearls/bote.html">The Back of the Envelope</a>:
</p>
<blockquote>
It was in the middle of a fascinating conversation on software engineering that Bob Martin asked me, "How much water flows out of the Mississippi River in a day?" Because I had found his comments up to that point deeply insightful, I politely stifled my true response and said, "Pardon me?" When he asked again I realized that I had no choice but to humor the poor fellow, who had obviously cracked under the pressures of running a large software shop.
<p>
My response went something like this. I figured that near its mouth the river was about a mile wide and maybe twenty feet deep (or about one two-hundred-and-fiftieth of a mile). I guessed that the rate of flow was five miles an hour, or a hundred and twenty miles per day. Multiplying
</p>
<p>
1 mile x 1/250 mile x 120 miles/day   ~   1/2 mile<sup>3</sup>/day
</p>
<p>
showed that the river discharged about half a cubic mile of water per day, to within an order of magnitude. But so what?
</p>
<p>
At that point Martin picked up from his desk a proposal for the communication system that his organization was building for the Summer Olympic games, and went through a similar sequence of calculations. He estimated one key parameter as we spoke by measuring the time required to send himself a one-character piece of mail. The rest of his numbers were straight from the proposal and therefore quite precise. His calculations were just as simple as those about the Mississippi River and much more revealing. They showed that, under generous assumptions, the proposed system could work only if there were at least a hundred and twenty seconds in each minute. He had sent the design back to the drawing board the previous day. (The conversation took place about a year before the event, and the final system was used during the Olympics without a hitch.)
</p>
<p>
That was Bob Martin's wonderful (if eccentric) way of introducing the engineering technique of "back-of-the-envelope" calculations. The idea is standard fare in engineering schools and is bread and butter for most practicing engineers. Unfortunately, it is too often neglected in computing.
</p>
</blockquote>
<p>
To diagnose the network throughput issues, I busted out my copy of <a href="http://www.pcausa.com/Utilities/pcattcp.htm">pcattcp</a> and started doing some baseline network speed measurements. It's a great utility, and quite simple to use; just run one instance on a remote machine using the -R flag, then run another instance on the client with -t (remotename) and you're off to the races.
</p>
<p>
But even before that, I started with a loopback test:
</p>
<p>
</p>
<pre>
C:Program Filesttcp&gt;<b>pcattcp -t -f M localhost</b>
PCAUSA Test TCP Utility V2.01.01.08
TCP Transmit Test
Transmit    : TCP -&gt; 127.0.0.1:5001
Buffer Size : 8192; Alignment: 16384/0
TCP_NODELAY : DISABLED (0)
Connect     : Connected to 127.0.0.1:5001
Send Mode   : Send Pattern; Number of Buffers: 2048
Statistics  : TCP -&gt; 127.0.0.1:5001
16777216 bytes in 0.17 real seconds = <span style="color:red">93.02 MB/sec</span> +++
numCalls: 2048; msec/call: 0.09; calls/sec: 11906.98
</pre>
<p>
This is helpful because it establishes an absolute upper bound on network performance. Even with an infinitely fast network, <b>I won't achieve more than 93 megabytes per second throughput</b>-- at least not on my PC. And this is a completely in-memory test; real world network operations may depend on hard disk reads and writes, which will be far slower.
</p>
<p>
A good rule of thumb for real-world throughput is:
</p>
<p>
</p>
<ul>
<li>10baseT = 1 megabyte/sec
</li>
<li>100baseT = 10 megabytes/sec
</li>
<li>1000baseT = 30 megabytes/sec
</li>
</ul>
<p>
All my ttcp testing over the last couple years has confirmed these numbers, plus or minus ten percent. I don't have as much experience with gigabit throughput, since I just got my <a href="http://www.codinghorror.com/blog/archives/000337.html">first gigabit router</a>, but you definitely shouldn't expect the perfect scaling we achieved moving from 10baseT to 100baseT. Without any <a href="http://www.enterprisenetworkingplanet.com/nethub/article.php/3485486">major tweaking</a>, you'll get only <a href="http://www.windowsitpro.com/Windows/Articles/ArticleID/24551/pg/5/5.html">a fraction of the tenfold bandwidth improvement you might expect</a>:
</p>
<p>
</p>
<blockquote>
I noticed a significant improvement in multicast performance, measured by the time required to send a 690MB disk image to 18 multicast clients in one session. The HP NetServer LT6000r served as the multicast server, and the clients were using Fast Ethernet links to the desktop switch. On the Fast Ethernet network, the task took 19 minutes. On the Gigabit Ethernet network, the time was reduced to 9 minutes.
<p>
I measured the transfer of a large (1GB) file between the same hosts over Fast Ethernet and Gigabit Ethernet links with sustained network traffic (streaming media to multiple unicast clients). The file transfer took 230 seconds on Fast Ethernet and 88 seconds on Gigabit Ethernet.
</p>
<p>
Overall, my tests showed that Gigabit Ethernet provided a tangible performance improvement, but <b>bottlenecks elsewhere kept the overall throughput lower than I had hoped</b>. I was satisfied with Gigabit Ethernet performance relative to Fast Ethernet, and I was particularly impressed that general network responsiveness remained acceptable even during peak network loads. But I was disappointed not to be able to reach much beyond 450Mbps on the Lab's most capable server.
</p>
</blockquote>
<p>
To be fair, that article is from 2002. A typical new desktop PC probably has more bandwidth and power than the author's fastest server. Even with those real world caveats, <b>gigabit ethernet still offers 2 to 3 times the performance of 100baseT</b>, which isn't exactly chopped liver, either.
</p>
<p>
In the end, our issue at work had nothing to do with the "problem" desktop. After a bit of ad-hoc ttcp testing, we found that <i>nobody</i> could achieve more than about 11 megabytes per second throughput to the server, even when directly connected to the gigabit switch. <a href="http://www.pcausa.com/Utilities/ttcpdown1.htm">Download pcattcp</a> and try for yourself. Some other interesting experiments you can run with ttcp are UDP (-u) versus TCP/IP, and varying the packet size (-l 4096).
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2005-07-12T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/gigabit-ethernet-and-back-of-the-envelope-calculations/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ Code Colorizing and Readability ]]></title>
<link>https://blog.codinghorror.com/code-colorizing-and-readability/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>Most developers, myself included, are content with syntax coloring schemes that are fairly close to <strong>Visual Studio's default of black text on a white background</strong>. I'll occasionally encounter developers who prefer black backgrounds. And I've even seen developers who prefer the white on blue scheme popularized by <a href="http://www.winsupersite.com/images/reviews/winme_b3_42.gif">DOS Wordperfect</a>.</p>
<p>I vaguely recall reading somewhere that black on white was the most readable of all color schemes. I found two studies with actual data based on real-world tests with users:</p>
<ol>
<li>
<a href="http://www.laurenscharff.com/research/survreslts.html">Color Test Results</a>
<blockquote>As you can see, the most readable color combination is black text on white background; overall, there is a stronger preference for any combination containing black. The two least readable combinations were red on green and fuchsia on blue. White on blue and red on yellow were ranked fairly high, while green on yellow and white on fuchsia were ranked fairly low. All others fell somewhere between these extremes. Also, in every color combination surveyed, <strong>the darker text on a lighter background was rated more readable than its inverse (e.g. blue text on white background ranked higher then white text on blue background).</strong>
</blockquote>
</li>
<li>
<a href="http://www.laurenscharff.com/research/AHNCUR.html">Readability Of Websites With Various Foreground/Background Color Combinations, Font Types And Word Styles</a>
<blockquote>From these results, one can say that contrast affects legibility, but unfortunately, <strong>it does not seem to be as simple as high contrast being better than low contrast</strong>. In the main experiment, Green on Yellow had the fastest RT's, and in the control experiment, medium gray, and dark gray had the fastest RT's. In neither experiment did the Black on White condition show the fastest RT's. These results show that these participants had faster response times when more median contrasts were used. These results supported Powell (1990), who suggested avoiding sharp contrasts, but did not fully support Rivlen et al (1990), who suggested maintaining high contrast.
<p>According to a manual by AT&amp;T; (1989), the direction of the contrast (dark on light, or light on dark) might also affect legibility. When light text is placed on a dark background the text may seem to glow and become blurred; this is referred to as halation, and it may make the text harder to read. <strong>Some evidence for an effect of halation was found in the current experiment</strong>.</p>
</blockquote>
</li>
</ol>
<p>So, yes, there's definitely data to support the black on white status quo. After a quick trip into the Environment, Fonts and Colors section of the Visual Studio Options dialog, I captured these screenshots. Compare for yourself:</p>
<p><img alt="image placeholder" >
<p><img alt="image placeholder" >
<p><img alt="image placeholder" >
<p><strong>I'll take any of these schemes over the non-colorized Notepad version</strong>, but I feel very strongly that black on white color schemes are the way to go for overall readability.</p>
<p>Interestingly, <a href="http://web.archive.org/web/20030223151459/http://www.matthiasmedia.com.au/briefing/webextra/redfaces.html">this is also true of bibles</a>.</p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2005-07-13T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/code-colorizing-and-readability/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ A Tribute to the Windows 3.1 "Hot Dog Stand" Color Scheme ]]></title>
<link>https://blog.codinghorror.com/a-tribute-to-the-windows-31-hot-dog-stand-color-scheme/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>Yesterday's <a href="http://www.codinghorror.com/blog/archives/000340.html">post about code syntax color schemes</a> got me thinking about what is perhaps the ultimate color scheme, <b>Windows 3.1's "Hot Dog Stand"</b>:</p>
<img alt="image placeholder" >
<p>The truly funny thing about this color scheme is that all the other Windows 3.1 color schemes are surprisingly rational, totally reasonable color schemes. And then you get to "Hot Dog Stand". Which is <i>utterly insane</i>. And that makes it quite possibly <b><a href="http://www.azlyrics.com/lyrics/tenaciousd/tribute.html">the greatest color scheme ever devised</a></b>.</p>
<p>I have to think it was included as a joke. And it is referenced in a joke titled <a href="http://www.electric-escape.net/node/531">You may be a Microsoft Employee If…</a>:</p>
<blockquote>
<p>…your house is decorated like the "Hot Dog Stand" color scheme from Windows.</p>
</blockquote>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2005-07-14T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/a-tribute-to-the-windows-31-hot-dog-stand-color-scheme/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ Passwords vs. Pass Phrases ]]></title>
<link>https://blog.codinghorror.com/passwords-vs-pass-phrases/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
Microsoft security guru Robert Hensing hit a home run his first time at bat with his <a href="http://blogs.technet.com/robert_hensing/archive/2004/07/28/199610.aspx">very first blog post</a>. In it, he advocates that passwords, as we traditionally think of them, should not be used:
</p>
<p>
</p>
<blockquote>
So here's the deal - <b>I don't want you to use passwords, I want you to use pass-PHRASES.</b>  What is a pass-phrase you ask? Let's take a look at some of my recent pass-phrases that I've used inside Microsoft for my 'password'.
<ul>
<li>"If we weren't all crazy we would go insane" (Jimmy Buffett rules)*
</li>
<li>"Send the pain below!"
</li>
<li>"Mean people suck!"
</li>
</ul>
<p>
So why are these pass-phrases so great?
</p>
<ol>
<li>They meet all password complexity requirements due to the use of upper / lowercase letters and punctuation (you don't HAVE to use numbers to meet password complexity requirements)
</li>
<li>They are so freaking easy for me to remember it's not even funny.  For me, I find it MUCH easier to remember a sentence from a favorite song or a funny quote than to remember 'xYaQxrz!' (which b.t.w. is long enough and complex enough to meet our internal complexity requirements, but is weak enough to not survive any kind of brute-force password grinding attack with say LC5, let alone a lookup table attack).  That password would not survive sustained attack with LC5 long enough to matter so in my mind it's pointless to use a password like that.  You may as well just leave your password blank.
</li>
<li>I dare say that even with the most advanced hardware you are not going to guesss, crack, brute-force or pre-compute these passwords in the 70 days or so that they were around (remember you only need the password to survive attack long enough for you to change the password).
</li>
</ol>
</blockquote>
<p>
Windows 2k and higher support passwords of up to 127 unicode characters. So this will work on virtually every Windows network in existence. Reggie Burnett, however, <a href="http://www.bytefx.com/blog/PermaLink,guid,d89cd782-4b49-4202-8d9b-9bfd11004123.aspx">has some doubts</a>:
</p>
<p>
</p>
<blockquote>
The reason I think that Robert's logic is a bit flawed is that a pass phrase is likely to contain readable words (else it really isn't a pass phrase) and therefore can be attacked not at the letter level but at the word level.  According to various sites I visited, the average English speaker knows about 20,000 words but uses only about 2,000 of those in a given week.  Since the user is likely to use words they are used to, we can safely say that most pass phrases will contain one of about 5,000 words.  And, if a pass phrase contains 4 words, then our possibilities are 5000^4.  I'll spare you the math, but you'll see that the cracker that is trying pass phrases has alot fewer possibilities to try.  Now, of course, using more words will increase the security, but we should also note that since the attack is at the word level, the length of the word would not matter.  "Mean people suck" would be just as secure as "Extremely important password".  They are both 3 words and both use common words.
</blockquote>
<p>
While I see his point, he's completely ignoring the capitalization and punctuation in "Mean people suck!". I do agree that for the best security, <b>your passphrase should include capitalization, punctuation, and possibly even numbers</b> if you can work them in there in a logical way. Andy Johns <a href="http://geekswithblogs.net/ajohns/archive/2004/07/28/8955.aspx">elaborates</a>:
</p>
<p>
</p>
<blockquote>
As I've often mentioned, I'm a consultant and I see a lot of crap out in the wild. By far the most annoying crap I see is around passwords. The more paranoid the network admins (or security council, or board, or whoever sets the rules) the more obscure the passwords must be, and the more often they need to be changed. <b>What these people fail to realize is the average human worker just wants to do their job, and can't remember Syz8#K3! as a password.</b> So what do they do.... Out comes the post-it-note on the desk, or in the drawer, or under the keyboard, or the file on the desktop called "passwords.txt". Some workers try and be smart by leaving out a letter, or writing it backwards.... but still, if your password is so hard to remember that you have to write it down, then you have no security at all, and a significant portion of your support staff/costs must be spent dealing with resetting passwords.
<p>
A pass-phrase of "this is my password and it's for my eyes only" is far easier to remember than Syz8#K3! and also far more secure, and nearly takes the same amount of time to type. Need more security, throw in a few caps, or numbers: "My address is 1234 Main street" or "Jenny's number is 867-5309". Yes, I'm breaking rules about not including personal information in a password, but remember, 1) these are examples, and 2) a pass-phrase is different. A password of "Chris" because your son's name is Chris is a bad password, but a password of: "My oldest son's name is Chris and he is 10 years old" is a good password.
</p>
</blockquote>
<p>
Passphrases are clearly more usable than traditional "secure" passwords. They are also highly likely to be more secure. Even naive worst-case passphrases like "this is my password" aren't all that hackable, at least when compared to their single word equivalents, eg, "password".
</p>
<p>
Easier on the user, harder for hackers: that's a total no-brainer. I've adopted passphrases across the board on all the systems I use.
</p>
<p>
* ugh
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2005-07-17T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/passwords-vs-pass-phrases/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ For Best Results, Don't Initialize Variables ]]></title>
<link>https://blog.codinghorror.com/for-best-results-dont-initialize-variables/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
I noticed on a few projects I'm currently working on that the developers are maniacal about initializing variables. That is, either they initialize them when they're declared:
</p>
<p>
</p>
<pre language="c#">
private string s = null;
private int n = 0;
private DataSet ds = null;
</pre>
<p>
Or they initialize them in the constructor:
</p>
<p>
</p>
<pre language="c#">
class MyClass
{
private string s;
private int n;
private DataSet ds;
public MyClass()
{
s = null;
n = 0;
ds = null;
}
}
</pre>
<p>
Well, this all struck me as unnecessary work in the .NET world. Sure, maybe that's the convention in the wild and wooly world of <s>buffer overruns</s>C++, but this is <b>managed code</b>. Do we really want to play the <a href="http://www.codinghorror.com/blog/archives/000031.html">I'm smarter than the runtime</a> game again?
</p>
<p>
Ok, so maybe you're a masochist and you like extra typing. What about the performance argument? According to this <a href="http://www.codeproject.com/dotnet/DontInitializeVariables.asp">well-researched CodeProject article</a>, initializing variables actually hurts performance. The author provides some benchmark test code along with his results:
</p>
<p>
</p>
<table>
<tr>
<td>Creating an object and initializing on definition</td>
<td>11% slower</td>
</tr>
<tr>
<td>Creating an object and initializing in the constructor</td>
<td>16% slower</td>
</tr>
<tr>
<td>Calling a method and initializing variables</td>
<td>25% slower</td>
</tr>
</table>
<p>
That's on the author's Pentium-M 1.6ghz. I tested the same code (optimizations enabled, release mode) on my Athlon 64 2.1ghz and a Prescott P4 2.8ghz:
</p>
<p>
</p>
<table>
<tr>
<td></td>
<td>Athlon 64</td>
<td>P4</td>
</tr>
<tr>
<td>Creating an object and initializing on definition</td>
<td>30% slower</td>
<td>35% slower</td>
</tr>
<tr>
<td>Creating an object and initializing in the constructor</td>
<td>30% slower</td>
<td>36% slower</td>
</tr>
<tr>
<td>Calling a method and initializing variables</td>
<td>14% slower</td>
<td>8% slower</td>
</tr>
</table>
<p>
I recompiled under VS.NET 2005 beta 2 using the Athlon 64 to see how .NET 2.0 handles this:
</p>
<p>
</p>
<table>
<tr>
<td>Creating an object and initializing on definition</td>
<td>0% slower</td>
</tr>
<tr>
<td>Creating an object and initializing in the constructor</td>
<td>20 % slower</td>
</tr>
<tr>
<td>Calling a method and initializing variables</td>
<td>20% slower</td>
</tr>
</table>
<p>
Clearly there's a substantial performance penalty for initializing variables in both .NET 1.1 and even .NET 2.0 (although the newer compiler appears to optimize away initialization on definition). I recommend <b>avoiding initialization as a general rule</b>, unless you have a compelling reason to do so. If you're only initializing variables to avoid the uninitialized variable compiler warning, check out the <a href="http://blogs.msdn.com/gusperez/articles/85722.aspx">new #pragma warning feature</a> to programmatically disable specific warnings in .NET 2.0.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2005-07-18T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/for-best-results-dont-initialize-variables/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ On Being Pushy ]]></title>
<link>https://blog.codinghorror.com/on-being-pushy/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>Via <a href="http://www.hanselman.com/blog/25RulesOfManagement.aspx">Scott Hanselman</a>:</p>
<blockquote>I've been reading as much as I can on how to be an effective manager lately. For a number of reasons, mostly internal, but also because in a recent lunch Chris Sells said (something like): <strong>"If you're not getting slapped by your boss at least twice a year, you're not pushing the envelope enough."</strong>
</blockquote>
<p>He then links to a set of <a href="http://www.ccgmedia.com/article_william_swanson.php">management rules</a>, specifically highlighting number three:</p>
<blockquote><em> If you are not criticized, you may not be doing much. </em></blockquote>
<p>There's a fine line between pushing and pushy, but you <strong>have to push</strong>. You may get slapped, but so what? Anything is preferable to indifference or, worse, the <a href="http://headrush.typepad.com/creating_passionate_users/2005/07/avoid_cliches_l.html">same old cliches</a>.</p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2005-07-19T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/on-being-pushy/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ Just Try Again ]]></title>
<link>https://blog.codinghorror.com/just-try-again/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
It's funny because it's true:
</p>
<p>
</p>
<blockquote>
A Software Engineer, a Hardware Engineer and a Departmental Manager were on their way to a meeting in Switzerland. They were driving down a steep mountain road when suddenly the brakes on their car failed. The car careened almost out of control down the road, bouncing off the crash barriers, until it miraculously ground to a halt, scraping along the mountainside.
The car's occupants, shaken but unhurt, now had a problem: they were stuck halfway down a mountain in a car with no brakes. What were they to do?
<p>
"I know", said the Departmental Manager, "Let's have a meeting, propose a Vision, formulate a Mission Statement, define some Goals, and by a process of Continuous Improvement find a solution to the Critical Problems, and we can be on our way."
</p>
<p>
"No, no", said the Hardware Engineer, "That will take far too long, and besides, that method has never worked before. I've got my Swiss Army knife with me, and in no time at all I can strip down the car's braking system, isolate the fault, fix it, and we can be on our way."
</p>
<p>
"Well", said the Software Engineer, "Before we do anything, I think we should push the car back up the road and see if it happens again."
</p>
</blockquote>
<p>
In all seriousness, I can't recall a single week that I haven't done this exact thing at least once: <i>Geez, I dunno, just run it again and see if the problem recurs.</i> I don't know if it's a sad indictment of the state of software engineering or a not-so-subtle hint that software engineers deal with thousands of variables in even the simplest of programs.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2005-07-20T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/just-try-again/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ Show, Don't Tell ]]></title>
<link>https://blog.codinghorror.com/show-dont-tell/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
I picked up a copy of <a href="http://www.amazon.com/exec/obidos/ASIN/1590595009/codihorr-20">The Best Software Writing I: Selected and Introduced by Joel Spolsky</a>. It's essentially just a collection of Joel's favorite blog entries from the last few years. But it's Joel, so you know they're going to be good ones. In the introduction, he explains why he's so enthusiastic about blog writing: it encourages the simple, but powerful use of <b>show, don't tell</b>:
</p>
<p>
</p>
<blockquote>
The publisher wanted to get a quote from me to put on the back cover talking about how wonderful his book was. Normally I'd be happy to do that; I'm a complete publicity slut and will do just about anything to get my name in front of the reading public. My hope is that if I do this enough, telemarketers who call me at home will be able to pronounce my name.
<p>
The book started out looking promising. It filled a real need. I remember several times standing in bookstores desperately trying to find a book on the very topic, but there was nothing to be found. So I started reading the manuscript full of high hopes.
</p>
<p>
Bleah. I could hardly bear to keep reading. The author kept saying smart and interesting things. He even wrote clearly. But the book was thoroughly, completely, boring. And worse, it was completely unconvincing.
</p>
<p>
The author had violated the number one rule of good writing, the "Show, don't tell" rule. There was not a single story in the book. It was chock full of sentences like "A good team leader provides inspiration by setting a positive example." What the eff?
</p>
<p>
Pay attention. Here's the way to say "a good team leader provides inspiration by setting a positive example" without putting your audience to sleep:
</p>
<p>
</p>
<blockquote>
<i>
For a few months in the army I worked in the mess hall, clearing tables and washing dishes nonstop for 16 hours a day, with only a half hour break in the afternoon, if you washed the dishes really fast. My hands were permanently red, the front of my blouse was permanently wet and smelly, and I couldn't take it any more.
</i><p>
Somehow, I managed to get out of the mess hall into a job working for a high-ranking Sergeant Major. This guy had years of experience. He was probably twenty years older than the kids in the unit. Even in the field, he was always immaculate, wearing a spotless, starched, pressed full dress uniform with impeccably polished shoes no matter how dusty and muddy the rest of the world was around him. You got the feeling that he slept in 300 threadcount Egyptian cotton sheets while we slept in dusty sleeping bags on the ground.
</p>
<p>
His job consisted of two things: discipline and the physical infrastructure of the base. He was a bit of a terror to everyone in the battalion due to his role as the chief disciplinary officer. Most people only knew him from strutting around the base conducting inspections, screaming at the top of his lungs and demanding impossibly high standards of order and cleanliness in what was essentially a bunch of tents in the middle of the desert, alternately dust-choked or mud-choked, depending on the rain situation.
</p>
<p>
Anyway, on the first day working for the Sergeant Major, I didn't know what to expect. I was sure it was going to be terrifying, but it had to be better than washing dishes and clearing tables all day long (and it's not like the guy in charge of the mess hall was such a sweetheart, either!)
</p>
<p>
On the first day he took me to the officer's bathroom and told me I would be responsible for keeping it clean. "Here's how you clean a toilet," he said.
</p>
<p>
And he got down on his knees in front of the porcelain bowl, in his pressed starched spotless dress uniform, and scrubbed the toilet with his bare hands.
</p>
<p>
To a 19 year old who has to clean toilets, something which is almost by definition the worst possible job in the world, the sight of this high ranking, 38 year old, immaculate, manicured, pampered discipline officer cleaning a toilet completely reset my attitude. If he can clean a toilet, I can clean a toilet. There's nothing wrong with cleaning toilets. My loyalty and inspiration from that moment on were unflagging. That's leadership.
</p>
</blockquote>
<p>
See what I did here? I told a story. <b>I'll bet you'd rather sit through ten of those 400 word stories than have to listen to someone drone on about how "a good team leader provides inspiration by setting a positive example."</b>
</p>
</blockquote>
<p>
True enough. And even if you don't entirely agree that Joel's choices are "The Best Software Writing"*, they're still pretty darn good:
</p>
<p>
</p>
<ol>
<li>
<a href="http://www.artima.com/weblogs/viewpost.jsp?thread=74230">Style is Substance</a>, Ken Arnold
</li>
<li>
<a href="http://www.secretgeek.net/ms_search.asp">Award for the Silliest User Interface: Windows Search</a>, Leon Bambrick
</li>
<li>
<a href="http://www.forio.com/outsourcing.htm">The Pitfalls of Outsourcing Programmers</a>, Michael Bean
</li>
<li>
<a href="http://neopoleon.com/blog/posts/434.aspx">Excel as a database</a>, Rory Blyth
</li>
<li>
<a href="http://www.adambosworth.net/archives/000031.html">ICSOC04 Talk</a>, Adam Bosworth
</li>
<li>
<a href="http://www.danah.org/papers/Supernova2004.html">Autistic Social Software</a>, Danah Boyd
</li>
<li>
<a href="http://blogs.msdn.com/oldnewthing/archive/2003/12/24/45779.aspx">Why not just block the apps that rely on undocumented behavior?</a>, Raymond Chen
</li>
<li>
<a href="http://www.ok-cancel.com/comic/4.html">Kicking the Llama #4</a>, Kevin Cheng and Tom Chi
</li>
<li>
<a href="http://www.boingboing.net/2004/11/06/save_canadas_interne.html">Save Canada's internet from WIPO</a>, Cory Doctorow
</li>
<li>
<a href="http://www.livejournal.com/users/ea_spouse/274.html">EA: The Human Story</a>, ea_spouse
</li>
<li>
<a href="http://www.mindview.net/WebLog/log-0025">Strong Typing vs. Strong Testing</a>, Bruce Eckel
</li>
<li>
<a href="http://www.ftrain.com/ProcessingProcessing.html">Processing Processing</a>, Paul Ford
</li>
<li>
<a href="http://www.paulgraham.com/gh.html">Great Hackers</a>, Paul Graham
</li>
<li>
<a href="http://daringfireball.net/2004/06/location_field">The Location Field is the New Command Line</a>, John Gruber
</li>
<li>
<a href="http://www.eaipatterns.com/ramblings/18_starbucks.html">Starbucks Does Not Use Two-Phase Commit</a>, Gregor Hohpe
</li>
<li>
<a href="http://www.xprogramming.com/xpmag/jatPassion.htm">Passion</a>, Ron Jeffries
</li>
<li>
<a href="http://ejohnson.blogs.com/software/2004/11/i_find_c_intere.html">C++ - The Forgotten Trojan Horse</a>, Eric Johnson
</li>
<li>
<a href="http://blogs.msdn.com/ericlippert/archive/2003/10/28/53298.aspx">How many Microsoft employees does it take to change a lightbulb?</a>, Eric Lippert
</li>
<li>
<a href="http://www.randsinrepose.com/archives/2004/07/10/what_to_do_when_youre_screwed.html">What To Do When You're Screwed</a>, Michael "Rands" Lopp
</li>
<li>
<a href="http://blogs.msdn.com/larryosterman/archive/2004/04/20/116998.aspx">Larry's rules of software engineering #2: Measuring testers by test metrics doesn't</a>, Larry Osterman
</li>
<li>
<a href="http://www.poppendieck.com/pdfs/Compensation.pdf">Team Compensation</a> (pdf), Mary Poppendieck
</li>
<li>
<a href="http://blogs.msdn.com/rick_schaut/archive/2004/02/26/80193.aspx">Mac Word 6.0</a>, Rick Schaut
</li>
<li>
<a href="http://www.shirky.com/writings/group_enemy.html">A Group Is Its Own Worst Enemy</a>, Clay Shirky
</li>
<li>
<a href="http://www.shirky.com/writings/group_user.html">Group as User: Flaming and the Design of Social Software </a>, Clay Shirky
</li>
<li>
<a href="http://software.ericsink.com/bos/Closing_the_Gap_Part_1.html">Closing the Gap, Part 1</a>, Eric Sink
</li>
<li>
<a href="http://software.ericsink.com/bos/Closing_the_Gap_Part_2.html">Closing the Gap, Part 2</a>, Eric Sink
</li>
<li>
<a href="http://software.ericsink.com/bos/Hazards_of_Hiring.html">Hazards of Hiring</a>, Eric Sink
</li>
<li>
<a href="http://www.aaronsw.com/weblog/000931">Powerpoint Remix</a>, Aaron Swartz
</li>
<li>
<a href="http://poignantguide.net/ruby/chapter-3.html">A Quick (and Hopefully Painless) Ride Through Ruby (with Cartoon Foxes)</a>, why the lucky stiff
</li>
</ol>
<p>
You can save your $22.49 with a few deft mouse clicks, but I think it's reasonable to have these entries in book form, with Joel's typically insightful introduction for each entry. The book works quite well as a survey overview of the outstanding blog content that <b>most people still don't even know is out there</b>.
</p>
<p>
* For example, I couldn't even bring myself to finish reading Paul Ford's rambling, incoherent novella <a href="http://www.ftrain.com/ProcessingProcessing.html">Processing Processing</a>. Good Lord. I'd also drop the last one with the <a href="http://poignantguide.net/ruby/chapter-3.html">foxes on Ruby</a>. It was neither funny nor particularly instructive. I don't mean to be overly negative; these are definitely the exceptions. The rest are quite good..
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2005-07-21T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/show-dont-tell/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ The Dancing Bunnies Problem ]]></title>
<link>https://blog.codinghorror.com/the-dancing-bunnies-problem/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
In an era of instant online worldwide connectivity, protecting users from themselves is a lot harder than it used to be. For one thing, <a href="http://www.codinghorror.com/blog/archives/000119.html">full trust can't be trusted</a>. And then there are all those <a href="http://blogs.msdn.com/larryosterman/archive/2005/07/12/438284.aspx">dancing bunnies</a> to contend with:
</p>
<p>
</p>
<blockquote>
What's the dancing bunnies problem?
<p>
It's a description of what happens when a user receives an email message that says "click here to see the dancing bunnies".
</p>
<p>
The user wants to see the dancing bunnies, so they click there.  It doesn't matter how much you try to disuade them, if they want to see the dancing bunnies, then by gum, they're going to see the dancing bunnies.  It doesn't matter how many technical hurdles you put in their way, if they stop the user from seeing the dancing bunny, then they're going to go and see the dancing bunny.
</p>
<p>
<a href="http://www.syberpunk.com/cgi-bin/index.pl?page=oolong"><img alt="image placeholder" >
</p>
<p>
There are lots of techniques for mitigating the dancing bunny problem.  There's strict privilege separation - users don't have access to any locations that can harm them.  You can prevent users from downloading programs.  You can make the user invoke magic commands to make code executable (chmod +e dancingbunnies).  You can force the user to input a password when they want to access resources.  You can block programs at the firewall.  You can turn off scripting.  You can do lots and lots of things.
</p>
<p>
However, at the end of the day, <b>the user still wants to see the dancing bunny, and they'll do whatever is necessary to bypass your carefully constructed barriers in order to see the bunny.</b>
</p>
</blockquote>
<p>
Here's hoping Longhorn (aka Windows Vista) is the first Microsoft OS to <b>default users to non-administrator accounts.</b> Because users can't help themselves-- they just have to <a href="http://www.platinumgrit.com/poke.html">poke the bunny</a>.
</p>
<p>
I think the real solution, if there is one, is <a href="http://en.wikipedia.org/wiki/Virtualization_Technology">high-speed virtualization</a>. The user will always play in a sandbox that looks and performs exactly like their current installation, but is in fact a Virtual PC style image. If something bad happens, you just ball it up and throw it away.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2005-07-22T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/the-dancing-bunnies-problem/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ The D.I.Y. PC ]]></title>
<link>https://blog.codinghorror.com/the-diy-pc/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
In <a href="http://www.codinghorror.com/blog/archives/000186.html">Screwdrivers versus Couture</a>, Ed Stroglio nailed the real difference between PC enthusiasts and Mac enthusiasts:
</p>
<p>
</p>
<blockquote><i>
One might think case modders or overclockers [or developers] in general might be more prone to the Mac outlook, but that's not really so. <b>What such people are proud of is not mere ownership of the equipment, but what they've done to it to make it what it is.</b> It's a much more hands-on sense of accomplishment: what has been done rather than what it was out of the box.
</i></blockquote>
<p>
PC enthusiasts are all about the <a href="http://en.wikipedia.org/wiki/DIY_punk_ethic">D.I.Y. aspect</a> of the PC. Sure, <a href="http://www.retrophisch.com/archives/2003/10/28/dell_product_designers.php">Dell's designers are laughable</a>, but that's not the point.  <b>We make the beige box what we want it to be:</b>
</p>
<p>
</p>
<table width="680">
<tr><td colspan="2">PC case modifications
</td></tr>
<tr>
<td valign="top">
<a href="http://www.bit-tech.net/modding/2005/07/19/battlefield2_mod/1.html"><img alt="image placeholder" >
</td>
<td align="left" valign="top">
<a href="http://www.bit-tech.net/modding/2005/07/19/battlefield2_mod/1.html"><img alt="image placeholder" >
</td>
</tr>
<tr><td colspan="2">Apple G5 case
</td></tr>
<tr>
<td align="left" colspan="2" valign="top">
<a href="http://www.apple.com/powermac/specs.html"><img alt="image placeholder" >
</td>
</tr>
</table>
<p>
I'm not saying one is inherently better or more aesthetically pleasing than the other. They just come from very different places. Apple's G5 systems are the product of a world-class design team and stamped out by the thousands; custom PC builds are the highly individual result of dozens or even hundreds of hours of personal investment.
</p>
<p>
This same D.I.Y. ethic also extends to PC software. Specifically, open source software. I know there's nothing that ties open source development to the PC platform in particular, but certainly Linux was born on PC hardware and the entire open source ecosystem is built primarily on PC hardware. Isn't building custom software a little bit like <a href="http://blogs.msdn.com/larryosterman/archive/2005/03/24/401667.aspx">hot-rodding your automobile?</a>
</p>
<p>
</p>
<blockquote>
<i>
I read <a href="http://www.edmunds.com/insideline/do/Columns/articleId=105024">this [Edmunds] article</a> and was struck by the similarities between this and the open source vs COTS model.
</i><p>
COTS (Commercial Off The Shelf) software is equivalent to a stock automobile.  They're built by professional engineers, and tested as a whole.  But you don't get to mess with the system.
</p>
<p>
On the other hand, open source gives you the ability to join the software equivalent of the tuner/modified market - you can tweak the system to your hearts content.  You may make it go faster, but you're not totally sure what it's going to do to the overall quality of the system.
</p>
<p>
In fact, I constantly read that that's one of the huge benefits of open source - on an open source project, if you don't like how something works, you can just step in and fix it, while with COTS you don't have that ability.
</p>
</blockquote>
<p>
Tinkering and tweaking isn't limited to open source projects; it applies to COTS software, too. I'm a COTS Windows user, but I have a dozen different <a href="http://www.hanselman.com/blog/ScottHanselmans2005UltimateDeveloperAndPowerUsersToolList.aspx">utilities and tweaks</a> I have to install before I'm happy with my build. I know plenty of users who go even further and retrofit the entire GUI using <a href="http://www.stardock.com/products/windowblinds/">WindowBlinds</a>.
</p>
<p>
While I certainly appreciate Apple's ability to box up elegant hardware designs with an elegant UNIX GUI makeover, that just isn't for me. I have more fun when I do it myself.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2005-07-24T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/the-diy-pc/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ What if it was infinitely fast? ]]></title>
<link>https://blog.codinghorror.com/what-if-it-was-infinitely-fast/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
When it comes to performance, there's always a bottleneck. The question is, which bottleneck? That's why one of the more interesting <a href="http://www.codinghorror.com/blog/archives/000339.html">back of the envelope calculations</a> is to ask, "what if it was infinitely fast?"
</p>
<p>
One way to make something infinitely fast is to make it a no-op. Instead of doing work, it does nothing. This is also known as "null driver" in hardware circles. It shows how fast your hardware could be given the limits of the underlying operating system infrastructure. Standard 2D graphics operations in Windows have been equal to null driver performance <a href="http://www.azillionmonkeys.com/qed/accelerator.html">since about 1999</a>:
</p>
<p>
</p>
<blockquote>
Modern graphics companies concerned about 2D performance take something called a NULL driver -- a graphics driver than accepts the low level rendering commands but does no rendering work whatsoever -- and see how close they can come to its performance. Companies like Matrox are basically almost at the NULL driver performance in all situations.
</blockquote>
This probably says more about Windows overhead than it does about actual 2D performance.
<p>
Gary Tarolli was the CTO of <a href="http://en.wikipedia.org/wiki/3Dfx">3dfx Interactive</a>. Their Voodoo series of add-on video cards pioneered real time 3D graphics on the PC. Gary had <a href="http://groups-beta.google.com/group/3dfx.game.discussion/browse_thread/thread/5dedbae62cf4339f/30bc4873800d89cf?lnk=st&amp;rnum=3&amp;hl=en#30bc4873800d89cf">this to say</a> about infinitely fast 3D hardware in 1998:
</p>
<p>
</p>
<blockquote>
I just want to put in a few cents here.  I know Voodoo2 relieves the CPU of triangle setup processing, however, that is all it relieves the CPU of.  If a game is taking up 80% of the CPU time, which is not that uncommon, <b>then even if we replaced our hardware with INFINITELY fast hardware, you only get a small increase in performance</b> (1.25x).  Voodoo2 isn't infintely fast, so the results are even smaller.  Each game takes up a different amount of the CPU, so you will see different results for different games.
</blockquote>
<p>
It's hard to imagine the CTO of a hardware startup actually answering questions about the product he designed in the newsgroups. Only in 1998, I guess.
</p>
<p>
AnandTech's review of the first affordable <a href="http://www.anandtech.com/storage/showdoc.aspx?i=2480&amp;p=1">solid state hard drive</a> offers a tantalizing glimpse of infinitely fast storage devices-- and some new bottlenecks we couldn't see before:
</p>
<p>
</p>
<table>
<tr>
<td>Benchmark</td>
<td align="right">Times faster
</td>
</tr>
<tr>
<td>Business Winstone</td>
<td align="right">1.02x
</td>
</tr>
<tr>
<td>Content Creation Winstone</td>
<td align="right">1.03x
</td>
</tr>
<tr>
<td>Windows XP Boot Time</td>
<td align="right">1.5x
</td>
</tr>
<tr>
<td>Battlefield 2 level load time</td>
<td align="right">1.3x
</td>
</tr>
<tr>
<td>Photoshop CS load time</td>
<td align="right">1.7x
</td>
</tr>
<tr>
<td>MS Outlook 2003 load time</td>
<td align="right">1.0x
</td>
</tr>
<tr>
<td>693mb file copy</td>
<td align="right">3.8x
</td>
</tr>
</table>
<p>
It's an interesting experiment. Kudos to Gigabyte for making a 4gb solid state hard drive affordable. All you need is $70 for the i-RAM device itself, and 4gb of PC3200 DDR RAM (at current pricing,  $90 x 4). Sure, "under $500" isn't exactly cheap, but relative to other solid state hard drives, it's an incredible bargain.
</p>
<p>
Unfortunately, Having an infinitely fast solid state hard drive doesn't do a whole lot to improve raw performance. It's probably best used as a device to reveal where all the <i>other</i> performance bottlenecks are.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2005-07-26T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/what-if-it-was-infinitely-fast/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ Steve Ballmer: Sweatiest Billionaire Ever ]]></title>
<link>https://blog.codinghorror.com/steve-ballmer-sweatiest-billionaire-ever/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
<img alt="image placeholder" >
A colleague recently pointed me to a Steve Ballmer video I hadn't seen before; the one where he pitches Windows 1.0. All three of the Ballmer videos are <b>essential viewing for any Windows developer</b>:
</p>
<p>
</p>
<ul>
<li>
<a href="http://media.ebaumsworld.com/ballmerwindows.wmv">Windows 1.0 sales pitch</a>
</li>
<li>
<a href="http://www.ntk.net/ballmer/mirrors.html">Dance Monkeyboy</a>
</li>
<li>
<a href="http://www.ntk.net/ballmer/mirrors.html">Developers, Developers, Developers</a>
</li>
</ul>
<p>
</p>
<p>
I love the fact that Steve Ballmer is a <a href="http://www.forbes.com/static/bill2005/rank.html?passListId=10&amp;passYear=2005&amp;passListType=Person">billionaire 12 times over</a>, and yet <b>he isn't afraid to get up on stage and make a complete and utter ass out of himself</b>. You have to respect a man with that much unbridled enthusiasm. I certainly can't see staid, boring old Michael Dell dancing around on stage, screaming about how much he loves his company at the top of his lungs. <a href="http://en.wikipedia.org/wiki/Steve_Ballmer">Steve Ballmer is unique</a>:
</p>
<p>
</p>
<blockquote>
<i>
Steve Ballmer can be so zealous in expressing his enthusiasm that once his vocal cords required surgery after he screamed "Windows, Windows, Windows" continuously at a Japan meeting in 1991. When Microsoft celebrated its 25th Anniversary in 2000, CEO Ballmer popped out of the anniversary cake to surprise the audience. His wild screaming and dancing on stage at an employees convention was caught on a widely-circulated video known as "Dance Monkeyboy."  A few days later at a developers conference, a sweat-soaked Ballmer repeatedly chanted "developers" at least 14 times in front of the bemused gathering. Beyond his jovial image, this second cousin of famous comedian Gilda Radner is known to be a shrewd businessman with a flair to grab opportunities when they come.
</i><p>
Ballmer has also called Linux "communism" and the GNU GPL "a cancer". He advocates Digital rights management and has said that "DRM is the future."
</p>
</blockquote>
<p>
Linux may have <a href="http://www.sjbaker.org/tux/">Tux</a>, but we've got Ballmer. Pudgy cartoon penguin versus sweaty screaming billionaire? C'mon. That's not even close.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2005-07-27T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/steve-ballmer-sweatiest-billionaire-ever/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ Athlon X2: Dual Core Present ]]></title>
<link>https://blog.codinghorror.com/athlon-x2-dual-core-present/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
I've talked about <a href="http://www.codinghorror.com/blog/archives/000285.html">Multiple Core CPU Futures</a>, but how about the dual core present?
</p>
<p>
<img alt="image placeholder" >
</p>
<p>
The Athlon 64 X2 is now widely available in both OEM and retail* packaging, ranging from the 4200+ to 4800+. AMD just released a <a href="http://www.techreport.com/reviews/2005q3/athlon64-x2-3800/index.x?pg=1">cheaper Athlon 64 X2 3800+ at under $400</a>. As a developer, <a href="http://www.codinghorror.com/blog/archives/000029.html">you will not find a CPU that compiles code faster</a>. In fact, it's not even close. So what are you waiting for? You'll certainly need something to counteract VS.NET 2005's higher system requirements.
</p>
<p>
* The retail package includes, by far, the best stock heatsink I've ever seen-- it's a thin-fin aluminum affair with copper inlay and two heatpipes. If you can get the retail box for not much more than the OEM, it's definitely worth it. And you get an AMD X2 sticker, too. A STICKER!
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2005-07-28T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/athlon-x2-dual-core-present/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ Vision Quest ]]></title>
<link>https://blog.codinghorror.com/vision-quest/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>If you asked each member of your team <b>why</b> they were working on what they are currently working on, what would they say? Could they even give you a coherent answer? If they did, would their answers all agree?</p>
<p>All too often, I see developers working without a clearly defined goal. I don't mean a boring 12 page design spec. I'm talking about a simple vision statement everyone can rally around: <b>here's what we're doing, and here's why it's going to rock</b>. Short, succinct, and clear.  Like an internal <a href="http://www.businessknowhow.com/money/elevator.htm">elevator pitch</a>.</p>
<p>In Scott Berkun's new book <a href="http://www.amazon.com/exec/obidos/ASIN/0596007868/codihorr-20">The Art of Project Management</a>, he notes something I've observed repeatedly: most projects have no vision statement. And those that do are generally mind-numbingly bad:</p>
<blockquote>
I've read dozens of vision statements in my career, and there are certain patterns the bad ones share. Lame visions have no integrity; they don't offer a plan, and they don't express an opinion. Instead, they speculate, and avoid the possibility of being wrong. If the vision doesn't take a clear stance on what should happen, the team leaders will never fully invest emotionally in the effort, setting up the project for failure.
</blockquote>
<p>Scott also provides a helpful catalog of <b>lame vision statements</b>:</p>
<table cellpadding="4" cellspacing="4">
<tr>
<td valign="top">
<b>The Kitchen Sink</b><br>Maximize our customers' ability to get their work done</td>
<td valign="top">Too broad to be useful. This is a mission statement for an organization, not a vision for a project.
</td>
</tr>
<tr>
<td valign="top">
<b>The mumbo-jumbo</b><br>Develop, deploy, and manage a diverse set of scalable, performant, and strategic knowledge management tools to best serve our constituents, partners, and collaborative organizations, improving the possibility of overall satisfaction among our diverse customer profiles</td>
<td valign="top">This is committee-speak jargon. It uses complex language to hide the absence of strong ideas. No one can figure out what this means and therefore it's useless.
</td>
</tr>
<tr>
<td valign="top">
<b>The wimp-o-matic</b><br>We may eventually consider trying to do something that's kind of better than what we've done before. At least that's what we think our vision should be now. But don't go too far because we think it might change again pretty soon.</td>
<td valign="top">Everyone will see how spineless this is. There's nothing for the team to rally around.
</td>
</tr>
<tr>
<td valign="top">
<b>What the VP wants</b><br>Mr. VP's vision for our corporation is to be the best producer of widgets in mid-size markets, and we will work very hard to live up to Mr. VP's standard, using every resource at our disposal to make this happen.</td>
<td valign="top">"I said so" is not a supportable argument. VPs are obligated to provide reasons for important decisions. That's what the vision is for.
</td>
</tr>
</table>
<p>As an example –  perhaps the canonical example –  of a great vision statement, Scott points to the project goals for the original circa-1996 <a href="http://en.wikipedia.org/wiki/Palm_Pilot">Palm Pilot</a>:</p>
<ul>
<li>Size. Fit into a shirt pocket. Light enough not to feel unwieldy.</li>
<li>Cost. Less than a luxury paper organizer ($300 US).</li>
<li>Simplicity. As simple as paper. Turns on instantly. Uses simple conventions.</li>
<li>Sync with PC. Use the PC as a common point of interaction.</li>
</ul>
<p>A vision statement isn't just marketing weasel-speak –  it's the soul of your project. And who wants to work on a project with no <i>soul?</i></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2005-08-01T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/vision-quest/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ Why Estimate When You Can Measure? ]]></title>
<link>https://blog.codinghorror.com/why-estimate-when-you-can-measure/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
</p>
<blockquote>
Wanna lower the noise of your computer? <b>Stop burning 450 WATTS of power to browse the web or send email.</b>
<p>
Don't see any moving parts on your gameboy do you? Or your PDA for that matter. If desktop computers were made of APPROPRIATE parts instead of the "my computer has to be faster than yours" parts we'd have silent desktops that run in under 20 Watts of power that cost 150$ and run whatever OS you choose.
</p>
<p>
Anything short of this and you're doing to noise what we do to heat, moving the problem elsewhere. You could [for example] pump ice cold water over the heatsinks and keep the pump outside, in the basement, etc...
</p>
<p>
But that's just moving the problem elsewhere and not really solving it.
</p>
<p>
The solution is more scalable computing or appropriate choices. There is no reason, for example, why the P4 idles at 400Mhz and the AMD64 at 1Ghz other than the design can only scale so far. This matters a bit more in laptops where every mW counts.
</p>
<p>
-- <a href="http://hardware.slashdot.org/article.pl?sid=05/07/25/1059231">slashdot poster</a>
</p>
</blockquote>
<p>
I don't really read Slashdot, but someone forwarded this post to me, and I had to laugh. Pointing out the direct relationship between power consumption and noise is accurate enough, but.. <b>450 watts?</b> I don't think you can realistically build a desktop computer that uses 450 watts!
</p>
<p>
<a href="http://www.amazon.com/exec/obidos/ASIN/B00009MDBU/codihorr-20"><img alt="image placeholder" >
</p>
<p>
We don't need <a href="http://www.codinghorror.com/blog/archives/000339.html">back of the envelope</a> estimates to show how ridiculous that figure actually is. We can just measure the power usage with our trusty $30 <a href="http://www.amazon.com/exec/obidos/ASIN/B00009MDBU/codihorr-20">Kill-a-watt watt meter</a>.
</p>
<p>
For my work PC, which currently contains the following items:
</p>
<p>
</p>
<ul>
<li>Athlon X2 4800+
</li>
<li>GeForce 6600 video
</li>
<li>Maxtor 300gb SATA HDD
</li>
<li>GeForce 5200 PCI video (for 3rd display)
</li>
<li>2gb PC3200 DDR RAM
</li>
<li>generic DVD-ROM
</li>
</ul>
<p>
The Kill-a-Watt tells me I'm pulling this much power from the wall socket:
</p>
<p>
</p>
<table>
<tr>
<td>Idle windows desktop</td>
<td>
<span style="color:green">118w</span>
</td>
</tr>
<tr>
<td>Defragmenting hard drive</td>
<td>122w
</td>
</tr>
<tr>
<td>1 instance of Prime95</td>
<td>147w
</td>
</tr>
<tr>
<td>2 instances of Prime95 (affinity set)</td>
<td>
<span style="color:red">177w</span>
</td>
</tr>
<tr>
<td>Battlefield 2 demo</td>
<td>
<span style="color:red">172w</span>
</td>
</tr>
</table>
<p>
Now, that's power draw at the wall socket. About 25 percent of this energy is lost in the power supply as it converts from wall power to something the PC can use.  So <b>the actual peak power usage of my work PC is around 132 watts</b>. And that's a fairly beefy PC, probably unrepresentative of the vast majority of current desktops.
</p>
<p>
It's amazing how much you can infer from such simple, basic data collection:
</p>
<p>
</p>
<ul>
<li>Each "core" of the X2 4800+ consumes <b>30 watts</b>
</li>
<li>The GeForce 6600 video card consumes <b>25 watts</b>
</li>
<li>The 300gb SATA hard drive consumes <b>4 watts</b>
</li>
</ul>
<p>
We could go a lot farther, but the whole point is that we don't have to. As estimates go, these are backed by supporting data. And that's a lot more useful than the unsubstantiated wild guessing of random Slashdot posters.
</p>
<p>
Even outside Slashdot there are still plenty of people who will swear up and down that you absolutely <i>must</i> use a 500+ watt power supply for a new high-end computer. Why spread guesstimated misinformation when you can simply measure the power usage with a widely available $30 device?
</p>
<p>
Estimating is only necessary when you can't easily measure. When you meet people like this, gently urge them to <b>stop estimating and start measuring</b>.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2005-08-02T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/why-estimate-when-you-can-measure/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ Does Having The Best Programmers Really Matter? ]]></title>
<link>https://blog.codinghorror.com/does-having-the-best-programmers-really-matter/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
Joel has a lengthy entry in which he asks, <a href="http://www.joelonsoftware.com/articles/HighNotes.html">does having the "best programmers" really matter?</a>
</p>
<p>
This is something I've <a href="http://www.codinghorror.com/blog/archives/000072.html">talked about before</a>: <b>extreme skill disparity is unique to the profession of software development</b>. The odds of working with a genius or a jackass on any given job are about fifty-fifty.
</p>
<p>
What's worse is that there's no correlation between experience and skill, either. I've worked with amazingly talented interns and 20 year vets who produced terrible code. Joel provides additional data to support this hypothesis:
</p>
<p>
</p>
<blockquote>
The data I rely upon comes from Professor Stanley Eisenstat at Yale. Each year he teaches a programming-intensive course, CS 323, where a large proportion of the work consists of about ten programming assignments. The assignments are very serious for a college class: implement a Unix command-line shell, implement a ZLW file compressor, etc.
<p>
There was so much griping among the students about how much work was required for this class that Professor Eisenstat started asking the students to report back on how much time they spent on each assignment. He has collected this data carefully for several years.
</p>
<p>
I spent some time crunching the data; it's the only data sets I know of where we have dozens of students working on identical assignments using the same technology at the same time. It's pretty darn controlled, as experiments go.
</p>
</blockquote>
<p>
Here's a representative sample for a single CS 323 assignment, showing time spent versus grade/score:
</p>
<p>
<img alt="image placeholder" >
</p>
<p>
There is absolutely no correlation whatsoever between time spent on the problem and the resulting score for these CS students. It's not much of a stretch to extend this to <a href="http://www.codinghorror.com/blog/archives/000072.html">time spent in the profession of software development</a>.
</p>
<p>
The rest of Joel's post veers dangerously close to being self-serving-- <i>look at my awesome company and the smart employees I hired!</i> but at least he's finally acknowledging that he is really talking about a very narrow niche:
</p>
<p>
</p>
<blockquote>
It's not just a matter of "10 times more productive." It's that the "average productive" developer never hits the high notes that make great software.
<p>
Sadly, this doesn't really apply in non-product software development. Internal, in-house software is rarely important enough to justify hiring rock stars. Nobody hires Dolly Parton to sing at weddings. That's why the most satisfying careers, if you're a software developer, are at actual software companies, not doing IT for some bank.
</p>
</blockquote>
<p>
Since <b>Joel's commercial shrink-wrap software development is a tiny percentage of the overall IT market</b>, does this mean that having the best programmers doesn't matter <i>most of the time?</i>
</p>
<p>
Sadly, I believe the answer is yes.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2005-08-03T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/does-having-the-best-programmers-really-matter/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ Option Strict and Option Explicit in VB.NET 2005 ]]></title>
<link>https://blog.codinghorror.com/option-strict-and-option-explicit-in-vbnet-2005/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
I just noticed that <a href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/vblr7/html/vastmOptionExplicit.asp">Option Explicit</a> is on by default for new VB solutions in Visual Studio .NET 2005:
</p>
<p>
<img alt="image placeholder" >
</p>
<p>
It's about damn time.
</p>
<p>
There's nothing more vicious than making an innocent typo when referencing a variable and not knowing about it because the compiler silently declares a new variable for you:
</p>
<p>
</p>
<pre>
MyStringName = "Pack my box with five dozen liquor jugs"
Console.WriteLine(MyStringNam)
</pre>
<p>
Just talking about it makes my eye twitch uncontrollably. It's almost as bad as making a language case sensitive.
</p>
<p>
<s>Option Explicit Off is pure, unmitigated evil, yet Option Explicit Off is the default in VS.NET 2002 and 2003. I've audited a half-dozen VB.NET projects where, months into development, the developers didn't realize that it was off! Laugh all you want, but this is the power of default values.</s>
</p>
<p>
Paul Vick pointed out that <b>VS.NET 2002 and later do in fact ship with Option Explicit On set by default</b>. What I really needed was an option not to work with knuckleheads who turn it off, because I got bitten with this one a few times.
</p>
<p>
I'm not sure that <a href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/vblr7/html/vastmOptionStrict.asp">Option Strict</a> is quite the no-brainer that Option Explicit is, but <a href="http://tutorials.lockergnome.com/library/20041104_exploring_net_volume_1.phtml">Dan Appleman sure has strong feelings about it</a>:
</p>
<p>
</p>
<blockquote>
<i>
One of the debates that has arisen with the arrival of Visual Basic .NET is the use of Option Strict. Option Strict turns on strong type checking. You've probably heard about <a href="http://vb.mvps.org/articles/pt199511.pdf">"evil type coercion"</a> (pdf) in Visual Basic 6 -- VB6's habit of converting data types automatically based on its best guess of what you want to do. While this can be a convenience to programmers, it can also lead to obscure and unexpected bugs when VB's guess does not correspond to what you intended.
</i><p>
The incorporation of strict type checking into Visual Basic .NET represents one of the most important improvements to the language. Unfortunately, Microsoft showed a stunning lack of confidence in their decision to incorporate it by leaving Option Strict off by default. In other words, when you create a new VB.NET project, strict type checking remains off.
</p>
<p>
Some argue that this is a good thing. Leaving Option Strict off allows VB.NET to automatically convert data types in the same way as VB6. Not only that, but with strict type checking off, VB.NET can automatically perform late binding on Object variables in the same way as VB6 (where a variable is of type "Object', VB will perform a late bound call on the object, correctly calling the requested method if it exists).
</p>
<p>
The people who make these arguments are wrong.
</p>
<p>
You should ALWAYS turn Option Strict On for every application.
</p>
</blockquote>
<p>
He also calls this <b>Option Slow</b>, referring to the slow, expensive IL that must be emitted behind the scenes for this magical type conversion scheme to work-- the source of endless "VB.NET is slower than C#" benchmarks.
</p>
<p>
I tend to agree that this probably shouldn't be off by <i>default</i>, but it's nowhere near as poisonous as Option Explicit. Option Explicit Off has no legitimate use. Option Strict Off has one clear use case: <a href="http://swigartconsulting.blogs.com/tech_blender/2005/03/granular_late_b.html">it's great when you're writing a lot of late binding code</a>. Let the IL deal with all the nasty, verbose type conversions. As Scott points out, we can now use <b>partial classes in VB.NET 2.0 to mark selected sections of code Option Strict Off</b> while leaving the rest Option Strict On. It's the best of both worlds.
</p>
<p>
I guess I could be <a href="http://loudcarrot.com/Blogs/dave/archive/2005/04/24/2566.aspx">critical of Microsoft</a> for not having the balls to also turn Option Strict on by default, but I consider it a minor miracle that we even got Explicit. I'll take it.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2005-08-04T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/option-strict-and-option-explicit-in-vbnet-2005/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ Consolas and ClearType ]]></title>
<link>https://blog.codinghorror.com/consolas-and-cleartype/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
You know you've entered the highest pantheons of geekhood when you get excited about <a href="http://www.poynter.org/column.asp?id=47&amp;aid=78683">Microsoft's new fixed-width font, Consolas</a>. I am always on the lookout for a better <a href="http://www.codinghorror.com/blog/archives/000157.html">fixed-width programming font</a>. After reading <a href="http://www.hanselman.com/blog/UsingConsolasAsTheWindowsConsoleFont.aspx">Scott's post</a>, and then <a href="http://www.furrygoat.com/2005/08/longhorn_fonts.html">Steve's post</a>, I was intrigued enough to copy it from a Vista install on to my XP box.
</p>
<p>
And that's when the disappointment set in. Here's <b>Lucida Console</b>, 9 point. Just to clear your visual palate.
</p>
<p>
<img alt="image placeholder" >
</p>
<p>
<b>Consolas</b>, 10 point, standard font smoothing. <a href="http://www.snpp.com/episodes/2F17.html">MY EYES! THE GOGGLES! THEY DO NOTHING!</a>
</p>
<p>
<img alt="image placeholder" >
</p>
<p>
<b>Consolas</b>, 10 point, <a href="http://www.microsoft.com/typography/ClearTypeInfo.mspx">ClearType</a> font smoothing.
</p>
<p>
<img alt="image placeholder" >
</p>
<p>
I'll definitely agree that <b>Consolas is one of the best looking ClearType fonts I've ever seen.</b> That's probably because it is part of the first font family designed from scratch with ClearType hinting in mind.
</p>
<p>
However, I prefer not to use font smoothing on my programming fonts. And <b>Consolas looks like crap without ClearType!</b> Consolas appears to lack any kind of hinting for reasonable display at small point sizes. Consolas isn't just optimized for ClearType, it can <i>barely be used without it.</i>
</p>
<p>
Well, so much for that. Consolas, you are dead to me. Here's hoping someone at Microsoft wises up and adds the normal font hinting so Consolas displays legibly at 9 to 13 points.*
</p>
<p>
For the record, I am not anti-<a href="http://www.microsoft.com/typography/ClearTypeInfo.mspx">ClearType</a>. On a high DPI display-- think 15" laptop display with a resolution of 1600x1200-- I definitely like it. But on a display with a more typical DPI, say a typical 19" 1280x1024 panel, the ClearType RGB pixel noise around the fonts is extremely fatiguing to my eyes. Particularly when reading fixed-width programming fonts.
</p>
<p>
Now, before you write me off as a font hatin' luddite, let me point out that Rick Strahl has <a href="http://west-wind.com/weblog/posts/2634.aspx">almost exactly the same problem with Consolas, ClearType, and programming fonts</a> that I do. It's a great technology, but it's also a high-DPI display technology, and <a href="http://www.codinghorror.com/blog/archives/000137.html">Windows sucks for high DPI displays</a>. That's a huge disconnect. And it won't be resolved until <a href="http://msdn.microsoft.com/windowsvista/experience/">Windows Vista ships</a>.
</p>
<p>
* If the whole hinting thing doesn't work out between us, it's good to know that Consolas can find some <a href="http://weblogs.asp.net/cazzu/archive/2005/07/27/LonhornPorno.aspx">alternative work in spanish-speaking countries.</a>
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2005-08-07T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/consolas-and-cleartype/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ How to fit three bugs in 512 bytes of security code ]]></title>
<link>https://blog.codinghorror.com/how-to-fit-three-bugs-in-512-bytes-of-security-code/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
In the spirit of <a href="http://www.codinghorror.com/blog/archives/000223.html">iPod modem hacking</a>, Michael Steil documents how <a href="http://www.xbox-linux.org/wiki/The_Hidden_Boot_Code_of_the_Xbox">hackers compromised the Xbox security system</a>. Mostly thanks to 512 bytes of rather buggy security code embedded in the Xbox boot ROM:
</p>
<p>
</p>
<blockquote>
<i>
The Xbox is an IBM PC, i.e. it has an x86 CPU. When the machine is turned on, it starts execution 16 bytes from the top of its address space, at the address FFFF_FFF0 (F000:FFF0). On an IBM PC, the upper 64 KB (or more) of the address space are occupied by the BIOS ROM, so the CPU starts execution in this ROM.
The Xbox, having an external (reprogrammable) 1 MB Flash ROM chip (models since 2003 have only 256 KB), would normally start running code there as well, since this megabyte is also mapped into the uppermost area of the address space. But this would make it too easy for someone who wants to either replace the ROM image with a self-written one or patch it to break the chain of trust ("modchips"). If the ROM image could be fully accessed, it would be easy to reverse-engineer the code; encryption and obfuscation would only slow down the hacking process a bit.
</i><p>
A common idea to make the code inaccessible is not to put it into an external chip, but integrate it into one of the other chips. Then there is no standard way to extract the data, and none to replace the chip with one with different contents. But this way, it is a lot more expensive, both the design of a chip that includes both ROM and additional logic, and updating the ROM in a new version of the Xbox if there is a flaw in the ROM.
</p>
<p>
A good compromise is to store only a small amount of code in one of the other chips, and store the bulk of it in the external Flash chip. This small ROM can not be extracted easily, and it cannot be changed or replaced. The code in there just has to make sure that an attacker can neither understand nor successfully patch the bulk of the code he has access to, which is stored in Flash ROM.
</p>
<p>
Microsoft decided to go this way, and they stored 512 bytes of code in the Xbox' Southbridge, the MCPX (Media and Communications Processor for Xbox), which is manufactured by nVidia. This code is supposed to be mapped into the uppermost 512 bytes of the address space, so that the CPU starts execution there. It includes a decryption function with a secret key that deciphers (parts of the) "unsafe" code in the Flash ROM into RAM and runs it. Without knowing the key, it is practically impossible to understand or even patch the encrypted code in Flash ROM.
</p>
</blockquote>
<p>
I know <a href="http://www.codinghorror.com/blog/archives/000267.html">virtually nothing about cryptography</a>, and I could have told you that checking a single 32-bit value is a remarkably poor substitute for a real hash.
</p>
<p>
I'm thinking Microsoft won't be making these kinds of newbie security mistakes with the <a href="http://www.xbox.com/en-US/xbox360/factsheet.htm">Xbox 360</a>. Current <a href="http://www.forbes.com/markets/2005/08/05/microsoft-xbox-launch-0805markets05.html">rumor suggests</a> we won't have to wait long to find out-- the 360 will supposedly go on sale on or near black Friday.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2005-08-08T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/how-to-fit-three-bugs-in-512-bytes-of-security-code/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ TryParse and the Exception Tax ]]></title>
<link>https://blog.codinghorror.com/tryparse-and-the-exception-tax/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>In .NET 1.1, TryParse is <a href="http://msdn.microsoft.com/library/en-us/cpref/html/frlrfSystemDoubleClassTryParseTopic.asp">only available for the Double datatype</a>. Version 2.0 of the framework <a href="http://www.mikepope.com/blog/DisplayBlog.aspx?permalink=1239">extends TryParse to all the basic datatypes</a>. Why do we care? Performance.  Parse throws an exception if the conversion from a string to the specified datatype fails, whereas TryParse explicitly <em>avoids</em> throwing an exception.</p>
<p>Julia Lerman showed a screenshot of a cool little demo app demonstrating the performance difference between Parse and TryParse in a <a href="http://www.thedatafarm.com/docs/Lerman_BCLWhidbey_June2004.ppt">presentation of hers</a> (ppt) that I stumbled across a few months ago. I was shocked how much faster TryParse was! I knew <a href="http://www.howzatt.demon.co.uk/articles/12May04.html">exceptions were slow</a>, but… wow.</p>
<p>The original source for this sample app was a <a href="http://blogs.msdn.com/bclteam/archive/2003/10/22/49710.aspx">BCL team blog entry</a> from way back in October 2003. That code sample is pretty ancient by now, so I thought I'd pick it up and update it so that it at least loads in VS.NET 2005 beta 2. In the process of doing this, I found out that this little sample app has.. er.. some bugs. A lot of bugs, actually. Bugs that made this dramatic performance difference not so dramatic any more:</p>
<p><img alt="image placeholder" >
<p>So, yeah, parsing with exceptions is quite a bit slower, but not "did someone just downgrade my computer to a 486?" slower. The general rule of <b>avoiding exceptions in your primary code paths</b> still applies. That said, it's not unreasonable to use exceptions for program flow when the situation warrants it, as <a href="http://weblogs.asp.net/alex_papadimoulis/archive/2005/04/01/396734.aspx">Alex Papadimoulis points out</a>:</p>
<blockquote>
I think that there's a general consensus out there that Exceptions should be limited to exceptional circumstances. But "exceptional" is a rather subjective adjective, so there's a bit of a gray area as to what is and isn't an appropriate use of Exceptions.
<p>Let's start with an inappropriate use that we can all agree on. I can think of no better place to find <a href="http://thedailywtf.com/ShowPost.aspx?PostID=22954">such an example</a> than TheDailyWTF.com. Although that particular block of code doesn't exactly deal with throwing exceptions, it is a very bad way of handling exceptions. At the other extreme, exceptions are appropriate for handling environment failure. For example, if your database throws "TABLE NOT FOUND," that would be the time to catch, repackage, and throw an exception.</p>
<p>But it's in the middle where there's a bit of disagreement. One area in particular I'd like to address in this post is exceptions to business rules. I mentioned this as an appropriate before, but noticed there was quite a bit of disagreement with that. But the fact of the matter is, exceptions really are the best way to deal with business rule exceptions.</p>
</blockquote>
<p>Alex concludes that, in this case, using exceptions to propagate errors across the tiers is a better solution. He's <b>willing to pay the exception performance tax</b>:</p>
<blockquote>
<p>Less code, less mess. Nanoseconds slower? Probably. A big deal in the context of a web request going through three physical tiers? Not at all.</p>
</blockquote>
<p>I totally agree. As long as you're aware of the cost, this is a perfectly reasonable thing to do. An iron-clad adherence to the "avoid all exceptions" rule would be a net loss.</p>
<p><a href="https://github.com/coding-horror/TryParse">Download the updated TryParse demo VS.NET 2005 solution</a> (17kb zip)</p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2005-08-09T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/tryparse-and-the-exception-tax/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ Perfmon Gone Wild ]]></title>
<link>https://blog.codinghorror.com/perfmon-gone-wild/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
When diagnosing server performance problems, the first tool I turn to is the <a href="http://www.codinghorror.com/blog/archives/000162.html">humble Task Manager</a>. That's usually enough to get a rough idea of where we are in the bottleneck shell game: is it CPU, Disk, Network or Memory?
</p>
<p>
But sometimes you need to dig into performance a little deeper. Then it's time to drag out Performance Monitor. I always resist doing this for as long as I can because using perfmon is like trying to sip from a fire hose: there are a zillion performance counters that produce veritable mountains of data. The .NET framework has <a href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/cpgenref/html/gngrfperformancecounters.asp">probably a hundred .NET-specific performance counters</a>, and that's just a tiny fraction of the <a href="http://www.microsoft.com/technet/prodtechnol/windowsserver2003/library/DepKit/3fb01419-b1ab-4f52-a9f8-09d5ebeb9ef2.mspx">available operating system performance counters</a>. It's downright overwhelming. Where to begin?
</p>
<p>
Microsoft provides a helpful <a href="http://www.microsoft.com/downloads/details.aspx?FamilyID=31FCCD98-C3A1-4644-9622-FAA046D69214&amp;displaylang=en">performance monitor wizard</a> which walks you through the process of setting up a perfmon trace with default counters. Per the Wizard, that's the following:
</p>
<p>
</p>
<pre>
Cache*
Memory*
Network Interface(*)*
Objects*
Paging File(*)*
Physical Disk(*)*
Process(*)*
Processor(*)*
Redirector*
Server Work Queues(*)*
Server*
System*
</pre>
<p>
Once created, the trace can be stopped, started or modified via the <b>Computer Management / System Tools / Performance Logs and Alerts / Counter Logs</b> interface. Here's what the default wizard-produced trace looks like:
</p>
<p>
<img alt="image placeholder" >
</p>
<p>
It's perfmon gone wild!
</p>
<p>
This is way, way, WAY too much information. Let's see if we can narrow it down to some key performance counters:
</p>
<p>
</p>
<ul>
<li>
<b>Processor(_Total)% Processor Time</b><br>
The percentage of elapsed time that the processor spends to execute a non-Idle thread. <a href="http://www.microsoft.com/resources/documentation/Windows/2000/server/reskit/en-us/Default.asp?url=/resources/documentation/Windows/2000/server/reskit/en-us/core/fned_ana_jzel.asp">(more)</a>
</li>
<li>
<b>Processor(_Total)Interrupts/sec</b><br>
An indirect indicator of the activity of hardware devices that generate interrupts, such as the system clock, the mouse, disk drivers, data communication lines, network interface cards, and other peripheral devices. <a href="http://www.microsoft.com/resources/documentation/Windows/2000/server/reskit/en-us/Default.asp?url=/resources/documentation/Windows/2000/server/reskit/en-us/core/fned_ana_jzel.asp">(more)</a>
</li>
<li>
<b>SystemProcessor Queue Length</b><br>
The number of non-running ready threads in the processor queue. There is a single queue for processor time even on computers with multiple processors. If a computer has multiple processors, you need to divide this value by the number of processors servicing the workload. A sustained processor queue of less than 10 threads per processor is normally acceptable, depending on workload. <a href="http://www.microsoft.com/resources/documentation/Windows/2000/server/reskit/en-us/Default.asp?url=/resources/documentation/Windows/2000/server/reskit/en-us/core/fned_ana_jzel.asp">(more)</a>
</li>
<li>
<b>MemoryAvailable Bytes</b><br>
The amount of physical memory, in bytes, available to processes running on the computer. Calculated by adding the amount of space on the Zeroed, Free, and Standby memory lists. <a href="http://www.microsoft.com/resources/documentation/Windows/2000/server/reskit/en-us/Default.asp?url=/resources/documentation/Windows/2000/server/reskit/en-us/core/fned_ana_jzel.asp">(more)</a>
</li>
<li>
<b>Process(All_processes)Working Set</b><br>
The set of recently touched memory pages for all processes. If free memory in the computer is above a threshold, pages are left in the Working Set of a process even if they are not in use.  When free memory falls below a threshold, pages are trimmed from Working Sets. If they are needed they will then be soft-faulted back into the Working Set before leaving main memory. <a href="http://www.microsoft.com/resources/documentation/Windows/2000/server/reskit/en-us/Default.asp?url=/resources/documentation/Windows/2000/server/reskit/en-us/core/fned_ana_jzel.asp">(more)</a>
</li>
<li>
<b>MemoryPages/sec</b><br>
The rate at which pages are read from or written to disk to resolve hard page faults. This is a primary indicator of the kinds of faults that cause system-wide delays. It includes pages retrieved to satisfy faults in the file system cache. <a href="http://www.microsoft.com/resources/documentation/Windows/2000/server/reskit/en-us/Default.asp?url=/resources/documentation/Windows/2000/server/reskit/en-us/core/fned_ana_jzel.asp">(more)</a>
</li>
<li>
<b>PhysicalDisk% Disk Time</b><br>
The percentage of elapsed time that the selected disk drive was busy servicing read or write requests. <a href="http://www.microsoft.com/resources/documentation/Windows/2000/server/reskit/en-us/Default.asp?url=/resources/documentation/Windows/2000/server/reskit/en-us/core/fned_ana_jzel.asp">(more)</a>
</li>
<li>
<b>PhysicalDiskCurrent Disk Queue Length</b><br>
The number of requests outstanding on the disk at the time the performance data is collected. Requests experience delays proportional to the length of this queue minus the number of spindles on the disks. For good performance, this difference should average less than two. <a href="http://www.microsoft.com/resources/documentation/Windows/2000/server/reskit/en-us/Default.asp?url=/resources/documentation/Windows/2000/server/reskit/en-us/core/fned_ana_jzel.asp">(more)</a>
</li>
<li>
<b>ServerBytes Received/sec</b><br>
The number of bytes the server has received from the network.
</li>
<li>
<b>ServerBytes Transmitted/sec</b><br>
The number of bytes the server has sent on the network.
</li>
</ul>
<p>
Those counters should be enough to give you a general sense of whether you're dealing with a disk, memory, CPU, or network bottleneck-- without being too overwhelming.
</p>
<p>
If you need to capture more performance counters than this, I suggest switching the counter log to CSV output via the properties dialog. Then download Microsoft's excellent <a href="http://www.microsoft.com/downloads/details.aspx?FamilyID=890cd06b-abf8-4c25-91b2-f8d975cf8c07&amp;displaylang=en">LogParser tool</a>. Now you can slice, dice, and even graph the data however you like using a relatively simple SQL-like syntax.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2005-08-10T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/perfmon-gone-wild/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ Passphrase Evangelism ]]></title>
<link>https://blog.codinghorror.com/passphrase-evangelism/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
The article <a href="http://news.com.com/Passwords+The+weakest+link/2009-1001_3-916719.html?tag=st.rn">Passwords: The Weakest Link</a> references a 25 year old research work on the efficacy of passwords:
</p>
<p>
</p>
<blockquote>
In the pre-Internet Age of 1979, when storage was measured in the number of bits that could fit on a foot of magnetic tape, <a href="http://portal.acm.org/citation.cfm?id=359168.359172">a seminal paper on password security</a> found that <b>a third of users' passwords could be broken in less than five minutes.</b>
</blockquote>
<p>
This article was written in 2002, and the password security picture hasn't improved at all in the intervening 23 years:
</p>
<p>
</p>
<blockquote>
When a regional health care company called in network protection firm Neohapsis to find the vulnerabilities in its systems, the Chicago-based security company knew a sure place to look.
<p>
Retrieving the password file from one of the health care company's servers, the consulting firm put <a href="http://www.openwall.com/john/">"John the Ripper,"</a> a well-known cracking program, on the case. While well-chosen passwords could take years--if not decades--of computer time to crack, <b>it took the program only an hour to decipher 30 percent of the passwords for the nearly 10,000 accounts listed in the file.</b>
</p>
<p>
"Just about every company that we have gone into, even large multinationals, has a high percentage of accounts with easily (cracked) passwords," said Greg Shipley, director of consulting for Neohapsis. "We have yet to see a company whose employees don't pick bad passwords."
</p>
</blockquote>
<p>
When there's no measurable improvement in password security between 1979 and 2005, clearly we aren't dealing with a technology problem. We're dealing with a people problem. <b>Passwords are fundamentally broken because they aren't compatible with typical human behavior</b> :
</p>
<p>
</p>
<blockquote>
The only defense is to make passwords nearly impossible to guess, but such strength requires that the password be selected in a totally random fashion. That's a tall order for humans, said David Evans, an assistant professor of computer science at the University of Virginia.
<p>
"When humans make passwords, (they) are not very good at making up randomness," he said. Furthermore, because people usually have several passwords to keep track of, locking user accounts with random, but difficult-to-remember, strings of characters such as "wX%95qd!" is a recipe for a support headache. "The idea is to make something that is easy to remember but that will make up a good password," he said.
</p>
<p>
Many security administrators focus their efforts on teaching users how to use various mnemonics to create strong, but memorable, passwords. A common technique takes the first or last letter of each word in a saying or phrase familiar to the user. For example, by using random capitalization and substituting some punctuation marks and digits for letters, "Friends don't let friends give tech advice" might become "fD!Fg7a."
</p>
<p>
The education doesn't seem to be sticking, and the password problem is getting worse as the percentage of less-tech-savvy computer users increases.
</p>
</blockquote>
<p>
I don't have a solution to the password problem, but there is one thing we can do to improve the usability and security of passwords dramatically.
</p>
<p>
We have to encourage users to <b>stop thinking of passwords as single words</b>, and <a href="http://www.codinghorror.com/blog/archives/000342.html">start thinking of them as pass phrases.</a> The worst imaginable pass phrase (eg, "this is my secret password") is many times more secure than an average single word password (eg, "god123"). And it's easier to remember.*
</p>
<p>
As a developer, you need to do your part, too:
</p>
<p>
</p>
<ol>
<li>Absolutely, positively <b>make sure your applications support a password field length of at least 128 unicode characters</b>.
</li>
<li>In the user interface for defining the password, <b>remind the user that password doesn't literally mean a word</b>. Give several examples of pass phrases directly alongside the entry field. It's absolutely imperative that we educate the users-- how else will they know there's some other way to deal with that input box?
</li>
</ol>
<p>
The greatest long term security threat isn't hackers. It's the perpetuation of the braindead 8-16 character password length limitation, and the idea that passwords are single words.
</p>
<p>
* unfortunately, not easier to type, but neither is "X74@&amp;z3!". What are you gonna do?
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2005-08-11T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/passphrase-evangelism/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ UI Follies: Windows Media Player Edition ]]></title>
<link>https://blog.codinghorror.com/ui-follies-windows-media-player-edition/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
Windows Media Player may be the only windows application with a <b>UI that gets progressively worse with each new version</b>. It is my media player of choice due only to overwhelming indifference on my part; I curse every time I use it. That's why I was so encouraged by Philipp Lenssen's <a href="http://blog.outer-court.com/archive/2005-07-09-n31.html">rant on the horrible usability of WMP 10</a>.
</p>
<p>
I am not alone. Philipp outlines the many UI problems in WMP 10 with detailed screenshots. I could elaborate, but why bother? He says exactly what I would say, almost to the letter. <a href="http://blog.outer-court.com/archive/2005-07-09-n31.html">Go read it</a>! These little niggling UI problems aren't enough to motivate me to switch to another media player, but they're painful and unnnecessary.
</p>
<p>
Paul Thurott has <a href="http://www.winsupersite.com/reviews/wmp10.asp">issues with the WMP 10 user interface too</a>:
</p>
<p>
</p>
<blockquote>
<i>
Though WMP 10 is less cluttered than previous WMP versions, it's easy to return WMP 10 to a state of UI complexity fair easily. Simply enter any of its "modes"--Now Playing, for example--and the UI is suddenly transformed to include a number of bizarre little buttons once again, in this case, the Select Now Playing Options button (to access Visualizations, Info Center View, various Plug-ins, and several enhancements), a status area for the currently accessed service, a View Full Screen button, a Video Pane Maximize/Restore button, and so on. But some of the modes are really nasty: Get into the Media Library, select the appropriate options, and you're suddenly looking at a pretty busy application (<a href="http://www.winsupersite.com/images/reviews/wmp10_rtm_02.jpg">Figure</a>). I mean, compare this clumsiness to the clean iTunes user interface, and you'll see what I mean (<a href="http://www.winsupersite.com/images/reviews/wmp10_rtm_03.jpg">Figure</a>).
</i><p>
But maybe that's not fair. After all, WMP 10 does a lot more than iTunes. A better comparison might be RealNetworks RealPlayer 10.5 with Harmony Technology, which, like WMP 10, is an all-in-one media player. And sure enough, like WMP 10, RealPlayer gets bogged down in options, though the presentation is largely is arguably more attractive, with pastel colors and none of the <a href="http://www.codinghorror.com/blog/archives/000246.html">tree view nonsense</a> that Microsoft is so fond of for some reason (<a href="http://www.winsupersite.com/images/reviews/wmp10_rtm_04.jpg">Figure</a>).
</p>
</blockquote>
<p>
What's really shocking is that WMP 10 was an <i>improvement</i> over WMP 8 and 9. It still sucks for even my minimal usage patterns, so you can imagine how bad those versions were. Maybe that's why the open-source <a href="http://sourceforge.net/projects/guliverkli/">Media Player Classic</a> project exists: it was all downhill for Microsoft from version 6.4.
</p>
<p>
If you're feeling nostalgic, try <b>start, run, mplayer2</b> to see what version 6.4 looks like. Unfortunately, the old player is falling way behind on the technical playback details, but the simple UI is timeless.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2005-08-12T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/ui-follies-windows-media-player-edition/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ Microsoft 1978 ]]></title>
<link>https://blog.codinghorror.com/microsoft-1978/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
I'm sure most of you are familiar with this famous Microsoft group photo from December 1978:
</p>
<p>
<img alt="image placeholder" >
</p>
<p>
Groovy. In case you were wondering, the photo is authentic. It's even featured on the official Microsoft <a href="http://www.microsoft.com/billgates/bio.asp">Bill Gates biography page</a>. Of course we recognize Bill Gates in that famous photo, but I was curious about the <i>other</i> people in the photo. What happened to them? When did they leave Microsoft, and why? What are they doing now?
</p>
<p>
<font color="red">Update:</font> Nearly 30 years later, Microsoft <a href="http://www.newsweek.com/id/142636">reshot this classic photo</a>.
</p>
<p>
A coworker provided a link to this <a href="http://www.time.com/time/magazine/notebook/0,9485,1101000501,00.html">2000 Time article</a> that did most of the research for us; there's also <a href="http://www.museumofhoaxes.com/photos/microsoft.html">a page on the Museum of Hoaxes</a> that adds a bit more information on the people in the photo. I've combined the information from both sources here:
</p>
<p>
</p>
<table width="100%">
<tr><td colspan="2" valign="bottom">
<b>Top Row</b><hr>
</td></tr>
<tr>
<td valign="top" width="125px">Steve Wood</td>
<td valign="top">Programmer. Left Microsoft in 1980. Married to Marla Wood. Now runs a telecommunications company.  EW $15 million.
</td>
</tr>
<tr>
<td valign="top">Bob Wallace</td>
<td valign="top">Production manager-designer. Left Microsoft in 1983. Was a psychedelic-drug advocate. <a href="http://seattlepi.nwsource.com/local/88590_obit26.shtml">Died in 2002</a>. EW $5 million.
</td>
</tr>
<tr>
<td valign="top">Jim Lane</td>
<td valign="top">Project manager. Left Microsoft in 1985. Now owns his own software company. EW $20 million.
</td>
</tr>
<tr><td colspan="2"> 
</td></tr>
<tr><td colspan="2" valign="bottom">
<b>Middle Row</b><hr>
</td></tr>
<tr>
<td valign="top">Bob O'Rear</td>
<td valign="top">Chief mathematician. Left Microsoft in 1993. Now a cattle rancher. EW $100 million.
</td>
</tr>
<tr>
<td valign="top">Bob Greenberg</td>
<td valign="top">Programmer. Left Microsoft in 1981. Helped develop Cabbage Patch dolls for Coleco. Now makes software for golf courses. EW $20 million.
</td>
</tr>
<tr>
<td valign="top">Marc McDonald</td>
<td valign="top">Programmer. Microsoft's first employee. Left Microsoft in 1984 because it was "too big", then rejoined the company when they bought Design Intelligence, the company he was working for. Has the honor of wearing badge number 00001. EW $1 million.
</td>
</tr>
<tr>
<td valign="top">Gordon Letwin</td>
<td valign="top">Programmer. Left Microsoft in 1993. Now an environmental philanthropist. EW $20 million.
</td>
</tr>
<tr><td colspan="2"> 
</td></tr>
<tr><td colspan="2" valign="bottom">
<p><b>Bottom Row</b></p>
<hr>
</td></tr>
<tr>
<td valign="top"><a href="http://en.wikipedia.org/wiki/Bill_Gates">Bill Gates</a></td>
<td valign="top">Co-founder. Still Microsoft chairman and chief architect. Now the richest person in the world. EW <span style="color:red">$50 billion</span>.
</td>
</tr>
<tr>
<td valign="top">Andrea Lewis</td>
<td valign="top">Technical writer. Left Microsoft in 1983. Now a freelance journalist. EW $2 million.
</td>
</tr>
<tr>
<td valign="top">Marla Wood</td>
<td valign="top">Bookkeeper. Married to Steve Wood. Left Microsoft in 1980, then sued the company for sex descrimination. Now a self-described "professional volunteer". EW $15 million.
</td>
</tr>
<tr>
<td valign="top"><a href="http://en.wikipedia.org/wiki/Paul_Allen">Paul Allen</a></td>
<td valign="top">Co-founder. Left Microsoft in 1983 but remains a senior strategy advisor to the company. Now sports team owner, space enthusiast, and philanthropist. EW <span style="color:red">$21 billion</span>.
</td>
</tr>
</table>
<p>
A lot of the information on the hoaxes site was cribbed directly from a <a href="http://www.codinghorror.com/blog/files/Albuquerque%20Tribune%20-%20When%20Microsoft%20Was%20Local.htm">2000 article in the Albuquerque Tribune</a>. Unfortunately, that article is no longer available on the Tribune website. I managed to pry a copy of the article out of the google cache, so I'm mirroring it locally to preserve the content.
</p>
<p>
The Microsoft logo was no less groovy in 1978:
</p>
<p>
<img alt="image placeholder" >
</p>
<p>
If you want to bone up on your ancient Microsoft history even further, I recommend the History of Computing project's <a href="http://www.thocp.net/companies/microsoft/microsoft_company.htm">Microsoft timeline</a>.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2005-08-15T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/microsoft-1978/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ Nasty Software Hacks and Intel's CPUID ]]></title>
<link>https://blog.codinghorror.com/nasty-software-hacks-and-intels-cpuid/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>We were discussing nasty software hacks today at lunch. The worst hacks are always in software, but those software hacks have an insidious tendency to seep into the hardware, too. I was reminded of Intel's <a href="http://linux.omnipotent.net/article.php?article_id=11457">infamous CPUID hack</a>:</p>
<blockquote>
<p>Prior to the Pentium, software had to jump through elaborate loops to determine exactly what type of CPU was installed on an 80x86 computer. These methods involved checking for illegal opcodes, using known bugs in prior processors, a voodoo doll of Charles Babbage, and a ouija board. Intel fixed some of these problems with CPUID.</p>
<p>The CPUID opcode was introduced to the late models of the Intel 486 (486SL and 486DX4). The Intel Pentium, along with its various clones and successors, have all included this instruction. CPUID allows software to gain information on the CPU type and version. CPUID Function 0 returns an ASCII string, identifying the vendor ("GenuineIntel," "CyrixInstead," "AuthenticAMD," etc.). CPUID Function 1 returns the CPU family, model, and stepping.</p>
<p>Intel identifies its various processor using a combination of the family and model codes. Pentium processors are identified by a family code of 5. A family code of 6 covers the PentiumPro and all of its variants. Since the PentiumPro, Pentium II, Pentium III and Celeron are all based on the same processor architecture, they are all part of the P6 family( hence, family code 6). The model code is used to tell the various P6 processors apart, along with the cache size and brand ID, depending on the CPU (it's messy; don't ask).<br>
Intel decided to make a new family code for the Pentium 4. That's where the fun begins.</p>
<p>The average person would think Intel would just increment the family code, making the Pentium 4 part of 'family 7'. That does make sense, but Intel already has a family code 7 processor : the Itanium (it came before the Pentium 4, even though the P4 hit the market first). Ok, no problem. Just make the Pentium 4's family code 8 instead of 7. Wrong. Big problem.</p>
<p>Microsoft Windows NT 4.0 ran into a bit of a snag with "family 8." For those not schooled in the ways of binary, the decimal number 8 is "1000" in binary. That's four binary digits. Four bits.</p>
<p>Four bits. Remember that, because it's important.</p>
<p>When Windows NT 4.0 and its six service packs were released, the largest CPU family code was 6. That's "110" in binary. Only three bits. So <b>the NT code only looks at the first three bits of the CPU family when configuring the system.</b></p>
<p>If you haven't figured it out by now, the first three bits of 8 are zero, zero and, you guessed it, zero. Windows NT goes wacko when it sees a CPU family zero. Serious wacko. Jack with an axe at the end of <a href="http://www.imdb.com/title/tt0081505/">The Shining</a> wacko. Since Windows 2000 wasn't in wide release at the time, and Intel wanted to avoid this tech support issue, the family code had to be changed to avoid a conflict with Windows NT.</p>
<p>So <b>now the family code for the Pentium 4 is 15, or "1111" in binary, so the first three bits look like 'CPU family 7' to Windows NT.</b></p>
</blockquote>
<p>This hack is nasty enough to make even Raymond Chen, <a href="http://blogs.msdn.com/oldnewthing/archive/2003/12/24/45779.aspx">the patron saint of nasty software hacks</a>, blanch. On the other hand, it is an instant upgrade from processor family 8 to processor family 15! Gee, thanks Windows NT 4.0!</p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2005-08-16T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/nasty-software-hacks-and-intels-cpuid/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ Are All Programming Languages The Same? ]]></title>
<link>https://blog.codinghorror.com/are-all-programming-languages-the-same/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
There's a chart in <a href="http://www.amazon.com/exec/obidos/ASIN/0735619670/codihorr-20">Code Complete</a> that compares the productivity of working in different languages:
</p>
<p>
</p>
<blockquote>
Programmers working with high-level languages achieve better productivity and quality than those working with lower-level languages. Languages such as C++, Java, Smalltalk, and Visual Basic have been credited with improving productivity, reliability, and comprehensibility by factors of 5 to 15 over low-level languages such asassembly and C (Brooks 1987, Jones 1998, Boehm 2000). You save time when you don't need to have an awards ceremony every time a C statement does what it's supposed to do. Moreover, higher-level languages are more expressive than lower-level languages. Each line of code says more. The [following table] shows typical ratios of source statements in several high-level languages to the equivalent code in C. A higher ratio means that each line of code in the language listed accomplishes more than does each line of code in C.
</blockquote>
<p>
</p>
<table cellpadding="4" cellspacing="4">
<tr>
<td><b>Language</b></td>
<td>
<b>Level Relative to C</b>
</td>
</tr>
<tr>
<td>C</td>
<td>1
</td>
</tr>
<tr>
<td>C++</td>
<td>2.5
</td>
</tr>
<tr>
<td>Fortran</td>
<td>2
</td>
</tr>
<tr>
<td>Java</td>
<td>2.5
</td>
</tr>
<tr>
<td>Perl</td>
<td>6
</td>
</tr>
<tr>
<td>Python</td>
<td>6
</td>
</tr>
<tr>
<td>Smalltalk</td>
<td>6
</td>
</tr>
<tr>
<td>MS Visual Basic</td>
<td>4.5
</td>
</tr>
</table>
<p>
Fair enough. Des Traynor wondered if this table was valid, so he <a href="http://www.minds.may.ie/~dez/serendipity/index.php?/archives/25-All-programming-languages-are-the-same....html">performed a simple test</a>: he provides examples of a tiny "read a file and print it to the console" app in Java, Perl, Python, and Ruby. I'll reprint the smallest version here, which happens to be the Python implementation:
</p>
<p>
</p>
<pre>
filename = "readAFile.py"
try:
for line in open(filename, 'r').readlines(): print line
except: print "Problem with %s" % filename
</pre>
<p>
For comparison, here's the VB.NET 2005 version:
</p>
<p>
</p>
<pre language="vb.net">
Module Module1
Sub Main()
Dim filename As String = "readAFile.vb"
Try
For Each line As String In System.IO.File.ReadAllLines(filename)
Console.WriteLine(line)
Next
Catch
Console.WriteLine("Error reading file, or file not found.")
End Try
End Sub
End Module
</pre>
<p>
And the C# 2005 version:
</p>
<p>
</p>
<pre language="C#">
class Module1 {
static void Main(string[] args)	{
string filename = @"readAFile.cs";
try {
foreach (string line in System.IO.File.ReadAllLines(filename)) {
System.Console.WriteLine(line);
}
}
catch {
System.Console.WriteLine("File not found or error reading file.");
}
}
}
</pre>
<p>
I had to edit the C# sample quite a bit to get rid of things that would have made the line count ridiculously large. Most notably, I removed the <a href="http://www.codinghorror.com/blog/archives/000188.html">stupid always-on namespace declaration</a> (don't get me started), added the System prefix to avoid the using, and folded leading curlies into the same line.
</p>
<p>
Anyway. Including the examples provided on <a href="http://www.minds.may.ie/~dez/serendipity/index.php?/archives/25-All-programming-languages-are-the-same....html">Des' page</a>, that gives us a final line count tally of:
</p>
<p>
</p>
<table cellpadding="4" cellspacing="4">
<tr>
<td><b>Language</b></td>
<td>
<b>Lines of code</b>
</td>
</tr>
<tr>
<td>Java</td>
<td>15
</td>
</tr>
<tr>
<td>C# 2005</td>
<td>8
</td>
</tr>
<tr>
<td>VB.NET 2005</td>
<td>8
</td>
</tr>
<tr>
<td>Ruby</td>
<td>6
</td>
</tr>
<tr>
<td>Perl</td>
<td>5
</td>
</tr>
<tr>
<td>Python</td>
<td>4
</td>
</tr>
</table>
<p>
So, even with this trivial little example, there is a wide gap between "scripting" and "non-scripting" languages when it comes to lines of code. There's plenty of existing research to support the claim that scripting languages offer higher productivity, such as the 2000 IEEE paper <a href="http://doi.ieeecomputersociety.org/10.1109/2.876288">An Empirical Comparison of Seven Programming Languages</a> (<a href="http://page.mi.fu-berlin.de/~prechelt/Biblio/jccpprt_computer2000.pdf">free draft PDF</a>):
</p>
<p>
</p>
<blockquote>
Despite these caveats, directly comparing different programming languages can provide meaningful insights. For example, I conclude from the study that Java's memory overhead is still huge compared to C or C++, but its runtime efficiency has become quite acceptable. The scripting languages, however, offer reasonable alternatives to C and C++, even for tasks that must handle fair amounts of computation and data. Their relative runtime and memory-consumption overhead will often be acceptable, and they may offer significant advantages with respect to programmer productivity, at least for small programs like the phonecode problem.
</blockquote>
<p>
That was written in 2000. Five years later, I am wondering if this distinction between "scripting" and "non-scripting" languages is as meaningful in a .NET world. If you examine the code samples above, you'll notice that <b>most of the overhead in the "non-scripting" languages comes from the cruft associated with classes, functions, and object orientation</b>. The main work loop, if considered alone, is almost identical in every language!
</p>
<p>
So then, if language isn't the real difference, what is? That very same language comparison paper offers this insight:
</p>
<p>
</p>
<blockquote>
For all program aspects investigated, the performance variability that derives from differences among programmers of the same language -- as described by the bad-to-good ratios -- is on average <b>as large or larger than the variability found among the different languages.</b>
</blockquote>
<p>
It's currently all the rage to propose that <a href="http://www.37signals.com/svn/archives/000592.php">Ruby is changing the face of software development</a>. I can definitely respect the passion behind this statement, but the actual data doesn't support a magic bullet language effect. Given ..
</p>
<ol>
<li>the abandonment of C++ and C for mainstream programming
</li>
<li>the huge influence of individual programmer skill
</li>
<li>the slow but steady adoption of scripting/dynamic language conventions in Java and .NET
</li>
</ol>
.. maybe all modern programming languages really <i>are</i> the same.
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2005-08-17T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/are-all-programming-languages-the-same/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ The myth of infinite detail: Bilinear vs. Bicubic ]]></title>
<link>https://blog.codinghorror.com/the-myth-of-infinite-detail-bilinear-vs-bicubic/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>Have you ever noticed how, in movies and television, actors can take a crappy, grainy low-res traffic camera picture of a distant automobile and somehow "enhance" the image until they can read the license plate perfectly?</p>
<p>Yeah.</p>
<p>I don't know what kind of crazy infinite-detail fractal images these scriptwriters think we have. Here in the real world, <a href="http://www.codinghorror.com/blog/archives/000137.html">bitmaps don't scale worth a damn</a>. Take this bitmap, for example:</p>
<p><img alt="image placeholder" >
<p>If we blow that up 300% using the simplest possible algorithm &amp;dash; a naive nearest neighbor (aka pixel resize) approach – we get this:</p>
<p><img alt="image placeholder" >
<p>Pixel-tastic! But there's a well known way of interpolating the pixels in the image so it doesn't look <em>quite</em> so bad when upsized – something called <strong>bilinear filtering</strong>. Bilinear filtering samples nearby pixels in an effort to guesstimate what the missing pixels would look like in a larger image. Let's enlarge the image 300% using bilinear filtering and see what happens:</p>
<p><img alt="image placeholder" >
<p>A bit blurry, yes, but clearly superior to giant chunky pixels.</p>
<p>There's also something called <strong>bicubic filtering</strong> which is supposed to be an improvement over bilinear filtering. Video cards have offered bilinear filtering for years, but they don't bother with bicubic filtering to this day. And that's with millions of transistors to burn. If bicubic is only offered by paint programs, you have to wonder, is it really worth it? Here's the same image enlarged 300% using bicubic filtering:</p>
<p><img alt="image placeholder" >
<p>Interesting. It's sharper, but I'm not sure it's all that much better. And there's a bit of an oversharpening or halation effect at some color borders, too.</p>
<p>There's <a href="http://www.interpolatethis.com/closeups/nearestCU.html">another image sample at Interpolate This</a> with a writeup that implies that bicubic is flat-out superior, but I'm not sure that's the case. Either way you're interpolating*, it's just a question of how sharp you like your simulated pixels to be.</p>
<p>The best solution of all is to move to a vector representation and give up on bitmaps – and interpolation – entirely.</p>
<p>* A reader pointed out an interesting algorithm for interpolating low-res images called <a href="http://en.wikipedia.org/wiki/2xSaI">2xSAI</a>. Here's a <a href="http://www.codinghorror.com/.a/6a0120a85dcdae970b017743dceefa970d-pi">screenshot</a> I generated of a SNES game with 2xSAI interpolation enabled. Compare to the <a href="http://www.codinghorror.com/.a/6a0120a85dcdae970b01676901f3ab970b-pi">original screenshot</a>.</p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2005-08-18T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/the-myth-of-infinite-detail-bilinear-vs-bicubic/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ Despite the incredible slowness and the sparseness of features, this is really really cool ]]></title>
<link>https://blog.codinghorror.com/despite-the-incredible-slowness-and-the-sparseness-of-features-this-is-really-really-cool/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
If you were about to throw out your C++ compilers because of my post on the <a href="http://www.codinghorror.com/blog/archives/000365.html">productivity benefits of managed code and scripting languages</a>, hold your horses. Although managed code is pretty <a href="http://www.codinghorror.com/blog/archives/000299.html">darn</a> <a href="http://www.codinghorror.com/blog/archives/000234.html">fast</a>, sometimes performance still comes first. As <a href="http://w-uh.com/posts/">Ole Eichorn</a> points out in the comments:
</p>
<p>
</p>
<blockquote>
<i>
[You said] "given the abandonment of C/C++ for mainstream programming".
</i><p>
Really?
</p>
<p>
Name any OS which isn't coded in C/C++. I mean, a real one.
</p>
<p>
Name any Office package which isn't coded in C/C++. I mean, one with measurable market share.
</p>
<p>
Name any database which isn't coded in C/C++.
</p>
<p>
Name any X which isn't coded in C/C++. Where X = webserver, application server, financial application, image analysis package, etc.
</p>
<p>
I think your definition of "mainstream" must be different from mine, because from my point of view EVERY mainstream program is written in C/C++, and nothing is even close.
</p>
</blockquote>
<p>
What I actually said was mainstream <i>programming</i>, not mainstream programs. Consider the total volume of code written in a given year for the PC platform. What percentage of that code will end up in commercial, shipping applications-- much less an operating system? And in which of those applications will performance be the <i>primary</i> consideration? It's an incredibly tiny fraction!
</p>
<p>
But Ole's comment is still valid, insofar as it goes. I'm not proposing a world where all applications are written in managed code, or Python, or Ruby, or whatever the cool scripting language of the moment happens to be. It just doesn't make sense. To prove that point, here's an amazing quote from a <a href="http://www.os2ezine.com/v1n14/corel.htm">first look at the ill-fated Corel Office for Java beta</a> from way back in 1997:
</p>
<p>
</p>
<blockquote>
<i>
The pre-beta version of WordPerfect on display is very basic, a few fonts, a few formatting commands -- not like the full-featured Word Processing apps we're used to. Still, it's enough to play around with.
</i><p>
As I mentioned before, it's very slow. All us fast typists will be frustrated, as there seems to be a <b>two second delay</b> between typing each letter and seeing it displayed.
</p>
<p>
<b>Despite the incredible slowness and the sparseness of features, this is really, really cool</b> and I hope Corel can pull this off quickly. If they can, it should open up the software market -- no longer would software companies be developing for platforms, they would be developing for one big market. Then it would be up to the Operating Systems themselves to attract users by their merits, not by what they can run.
</p>
</blockquote>
<p>
So, er, good luck with that.
</p>
<p>
This is a stretch even on today's hardware, so I can't even begin to imagine what they were thinking back in 1997 when a 300 mhz CPU was top of the line. <b>Where is Corel Office for Java now?</b> Seriously, where is it? I can't find any mention of it.
</p>
<p>
And that's why C, C++, and even assembler are still part of a developer's toolkit. I argue that they are of increasingly <i>diminished</i> importance, but I would never propose that every application should be written in .NET.
</p>
<p>
At least not with a straight face.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2005-08-19T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/despite-the-incredible-slowness-and-the-sparseness-of-features-this-is-really-really-cool/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ Clean Sources Plus ]]></title>
<link>https://blog.codinghorror.com/clean-sources-plus/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>Omar Shahine's <a href="http://wiki.shahine.com/default.aspx/MyWiki/CleanSources.html">Clean Sources</a> is a nifty little right-click app for .NET developers:</p>
<blockquote>This application does one thing. It adds an explorer shell menu to folders that when selected will recursively delete the contents of the bin, obj and setup folders. If you have a .NET project that you wish to share with someone, this is useful to remove the unnecessary stuff from the folder before you zip it up and send it off. </blockquote>
<p>There's one glaring omission here, though. <strong>The source control bindings aren't removed!</strong> And neither are the local user setting files. I finally had some time, so...</p>
<p>Presenting <strong>Clean Sources Plus</strong>. It adds a right-click menu to folders that does the following:</p>
<ul>
<li>Removes bin, obj, Debug and Release folders </li>
<li>Removes source control bindings from project and solution files </li>
<li>Removes user setting files </li>
</ul>
<p>The result is a very clean, minimal set of .NET solution files, suitable for upload or sharing.</p>
<p><span style="color: red;">Updated to version 1.1 on 11/10/05 with the following new features:</span></p>
<ul>
<li>Added second context menu "Clean and Zip Sources" which also zips the entire folder contents into a single zip file. This zip file is placed in the root folder and shares the same name as the folder. </li>
<li>The regex patterns used to determine what files and folders to delete are now set in the .config file. This way you can customize what gets deleted without recompiling. </li>
</ul>
<p>I tested this with both C# and VB projects, but I'm not 100% sure it works for all other types of projects. It shouldn't break anything, but I may have missed some oddball project type (database? setup?) source bindings. And I only tested against the typical SourceSafe bindings. Anyway, test it out and let me know if there are any issues.*</p>
<ul>
<li>
<a href="https://github.com/coding-horror/CleanSourcesPlus">Download the Clean Sources Plus 1.1 VS.NET 2003 solution</a>
</li>
</ul>
<p>You may also be interested in <a href="http://code.google.com/p/treetrim/">TreeTrim</a>, which is based on this project.</p>
<p>*  If this app deletes all your source code, then it's Omar's fault.</p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2005-08-21T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/clean-sources-plus/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ Is DoEvents Evil, Revisited ]]></title>
<link>https://blog.codinghorror.com/is-doevents-evil-revisited/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
A colleague of mine had some excellent comments on the surprising reentrancy issues you'll run into when using <b>Application.DoEvents()</b>:
</p>
<p>
</p>
<blockquote>
<i>The Application.DoEvents method is often used to allow applications to repaint while some longer task is taking place. This is usually the result of polling instead of using events / delegates. That's fine, but developers need to understand <b>DoEvents processes all of the messages in the message queue, not just paint messages</b>. This can lead to unexpected reentrancy issues. A simple example is shown below.</i>
<p>
</p>
<pre language="c#">
// some data we care about
private int _count;
// the click handler for a button
private void buttonUserAction_Click(object sender, System.EventArgs e)
{
_count++;
// _count won't always be 1; it depends how many times
// this method was reentered during the DoEvents calls
Console.WriteLine(_count);
// simulate longer tasks that we are polling the status on.
// call DoEvents to allows the window to repaint
for (int i=0; i &lt; 100000; i++)
Application.DoEvents();
_count--;
}
</pre>
<p>
<i>In this example, it doesn't matter if the method is reentered. But it might in other methods or applications. Always remember that DoEvents can cause methods to be reentered. And understand which methods are affected: any method that is called directly or indirectly in response to processing messages in the message queue.
</i></p>
<p>
It would be useful if the Form object had a Busy property; the form would only process paint related messages and skip input related messages like menus, clicks, keyboard, etc.</p>
</blockquote>
<p>
I put together a <a href="http://www.codinghorror.com/blog/files/IsDoEventsEvil_Source.zip">VS.NET 2003 winforms solution</a> (6kb) demonstrating the code sample above.
</p>
<p>
This may make you wonder: <a href="http://www.codinghorror.com/blog/archives/000159.html">Is DoEvents Evil?</a>
</p>
<p>
I think it's definitely the <i>lesser</i> of two evils: it's either this simplified cooperative yielding or <a href="http://www.codinghorror.com/blog/archives/000169.html">full-bore multithreaded code</a>. DoEvents can be a big win with minimal effort in the right situations. For example, how about using it to <a href="http://www.codinghorror.com/blog/archives/000177.html">improve perceived form load performance?</a>
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2005-08-22T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/is-doevents-evil-revisited/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ Microsoft LogParser ]]></title>
<link>https://blog.codinghorror.com/microsoft-logparser/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
Ask yourself this question: <b>what if everything could be queried with SQL?</b> <a href="http://www.microsoft.com/downloads/details.aspx?FamilyID=890cd06b-abf8-4c25-91b2-f8d975cf8c07&amp;displaylang=en">Microsoft's LogParser</a> does just that. It lets you slice and dice a variety of log file types using a common SQL-like syntax.  It's an incredibly powerful concept, and the LogParser implementation doesn't disappoint. This architecture diagram from the LogParser documentation explains it better than I could:
</p>
<p>
<img alt="image placeholder" >
</p>
<p>
The excellent <a href="http://securityfocus.com/infocus/1712">forensic IIS log exploration with LogParser</a> article is a good starting point for sample LogParser IIS log queries. Note that I am summarizing just the SQL clauses; I typically output to the console, so the actual, complete commandline would be
</p>
<p>
</p>
<pre>logparser "(sql clause)" -rtp:-1
</pre>
<p>
Top 10 items retrieved:
</p>
<p>
</p>
<pre>SELECT TOP 10 cs-uri-stem as Url, COUNT(cs-uri-stem) AS Hits
FROM ex*.log
GROUP BY cs-uri-stem
ORDER BY Hits DESC
</pre>
<p>
Top 10 slowest items:
</p>
<p>
</p>
<pre>SELECT TOP 10 cs-uri-stem AS Url, MIN(time-taken) as [Min],
AVG(time-taken) AS [Avg], max(time-taken) AS [Max],
count(time-taken) AS Hits
FROM ex*.log
WHERE time-taken &lt; 120000
GROUP BY Url
ORDER BY [Avg] DESC
</pre>
<p>
All Unique Urls retrieved:
</p>
<p>
</p>
<pre>SELECT DISTINCT TO_LOWERCASE(cs-uri-stem) AS Url, Count(*) AS Hits
FROM ex*.log
WHERE sc-status=200
GROUP BY Url
ORDER BY Url
</pre>
<p>
HTTP errors per hour:
</p>
<p>
</p>
<pre>SELECT date, QUANTIZE(time, 3600) AS Hour,
sc-status AS Status, COUNT(*) AS Errors
FROM ex*.log
WHERE (sc-status &gt;= 400)
GROUP BY date, hour, sc-status
HAVING (Errors &gt; 25)
ORDER BY Errors DESC
</pre>
<p>
HTTP errors ordered by Url and Status:
</p>
<p>
</p>
<pre>SELECT cs-uri-stem AS Url, sc-status AS Status, COUNT(*) AS Errors
FROM ex*.log
WHERE (sc-status &gt;= 400)
GROUP BY Url, Status
ORDER BY Errors DESC
</pre>
<p>
Win32 error codes by total and page:
</p>
<p>
</p>
<pre>SELECT cs-uri-stem AS Url,
WIN32_ERROR_DESCRIPTION(sc-win32-status) AS Error, Count(*) AS Total
FROM ex*.log
WHERE (sc-win32-status &gt; 0)
GROUP BY Url, Error
ORDER BY Total DESC
</pre>
<p>
HTTP methods (GET, POST, etc) used per Url:
</p>
<p>
</p>
<pre>SELECT cs-uri-stem AS Url, cs-method AS Method,
Count(*) AS Total
FROM ex*.log
WHERE (sc-status &lt; 400 or sc-status &gt;= 500)
GROUP BY Url, Method
ORDER BY Url, Method
</pre>
<p>
Bytes sent from the server:
</p>
<p>
</p>
<pre>SELECT cs-uri-stem AS Url, Count(*) AS Hits,
AVG(sc-bytes) AS Avg, Max(sc-bytes) AS Max,
Min(sc-bytes) AS Min, Sum(sc-bytes) AS TotalBytes
FROM ex*.log
GROUP BY cs-uri-stem
HAVING (Hits &gt; 100) ORDER BY [Avg] DESC
</pre>
<p>
Bytes sent from the client:
</p>
<p>
</p>
<pre>SELECT cs-uri-stem AS Url, Count(*) AS Hits,
AVG(cs-bytes) AS Avg, Max(cs-bytes) AS Max,
Min(cs-bytes) AS Min, Sum(cs-bytes) AS TotalBytes
FROM ex*.log
GROUP BY Url
HAVING (Hits &gt; 100)
ORDER BY [Avg] DESC
</pre>
<p>
</p>
<p>
There's an <a href="http://www.amazon.com/exec/obidos/ASIN/1932266526/">entire book about LogParser</a>, and Mike Gunderloy even started an <a href="http://www.logparser.com/">unofficial LogParser fansite</a>.
</p>
<p>
Here are a few other articles I found that touch on different aspects of LogParser:
</p>
<p>
</p>
<ul>
<li>
<a href="http://www.adopenstatic.com/cs/blogs/ken/archive/2005/05/30/22.aspx">Graphing PING results</a>
</li>
<li>
<a href="http://www.harper.no/valery/PermaLink,guid,b90858aa-16e9-4a7e-a617-f7edce018250.aspx">Generating XML output and Excel 2003 XML pivots</a>
</li>
<li>
<a href="http://www.leastprivilege.com/FunWithLogParser.aspx">Auditing the Event Logs</a>
</li>
<li>
<a href="http://www.furrygoat.com/2005/01/logparser_22.html">Querying an RSS Feed</a>
</li>
<li>
<a href="http://www.microsoft.com/technet/community/columns/profwin/pw0505.mspx">Professor Windows: How LogParser Works</a>
</li>
</ul>
<p>
Although LogParser is 96.44% awesome, there are a few things that I didn't like about it:
</p>
<ol>
<li>I really, really need a standard deviation function. Min, Max, and Avg are nice but totally inadequate for determining how variable something is.
</li>
<li>The graphing output is cool-- but it's also a MS Office dependency. If you try to graph something on a machine without Office installed, you'll get an error.
</li>
<li>The automatic detection of column types in CSV files isn't always reliable. This meant I couldn't graph some numeric values in my PerfMon dumps because LogParser decided they were strings. I couldn't find any way to force a column to be detected as a certain type, either.
</li>
</ol>
<p>
Of course, the idea of SQL being used to query a bunch of stuff isn't exactly a new one; <a href="http://msdn.microsoft.com/library/en-us/wmisdk/wmi/querying_with_wql.asp">Microsoft's WQL</a> (WMI Query Language) is similar but more annoying and less powerful. And you'll get tons of hits if you logically extend this concept to querying HTML, too. Just try <a href="http://www.google.com/search?q=web+query+language">searching Google for Web Query Language</a>.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2005-08-23T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/microsoft-logparser/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ The User Interface Is The Application ]]></title>
<link>https://blog.codinghorror.com/the-user-interface-is-the-application/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
Shawn Burke's post <a href="http://www.shawnburke.net/default.aspx?document=264&amp;userinterface=9">Shippin' Ain't Easy</a> (but <a href="http://www.google.com/url?sa=U&amp;start=2&amp;q=http://www.azlyrics.com/lyrics/icet/somebodygottadoitpimpinainteasy.html&amp;e=747">somebody gotta do it</a>) explains why you have to resist change at the end of a project, no matter how justifiable and rational the reasons may be. Even the smallest change has a real risk of introducing additional bugs. The first commenter quipped:
</p>
<p>
</p>
<blockquote>
TeX doesn't have bugs... Perhaps that's the exception that proves the rule :-)
</blockquote>
<p>
<a href="http://www.ringrose.name/">Ian Ringrose</a> immediately replied:
</p>
<p>
</p>
<blockquote>
But does it have any users? <b>Is the fact that it's very hard to use not a bug in and of itself?</b>
</blockquote>
<p>
Touch.
</p>
<p>
Yukihiro Matsumoto, the creator of Ruby, <a href="http://www.artima.com/intv/craft.html">has strong feelings on this subject</a>:
</p>
<p>
</p>
<blockquote>
If you have a good interface on your system, and a budget of money and time, you can work on your system. If your system has bugs or is too slow, you can improve it. But if your system has a bad interface, you basically have nothing. It won't matter if it is a work of the highest craftsmanship on the inside. <b>If your system has a bad interface, no one will use it</b>. So the interface or surface of the system, whether to users or other machines, is very important.
</blockquote>
<p>
It's also something Joel calls <a href="http://www.joelonsoftware.com/articles/fog0000000356.html">the iceberg secret</a>:
</p>
<p>
</p>
<blockquote>
I learned this lesson as a consultant, when I did a demo of a major web-based project for a client's executive team. The project was almost 100% code complete. We were still waiting for the graphic designer to choose fonts and colors and draw the cool 3-D tabs. In the meantime, we just used plain fonts and black and white, there was a bunch of ugly wasted space on the screen, basically it didn't look very good at all. But 100% of the functionality was there and was doing some pretty amazing stuff.
<p>
What happened during the demo? <b>The clients spent the entire meeting griping about the graphical appearance of the screen.</b> They weren't even talking about the UI. Just the graphical appearance. "It just doesn't look slick," complained their project manager. That's all they could think about. We couldn't get them to think about the actual functionality. Obviously fixing the graphic design took about one day. It was almost as if they thought they had hired painters.
</p>
</blockquote>
<p>
I had this <i>exact</i> experience on a project recently. We're building all this cool back-end stuff, natch, and we needed a quickie front-end demo app to show it off. So we built a relatively simple demo app. It's decent, but barely competitive with other companies websites.
</p>
<p>
Guess what the client thought of our project?
</p>
<p>
I don't care how many kick-ass Visio architecture diagrams you have; as far as the user is concerned, <b>the UI is the application</b>. I know <a href="http://www.codinghorror.com/blog/archives/000325.html">UI is Hard</a>, but you <i>have</i> to build an impressive UI if you want to be taken seriously. Give your UI the high priority it deserves.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2005-08-24T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/the-user-interface-is-the-application/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ Mavis Beacon Ate My Brain! ]]></title>
<link>https://blog.codinghorror.com/mavis-beacon-ate-my-brain/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
You may be familiar with the classic <a href="http://www.google.com/search?q=mavis+beacon+teaches+typing">Mavis Beacon Teaches Typing</a>* series of software from Broderbund.
</p>
<p>
<img alt="image placeholder" >
</p>
<p>
Well, Sega's sublime <a href="http://www.the-underdogs.org/game.php?id=4973">Typing of the Dead</a> is like Mavis Beacon Teaches Typing <i>... if Mavis Beacon was a flesh-eating zombie!!</i>
</p>
<p>
<img alt="image placeholder" >
</p>
<p>
Any self-respecting software developer should be a decent typist. Now you can prove how much of a <a href="http://www.theonion.com/content/node/39001">keyboard ninja</a> you really are, because here's the best part: <b>Typing of The Dead supports 2-player competitive network play over TCP/IP</b>, with comprehensive post-game stat tracking (<a href="http://img518.imageshack.us/img518/6615/typingofthedeadstatsbg2.jpg">see screenshot</a>).
</p>
<p>
It's hard to explain just how wondrously bizarre Typing of the Dead is. It's a challenging, remarkably well thought out typing tutor, a tongue-in-cheek b-grade zombie movie, and the most hilarious multiplayer game experience you'll probably ever have-- all at the same time.
</p>
<p>
As a zombie enthusiast, I bought Typing of the Dead immediately after it was released in 2001, but I can't find any vendors currently selling the PC version of the game on Froogle or eBay. It may legitimately be abandonware and therefore downloadable as a torrent ISO from <a href="http://www.the-underdogs.org/game.php?id=4973">The Underdogs</a>. Once you obtain the game, legally or otherwise, install <a href="http://m0003.gamecopyworld.com/games/pc_typing_of_the_dead.shtml">the nocd patch from GameCopyWorld</a>, then copy the ~560mb install folder to a network share. Here's how to get a network game going:
</p>
<ul>
<li>Copy the game to your hard drive
</li>
<li>Obtain and write down IP address of host (you'll be prompted for this later)
</li>
<li>Run game, select Network menu option
</li>
<li>One person selects Host Session, the other person selects Join Session and types in the IP of the Host
</li>
<li>Important: if either computer is using Windows Firewall, you must ALT+TAB to desktop, check for Windows Firewall block dialogs, and unblock the game.
</li>
</ul>
<p>
Now sit back and watch the hilarity ensue. It's pure genius.
</p>
<p>
In my testing, network play works flawlessly using current Windows XP SP2 systems as long as you use the original version of the game. Whatever you do, <i>don't</i> install the "ATI patch" for the game, as it completely breaks the network multiplayer functionality!
</p>
<p>
* Interestingly, <a href="http://www.codinghorror.com/blog/files/Supertypist%20Mavis%20Beacon%20Is%20A%20Creation%20Of%20Marketing.htm">Mavis Beacon isn't a real person</a>. She's a logotype persona: an imaginary identity created entirely for the purpose of marketing. So I guess that puts her somewhere in between, say, Peter Norton and Carmen Sandiego.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2005-08-25T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/mavis-beacon-ate-my-brain/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ How to be Lazy, Dumb, and Successful ]]></title>
<link>https://blog.codinghorror.com/how-to-be-lazy-dumb-and-successful/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
Philipp Lenssen agrees that <a href="http://www.codinghorror.com/blog/archives/000237.html">inspired laziness</a> is a desirable trait for software developers:
</p>
<p>
</p>
<blockquote>
.. only lazy programmers will want to write the kind of tools that might replace them in the end. Only a lazy programmer will avoid writing monotonous, repetitive code. The tools and processes inspired by laziness speed up production.
</blockquote>
<p>
But Philipp adds one caveat: truly great programmers aren't <i>just</i> lazy. <a href="http://blog.outer-court.com/archive/2005-08-24-n14.html">They're dumb, too</a>:
</p>
<p>
</p>
<blockquote>
Programmers who know they are smart
<p>
a) stop learning<br>
b) stop being critical towards their own work <br>
</p>
<p>
In the endless battle between programmer and compiler, give up early and admit that it's always you and never the compiler who is at fault.
</p>
</blockquote>
<p>
<a href="http://www.codinghorror.com/blog/archives/000051.html">Nobody is really smart enough to program computers</a>. The only way you'll ever succeed as a software developer is through humility and the Zen concept of <a href="http://www.ironpalm.com/beginner.html">beginner's mind</a>: approaching everything as if you were seeing it for the first time. Most of all, that means <b>not being afraid to ask the stupid questions</b>:
</p>
<p>
</p>
<blockquote>
.. when confronted with a problem from management, a good programmer will adopt the mindset of being dumb. He will start asking the most simple, child-like questions, because he doesn't accept the parameters someone thinks make up the problem.
</blockquote>
<p>
Unfortunately, I frequently see developers who are afraid to ask basic questions for fear of looking stupid. Maybe it's our <a href="http://www.codinghorror.com/blog/archives/000143.html">macho smarter-than-thou programming culture</a>. Having the guts to ask basic questions is, ironically enough, a hallmark of the <i>best</i> developers I've ever worked with.
</p>
<p>
Being lazy and dumb isn't just good career advice: <b>it's the key to running a successful software business, too</b>. As Mark Cuban points out, <a href="http://www.blogmaverick.com/entry/1234000560053369/">everyone else is just as lazy and dumb as you are</a>:
</p>
<p>
</p>
<blockquote>
It was Aaron Spelling I believe who said that "TV is the path of least resistance from complete boredom".  Which is another way of saying that it's easier to watch TV than it is to sit there and do nothing.
<p>
Which describes exactly how people make most of their choices in life. They take the easy way. <a href="http://www.codinghorror.com/blog/archives/000248.html">They take the path of least resistance</a>.
</p>
<p>
There are certain things in life we all have to do.  There are certain things in life we choose to do. Then there is everything else. The things we do to kill time. In every case, all things being equal, we choose the path of least resistance.
</p>
<p>
Understanding this concept is key to making good business decisions.
</p>
</blockquote>
<p>
In other words, the only way to build great software is to make things as easy as possible for your users.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2005-08-26T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/how-to-be-lazy-dumb-and-successful/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ The Rise of the PokerBots ]]></title>
<link>https://blog.codinghorror.com/the-rise-of-the-pokerbots/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
Computer geeks have a long history of gaming the gaming industry. One of the most notable exploits is documented in the book <a href="http://www.amazon.com/exec/obidos/ASIN/0743225708/codihorr-20">Bringing Down The House: The Inside Story of Six MIT Students Who Took Vegas for Millions</a> (read <a href="http://www.wired.com/wired/archive/10.09/vegas.html">an excerpt</a> in Wired). But things have changed now that gambling is moving to the internet in a big way. There's a fascinating article on Wired about <a href="http://www.wired.com/wired/archive/13.09/pokerbots.html?tw=wn_tophead_7">the rise of the PokerBots</a>:
</p>
<p>
</p>
<blockquote>
For years, there has been chatter among online players about the coming poker bot infestation. WinHoldEm is turning those rumors into reality, and that is a serious problem for the online gambling business. Players come online seeking a "fair" shot - a contest against other humans, not robots. But an invasion of bots implies a fixed game (even though, like their mortal counterparts, they can and do lose if their hands are bad enough or opponents good enough). So the poker sites loudly proclaim that automated play is no big deal. At the same time, they are fighting back by quietly scanning for and eliminating suspicious accounts. "We're making sure we never have bots on our site," says PartyPoker marketing director Vikrant Bhargava.
<p>
That's an impossible promise to keep, says Ray E. Bornert II, WinHoldEm's elusive creator. He's trying to flood the online world with his bot - and make a killing in the process. Bornert offers an elaborate justification for what many view as outright cheating: Online poker is already rife with computer-assisted card sharks and - thanks to him - a growing number of outright bots. Players should get wise and arm themselves with the best bot available, which is, of course, WinHoldEm.
</p>
<p>
There's a quiet knock at the door of a hotel room in Atlanta. It's Bornert. A stocky, wide-faced 43-year-old with a neat goatee and nervous manner, he's carrying a router in a plastic bag. To demonstrate his software, he insists on meeting here in private, several miles from his office. He doesn't want anyone from the poker business to know where he is. "Our guard is constantly up," he says.
</p>
<p>
For Bornert, a former evangelical student, outsmarting the poker sites is not just a mission, it's a market. A suite of WinHoldEm programs is available for download at <a href="http://www.winholdem.net">www.winholdem.net</a>. For $25, you get a bare-bones setup: run-of-the-mill poker-hand analysis software. For $200, you can buy the full package: a one-year subscription to the team edition, which includes the autoplaying bot and a card-sharing module that allows multiple players to communicate during a game. Bornert won't say how many customers he has; he'll admit only that he makes a living selling WinHoldEm.
</p>
</blockquote>
<p>
I can tell you from personal experience playing <i>free</i> multiplayer internet games that cheating has always been a serious problem. Game developers have to be vigilant and develop countermeasures early. If they don't, popular games rapidly degenerate into a morass of disheartened, unsure players and an unknown number of cheaters. Nothing psyches you out more than the idea that another player can switch to perfect, bot-like skills at will. Did they win because they were better than you, or because they cheated? There's just no way to know. It utterly destroys the game experience.
</p>
<p>
If people are that willing to cheat for literally <i>nothing</i>, with zero money at stake, <b>imagine what lengths they'll go to when real money is involved</b>.
</p>
<p>
That's why I tend to believe Mr. Bornert, a former evangelical student, when he compares WinHoldEm to civil disobedience:
</p>
<p>
</p>
<blockquote>
"The reality is that the game changed the moment it moved to the Internet," Bornert says. Bots and bot-aided collusion were inevitable. Rather than seduce anyone into thinking such things didn't exist, Bornert had another notion: Put the power in the players' hands. By democratizing computer-assisted firepower, he'd make it part of the competition. "It's like football - if you don't wear a helmet and pads, you're going to get hurt," he says. "A poker bot is your equipment." And if that is considered unethical, then so be it. "I'd rather be unethical than be a victim," he says. "This is intentional civil disobedience."
</blockquote>
<p>
Despite the protests of the online casino brass, <b>the rise of the bots is completely inevitable</b>. There's simply too much money at stake.
</p>
<p>
Out of curiosity, I checked out the winholdem support pages. This app is doing <b>true GUI screen-scraping of the poker apps</b>. That's why your poker app settings and Windows display options <a href="http://www.winholdem.net/help/help-sites.html">have to be locked down to known standards</a>.
</p>
<p>
Of course, online casinos can (and do) fight back:
</p>
<ol>
<li>Make your poker apps (these are regular .exe type apps) scan for instances of winholdem running on your local pc. Some online casinos are already doing this. There's <a href="http://www.winholdem.net/antidetect.html">a countermeasure for that, too</a>: run it on a remote computer with an application that transmits screenshots of the poker app to the remote machine.
</li>
<li>Periodically strike up a conversation with the "player." That's tougher to combat. You could possibly re-broadcast your chat messages to IM services, if you happen to be near a computer at the time. The bots should limit their play at any given table to prevent a lot of conversation. And definitely have a vast library of canned phrases to respond with-- maybe even <a href="http://www.manifestation.com/neurotoys/eliza.php3">an Eliza implementation</a>.
</li>
<li>Change the UI every hand. This is the one option that I didn't see explored in the article, but would be the hardest to combat. If the cards vary in size, color, design, and position every hand-- the scraping app is hosed.
</li>
</ol>
<p>
In the meantime, if anyone is making a killing on internet poker with their 'bot, more power to you.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2005-08-27T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/the-rise-of-the-pokerbots/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ Variable "foo" and Other Programming Oddities ]]></title>
<link>https://blog.codinghorror.com/variable-foo-and-other-programming-oddities/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>If you've ever viewed UNIX documentation, you've probably encountered variables foo and bar at some point. Here's a Ruby example I found in the newsgroups:</p>
<pre>
foo = 0
bar = 0

1.times do
  foo = 1
  foo := 2
  bar = foo+1
end

puts foo, bar
</pre>
<p><a href="https://en.wikipedia.org/wiki/Foo_Camp">O'Reilly's FooCamp</a> ostensibly means "Friends of O'Reilly" but is probably a pun on this same meaningless variable. So why "foo"?  I always thought foo and bar were corruptions of the phrase <a href="https://en.wikipedia.org/wiki/List_of_military_slang_terms#FUBAR">FUBAR</a>, but according to the jargon file, <a href="http://www.catb.org/~esr/jargon/html/F/foo.html">that's not correct</a>:</p>
<blockquote>
<p>When 'foo' is used in connection with 'bar' it has generally traced to the WWII-era Army slang acronym FUBAR ('F*cked Up Beyond All Repair' or 'F*cked Up Beyond All Recognition'), later modified to foobar. Early versions of the Jargon File interpreted this change as a post-war bowdlerization, but it it now seems more likely that FUBAR was itself a derivative of 'foo' perhaps influenced by German furchtbar (terrible)  –  'foobar' may actually have been the original form.</p>
<p>For, it seems, <b>the word 'foo' itself had an immediate prewar history in comic strips and cartoons</b>. The earliest documented uses were in the Smokey Stover comic strip published from about 1930 to about 1952. Bill Holman, the author of the strip, filled it with odd jokes and personal contrivances, including other nonsense phrases such as "Notary Sojac" and "1506 nix nix". The word "foo" frequently appeared on license plates of cars, in nonsense sayings in the background of some frames (such as "He who foos last foos best" or "Many smoke but foo men chew"), and Holman had Smokey say "Where there's foo, there's fire".</p>
</blockquote>
<p>Then there are <a href="https://en.wikipedia.org/wiki/Widget_(GUI)">GUI widgets</a>. I know the word predates computers as a generalized business school expression of "some unit of produced goods", eg, from <a href="https://en.wikipedia.org/wiki/Acme_Corporation">ACME Corporation</a>. But where did the word "widget" <a href="http://alt-usage-english.org/excerpts/fxwidget.html">come from</a>?</p>
<blockquote>
<p>"Widget" is a deliberately invented word meant (probably) to suggest "gadget".  Most dictionaries fail to trace it to its origin. <b>It comes from the 1924 play "Beggar on Horseback", by George Kaufman and Marc Connelly.</b> In the play, a young composer gets engaged to the daughter of a rich businessman, and the next part of the play acts out his nightmare of what his life will be like, doing pointless work in a bureaucratic big business.  At one point he encounters his father-in-law at work, and we get the following dialogue:</p>
<blockquote>
<p>(Father-in-law): Yes, sir!  Big business!<br><br>
Yes.  Big business.  What business are we in?<br><br>
Widgets.  We're in the widget business.<br><br>
The widget business?<br><br>
Yes, sir!  I suppose I'm the biggest manufacturer in the world of overhead and underground aerial widgets.</p>
</blockquote>
<p>Part of the point, of course, is that no one ever tells him what "widgets" are.</p>
</blockquote>
<p>A play, of all things. It certainly must have been popular in the 1920's for this weird little word to catch on; a google search reveals a bunch of hits for recent productions of Beggar on Horseback.</p>
<p>The <a href="http://en.wikipedia.org/wiki/Beagle_Bros">Beagle Brothers</a> were one of my <a href="https://blog.codinghorror.com/our-programs-are-fun-to-use/">favorite</a> Apple // software vendors. They had disks chock full of crazy little programs and demos, all written in Applesoft BASIC. In many of these apps the sentence "Pack my box with five dozen liquor jugs" appears. Just more Beagle Brothers zaniness, I thought. Years later, I realized what this phrase actually is. It's a <a href="https://en.wikipedia.org/wiki/Pangram">pangram</a>: it uses <b>all 26 letters of the alphabet in a single sentence</b>.</p>
<p>The wikipedia entry notes that pangrams are typically used in font sample apps. That's what launches in Windows when you double-click on a font in the c:windowsfonts folder. Here are a few examples:</p>
<table cellpadding="4" cellspacing="4" width="100%">
<tr>
<td>How razorback-jumping frogs can level six piqued gymnasts!</td>
<td>Mac, System 7 era</td>
</tr>
<tr>
<td>Cozy lummox gives smart squid who asks for job pen</td>
<td>Mac, post-System 7 era</td>
</tr>
<tr>
<td>The quick brown fox jumps over the lazy dog</td>
<td>Windows, truetype fonts</td>
</tr>
<tr>
<td>Pack my box with five dozen liquor jugs</td>
<td>Beagle Bros fonts</td>
</tr>
<tr>
<td>Jackdaws love my big sphinx of quartz</td>
<td>Windows, bitmap fonts</td>
</tr>
</table>
<img alt="image placeholder" >
<p>The pangram Beagle Bros chose is a great expression of their homebrew spirit: it's rather clever <em>and</em> it involves alcohol.</p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2005-08-28T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/variable-foo-and-other-programming-oddities/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ Usability vs. Learnability ]]></title>
<link>https://blog.codinghorror.com/usability-vs-learnability/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
In this <a href="http://www.useit.com/alertbox/9606.html">1996 Alertbox</a>, Jakob Nielsen champions writing for the web in an inverted pyramid style:
</p>
<p>
</p>
<blockquote>
Journalists have long adhered to the inverse approach: start the article by telling the reader the conclusion ("After long debate, the Assembly voted to increase state taxes by 10 percent"), follow by the most important supporting information, and end by giving the background. This style is known as the inverted pyramid for the simple reason that it turns the traditional pyramid style around. Inverted-pyramid writing is useful for newspapers because readers can stop at any time and will still get the most important parts of the article.
<p>
On the Web, the inverted pyramid becomes even more important since <b>we know from several user studies that users don't scroll</b>, so they will very frequently be left to read only the top part of an article. Very interested readers will scroll, and these few motivated souls will reach the foundation of the pyramid and get the full story in all its gory detail.
</p>
</blockquote>
<p>
For some reason, the idea that "content should never appear below the fold because users don't scroll" was a very widely held belief well into the millennium. I don't know what user studies Mr. Neilsen is referring to; even the ancient 1998 reference <a href="http://www.amazon.com/exec/obidos/ASIN/155860569X/codihorr-20">Web Site Usability: A Designer's Guide</a> found no evidence to support this claim:
</p>
<p>
</p>
<blockquote>
The Fidelity site, more than any other site we tested, went to great lengths to have many of its pages completely above the fold. The result is lots of pages, each with small amounts of content. There was no evidence to suggest that this strategy helped or hurt.
<p>
In fact, we never saw any user frustration with scrolling. For instance, when we counted "first clicks" -- the first place people clicked when they came to a new site --  <b>clicks were just as likely to be above the fold as they were to be below it</b>. If scrolling below the fold was a source of frustration, we would have expected to see some sort of negative correlation between first clicks below the fold and success, but we didn't.
</p>
</blockquote>
<p>
In 2003, Jakob added an addendum to his Alertbox, which reads:
</p>
<p>
</p>
<blockquote>
In 1996, I said that "users don't scroll." This was true at the time: many, if not most, users only looked at the visible part of the page and rarely scrolled below the fold. The evolution of the Web has changed this conclusion. <b>As users got more experience with scrolling pages, many of them started scrolling.</b>
</blockquote>
<p>
You should certainly try to put the most important information at the top of whatever it is you're writing, be it a website, a program, an email, a resume, etc. Believe me, I've learned this the hard way; you're lucky if they <a href="http://www.codinghorror.com/blog/archives/000114.html">read anything</a>, much less the first paragraph.
</p>
<p>
But to claim that users don't scroll is downright ridiculous, even for 1996. Let's say you had a user who didn't know how to scroll a web page. How long would it take this user, however timid they may be, to learn that they needed to scroll when browsing the web? <b>A user who can't learn to scroll within a few hours certainly won't be using the internet for very long.</b>
</p>
<p>
In Joel Spolsky's excellent <a href="http://www.amazon.com/exec/obidos/ASIN/1893115941/codihorr-20">User Interface Design for Programmers</a>, he notes <b>the difference between Usability and Learnability</b>:
</p>
<p>
</p>
<blockquote>
It takes several weeks to learn how to drive a car. For the first few hours behind the wheel, the average teenager will swerve around like crazy. They will pitch, weave, lurch, and sway. If the car has a stick shift they will stall the engine in the middle of busy intersections in a truly terrifying fashion.
<p>
If you did a usability test of cars, you would be forced to conclude that they are simply unusable.
</p>
<p>
This is a crucial distinction. When you sit somebody down in a typical usability test, you're really testing how learnable your interface is, not how usable it is. Learnability is important, but it's not everything. Learnable user interfaces may be extremely cumbersome to experienced users. If you make people walk through a fifteen-step wizard to print, people will be pleased the first time, less pleased the second time, and downright ornery by the fifth time they go through your rigamarole.
</p>
<p>
Sometimes all you care about is learnability: for example, if you expect to have only occasional users. An information kiosk at a tourist attraction is a good example; almost everybody who uses your interface will use it exactly once, so learnability is much more important than usability. But if you're creating a word processor for professional writers, well, now usability is more important.
</p>
<p>
And that's why, when you press the brakes on your car, you don't get a little dialog popping up that says "Stop now? (yes/no)."
</p>
</blockquote>
<p>
I was greatly impressed with the <a href="http://www.amazon.com/exec/obidos/ASIN/1893115941/codihorr-20">expanded book version</a> of Joel's <a href="http://www.joelonsoftware.com/uibook/fog0000000249.html">User Interface Design for Programmers page</a>. I sort of assumed that the book was a mildly enhanced reprint of the HTML, but 7 of the 18 chapters are completely new material. Based on a few quick Google searches, they really are new. And the full color printing is fantastic!
</p>
<p>
I've read a bunch of UI books, and Joel's is easily in my top three. I'll definitely be adding it to my <a href="http://www.codinghorror.com/blog/archives/000020.html">recommended developer reading list</a>.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2005-08-30T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/usability-vs-learnability/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ Don't Make Me Think, Second Edition ]]></title>
<link>https://blog.codinghorror.com/dont-make-me-think-second-edition/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
A reader recently pointed out that <a href="http://www.amazon.com/exec/obidos/ASIN/0321344758/codihorr-20">the second edition of Don't Make Me Think</a> is about to be released. I know I've pimped this book ad nauseam, but I can't help myself-- it's just that good. <b>If you only read one book on usability and UI, it should be Krug's Don't Make Me Think.</b> I even gave it to my wife to read, and she enjoyed it too. Is there any higher praise?
</p>
<p>
<a href="http://www.amazon.com/exec/obidos/ASIN/0321344758/codihorr-20"><img alt="image placeholder" >
</p>
<p>
Unfortunately, Steve Krug's website <a href="http://www.sensible.com/secondedition/index.html">doesn't have any information on what's new in this version</a>. The yellow sidebar indicates "3 new chapters", but beyond that, who knows.
</p>
<p>
I'll be getting a copy of the new version for sure. I can keep the old one at home and the new one at work, or I can surprise an unsuspecting manager or fellow developer with the first edition. Now if only I could get them to <i>read</i> it..
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2005-08-31T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/dont-make-me-think-second-edition/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ A Celebration of The Windows Key ]]></title>
<link>https://blog.codinghorror.com/a-celebration-of-the-windows-key/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>I'm sure everyone knows that the Windows key brings up the Start Menu, but there are also a bunch of standard Windows key shortcuts built into Windows:</p>
<p class="i20"><span class="kbd"><img alt="image placeholder" >
<p>Set focus to first tray icon</p>
<p class="i20"><span class="kbd"><img alt="image placeholder" >
<p>Show Desktop</p>
<p class="i20"><span class="kbd"><img alt="image placeholder" >
<p>Windows Explorer</p>
<p class="i20"><span class="kbd"><img alt="image placeholder" >
<p>Find Files or Folders (aka Search)</p>
<p class="i20"><span class="kbd"><img alt="image placeholder" >
<p>Minimize All windows</p>
<p class="i20"><span class="kbd"><img alt="image placeholder" >
<p>Undo minimize all windows</p>
<p class="i20"><span class="kbd"><img alt="image placeholder" >
<p>Run...</p>
<p class="i20"><span class="kbd"><img alt="image placeholder" >
<p>Select Task</p>
<p class="i20"><span class="kbd"><img alt="image placeholder" >
<p>System Properties</p>
<p class="i20"><span class="kbd"><img alt="image placeholder" >
<p>Windows Help</p>
<p class="i20"><span class="kbd"><img alt="image placeholder" >
<p>Lock workstation</p>
<p class="i20"><span class="kbd"><img alt="image placeholder" >
<p>Utility manager (accessibility)</p>
<p>Where the default Windows key shortcuts end, <a href="http://www.google.com/search?q=download+winkey">WinKey</a>* begins. Winkey lets you map additional Windows key shortcuts. It can't override the existing shortcuts, unfortunately, but you're free to map any key that isn't already mapped.</p>
<p>The advantage of the Windows key approach is that <strong>all of my most frequently used applications are exactly one key combination away</strong>; for example:</p>
<p class="i20"><span class="kbd"><img alt="image placeholder" >
<p>Launches <a href="http://www.codinghorror.com/blog/archives/000009.html">Notepad</a></p>
<p class="i20"><span class="kbd"><img alt="image placeholder" >
<p>Launches <a href="http://www.codinghorror.com/blog/archives/000334.html">command shell</a></p>
<p>Of course, you can go a lot further with hotkeys than just overloading the Windows key. That's where something like <a href="http://www.autohotkey.com/">AutoHotKey</a> comes in. However, I find that leveraging the built-in Windows key shortcuts, plus a handful of Windows key shortcuts I set up myself, covers 98% of my daily computer use.</p>
<p>But then there's that other 2%...</p>
<p>When I can't launch something with the Windows key, <strong>I fall back to the Start, Run (Windows+R) dialog</strong>. Run is passable, but not as helpful as it could be. Trying to perform a Start, Run, "word" won't launch Microsoft Word, for example. There are a number of third party replacements for Run that attempt to rectify that:</p>
<ul>
<li>
<a href="http://www.activewords.com/">ActiveWords</a> </li>
<li>
<a href="http://www.candylabs.com/approcket/">AppRocket</a> (written in .NET!) </li>
<li>
<a href="http://www.bayden.com/SlickRun/">SlickRun</a> </li>
<li>
<a href="http://www.dqsd.net/">Dave's Quick Search Taskbar</a> </li>
</ul>
<p>I've tried each and every one of these solutions, but nothing "stuck". I couldn't get myself out of the reflexive habit of Windows+R. Each of these apps has a nice set of additional features far beyond what the run dialog provides, but I never really used them.</p>
<p>In lieu of all these fancy solutions.. <strong>wouldn't it be nice if the Start, Run dialog was just a little bit smarter?</strong> That's when I stumbled across <a href="http://snarkhunt.blogspot.com/2005/04/dirt-cheap-macros.html">this blog post</a> describing a very clever hack:</p>
<ol>
<li>Create a folder for your shortcuts under your user folder, eg, c:documents and settingsusernameshortcuts </li>
<li>Right click My Computer, click properties. </li>
<li>Click the advanced tab. </li>
<li>Click the Environment Variables button at the bottom of the tab. </li>
<li>Under user variables, add a new variable named "Path". </li>
<li>Enter %homedrive%%homepath%shortcuts for the variable value.** </li>
<li>Create shortcuts and plop them in the shortcuts folder you created. </li>
</ol>
<p>Here's a quick snapshot that shows how to set up the per-user Path environment variable for the shortcuts folder:</p>
<p><img alt="image placeholder" >
<p>Now that I've set this up, I can type <strong>Windows+R, 2k3, Enter and Visual Studio 2003 launches!</strong> The only disadvantage-- and it's a minor one-- is that there's no autocomplete until you've typed the shortcut at least once. But for me, it's the best of both worlds: I can leverage the default Windows key accelerators and also have an unlimited number of "smart keywords" via my workhorse Run menu.</p>
<p>* Every time I see WinKey, I think of <a href="http://www.imdb.com/title/tt0093200/">Winky Dinky dog</a>. And I say it in that.. voice. I can't help myself.</p>
<p>** Here's a <a href="http://kennethhunt.com/archives/000933.html">complete list of Windows XP/2000 environment variables</a> the system can populate for you (eg, %date%). <a href="http://harvardbusinessonline.hbsp.harvard.edu/b01/en/common/item_detail.jhtml?id=502092">Gotta catch 'em all!</a></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2005-09-01T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/a-celebration-of-the-windows-key/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ Head First Design Patterns ]]></title>
<link>https://blog.codinghorror.com/head-first-design-patterns/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
I'm beginning to wonder if the book <a href="http://www.amazon.com/exec/obidos/ASIN/0596007124/codihorr-20">Head First Design Patterns</a> would be better titled <b>Ass Backwards Design Patterns</b>. Here are some quotes from pages 594 and 595 of this 629 page book:
</p>
<p>
</p>
<blockquote>
First of all, when you design, solve things in the simplest way possible. <a href="http://www.codinghorror.com/blog/archives/000111.html">Your goal should be simplicity</a>, not "how can I apply a pattern to this problem." Don't feel like you aren't a sophisticated developer if you don't use a pattern to solve a problem. Other developers will appreciate and admire the simplicity of your design. That said, sometimes the best way to keep your design simple and flexible is to use a pattern.
<p>
No one ever talks about when to remove a pattern. You'd think it was blasphemy! Nah, we're all adults here, we can take it. So when do you remove a pattern? When your system has become complex and the flexibility you planned for isn't needed. In other words, when a simpler solution without the pattern would be better.
</p>
<p>
Design patterns are powerful, and it's easy to see all kinds of ways they can be used in your current designs. Developers <a href="http://www.codinghorror.com/blog/archives/000113.html">naturally love to create beautiful architectures</a> that are ready to take on change from all directions.
</p>
<p>
Resist the temptation. If you have a practical need to support change in a design today, go ahead and employ a pattern to handle that change. However, if the reason is only hypothetical, don't add the pattern. It's only going to add complexity to your system, and you might never need it.
</p>
</blockquote>
<p>
Filling 593 pages with rah-rah pattern talk, and then tacking this critical guidance on at the end of the book is downright irresponsible. <b>This advice should be in 72 point blinking Comic Sans on the very first page.</b>
</p>
<p>
Beginning developers never met a pattern or an object they didn't like. Encouraging them to experiment with patterns is like throwing gasoline on a fire. And yet that's exactly what this book does. Page 597 outlines how therapeutic it is for beginners to abuse patterns:
</p>
<p>
</p>
<blockquote>
The beginner uses patterns everywhere. This is good. The beginner gets lots of experience with and practice using patterns. The beginner also thinks, "The more patterns I use, the better the design." The beginner will learn that this is not so, that all designs should be as simple as possible. Complexity and patterns should only be used where they are needed for practical extensibility.
</blockquote>
<p>
Do you really want a junior developer using patterns everywhere? It's about as safe as encouraging them to "experiment" with a gas-powered chainsaw. The best way to learn to write simple code is to <i>write simple code!</i> <b>Patterns, like all forms of compexity, should be avoided until they are absolutely necessary.</b> That's the first thing beginners need to learn. Not the last thing.
</p>
<p>
The book isn't the only thing that's backwards: did you know the Head First girl pictured on the front of the book <a href="http://fishbowl.pastiche.org/2005/08/12/the_head_first_girls_double_life">leads a shocking double life?</a> That's right, <a href="http://www.imdb.com/title/tt0086896/">student by day, stripper by night</a>. Ok, maybe not ...
</p>
<p>
<a href="http://www.amazon.com/exec/obidos/ASIN/0596007124/codihorr-20"><img alt="image placeholder" >
 
<a href="http://www.vagisil.com/teencenter.shtml"><img alt="image placeholder" >
</p>
<p>
... but shocking nonetheless. Perhaps they're referring to the <a href="http://en.wikipedia.org/wiki/Code_smell">code smell</a> of overcomplicated "explosion at the pattern factory" code this book encourages?
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2005-09-05T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/head-first-design-patterns/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ Managed Code Analysis Tools ]]></title>
<link>https://blog.codinghorror.com/managed-code-analysis-tools/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
Navigating a new codebase can feel like like landing on an alien planet. That's where <a href="http://en.wikipedia.org/wiki/Static_code_analysis">static code analysis</a> tools come in handy; they're akin to <a href="http://en.wikipedia.org/wiki/Tricorder">software tricorders</a>. They provide a general snapshot of unfamiliar code: Is it normal? Is it unusual? Is it dangerous?*
</p>
<p>
<img alt="image placeholder" >
</p>
<p>
There's an element of "correctness" associated with static code analysis, but I think this should be de-emphasized. <b>The last thing developers want is a Code Nazi peering over their shoulder.</b> I prefer to think of these tools as software tricorders, collecting a bunch of recommendations and metrics about our code. What we choose to do with that data is up to us.
</p>
<p>
The most famous static code analysis tool for .NET is, of course, <a href="http://www.gotdotnet.com/team/fxcop/">Microsoft's FxCop</a>. If you haven't tried FxCop in a while, I recommend running the latest version across one of your compiled assemblies. You'd be surprised how helpful it is, particularly for identifying unused variables and functions. You may also be surprised how annoying some of the rules are; that's why the entire list of rules can be selectively enabled or disabled and saved as profiles. You can even write your own custom FxCop rules-- how about <a href="http://msdn.microsoft.com/msdnmag/issues/04/06/Bugslayer/default.aspx">a custom rule that requires XML documentation for each assembly</a>, as illustrated in this June 2004 MSDN article?
</p>
<p>
FxCop is currently a standalone .exe in an informal GotDotNet workspace, but in Visual Studio 2005, it's an integrated part of the build process. You can enable output from the console version of FxCop by ticking the checkbox on the Code Analysis tab of the project properties. Any FxCop warnings or errors then show up as you would expect in the standard Task List tab.**
</p>
<p>
There's at least one commercial tool that also does .NET static code analysis, namely <a href="http://www.fmsinc.com/dotnet/analyzer/index.asp">FMS Total .NET Analyzer</a>. I tried the evaluation version which is limited to identifying only one issue for each category. It's nice enough, but it also seems to overlap quite a bit with FxCop. And it's pricey.
</p>
<p>
In addition to those well-known tools, <a href="http://codebetter.com/blogs/raymond.lewallen/archive/2005/06/13/64539.aspx">Raymond Lewallen</a> and <a href="http://www.robincurry.org/blog/CodeMetricsAndCodeMetricsTools.aspx">Robin Curry</a> found some additional lesser known managed code analysis tools:
</p>
<p>
</p>
<ul>
<li>
<a href="http://www.testingreflections.com/node/view/1158?PHPSESSID=85bbd7bc0f621cbfa9f5e8612a75b4b5">Reflector.CodeMetrics</a> (an add-in for the essential <a href="http://www.aisto.com/roeder/dotnet/">Reflector</a>)
</li>
<li>
<a href="http://www.anticipatingminds.com/Content/products/devMetrics/devMetrics.aspx">DevMetrics</a> ($)
</li>
<li>
<a href="http://smacchia.chez.tiscali.fr/NDepend.html">NDepend</a>
</li>
<li>
<a href="http://www.knowdotnet.com/articles/complexityanalyzer.html">Complexity Analyzer</a> ($)
</li>
<li>
<a href="http://www.serviceframework.com/jwss/utility,ccmetrics,utility.aspx">CCMetrics</a>
</li>
<li>
<a href="https://sourceforge.net/projects/crplugin/">CRPlugin</a> (plugin for <a href="http://www.devexpress.com/Downloads/NET/DXCore/">DxCore</a>)
</li>
<li>
<a href="http://www.campwoodsw.com/sm20.html">Source Monitor</a>
</li>
<li>
<a href="http://www.1bot.com/">vil</a>
</li>
</ul>
<p>
I've heard good things about NDepends in particular, but I haven't had a chance to check it out yet.
</p>
<p>
* Don't bother if you're wearing a red shirt. In classic Trek fashion, you may not be around long enough to care.<br>
** at least in VS.NET 2005 beta 2, you can.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2005-09-06T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/managed-code-analysis-tools/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ The Problem With Configurability ]]></title>
<link>https://blog.codinghorror.com/the-problem-with-configurability/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
I've recently been experimenting with a <a href="http://www.hanselman.com/blog/ScottHanselmans2005UltimateDeveloperAndPowerUsersToolList.aspx">few hand-picked desktop utilities</a>, but I am rapidly reaching the point of diminishing returns: the effort required to run and maintain all these utilities is greater than the productivity benefit.
</p>
<p>
Furthermore, if I learn to rely on a highly custom desktop, <b>I've crippled my ability to work on a stock Windows XP or Win2k3 box</b>. I can certainly bring my favorite apps with me <a href="http://www.codinghorror.com/blog/archives/000251.html">on a USB key</a>, but I also have to spend time setting them up on each box I touch. Is it worth it?
</p>
<p>
Configurability is mixed blessing, even for developers. You can completely customize your VS.NET 2003 environment, including setting all the keymappings to a compatibility mode. But have you ever tried to work on someone else's "customized" Visual Studio? I do this occasionally when we're hashing out quick solutions to problems, and if VS.NET is highly customized on that developer's machine, I can't get any work done. None of the <a href="http://www.codinghorror.com/blog/archives/000315.html">standard shortcuts</a> do anything recognizable. We can't work on the problem together at all. At least not on that machine.
</p>
<p>
Joel explored a similar topic in chapter 3 of <a href="http://www.amazon.com/exec/obidos/ASIN/1893115941/codihorr-20">his UI book</a> when he asked: <a href="http://www.joelonsoftware.com/uibook/chapters/fog0000000059.html">is customization worth it?</a>
</p>
<p>
</p>
<blockquote>
The trouble was, I don't use one computer. I use all kinds of computers. I use other people's computers. I use three computers fairly regularly at home and three at work. I use computers in the test lab at work. The trouble with customizing your environment is that it just doesn't propagate, so it's not even worth the trouble.
<p>
Most advanced users use several computers regularly; they upgrade their computer every couple of years, they reinstall their operating system every three weeks. It's true that the first time they realized you could completely remap the keyboard in Word, they changed everything around to be more to their liking, but as soon as they upgraded to Windows 95 those settings got lost, and they weren't the same at work, and eventually they just stopped reconfiguring things. <b>I've asked a lot of my "power user" friends about this; hardly any of them do any customization other than the bare minimum necessary to make their system behave reasonably.</b>
</p>
</blockquote>
<p>
If customization is a mixed bag for advanced users like us, that can't bode well for average users:
</p>
<p>
</p>
<blockquote>
Every time you provide an option, you're asking the user to make a decision. That means they will have to think about something and decide about it. It's not necessarily a bad thing, but, in general, you should always try to minimize the number of decisions that people have to make.
</blockquote>
<p>
In other words, <a href="http://www.codinghorror.com/blog/archives/000377.html">don't make users think</a>. Or at least <b>don't make them think about anything outside the narrow focus of their immediate goal</b>. Furthermore, making everything configurable really means <a href="http://usability.typepad.com/confusability/2004/09/the_problems_wi.html">the designer isn't doing his job</a>. This is something Jakob Nielsen points out in his introduction to the book <a href="http://www.amazon.com/exec/obidos/ASIN/0133033899/codihorr-20%0A">Designing Visual Interfaces</a>:
</p>
<p>
</p>
<blockquote>
In the bedroom wall example, people might buy the house anyway and then paint over the wall with a more agreeable color. This example leads me to consider an excuse some developers have for not providing a satisfactory visual interface to their products: "the user can just customize the design to his or her individual taste!" <b>Leaving the design to the users is the ultimate abdication of the designer's responsibility to provide a quality product</b>, and many studies have shown that users are in fact very poor designers and often customize their interface in ways that are detrimental to their productivity (eg, by using <a href="http://www.codinghorror.com/blog/archives/000340.html">color combinations that are known to cause reduced readability of screen text</a>). Even though there are often reasons to allow users to customize some aspects of their environment, <b>it is absolutely essential for the designer to give the users a carefully thought out set of defaults to start with.</b> Also, users will be much more likely to end up with appropriate customized design if they are given some pre-specified (and well-designed) options to choose from as done, for example, in the <a href="http://www.smartcomputing.com/editorial/dictionary/detail.asp?searchtype=2&amp;DicID=18470&amp;RefType=Encyclopedia&amp;guid=">Pantone ColorUp</a> set of recommended color combinations for presentation slides.
</blockquote>
<p>
There's an interesting extension of this philosophy in <a href="http://www.onlamp.com/pub/a/onlamp/2005/01/20/rails.html">Ruby on Rails</a> called <b>convention over configuration</b>:
</p>
<p>
</p>
<blockquote>
Convention over configuration means an end to verbose XML configuration files--there aren't any in Rails! Instead of configuration files, a Rails application uses a few simple programming conventions that allow it to figure out everything through reflection and discovery. Your application code and your running database already contain everything that Rails needs to know!
</blockquote>
<p>
You might come out ahead by <b>intentionally choosing to make things not configurable</b>:
</p>
<ol>
<li>It forces you to carefully select good default values
</li>
<li>It forces you to pick a strategy and run with it rather than hedging your bets and trying to satisfy everyone
</li>
<li>It's one less thing for the user to think about when using your software
</li>
</ol>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2005-09-07T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/the-problem-with-configurability/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ The Spolsky-Babbitt Connection ]]></title>
<link>https://blog.codinghorror.com/the-spolsky-babbitt-connection/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
I noticed something strange in a Windows ME screenshot embedded in a <a href="http://www.joelonsoftware.com/uibook/chapters/fog0000000059.html">Joel Spolsky article I linked yesterday</a>:
</p>
<p>
<img alt="image placeholder" >
</p>
<p>
Notice the Qantas icons? Those are shortcuts to a now-defunct unix machine at Joel's company, Fog Creek Software. You can find evidence of it at the bottom of <a href="http://discuss.fogcreek.com/joelonsoftware/default.asp?cmd=show&amp;ixPost=4951">this forum post</a> (search for qantas). It's also shown in some of the screenshots that depict command line interfaces in <a href="http://www.amazon.com/exec/obidos/ASIN/1893115941/codihorr-20">Joel's UI book</a>.
</p>
<p>
So Qantas is an <a href="http://www.qantas.com.au/">Australian airline company</a>, and the name of a UNIX machine. That's when it clicked: the whole thing is a pun on a Raymond Babbitt, aka <a href="http://www.imdb.com/title/tt0095953/quotes">Rain Man</a>, quote:
</p>
<p>
<img alt="image placeholder" >
</p>
<blockquote>
<b>Charlie:</b> Ray, all airlines have crashed at one time or another, that doesn't mean that they are not safe. <br>
<br>
<b>Raymond:</b> QANTAS. QANTAS never crashed. <br>
<br>
<b>Charlie:</b> QANTAS? <br>
<br>
<b>Raymond:</b> Never crashed. <br>
<br>
<b>Charlie:</b> Oh that's gonna do me a lot of good because QANTAS doesn't fly to Los Angeles out of Cincinnati, you have to get to Melbourne! Melbourne, Australia in order to get the plane that flies to Los Angeles!
</blockquote>
<p>
Pretty funny, Joel.
</p>
<p>
Even if I don't always agree with him, the guy has got to be fun to work with.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2005-09-08T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/the-spolsky-babbitt-connection/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ Speeding up web browsing ]]></title>
<link>https://blog.codinghorror.com/speeding-up-web-browsing/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
In order to speed up my web browsing experience, <b>I disable Flash in Internet Explorer</b>. I've got nothing personal against Flash, mind you, but it's generally chrome. It's visually (and sometimes audibly) distracting, and it adds download time to each page view.
</p>
<p>
<img alt="image placeholder" >
</p>
<p>
An image is worth a thousand words, but for completeness, here's the step-by-step:
</p>
<p>
</p>
<ol>
<li>Select the Tools, Manage Add-Ons menu
</li>
<li>The dialog defaults to add-ons currently loaded. Look for "Shockwave Flash object" and "Shockwave ActiveX Control" from publisher "Macromedia, Inc". If these aren't visible, choose "Add-ons that have been used by Internet Explorer" from the dropdown menu. Sort the list by Publisher and look for Macromedia.
</li>
<li>Click each add-on, then click the Disable option button.
</li>
<li>Click the OK button. Upon exiting the dialog, it will warn you that you need to restart IE, but this isn't the case. The current page will simply refresh and the flash movies will be either gone entirely or replaced with GIFs.
</li>
</ol>
<p>
Flash is also the source of <a href="http://fusion94.org/archives/2005/07/firefox_memory.html">a giant memory leak in Firefox</a>, so it's probably a good thing to disable there as well. <b>I rarely need to see Flash movies as part of my normal web browsing</b>, but if I do, I just reverse the above steps. I'm sure there's some fancy Firefox conditional display mod (eg, click to display the flash movie) out there, too. Some quick Google searching confirms that <a href="http://flashblock.mozdev.org/">indeed there is</a>. Go figure.
</p>
<p>
I'm also experimenting with using a <a href="http://www.mvps.org/winhelp2002/hosts.htm">custom HOSTS file that blocks ad domains</a>. I'm not anti advertising so much as I am pro speed. And the fastest downloads of all are the ones you don't have to do!
</p>
<p>
So <a href="http://en.wikipedia.org/wiki/Hosts_file">what's the HOSTS file</a>?
</p>
<p>
</p>
<blockquote><i>
In computing, a host file, stored on the computer's filesystem, is used to look up the Internet Protocol address of a device connected to a computer network. The host file describes a many-to-one mapping of device names to IP addresses. When accessing a device by name, the networking system will attempt to locate the name within the host file if it exists. Typically, <b>this is used as a first means of locating the address of a system, before accessing the Internet domain name system</b>. The reason for this is that the host file is stored on the computer itself and does not require any network access to be used, whereas DNS requires access to an external system, which is typically slower.
</i></blockquote>
<p>
What we're doing is redirecting a bunch of ad-specific domain names to the loopback 127.0.0.1 IP. That way, when your browser tries to download an advertising image from, say, m.doubleclick.net, it returns in under a millisecond with a 404 "file not found" error. Compare that to the time it would take to perform an actual download of a 20-50kb flash or GIF advertising file from a remote website. It's a substantial speed boost!
</p>
<p>
I'm not aware of any negative effects of blocking ad domains this way, but I encourage you to <a href="http://www.mvps.org/winhelp2002/hosts.htm">visit the hosting page for details</a>. For convenience's sake, here's a <a href="http://www.mvps.org/winhelp2002/hosts.zip">direct link to the zipped HOSTS file</a> from the mvps site. Make a backup of your c:windowssystem32driversetchosts file, then overwrite it with the ad-blocking version contained in that zip file.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2005-09-09T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/speeding-up-web-browsing/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ Stupid Registry Tricks ]]></title>
<link>https://blog.codinghorror.com/stupid-registry-tricks/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
Scott Hanselman's <a href="http://www.hanselman.com/blog/CommentView,guid,e4786810-658a-4079-8723-05fad6b1c721.aspx">Power User Windows Registry Tweaks</a> has some excellent registry editing tweaks. I've spent the last few hours poring over those registry scripts, enhancing and combining them with some favorites of my own. Here are the results:
</p>
<p>
<img alt="image placeholder" >
</p>
<ul>
<li>
<a href="http://www.codinghorror.com/blog/files/OpenCommandWindowHere.zip">Open Command Window Here</a><br><br>
Adds a right-click menu to all Explorer folders that launches a command prompt window (cmd.exe) at that folder. Incredibly handy.
<p>
</p>
</li>
<li>
<a href="http://www.codinghorror.com/blog/files/SearchUnknownExtensionsForXP.zip">Force Start, Search to search all filetypes</a><br><br>
For some godforsaken reason, Start, Search <a href="http://www.geekrant.org/2004/11/22/windows-xp-search">only searches files with known extension associations</a> by default. I've run into this "feature" before and I nearly pulled my hair out trying to figure out why it couldn't find the source file that I knew was there. This registry fix forces it to search all files, as you would expect. Really a no-brainer.
<p>
</p>
</li>
<li>
<a href="http://www.codinghorror.com/blog/files/ImproveDiskCleanup.zip">Improve the Disk Cleanup Wizard</a><br><br>
Microsoft added a <a href="http://www.dummies.com/WileyCDA/DummiesArticle/id-2633,subcat-OS.html">Disk Cleanup wizard</a> in Windows 98, which all subsequent versions have inherited. It's located at Start, Accessories, System Tools, Disk Cleanup. Unfortunately it kinda sucks. Via the <a href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/shellcc/platform/shell/programmersguide/shell_int/shell_int_extending/disk_cleanup.asp">wonders of registry editing</a>, you can change this annoying, useless tool into something that's actually <i>effective</i>:
<p>
</p>
<ul>
<li>Remove the time-consuming, useless "compress old files" rule
</li>
<li>Make rules stricter for files in the temporary folder
</li>
<li>Add rule to check entire disk for temporary files
</li>
<li>Add rule to remove unnecessary files in Windows folder
</li>
<li>Add rule to remove debug dump files
</li>
</ul>
</li>
</ul>
<p>
With these changes, I get a first run Disk Cleanup savings of ~11 megabytes on a clean Windows XP install in a VM. Nothing refreshes like giving the Windows <a href="http://www.imdb.com/title/tt0118655/quotes">undercarriage a little how's your father</a>. If you can think of any other files in a typical Windows install that are completely safe to remove*, let me know, and I can modify the .reg file to incorporate them as well.
</p>
<p>
This should probably go without saying, but we are deleting stuff here. Use this at your own risk. For what it's worth, I have used it on several of my machines and inside a VM with excellent results.
</p>
<p>
</p>
<li>
<a href="http://www.codinghorror.com/blog/files/AddMyComputerRightClickMenus.zip">My Computer right-click menu additions</a><br><br>
Wouldn't it be cool if you could right click My Computer and bring up the registry editor? Or the service manager? Or Add/Remove Programs? With this registry editing batch file, you can. In fact, you can add as many commands to the My Computer right-click menu as you like. Once you try it, you'll wonder why these menu options (see screenshot) aren't there to begin with.
<p>
I changed this script from a plain .reg file to a batch file that calls the REG.EXE command. Why? Because it's far easier to modify this script to taste when you can see the actual right-click command lines as a plain string. For some reason, <a href="http://www.pcreview.co.uk/forums/thread-1712916.php">regedit can only import/export the REG_EXPAND_SZ key as a byte array</a>, even though it's just a basic string with an environment variable in it (eg, %windir%). The alternative is to eschew the use of environment variables entirely and hard-code the windows and folder paths as plain REG_SZ strings.
</p>
</li>
<p>
In the cases where there are a number of modifications to the registry, I also included a copy of the unmodified registry key in the zip file. If you don't like the results, delete the key and re-import the default registry file to get back to square one.
</p>
<p>
Scott's <a href="http://www.hanselman.com/blog/CommentView,guid,e4786810-658a-4079-8723-05fad6b1c721.aspx">post</a> has some additional registry tweaks, including one that puts notepad.exe on every right click menu. I prefer to do this using the <b>built in Send To functionality</b>: just put a shortcut to the editor of your choice in the %USERPROFILE%SendTo folder and it will automatically appear in the right-click Send To list for all files. I suppose it is one more click, but I prefer it this way.
</p>
<p>
* insert LINUX joke here.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2005-09-11T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/stupid-registry-tricks/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ PDC05: I'm only there for the chicks. ]]></title>
<link>https://blog.codinghorror.com/pdc05-im-only-there-for-the-chicks/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
Courtesy of <a href="http://www.vertigosoftware.com/">my employer</a>, I have the privilege of attending <a href="http://msdn.microsoft.com/events/pdc/">this year's Professional Developers Conference</a>.
</p>
<p>
<img alt="image placeholder" >
</p>
<p>
I've been to a few trade shows, but <b>this is the first technical conference I've ever attended</b>. I arrive Monday night, and I'm definitely looking forward to it. Particularly since the watershed release of VS.NET 2005 and SQL Server 2005 is literally right around the corner. And this is the <a href="http://www.codinghorror.com/blog/archives/000071.html">magical third version</a> of a Microsoft product -- heady times indeed!
</p>
<p>
In addition to the precipitous timing, this year's PDC is doubly sweet because Jim Allchin's <a href="http://msdn.microsoft.com/events/pdc/agenda/agenda/">Tuesday keynote</a> will cover something we've been working on here at Vertigo!
</p>
<p>
Aw, who am I kidding. <b>I'm only there for the chicks</b>. Or <a href="http://weblogs.asp.net/alex_papadimoulis/archive/2005/04/22/403889.aspx">the guys named Steve</a>. Or <a href="http://www.devsource.ziffdavis.com/article2/0,1759,1572759,00.asp">Brian</a>.
</p>
<p>
I'm selecting sessions solely based on blogs I enjoy with no regard whatsoever for topic. I was surprised how few names in the <a href="http://commnet1.microsoftpdc.com/default.aspx">session list</a> I actually recognized; I guess I expected every presenter to be a blogger. But it does mean that I'll be seeing you, <a href="http://www.panopticoncentral.net/">Panopticon Central</a>, and you, <a href="http://blogs.msdn.com/virtual_pc_guy/">Virtual PC Guy</a>, and you, <a href="http://blogs.msdn.com/ricom/">Mr. Performance Tidbits</a>. And perhaps I'll cap it all off with <a href="http://www.sellsbrothers.com/">the brothers Sells</a>. I've also been told that <a href="http://themicrosoftexperience.com/default.htm">The Microsoft Experience</a> is not to be missed, so I'll be there too.
</p>
<p>
If anyone's looking for me at the PDC, just keep an eye out for a mildly overweight middle-aged white guy wearing glasses. I'll try to wear my .NET polo shirt so I really stand out.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2005-09-12T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/pdc05-im-only-there-for-the-chicks/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ The Six Dumbest Ideas in Computer Security ]]></title>
<link>https://blog.codinghorror.com/the-six-dumbest-ideas-in-computer-security/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
Marcus Ranum, the <a href="http://www.ranum.com/stock_content/about.html">inventor of the proxy firewall</a>, brilliantly condenses why many security efforts are doomed from the start: they fall prey to the <a href="http://www.ranum.com/security/computer_security/editorials/dumb/">The Six Dumbest Ideas in Computer Security</a> :
</p>
<p>
</p>
<ol>
<li>
<b>Default Permit</b><br>
Also known as "on by default". This one is huge, and it alone is why the phrase "Windows security" was such an oxymoron for so long. The good news is that Microsoft's new policy of <a href="http://www.windowsitpro.com/SQLServer/Article/ArticleID/42145/42145.html">"off by default"</a> that kicked off with Windows Server 2003 is <a href="http://blogs.technet.com/robert_hensing/archive/2005/02/17/375481.aspx">really working</a>.
</li>
<li>
<b>Enumerating Badness</b><br>
This is why <a href="http://www.paulgraham.com/falsepositives.html">blacklists are, and always will be, a bad idea</a>. They're OK in helper roles for spot fixes, but as a primary means of defense, they are fatally flawed.
</li>
<li>
<b>Penetrate and Patch</b><br>
Security starts from the inside, not the outside. No amount of patching will fix a fundamentally bad security design. Should you be patching-- or rearchitecting?
</li>
<li>
<b>Hacking is Cool</b><br>
It is interesting that society considers spammers "sleazy con artists" yet hackers are <a href="http://www.tvofyourlife.com/whizkids.htm">"whiz kids"</a>. I think it has a lot to do with the financial motivations behind the crime. Maybe as hacking becomes more strongly associated with flat-out stealing, this will change.
</li>
<li>
<b>Educating Users</b><br>
A security system that fails to assume users are fallible and weak by default is destined to fail spectacularly. Education, at least when used as security spackle, doesn't work.
</li>
<li>
<b>Action is Better than Inaction</b><br>
You can always recognize the pioneers from all the arrows in their backs. Progress is good, but careful progress is even better. Always do your homework before jumping on any bandwagon.
</li>
</ol>
<p>
That's the <a href="http://en.wikipedia.org/wiki/Reader's_Digest">condensed Reader's Digest version</a>, but I highly recommend reading <a href="http://www.ranum.com/security/computer_security/editorials/dumb/">the rest of the article</a>.
</p>
<p>
While we're on the topic of security, TristanK has <a href="http://blogs.technet.com/tristank/archive/2005/09/07/owapublishing.aspx">an interesting rant on keyloggers</a>. I think it's a myth that you can protect yourself from the client PC anyway-- the client is always suspect.  That is, until client PCs start looking a lot more like Xbox 360, where you have to solder a modchip on the motherboard to run custom software.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2005-09-13T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/the-six-dumbest-ideas-in-computer-security/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ Is UI still in the stone age? ]]></title>
<link>https://blog.codinghorror.com/is-ui-still-in-the-stone-age/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
<a href="http://juicability.blogspot.com/2005/09/top-8-reasons-hci-is-in-its-stone-age.html">The Top 8 reasons user interface design is in the stone age</a> is more of a rant than a reasoned argument, but it's still worth reading. If UI design is in the stone age, why are there at least two sites which document known UI patterns?
</p>
<p>
</p>
<ol>
<li>
<a href="http://time-tripper.com/uipatterns/index.php">UI Patterns and Techniques</a> (soon to be a book)
</li>
<li>
<a href="http://www.welie.com/patterns/gui/index.html">Web/Gui/Mobile Design patterns</a>
</li>
</ol>
<p>
I think we've come a long way from <a href="http://www.codinghorror.com/blog/archives/000171.html">the stone age</a>-- particularly after sitting through some very impressive demos of <a href="http://www.microsoft.com/presspass/events/pdc/gallery.mspx">the Windows Vista and Office 12 UIs</a> at PDC 2005 today. But it's true that there's still much to be done.
</p>
<p>
I was struck by <b>how aggressively Microsoft has folded web metaphors into Vista and Office</b>-- things like the forward and back buttons, focusing on a single task per page, and the ubiquitous search box. I've <a href="http://www.codinghorror.com/blog/archives/000089.html">talked about this before</a>, and I'm glad to see Microsoft leading the way.
</p>
<p>
Speaking of Vista, <a href="http://miksovsky.blogs.com/flowstate/">Flowstate</a> is a great UI blog from an ex-UI architect for Windows Vista. Prior to Vista, he worked on Money-- one of the first <a href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/dnforms/html/winforms07202004.asp">inductive user interfaces</a>. Subscribed!
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2005-09-14T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/is-ui-still-in-the-stone-age/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ The Positive Impact of Negative Thinking ]]></title>
<link>https://blog.codinghorror.com/the-positive-impact-of-negative-thinking/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
In <a href="http://www.amazon.com/exec/obidos/ASIN/0932633609/codihorr-20">Waltzing with Bears: Managing Risk on Software Projects</a>, DeMarco and Lister outline the dangers of penalizing negative thinking:
</p>
<p>
</p>
<blockquote>
<i>
Once you've identified and quantified these risks, they can be managed just like the others. But getting them out on the table can be a problem. <b>The culture of our organizations sometimes makes it impossible to talk about a really worrisome risk.</b> We are like a primitive tribe that tries to hold the devil at bay by refusing to say his name.
</i><p>
Why didn't [technicians present at the <a href="http://en.wikipedia.org/wiki/Space_Shuttle_Challenger">1986 Challenger launch</a>] speak up [about the known risks of launching the shuttle in subzero weather conditions]? Their reasons were the same ones that stop people from articulating risks at companies everywhere. They take the form of unwritten rules, built into the corporate culture:
</p>
<ol>
<li>Don't be a negative thinker.
</li>
<li>Don't raise a problem unless you have a solution for it.
</li>
<li>Don't say something is a problem unless you can prove it is.
</li>
<li>Don't be the spoiler.
</li>
<li>Don't articulate a problem unless you want its immediate solution to become your responsibility
</li>
</ol>
<p>
Healthy cultures attach great value to the concept of a team. Being judged a "team player" is enormously important, and not being one can be fatal to a career. <b>Articulating a risk shouldn't be seen as anti-team, but it often is.</b> These unwritten rules are not very discriminating; they don't make much distinction between speaking up responsibility and whining. And because they rules are never openly discussed, they never get adjusted for changing circumstances.
</p>
<p>
We are all enjoined to adopt a can-do mentality in our work. And there's the rub. Saying the risk is an exercise in can't-do. Risk discovery is profoundly at odds with this fundamental aspect of our organizations.
</p>
</blockquote>
<p>
Waltzing with Bears is very clear on this point: <b>the biggest risk on any software project is the risks you haven't considered</b>. You can't know the unknown, of course, but you'll do a lot better at risk management if you encourage a culture of responsible risk assessment instead of <a href="http://www.codinghorror.com/blog/archives/000284.html">mindless can-do heroics</a>.
</p>
<p>
Personally, I love it when developers come to me with potential problems in our applications. Far from being negative, this has all kinds of positive implications:
</p>
<ul>
<li>Deep knowledge of the application. The developer knows enough about the entire app to feel confident there's a problem.
</li>
<li>Concern for quality of workmanship. A less concerned developer would shrug this off as "not their problem". They get paid either way, right?
</li>
<li>Team player. If a developer is bringing up problems in a proactive way, that means they also (consciously or not) understand why it's important for the entire team to not fall prey to the <a href="http://www.codinghorror.com/blog/archives/000326.html">Broken Window</a> syndrome.
</li>
</ul>
<p>
The only way to truly manage risk on a software development project is to <b>solicit input from every team member on what could go wrong-- not only at the start of the project but also throughout its lifecycle</b>. If you do, you'll have a far more predictable development schedule. And a much better product.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2005-09-15T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/the-positive-impact-of-negative-thinking/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ Moire Screensaver Source ]]></title>
<link>https://blog.codinghorror.com/moire-screensaver-source/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
I'm not a big screensaver enthusiast per se, but one of my all time favorite screensavers is definitely <a href="http://www.realtimesoft.com/multimon/products.asp#ScreenSavers">Moire from the DirectX 8.1 SDK</a>. It's simple yet visually striking, and <b>it works seamlessly on multiple monitors</b>. It's also hardware accelerated on each monitor without requiring a lot of video card horsepower or CPU time.
</p>
<p>
<img alt="image placeholder" >
</p>
<p>
One thing that always bugged me about Moire, though, was that <b>it chose the same colors over and over</b>. Every time it ran, it would cycle through the same exact color sequences, in the same order.
</p>
<p>
Well, after digging around (a lot) to find the DX 8.1 SDK that this sample is specific to, I came up with the C++ source for Moire. With the assistance of a coworker more versed in C++ than I, we managed to bundle Moire into a VS.NET 2003 C++ solution. Then I was able to hack in a <b>more sophisticated random color algorithm</b> with my completely negligible C++ coding skillz.
</p>
<p>
This solution compiles fine on any machine with VS.NET 2003 installed; no DirectX SDK is required. I've attached both the original, unmodified Moire from the SDK and our modified random color version. And if you don't feel like hacking on the source code, I put a binary up as well.
</p>
<p>
</p>
<ul>
<li>
<a href="http://www.codinghorror.com/blog/files/Moire.zip">Moire screensaver</a> binary (173kb)
</li>
<li>
<a href="http://www.codinghorror.com/blog/files/Moire_vsnet2003_solution.zip">Original Moire VS.NET 2003 C++ solution</a> (70kb)
</li>
<li>
<a href="http://www.codinghorror.com/blog/files/Moire_vsnet2003_solution_randomcolors.zip">Modified Moire VS.NET 2003 C++ solution</a> (71kb)
</li>
</ul>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2005-09-19T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/moire-screensaver-source/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ When Email Goes Bad ]]></title>
<link>https://blog.codinghorror.com/when-email-goes-bad/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
It's easy to fire off an email with barely any effort at all. And that's exactly how much effort goes into most emails: none. Ole Eichhorn's <a href="http://www.w-uh.com/articles/030308-tyranny_of_email.html">Tyranny of Email</a> offers a succinct set of guidelines to avoid thoughtless email abuse:
</p>
<p>
</p>
<blockquote>
<ol>
<li>Never criticize anyone in email. Avoid technical debates.  Use face-to-face meetings or phone calls instead.
</li>
<li>Be judicious in who you send email to, and who you copy on emails.
</li>
<li>Observing some formality is important.
</li>
<li>Don't hesitate to review and revise important emails.
</li>
<li>Remember that email is a public and permanent record.
</li>
</ol>
</blockquote>
<p>
Ole published another article, <a href="http://www.w-uh.com/articles/030316-tyranny_revisited.html">Tyranny Revisited</a>, with some commentary on the response to his original article.
</p>
<p>
43 folders recently published a great article on <a href="http://www.43folders.com/2005/09/writing_sensibl.html">writing sensible email messages</a>:
</p>
<p>
</p>
<blockquote>
<ol>
<li>Understand why you're writing: what's the goal?
</li>
<li>Assume no one will read more than the first two sentences of your email.
</li>
<li>Write a great subject line.
</li>
<li>Fit it on one screen with no scrolling.
</li>
<li>Ask for what you want.
</li>
</ol>
</blockquote>
<p>
Similar rules apply to instant messaging, telephone, and even face-to-face conversations. The key difference is the amount of effort required for each communication method: the easier it is, the more you need to consider before doing it.
</p>
<p>
Of course, the real art is knowing when to escalate from IM to email, from email to face-to-face, and when to drop the ultimate communication A-bomb: <b>calling a meeting</b>.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2005-09-20T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/when-email-goes-bad/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ Everything you always wanted to know about Task Manager but were afraid to ask ]]></title>
<link>https://blog.codinghorror.com/everything-you-always-wanted-to-know-about-task-manager-but-were-afraid-to-ask/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><style type="text/css">
.kbd {font-family:arial,helvetica,sans-serif;padding:5px 3px;white-space:nowrap;color:#000;background:#eee;border-width:2px 4px 5px 3px;border-style:solid;border-color:#ccc #aaa #888 #bbb;}
.i20{margin:15px 30px;}
</style>
<p>
Does anyone remember the <b>Task List</b> from early versions of Windows?
</p>
<p>
<img alt="image placeholder" >
</p>
<p>
From those humble beginnings comes my all time favorite windows applet, the venerable <a href="http://www.microsoft.com/resources/documentation/windows/xp/all/proddocs/en-us/taskman_whats_there_w.mspx">Task Manager</a>. Task Manager was introduced with <a href="http://en.wikipedia.org/wiki/Windows_NT">Windows NT 4.0</a>, and although it has changed little in the intervening nine years, it hasn't needed to. Unlike virtually every other Windows OS applet of similar vintage** <b>I still use it every day</b>. That's a testament to how well Task Manager was originally designed.
</p>
<p>
<img alt="image placeholder" >
</p>
<p>
There are a few different ways to launch Task Manager:
</p>
<p>
</p>
<ol>
<li>If you're lazy:
<p>
<img alt="image placeholder" >
</p>
</li>
<li>If you're a contortionist:
<p class="i20">
<span class="kbd">Shift</span> + <span class="kbd">Ctrl</span> + <span class="kbd">Esc</span>
</p>
</li>
<li>If you love modal dialogs:
<p class="i20">
<span class="kbd">Ctrl</span> + <span class="kbd">Alt</span> + <span class="kbd">Del</span>, then click <img alt="image placeholder" > key.
</p>
</li>
<li>If you're a <a href="http://www.realultimatepower.net/index4.htm">ninja</a> keyboard user:
<p class="i20">
<span class="kbd"><img alt="image placeholder" >
</p>
</li>
</ol>
<p>
Task Manager has a tabbed interface, and there are a few rules applicable to all tabs:
</p>
<ul>
<li>Double-clicking the body of the tab area causes the tab to "expand" to cover the entire dialog area. This is particularly useful on the tabs with graphs (Networking and Performance).
</li>
<li>The Options and View menus are tab-sensitive; the menu items change depending on which tab is currently active. Be sure to try these menus with each tab selected to see the various options available.
</li>
<li>If explorer crashes, you can use taskman as a quick and dirty shell to restart your machine or launch a new process. Just use the File | Run and Shut Down menus.*  </li>
</ul>
<p>
The <b>Applications tab</b> isn't a complete list of everything running on your computer, just a list of everything that <i>has a visible main window</i>.
</p>
<p>
<img alt="image placeholder" >
</p>
<p>
</p>
<ul>
<li>It's not obvious, but you can multi-select applications on this tab. Try it! This also works for End Task and Tile/Cascade from the Windows menu.
</li>
<li>Double-click an application to switch to it. You may want to turn off Options | Minimize on Use if you like doing this.
</li>
<li>Don't forget the right click menu. It's the most convenient way to interact with the applications in the list.
</li>
<li>Sometimes it's hard to tell how applications map to processes. Why guess when you can right click the application and select Go To Process? That will take you to the process tab and highlight the correct process.
</li>
</ul>
<p>
The <b>Processes tab</b> is a list of everything running on your PC, whether it has a visible window or not. I use this tab all the time to scan for processes using a lot of CPU or memory.
</p>
<p>
<img alt="image placeholder" >
</p>
<p>
</p>
<ul>
<li>Drag and drop the columns to re-order them; double-click a column border to auto-size it.
</li>
<li>Sorting column headers is probably the single most powerful function in task manager. <b>You can diagnose almost any performance problem by sorting the right process column!</b>
</li>
<li>The default set of process data columns is extremely spartan. I recommend using the View, Select Columns menu to turn on the optional process information. There are tons more columns to choose from, but these are the most essential for day-to-day use:
<ul>
<li>Mem Usage<br>
The "working set" of a process-- the amount of memory it is actively using right now to do whatever it is doing.
</li>
<li>Peak Mem Usage<br>
The maximum amount of memory this process has ever used since it was running.
</li>
<li>Page Faults<br>
The number of times this process has been forced to reload memory pages from the page file.
</li>
<li>VM Size<br>
How much of the processes' less frequently used memory has been paged to disk.
</li>
<li>Base Priority<br>
The priority of this process. Low and Normal are standard; anything with a higher priority than that is quite unusual and should be reserved for system processes. Note that taskman itself runs at High priority by default.
</li>
</ul>
</li>
</ul>
<li>Judicious use of right-click, <b>Set Priority</b> on a CPU or I/O intensive process can work wonders to make your machine more responsive. Reducing priority is fairly safe. However, I would avoid increasing priority unless you have an extremely compelling reason to do so.
</li>
<li>If you have a dual core or dual CPU system, using right-click, <b>Set Affinity</b> can help performance by binding a CPU-intensive process to a specific processor. That's how you avoid the "each processor is at 50% load" phenomenon. Some tasks can benefit slightly when they are stuck to a particular CPU.
</li>
<p>
The <b>Performance tab</b> is the ultimate "dashboard" tab. If you know what to look for, this tab can tell you everything you need to know about the health of your PC.
</p>
<p>
</p>
<ol>
<li>CPU usage<br>
<p>
<img alt="image placeholder" >
</p>
<p>
CPU usage is the one graph that doesn't need a lot of explanation. It will show one graph per CPU, so it's a good way of verifying that your multiple CPU system is load sharing appropriately. You can also add a red kernel time line to the CPU graphs via the View, Kernel Time menu. That's a measure of how much time the CPU is spending servicing low-level driver requests (eg, busywork) instead of running code.
</p>
<p>
</p>
</li>
<li>Page File usage<br>
<p>
<img alt="image placeholder" >
</p>
<p>
Apps tend to request a lot of memory-- more than they use at any given time. The OS will trim the less frequently used memory by writing it to disk in the page file. Page file usage is typically not a concern except in extraordinary cases; it's the commit charge you have to worry about.
</p>
<p>
</p>
</li>
<li>Totals<br>
<p>
<img alt="image placeholder" >
</p>
<p>
A count of all the resources in use on your PC: processes, threads, and handles. Not terribly helpful; it's better to drill down on this data via the processes tab.
</p>
<p>
</p>
</li>
<li>Physical Memory<br>
<p>
<img alt="image placeholder" >
</p>
<p>
System Cache tells you how much memory is being used as a disk cache, eg, to avoid accessing the physical hard drive. There's a delicate balance between System Cache and Available Physical Memory. You want a reasonable amount of free memory, but free memory is also <i>wasted</i> memory-- it should be utilized as disk cache whenever possible.
</p>
<p>
</p>
</li>
<li>Commit Charge<br>
<p>
<img alt="image placeholder" >
</p>
<p>
<b>Commit charge is the single most important section of the performance tab.</b> It's the total amount of memory in use by all applications, including memory that has been temporarily paged to disk. If the peak commit charge is greater than the physical memory in your PC, <b>your PC is running out of memory</b> and <a href="http://en.wikipedia.org/wiki/Thrash_(computer_science)">thrashing</a>. If it happens rarely, you're OK, but if it's a frequent occurence, it's time to get a memory upgrade. And god forbid you ever reach the commit charge limit. I guess then it's time to upgrade to a 64-bit OS.
</p>
<p>
</p>
</li>
<li>Kernel Memory<br>
<p>
<img alt="image placeholder" >
</p>
<p>
Every application has a certain amount of OS housekeeping overhead. Most of it can be paged to disk if necessary, but some has to be in memory at all time. These numbers are basically trivia since they're so small relative to the 512mb or 1gb of memory in a modern PC.
</p>
</li>
</ol>
<p>
The <b>Networking tab</b> is the newest addition to Task Manager, but it's also the most disappointing.
</p>
<p>
<img alt="image placeholder" >
</p>
<p>
</p>
<ul>
<li>By default you'll see total bytes (green). You can break out bytes received (yellow) and bytes sent (red) via the View, Network Adapter History menu.
</li>
<li>The graph is always displayed as a percentage of network utilization, which I find <i>incredibly annoying</i>. I wish there was a simpler graph that showed bytes or kilobytes on the axis instead of percent utilization. We can't change the graph, but we can use the View, Select Columns menu to <b>turn on the optional columns Bytes Sent Per Interval and Bytes Received Per Interval</b>.
<p>
<img alt="image placeholder" >
</p>
<p>
Divide by 1024 and we've got kilobytes per second throughput for that network card.
</p>
</li>
</ul>
<p>
Yeah, there are <a href="http://www.codinghorror.com/blog/archives/000162.html">better task management applications</a>, but you have to admit-- for a nine year old bundled application, ye olde Task Manager is pretty kickass. I took a quick look at Task Manager in the latest pre-beta 2 build of Windows Vista from PDC 2005, and I didn't see any obvious differences. <b>Here's to another 9 years of glorious Task Management!</b>
</p>
<p>
* the "Shut Down" menu is not shown on the Task Manager window when accessing machines over Remote Desktop. However, you can shut down machines remotely using Ctrl+Alt+End to bring up the Windows Security dialog which has a Shut Down button.
</p>
<p>
** Charmap or WordPad, anyone? I didn't think so.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2005-09-21T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/everything-you-always-wanted-to-know-about-task-manager-but-were-afraid-to-ask/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ In Defense of Verbosity ]]></title>
<link>https://blog.codinghorror.com/in-defense-of-verbosity/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
During the fantastic <a href="http://www.microsoft.com/downloads/details.aspx?FamilyID=2AC59B30-5A44-4782-B0B7-79FE2EFD1280&amp;displaylang=en">Monad</a> session at PDC 2005*, Jeffrey Snover and Jim Truher illustrated the tradeoff between verbosity and conciseness:
</p>
<p>
</p>
<pre>
cp c:apples c:oranges -fo -r
</pre>
<p>
</p>
<pre>
copy-item c:apples c:oranges -force -recurse
</pre>
<p>
Monad has a ton of aliases for common commands (eg, echo is the same as write-object), and it's smart enough to disambiguate parameters if you type enough characters. You get to choose: do I want to be verbose, or do I want to be concise?
</p>
<p>
Even UNIX tools, which aren't exactly known for their user friendliness, typically offer both verbose and concise options. Consider <a href="http://xoomer.virgilio.it/hherold/">the excellent wget</a> utility as an example. What the heck does this mean:
</p>
<p>
</p>
<pre>
wget -m -k -K -E http://www.gnu.org/ -o /home/me/weeklog
</pre>
<p>
Who knows? It could be doing anything. But if we disambiguate with the verbose parameters...
</p>
<p>
</p>
<pre>
wget --mirror --convert-links --backup-converted
--html-extension -o /home/me/weeklog
http://www.gnu.org/
</pre>
<p>
Suddenly it's quite plain what is happening.
</p>
<p>
<b>People say VB.NET is too verbose like that's a bad thing.</b> Is English too verbose? Would this post be easier to read in a court reporter's <a href="http://en.wikipedia.org/wiki/Shorthand">shorthand</a>? Would it be easier to read if I <a href="http://www.evasion.co.nz/main/issues/issue01/leonov1.html">dropped the vowels and the stopwords</a>?
</p>
<p>
Compare this elegant, concise C# code..
</p>
<p>
</p>
<pre>
}
}
}
</pre>
<p>
.. to its VB.NET equivalent:
</p>
<p>
</p>
<pre>
End Select
End If
End If
</pre>
<p>
VB.NET has its problems, to be sure, but verbosity isn't one of them. <b>Saving keystrokes while writing code is a fool's economy.</b> Isn't that why we have these fancy IDEs? As Steve McConnell notes in <a href="http://www.amazon.com/exec/obidos/ASIN/0735619670/codihorr-20">Write Programs for People First, Computers Second</a>, optimizing for conciseness is a poor tradeoff. Most code is written only once, but read dozens of times:
</p>
<p>
</p>
<blockquote>
<i>
The computer doesn't care whether your code is readable. It's better at reading binary machine instructions than it is at reading high-level language statements. You write readable code because it helps other people to read your code.
</i><p>
Readable code doesn't take any longer to write than confusing code does, at least not in the long run. It's easier to be sure your code works if you easily read what you wrote. That should be a sufficent reason to write readable code. But code is also read during reviews. It's read when you or someone else fixes an error. It's read when the code is modified. It's read when someone tries to use part of your code in a similar program.
</p>
<p>
<b>Making code readable is not an optional part of the development process, and favoring write-time convenience over read-time convenience is a false economy.</b> You should go to the effort of writing good code, which you can do once, rather than the effort of reading bad code, which you'd have to do again and again.
</p>
<p>
The idea of writing unreadable code because you're the only person working on a project sets a dangerous precedent. Your mother used to say, "What if your face froze in that expression?" And your dad used to say, "You play how you practice." Habits affect all your work; you can't turn them on and off at will, so be sure that what you're doing is something that you want to become a habit. A professional programmer writes readable code, period.
</p>
<p>
Even if you think you're the only one who will read your code, in the real world chances are good that someone else will need to modify your code. One study found that 10 generations of maintenance programmers work on an average program before it gets rewritten (Thomas 1984). Maintenance programmers spend 50 to 60 percent of their time trying to understand the code they have to maintain, and they appreciate the time you put into documenting it (Parikh and Zvegintzov 1983).
</p>
</blockquote>
<p>
The ethic Steve is promoting here isn't specific to any language, of course. But it certainly does skew the results in favor of verbosity-- if it's available.
</p>
<p>
* Which were evidently <a href="https://blogs.msdn.com/monad/archive/2005/09/20/472036.aspx">rated #3</a> right after Anders' two talks, so if you didn't go, you missed a great session!
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2005-09-22T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/in-defense-of-verbosity/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ On the Death of the Main Menu ]]></title>
<link>https://blog.codinghorror.com/on-the-death-of-the-main-menu/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
One of the biggest highlights of PDC 2005 was the first day keynote, when the <a href="http://www.microsoft.com/presspass/events/pdc/gallery.mspx">Office 12 UI was unveiled</a>. I don't know if people realized the significance of what we saw at the time-- but <b>we had just witnessed the death of the main menu</b>.
</p>
<p>
<img alt="image placeholder" >
</p>
<p>
<a href="http://www.microsoft.com/presspass/images/features/2005/09-13Office12-word_lg.jpg"><img alt="image placeholder" >
</p>
<p>
There's no "dropping down" in Office 12*; it's a context-sensitive tabbed palette interface.
</p>
<p>
<b>There is no main menu.</b>
</p>
<p>
That's huge. The main menu has been a cornerstone of the <a href="http://en.wikipedia.org/wiki/WIMP_%28computing%29">WIMP interface</a> since way back in the days of the <a href="http://en.wikipedia.org/wiki/Apple_Lisa">Apple Lisa</a>. Julie Larson-Green, the PM of the office UI team, <a href="http://www.microsoft.com/presspass/features/2005/sep05/09-13OfficeUI.mspx">explains</a>:
</p>
<p>
</p>
<blockquote><i>
The main part of the user experience is code-named the "ribbon." It's the one place you go to find the commands that are all about authoring Ã¢â‚¬â€œcreating the document, the presentation or the spreadsheet you're working on. There's no longer a stack of task panes and menus and toolbars to look through. There's just one place to look for commands.
</i></blockquote>
<p>
UI innovations in Office tend to be rapidly adopted by Microsoft across their entire product line. Not only there, but in third party applications and even other operating systems. <b>Remember the toolbar?</b> That was unknown until it debuted in Word in the early 90's**. Now it's ubiquitous. The "ribbon" is a similar paradigm shift. Eventually we'll all be using these tabbed palettes with nary a drop-down menu in sight. I expect the traditional WIMP main menu to go the way of the dodo soon after the release of Vista and Office 12 in 2006.
</p>
<p>
* with the apparent exception of the File drop-down, but even that doesn't look like a menu in the traditional sense when you click on it.
</p>
<p>
** The <a href="http://www.microsoft.com/presspass/features/2005/sep05/09-13OfficeUI.mspx">MS presspass article</a> states that this is "the most dramatic change to the way Office apps work since the introduction of the toolbar in 1997". <b>I think the toolbar goes back much further than that!</b> I just installed a copy of Microsoft Word 1.1a in a fresh Windows 3.1 VM image. Guess what? <a href="http://www.codinghorror.com/blog/images/microsoft_word_v1.png">
It has a toolbar</a>. So does <a href="http://www.codinghorror.com/blog/images/microsoft_word_v2.html">Word 2.0</a>.. and <a href="http://www.codinghorror.com/blog/images/microsoft%20excel_v4.png">Excel 4.0</a>. I don't know what kind of crack those MS presspass guys are smoking..
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2005-09-23T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/on-the-death-of-the-main-menu/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ Programming 4 Fun ]]></title>
<link>https://blog.codinghorror.com/programming-4-fun/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
Looking for something fun to do on family night? How about a friendly game of <a href="http://www.c-jump.com/">c-jump, the programming board game</a>:
</p>
<p>
<img alt="image placeholder" >
</p>
<p>
Although the prospect of a computer programming board game sounds positively stultifying, there is a rich history of <b>computer games based on programming</b>.
</p>
<p>
It's not a programming game per se, but we can't talk about educational games without mentioning MECC's seminal <a href="http://www.classicgaming.com/rotw/otrail.shtml">The Oregon Trail</a>, perhaps the <a href="http://ldt.stanford.edu/ldt1999/Students/kemery/esc/otMainFrame.htm">archetypal educational computer game</a>.
</p>
<p>
</p>
<blockquote><i>
The original Oregon Trail model was developed in 1971 by myself and two other college students when we were seniors at Carleton College in Minnesota. The three of us were completing our practice teaching in Minneapolis, and they (both math teachers) were using a computer system in their classes. I was teaching U.S. history and asked them the fateful question, "Can't we do something with the computer in my class?"
</i></blockquote>
<p>
Many people who grew up with Apple IIs in the classroom have <a href="http://preshrunk.info/2005/03/you-have-died-of-dysentery.php">fond memories</a> of this game. There's a great page where you can <a href="http://www.virtualapple.com/oregontraildisk.html">play the game in your browser</a> through an ActiveX emulator control (IE only, obviously). This version of the O.T. is a bit fancier than the all-text version I remember, though.
</p>
<p>
<img alt="image placeholder" >
</p>
<p>
There were other educational games on the Apple II that were a bit closer to <b>actual programming</b>. One of those is <a href="http://members.aol.com/Fractal101/odyssey.htm">Robot Odyssey</a>.
</p>
<p>
<img alt="image placeholder" >
</p>
<p>
Robot Odyssey was about <a href="http://weblog.scifihifi.com/2004/05/26/robot-odyssey/">programming robots to solve puzzles</a>. In order to do that, of course, you'd have to wire up the guts of the robot, and that meant learning about connecting inputs to outputs, and boolean logic (AND, XOR, etc). It had one of the best tutorial modes in any game I've ever played, which was critical for a game this complex. There's a modern update called <a href="http://mywebpages.comcast.net/tomfoote3/DQ/home.htm">DroidQuest</a> that you can play in the browser (Java required).
</p>
<p>
The predecessor to Robot Odyssey was <a href="http://ldt.stanford.edu/ldt1999/Students/kemery/esc/rockyDemoFrame.htm">Rocky's Boots</a>, which also involved programming robots to solve puzzles:
</p>
<p>
</p>
<blockquote>
<i>
Rocky's Boots is an electronic construction set. In the program, Rocky, a boot-wearing raccoon, teaches children to build animated logic machines. Users build arbitrary logic circuits and use them to program robots in the context of an adventure game. The object of this game is to score points by making a machine to kick object targets out of a trough. The machines are composed of circuit parts that direct the flow of electricity. They are built by moving the cursor around the screen, picking up parts and hooking them together. The object targets vary in shape and color and the player must connect logic gates in such a matter that only the objects of a desired shape or color are kicked when they pass through sensors.
</i><p>
<img alt="image placeholder" >
</p>
</blockquote>
<p>
Rocky's Boots was written by <a href="http://www.warrenrobinett.com/rockysboots/">Warren Robinett</a>, who also wrote a number of Atari 2600 games including the influential <a href="http://www.warrenrobinett.com/adventure/index.html%0A">Adventure</a> and perhaps most tellingly, the <a href="http://www.atariage.com/software_page.html?SoftwareLabelID=15">BASIC programming cartridge</a> (which required the <a href="http://www.atariage.com/controller_page.html?SystemID=2600&amp;ControllerID=4">keypad controller</a>):
</p>
<p>
<img alt="image placeholder" >
</p>
<p>
There's a short <a href="http://www.dadgum.com/halcyon/BOOK/ROBINETT.HTM">interview with Warren</a> in the book <a href="http://www.dadgum.com/halcyon/BOOK/MISC/CONTENTS.HTM">Halcyon Days</a> that offers a bit of background on his Atari 2600 years.
</p>
<p>
The spiritual successor to both of these classic Apple II games is Cognitoy's 2001 PC title <a href="http://www.mindrover.com/">Mindrover</a>. It takes the same gameplay concepts and expands them brilliantly into glorious real-time OpenGL:
</p>
<p>
</p>
<blockquote>
<i>
MindRover is 'the Intelligent Robot Simulation' or perhaps you can call it <b>a 3D strategy/programming game</b>. This is a new genre that encompasses the depth of play found in strategy games with a new concept in player control. You get to program the intelligence of robotic vehicles.
</i><p>
You are a researcher on Europa, a moon of Jupiter. In your free time you re-program the rovers to race around the hallways, battle it out with mini lasers and rocket launchers, and find their way through mazes.
</p>
<p>
Once you have chosen a challenge, equip your vehicle (hovercraft, wheeled or treaded) with various sensors, movement components, and weapons. Then program the behavior of your vehicle in a graphical interface where you wire the components together and set their properties. Then let it go in the arena and watch how it does!
</p>
<p>
<img alt="image placeholder" >
</p>
</blockquote>
<p>
Microsoft may have just launched their <a href="http://msdn.microsoft.com/coding4fun/">Coding4Fun</a> site a few months ago, but <b>the real programming fun started 20 years earlier</b>.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2005-09-25T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/programming-4-fun/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ Microsoft naming: who stole the soul? ]]></title>
<link>https://blog.codinghorror.com/microsoft-naming-who-stole-the-soul/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
Jason Kemp notes that Microsoft's choice of product names can have <a href="http://jasonkemp.ca/archive/2005/08/01/2696.aspx">some unintended consequences</a>:
</p>
<p>
</p>
<blockquote>
<i>
I don't know yet how I feel about the name Windows Vista, but it at least has some character to it. But Windows Presentation Foundation? Windows Communication Framework? <b>Who wants to use those products? Why did some of the most exciting new software to come out of the Borg hive have to get boring-ass names? Did developers complain that Avalon and Indigo didn't sound professional?</b>
</i><p>
It makes me wonder what Word, Excel or Outlook would have been called if they were released today: Microsoft Document Editor Framework, Microsoft Data Table Manager, and Microsoft Electronic Mail Personal Organizer. The whole thing would be sold as the Microsoft Knowledge Worker Productivity Suite, rather than just Office. Would it dominate the market so thoroughly if it had used my clunky suggestions back when there were actual competitors? Couldn't PowerPoint be renamed to Windows Presentation Foundation?
</p>
</blockquote>
<p>
This dovetails nicely with <a href="http://headrush.typepad.com/creating_passionate_users/2005/09/dignity_is_dead.html">today's Creating Passionate Users post</a>:
</p>
<p>
</p>
<blockquote>
<i>
At one point, Sun wasn't much more than creative genuis Bill Joy ("Oh, I think I'll just whip up BSD Unix on my own..."), and troublemaker Scott McNealy. Yet by the time I got to Sun, using the word "cool" in a customer training document was enough to warrant an entry in your annual performance eval. And not in a good way.
</i><p>
<b>I cannot count the times I heard the word "professionalism" used as justification for why we couldn't do something. But I can count the few times I heard the word "passion" used in a meeting where the goal was to get developers to adopt our newest Java technologies.</b> What changed? More importantly, was it a positive change? Was it a completely necessary change?
</p>
<p>
Why do we go from the business equivalent of the unruly-but-creative teenager to a stuffy parent? Can't we be something in-between? Why not the motivated, fun, creative 30-year old? (I'm not being ageist here -- this is a metaphor). If we're forced into becoming the "parent", why can't we at least be the cool parent from down the street? And by "cool", I mean the truly cool, not cool simply because they supplied the beer. (The 37 Signals folks always have a lot to say on this "stay small and act like a start-up" approach as well)
</p>
<p>
Some argue that by maintaining strict professionalism, we can get the more conservative, professional clients and thus grow the business. Is this true? Do we really need these clients? Isn't it possible that we might even grow more if we became braver?
</p>
</blockquote>
<p>
Indeed. Avalon and Indigo were interesting names for radical new cornerstone technologies. Slapping on the acronym-ready <a href="http://en.wikipedia.org/wiki/Doublespeak">doublespeak</a> titles "Windows Communication Foundation" and "Windows Presentation Foundation" is like tossing a giant soaking wet beige blanket over each one.
</p>
<p>
At the very least, they could have retained both names, as Apple does with <a href="http://en.wikipedia.org/wiki/Mac_OS_X">OS X</a> (OS X Tiger, OS X Panther, etcetera). <b>Hey Microsoft: who stole the soul?</b>
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2005-09-26T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/microsoft-naming-who-stole-the-soul/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ Mastering GUIDs with Occam's Razor ]]></title>
<link>https://blog.codinghorror.com/mastering-guids-with-occams-razor/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
Do you remember the scene from the movie <a href="http://www.imdb.com/title/tt0093058/">Full Metal Jacket</a> where the marines recite the <a href="http://www.usmcpress.com/heritage/marine_corps_rifleman's_creed.htm">USMC creed</a>?
</p>
<p>
<a href="http://www.youtube.com/watch?v=4kU0XCVey_U"><img alt="image placeholder" >
</p>
<p>
It's a little known fact, but <strong>programmers have a similar creed</strong>:
</p>
<blockquote>
This is my GUID. There are many like it but this one is mine. My GUID is my best friend. It is my life. I must master it as I must master my life. Without me, my GUID is useless. Without my GUID I am useless.
</blockquote>
<p>
In fact, GUIDs are so near and dear to our hearts that we recently had a spirited discussion about them at work. <strong>Let's say you had a string and needed to determine whether it was a valid GUID</strong>. The easy way is a .Parse() style Try-Catch code block:
</p>
<pre>guid g;
try
{
g = new Guid("x");
}
catch
{
}
</pre>
<p>
This is the correct answer.. <em>most of the time</em>. But you know programmers. <strong>They never met an edge condition they didn't enjoy discussing ad nauseam</strong>. And I was one of the first to chime in:
</p>
<blockquote>
This is definitely a good way to validate a data type, however, just be aware of the exception performance penalty. <a href="http://www.codinghorror.com/blog/archives/000358.html">Throwing exceptions on failure to cast is expensive</a>, so if this is something that
<ul>
<li>will be invalid often
</li>
<li>appears in a loop
</li>
<li>occurs with high frequency
</li>
</ul>
<p>
then you'd want to go with a non-exception based check. However most of the time none of these things are true, so the performance is irrelevant.
</p>
</blockquote>
<p>
Then someone suggested trying a regular expression. Oh great, <a href="http://www.codinghorror.com/blog/2008/06/regular-expressions-now-you-have-two-problems.html">now we have two problems</a>:
</p>
<pre>Regex r = new Regex(
"^((?-i:0x)?[A-Fa-f0-9]{32}|
[A-Fa-f0-9]{8}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{12}|
{[A-Fa-f0-9]{8}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{12}})$");
</pre>
<p>
It's valid, but I couldn't resist tweaking this regex for simplicity's sake. The <a href="http://www.ics.uci.edu/~ejw/authoring/uuid-guid/draft-leach-uuids-guids-01.txt">official GUID spec</a> only defines one format for GUID strings, the familiar 8-4-4-4-12 format:
</p>
<pre>Regex r = new Regex(
@"^({|()?[A-Fa-f0-9]{8}-([A-Fa-f0-9]{4}-){3}[A-Fa-f0-9]{12}(}|))?$");
</pre>
<p>
This is my post, so I'll skip the part where others poked holes in my regex. Just when we thought it was over, a fellow developer whipped out a code snippet that benchmarks how long it takes to validate GUIDs via each method:
</p>
<pre>static void Main(string[] args)
{
Guid g = Guid.NewGuid();
string s = g.ToString();
DateTime before = DateTime.Now;
for (int i = 0; i &lt; 10000; i++)
{
bool retVal = IsGuid(s);
}
Console.WriteLine(DateTime.Now.Subtract(before));
before = DateTime.Now;
for (int i = 0; i &lt; 10000; i++)
{
bool retVal = IsGuid2(s);
}
Console.WriteLine(DateTime.Now.Subtract(before));
Console.ReadLine();
}
public static bool IsGuid(string guidString)
{
try
{
Guid guid = new Guid(guidString);
return true;
}
catch
{
return false;
}
}
public static bool IsGuid2(string guidString)
{
Regex r;
r = new Regex(
@"^({|()?[A-Fa-f0-9]{8}-([A-Fa-f0-9]{4}-){3}[A-Fa-f0-9]{12}(}|))?$");
Match m = r.Match(guidString);
if (m.Success)
return true;
else
return false;
}
</pre>
<p>
According to this, <strong>constructor validation is 3 to 4 times faster than the regex</strong>.. or is it? I immediately noticed a few problems that made this a rather questionable benchmark. And, as before, I couldn't resist investigating:
</p>
<blockquote>
If I increase the iterations to <strong>100,000</strong>:
<blockquote>
00.1874856<br>
00.7968138
</blockquote>
You typically wouldn't want to create a new regex inside the loop, because it's too expensive. If I <strong>move the regex creation outside the loop</strong>:
<blockquote>
00.2031094<br>
00.5780806
</blockquote>
If I set <strong>RegexOptions.Compiled</strong> on the regex:
<blockquote>
00.1874856<br>
00.3437236
</blockquote>
If I run the above with CTRL+F5 (<strong>sans debugger</strong>):
<blockquote>
00.1718673<br>
00.1874916
</blockquote>
</blockquote>
<p>
It was definitely a fun discussion. I certainly <a href="http://msdn.microsoft.com/en-us/library/aa446557.aspx">learned a few things</a> about GUIDs I didn't know. Heck, discussions like this are why I joined a software development company in the first place. <strong>But it's also a pointless discussion.</strong>
</p>
<p>
Performance was a complete non-issue in this particular scenario. That's why we should always program with <a href="http://en.wikipedia.org/wiki/Occam's_Razor">Occam's Razor</a> in mind:
</p>
<blockquote>Given two similar code paths, choose the simpler one.</blockquote>
<p>
Edge conditions and fancy techniques are interesting, but they're not necessarily a worthwhile use of time. <strong>Sometimes the simple and stupid solution is all you need.</strong>
</p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2005-09-27T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/mastering-guids-with-occams-razor/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ Keyboarding: Microsoft Natural Ergonomic 4000 ]]></title>
<link>https://blog.codinghorror.com/keyboarding-microsoft-natural-ergonomic-4000/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
I was plenty excited when I saw Microsoft was releasing a new <a href="http://www.codinghorror.com/blog/archives/000209.html">non-mangled</a> ergonomic keyboard - the <a href="http://www.microsoft.com/hardware/mouseandkeyboard/ProductDetails.aspx?pid=043">Microsoft Natural Ergonomic Keyboard 4000</a>.
</p>
<p>
<img alt="image placeholder" >
</p>
<p>
Now that I own one, I'm not excited any more.
</p>
<p>
<b>I'm ecstatic!</b>
</p>
<p>
This keyboard is the natural heir to the obsolete but much loved <a href="http://www.dansdata.com/nkpro.htm">Microsoft Natural Keyboard Pro</a>:
</p>
<p>
<img alt="image placeholder" >
</p>
<p>
The MS Natural Pro was discontinued in early 2001. After that, there were <b>hardly any ergonomic split keyboards with standard PgUp/PgDn clusters</b>. There were a handful of rare and obscure exceptions, but in general, they just weren't being made any more. This was <a href="http://www.dynamicobjects.com/d2r/archives/003105.html">a dark time for ergo keyboard enthusiasts who happened to be programmers</a>.
</p>
<p>
By 2004, people had started to mock my ugly-but-comfortable 1999-era Natural Pro. I had reluctantly switched to the <a href="http://www.microsoft.com/hardware/mouseandkeyboard/productdetails.aspx?pid=030">Digital Media Pro</a> after some flirtations with the <a href="http://www.amazon.com/gp/product/B00006FRUI/002-1143913-4504020?v=glance&amp;n=172282&amp;v=glance">Logitech Elite</a>. But neither of these were ergonomic, and both had a very cheap feeling. They just didn't feel right to my hands and fingers.
</p>
<p>
I'm happy to report that the Natural Ergonomic 4000 is <b>a truly worthy successor to the Natural Pro</b>. My fingers feel at home again! Here are the highlights:
</p>
<p>
</p>
<ul>
<li>It's mostly black.* And black is way cooler than beige-y white.
</li>
<li>You can't tell from the pictures, but the palm rests are actually padded with some kind of leatherette or naugahyde. I know it sounds odd, but it's way more comfortable than any plastic palmrest I've ever used.
</li>
<li>This keyboard feels truly solid, like the old Natural Pro. So many wired keyboards are stuck in that disposable, plastic-y $19.99 low-end ghetto nowadays.
</li>
<li>The multimedia buttons at the top of the keyboard are radically simplified. Only the essentials (favorites, home/search/mail, volume, calc) are present. And they're more logically organized into three distinct areas. I love the favorites; that was the only good thing about the <a href="http://www.microsoft.com/hardware/mouseandkeyboard/productdetails.aspx?pid=030">Digital Media Pro</a> keyboard I was previously using.
</li>
<li>The otherwise wasted "dead" space in the middle of keyboard is put to use with the zoom slider, LED indicators, and back/forward buttons. I particularly like the LEDs being front and center so I can more easily see when caps/f/num lock is accidentally set.
</li>
</ul>
<p>
All is not perfect, however. I do have a few quibbles:
</p>
<p>
</p>
<ul>
<li>The Enter key got a little smaller. Many of the other keys got larger (tab, tilde), but Enter somehow got smaller.
</li>
<li>The keyboard has no USB ports. I can't really fault Microsoft here because USB ports are extremely rare on any keyboard these days. But they should bring it back, dammit, because it's so convenient to plug in your mouse or a memory card right on your keyboard!
</li>
<li>They dropped the sleep button, which is traditionally in the upper right of every Microsoft keyboard. Instead you get an extra row of numpad keys (equal, parens, backspace). I've never seen that arrangement, but I rarely use the numpad anyway.
</li>
<li>I'm not sure how useful the "dead zone" buttons (back/forward, zoom) will be. It's a bit of a reach. I never used the zoom/scroll functions located on the left side of my two previous keyboards. But I used to accidentally hit them when my fingers slipped. <b>The odds of me accidentally hitting the dead zone buttons is nil</b>. So this is a net gain even if I never click those buttons once.
</li>
</ul>
<p>
The keyboard comes with a pre-installed reverse slope tilt attachment, which supposedly offers a <a href="http://www.microsoft.com/presspass/features/2005/sep05/09-06Ergo.mspx">better neutral typing position</a>. I may experiment with this later, but I removed it for now.
</p>
<p>
<a href="http://www.codinghorror.com/blog/archives/000209.html">My keyboard quest</a> is over. The Natural Ergonomic 4000 <b>retains all the great qualities of the Natural Pro and significantly improves on it</b>. I guess this means I can finally retire my stockpile of Natural Pros.
</p>
<p>
* It's like, how much more black could this be? and the answer is none. <a href="http://www.imdb.com/title/tt0088258/quotes">None more black.</a>*
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2005-09-28T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/keyboarding-microsoft-natural-ergonomic-4000/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ Revenge of Codename: Snowball ]]></title>
<link>https://blog.codinghorror.com/revenge-of-codename-snowball/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
What would the world be like <strong>if Windows 95 and Windows NT has been cancelled?</strong> You'd be surfing the web right now in <a href="http://en.wikipedia.org/wiki/Windows_3.x">Windows for Workgroups 3.11</a>:
</p>
<p>
<img alt="image placeholder" >
</p>
<p>
I absolutely love the fact that <strong>we get a javascript error on the Google homepage</strong>. Not unreasonable, considering WFW 3.11 was well on its way to total obsolescence before Google even made it out of a Stanford dorm room <a href="http://www.codinghorror.com/blog/archives/000305.html">in 1998</a>.
</p>
<p>
I never browsed the intarweb through any version of Windows 3.x. Most people are surprised to find that there was a Windows 3.x version of circa-1999 Internet Explorer 5. By the time the web caught on in late '95, most of the early adopters I knew had already transitioned to Windows 95. I distinctly remember using the first version of IE under Windows 95-- the one that didn't understand the &lt;table&gt; tag or animated gifs!
</p>
<p>
As for the title of this post, according to <a href="http://bink.nu/Codenames.bink">the canonical list of Microsoft code names</a>, <strong>Snowball</strong> was the internal Microsoft codename for the WFW 3.11 project. If you want to rock your own WFW 3.11 virtual machine, you can <a href="http://www.peteweb.com/index.php?showtopic=3987">download the OS from peteweb</a>. And don't forget DOS 6.22 like I did! Set it up following the great instructions from Virtual PC guy:
</p>
<ul>
<li>
<a href="http://blogs.msdn.com/virtual_pc_guy/archive/2004/10/26/247793.aspx">Installing Windows for Workgroups 3.11</a>
</li>
<li>
<a href="http://blogs.msdn.com/virtual_pc_guy/archive/2004/10/28/248940.aspx">Networking Windows 3.11</a>
</li>
</ul>
<p>
There's a huge collection of old 16-bit Windows software on the <a href="http://www.freewebs.com/win3x/download.htm">10 year anniversary of Windows 3.1 page</a>. It's a sketchy looking website, but if you follow the yahoo briefcase download instructions closely, the software is all still present and downloadable.
</p>
<p>
You may find <a href="http://www.winimage.com/winimage.htm">WinImage</a> helpful here for creating floppy disk images from collections of files. Virtual PC only understands non-compressed (.IMA) floppy images, so be sure you avoid the default compressed (.IMZ) floppy images.
</p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2005-09-29T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/revenge-of-codename-snowball/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ Wind, Angle, and Power ]]></title>
<link>https://blog.codinghorror.com/wind-angle-and-power/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
One of the oldest computer games is <a href="http://www.atariarchives.org/morebasicgames/showpage.php?page=2">Artillery</a>. It's all about going <i>mano a mano</i> with nothing but <a href="http://www.armchairarcade.com/aamain/content.php?article.51">wind, angle, and power</a> on your side:
</p>
<p>
</p>
<blockquote>
The origins of artillery games are unclear, but the first such games were probably played on mainframe computers in the 60s. The programmers of this era often saw no commercial potential in their games and distributed them freely and anonymously with other mainframe operators, who often added features of their own. Gameplay consisted of players taking turns entering angles and power parameters via punch cards, then checking the printer output to see if they overshot or undershot. It was a more sophisticated version of Milton Bradley's Battleship board game. Keep in mind that these were the days when games like <a href="http://www.codinghorror.com/blog/files/wumpus_origin.htm">Hunt the Wumpus</a> were considered groundbreaking.
</blockquote>
<p>
Because they were simple, fun, and used some real physics calculations,  <b>artillery games were often used as programming samples</b>. Every copy of MS-DOS 5.0 and higher bundled a <a href="http://en.wikipedia.org/wiki/QBasic">QBasic</a> sample game, <a href="http://en.wikipedia.org/wiki/Gorilla_%28computer_game%29">gorilla.bas</a>. It's artillery with.. explosive banana-chucking gorillas. Naturally.
</p>
<p>
<img alt="image placeholder" >
</p>
<p>
However, <a href="http://www.classicgaming.com/scorch/">Scorched Earth</a> was the pinnacle of the artillery genre under DOS.
</p>
<p>
<img alt="image placeholder" >
</p>
<p>
I remember playing the hell out of Scorched Earth in college. There's nothing quite as satisfying as nailing your opponent with the laughably ineffective "Funky Bomb". Between this, Civilization, and Lemmings, it's a wonder we got anything done at all!
</p>
<p>
There's a great <a href="http://arstechnica.com/articles/culture/scorched.ars">interview with Wendell T. Hicken</a>, the author of Scorched Earth, that illustrates <b>just how deeply games and programming are intertwined for many developers</b>:
</p>
<p>
</p>
<blockquote>
While other kids were dumping quarters into arcades, I would visit the arcades with a notepad, and try to figure out what the games were doing  --  then I'd go home and implement them myself. We had a home-built computer, and you could write directly to the screen memory to do simple character-based animations. I had a really cool version of Defender, a not so cool version of Pac Man, and lots of other simple arcade clones. I even wrote a few on my own, including my favorite RoTMA (Revenge of the Mutated Androids), which involved breaking into an alien base, with simple shooting combat, and some weapons-based puzzles (throwing grenades into rooms).
<p>
As for advice, the key is to start and keep learning. Try something simple, and build from there. If you have a really simple program that at least does something, then this can keep you motivated to keep making it better.
</p>
</blockquote>
<p>
You can still <a href="http://www.dosgamesarchive.com/download/game/144">download</a> and run Scorched Earth just fine under Windows XP, but it's a pure DOS game at heart. Of course, there are a slew of SE clones available for every platform and programming language imaginable. One of the more notable clones is <a href="http://www.scorched3d.co.uk/">Scorched 3D</a>, up to version 39.1 at last count.
</p>
<p>
The best modern, commercial representation of the artillery genre is Team 17's long-running <a href="http://worms.team17.com/">Worms series</a>:
</p>
<p>
<img alt="image placeholder" >
</p>
<p>
Worms turns everything up to 11, with a heaping dose of Monty Python-esque humor. Where else can you attack with weapons like sheep, miniguns, bazookas, poison arrows, and banana bombs? There are even melee attacks including a dragon punch and baseball bat. Worms isn't exactly cornering the gaming market, but it's still a viable brand, with <a href="http://www.wormsmayhem.com/">Worms 4: Mayhem</a> set for release sometime this year.
</p>
<p>
It's amazing how far a simple gameplay mechanic like <b>wind, angle, and power</b> can take you.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2005-09-30T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/wind-angle-and-power/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ Changing the Windows XP Boot Screen ]]></title>
<link>https://blog.codinghorror.com/changing-the-windows-xp-boot-screen/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
We're in the middle of an after-hours <a href="http://www.mame.net/">MAME</a> arcade project at work*. As one of the final fit and finish steps, I did a bit of research on how to <b>replace the default Windows XP boot screen</b> with something a little more arcade-y. I came up with StarDock's excellent <a href="http://www.stardock.com/products/bootskin/">BootSkin</a>:
</p>
<p>
<img alt="image placeholder" >
</p>
<p>
This free app makes it painless to swap out your Windows XP boot screen or even create your own. The only downside is that you're <b>limited to a 16 color 640x480 image</b>. Thankfully, that's 16 colors of your choice, not the classic default 16 "Windows" colors. This appears to be a technical limitation of the XP boot process itself. The app packages up the images into "bootskins", which are simply zip files with a .bootskin extension.
</p>
<p>
There are a few hundred <a href="http://www.wincustomize.com/Skins.aspx?LibID=32">user created bootskins</a> to choose from at WinCustomize. I found a <b>Windows 1.01 bootskin</b>, but the author didn't do a good job of scaling the image, so it looked horrible. I reformatted it so it's pixel perfect:
</p>
<p>
</p>
<ul>
<li>
<a href="http://www.codinghorror.com/blog/files/Windows101.bootskin.zip">Windows 1.01 bootskin</a> (3kb, remove .zip extension after download)
</li>
</ul>
<p>
If you're worried about the effects of this boot screen change, try it in a Virtual PC or VMWare image first. There's a similar StarDock app, <a href="http://www.stardock.com/products/logonstudio/">LogonStudio</a>, which allows you to customize the XP logon screen as well. I don't need to bother with this; our MAME computer automatically logs a user in via the <a href="http://www.microsoft.com/windowsxp/downloads/powertoys/xppowertoys.mspx">TweakUI PowerToy</a> login tab.
</p>
<p>
* It's impressive. There will be more on this later.. ;)
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2005-10-01T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/changing-the-windows-xp-boot-screen/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ Configurability and Voiding Your Warranty ]]></title>
<link>https://blog.codinghorror.com/configurability-and-voiding-your-warranty/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
In <a href="http://www.codinghorror.com/blog/archives/000382.html">The Problem with Configurability</a>, I noted the tenuous balance between <b>the opposing goals of customization and convention</b>. Kam VedBrat, one of the Microsoft Windows UI designers for Vista, riffs on a similar theme. <a href="http://blogs.msdn.com/kamvedbrat/archive/2005/10/01/476160.aspx">Why isn't Windows Vista completely skinnable out of the box?</a>
</p>
<p>
</p>
<blockquote>
There is also the issue of supportability - how does the guy on the phone doing tech support, or working at the helpdesk tell you to click on the big green start button to open a program, or the red button in the corner to close a pop-up add if the skin you installed replaced your start button with an alien-head and turned the close button black?
<p>
<img alt="image placeholder" >
</p>
<p>
Don't get me wrong - I love the fact that people can do this stuff with their PC. <b>But it is far more invasive than it may appear to be on the surface.</b> One of the best selling cars in the United States is the Honda Civic. And a huge contributor to its popularity, especially amongst younger buyers, is the vast array of aftermarket parts that are available for it. Honda lets you do some customization at the factory - you can pick your paint color, maybe tint the windows, etc. But if you want your car to look more like something that you saw on "Pimp My Ride", you can get it done, but it also voids your factory warranty.
</p>
<p>
This might not be an issue for someone who authored the skin themself but <b>once you make it a broad reaching thing that anyone can download and install -- maybe even accidentally -- you run the risk of really making things worse for people.</b>
</p>
<p>
Our stance is somewhat similar - if you're going to do simple stuff, we have some options for you. And for a very large percentage of the ~700,000,000 people running Windows, what we offer in the box is fine. If you want more customization, it's available. And it will continue to be available in Windows Vista. But <b>depending on how much you do under the hood, you might void your warranty.</b>
</p>
</blockquote>
<p>
I was thinking about the skinning problem this weekend as I browsed through the <a href="http://www.desktopsidebar.com/fileforum.php?f=2&amp;o=4&amp;d=0">200+ skins</a> available for the <a href="http://www.desktopsidebar.com/">Desktop Sidebar</a>. So many of them are just awful. Customization is in the eyes of the beholder, of course, but the odds of a user picking a random skin that actually <i>reduces</i> usability is high. The default UI may not have flames/aliens/J-Lo on it, but it was probably  built by designers versed in usability.
</p>
<p>
So, to take this analogy to its logical conclusion-- <a href="http://www.windowblinds.net/">WindowBlinds</a> is how you Pimp Your OS, and your rapper-turned-host is <a href="http://www.codinghorror.com/blog/archives/000322.html">Brad Wardell</a>. Aiiight?
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2005-10-02T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/configurability-and-voiding-your-warranty/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ Comparing GUIs: OS X vs. Windows XP ]]></title>
<link>https://blog.codinghorror.com/comparing-guis-os-x-vs-windows-xp/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
This <a href="http://www.xvsxp.com/">OS X versus Windows XP</a> site contains an <b>exhaustive, extensively illustrated 100-topic comparison of these two operating systems</b>. The author tries to be objective, which is admirable, but the extremely detailed comparison is worth reading mostly because it highlights a lot of subtle design differences. For example, this little feature of the OS X login dialog:
</p>
<p>
</p>
<blockquote><i>
Furthermore, if you type your password wrong, the login window wiggles! This simple, elegant and unintimidating feedback lets users know that they need to try again. The down side to a wiggling login screen is that it may be insufficient to notify a novice user that they entered the wrong password. A written confirmation that the password was not accepted would help novices.
</i></blockquote>
<p>
If you like comparing GUIs, you'll probably enjoy the <a href="http://www.guidebookgallery.org/index">GUIdebook</a> website, too. It's a great source of current and historic GUI screenshots. I first stumbled across this site while searching for old Excel screenshots. I didn't find any, but I did find this incredibly neat <a href="http://www.guidebookgallery.org/splashes/excel">visual comparison of every Excel splashscreen since Version 1.01</a> on the GUIdbook site. Who knew splashscreens could be so.. cool?
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2005-10-04T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/comparing-guis-os-x-vs-windows-xp/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ Avoiding “Blank Page Syndrome” ]]></title>
<link>https://blog.codinghorror.com/avoiding-blank-page-syndrome/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
One thing I dislike about classic <a href="http://en.wikipedia.org/wiki/WIMP_%28computing%29">WIMP</a> GUI applications is the way they typically present you with a <b>blank page at startup</b>. Here's what Word 2003 looks like just after I launch it:
</p>
<p>
<img alt="image placeholder" >
</p>
<p>
This leads to <b>Blank Page Syndrome</b>: when presented with infinite choice, it's sometimes hard to get started. Which reminds me of what happens when I walk in to Blockbuster Video with no idea what movie I want to see. I end up aimlessly wandering the isles of Blockbuster, spending way more time than I need to browsing a cubic ton of movies I'm vaguely interested in. And I'll probably end up renting <a href="http://www.imdb.com/title/tt0101921/">Fried Green Tomatoes</a>. Again.*
</p>
<p>
When I set up a new project in <a href="http://www.basecamphq.com/">Basecamp</a>, instead of a blank project screen, <b>I see a sample of what the project will look like when it's populated</b>. While this approach may not be appropriate for every app, it should always be considered as an alternative to the blank page:
</p>
<ul>
<li>It's a powerful illustration of <a href="http://www.codinghorror.com/blog/archives/000346.html">Show, Don't Tell</a> in action: the example shows me what the application actually does.
</li>
<li>The use of real data in the example helps me visualize my goal. This is what I'll get if I use the application.
</li>
<li>The example is a highly contextual alternative to "help pages" or "the manual". As if I'm gonna read those.
</li>
<li>It's not a wizard. I am not constrained to a list of tedious questions with Next and Forward buttons; I can do whatever I want from here.
</li>
</ul>
<p>
<img alt="image placeholder" >
</p>
<p>
All this before you've even begun using the application. This is a fantastic alternative to the tabula rasa default.
</p>
<p>
However, there is one important caveat: <b>be sure users can tell this isn't real data!</b> You laugh, but if the <a href="http://www.geek.com/news/geeknews/2002Nov/gee20021204017601.htm">FUI</a> isn't clearly tagged with red EXAMPLE text, users <i>will</i> click on it. I learned this the hard way in a website usability review. There's nothing more cringeworthy than watching users try to click on a screenshot. And I was trying to help them!
</p>
<p>
* Thank goodness for <a href="http://www.netflix.com/">Netflix</a> and its queue.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2005-10-05T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/avoiding-blank-page-syndrome/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ Equipping our ASCII Armor ]]></title>
<link>https://blog.codinghorror.com/equipping-our-ascii-armor/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
On one of our e-commerce web sites, we needed a unique transaction ID to pass to a third party reporting tool on the checkout pages. We already had a GUID on the page for internal use. And you know <a href="http://www.codinghorror.com/blog/archives/000399.html">how much we love GUIDs</a>!
</p>
<p>
</p>
<pre><span style="color:red">22da5537-de54-459d-9b33-f40f2101143b</span></pre>
<p>
A GUID is 128 bits, or 16 bytes. And the third party can accept 20 bytes.
</p>
<p>
This seems workable until you realize that those 20 bytes have to be represented as a plain text string to be transmitted via HTTP in a form post or querystring.
</p>
<p>
So the question is, <b>how do we represent a 128-bit integer in a plain text string that fits in 20 characters?</b> In other words, we need to <a href="http://en.wikipedia.org/wiki/ASCII_Armor">equip our ASCII Armor</a>.
</p>
<p>
There's a <b>Guid.ToByteArray()</b> method which returns an array of 16 bytes (0-255). So we could just use ASCII values 0-255 to represent each byte, right? But wait a minute. ASCII 13 is carriage return! And good luck sending ASCII 0 (aka null) to anyone. Hmm.
</p>
<p>
We're forced to use only <a href="http://web.cs.mun.ca/~michael/c/ascii-table.html">printable ASCII characters</a>. Which means we'll have to use more bytes to represent the same data; it's unavoidable. Let's experiment with a few forms of ASCII armor and see how close we can get.
</p>
<p>
A <b>Hex encoded</b> GUID..
</p>
<p>
</p>
<pre>Dim g As Guid = Guid.NewGuid
Dim sb As New Text.StringBuilder
For Each b As Byte In g.ToByteArray
sb.Append(String.Format("{0:X2}", b))
Next
Console.WriteLine(sb.ToString)
</pre>
<p>
..  uses ASCII values 0-9, A-F and results in a <b>32 byte</b> string:
</p>
<p>
</p>
<pre><span style="color:red">EBB7EF914C29A6459A34EDCB61EB8C8F</span></pre>
<p>
A <b><a href="http://www.codeproject.com/dotnet/TextCoDec.asp">UUEncoded</a></b> GUID..
</p>
<p>
</p>
<pre>Dim u As New UUEncode
Dim g As Guid = Guid.NewGuid
Dim s As String
s = u.Encode(g.ToByteArray)
Console.WriteLine(s)
</pre>
<p>
.. uses ASCII values 32-95 (decimal) and results in a <b>25 byte</b> string:
</p>
<p>
</p>
<pre><span style="color:red">0@-_;,9X-@D2BTV!0V$/TP``</span></pre>
<p>
A <b><a href="http://en.wikipedia.org/wiki/Base64">Base64 encoded</a></b> GUID..
</p>
<p>
</p>
<pre>Dim g As Guid = Guid.NewGuid
Dim s As String
s = Convert.ToBase64String(g.ToByteArray)
Console.WriteLine(s)
</pre>
<p>
.. uses ASCII values a-z, A-Z, 0-9 and results in a <b>22 byte</b>* string:
</p>
<p>
</p>
<pre><span style="color:red">7v26IM9P2kmVepd7ZxuXyQ==</span></pre>
<p>
An <b><a href="http://en.wikipedia.org/wiki/Ascii85">ASCII85 encoded</a></b> GUID...
</p>
<p>
</p>
<pre>Dim a As New Ascii85
Dim g As Guid = Guid.NewGuid
Dim s As String
s = a.Encode(g.ToByteArray)
Console.WriteLine(s)
</pre>
<p>
.. uses ASCII values 33-118 (decimal) and results in a <b>20 byte</b> string:
</p>
<p>
</p>
<pre><span style="color:red">[Rb*hlkkXVW+q4s(YSF0</span></pre>
<p>
So it <u>is</u> possible to fit a complete GUID in 20 printable ASCII characters using the latest and greatest <a href="http://en.wikipedia.org/wiki/ASCII_Armor">ASCII Armor</a>. But just barely!
</p>
<p>
In the process of writing this entry, I couldn't find any C# or VB.NET implementions of <a href="http://en.wikipedia.org/wiki/Ascii85">ASCII85</a>, so I wrote one. I'll have source code up for that shortly.
</p>
<p>
* The trailing "==" in Base64 is an end of line marker and should not count towards the character total.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2005-10-06T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/equipping-our-ascii-armor/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ C# implementation of ASCII85 ]]></title>
<link>https://blog.codinghorror.com/c-implementation-of-ascii85/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>As promised, here is my C# implementation of the ASCII85 algorithm. This code is a loose port of the C sample referenced from <a href="http://en.wikipedia.org/wiki/Ascii85">the Wikipedia page</a>. It's too much code to paste into a single entry, so I packaged it as a VS.NET 2003 solution -- using <a href="http://www.codinghorror.com/blog/archives/000368.html">Clean Sources Plus</a>, of course!</p>
<ul>
<li>
<a href="https://github.com/coding-horror/ascii85">VS.NET 2003 ASCII85 console solution</a> (4kb)
</li>
</ul>
<p>This includes both encoding and decoding, with reasonable data validation and a few minor options. Here's a quick list of the public methods:</p>
<pre>Encode(byte[] ba)
Decode(string s)
</pre>
<p>And a handful of properties:</p>
<pre>
EnforceMarks (bool)
LineLength (int)
PrefixMark (string)
SuffixMark (string)
</pre>
<p>The sample app includes a basic test harness which tests string and binary file encoding, as well as some bad data scenarios. Here's the default demo running against the vaguely creepy <a href="http://en.wikipedia.org/wiki/Wikipedia:Logos_and_slogans">Wikipedia slogan</a>:</p>
<img alt="image placeholder" >
<p>Of course, converting printable text to, er.. printable text.. isn't exactly an earth-shattering demo. Normally you'd be doing this on some kind of real binary data, as in the <a href="http://blog.codinghorror.com/equipping-our-ascii-armor/">GUID.ToByteArray() example</a>.</p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2005-10-07T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/c-implementation-of-ascii85/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ ALT+TAB Extreme* ]]></title>
<link>https://blog.codinghorror.com/alttab-extreme/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
When I see people using the default, crappy Windows ALT+TAB task switching behavior, <b>I experience physical pain</b>.
</p>
<p>
<a href="http://www.ntwind.com/taskswitchxp/index.html">TaskSwitchXP</a> is completely free and so much better. It's super small, totally elegant, lightning fast, and generally a massive improvement in task switching functionality. <b>Friends don't let friends suffer through the default Windows ALT+TAB.</b> If I was forced to run only one Windows enhancement on my machine, this would be my choice.
</p>
<p>
<a href="http://www.ntwind.com/taskswitchxp/index.html"><img alt="image placeholder" >
</p>
<p>
Since this is a static screenshot, I have to explain a few things.
</p>
<p>
</p>
<ul>
<li>you can use your mouse to switch to any active task
</li>
<li>as you hover over the tasks, the screenshot preview changes.
</li>
<li>the mousewheel and arrow keys cycle through the tasks
</li>
</ul>
<p>
TaskSwitchXP works flawlessly with the default install options, but there are a bunch of advanced tweaks, keyboard shortcuts, and an extensive configuration interface that you might want to explore. I highly recommend reading through the <a href="http://www.ntwind.com/taskswitchxp/qstart.html">quick start guide</a>.
</p>
<p>
Note that Windows Vista has two new ALT+TAB behaviors as of this writing, and one of them is <a href="http://www.extremetech.com/slideshow_viewer/0,1205,l=&amp;s=200&amp;a=159919&amp;po=1,00.asp">a simple set of scrolling screenshots</a>, somewhat similar to what TaskSwitchXP already offers.
</p>
<p>
* Extreme as in <a href="http://www.extremeironing.com/">Extreme Ironing</a>. <i>EXTREME!!</i>
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2005-10-08T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/alttab-extreme/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ Keyboard Shortcut Summary Macro ]]></title>
<link>https://blog.codinghorror.com/keyboard-shortcut-summary-macro/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>I finally had time to improve my <strong>Visual Studio .NET keyboard shortcut summary macro</strong>. Instead of writing HTML   to the console*, it now creates a HTML file in your user documents folder, and navigates the IDE to the created   file:</p>
<p><img alt="image placeholder" >
<p><a href="http://www.codinghorror.com/files/keyboard-shortcut-list-macro-2.zip">Download the Keyboard Shortcut   Summary Macro</a> (2kb ZIP)</p>
<p>The advantage of a macro, of course, is that <strong>it queries the IDE for the actual keyboard bindings</strong>. It can   also be sorted and grouped however you like. Very handy for erstwhile <a href="http://www.codinghorror.com/blog/archives/000209.html">keyboard ninjas</a>! This macro is tested and working   in both VS.NET 2003 and VS 2005. Note that the macro generates an appropriately named file in each case:</p>
<p> </p>
<ul>
<li>My DocumentsVisual Studio .NET 2005 Keyboard Shortcuts.htm </li>
<li>My DocumentsVisual Studio .NET 2003 Keyboard Shortcuts.htm </li>
</ul>
<p>It's also smart enough not to re-render if the file already exists. If you want to force a re-render, delete the   file.</p>
<p>Here's how to install and run this macro:</p>
<p> </p>
<ol>
<li>go to Tools - Macros - IDE </li>
<li>create a new Module named "KeyboardShortcuts" under "MyMacros" </li>
<li>paste the above code into the module </li>
<li>add a reference to the System.Data namespace*; make sure it builds with no errors </li>
<li>close the macro IDE window </li>
<li>go to Tools - Macros - Macro Explorer </li>
<li>A new macro named "List" will be under "KeyboardShortcuts." Double-click it to run the macro </li>
<li>the macro will take a moment to write the keyboard shortcuts to a HTML file, then open the HTML file in the   IDE. </li>
</ol>
<p>* in VS 2005, there are a few minor extra dependencies: you'll have to add a reference to System.Xml and also   import EnvDTE80.</p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2005-10-09T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/keyboard-shortcut-summary-macro/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ Why Do Login Dialogs Have a "User" Field? ]]></title>
<link>https://blog.codinghorror.com/why-do-login-dialogs-have-a-user-field/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
In <a href="http://www.amazon.com/exec/obidos/ASIN/0201379376/codihorr-20">The Humane Interface</a>, the late <a href="http://en.wikipedia.org/wiki/Jef_Raskin">Jef Raskin</a> asks an intriguing question: <b>why do login dialogs have a "User" field?</b>
</p>
<p>
Shouldn't login dialogs look more like this?
</p>
<p>
<img alt="image placeholder" >
</p>
<p>
And you know what? He's right. <b>Your password alone should be enough information for the computer to know who you are. </b>
</p>
<p>
As software developers, we constantly worry about edge conditions. So let's put our thinking caps on. Why <i>can't</i> this work?
</p>
<p>
</p>
<ul>
<li>
<b>The username adds security.</b> We broadcast our username in every email we send. There's no security in a username. It's public information.
</li>
<li>
<b>No two users could have the same password.</b> Do we really want two users to have the same password? Doesn't that imply that the password is already fatally flawed? Enforcing password uniqueness seems like a net benefit for everyone involved.
</li>
<li>
<b>Users can't choose simple passwords.</b> Users should never be allowed to choose a simple password. Simple passwords aren't secure, even with a username/password combo. If we required users to create <a href="http://www.codinghorror.com/blog/archives/000342.html">pass-phrases instead of single passwords</a>, they'd be plenty unique, easier to remember, and more secure. Using password alone would encourage the choice of far better passwords than we could ever hope to get with a traditional username/password combination.
</li>
</ul>
<p>
The more I think about this, the more I think username/password is simply a bad convention that nobody has sufficiently questioned. As Jef states:
</p>
<p>
</p>
<blockquote><i>
When the idea of improving the interface to a website or a computer system by simplifying the sign-on process to require only a password is suggested, it is usually rejected on one of two grounds. Either the programmers say that's just not the way it's done, or they say that they have no control over the sign-on procedure. But someone, of course, does have that control.
</i></blockquote>
<p>
It's time to take control by <a href="http://www.codinghorror.com/blog/archives/000360.html">evangelizing pass-phrases</a> and <b>pushing to remove the user field from login forms</b>.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2005-10-10T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/why-do-login-dialogs-have-a-user-field/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ The Best of Creative Computing ]]></title>
<link>https://blog.codinghorror.com/the-best-of-creative-computing/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
In the process of researching a few recent blog entries, I found the amazing <a href="http://www.atariarchives.org/">Atari Archives</a>. The title is a little misleading; it isn't completely Atari specific. The archives contain incredible page-by-page high resolution images of many classic computer books, including <b>The Best of Creative Computing</b>, <a href="http://www.atariarchives.org/bcc1/">volume 1</a> (1976) and <a href="http://www.atariarchives.org/bcc2/">volume 2</a> (1977).
</p>
<p>
Creative Computing was <a href="http://en.wikipedia.org/wiki/Creative_Computing">the original D.I.Y. computer enthusiast 'zine</a>, full of irreverent articles and BASIC program listings for classic text mode games like <b>Hunt The Wumpus</b>, <b>Eliza</b>, and <b>Super Star Trek</b>. In the 70's, computing was almost an alternative culture, as evinced by the <a href="http://en.wikipedia.org/wiki/Robert_Crumb">R. Crumb</a> art on <a href="http://www.atariarchives.org/bcc1/showpage.php?page=back1">the rear cover of Volume 2</a>.
</p>
<p>
<a href="http://www.atariarchives.org/bcc1/showpage.php?page=cover1"><img alt="image placeholder" >
</a>
 
<a href="http://www.atariarchives.org/bcc2/showpage.php?page=cover"><img alt="image placeholder" >
</a>
</p>
<p>
I had so much fun browsing the archives that I wanted a copy of these classics for myself. Surprisingly, there are <a href="http://www.amazon.com/exec/obidos/ASIN/0916688038/codihorr-20">a handful of used copies available on Amazon</a>, and I was able to purchase both Volume 1 and Volume 2 in excellent condition.
</p>
<p>
I never read <a href="http://www.vintage-computer.com/creativecomputing.shtml">Creative Computing</a> magazine. However, the best BASIC game listings were culled by the editor, David Ahl*, and republished as <a href="http://www.atariarchives.org/basicgames/">Basic Computer Games</a> (1978) and <a href="http://www.atariarchives.org/morebasicgames/">More Basic Computer Games</a> (1979). I owned well-worn copies of both. While much more staid and commercial than the magazine, the program listings in these books were illustrated with some distinctive and downright weird illustrations. Here's one for the Man-Eating Rabbit game:
</p>
<p>
<img alt="image placeholder" >
</p>
<p>
I spent god knows how many hours typing game listings from these books into the Apple //c, Coleco Adam, and TI 99/4a. It's probably part of the reason why I'm a programmer today. It's also the reason why I'll never type code in from a printed page ever, ever again. Ever! If you want to experience the gameplay gold yourself, a friend of mine actually <a href="http://www.codinghorror.com/blog/files/wumpus_origin.htm">converted the Hunt the Wumpus 2 game to C#</a> as a lark.
</p>
<p>
Good times.
</p>
<p>
* David Ahl is also the original author of <a href="http://en.wikipedia.org/wiki/Minesweeper_(computer_game)">Minesweeper</a> in 1973. Go figure. Here's <a href="http://www.atarimagazines.com/creative/daveahl/">a 2003 interview with David</a> if you're curious what he's been up to more recently. His comments on what Creative Computing would look like today remind me a lot of the current blog culture!
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2005-10-11T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/the-best-of-creative-computing/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ Wrangling ASP.NET Viewstate ]]></title>
<link>https://blog.codinghorror.com/wrangling-aspnet-viewstate/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
Inspired by Scott Hanselman's recent <a href="http://www.hanselman.com/blog/MovingViewStateToTheBottomOfThePage.aspx">post on ASP.NET viewstate wrangling</a>, here's a roundup of tips for dealing with that ornery viewstate stuff. The first rule of thumb, of course, is to <b>turn it off whenever you can</b>. But sometimes you can't.
</p>
<p>
I think the DotNetNuke developers were the first to realize that <b>moving the viewstate to the bottom of the page</b> makes the page <a href="http://www.eggheadcafe.com/articles/20050316.asp">much more Google-friendly</a>. Google only indexes the first (n) bytes of the page, so if you have 12 kb of Base64 encoded schmutz in your header, that isn't exactly helping people find your pages via Google searches. Scott Mitchell compares and contrasts <a href="http://scottonwriting.net/sowblog/posts/3536.aspx">several methods of moving the viewstate input field</a> to the bottom of the HTML form.
</p>
<p>
The benefits from <b>compressing viewstate</b> are <a href="http://www.mostlylucid.co.uk/archive/2004/01/03/694.aspx">somewhat marginal</a>, nowhere near what you'd get from zipping plain text. but it's still worth trying. Scott Hanselman points us to a nifty <a href="http://www.hanselman.com/blog/CommentView,guid,febce059-7e7c-439e-af3d-c53d250b3e9c.aspx">base page class that automagically compresses viewstate</a> for you.
</p>
<p>
There's also an interesting <a href="http://www.eggheadcafe.com/articles/20040613.asp">article on eggheadcafe</a> about <b>moving viewstate to the server</b>. Peter Bromberg benchmarks the performance difference between viewstate on the client, and viewstate on the server in Session, Application, or Cache.
</p>
<p>
ASP.NET 2.0 brings <a href="http://www.nikhilk.net/ViewStateImprovements.aspx">a few much-needed improvements to Viewstate</a>:
</p>
<ul>
<li>Viewstate can be safely disabled without destroying intrinsic control behaviors thanks to a new container, <a href="http://pluralsight.com/blogs/fritz/archive/2004/07/01/472.aspx">Controlstate</a>.
</li>
<li>An <a href="http://pluralsight.com/blogs/fritz/archive/2004/06/03/408.aspx">improved formatter class</a>, ObjectStateFormatter, appears to reduce ViewState size by half.
</li>
</ul>
<p>
Here's to progress. Now pardon me while I crack my bullwhip. <i>Hyaa!!</i>
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2005-10-12T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/wrangling-aspnet-viewstate/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ Microchip Easter Eggs ]]></title>
<link>https://blog.codinghorror.com/microchip-easter-eggs/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
Software engineers aren't the only ones <a href="http://www.eeggs.com/tree/153.html">planting secret easter eggs in their products</a>.
</p>
<p>
Here's a fun article on the
<a href="http://news.com.com/What+art+is+hiding+on+your+microchip/2100-1006_3-5893374.html">hidden art etched into microchips</a>. There are a handful of images in the article, but many more at the Silicon Zoo website. Here's one I found of Mr. T on, appropriately enough, a <b>T1 transceiver integrated circuit</b>:
</p>
<p>
<a href="http://micro.magnet.fsu.edu/creatures/pages/mistert.html"><img alt="image placeholder" >
</a>
</p>
<p>
Notice the medallion says "T1". Who said hardware engineers didn't have a sense of humor?
</p>
<p>
If you want to see more of these hardware in-jokes, visit the <a href="http://micro.magnet.fsu.edu/creatures/index.html">Molecular Expressions: Silicon Zoo page</a> and scroll down past the interactive Java tutorial image in the middle of the page. Direct links to the rest of the chip images start just below there.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2005-10-13T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/microchip-easter-eggs/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ Pimp My IDE ]]></title>
<link>https://blog.codinghorror.com/pimp-my-ide/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
I just updated my <a href="http://www.codinghorror.com/blog/archives/000157.html">Programming Fonts entry</a>. It now includes a much larger code sample in each font, and a few new fonts including the "gee, did I really just pay $100 for a single font" <a href="http://www.fsd.it/fonts/pragma.htm">Pragmata</a>. Be sure to <a href="http://www.codinghorror.com/blog/archives/000157.html">check it out</a>.
</p>
<p>
It's a shame that there's no <a href="http://www.csszengarden.com/">CSS Zen Garden</a> for <b>IDE coloring and layout</b>. I occasionally find amazing color schemes, such as <a href="http://blog.xeraph.org/coding/2005/08/07/programming-fonts">this one from Leon Breedt's blog:</a>
</p>
<p>
<img alt="image placeholder" >
</p>
<p>
<a href="http://www.codinghorror.com/blog/archives/000340.html">White on black color schemes</a> can be hard on the eyes, but this one has less contrast. It's more of a white on brown, with <a href="http://www.colorblender.com/">soothing related palette choices</a> for keywords and strings. I'd actually consider using it. If only there was a site where I could browse more great looking IDE layouts like this one...
</p>
<p>
Well, we may not have that, but <b>I'd like to see what IDE layouts you guys (and gals) are using</b> -- if they are significantly different than the VS.NET default, naturally. Post URLs to screenshots in the comments. I'm mostly interested in the code editing panel, but feel free to show whatever you think is worth showing in the screenshot. Here's mine:
</p>
<p>
<img alt="image placeholder" >
</p>
<p>
With the screenshot, include a description of the rationale behind your decisions. Here are mine:
</p>
<p>
</p>
<ul>
<li>Because my <a href="http://www.codinghorror.com/blog/archives/000340.html">research on code colorization</a> showed very definitively that 100% contrast schemes are harder to read, I changed my background from white to 248, 248, 248.
</li>
<li>I'm a big fan of RGB (red, green, blue) color schemes. Keywords are bright blue by default in the IDE; I modify that to the slightly darker Navy, and use Magenta for identifiers, and leave the comments at their default green.
</li>
<li>If I wasn't using the <b>Pragmata</b> font, I would be using <b>Proggy</b> or <b>Lucida Typewriter</b>. See my <a href="http://www.codinghorror.com/blog/archives/000157.html">programming font roundup</a> for more.
</li>
<li>I like using a background color for strings so spaces and other "non-characters" are easier to see.
</li>
<li>I prefer a much brighter highlight for selected code than the boring old white-on-navy default.
</li>
<li>I recently started highlighting numbers as well as strings. The jury is still out on this, but numbers tend to be significant in code (eg, <a href="http://en.wikipedia.org/wiki/Magic_number_(programming)">Magic Numbers</a>). It's been helpful so far.
</li>
</ul>
<p>
But enough about me. Go ahead-- <b>Pimp Your IDE!</b> Post a link to a screenshot in the comments along with some explanation!
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2005-10-14T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/pimp-my-ide/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ Media Center 2005 adds Non-Linear Stretch ]]></title>
<link>https://blog.codinghorror.com/media-center-2005-adds-non-linear-stretch/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
As <a href="http://www.shahine.com/omar/MediaCenterUpdateRollup2.aspx">Omar</a> recently pointed out, <a href="http://support.microsoft.com/default.aspx?scid=kb;en-us;900325&amp;sd=rss&amp;spid=7024">Update Rollup 2 for Windows XP Media Center 2005</a> adds one essential new feature that makes it a "must have" upgrade -- <b>non-linear stretch!</b> I took a few screenshots on <a href="http://www.codinghorror.com/blog/archives/000221.html">my HTPC</a> to illustrate.
</p>
<p>
This is <b>typical 4:3 television content</b>:
</p>
<p>
<img alt="image placeholder" >
</p>
<p>
On a widescreen 16:9 display, the content just doesn't fit-- at least not at the original aspect ratio. You get black bars on the side. So what can we do about this? You could <b>zoom in</b>:
</p>
<p>
<img alt="image placeholder" >
</p>
<p>
Look how much content we've cropped away around the edges! Let's try a simple <b>stretch to fit</b> instead:
</p>
<p>
<img alt="image placeholder" >
</p>
<p>
No content is lost, but we've distorted everything: it's wider and fatter.
</p>
<p>
Clearly zooming and stretching both have their drawbacks. Non-linear zoom, on the other hand, is a happy combination of both: <b>the image is slightly cropped on the top and bottom, then progressively stretched more towards the edges; the center is barely stretched at all:</b>
</p>
<p>
<img alt="image placeholder" >
</p>
<p>
Microsoft calls this <b>Intelligent Zoom</b>, and it has far fewer downsides than a pure zoom or stretch. It's my new favorite viewing mode for 4:3 content!
</p>
<p>
This new viewing mode isn't just cosmetic. It can be essential to preserving your plasma or LCD television investment! <b>After 8 months, our plasma TV had noticeable burn-in on the edges where the "black bars" appear for the 4:3 content!</b> I immediately switched the bars to 100% white until the wear levels equalized, and now I have the bars permanently set to 50% grey.
</p>
<p>
However, this new non-linear stretch mode is an even better option. Highly recommended.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2005-10-15T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/media-center-2005-adds-non-linear-stretch/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ Code Snippets in VS.NET 2005 ]]></title>
<link>https://blog.codinghorror.com/code-snippets-in-vsnet-2005/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><style type="text/css">
.kbd {font-family:arial,helvetica,sans-serif;padding:5px 3px;white-space:nowrap;color:#000;background:#eee;border-width:2px 4px 5px 3px;border-style:solid;border-color:#ccc #aaa #888 #bbb;}
.i20 {margin:8px 10px;}
</style>
<p>
One of the most enjoyable new features in Visual Studio .NET 2005 is <a href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/dnvs05/html/codesnippets.asp">Code Snippets</a>. This animated GIF illustrates how it works:
</p>
<p>
<img alt="image placeholder" >
</p>
<p>
I'm demonstrating three types of snippets here:
</p>
<ul>
<li>simple expansion
</li>
<li>template expansion (with variables)
</li>
<li>surround
</li>
</ul>
<p>
The easiest way to enter a code snippet is to <b>begin typing part of the snippet shortcut name</b>, eg "prop" for property expansion. Once you've typed enough to uniquely select the snippet shortcut name, press:
</p>
<p>
</p>
<p class="i20"><span class="kbd">Tab</span>,<span class="kbd">Tab</span> (in C#)
</p>
<p>
</p>
<p class="i20"><span class="kbd">?</span>,<span class="kbd">Tab</span> (in VB.NET)
</p>
<p>
.. and the snippet will appear. If it's a templated snippet:
</p>
<p>
</p>
<p class="i20"><span class="kbd">Tab</span> advances to the next field
</p>
<p>
</p>
<p class="i20"><span class="kbd">Shift</span>+<span class="kbd">Tab</span> moves to the previous field
</p>
<p>
</p>
<p class="i20"><span class="kbd">Enter</span> completes the snippet and resumes editing at your previous cursor position
</p>
<p>
If you want to enclose code in a surrounding snippet (eg, you have code highlighted for a region), you must <b>manually invoke snippet intellisense</b> by pressing:
</p>
<p>
</p>
<p class="i20"><span class="kbd">Ctrl</span>+<span class="kbd">K</span>, <span class="kbd">Ctrl</span>+<span class="kbd">X</span>
</p>
<p>
VB.NET's implementation of snippets is a bit more robust than the one in C#.
</p>
<ol>
<li>VB.NET has a zillion snippets shipping in the box where C# has maybe.. two dozen?
</li>
<li>VB.NET supports code snippets that automatically add any necessary Import statements.
</li>
</ol>
The VB IDE team has a helpful <a href="http://blogs.msdn.com/vbide/archive/2005/07/22/441923.aspx">code snippets FAQ</a> that covers the language differences in detail.
<p>
There's a snippet management UI you can invoke via the <b>Tools, Code Snippets Management</b> menu, or by pressing:
</p>
<p>
</p>
<p class="i20"><span class="kbd">Ctrl</span>+<span class="kbd">K</span>, <span class="kbd">Ctrl</span>+<span class="kbd">B</span>
</p>
<p>
From here you can import and export snippet files, but there's no editor for creating new ones. Snippets are <a href="http://msdn2.microsoft.com/en-us/library/ms171418(en-us,vs.80).aspx">just XML files</a> with a ".snippet" extension that live in these language specific folders:
</p>
<ul>
<li>c:Program FilesMicrosoft Visual Studio 8VBSnippets1033
</li>
<li>c:Program FilesMicrosoft Visual Studio 8VC#snippets1033
</li>
</ul>
Assuming you don't enjoy editing raw XML files, it might be easier to go with Microsoft's <a href="http://www.gotdotnet.com/codegallery/codegallery.aspx?id=b0813ae7-466a-43c2-b2ad-f87e4ee6bc39">Snippy</a>, a GUI for creating VB.NET and C# code snippets. There's also Michael Palermo's new <a href="http://www.gotcodesnippets.net/Default.aspx">website for sharing code snippets</a>, although there don't seem to be many there at the moment.
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2005-10-16T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/code-snippets-in-vsnet-2005/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ Unit Testing vs. Beta Testing ]]></title>
<link>https://blog.codinghorror.com/unit-testing-vs-beta-testing/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
Why does Wil Shipley, the <a href="http://www.codinghorror.com/blog/archives/000336.html">author of Delicious Library</a>, <a href="http://wilshipley.com/blog/2005/09/unit-testing-is-teh-suck-urr.html">hate unit testing so much?</a>
</p>
<p>
</p>
<blockquote>
<i>
I've certainly known companies that do "unit testing" and other crap they've read in books. Now, you can argue this point if you'd like, because I don't have hard data; all I have is my general intuition built up over my paltry 21 years of being a professional programmer.
</i><p>
[..] You should test. Test and test and test. But I've NEVER, EVER seen a structured test program that (a) didn't take like 100 man-hours of setup time, (b) didn't suck down a ton of engineering resources, and (c) actually found any particularly relevant bugs. <b>Unit testing is a great way to pay a bunch of engineers to be bored out of their minds and find not much of anything.</b> [I know -- one of my first jobs was writing unit test code for Lighthouse Design, for the now-president of Sun Microsystems.] You'd be MUCH, MUCH better offer hiring beta testers (or, better yet, offering bug bounties to the general public).
</p>
<p>
Let me be blunt: YOU NEED TO TEST YOUR DAMN PROGRAM. Run it. Use it. Try odd things. Whack keys. Add too many items. Paste in a 2MB text file. FIND OUT HOW IT FAILS. I'M YELLING BECAUSE THIS IS IMPORTANT.
</p>
<p>
Most programmers don't know how to test their own stuff, and so when they approach testing they approach it using their programming minds: "Oh, if I just write a program to do the testing for me, it'll save me tons of time and effort."
</p>
</blockquote>
<p>
It's hard to completely disregard the opinion of a veteran developer shipping an application that gets <a href="http://www.macworld.com/2005/03/reviews/deliciouslibrary/">excellent reviews</a>. Although his opinion may seem heretical to the <a href="http://www.testdriven.com/">Test Driven Development</a> cognoscenti, I think he has some valid points:
</p>
<p>
</p>
<ul>
<li>
<b>Some bugs don't matter.</b> Extreme unit testing may reveal.. extremely rare bugs. If a bug exists but no user ever encounters it, do you care? If a bug exists but only one in ten thousand users ever encounters it, do you care? Even Joel Spolsky <a href="http://www.joelonsoftware.com/articles/SetYourPriorities.html">seems to agree</a> on this point. Shouldn't we be fixing bugs based on data gathered from actual usage rather than a stack of obscure, failed unit tests?
</li>
<li>
<b>Real testers hate your code.</b> A unit test simply verifies that something works. This makes it far, far too easy on the code. Real testers hate your code and will do whatever it takes to break it-- feed it garbage, send absurdly large inputs, enter unicode values, double-click every button in your app, etcetera.
</li>
<li>
<b>Users are crazy.</b> Automated test suites are a poor substitute for real world beta testing by actual beta testers. Users are erratic. Users have favorite code paths. Users have weird software installed on their PCs. Users are crazy, period. Machines are far too rational to test like users.
</li>
</ul>
<p>
While I think basic unit testing can <i>complement</i> formal beta testing, I tend to agree with Wil: <b>the real and best testing occurs when you ship your software to beta testers.</b> If unit test coding is cutting into your beta testing schedule, you're making a very serious mistake.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2005-10-17T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/unit-testing-vs-beta-testing/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ If You're Reading This, You Are a Low-Value Demographic ]]></title>
<link>https://blog.codinghorror.com/if-youre-reading-this-you-are-a-low-value-demographic/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
Jakob Neilsen may not be today's <a href="http://mentalized.net/journal/2005/10/10/building_your_very_own_web20_layout/">hip and trendy Web 2.0</a> fixture, but he's still dispensing solid advice. Check out his <a href="http://www.useit.com/alertbox/weblogs.html">Top Ten Blog Design Mistakes</a>:
</p>
<p>
</p>
<ol>
<li>No Author Biographies
</li>
<li>No Author Photo
</li>
<li>Nondescript Posting Titles
</li>
<li>Links Don't Say Where They Go
</li>
<li>Classic Hits are Buried
</li>
<li>The Calendar is the Only Navigation
</li>
<li>Irregular Publishing Frequency
</li>
<li>Mixing Topics
</li>
<li>Forgetting That You Write for Your Future Boss
</li>
<li>Having a Domain Name Owned by a Weblog Service
</li>
</ol>
<p>
It's a great set of guidelines that I completely agree with. However, it is missing one humongous mistake: <b>disabling comments</b>. <a href="http://jerryslezak.net/scissors/?p=133">You don't have a blog until you allow public, two way communication between the author and the reader</a>. And when I say communication, I mean it: the author has to actually read and even (gasp!) respond to the comments. Otherwise you're just publishing content, like every other newspaper since the printing press was invented. Meh.
</p>
<p>
Unfortunately, I'm guilty of a few of these mistakes, notably #2 and #5. And technically this post violates #3 as well, but I coudn't resist:
</p>
<p>
</p>
<blockquote>
If you publish on many different topics, you're less likely to attract a loyal audience of high-value users. Busy people might visit a blog to read an entry about a topic that interests them. They're unlikely to return, however, if their target topic appears only sporadically among a massive range of postings on other topics. <b>The only people who read everything are those with too much time on their hands (a low-value demographic).</b>
</blockquote>
<p>
I certainly regretted not having my picture on my blog when <a href="http://www.codinghorror.com/blog/archives/000388.html">I went to PDC 2005</a> and belatedly realized it was virtually impossible for me to meet any other bloggers. I only recognized people who were already famous (eg, <a href="http://www.pluralsight.com/blogs/dbox/default.aspx">Don Box</a>) or had pictures on <i>their</i> blogs (eg, <a href="http://blogs.msdn.com/saraford/">Sara Ford</a>). I know, duh.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2005-10-18T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/if-youre-reading-this-you-are-a-low-value-demographic/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ Running XP with the pagefile disabled ]]></title>
<link>https://blog.codinghorror.com/running-xp-with-the-pagefile-disabled/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
If you have 2 gigabytes (or more) of memory in your PC, <b>have you considered turning off your pagefile?</b> Here's how to do it:
</p>
<ol>
<li>Control Panel, System
</li>
<li>Advanced tab
</li>
<li>Performance group, Settings button
</li>
<li>Advanced tab
</li>
<li>Virtual Memory group, Change button
</li>
<li>Select "No paging file" and click Set, then OK.
</li>
</ol>
<p>
<img alt="image placeholder" >
</p>
<p>
I've heard people talk about this before, but I had always disregarded it as crazy talk. The pagefile is <a href="http://www.windowsdevcenter.com/pub/a/windows/2004/04/27/pagefile.html">a critical part of the operating system</a>:
</p>
<p>
</p>
<blockquote><i>
The paging file (pagefile.sys) is a hidden system file that forms a key component of the Virtual Memory Manager (VMM) on Windows platforms. The origin of this file dates back to early 1990s when Windows ran on PC hardware that had limited physical memory due to the high cost of RAM and the limitations of motherboard design. (The concept of virtual memory itself, of course, is <a href="http://cne.gmu.edu/itcore/virtualmemory/vmhistory.html">much older</a>.) The purpose of the pagefile was to allow memory-hungry applications to circumvent insufficient RAM by allowing seldom-used pages of RAM to be swapped to disk until needed (hence the term swapfile used on earlier Windows platforms). For example, if a Windows 3.1 machine had 8MB of RAM and a 12MB permanent swap file (386spart.par) on its C: drive, then the effective memory that applications could use was 8 + 12 = 20MB.
</i></blockquote>
<p>
This idea was indeed crazy in a world where 256mb, 512mb and 1gb of memory were the norm. <b>Now that 2 gb of memory is relatively common, disabling the pagefile isn't such a crazy idea any more.</b>
</p>
<p>
A number of developers are already running their systems with the pagefile disabled, as <a href="http://agileprogrammer.com/geeknoise/archive/2005/10/16/8673.aspx">this post by Peter Provost illustrates</a>. Clearly it works. I've been running this way for a few days, and I haven't encountered any issues yet.
</p>
<p>
However, I'm not so sure there's any practical performance increase from disabling your pagefile. <b>If our systems were never running out of physical memory with 2gb, then theoretically the pagefile never gets used anyway.</b> And disabling the pagefile also introduces a new risk: if an app requests more memory than is physically available, it will receive a stern "out of memory" error instead of the slow disk-based virtual memory the OS would normally provide. <a href="http://emea.windowsitpro.com/Article/ArticleID/42080/42080.html?Ad=1">This Q&amp;A outlines the risks</a>:
</p>
<p>
</p>
<blockquote>
<i>
<b>So, if you have a lot of RAM, you don't need a pagefile, right?</b> Not necessarily. When certain applications start, they allocate a huge amount of memory (hundreds of megabytes typically set aside in virtual memory) even though they might not use it. If no pagefile (i.e., virtual memory) is present, a memory-hogging application can quickly use a large chunk of RAM. Even worse, just a few such programs can bring a machine loaded with memory to a halt. Some applications (e.g., Adobe Photoshop) will display warnings on startup if no pagefile is present.
</i><p>
My advice, therefore, is not to disable the pagefile, because Windows will move pages from RAM to the pagefile only when necessary. Furthermore, you gain no performance improvement by turning off the pagefile. To save disk space, you can set a small initial pagefile size (as little as 100MB) and set a high maximum size (e.g., 1GB) so that Windows can increase the size if needed. With 1GB of RAM under normal application loads, the pagefile would probably never need to grow.
</p>
</blockquote>
<p>
This is one case where the <a href="http://www.brianmadden.com/content/content.asp?ID=69">32-bit process memory limit of 4 gigabytes</a> -- which is really 2 gigabytes once you factor in the Windows kernel memory split -- works in our favor.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2005-10-19T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/running-xp-with-the-pagefile-disabled/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ The Nigerian Spammer Anthem ]]></title>
<link>https://blog.codinghorror.com/the-nigerian-spammer-anthem/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
A <a href="http://www.latimes.com/news/printedition/la-fg-scammers20oct20,0,746621,full.story">recent Los Angeles Times article</a> reveals that the <a href="http://www.snopes.com/crime/fraud/nigeria.asp">419 scam spammers</a> have their very own anthem: a song titled <i>I Go Chop Your Dollars</i> by Nigerian recording artist Osofia:
</p>
<p>
</p>
<blockquote>
"419 is just a game, you are the losers, we are the winners.<br>
White people are greedy, I can say they are greedy<br>
White men, I will eat your dollars, will take your money and disappear.<br>
419 is just a game, we are the masters, you are the losers."
<p>
<object height="344" width="425"><param name="movie" value="http://www.youtube.com/v/f1nKR3gYRY8&amp;hl=en&amp;rel=0">
<embed height="344" src="http://www.youtube.com/v/f1nKR3gYRY8&amp;hl=en&amp;rel=0" type="application/x-shockwave-flash" width="425"></embed></object>
</p>
</blockquote>
<p>
We may <a href="http://j-walk.com/other/conf/">joke about the 419 scams</a>.. after all, who in their right mind actually falls for <a href="http://www.snopes.com/info/notes/sonspam.asp">this stuff</a>? But like all spammers, <b>they do it because it works</b>:
</p>
<p>
</p>
<blockquote>[Samuel] sent 500 e-mails a day and usually received about seven replies. Shepherd would then take over. "When you get a reply, it's 70% sure that you'll get the money," Samuel said.
</blockquote>
<p>
Spam only became a problem for me about a year and a half ago, but clearly it's here to stay. I've <a href="http://www.codinghorror.com/blog/archives/000086.html">used POPFile for about a year</a> to cut down on my email spam**. Some people swear by <b>challenge-response human verification systems</b> such as <a href="http://spamarrest.com/">SpamArrest</a>, but as Scott Mitchell notes, <a href="http://scottonwriting.net/sowblog/posts/647.aspx">this system has some issues</a>:
</p>
<p>
</p>
<blockquote>
While the challenge/response system was effective in reducing my spam intake from about 100 messages a day to around 1 or 2 messages a day, the approach, in my estimation, was not ideal. One big disadvantage was that fewer people took the time to respond to the challenge email than I had anticipated, for two reasons:
<ol>
<li>Some people don't want to take the time to follow instructions for a challenge email. Maybe their message wasn't that important after all, maybe they're busy, or maybe they just don't like being told what to do. These people's messages, I reckoned, weren't that vital. If you can't take two seconds to respond to the challenge, then just how important is that email you're sending me?
</li>
<li>What worried me most, and led me to suspend my C/R anti-spam system, is that I noticed some people weren't responding to the challenge email because they never received it! This unfortunate circumstance could happen if their own spam blocking solution halted my challenge email. A couple folks informed me that Outlook 2003 categorized my challenge emails as spam. Others using a similar challenge/response anti-spam system would never get my challenge as my challenge would generate a challenge on their side.
</li>
</ol>
</blockquote>
<p>
The "I challenge your challenge!" scenario is particularly amusing. And on top of the two issues Scott highlights, there are <a href="http://www.codinghorror.com/blog/archives/000088.html">other social problems with challenge/response spam blocking</a>.
</p>
<p>
Although I've had great success with <a href="http://popfile.sourceforge.net/">POPFile</a>, which uses Bayesian filtering techniques, I had no idea that there's an even better technique: Markovian filtering. That's what <a href="http://crm114.sourceforge.net/">the CRM114 Discriminator</a>* uses. There's an <a href="http://crm114.sourceforge.net/docs/Plateau99.pdf">outstanding slide deck</a> (pdf) that explains how it all works. In a nutshell, <b>Markovian filtering weights phrases and words, whereas Bayesian filtering only looks at individual words</b>. How much better is it? I'll let the CRM114 author, Bill Yerazunis, pitch it:
</p>
<p>
</p>
<blockquote>
For the month of April 2005, I receieved over 10,000 emails. About 60% were spam. I had ZERO classification errors. ZERO.
<p>
As of Feb 1 through March 1, 2004, 8738 messages (4240 spam, 4498 nonspam), and my total error rate was ONE. That translates to better than 99.984% accuracy, which is over ten times more accurate than human accuracy
</p>
<p>
I measured my own accuracy to be around 99.84%, by classifying the same set of about 3000 messages twice over a period of about a week, reading each message from the top until I feel "confident" of the message status, (one message per screen unless I want more than one screen to decide on a message.) and doing the classification in small batches with plenty of breaks and other office tasks to avoid fatigue. Then I diff()ed the two passes to generate a result. Assuming I never duplicate the same mistake, I, as an unassisted human, under nearly optimal conditions, am 99.84% accurate.
</p>
</blockquote>
<p>
Most Bayesian techniques top out at around ~98% percent accuracy with a little training, but Markovian can achieve a rarified 99.5% accuracy. The most notable Windows port of CRM114 is <a href="http://www.spamrip.com/">SpamRIP</a>.
</p>
<p>
* A reference to the movie <a href="http://www.imdb.com/title/tt0057012/">Dr. Strangelove</a>. In the movie, the "CRM114 Discriminator" is a fictional accessory for a radio receiver that's "designed not to receive <i>at all</i>", that is, unless the message is properly authenticated.
</p>
<p>
** I have since switched to <a href="http://www.keir.net/k9.html">K9</a> because it's simpler and faster-- and does the same Bayesian filtering.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2005-10-21T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/the-nigerian-spammer-anthem/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ It looks like you're writing a for loop! ]]></title>
<link>https://blog.codinghorror.com/it-looks-like-youre-writing-a-for-loop/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
Even the best programmers <a href="http://www.codinghorror.com/blog/archives/000099.html">make shitty software, with bugs</a>. But <b>some programmers are naturally proficient at creating this special kind of software</b>, as illustrated by <a href="http://www.sampioni.com/en/Legenda/stinky.htm">a Croatian developer known as Stinky:</a>
</p>
<p>
</p>
<blockquote><i>
The anecdote that best reveals how little Stinky knew about programming started when he asked Bojan to help him solve the following problem:
<blockquote>
"I have a function that returns Boolean value. Well, I would like to call that function and store the opposite value in some variable. I could code it like this: If function = true Then variable = false Else variable = true. But I have a feeling that it can be even simpler than that. Can you tell me how?"
</blockquote>
After Bojan recovered from the shock of realizing that Stinky didn't know the basics of logical algebra, he replied that it was enough to put variable = Not function. Stinky went to check it out and after few minutes he cheerfully shouted: "It works!". Bartol was a witness to the whole scene. A few moments later he said to Bojan, "You see, my friend, to hell with education, your degree in computer science and the tons of books you read. You don't need any of that to be a champion developer like Stinky. Just learn the copy-paste method, remember all the properties of Janus Gridex and ActiveBar control, and the world is yours."
</i></blockquote>
<p>
Sure, Microsoft's <a href="http://en.wikipedia.org/wiki/Clippy">Office Assistant</a>, Clippy, gets <a href="http://www.remote-films.com/salmondays/downloads/paper_clip.mpg">a lot of flak</a>-- but wouldn't it be nice if Clippy could assist Stinky with his code?
</p>
<p>
<img alt="image placeholder" >
</p>
<p>
Or, if the IDE could detect this kind of code as it's being typed and offer some helpful advice* to Stinky?
</p>
<p>
<img alt="image placeholder" >
</p>
<p>
VS.NET 2005 also offers just-in-time intellisense for exceptions, which <a href="http://odetocode.com/Blogs/scott/archive/2005/09/14/2201.aspx">can be customized by editing the underlying XML</a>. The intellisense for a NullReferenceException isn't very helpful for a developer like Stinky; here's one way K. Scott Allen improved it:
</p>
<p>
<img alt="image placeholder" >
</p>
<p>
* Despite extensive use of my google-fu, I couldn't find the original source of this image. If anyone knows who originally created it, let me know so I can attribute it properly.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2005-10-22T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/it-looks-like-youre-writing-a-for-loop/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ Excluding Matches With Regular Expressions ]]></title>
<link>https://blog.codinghorror.com/excluding-matches-with-regular-expressions/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
Here's <a href="http://techreport.com/forums/viewtopic.php?t=34782">an interesting regex problem</a>:
</p>
<p>
</p>
<blockquote>
I seem to have stumbled upon a puzzle that evidently is not new, but for which no (simple) solution has yet been found. I am trying to find a way to exclude an entire word from a regular expression search. The regular expression should find and return everything EXCEPT the text string in the search expression.
<p>
For example, if the word fox was what I wanted to exclude, and the searched text was:
</p>
<p>
The quick brown fox jumped over the lazy dog.
</p>
<p>
... and I used a regular expression of [^"fox"] (which I know is incorrect) (why this doesn't work I don't understand; it would make life SO much easier), then the returned search results would be:
</p>
<p>
The quick brown jumped over the lazy dog.
</p>
</blockquote>
<p>
Regular expressions are great at matching. It's easy to formulate a regex using what you want to match. <b>Stating a regex in terms of what you <i>don't</i> want to match is a bit harder.</b>
</p>
<p>
One easy way to exclude text from a match is <a href="http://www.regular-expressions.info/lookaround.html">negative lookbehind</a>:
</p>
<p>
</p>
<pre>
w+b(?&lt;!bfox)
</pre>
<p>
But not all regex flavors support negative lookbehind. And those that do typically have severe restrictions on the lookbehind, eg, it must be a simple fixed-length expression. To avoid incompatibility, we can restate our solution using <a href="http://www.regular-expressions.info/lookaround.html">negative lookahead</a>:
</p>
<p>
</p>
<pre>
(?!foxb)bw+
</pre>
<p>
You can test this regex in the cool <a href="http://www.cuneytyilmaz.com/prog/jrx/">online JavaScript Regex evaluator</a>. Unfortunately, JavaScript doesn't support negative lookbehind, so if you want to test that one, <a href="http://www.regexbuddy.com/cgi-bin/affref.pl?aff=jatwood">I recommend RegexBuddy</a>. It's not free, but it's the best regex tool out there by far-- and it keeps getting better with every incremental release.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2005-10-23T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/excluding-matches-with-regular-expressions/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ The Cost of Leaving Your PC On ]]></title>
<link>https://blog.codinghorror.com/the-cost-of-leaving-your-pc-on/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
Between my server and my Windows Media Center home theater PC, I have at least two PCs on all the time at home. <b>Have you ever wondered how much it's costing you to leave a computer on 24 hours a day, 7 days a week?</b>
</p>
<p>
The first thing you need to know is <b>how much power your computer draws</b>. The best way is to <a href="http://www.codinghorror.com/blog/archives/000353.html">measure the actual power consumption</a>. You'll need a $30 device like the <a href="http://www.amazon.com/exec/obidos/ASIN/B00009MDBU/codihorr-20">Kill-a-Watt</a> to do this accurately. Once you get one, you'll inevitably go through a phase where you run around your home, measuring the power draw of everything you can plug into a wall socket. For example, I learned this weekend that our 42" plasma television draws between 90 watts (totally black screen) and 270 watts (totally white screen). Based on a little ad-hoc channel surfing with an eye on the Kill-a-Watt's LCD display, the average appears to be around 150 watts for a typical television show or movie.
</p>
<p>
But I digress. Once you've measured the power draw in watts (or <a href="http://michaelbluejay.com/electricity/computers.html">guesstimated the power draw</a>), you'll need to convert that to kilowatt-hours. Here's the kilowatt-hour calculation for my server, which draws ~160 watts:
</p>
<p>
</p>
<pre>
<span style="color:red">160 watts</span> * (8,760 hours per year) / 1000 = 1401.6 kilowatt-hours
</pre>
<p>
The other thing you'll need to know is how much you're paying for power in your area. Power here in California is rather expensive and calculated using a byzantine rate structure. According to this <a href="http://www.mercurynews.com/mld/mercurynews/news/local/states/california/northern_california/12537965.htm">recent Mercury News article</a>, the household average for our area is <b>14.28 cents per kilowatt-hour</b>.
</p>
<p>
</p>
<pre>
1401.6 kilowatt-hours * 14.28 cents / 100 = <span style="color:red">$200.15</span>
</pre>
<p>
<b>So leaving my server on is costing me $200 / year, or $16.68 per month.</b> My home theater PC is a bit more frugal at 65 watts. Using the same formulas, that costs me $81 / year or $6.75 per month.
</p>
<p>
So, how can you reduce the power draw of the PCs you leave on 24/7?
</p>
<ul>
<li>
<b>Configure the hard drives to sleep on inactivity.</b> You can do this via Control Panel, Power, and it's particularly helpful if you have multiple drives in a machine. My server has four hard drives, and they're typically asleep at any given time. That saves a solid 4-5 watts per drive.
</li>
<li>
<b>Upgrade to a more efficient power supply.</b> A certain percentage of the input power to your PC is lost as waste during the conversion from wall power to something the PC can use. At typical power loads (~90w), the average power supply efficiency is a disappointing 65%. But the good news is that <a href="http://www.silentpcreview.com/article276-page1.html">there's been a lot of recent vendor activity around more efficient power supplies</a>. The <a href="http://www.silentpcreview.com/article263-page1.html">Fortron Zen fanless power supply</a>, for example, offers an astonishing 83% efficiency at 90w load! If you upgraded your power supply, you could theoretically drop from 122w @ 65% efficiency to 105w @ 83% efficiency. That's only a savings of $20 per year in this 90w case, but the larger the power usage, the bigger the percentage savings.
</li>
<li>
<b>Don't use a high-end video card.</b> I'm not sure this is widely understood now, but after the CPU, the video card is <i>by far</i> the biggest power consumer in a typical PC. It's not uncommon for the typical "mid-range" video card to <a href="http://www.codinghorror.com/blog/archives/000662.html">suck down 20+ watts at idle</a> -- and far more under actual use or gameplay! The worrying number, though, is the idle one. Pay close attention to the video card you use in an "always-on" machine.
</li>
<li>
<b>Configure the monitor to sleep on inactivity.</b> This one's kind of a no-brainer, but worth mentioning. A CRT eats about 80 watts, and a LCD of equivalent size less than half that.
</li>
<li>
<b>Disconnect peripherals you don't use.</b> Have a server with a CD-ROM you rarely use? Disconnect the power to it. A sound card you don't use? Pull it out. Redundant fans? Disconnect them. That's only a savings of a few watts, but it all adds up.
</li>
</ul>
<p>
If you're building a new PC, it's also smart to avoid Intel's Pentium 4 series, as they use <a href="http://blogs.zdnet.com/BTL/?p=1670">substantially more power than their AMD equivalents</a>. Intel's Pentium-M, on the other hand, delivers the best bang for the watt on the market. Although it was originally designed for laptops, <a href="http://www.tomshardware.com/howto/20050621/index.html">it can be retrofitted into desktops</a>.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2005-10-24T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/the-cost-of-leaving-your-pc-on/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ The Cognitive Style of Visual Studio ]]></title>
<link>https://blog.codinghorror.com/the-cognitive-style-of-visual-studio/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
<a href="http://www.charlespetzold.com/bio.html">Charles Petzold</a> is widely known as <b>the guy who put the h in hWnd</b>.  He's the author of the seminal 1988 book <a href="http://www.amazon.com/exec/obidos/ASIN/157231995X/codihorr-20">Programming Windows</a>, now in its fifth edition. And he can prove it, too. He has an honest-to-God Windows tattoo on his arm:
</p>
<p>
<a href="http://www.charlespetzold.com/bio.html"><img alt="image placeholder" >
</p>
<p>
This is explained in <a href="http://www.charlespetzold.com/faq.html">his FAQ</a>:
</p>
<blockquote>
Q.  Is that a real tattoo?
<p>
A.  I think of it more as a scar I got after doing Windows programming for ten years (beginning in 1985).
</p>
</blockquote>
<p>
When Charles Petzold talks, with my apologies to <a href="http://www.thestreet.com/basics/gettingstarted/999737.html">E.F. Hutton</a>, <i>people listen</i>. Charles recently spoke at the NYC .NET Developer's Group and asked, <a href="http://www.charlespetzold.com/etc/DoesVisualStudioRotTheMind.html">Does Visual Studio Rot the Mind?</a>
</p>
<p>
It's a great essay. The central idea is that <b>your skillset should not be dictated by the tools you use</b>. I've covered similar ground in <a href="http://www.codinghorror.com/blog/archives/000146.html">Programming for Luddites</a>, so I don't necessarily disagree. But I also wonder if Petzold has fallen into the trap Dan Appleman outlines in <a href="http://www.danappleman.com/index.php?p=4">RAD is not productivity</a>:
</p>
<p>
</p>
<blockquote>
The reason that so much bad VB6 code was written was not because VB6 was RAD, but because it was easy. In fact, VB6 made writing software so easy that anyone could be a programmer, and so everyone was. Doctors, Lawyers, Bankers, Hobbyists, Kids -- everyone was writing VB6 code with little or no training.
<p>
Now, I don't know about you, but I still have copies of a few of the programs I wrote when I was just starting out, before I'd actually gone to school to learn a thing or two about software development. There was some BASIC, some Pascal, and looking at it now, it's all pretty ugly.
</p>
<p>
So let's get real. Bad programmers write bad code. Good programmers write good code. RAD lets bad programmers write bad code faster. RAD does NOT cause good programmers to suddenly start writing bad code. <b>RAD tools can make a good programmer more productive, because they speed up the coding process without compromising the level of quality that a good programmer is going to achieve.</b>
</p>
</blockquote>
<p>
Petzold's essay meanders a bit, but ultimately cuts a little deeper than "R.A.D. is B.A.D.":
</p>
<p>
</p>
<blockquote>
Life without Visual Studio is unimaginable, and yet, no less than PowerPoint, Visual Studio causes us to do our jobs in various predefined ways, and I, for one, would be much happier if Visual Studio did much less than what it does. Certain features in Visual Studio are supposed to make us more productive, and yet for me, they seem to denigrate and degrade the programming experience.
</blockquote>
<p>
Petzold argues that <b>the cognitive model that Visual Studio forces on the developer is fundamentally flawed</b>. This is essentially the same argument presented in Edward Tufte's 2003 essay, <a href="http://www.edwardtufte.com/tufte/books_pp">The Cognitive Style of PowerPoint</a>.* Petzold goes on to illustrate with intellisense, which he has a love/hate relationship with:
</p>
<p>
</p>
<blockquote>
But the implication here is staggering. To get IntelliSense to work right, not only must you code in a bottom-up structure, but within each method or property, you must also write you code linearly from beginning to end -- just as if you were using that old DOS line editor, EDLIN. You must define all variables before you use them. No more skipping around in your code. It's not that IntelliSense is teaching us to program like a machine; it's just that IntelliSense would be much happier if we did.
</blockquote>
<p>
And then there's the issue of code generation:
</p>
<p>
</p>
<blockquote>
Even if Visual Studio generated immaculate code, there would still be a problem. As Visual Studio is generating code, it is also erecting walls between that code and the programmer. Visual Studio is implying that this is the only way you can write a modern Windows or web program because there are certain aspects of modern programming that only it knows about. And Visual Studio adds to this impression by including boilerplate code that contains stuff that has never really been adequately discussed in the tutorials or documentation that Microsoft provides.
<p>
It becomes imperative to me, as a teacher of Windows Forms programming and Avalon programming, to deliberately go in the opposite direction. I feel I need to demystify what Visual Studio is doing and demonstrate how you can develop these applications by writing your own code, and even, if you want, compiling this code on the command line totally outside of Visual Studio.
</p>
<p>
In my Windows Forms books, I tell the reader not to choose Windows Application when starting a new Windows Forms project, but to choose the Empty Project option instead. The Empty Project doesn't create anything except a project file. All references and all code has to be explicitly added.
</p>
<p>
Am I performing a service by showing programmers how to write code in a way that is diametrically opposed to the features built into the tool that they're using? I don't know. Maybe this is wrong, but I can't see any alternative.
</p>
</blockquote>
<p>
In other words, <b>a developer weaned on the Visual Studio .NET IDE is powerless outside that enviroment.</b> Working in the Visual Studio IDE becomes synonymous with the very act of programming. And that's the thing Petzold is most afraid of:
</p>
<p>
</p>
<blockquote>
[to solve a New Scientist math puzzle] I decided to use plain old ANSI C, and to edit the source code in Notepad -- which has no IntelliSense and no sense of any other kind -- and to compile on the command line using both the Microsoft C compiler and the Gnu C compiler.
<p>
What's appealing about this project is that I don't have to look anything up. I've been coding in C for 20 years. It was my favorite language before C# came along. This stuff is just pure algorithmic coding with simple text output. It's all content. Even after this preliminary process, there's still coding to do, but there's no APIs, there's no classes, there's no properties, there's no forms, there's no controls, there's no event handlers, and there's definitely no Visual Studio.
</p>
<p>
It's just me and the code, and for awhile, I feel like a real programmer again.
</p>
</blockquote>
<p>
<b>Using Notepad to code may be an instructive exercise in minimalism for students, but no professional programmer can afford to build software this way.</b> If anything, I think <a href="http://www.codinghorror.com/blog/archives/000195.html">the future lies in even tighter coupling of the language and the IDE</a>. I can even envision a day where <i>it isn't possible to compile a program outside the IDE</i>-- and that's probably heresy to Petzold.
</p>
<p>
But it's also the future.
</p>
<p>
* Tufte's essay is also available <a href="http://www.aaronsw.com/weblog/000931">in parody powerpoint form</a>.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2005-10-25T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/the-cognitive-style-of-visual-studio/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ Google search VS.NET macro ]]></title>
<link>https://blog.codinghorror.com/google-search-vsnet-macro/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><style type="text/css">
.kbd {font-family:arial,helvetica,sans-serif;padding:5px 3px;white-space:nowrap;color:#000;background:#eee;border-width:2px 4px 5px 3px;border-style:solid;border-color:#ccc #aaa #888 #bbb;}
.i20{margin:15px 30px;}
</style>
<p>
Here's a handy little Visual Studio .NET macro which <b>searches for the currently highlighted term in Google</b>. The search is launched as a new tab within the IDE when you press
</p>
<p>
</p>
<p class="i20"><span class="kbd">Alt</span>+<span class="kbd">F1</span>
</p>
<p>
I know what you're thinking: <a href="http://weblogs.asp.net/dmarsh/archive/0001/01/01/214263.aspx">you've seen this macro before</a>. Yeah, but <a href="http://spinaltapfan.com/atozed/TAP00160.HTM">this one goes to eleven</a>. It actually works with <i>any highlighted text in the IDE</i> -- including highlighted text from the Output window:
</p>
<p>
<img alt="image placeholder" >
</p>
<p>
Here's the macro code (<font color="red">updated</font> 11/26/2007*):
</p>
<p>
</p>
<pre language="vb.net">
Public Sub SearchGoogleForSelectedText()
Dim s As String = ActiveWindowSelection().Trim()
If s.Length &gt; 0 Then
DTE.ItemOperations.Navigate("http://www.google.com/search?q=" &amp; _
Web.HttpUtility.UrlEncode(s))
End If
End Sub
Private Function ActiveWindowSelection() As String
If DTE.ActiveWindow.ObjectKind = EnvDTE.Constants.vsWindowKindOutput Then
Return OutputWindowSelection()
End If
If DTE.ActiveWindow.ObjectKind = "{57312C73-6202-49E9-B1E1-40EA1A6DC1F6}" Then
Return HTMLEditorSelection()
End If
Return SelectionText(DTE.ActiveWindow.Selection)
End Function
Private Function HTMLEditorSelection() As String
Dim hw As HTMLWindow = ActiveDocument.ActiveWindow.Object
Dim tw As TextWindow = hw.CurrentTabObject
Return SelectionText(tw.Selection)
End Function
Private Function OutputWindowSelection() As String
Dim w As Window = DTE.Windows.Item(EnvDTE.Constants.vsWindowKindOutput)
Dim ow As OutputWindow = w.Object
Dim owp As OutputWindowPane = ow.OutputWindowPanes.Item(ow.ActivePane.Name)
Return SelectionText(owp.TextDocument.Selection)
End Function
Private Function SelectionText(ByVal sel As EnvDTE.TextSelection) As String
If sel Is Nothing Then
Return ""
End If
If sel.Text.Length = 0 Then
SelectWord(sel)
End If
If sel.Text.Length &lt;= 2 Then
Return ""
End If
Return sel.Text
End Function
Private Sub SelectWord(ByVal sel As EnvDTE.TextSelection)
Dim leftPos As Integer
Dim line As Integer
Dim pt As EnvDTE.EditPoint = sel.ActivePoint.CreateEditPoint()
sel.WordLeft(True, 1)
line = sel.TextRanges.Item(1).StartPoint.Line
leftPos = sel.TextRanges.Item(1).StartPoint.LineCharOffset
pt.MoveToLineAndOffset(line, leftPos)
sel.MoveToPoint(pt)
sel.WordRight(True, 1)
End Sub
</pre>
<p>
I tested the macro in VS.NET 2003 and VS.NET 2005 and it works great with no modifications in either environment. Here's how to install it:
</p>
<p>
</p>
<ol>
<li>go to Tools - Macros - IDE
</li>
<li>create a new Module with a name of your choice under "MyMacros". Or use an existing module.
</li>
<li>paste the above code into the module
</li>
<li>add a reference to the System.Web namespace (for HttpUtility) to the module
</li>
<li>close the macro IDE window
</li>
<li>go to Tools - Options - Environment - Keyboard
</li>
<li>type "google" in the Show Commands Containing textbox. The <b>SearchGoogleForSelectedText</b> macro should show up
</li>
<li>click in the Press Shortcut Keys textbox, then press <b>ALT+F1</b>
</li>
<li>click the Assign button
</li>
<li>click OK
</li>
</ol>
<p>
It's really quite handy; ALT+F1 is a totally natural chord and a logical superset of F1.
</p>
<p>
* Courtesy Bojan Bjelic, the macro now works in .aspx source (html) view.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2005-10-26T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/google-search-vsnet-macro/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ Copying Visual Studio Code Snippets to the Clipboard as HTML ]]></title>
<link>https://blog.codinghorror.com/copying-visual-studio-code-snippets-to-the-clipboard-as-html/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
As I mentioned in <a href="http://www.codinghorror.com/blog/archives/000319.html">Formatting HTML code snippets with Ten Ton Wrecking Balls</a>, <b>copying code to your clipboard in Visual Studio is often an excercise in futility if you want anything more than plain vanilla text.</b> VS copies code to the clipboard with bizarro-world RTF formatting instead of the sane, simple HTML markup you might expect. This is true even of <a href="http://blogs.msdn.com/somasegar/archive/2005/10/27/485665.aspx">the brand spanking new VS.NET 2005</a>.
</p>
<p>
I previously developed a macro that converted highlighted code to simple HTML on the clipboard using two different methods. I've since removed the <a href="http://addressof.com/blog/archive/2004/10/06/966.aspx">Word interop method</a> entirely because it's clunky. And <b>I have improved the RTF-to-HTML conversion method substantially</b>. Take this code, for example:
</p>
<p>
<img alt="image placeholder" >
</p>
<p>
Let's highlight the code execute the <a href="http://www.codinghorror.com/blog/files/FormatToHtml-042006.zip">FormatToHtml.Modern macro</a>, and then paste the contents of the clipboard into something like <a href="http://www.freetextbox.com/">FreeTextBox</a>:
</p>
<p>
</p>
<div style="font-family:monospace;font-size: 9pt;background-color: white;color: black;">
<span style="color:Navy">namespace</span><span style="color:black"> </span><span style="color:Maroon">TotallyUnnecessaryNamespace<br>
</span><span style="color:black">{<br>
    </span><span style="color:Gray">///</span><span style="color:Green"> </span><span style="color:Gray">&lt;summary&gt;<br>
</span><span style="color:black">    </span><span style="color:Gray">///</span><span style="color:Green"> I heart GUIDs<br>
</span><span style="color:black">    </span><span style="color:Gray">///</span><span style="color:Green"> </span><span style="color:Gray">&lt;/summary&gt;<br>
</span><span style="color:black">    </span><span style="color:Navy">public</span><span style="color:black"> </span><span style="color:Navy">class</span><span style="color:black"> </span><span style="color:Maroon">MyClass<br>
</span><span style="color:black">    {<br>
        </span><span style="color:Navy">public</span><span style="color:black"> </span><span style="color:Navy">void</span><span style="color:black"> </span><span style="color:Maroon">test</span><span style="color:black">()<br>
        {<br>
            </span><span style="color:Navy">string</span><span style="color:black"> </span><span style="color:Maroon">s</span><span style="color:black"> = "test";<br>
            </span><span style="color:Navy">int</span><span style="color:black"> </span><span style="color:Maroon">i</span><span style="color:black"> = 1234;<br>
        }<br>
    }<br>
}<br>
</span>
</div>
<p>
That's extra clean, well-formatted &lt;span&gt; colored HTML wrapped in a simple &lt;div&gt;. It preserves the color scheme and indentation from your IDE exactly*, although it does substitute a standard monospace IDE font. View source on this post to see the raw markup.
</p>
<p>
Now compare this with the craptacular results you'll get when you do a traditional copy and paste! This is how VS.NET 2005's CTRL+C copy functionality should behave. You could even map the CTRL+C shortcut to the macro if you like.
</p>
<p>
My favorite new feature, however, is that <b>the macro now dynamically removes excessive indenting from copied code</b>. That makes it a lot cleaner when copying code snippets <a href="http://www.codinghorror.com/blog/archives/000188.html">from the TotallyUnnecessaryNamespace namespace</a>. As Cartman would say, <i>super sweet.</i> And it works in Visual Studio 2002, 2003, and 2005. Try it yourself!
</p>
<p>
</p>
<p>
<a href="http://www.codinghorror.com/blog/files/FormatToHtml-042006.zip">Download the FormatToHtml macro</a> (5kb) <span style="color:red; font-weight:bold;">Updated 4/2006</span>
</p>
<p>
Here's how to get started with this macro
</p>
<p>
</p>
<ol>
<li>go to Tools - Macros - IDE
</li>
<li>create a new Module named "FormatToHtml" under "MyMacros"
</li>
<li>paste the downloaded code into the module
</li>
<li>add references to System.Drawing and System.Web via the Add Reference menu
</li>
<li>save and close the macro IDE window
</li>
<li>go to Tools - Macros - Macro Explorer
</li>
<li>Four new macros will be under "FormatToHtml"; double-click to run the macro, then paste away..
</li>
</ol>
<p>
* Background colors are lost, but that's because the RTF markup VS.NET places in the clipboard doesn't contain the background colors, either. Total bummer.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2005-10-27T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/copying-visual-studio-code-snippets-to-the-clipboard-as-html/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ Avoiding Booleans ]]></title>
<link>https://blog.codinghorror.com/avoiding-booleans/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>Brad Abrams recently <a href="http://blogs.msdn.com/brada/archive/2005/10/26/475085.aspx">posted</a> another great excerpt from the unfortunately named <a href="http://www.amazon.com/exec/obidos/ASIN/0321194454/codihorr-20">.NET Framework Standard Library Annotated Reference Volume 2</a>:</p>
<blockquote>
<b>Avoid creating methods with Boolean parameters.</b> Boolean parameters make calls harder to read and harder to write.
</blockquote>
<p>Indeed. What <i>is</i> the difference between..</p>
<pre>
Authorization("foo", true)
Authorization("foo", false)
</pre>
<p>Who knows? I've certainly made this mistake before. The <acronym title="Standard Library Annotated Reference">SLAR</acronym> recommends ditching the boolean in favor of an enumeration:</p>
<pre>
Authorization("foo", AuthorizationCompletion.Pending)
Authorization("foo", AuthorizationCompletion.Finished)
</pre>
<p>Voila. Self-documenting code. If you're not careful, boolean parameters become <a href="http://en.wikipedia.org/wiki/Magic_number_(programming)">magic numbers</a>.</p>
<p>Avoiding boolean parameters isn't a new idea, of course; similar advice is dispensed by <a href="https://herbsutter.com/">C++ guru Herb Sutter</a> in this <a href="http://www.drdobbs.com/conversationstruth-or-consequences/184403845">2002 C++ User's Journal article</a>. What you may not realize, however, is that <b>it's also a good idea to avoid booleans in your user interface</b>. Jef Raskin explains in his book, <a href="http://www.amazon.com/exec/obidos/ASIN/0201379376/codihorr-20">The Humane Interface</a>:</p>
<blockquote>
Check boxes can leave the user guessing what the alternative is. For example, if a check box labeled "Save to archive on closing" is checked, the data will be saved to an archive when the window is closed, but the label gives little clue as to what will happen if the box is not checked. Will the data be saved somewhere else, not saved at all, or will another option appear when you close the window? Often, the best solution is to use a set of radio buttons; they are not modal, and the user can clearly see not only the current state but also the alternative(s). Whether checkboxes or radio buttons are used, it is important to label with adjectives which describe the state of the affected object. If verbs are used as labels, the user does not know whether the action has taken place or is yet to take place.
<p>For one-of-many choices, radio buttons are already the standard, and there is rarely any reason to use other mechanisms. <b>Whenever possible, use radio buttons instead of checkboxes.</b> Checkboxes work reliably only when the value of the state controlled by the check is immediately visible or in short-term memory.</p>
</blockquote>
<p>As a developer my go-to boolean UI element is the checkbox. If it can be true or false, it's a checkbox, right? Like so:</p>
<p><img alt="image placeholder" >
<p>But what does the verb "Lock" <i>mean?</i> This checkbox violates the <a href="https://www.amazon.com/exec/obidos/ASIN/0321965515/codihorr-20">Don't Make Me Think</a> rule. Now watch what happens when we change to adjectives and radio buttons:</p>
<p><img alt="image placeholder" >
<p>This is conceptually identical to the code sample; we simply switched from a boolean to an enumeration. It's amazing how obvious the benefits are in retrospect, but it sure wasn't obvious to me until today.</p>

<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2005-10-28T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/avoiding-booleans/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ Improving the Clipboard ]]></title>
<link>https://blog.codinghorror.com/improving-the-clipboard/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
In this era of 3ghz processors, 1gb memory, and 500gb hard drives, <b>why is the Windows clipboard only capable of holding a single item?</b> Sure, you have fancy multi-level undo and redo in applications like Microsoft Word and Visual Studio. Did you know that the humble Windows textbox supports a surprisingly deep undo/redo queue via the CTRL+Z (undo) and CTRL+Y (redo) keys?
</p>
<p>
But not the clipboard. It holds exactly one item. Copy another item to the clipboard and your previous clipboard item is irrevocably lost.
</p>
<p>
The clipboard is a model of simplicity. And that's admirable. But I think it's too simple. Adding a basic FIFO queue of clipboard items wouldn't affect typical usage -- but it would provide much richer functionality for intermediate and advanced users. Here's one such clipboard utility that I use, <a href="http://www.nakka.com/soft/clcl/index_eng.html">clcl</a>. This lightweight utility launches when I press the ALT+C key, and presents a straightforward menu of recent clipboard items:
</p>
<p>
<a href="http://www.nakka.com/soft/clcl/index_eng.html"><img alt="image placeholder" >
</p>
<p>
Of course, CTRL+C and CTRL+V still work as you would expect. I can't even tell you how many times I've been editing code in Visual Studio and accidentally overwritten the code I copied to the clipboard. Now I don't have to worry; I can just press ALT+C and then use the arrow keys or the number to select the clipboard item I want to paste. <b>The clipboard is a heck of a lot more useful to me when I don't have to constantly worry about losing the one item on it</b>. Clcl even persists the clipboard items to disk so they survive a reboot.
</p>
<p>
I liked clcl's simplicity, but there are <a href="http://zdnet.com.com/3150-2384-0.html">dozens of similar clipboard utilities</a>. To me, that's is a sign that <b>better clipboard functionality really should be built into the operating system</b>. Unfortunately, I can't find any reference to clipboard improvements in Vista. It'd be a darn shame if we're stuck with the archaic single item clipboard for another five years.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2005-10-30T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/improving-the-clipboard/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ Search: If It Isn't Incremental, It's Excremental ]]></title>
<link>https://blog.codinghorror.com/search-if-it-isnt-incremental-its-excremental/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
After I discovered the CTRL+I <a href="http://msdn2.microsoft.com/en-us/library/f27e8wzh">incremental search function in Visual Studio</a>, I never used the standard find dialog again. <b>Incremental search is so good that it makes traditional search dialogs completely obsolete.</b> If you think that's hyperbole, consider that <a href="http://www.sellsbrothers.com/spout/">Chris Sells</a> calls incremental search <a href="http://www.hanselman.com/blog/MyIgnoranceProceedsMeVisualStudioNETIncrementalSearch.aspx">"pure sex"</a>.
</p>
<p>
This particular find dialog is from Notepad, but it's the basically the same find dialog that appears in every Windows application:
</p>
<p>
<img alt="image placeholder" >
</p>
<p>
The delimited search dialog has a lot of problems:
</p>
<ul>
<li>
<b>It's a dialog.</b> A dialog right smack dab in the middle of the text, potentially obscuring what you're searching for. In some apps it's even <i>modal!</i>
</li>
<li>
<b>It provides very little feedback.</b> There's no indication whether your search term matches anything until you type the complete search term and press return or click Find.
</li>
<li>
<b>It's an all-or-nothing operation.</b> Once you initiate a search, you're committed until the search completes. If you just mistyped a search term in a 5 megabyte text file, have fun waiting for that to complete.
</li>
<li>
<b>It forces you to think about directionality.</b> If your cursor happens to be near the bottom of the file, you may not find any matches even though some exist at the top of the file. And you get nagged with yet <i>another</i> "no matches found" dialog.
</li>
</ul>
<p>
Jef Raskin, in his book <a href="http://www.amazon.com/exec/obidos/ASIN/0201379376/codihorr-20">The Human Interface</a>, has some choice words for the delimited search dialog:
</p>
<p>
</p>
<blockquote>
This traditional method is rather punishing to the user, although most computer aficionados have become so accustomed to it that they no longer feel the pain.</blockquote>
<p>
Now compare that Notepad search dialog with the incremental search in <a href="http://www.mozilla.org/products/firefox/">Firefox</a>:
</p>
<p>
<img alt="image placeholder" >
</p>
<p>
The advantages of incremental search are numerous:
</p>
<p>
</p>
<ul>
<li>
<b>There aren't any dialogs in your way.</b> The search interface is blissfully dialog-less. There's nothing getting in the way of you and your search results. You can search, find, and resume working with minimal interruption. This is arguably handled even better in Visual Studio, where the interactive search indicator is a cursor change after you press CTRL+I.
</li>
<li>
<b>It wastes less of your time.</b> The search begins as soon as the first character is typed. You know immediately when you've got a good enough match and you can stop typing.
</li>
<li>
<b>Mistakes are clearly evident.</b> If you mistype something, you'll know that immediately, too. Press backspace to correct the typo and you're back to the previous match.
</li>
<li>
<b>It's interactive.</b> Immediate search feedback alows you to adjust your search strategy in real time. The net result is far better searches than you'd ever get from a traditional OK-then-try-again dialog box cycle.
</li>
</ul>
<p>
After you've worked with incremental search for a few hours, <b>you'll probably wonder why incremental search isn't included as a standard feature in every single Windows application.</b> As Jef Raskin notes:
</p>
<p>
</p>
<blockquote>
From the point of view of interface engineering, the advantages of incremental searches are so numerous and the advantages of delimited search so few that I can see almost no occasions when a delimited search would be preferred.
</blockquote>
<p>
Jef also adds an amusing footnote to that sentence: <b>If it isn't incremental, it's excremental.</b> Amen, brother. I can barely stand to use editors without an incremental search mode any more. I'm so glad that (after a little prodding on my part) the <a href="http://www.shareware-beach.com/2005/10/a-new-era-of-computing/">latest betas of EditPad Pro 6</a> include this feature.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2005-10-31T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/search-if-it-isnt-incremental-its-excremental/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ GotDotNet: still sucking after all these years ]]></title>
<link>https://blog.codinghorror.com/gotdotnet-still-sucking-after-all-these-years/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
Why is it that <b>fully half of my interactions with GotDotNet are extremely unpleasant?</b> I was telling someone about the Microsoft sponsored <a href="http://www.microsoft.com/downloads/details.aspx?FamilyID=c6a7fee3-6495-427f-8b1f-768a2715170c&amp;displaylang=en">IronPython project</a> today and I foolishly attempted to click through to the <a href="http://www.gotdotnet.com/workspaces/workspace.aspx?id=ad7acff7-ab1e-4bcb-99c0-57ac5a3a9742">GotDotNet workspace</a> for same:
</p>
<p>
<img alt="image placeholder" >
</p>
<p>
That's, like, <i>totally awesome</i>. Maybe I should visit the Workspaces Announcements <b>pagee</b>. The typo certainly inspires confidence!
</p>
<p>
With my apologies to the very nice <a href="http://blogs.msdn.com/betsya/archive/2004/11/23/268701.aspx">Betsy Aoki</a> who personally answers emails sent to the pictured email alias, <b>GotDotNet is an embarrassing trainwreck of epic proportions.</b> I've rarely had a positive experience using GotDotNet. I've rarely read anything positive about anyone else's experiences with GotDotNet.
</p>
<p>
How does GotDotNet suck? Let me count the ways:
</p>
<p>
</p>
<ul>
<li>It's unreliable.
</li>
<li>It's slow.
</li>
<li>It's ugly.
</li>
<li>It's not particularly functional.
</li>
<li>It hasn't noticeably improved in three years.
</li>
</ul>
<p>
When you can't muster a user experience comparable to the <a href="http://sourceforge.net/">thoroughly mediocre SourceForge</a>, it's time to seriously reconsider your reason for existing at all.
</p>
<p>
<s>I'm begging you, Microsoft: either have the guts to kill GotDotNet outright, or put your alpha development triage team on it ASAP. It'd be one thing if GotDotNet was a standalone site, but because of its marquee association with Microsoft and .NET, <b>GotDotNet drags down the entire .NET ecosystem.</b> And that's a damn shame.</s>
</p>
<p>
I don't know if I'm lucky, stupid, or both, but <b>a revamped ASP.NET 2.0 version of GotDotNet was unveiled today.</b> It addresses my two primary concerns: it's noticeably faster, and the visual design is much improved. Kudos to the GotDotNet team. I'm still not sure exactly what purpose the site serves in the big scheme of things, but at least using it is no longer like randomly jabbing myself in the face with punji sticks.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2005-11-01T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/gotdotnet-still-sucking-after-all-these-years/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ Sample Databases in SQL Server 2005 ]]></title>
<link>https://blog.codinghorror.com/sample-databases-in-sql-server-2005/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
SQL Server 2005 <b>doesn't include the classic Pubs and Northwind databases</b>. You can, however, <a href="http://www.microsoft.com/downloads/details.aspx?FamilyId=06616212-0356-46A0-8DA2-EEBC53A68034&amp;displaylang=en">download them from Microsoft</a>. You'll get both binary database images (*.mdf and *.ldf) as well as SQL scripts.
</p>
<p>
If you plan to use the binary database files (*.mdf and *ldf), first copy those files to the correct default location for database files in a typical SQL Server 2005 installation:
</p>
<p>
</p>
<pre>
c:Program FilesMicrosoft SQL ServerMSSQL.1MSSQLDATA
</pre>
<p>
This path varies somewhat depending how many instances of SQL Server you have on your machine.
</p>
<p>
You can either install from the Management Studio GUI if you have SQL Server 2005 Standard or Developer, or install from the command line if you have SQL Express. There is, however, a <a href="http://www.microsoft.com/downloads/details.aspx?FamilyId=C243A5AE-4BD1-4E3D-94B8-5A0F62BF7796&amp;displaylang=en">downloadable add-on version of the Management Studio GUI specifically for SQL Express</a>.
</p>
<p>
<b>Installing sample databases from the command line</b>:
</p>
<p>
If you're using the binary files:
</p>
<p>
</p>
<pre>
osql -E -Q "exec sp_attach_db @dbname=N'Northwind',
@filename1=N'C:pathnorthwind.mdf',
@filename2=N'C:pathnorthwind.ldf'"
</pre>
<p>
If you're using SQL scripts:
</p>
<p>
</p>
<pre>
sqlcmd -S .SQLEXPRESS -E -I -i instpubs.sql
</pre>
<p>
<b>Installing sample databases from the Management Studio GUI</b>:
</p>
<p>
If you're using the binary files:
</p>
<p>
</p>
<ul>
<li>Right-click the root database
</li>
<li>Click "Attach"
</li>
<li>Click the "Add" button and choose the *.mdf file from the Data folder
</li>
<li>Click OK
</li>
</ul>
<p>
If you're using SQL scripts:
</p>
<p>
</p>
<ul>
<li>Click the "New Query" toolbar button
</li>
<li>cut and paste the contents of the instnwnd.sql or instpubs.sql scripts in the query window
</li>
<li>hit F5 to run.
</li>
</ul>
<p>
There's also a rather large <b>new sample database in SQL Server 2005 called AdventureWorks</b>. Unfortunately, it's not installed by default. Rather than going through a tedious Add/Remove Programs cycle, you can <a href="http://www.microsoft.com/downloads/details.aspx?FamilyId=2ADBC1A8-AE5C-497D-B584-EAB6719300CD&amp;displaylang=en#filelist">download the standalone database from Microsoft</a>. There's also a handy <a href="http://www.microsoft.com/downloads/details.aspx?familyid=0f6e0bcf-a1b5-4760-8d79-67970f93d5ff&amp;displaylang=en">AdventureWorks schema diagram</a> in HTML and Visio format.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2005-11-02T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/sample-databases-in-sql-server-2005/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ 64-bit Desktop vs. 64-bit Server ]]></title>
<link>https://blog.codinghorror.com/64-bit-desktop-vs-64-bit-server/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
When people find out I'm a big fan of AMD's Athlon 64 -- specifically <a href="http://www.codinghorror.com/blog/archives/000285.html">the dual core X2 chips</a> -- they often ask how I'm enjoying 64-bit Windows. They're always surprised to hear that <b>I have no interest in a 64-bit OS on the desktop</b>. I'm glad someone is laying the foundation for the next 10 years of computing. But as Tom's hardware points out, <a href="http://www.tomshardware.com/howto/20050823/winxp_x64-08.html">there's little to gain from running a 64-bit version of Windows XP on the desktop today</a>:
</p>
<p>
</p>
<blockquote>
After collecting all the benchmark results in both the 32 bit and 64 bit Windows environments, here is what we found:
<ul>
<li>The 64 bit version of Windows looks and feels pretty much like the popular 32 bit versions.
</li>
<li>Windows XP Professional x64 Edition provides performance comparable to Windows XP 32 bit when running 32 bit applications.
</li>
<li>Some programs run slightly faster, others slightly slower. At the end of the day, the difference is not noticeable.
</li>
<li>The perceived differences between the 32 bit and 64 bit versions are the same whether you run a single or a dual core processor.
</li>
</ul>
</blockquote>
In the absence of any measurable performance improvement for typical desktop apps, why in the world would you want to be a guinea pig for 64-bit driver and OS teething problems? Answer: you wouldn't.
<p>
<b>On the server, however, a 64-bit OS is a completely different story.</b> The <a href="http://blogs.technet.com/mscom/default.aspx">Microsoft.com operations blog</a> documents the massive performance improvement they realized when they <a href="http://blogs.technet.com/mscom/archive/2005/09/26/411568.aspx">switched to the 64-bit edition of Windows Server 2003</a>:
</p>
<p>
</p>
<pre>
req/sec  response time
X86 ASP               7.85  244 ms
X86 ISAPI           110.85  248 ms
X86 Static           41.90  135 ms
X86 Static (cached)  47.11    1 ms
X64 ASP               7.41   53 ms
X64 ISAPI           125.43   18 ms
X64 Static           31.01    3 ms
X64 Static (cached)  54.51    1 ms
</pre>
<p>
That's just a small part of the performance story documented in <a href="http://blogs.technet.com/mscom/archive/2005/09/26/411568.aspx">the full blog entry</a>. And these numbers alone are incredible, particularly considering this is a drop-in replacement with existing, unchanged 32-bit code. <b>It's literally free performance!</b> If you're running a web server of any significant load on a 32-bit server OS, I would run, not walk, to the nearest software store to grab a <a href="http://www.techworld.com/opsys/reviews/index.cfm?reviewID=292&amp;productid=">Windows Server 2003 x64</a> license.
</p>
<p>
The <a href="http://blogs.technet.com/mscom/default.aspx">MS ops blog</a> doesn't get enough juice. And that's too bad, because it's full of practical, holistic tips based on running the <a href="http://blogs.technet.com/mscom/archive/2005/09/09/410523.aspx">fourth largest website in the world and thousands of servers</a>. For example, their <a href="http://blogs.technet.com/mscom/archive/2005/10/19/412745.aspx">logparser</a> post is about ten times more useful than <a href="http://www.codinghorror.com/blog/archives/000369.html">mine</a> ever was.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2005-11-03T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/64-bit-desktop-vs-64-bit-server/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ Which Online Discussion Archetype Are You? ]]></title>
<link>https://blog.codinghorror.com/which-online-discussion-archetype-are-you/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>If you've participated in usenet, mailing lists, or web forum discussions for any length of time, you're probably familiar with <a href="http://en.wikipedia.org/wiki/Godwin's_law">Godwin's law</a>:</p>
<blockquote>
<p>As an online discussion grows longer, the probability of a comparison involving Nazis or Hitler approaches 1.</p>
</blockquote>
<p>The <a href="http://web.archive.org/web/20080701050826/http://redwing.hutman.net/%7Emreed/index.htm">Flame Warrior</a> website offers deeper insight, based on a particular all too common forum incident.</p>
<blockquote>
<p>Some years ago a minor spat ignited a searing flame war that threatened to consume a once-placid discussion forum. While the forum burned I amused myself by caricaturing the chief antagonists. Confounded at seeing themselves thus revealed, the combatants fled the field in disarray.</p>
<p>Over time the roster of online belligerents expanded and eventually congealed into the netizen's guide to Flame Warriors. My own bad Internet behavior would certainly have provided sufficient material to populate an extensive rogue's gallery, but suggestions and comments from astute observers continue to enrich the Flame Warriors collection.</p>
</blockquote>
<p>What Mike created is a <strong>brilliant deconstruction of the various archetypes you'll encounter in any long running discussion group</strong>, along with some great caricature art:</p>
<style>#flamewarriors a {font-size:80%;}</style>
<table id="flamewarriors" style="width:633px; padding:4px; border-spacing:4px;">
<tr>
<td style="vertical-align:top; width:155px; height:3293px">
<a href="http://web.archive.org/web/20080701050826/http://redwing.hutman.net/%7Emreed/warriorshtm/acne.htm">Acne<img alt="image placeholder" >
<a href="http://web.archive.org/web/20080701050826/http://redwing.hutman.net/%7Emreed/warriorshtm/admin.htm">Admin
<img alt="image placeholder" >
<a href="http://web.archive.org/web/20080701050826/http://redwing.hutman.net/%7Emreed/warriorshtm/allcaps.htm">ALLCAPS
<img alt="image placeholder" >
<a href="http://web.archive.org/web/20080701050826/http://redwing.hutman.net/%7Emreed/warriorshtm/android.htm">Android<img alt="image placeholder" >
<a href="http://web.archive.org/web/20080701050826/http://redwing.hutman.net/%7Emreed/warriorshtm/archivist.htm">Archivist<img alt="image placeholder" >
<a href="http://web.archive.org/web/20080701050826/http://redwing.hutman.net/%7Emreed/warriorshtm/artfuldodger.htm">Artful Dodger<img alt="image placeholder" >
<a href="http://web.archive.org/web/20080701050826/http://redwing.hutman.net/%7Emreed/warriorshtm/artiste.htm">Artiste<img alt="image placeholder" >
<a href="http://web.archive.org/web/20080701050826/http://redwing.hutman.net/%7Emreed/warriorshtm/atheist.htm">Atheist<img alt="image placeholder" >
<a href="http://web.archive.org/web/20080701050826/http://redwing.hutman.net/%7Emreed/warriorshtm/bigcat.htm">Big Cat<img alt="image placeholder" >
<a href="http://web.archive.org/web/20080701050826/http://redwing.hutman.net/%7Emreed/warriorshtm/bigdogmetoo.htm">Big Dog and Me-Too<img alt="image placeholder" >
<a href="http://web.archive.org/web/20080701050826/http://redwing.hutman.net/%7Emreed/warriorshtm/blissninny.htm">Bliss Ninny<img alt="image placeholder" >
<a href="http://web.archive.org/web/20080701050826/http://redwing.hutman.net/%7Emreed/warriorshtm/blowhard.htm">Blowhard<img alt="image placeholder" >
<a href="http://web.archive.org/web/20080701050826/http://redwing.hutman.net/%7Emreed/warriorshtm/bong.htm">Bong<img alt="image placeholder" >
<a href="http://web.archive.org/web/20080701050826/http://redwing.hutman.net/%7Emreed/warriorshtm/capitalista.htm">Capitalista<img alt="image placeholder" >
<a href="http://web.archive.org/web/20080701050826/http://redwing.hutman.net/%7Emreed/warriorshtm/centurion.htm">Centurion<img alt="image placeholder" >
<a href="http://web.archive.org/web/20080701050826/http://redwing.hutman.net/%7Emreed/warriorshtm/coffeeklatch.htm">Coffee Klatch<img alt="image placeholder" >
<a href="http://web.archive.org/web/20080701050826/http://redwing.hutman.net/%7Emreed/warriorshtm/compost.htm">Compost<img alt="image placeholder" >
<a href="http://web.archive.org/web/20080701050826/http://redwing.hutman.net/%7Emreed/warriorshtm/crybaby.htm">Crybaby<img alt="image placeholder" >
<a href="http://web.archive.org/web/20080701050826/http://redwing.hutman.net/%7Emreed/warriorshtm/cybersisters.htm">Cyber Sisters<img alt="image placeholder" >
<a href="http://web.archive.org/web/20080701050826/http://redwing.hutman.net/%7Emreed/warriorshtm/deacon.htm">Deacon<img alt="image placeholder" >
<a href="http://web.archive.org/web/20080701050826/http://redwing.hutman.net/%7Emreed/warriorshtm/diplomat.htm">Diplomat<img alt="image placeholder" >
<a href="http://web.archive.org/web/20080701050826/http://redwing.hutman.net/%7Emreed/warriorshtm/duelists.htm">Duelists<img alt="image placeholder" >
</td>
<td style="vertical-align:top; width:155px; height:3293px">
<a href="http://web.archive.org/web/20080701050826/http://redwing.hutman.net/%7Emreed/warriorshtm/eaglescout.htm">Eagle Scout<img alt="image placeholder" >
<a href="http://web.archive.org/web/20080701050826/http://redwing.hutman.net/%7Emreed/warriorshtm/ego.htm">Ego<img alt="image placeholder" >
<a href="http://web.archive.org/web/20080701050826/http://redwing.hutman.net/%7Emreed/warriorshtm/enfantprovocateur.htm">Enfant Provocateur<img alt="image placeholder" >
<a href="http://web.archive.org/web/20080701050826/http://redwing.hutman.net/%7Emreed/warriorshtm/ennui.htm">Ennui<img alt="image placeholder" >
<a href="http://web.archive.org/web/20080701050826/http://redwing.hutman.net/%7Emreed/warriorshtm/ent.htm">Ent<img alt="image placeholder" >
<a href="http://web.archive.org/web/20080701050826/http://redwing.hutman.net/%7Emreed/warriorshtm/ethnix.htm">Ethnix<img alt="image placeholder" >
<a href="http://web.archive.org/web/20080701050826/http://redwing.hutman.net/%7Emreed/warriorshtm/evilclown.htm">Evil Clown<img alt="image placeholder" >
<a href="http://web.archive.org/web/20080701050826/http://redwing.hutman.net/%7Emreed/warriorshtm/fanboy.htm">Fanboy<img alt="image placeholder" >
<a href="http://web.archive.org/web/20080701050826/http://redwing.hutman.net/%7Emreed/warriorshtm/ferouscranus.htm">Ferrous Cranus<img alt="image placeholder" >
<a href="http://web.archive.org/web/20080701050826/http://redwing.hutman.net/%7Emreed/warriorshtm/filibuster.htm">Filibuster<img alt="image placeholder" >
<a href="http://web.archive.org/web/20080701050826/http://redwing.hutman.net/%7Emreed/warriorshtm/fragilefemme.htm">Fragile Femme<img alt="image placeholder" >
<a href="http://web.archive.org/web/20080701050826/http://redwing.hutman.net/%7Emreed/warriorshtm/furioustyper.htm">Furious Typer<img alt="image placeholder" >
<a href="http://web.archive.org/web/20080701050826/http://redwing.hutman.net/%7Emreed/warriorshtm/garble.htm">Garble<img alt="image placeholder" >
<a href="http://web.archive.org/web/20080701050826/http://redwing.hutman.net/%7Emreed/warriorshtm/god.htm">God<img alt="image placeholder" >
<a href="http://web.archive.org/web/20080701050826/http://redwing.hutman.net/%7Emreed/warriorshtm/godfather.htm">Godfather<img alt="image placeholder" >
<a href="http://web.archive.org/web/20080701050826/http://redwing.hutman.net/%7Emreed/warriorshtm/godzilla.htm">Godzilla<img alt="image placeholder" >
<a href="http://web.archive.org/web/20080701050826/http://redwing.hutman.net/%7Emreed/warriorshtm/grammarian.htm">Grammarian<img alt="image placeholder" >
<a href="http://web.archive.org/web/20080701050826/http://redwing.hutman.net/%7Emreed/warriorshtm/grenade.htm">Grenade<img alt="image placeholder" >
<a href="http://web.archive.org/web/20080701050826/http://redwing.hutman.net/%7Emreed/warriorshtm/grunter.htm">Grunter<img alt="image placeholder" >
<a href="http://web.archive.org/web/20080701050826/http://redwing.hutman.net/%7Emreed/warriorshtm/howlers.htm">Howlers<img alt="image placeholder" >
<a href="http://web.archive.org/web/20080701050826/http://redwing.hutman.net/%7Emreed/warriorshtm/ideologue.htm">Ideologue<img alt="image placeholder" >
<a href="http://web.archive.org/web/20080701050826/http://redwing.hutman.net/%7Emreed/warriorshtm/impostor.htm">Imposter<img alt="image placeholder" >
</td>
<td style="vertical-align:top; width:155px; height:3293px">
<a href="http://web.archive.org/web/20080701050826/http://redwing.hutman.net/%7Emreed/warriorshtm/innocenceabused.htm">Innocence Abused<img alt="image placeholder" >
<a href="http://web.archive.org/web/20080701050826/http://redwing.hutman.net/%7Emreed/warriorshtm/issues.htm">Issues<img alt="image placeholder" >
<a href="http://web.archive.org/web/20080701050826/http://redwing.hutman.net/%7Emreed/warriorshtm/jekylhyde.htm">Jekyl and Hyde<img alt="image placeholder" >
<a href="http://web.archive.org/web/20080701050826/http://redwing.hutman.net/%7Emreed/warriorshtm/jerk.htm">Jerk<img alt="image placeholder" >
<a href="http://web.archive.org/web/20080701050826/http://redwing.hutman.net/%7Emreed/warriorshtm/klaxon.htm">Klaxon<img alt="image placeholder" >
<a href="http://web.archive.org/web/20080701050826/http://redwing.hutman.net/%7Emreed/warriorshtm/kungfumaster.htm">Kung-Fu Master<img alt="image placeholder" >
<a href="http://web.archive.org/web/20080701050826/http://redwing.hutman.net/%7Emreed/warriorshtm/lamer.htm">Lamer<img alt="image placeholder" >
<a href="http://web.archive.org/web/20080701050826/http://redwing.hutman.net/%7Emreed/warriorshtm/lonelyguy.htm">Lonely Guy<img alt="image placeholder" >
<a href="http://web.archive.org/web/20080701050826/http://redwing.hutman.net/%7Emreed/warriorshtm/loopy.htm">Loopy<img alt="image placeholder" >
<a href="http://web.archive.org/web/20080701050826/http://redwing.hutman.net/%7Emreed/warriorshtm/lurker.htm">Lurker<img alt="image placeholder" >
<a href="http://web.archive.org/web/20080701050826/http://redwing.hutman.net/%7Emreed/warriorshtm/nanny.htm">Nanny<img alt="image placeholder" >
<a href="http://web.archive.org/web/20080701050826/http://redwing.hutman.net/%7Emreed/warriorshtm/necromancer.htm">Necromancer<img alt="image placeholder" >
<a href="http://web.archive.org/web/20080701050826/http://redwing.hutman.net/%7Emreed/warriorshtm/netiquettenazi.htm">Netiquette Nazi<img alt="image placeholder" >
<a href="http://web.archive.org/web/20080701050826/http://redwing.hutman.net/%7Emreed/warriorshtm/netrat.htm">Net Rat<img alt="image placeholder" >
<a href="http://web.archive.org/web/20080701050826/http://redwing.hutman.net/%7Emreed/warriorshtm/newbie.htm">Newbie<img alt="image placeholder" >
<a href="http://web.archive.org/web/20080701050826/http://redwing.hutman.net/%7Emreed/warriorshtm/nitpick.htm">Nitpick<img alt="image placeholder" >
<a href="http://web.archive.org/web/20080701050826/http://redwing.hutman.net/%7Emreed/warriorshtm/palooka.htm">Palooka<img alt="image placeholder" >
<a href="http://web.archive.org/web/20080701050826/http://redwing.hutman.net/%7Emreed/warriorshtm/patois.htm">Patois<img alt="image placeholder" >
<a href="http://web.archive.org/web/20080701050826/http://redwing.hutman.net/%7Emreed/warriorshtm/perv.htm">Perv<img alt="image placeholder" >
<a href="http://web.archive.org/web/20080701050826/http://redwing.hutman.net/%7Emreed/warriorshtm/philosopher.htm">Philosopher<img alt="image placeholder" >
<a href="http://web.archive.org/web/20080701050826/http://redwing.hutman.net/%7Emreed/warriorshtm/picador.htm">Picador<img alt="image placeholder" >
<a href="http://web.archive.org/web/20080701050826/http://redwing.hutman.net/%7Emreed/warriorshtm/pinko.htm">Pinko<img alt="image placeholder" >
</td>
<td style="vertical-align:top; width:155px; height:3293px">
<a href="http://web.archive.org/web/20080701050826/http://redwing.hutman.net/%7Emreed/warriorshtm/pithyphrase.htm">Pithy Phrase<img alt="image placeholder" >
<a href="http://web.archive.org/web/20080701050826/http://redwing.hutman.net/%7Emreed/warriorshtm/profundusmaximus.htm">Profundus Maximus<img alt="image placeholder" >
<a href="http://web.archive.org/web/20080701050826/http://redwing.hutman.net/%7Emreed/warriorshtm/propellerhead.htm">Propeller Head<img alt="image placeholder" >
<a href="http://web.archive.org/web/20080701050826/http://redwing.hutman.net/%7Emreed/warriorshtm/rat.htm">Rat<img alt="image placeholder" >
<a href="http://web.archive.org/web/20080701050826/http://redwing.hutman.net/%7Emreed/warriorshtm/rebelleader.htm">Rebel Leader<img alt="image placeholder" >
<a href="http://web.archive.org/web/20080701050826/http://redwing.hutman.net/%7Emreed/warriorshtm/rebelwithoutclue.htm">Rebel Without a Clue<img alt="image placeholder" >
<a href="http://web.archive.org/web/20080701050826/http://redwing.hutman.net/%7Emreed/warriorshtm/rottweilerpuppy.htm">Rottweiler Puppy<img alt="image placeholder" >
<a href="http://web.archive.org/web/20080701050826/http://redwing.hutman.net/%7Emreed/warriorshtm/royals.htm">Royals<img alt="image placeholder" >
<a href="http://web.archive.org/web/20080701050826/http://redwing.hutman.net/%7Emreed/warriorshtm/stealth.htm">Stealth<img alt="image placeholder" >
<a href="http://web.archive.org/web/20080701050826/http://redwing.hutman.net/%7Emreed/warriorshtm/strumpet.htm">Strumpet
<img alt="image placeholder" >
<a href="http://web.archive.org/web/20080701050826/http://redwing.hutman.net/%7Emreed/warriorshtm/swarm.htm">The Swarm
<img alt="image placeholder" >
<a href="http://web.archive.org/web/20080701050826/http://redwing.hutman.net/%7Emreed/warriorshtm/sycophant.htm">Sycophant<img alt="image placeholder" >
<a href="http://web.archive.org/web/20080701050826/http://redwing.hutman.net/%7Emreed/warriorshtm/target.htm">Target<img alt="image placeholder" >
<a href="http://web.archive.org/web/20080701050826/http://redwing.hutman.net/%7Emreed/warriorshtm/therapist.htm">Therapist<img alt="image placeholder" >
<a href="http://web.archive.org/web/20080701050826/http://redwing.hutman.net/%7Emreed/warriorshtm/tirelessrebutter.htm">Tireless Rebutter<img alt="image placeholder" >
<a href="http://web.archive.org/web/20080701050826/http://redwing.hutman.net/%7Emreed/warriorshtm/toxicgranny.htm">Toxic Granny<img alt="image placeholder" >
<a href="http://web.archive.org/web/20080701050826/http://redwing.hutman.net/%7Emreed/warriorshtm/troglodyte.htm">Troglodyte<img alt="image placeholder" >
<a href="http://web.archive.org/web/20080701050826/http://redwing.hutman.net/%7Emreed/warriorshtm/troller.htm">Troller<img alt="image placeholder" >
<a href="http://web.archive.org/web/20080701050826/http://redwing.hutman.net/%7Emreed/warriorshtm/typhoidmary.htm">Typhoid Mary<img alt="image placeholder" >
<a href="http://web.archive.org/web/20080701050826/http://redwing.hutman.net/%7Emreed/warriorshtm/weenie.htm">Weenie<img alt="image placeholder" >
<a href="http://web.archive.org/web/20080701050826/http://redwing.hutman.net/%7Emreed/warriorshtm/whisper.htm">Whisper<img alt="image placeholder" >
<a href="http://web.archive.org/web/20080701050826/http://redwing.hutman.net/%7Emreed/warriorshtm/xenophobe.htm">Xenophobe<img alt="image placeholder" >
<a href="http://web.archive.org/web/20080701050826/http://redwing.hutman.net/%7Emreed/warriorshtm/yukyuk.htm">Yuk Yuk<img alt="image placeholder" >
</td>
</tr>

</table>
<p>I've been accused of being a <a href="http://web.archive.org/web/20080701050826/http://redwing.hutman.net/%7Emreed/warriorshtm/tirelessrebutter.htm">Tireless Rebutter</a> and <a href="http://web.archive.org/web/20080701050826/http://redwing.hutman.net/%7Emreed/warriorshtm/ferouscranus.htm">Ferrous Cranus</a> at times, but that's all part of my boyish charm.</p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2005-11-04T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/which-online-discussion-archetype-are-you/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ Guitar Hero: Are You Ready to ROCK? ]]></title>
<link>https://blog.codinghorror.com/guitar-hero-are-you-ready-to-rock/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
Although I'm a big fan of rhythm games, I had no idea <a href="http://www.guitarherogame.com">Guitar Hero</a> was coming out until I saw <a href="http://www.gamespot.com/ps2/puzzle/guitarhero/review.html">the glowing GameSpot review</a>:
</p>
<p>
</p>
<blockquote>
And here you thought that the rhythm game genre was getting stale. While Konami still has a firm lock on most rhythm-oriented games [primarily <a href="http://www.ddrfreak.com/">Dance Dance Revolution</a>], another company called Harmonix has also released its share of interesting rhythm games--<a href="http://www.gamespot.com/ps2/puzzle/frequency/review.html">Frequency</a> and <a href="http://www.gamespot.com/ps2/puzzle/amplitude/review.html">Amplitude</a>--both for the PlayStation 2. Plus, Harmonix and Konami have teamed up in the past on the <a href="http://www.gamespot.com/ps2/puzzle/karaokerevolution/review.html">Karaoke Revolution</a> series. Now, the Cambridge-based developer is taking a similar approach to the world of guitar rock with Red Octane's Guitar Hero. With its extremely smart approach to difficulty, its great guitar controller, and its killer song selection, <b>Guitar Hero might just be the best rhythm game ever made.</b>
</blockquote>
<p>
I just had to have Guitar Hero. You can <a href="http://redoctane.com/specialty-gh.html">buy it online directly from Red Octane</a>, but luckily, our local Best Buy had exactly one copy in stock:
</p>
<p>
<img alt="image placeholder" >
</p>
<p>
The gameplay is similar to many other rhythm games: it consists of pressing the right colored fret and strumming/holding the notes at the right time. But there's one big difference between other rhythm games and Guitar Hero: <b>this one goes to eleven.</b> The guitar even has a functional whammy bar and detects when it's being held vertically to enter "Rock Star" powerup mode.
</p>
<p>
<img alt="image placeholder" >
</p>
<p>
At the end of the day on Friday, we set the Playstation 2 up in the Vertigo conference room with the giant projection screen and Dolby Digital surround system. The game has a <a href="http://www.guitarherogame.com/music.asp">fantastic soundtrack</a>.  We rocked out for hours to tunes like <i>You Got Another Thing Comin', Ziggy Stardust, I Wanna Be Sedated, Killer Queen,</i> and <i>More Than a Feeling.</i>
</p>
<p>
<b>I got blisters on me fingers!</b> Needless to say, highly recommended. If you're still on the fence, watch the <a href="http://www.gamespot.com/pages/video_player/popup.php?sid=6137051&amp;pid=928520&amp;rgroup=undefined">GameSpot video review of Guitar Hero</a> or the <a href="http://www.guitarherogame.com/trailer.asp">official trailer</a>.
</p>
<p>
One of the game's producers maintains <a href="http://blog.myspace.com/modeverything">a great blog</a> documenting what happens behind the scenes to bring a game like this to market:
</p>
<p>
</p>
<blockquote>
Back when I worked at Activision a good friend and I were talking about what we really wanted to accomplish in this industry. He talked about back when we were little kids and we would tell others on the playground about the latest game and what we were into. I remember when SF2 first came out and all of my friends were talking about it during the day and heading out nightly to the local 7-11's just to dig into the gameplay. That's when there were nothing but rumors on how to even do the moves of the different characters. It was really great. My hope for Guitar Hero is that it causes some a similar fever among youth where they'll just be talking about hammer on's, pull offs and classic rock from before they were born.
<p>
We were at IGN Live this last weekend and there were so many kids there in our booth. All of the stereotypes were represented but the ones that I really noticed were the Emo kids. There was a particular hoodied pair that were completely emotionless and looked about 12 years old. One of them played Fat Lip twice and was looking at it for the third time when I asked "why Fat Lip again?" He mentioned that it was like the only song he knew on the list. I said "play more than a feeling" and he choose that song. I turned to chuckle with my co-worker at the blatant irony of <a href="http://guitarherogame.com/downloads/emo_kid.jpg">the Emo kid</a> playing more than a feeling. Afterwards he said to me in the most emotionless tone "man this is fun..."
</p>
</blockquote>
<p>
John T represents the Red Octane team. There's a similarly passionate <a href="http://www.gameinformer.com/News/Story/200510/N05.1020.1914.44570.htm">interview with John Sussman of Harmonix</a>, the co-collaborators for Guitar Hero:
</p>
<p>
</p>
<blockquote>
I think personally, where I'm coming from, I want people out there to get turned on to music through video games.  More than any particular peripheral, I'd love for the music game to be commercially viable project.  I'm kind of waiting for DDR to happen on a much larger scale.  Where all of a sudden there's beat matching games that really feature music as a central part of the game.  Peripherals are interesting and great but for me, it's all about the music.  Everything else is an avenue to get there.  <b>I don't think clarinet hero would be the next big thing. If that's what it took, I'd be at the front of the line wanting to make the game.</b> Personally I'm psyched about Guitar Hero because I think it's this totally accessible thing.  We have an instrument that people fantasize about playing.  Everyone fantasizes about being a full-on rock star.  I think this game hopefully will get out there and touch people and get them to realize music is fun and accessible.
</blockquote>
<p>
The producers and various reps also make frequent appearances to answer questions on <a href="http://forum.guitarherogame.com/Default.aspx?g=topics&amp;f=3">the Guitar Hero forums</a>. Now if you'll excuse me, I need to go practice <i>Bark at the Moon</i> just one more time.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2005-11-06T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/guitar-hero-are-you-ready-to-rock/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ Road Signs and Icons ]]></title>
<link>https://blog.codinghorror.com/road-signs-and-icons/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
I've always been fascinated with road signs. And evidently <a href="http://www-cs-faculty.stanford.edu/~knuth/diamondsigns/diam.html%0A">so is Donald Knuth</a>:
</p>
<p>
</p>
<blockquote>
During our summer vacation in 2003, my wife and I amused ourselves by taking leisurely drives in Ohio and photographing every diamond-shaped highway sign that we saw along the roadsides. (Well, not every sign; only the distinct ones.) For provenance, I also stood at the base of each sign and measured its GPS coordinates.  This turned out to be even more fun than a scavenger hunt, so we filled in some gaps when we returned to California. And we intend to keep adding to this collection as we drive further, although we realize that we may have to venture to New England in order to see `FROST HEAVES'.
</blockquote>
<p>
When you're a <a href="http://en.wikipedia.org/wiki/Donald_Knuth">world famous computer scientist</a>, I guess you're entitled to a slightly different definition of fun than most people. Knuth featured <a href="http://truetex.com/db.htm">a "Dangerous Bend" sign</a> in his series of books on the TeX typesetting system, to highlight areas of esoterica. Perhaps this was a precursor to his fascination with diamond road signs.
</p>
<p>
<img alt="image placeholder" >
</p>
<p>
I think Knuth is on to something here. <b>Road signs echo what we're trying to accomplish with icons and graphics in software: universal visual understanding.</b> Road signs are a well understood lingua franca for travelers, whether they're in an airplane, automobile, or navigating the streets of New York City on foot. Signs are an integral part of the human experience in any modern culture. The <a href="http://www.trafficsign.us/regsign.html">manual of traffic signs</a> documents the dizzying array of navigational signs that we take for granted every day here in the United States.
</p>
<p>
I recently purchased the book <a href="http://www.amazon.com/exec/obidos/ASIN/3822831352/codihorr-20">1000 Signs</a>, which illustrates the striking similarities -- and cultural differences -- between road signs all over the world:
</p>
<p>
</p>
<blockquote>
Divided into chapters by type (animals, men, stop, danger, weapons, transport, children, toilets, work, "no!", etc.), the signs demonstrate how different cultures portray the icons with which we are all so familiar. The diverse selection of photographs is accompanied by texts describing the cultural and social significance of signs.
</blockquote>
<p>
<b>Shouldn't software graphic design draw more inspiration from the last century's worth of cumulative design on simple, effective road signs?</b> The goal in both cases is the same: getting safely to your destination, whether you're navigating physical space or information space.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2005-11-07T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/road-signs-and-icons/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ My Giant Calculator ]]></title>
<link>https://blog.codinghorror.com/my-giant-calculator/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>Have you ever noticed how many people <b>keep a physical calculator next to their computer?</b> The irony is almost palpable. My favorite is the <a href="http://www.google.com/search?q=calculator+mousepad">calculator mousepad</a>.</p>
<img alt="image placeholder" >
<p>Jef Raskin, in <a href="http://www.amazon.com/exec/obidos/ASIN/0201379376/codihorr-20">The Humane Interface</a>, defends the practice of keeping a pocket calculator next to your PC:</p>
<blockquote>
<p>It's true. Many of us keep a calculator beside our computers. Why do you need this simple-minded device when you have a whole computer in front of you? You need it because you have to go through contortions worthy of a circus sideshow in order to do simple arithmetic with the computer. There you are, tapping away at your word processor when you want to do a division: 375 packages of Phumuxx cost $248.93; what is the price for one package? On my computer, I have to open up a calculator window. To do this, I move my hand from the keyboard to the mouse, which I use to do a click-and-drag to open the calculator. Transferring my hands back to the keyboard, I type in the numbers I need or tediously cut and paste them from my document. Then I have to press a few more keys and finally copy the results into my document. Sometimes, the calendar window opens right on top of the very numbers I need, just to add insult to injury. In that case, I must use the mouse to move the calculator window out of the way before proceeding. <b>It is much faster to grab a pocket calculator.</b></p>
</blockquote>
<p>So what's wrong with <a href="http://blogs.msdn.com/shawnfa/archive/2004/10/06/238923.aspx">good old calc.exe?</a> Raskin ran a little experiment:</p>
<blockquote>
<p>Using an experienced computer and calculator operator as my test subject, with his word processing program open before him, I measured the total time it took for him to pick up a calculator, turn it on, do a simple addition, and return his hands to the keyboard to resume typing. <b>It took about 7 seconds.</b> I then measured the time it took for him to use the built-in calculator. He had to move the cursor to the menu bar at the top of the screen, find the calculator program, open the calculator, enter the sum, and then click back in the word processor so he could resume typing. <b>This took about 16 seconds.</b></p>
</blockquote>
<p>I'm not sure why Raskin is so hell-bent on using the mouse to launch the calculator.</p>
<img alt="image placeholder" >
<p>Even on the Mac (where I assume this test was performed), there have to be keyboard shortcuts. On Windows, we'd need the following keystrokes to find the sum of 13 and 14 and paste the result in our word processor:</p>
<ul>
<li>
<p><kbd><img alt="image placeholder" >
</li>
<li>
<p>type <kbd>calc</kbd>, then press <kbd>Enter</kbd> to launch the calculator</p>
</li>
<li>
<p>type <kbd>14</kbd> <kbd>+</kbd> <kbd>13</kbd> <kbd>=</kbd> to perform the calculation</p>
</li>
<li>
<p><kbd>ctrl</kbd>+<kbd>c</kbd> to copy the result</p>
</li>
<li>
<p><kbd>alt</kbd>+<kbd>f4</kbd> or <kbd>alt</kbd>+<kbd>tab</kbd> to switch back</p>
</li>
<li>
<p><kbd>ctrl</kbd>+<kbd>v</kbd> to paste in the result</p>
</li>
</ul>
<p>It's certainly possible to perform calculations without ever moving your hand from the keyboard. Many keyboards now have calculator buttons which would reduce the number of keypresses even further. <b>I guarantee I could beat that 7 second time quoted for the physical calculator.</b> But it's not exactly <i>simple</i>, is it?</p>
<p>Instead of keyboard acrobatics, Raskin proposes a simpler "do it anywhere" facility. Something built into the OS that obviates the need to spawn a seperate window for these kinds of helper functions:</p>
<blockquote>
<p>Here's another facility that should be generally available: anywhere a number can be entered, you should be able to enter an arithmetic expression that evaluates to the number. Commands such as ..</p>
<ul>
<li>Check the spelling of the current selection</li>
<li>Treat the current selection as an arithmetic expression and evaluate it</li>
<li>Transmit the current selection as an e-mail</li>
<li>Transmit the current selection as a fax</li>
<li>Let's see what's at this URL on the web</li>
<li>Execute the current selection as a Java (or whatever) program</li>
</ul>
<p>.. should be available at all times. It is eminently doable.</p>
</blockquote>
<p>I agree that the OS should be providing this kind of non-modal (non-window, even) functionality. The run menu is a <a href="http://www.codinghorror.com/blog/archives/000378.html">(very) limited form of this</a>, while <a href="http://www.bayden.com/SlickRun/">SlickRun</a> and <a href="http://www.activewords.com/">ActiveWords</a> go even further.</p>
<p><b>Users with calculator mousepads are no laughing matter.</b> Whenever I see users like this, I'm reminded of how far we have to go in GUI design when the simple act of adding numbers together is so complicated.</p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2005-11-08T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/my-giant-calculator/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ The Lesson of HyperTerminal ]]></title>
<link>https://blog.codinghorror.com/the-lesson-of-hyperterminal/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
In response to <a href="http://www.codinghorror.com/blog/archives/000440.html">My Giant Calculator</a>, Joost commented:
</p>
<p>
</p>
<blockquote><i>
I'll jump to the defense of trusty old calc.exe. Even though it's crappy, <b>we know it's on every Windows box we touch.</b>
</i></blockquote>
<p>
He's got a point. The applets that ship in the box with the operating system are, like it or not, the defaults. There might be a dozen better third-party alternatives, but that requires manual intervention and special customization. Which means on any particular computer you happen to use, the odds of double-clicking a text file and getting Notepad are about.. 99.9 percent.
</p>
<p>
The really unfortunate thing about Notepad is that-- at the risk of stating the obvious-- it sucks. Notepad was minimalist by Windows 95 standards. I just read that Windows Vista will ship with a virtually unchanged version of Notepad, ten years later. The idea that we'll be viewing readme.txt files into 2010 with nothing but no-frills Notepad is unconscionable.
</p>
<p>
I know it sounds trivial. <b>But isn't the fit and finish of little applets like these-- Notepad, Calculator, Character Map, Paint, Disk Cleanup, Compressed Folders, and dozens of others-- indicative of the care and design that goes into the entire operating system?</b> If Microsoft can't be bothered to bundle a version of Notepad that has basic amenities like a toolbar, what hope does the rest of the operating system have?
</p>
<p>
I understand that there are a finite number of developer hours available to work on Vista. If it's a choice between new versions of Windows Explorer and Internet Explorer and a bigger, better Notepad, that's not a choice at all. The core OS should have priority.
</p>
<p>
But why does it have to be this kind of either-or dilemma? <b>Why doesn't Microsoft simply license a better notepad and bundle it with Vista?</b> They've gone this route before. Do you remember HyperTerminal?
</p>
<p>
<img alt="image placeholder" >
</p>
<p>
Rather than write their own terminal emulation app, Microsoft chose to <a href="http://www.hilgraeve.com/htpe/">license one from Hilgraeve</a> and bundle it with Windows 95. As a guy who used to write a whole lot of serial communication code in a past life, I can tell you that HyperTerminal was* a pretty damn robust terminal applet. Certainly far more application than we'd have ever gotten from Microsoft.
</p>
<p>
Why doesn't Microsoft similarly license "lite" versions of the most popular third-party calculator, notepad and paint replacements for inclusion in Vista? This seems like a win-win situation for everyone:
</p>
<ul>
<li>
<b>Microsoft customers</b> get far more functionality in the box.  For example, because of the massive deficiencies in Windows XP's Compressed Folder support I still have to install WinZip, even though my needs are quite modest. Why not just license WinZip?
</li>
<li>
<b>Third party application developers</b> get huge sales opportunities from upselling the full version of their applet to the massive base of Windows users. Hilgraeve still has a web page hawking HyperTerminal upgrades many, many years after the fact.
</li>
<li>
<b>Microsoft developers</b> can focus on the core operating system. That's one less thing they have to worry about coding. And given the sorry state of the current Windows applets, would you really want a Microsoft developer to code it anyway? A third party whose entire business revolves around a calculator replacement will have a deeper, more vested interest in building a great calculator applet than any Microsoft employee ever will.
</li>
</ul>
<p>
I'm not advocating blindly dumping dozens of different applets from dozens of different vendors into the core operating system. Microsoft would still have to be intimately involved with the source code they're shipping. After all, it has their name on it, so the quality control would have to be extreme. I'm guessing most applet vendors would give their eyeteeth for a sales opportunity like this, and thus would bend over backwards to whip their code into shape.
</p>
<p>
* HyperTerminal is still in Windows XP under the Programs | Accessories | Communications menu. Hilgraeve's name, however, was banished to a "portions copyright" footnote in the about dialog.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2005-11-09T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/the-lesson-of-hyperterminal/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ Please use .ToString() responsibly ]]></title>
<link>https://blog.codinghorror.com/please-use-tostring-responsibly/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
I've seen this kind of code a lot recently:
</p>
<p>
</p>
<pre language="c#">
try
{
int i = 0;
int x = 0;
Console.WriteLine(i / x);
}
catch (Exception ex)
{
Console.WriteLine(ex.Message);
}</pre>
<p>
This results in the following output:
</p>
<p>
</p>
<pre>
Attempted to divide by zero.
</pre>
<p>
Unless there's some compelling reason you need an ultra-terse version of the error, <b>it's almost always better to use the provided Exception.ToString() method.</b> Compare the difference:
</p>
<p>
</p>
<pre>
System.DivideByZeroException: Attempted to divide by zero.
at ConsoleApplication1.Program.Main(String[] args)
in C:Program.cs:line 15
</pre>
<p>
This also brings up an interesting corollary: <b>any object you build should have a meaningful .ToString() method.</b> I expect a proper string representation of <i>what you are</i>, not a meaningless echo of your class name!
</p>
<p>
One object that violates this horribly is DataSet. Let's say we have a DataSet containing a single DataTable. When you type DataSet.ToString(), what do you think should happen? Wait, wait, don't tell me. I'll tell you. This happens:
</p>
<p>
</p>
<pre>
System.Data.DataSet
</pre>
<p>
Useless. How about something that actually shows the object in string form?
</p>
<p>
</p>
<pre>
+----------------------------------------------------------------+
| DataSet1                                                       |
+----------------------------------------------------------------+
| Table1                                                         |
+---------+-----------+------------------+------------+----------+
| field01 | field02   | field03          | field04    | field05  |
+---------+-----------+------------------+------------+----------+
|       1 | first     | NULL             | NULL       | NULL     |
|       2 | second    | another          | 1999-10-23 | 10:30:00 |
|       3 | a third   | more foo for you | 1999-10-24 | 10:30:01 |
+---------+-----------+------------------+------------+----------+
</pre>
<p>
Seems perfectly logical to me, but you'll have to write your own custom ToString() implementation to get the behavior that should have been there in the first place.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2005-11-10T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/please-use-tostring-responsibly/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ The Windows 95 Startup Sound ]]></title>
<link>https://blog.codinghorror.com/the-windows-95-startup-sound/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
Did you know that <a href="http://www.codinghorror.com/blog/files/Win95-startup-sound.mp3">the Windows 95 startup sound</a> was composed by avant-garde electronic musician <a href="http://en.wikipedia.org/wiki/Brian_Eno">Brian Eno</a>? I had no idea until I saw it referenced on <a href="http://musicthing.blogspot.com/2005/05/tiny-music-makers-pt-2-microsoft-sound.html">music thing</a>. Eno describes the process in a <a href="http://www.sfgate.com/cgi-bin/article.cgi?file=/chronicle/archive/1996/06/02/PK70006.DTL">1996 San Francisco Chronicle interview</a>:
</p>
<p>
</p>
<blockquote>
<i>
Q: How did you come to compose "The Microsoft Sound''?
</i><p>
A: The idea came up at the time when I was completely bereft of ideas. I'd been working on my own music for a while and was quite lost, actually. And I really appreciated someone coming along and saying, "Here's a specific problem -- solve it.''
</p>
<p>
The thing from the agency said, "We want a piece of music that is inspiring, universal, blah- blah, da-da-da, optimistic, futuristic, sentimental, emotional,'' this whole list of adjectives, and then at the bottom it said "and it must be 3 1/4 seconds long.''
</p>
<p>
I thought this was so funny and an amazing thought to actually try to make a little piece of music. It's like making a tiny little jewel.
</p>
<p>
In fact, I made 84 pieces. I got completely into this world of tiny, tiny little pieces of music. I was so sensitive to microseconds at the end of this that it really broke a logjam in my own work. Then when I'd finished that and I went back to working with pieces that were like three minutes long, it seemed like oceans of time.
</p>
</blockquote>
<p>
The rest of the <a href="http://musicthing.blogspot.com/2005/05/all-this-week-tiny-music-makers.html">tiny music makers series</a> are just as interesting, and a few of them are computer-related sounds you've probably heard before.
</p>
<p>
I distinctly remember the <a href="http://www.washingtonpost.com/wp-srv/business/longterm/microsoft/stories/1995/debut082495.htm">massive media blitz around Windows 95</a>, including <a href="http://www.songfacts.com/detail.php?id=608&amp;">the use of the Rolling Stones' <i>Start Me Up</i></a>. I expect a similar media blitz for Windows Vista, which is arguably the most important consumer OS out of Redmond since 1995.
</p>
<p>
I'm not aware of any famous musical pedigrees for subsequent Windows start up sounds in Win98 and beyond. But I'm definitely glad we don't have <a href="http://www.prangstgrup.com/startupsound/">this startup sound</a>.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2005-11-12T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/the-windows-95-startup-sound/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ The Lost Art of Progressive HTML Rendering ]]></title>
<link>https://blog.codinghorror.com/the-lost-art-of-progressive-html-rendering/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
One thing I dislike about ASP.NET is that <b>it renders the entire web page in memory before sending one single byte of that page to the browser.</b> Consider an ASP.NET page with an embedded DataGrid that relies on ten complex database queries over 15 seconds. Why can't we serve up part of the page while we're waiting for those DataGrid queries-- so the user has something to look at? A blank page is a disappointing user experience.  The <a href="http://www.codinghorror.com/blog/archives/000276.html">strong psychological benefit of progressive rendering is well documented</a>.
</p>
<p>
What's even more galling is that HTML was originally designed to render progressively as content is received. Internet Explorer is perfectly capable of <a href="http://blogs.msdn.com/ie/archive/2005/02/10/370721.aspx">rendering partial HTML content</a>. Netscape offered progressive rendering <a href="http://www.boutell.com/newfaq/history/fbrowser.html">as far back as version 1.0</a>:
</p>
<p>
</p>
<blockquote><i>
Netscape is the browser that introduced most all of the remaining major features that define a web browser as we know it. The first version of Netscape appeared in October 1994 under the code name "Mozilla." <b>Netscape 1.0's early beta versions introduced the "progressive rendering" of pages and images, meaning that the page begins to appear and the text can be read even before all of the text and/or images have been completely downloaded.</b> Version 1.1, in March 1995, introduced HTML tables, which are now used in the vast majority of web pages to provide page layout.
</i></blockquote>
<p>
See progressive HTML rendering in action via <a href="http://msdn.microsoft.com/workshop/samples/author/dhtml/refs/tables3.htm">this MSDN sample</a>:
</p>
<p>
<img alt="image placeholder" >
 
<img alt="image placeholder" >
</p>
<p>
This particular sample is a demonstration of IE's <a href="http://msdn.microsoft.com/library/default.asp?url=/workshop/author/dhtml/reference/properties/tablelayout.asp">table-layout attribute</a>, which isn't even necessary for Firefox to render the table progressively. But it really doesn't matter which browser you use; the same "show as much as you can as soon as you can" rendering rule should apply to any web page you design.
</p>
<p>
If the pictured table was rendered as a DataGrid, progressive rendering support is moot. The page model of ASP.NET precludes a single byte of data being sent to the client until the entire page is rendered on the server. <b>There's no opportunity for the browser to start displaying data to the user while the server is still chugging away on the data.</b> The user is stuck staring at a blank web page for the full 15 seconds until the operation completes on the server.
</p>
<p>
You can still write ASP.NET pages that properly stream data to the browser using <b>Response.Write</b> and <b>Response.Flush</b>. But you can't do it within the normal ASP.NET page lifecycle. Maybe this is a natural consequence of the ASP.NET abstraction layer.
</p>
<p>
Regardless, it still sucks for users.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2005-11-14T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/the-lost-art-of-progressive-html-rendering/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ Disambiguating Search with Quasi-Evil Hierarchies ]]></title>
<link>https://blog.codinghorror.com/disambiguating-search-with-quasi-evil-hierarchies/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
Let's say I was to search Google for the word <b>Jaguar</b>:
</p>
<p>
<img alt="image placeholder" >
</p>
<p>
There's an immediate problem. The semantics of <b>Jaguar</b> only exist in my head, not in any search box. Did I mean...
</p>
<ul>
<li>Jaguar the car?
</li>
<li>OSX Jaguar?
</li>
<li>Jaguar the animal?
</li>
<li>The Atari Jaguar?
</li>
<li>Austin Power's <a href="http://www.idcow.com/etl2039.html">Shaguar</a>?
</li>
</ul>
<p>
Whichever it is, <b>Google is displaying a lot of search results that are totally irrelevant to me.</b> Sure, I could type in more words, but that's at odds with the Google philosophy of simplicity. A single word should get me what I want.
</p>
<p>
Now compare the same search for Jaguar on eBay:
</p>
<p>
<img alt="image placeholder" >
</p>
<p>
Although I get the same poor results initially, I can indicate which kind of Jaguar I <i>really</i> meant with an additional click on the categories on the left side of the page. This immediately filters the search results to something relevant with almost no effort on my part.
</p>
<p>
Search dominates the web now, and for good reason. My apologies to <a href="http://docs.yahoo.com/info/misc/history.html">Yet Another Hierarchically Organized Oracle</a> and the <a href="http://dmoz.org/about.html">Open Directory Project</a>, but <a href="http://www.microcontentnews.com/articles/deathofhierarchy.htm">rigid hierarchy is evil.</a> However, a <b>rigid hierarchy is tremendously powerful as a semantic-narrowing filter on search results.</b>
</p>
<p>
In a brave new Google world of "I'll just type in what I want and hit Enter" search, there may still be room for some <a href="http://www.imdb.com/title/tt0145660/quotes">quasi-evil</a> hierarchy in there somewhere. For example, <b>if Google is going to suggest "Did you mean.." corrections when I misspell a search term, why don't they do the same thing to disambiguate semantics?</b>
</p>
<p>
<img alt="image placeholder" >
</p>
<p>
Unlike the rigid, manual categorizations of eBay and DMOZ, you could probably automate this kind of semantic suggestion engine using Markov chain probabilities on existing web pages.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2005-11-15T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/disambiguating-search-with-quasi-evil-hierarchies/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ Software Apprenticeship ]]></title>
<link>https://blog.codinghorror.com/software-apprenticeship/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>In <a href="http://www.softwarebyrob.com/2005/11/15/software-training-sucks-roll-it-back/">Software Training Sucks: Why We Need to Roll it Back 1,000 Years</a>, Rob Walling makes a <strong>compelling argument for abandoning traditional training classes in favor of apprenticeships</strong>:</p>
<blockquote>
<p>[Why not] use the time-tested approach of trades that have been doing it for years? Let's take an electrical apprenticeship as an example: in the United States today, the International Brotherhood of Electrical Workers (I.B.E.W.) trains thousands of electricians every year. They learn through two distinct experiences:</p>
<ul>
<li>
<p>Attending night school during the week to learn the theory of electricity.</p>
</li>
<li>
<p>Working days on a construction site where they're able to gain experience applying the theory to the hands-on construction of a building</p>
</li>
</ul>
<p>His first day on the job an apprentice is paired up with a journeyman (an experienced electrician), who shows him the ropes. The journeyman typically talks the apprentice through a task, demonstrates the task, has the apprentice perform the task, then gives feedback. Listen, watch, do, review.</p>
<img alt="image placeholder" >
<p>With software it looks like this: the mentor evaluates the task at hand, be it writing data access code or building a web-based user interface, and holds a white-board discussion with the apprentice (listen). Next, the mentor might write sample code demonstrating a particularly difficult or confusing concept (watch). At this point the mentor sends the mentee off to gain their own experience writing code (do). And finally, the mentor should review the code, providing positive and negative feedback and suggesting improvements (review). Listen, watch, do, review.</p>
<p>[..] the key to any type of apprenticeship is the "do" step. Most software training gives you the listen and watch, but the "do and review" is what inspires growth and advances skills. The beauty of apprenticeship is that it tackles theory and experience in one fell swoop. And it's easier than you think.</p>
</blockquote>
<p>Instead of a <a href="http://blog.codinghorror.com/welcome-to-the-tribe/">loose confederation of tribes</a>, maybe we should be cultivating apprentice, journeyman, master relationships in software development.</p>
<p><strong>The mixture of theory by night and real world coding by day</strong> is particularly compelling. Maybe this is why I've seen so many talented interns turn into amazing developers – they're working on real business code while getting the computer science courseware theory, too.</p>
<p>Being a good mentor isn't easy, though. I have difficulty mentoring developers who are too far apart from me in skill level. I'm too impatient. If you're putting football players together on a field to scrimmage, don't mix professional players with high school players. The skill disparity is too great for them to actually <em>play football together</em>. And how can they learn without playing the game? Now, if you throw some college football players in the mix, it's on!</p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2005-11-16T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/software-apprenticeship/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ Learning from TEH INTARWEB ]]></title>
<link>https://blog.codinghorror.com/learning-from-teh-intarweb/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
I try to avoid posting entries from the <a href="http://www.25hoursaday.com/weblog/CategoryView.aspx?category=Mindless%20Link%20Propagation">Mindless Link Propagation Department</a>, but Adam Bosworth's article <a href="http://acmqueue.com/modules.php?name=Content&amp;pa=showpage&amp;pid=337&amp;page=1">Learning from The Web</a> is excellent and it deserves a careful read:
</p>
<blockquote>
<i>
The Web taught us several unintuitive lessons:
</i><p>
</p>
<ol>
<li>Simple, relaxed, sloppily extensible text formats and protocols often work better than complex and efficient binary ones
</li>
<li>It is worth making things simple enough that one can harness Moore's law in parallel
</li>
<li>It is acceptable to be stale much of the time
</li>
<li>The wisdom of crowds works amazingly well
</li>
<li>People understand a graph composed of tree-like documents (HTML) related by links (URLs).
</li>
<li>Pay attention to physics
</li>
<li>Be as loosely coupled as possible.
</li>
<li>KISS. Keep it (the design) simple and stupid
</li>
</ol>
</blockquote>
<p>
In addition to all the architectural stuff Adam outlines, we can't overlook the critical contribution of web browser user interface. <b>The browser popularized the web by making it dead simple to use</b>:
</p>
<p>
</p>
<ul>
<li>The entire interface is driven by a <b>single mouse click</b>. <a href="http://www.codinghorror.com/blog/archives/000096.html">Nary a double-click in sight!</a> And none of the interface is obscured behind things like drop-down menus; it's all immediately visible and immediately clickable.
</li>
<li>
<b>The back button</b>. Easily the most profound innovation in user interface in the last ten years. Don't like where you are? Go back to where you were. It's totally natural.
</li>
<li>Each webpage <b>focuses on a single task</b>. Since websites are slow to load and can't display much at once, designers were forced to stick to one task per page, along with a palette of relevant tasks for that activity. A refreshing change of pace from your typical monolithic application with its monster twenty-item cascading main menu.
</li>
</ul>
<p>
These "webby" UI characteristics are now collectively known as <a href="http://www.codinghorror.com/blog/archives/000098.html">Inductive User Interface</a>, and figure promimently in many newer client applications and operating systems.
</p>
<p>
Adam also defines some of the shortcomings of XML, and in the process, <b>proposes RSS as an all-out replacement for XML</b>:
</p>
<p>
</p>
<blockquote>
<i>
Some of us learned these lessons seven or eight years ago and applied them to distributed computing. We had the explicit goal of using XML over HTTP to exchange information between applications via messages to build a loosely coupled, robust, Web-friendly model for distributed computing. In my humble opinion, however, we ignored or forgot lessons 3, 4, and 5.
</i><p>
RSS 2.0 has reached the tipping point where it is universally understood. [..] It may well be that a lot of useful information is going to flow over the Web as either RSS 2.0 or Atom (or both, depending on the type the requester asks for). It addresses many of the serious limitations or outages in XML today.
</p>
</blockquote>
<p>
The last section on databases reads like a logical continuation of the "RSS defeats XML" thought, and more specifically, an argument in favor of <a href="http://blog.outer-court.com/archive/2005-11-16-n68.html">Google Base</a>. Did I mention that Adam works for Google?
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2005-11-17T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/learning-from-teh-intarweb/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ Comparing Font Legibility ]]></title>
<link>https://blog.codinghorror.com/comparing-font-legibility/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
If you're not reading the Wichita State Software Usability Research Laboratory <a href="http://psychology.wichita.edu/surl/">newsletter</a> regularly, you should be. It's an amazing source of usability experiments with actual data, hypotheses, citations, statistics, and all that other stuff that <a href="http://www.codinghorror.com/blog/archives/000028.html">puts the science back into computer science</a>.
</p>
<p>
A 2001 SURL experiment <a href="http://psychology.wichita.edu/surl/usabilitynews/3S/font.htm">compared the legibility of twelve common web fonts</a> on a then-typical 17" monitor running at a resolution of 1024x768. And before you read any further, you should first <a href="http://psychology.wichita.edu/surl/usabilitynews/3S/compare.htm">view the font samples</a>.
</p>
<p>
</p>
<blockquote>
Examining the mean reading time for each font type irrespective of their accuracy, we found significant differences. <b>The reading time difference between [Corsiva and Tahoma] was 40 seconds for approximately two pages of text.</b> This finding of a relatively small difference in reading speed between these fonts has been consistent with <a href="http://psychology.wichita.edu/surl/usabilitynews/2S/font.htm">our previous studies</a>.
<p>
<img alt="image placeholder" >
</p>
</blockquote>
<p>
I'm surprised that they consider a difference of 40 seconds -- that's 13 percent of the total reading time of ~310 seconds -- "relatively small". A 13 percent difference in reading time between the pseudo-calligraphic, completely inappropriate Corsiva and Tahoma isn't terribly surprising.
</p>
<p>
But here's what is: <b>Courier -- the only monospace font in the experiment -- was the second worst font for reading time</b>. Courier barely performed any better than the abhorrent Corsiva! Any connection between reading paragraphs in a browser and reading code in an IDE is unclear, but it certainly doesn't bode well for the use of monospace fonts in general.
</p>
<p>
In the end, the reading speed differences between the various fonts may not be large enough to be significant. At least not for the type of reading most people do on the computer:
</p>
<p>
</p>
<blockquote>
.. the different reading speeds associated with various font types may not be of any real consequence for short online passages -- as long as the fonts are within the conventional font size and type range.
</blockquote>
<p>
Before worrying about fonts, <b>be sure you aren't presenting giant blocks of text to the user in the first place.</b> <a href="http://www.useit.com/alertbox/9703b.html">Well-designed web pages avoid using large blocks of text</a>, and so should your code.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2005-11-18T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/comparing-font-legibility/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ Conversations with Erich Gamma ]]></title>
<link>https://blog.codinghorror.com/conversations-with-erich-gamma/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
Artima has another great interview series, this time with <b>Erich Gamma</b>. You know, Erich Gamma: <a href="http://www.codinghorror.com/blog/archives/000200.html">Gang of Four</a>, <a href="http://www.junit.org/index.htm">JUnit</a>, <a href="http://www.eclipse.org/">Eclipse</a>. As you might expect from such a notable developer, it's full of great advice. Like this section on <b>avoiding frameworkitis</b>:
</p>
<p>
</p>
<blockquote>
Frameworkitis is the disease that <a href="http://msdn.microsoft.com/practices/guidetype/appblocks/">a framework wants to do too much for you</a> or it does it in a way that you don't want but you can't change it. It's fun to get all this functionality for free, but it hurts when the free functionality gets in the way. But you are now tied into the framework. To get the desired behavior you start to fight against the framework. And at this point you often start to lose, because it's difficult to bend the framework in a direction it didn't anticipate. Toolkits do not attempt to take control for you and they therefore do not suffer from frameworkitis.
<p>
If we do frameworks, we try to make them small frameworks. We prefer many small frameworks over one heavyweight framework. <b>The bigger the framework becomes, the greater the chances that it will want to do too much, the bigger the learning curves become, and the more difficult it becomes to maintain it.</b> If you really want to take the risk of doing frameworks, you want to have small and focused frameworks that you can also probably make optional. If you really want to, you can use the framework, but you can also use the toolkit. That's a good position that avoids this frameworkitis problem, where you get really frustrated because you have to use the framework. Ideally I'd like to have a toolbox of smaller frameworks where I can pick and choose, so that I can pay the framework costs as I go.
</p>
</blockquote>
<p>
Highly recommended.
</p>
<p>
</p>
<ul>
<li>
<a href="http://www.artima.com/lejava/articles/gammadpP.html">How to Use Design Patterns</a>
</li>
<li>
<a href="http://www.artima.com/lejava/articles/reuseP.html">Erich Gamma on Flexibility and Reuse</a>
</li>
<li>
<a href="http://www.artima.com/lejava/articles/designprinciplesP.html">Design Principles from Design Patterns</a>
</li>
<li>
<a href="http://www.artima.com/lejava/articles/patterns_practiceP.html">Patterns and Practice</a>
</li>
<li>
<a href="http://www.artima.com/lejava/articles/eclipse_cultureP.html">Eclipse's Culture of Shipping</a>
</li>
</ul>
<p>
If you enjoyed that, you'll also enjoy a similar series of interviews with the Pragmatic Programmers. The entire series is linked at the bottom of <a href="http://www.codinghorror.com/blog/archives/000052.html">this post</a>.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2005-11-20T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/conversations-with-erich-gamma/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ Avoiding Undocumentation ]]></title>
<link>https://blog.codinghorror.com/avoiding-undocumentation/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
Have you ever noticed that much of the online MSDN .NET framework help is.. not helpful? Take the <a href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/cpref/html/frlrfSystemComponentModelIBindingListClassAddIndexTopic.asp">the MSDN help for the IBindingList.AddIndex method</a>, for example:
</p>
<p>
<img alt="image placeholder" >
</p>
<p>
Scott Swigart calls this <b>undocumentation</b>, and elaborates further in <a href="http://swigartconsulting.blogs.com/tech_blender/2005/07/the_undocumente.html">his blog post</a>:
</p>
<p>
</p>
<blockquote>
<i>
This is an example where quacking like a duck doesn't make you a duck.  This looks like documentation.  It shows up in the help alongside documentation, it's indexed like documentation, but it's not documentation.  It doesn't actually tell anyone anything they didn't already know.
</i><p>
Large swaths of the Framework are undocumented in exactly this way, and many v1.0 SDKs are, well, very undocumented.
</p>
<p>
Honestly, my problem isn't that lots of stuff is undocumented. It's that Microsoft spent time writing this undocumentation, proof-reading this undocumentation, and putting this undocumentation through the same process as the real documentation.  I don't know how much time was spent undocumenting things, but I'm guessing that if you add it all up, it's a lot.
</p>
<p>
I guess on the documentation teams, there must be some law that no class, property, method, or event will show up in the help with a big, bold, "Undocumented".
</p>
<p>
<b>Can we stop pretending?  Can you just mark everything as Undocumented until you get around to writing real documentation for it?</b>  Maybe even include a "Click here to vote to have this documented." For a simple test, if it doesn't include a code example, it's not documented.  Just mark it as such and move on.
</p>
</blockquote>
<p>
What really scares me is that tools like <a href="http://www.roland-weigelt.de/ghostdoc/">GhostDoc</a> produce exactly this kind of useless undocumentation. Now, I understand that GhostDoc is just a tool intended to assist developers in producing real documentation. And like all tools, it can be used properly or abused. But whatever you do, <b>please don't knowingly produce undocumentation for your applications</b>. Have some respect for your users and your fellow developers. Either take the time to write helpful documentation, or have the guts to acknowledge that <i>there simply is no documentation</i>.
</p>
<p>
I encounter undocumentation all the time when I'm rooting around for help on the .NET framework. For example, take a look at <a href="http://msdn2.microsoft.com/en-us/library/system.web.security.passportidentity.signout.aspx%20">the MSDN help for the PassportIdentity.SignOut method</a>*. This particular example of undocumentation is even more egregious, because <i>it actually includes code samples!</i> Utterly useless, one-line code samples. In each language.
</p>
<p>
</p>
<pre language="vb.net">
' This example demonstrates how to sign a user out of Passport.
' local GIF file that the user is redirected to.
Dim signOutGifFile As String = "signout.gif"
' Signs the user out of their Passport Profile and displays the SignOut.gif file.
System.Web.Security.PassportIdentity.SignOut(signOutGifFile)
</pre>
<p>
</p>
<p>
</p>
<pre language="c#">
// This example demonstrates how to sign a user out of Passport.
// local GIF file that the user is redirected to.
string signOutGifFile = "signout.gif";
// Signs the user out of their Passport Profile and displays the SignOut.gif file.
System.Web.Security.PassportIdentity.SignOut(signOutGifFile);
</pre>
<p>
But hey, at least the code samples are valid. As a Vertigo developer pointed out a few months ago, the code samples on the <a href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/cpref/html/frlrfsystemicomparableclasscomparetotopic.asp">MSDN help page for IComparable.CompareTo</a> aren't even correct:
</p>
<p>
</p>
<pre language="c#">
public class Temperature : IComparable
{
public int CompareTo(object obj) {
if(obj is Temperature)
{
Temperature temp = (Temperature) obj;
return m_value.CompareTo(temp.m_value);
}
throw new ArgumentException(
"object is not a Temperature");
}
protected int m_value;
public int Value
{
get { return m_value; }
set { m_value = value; }
}
public int Celsius
{
get { return (m_value-32) / 2; }
set { m_value = value * 2 + 32; }
}
</pre>
<p>
There are any number of websites documenting <a href="http://geography.about.com/c/ht/00/07/How_Convert_Fahrenheit_Celsius0962932698.htm">how to convert Fahrenheit to Celsius</a> and vice-versa:
</p>
<p>
</p>
<ol>
<li>Take the temperature in Fahrenheit and subtract 32.
</li>
<li>Divide by 1.8.
</li>
<li>The result is degrees Celsius.
</li>
</ol>
<p>
Oddly enough, the C++ sample <a href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/cpref/html/frlrfsystemicomparableclasscomparetotopic.asp">on the same page</a> is correct. I guess C++ developers really are smarter.
</p>
<p>
Grousing about all this undocumentation is funny, but it doesn't magically produce useful documentation. Here's something that might, though: <b>why not make the .NET framework documentation a Wiki?</b>
</p>
<p>
* Yes, we work on a few apps that use Microsoft Passport. God help us. God help us all.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2005-11-21T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/avoiding-undocumentation/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ The Many Faces of (Windows) Death ]]></title>
<link>https://blog.codinghorror.com/the-many-faces-of-windows-death/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
As I recall, the <a href="http://en.wikipedia.org/wiki/Blue_screen_of_death">Blue Screen of Death</a> was introduced with Windows NT 3.1 circa 1993:
</p>
<p>
</p>
<blockquote>
<b>A blue screen of death occurs when the kernel, or a driver running in kernel mode, encounters an error from which it cannot recover. This is usually caused by a [hardware] driver that throws an unhandled exception or performs an illegal operation.</b> The only action the user can take in this situation is to restart the computer, which results in possible data loss due to Windows not properly shutting down.
<p>
Blue screens are known as "Stop errors" in the Windows NT/2000/XP documentation, and are also sometimes referred to as "bugchecks".
</p>
<p>
The "Stop" message contains the error code and its symbolic name (e.g. 0x0000001E, KMODE_EXCEPTION_NOT_HANDLED) along with four error-dependent values in parentheses. Depending on the error code, it may display the address where the problem occurred, along with the driver which is loaded at that address. Under Windows NT and 2000, the second and third sections of the screen contain information on all loaded drivers and a stack dump, respectively. The driver information is in three columns; the first lists the base address of the driver, the second lists the driver's creation date (as a Unix timestamp), and the third lists the name of the driver.
</p>
</blockquote>
<p>
The BSoD is analogous to a <a href="http://en.wikipedia.org/wiki/Kernel_panic">Kernel Panic</a> in the UNIX world, and it became a standard fixture in all subsequent versions of Windows. Here's a chronological pictorial, starting with Win9x and going up to WinXP:
</p>
<p>
</p>
<table>
<tr>
<td>
<a href="http://www.codinghorror.com/blog/images/Windows_9X_BSOD.png">
<img alt="image placeholder" >
</a>
</td>
<td>
<a href="http://www.codinghorror.com/blog/images/Windows_NT_3.1_BSoD.png">
<img alt="image placeholder" >
</a>
</td>
</tr>
<tr>
<td>
<a href="http://www.codinghorror.com/blog/images/Windows_NT_3.5_BSoD.png">
<img alt="image placeholder" >
</a>
</td>
<td>
<a href="http://www.codinghorror.com/blog/images/Windows_2000_BSoD.png">
<img alt="image placeholder" >
</a>
</td>
</tr>
<tr>
<td>
<a href="http://www.codinghorror.com/blog/images/Windows_XP_BSOD.png">
<img alt="image placeholder" >
</a>
</td>
</tr>
</table>
<p>
Microsoft catches a lot of flak for the Blue Screen of Death, but as frequently noted throughout the BSoD documentation, <a href="http://www.codinghorror.com/blog/archives/000102.html">most BSoDs are due to faulty third-party hardware drivers</a>.
</p>
<p>
If you're a glutton for punishment, you can attempt to <a href="http://www.windowsitpro.com/Articles/Index.cfm?IssueID=26&amp;ArticleID=301">decipher all that technical jibba-jabba on the BSoD</a> or <a href="http://aumha.org/win5/kbestop.htm">perform BSoD troubleshooting</a>. If you're like most of us, you just cross your fingers and reboot.  You may not see the BSoD much in Windows XP or Windows Server 2003 because the latest versions of Windows are <a href="http://www.mvps.org/marksxp/WindowsXP/bsod.php">configured to reboot automatically after a BSoD is encountered</a>. Why wasn't it always this way -- after all, <b>what the heck else are you going to do after getting a BSoD?</b> Have a party?
</p>
<p>
After rebooting, you could celebrate by <a href="http://www.errorwear.com/shirts-microsoft.html">buying a BSoD T-Shirt</a>:
</p>
<p>
<a href="http://www.errorwear.com/shirts-microsoft.html"><img alt="image placeholder" >
</p>
<p>
And for a few laughs, you can install the <a href="http://www.microsoft.com/technet/sysinternals/miscellaneous/bluescreen.mspx">BSoD screensaver</a> on a coworker's computer when they're not around. This thing is highly authentic-- it even simulates a reboot-- and quite scary when you're not expecting it. In other words, it's hilarious.
</p>
<p>
<b>The bluescreen is so well known now that it has become a "(color) Screen Of Death" meme</b>. Sometimes it's used correctly, in the case of the <a href="http://www.xbox-scene.com/xbox1data/sep/EEFEkAEFAkTlDmtsQO.php">Xbox 360 Black Screen of Death</a> -- which appears to be related to overheating*. Sometimes it's expanded incorrectly to include things that have little to do with deep Kernel-level failures, such as the <a href="http://weblogs.asp.net/rhoward/archive/2004/08/09/211590.aspx">Yellow Screen of Death</a> in ASP.NET:
</p>
<p>
<a href="http://www.codinghorror.com/blog/images/yellow-screen-of-death-large.png">
<img alt="image placeholder" >
</a>
</p>
<p>
It's only partially yellow, and only partially a screen o' death. If you see it, your web app may be unavailable, but your server certainly isn't bluescreening.
</p>
<p>
* See the <a href="http://www.anandtech.com/systems/showdoc.aspx?i=2610&amp;p=6">massive internal Xbox 360 heatsink</a> to see why I think this is the case. It's a common problem with consoles when they're placed on carpet or in restricted areas with limited airflow. My Nintendo 64 used to overheat!
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2005-11-26T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/the-many-faces-of-windows-death/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ Dysfunctional Specifications ]]></title>
<link>https://blog.codinghorror.com/dysfunctional-specifications/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
The guys at 37signals <a href="http://www.37signals.com/svn/archives/001050.php">think functional specs are worthless</a>:
</p>
<blockquote>
<b>Don't write a functional specifications document.</b> Why? Well, there's nothing functional about a functional specifications document.
<p>
Functional specifications documents lead to an illusion of agreement. A bunch of people agreeing on paragraphs of text is not real agreement. Everyone is reading the same thing, but they're often thinking something different. This inevitably comes out in the future when it's too late. "Wait, that's not what I had in mind..." "Huh? That's not how we described it." "Yes it was and we all agreed on it -- you even signed off on it." You know the drill.
</p>
<p>
Functional specifications document are "yes documents." They're political. They're all about getting to "yes" and we think the goal up front should be getting to "no." Functional specs lead to scope creep from the very start. There's very little cost in saying "yeah, ok, let's add that" to a Word document.
</p>
<p>
Functional specs are often appeasement documents. They're about making people feel involved. But, there's very little reality attached to anything you do when the builders aren't building, the designers aren't designing, and the people aren't using. We think reality builds better products than appeasement.
</p>
<p>
Functional specs are about making decisions before you have enough information to decide. They are about predicting the future and we all know how accurate that is.
</p>
</blockquote>
<p>
In lieu of a functional spec, the guys at 37 Signals recommend writing <b>a simple one page story of what the app should do</b>. This probably isn't a functional spec in the traditional sense; it's more like a vision statement. And <a href="http://www.codinghorror.com/blog/archives/000351.html">you should have a vision statement</a>, because half the developers on your team <a href="http://www.softwarebyrob.com/archive/2005/08/29/Better_Developer_4_Know_What_Youre_Building.aspx">probably can't tell you what they're building anyway</a>.
</p>
<p>
Linus Torvalds evidently <a href="http://kerneltrap.org/node/5725">hates functional specifications</a>, too:
</p>
<p>
</p>
<blockquote>
A "spec" is close to useless. I have never seen a spec that was both big enough to be useful and accurate. And I have seen lots of total crap work that was based on specs. It's the single worst way to write software, because it by definition means that the software was written to match theory, not reality. There are two major reasons to avoid specs:
<p>
</p>
<ol>
<li>They're dangerously wrong. Reality is different, and anybody who thinks specs matter over reality should get out of kernel programming NOW. When reality and specs clash, the spec has zero meaning. Zilch. Nada. None. It's like real science: if you have a theory that doesn't match experiments, it doesn't matter how much you like that theory. It's wrong. You can use it as an approximation, but you MUST keep in mind that it's an approximation.
</li>
<li>Specs have an inevitable tendency to introduce abstraction levels and wording and documentation policies that make sense for a written spec. Trying to implement actual code off the spec leads to the code looking and working like CRAP. The classic example of this is the OSI network model protocols. Classic spec-design, which had absolutely zero relevance for the real world. We still talk about the seven layers model, because it's a convenient model for discussion, but that has absolutely zero to do with any real-life software engineering. In other words, it's a way to talk about things, not to implement them. And that's important. Specs are a basis for talking about things. But they are not a basis for implementing software.
</li>
</ol>
<p>
So please don't bother talking about specs. Real standards grow up despite specs, not thanks to them.
</p>
</blockquote>
<p>
In defense of functional specs, there's a <a href="http://pl.atyp.us/wordpress/?p=979">rebuttal of Linus' position at Canned Platypus</a>. And Joel has <a href="http://www.joelonsoftware.com/articles/fog0000000036.html">a persuasive three-part essay championing functional specifications</a> that's chock full of great advice; I highly recommend reading all three parts. Unfortunately, you know you're in trouble when Joel tells you <a href="http://www.joelonsoftware.com/articles/fog0000000033.html">how hard it is to write functional specifications that people actually read</a>:
</p>
<p>
</p>
<blockquote>
The biggest complaint you'll hear from teams that do write specs is that "nobody reads them." When nobody reads specs, the people who write them tend to get a little bit cynical. It's like the old Dilbert cartoon in which engineers use stacks of 4-inch thick specs to build extensions to their cubicles. At your typical big, bureaucratic company, everybody spends months and months writing boring specs. Once the spec is done, it goes up on the shelf, never to be taken down again, and the product is implemented from scratch without any regard to what the spec said, because nobody read the spec, because it was so dang mind-numbing. The very process of writing the spec might have been a good exercise, because it forced everyone, at least, to think over the issues. But the fact that the spec was shelved (unread and unloved) when it was completed makes people feel like it was all a bunch of work for naught.
<p>
Also, if your spec never gets read, you get a lot of arguments when the finished product is delivered. Somebody (management, marketing, or a customer) says: "wait a minute! You promised me that there would be a Clam Steamer! Where's the clam steamer?" And the programmers say, "no, actually, if you look on the spec on chapter 3, subchapter 4, paragraph 2.3.0.1, you'll see it says quite explicitly 'no clam steamer.'" But that doesn't satisfy the customer, who is always right, so the grumpy programmers have to go retrofit a clam steamer into the thing (making them even more cynical about specs). Or a manager says, "hey, all the wording on this dialog is too verbose, and there should be an advertisement at the top of every dialog box." And the programmers say, in frustration, "but you approved the spec which precisely listed the layout and contents of every dialog box!" But of course, the manager hadn't actually read the spec, because when he tried, his brain started seeping out through his eye sockets, and anyway, it was interfering with his Tuesday golf game.
</p>
<p>
So. Specs are good, but not if nobody reads them. As a spec-writer, you have to trick people into reading your stuff, and you should also probably make an effort not to cause any already-too-small brains to leak out through eye-sockets.
</p>
</blockquote>
<p>
<b>If it takes a writer as good as Joel to trick people into reading functional specs, the rest of us are totally screwed.</b> I guess that's hard to see when you're Joel, but it's been obvious to me on every project I've ever worked on.
</p>
<p>
Having spent the better part of the last two months writing functional specifications, I'm of two minds on them:
</p>
<ol>
<li>Yes, you absolutely should plan what you're going to do before you do it.
</li>
<li>No, you shouldn't try to plan everything you do in excruciating detail, because you'll forget a million things, then on top of that you'll encounter a bunch of problems you hadn't even considered, so you'll end up rewriting it all anyway.
</li>
</ol>
<p>
You have to strike some kind of balance between a one-page vision statement and an obsessively detailed five volume masterwork of a functional spec. I can't tell you what level of specification is appropriate for what you're doing, but here's what has worked for me:
</p>
<ul>
<li>When in doubt, <b>err on the side of that one-page vision statement.</b> At least people will read that. Maybe.
</li>
<li>
<b>Plan a little, then code a little. Repeat.</b> Planning and implementation should overlap; they're symbiotic processes. Too much planning is just as wrongheaded as no planning.
</li>
<li>
<b>Your spec should be a dynamic, living document.</b> It should change and grow along with your code. Have you considered making your spec a Wiki?
</li>
</ul>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2005-11-27T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/dysfunctional-specifications/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ C#, VB.NET, and echoing strings in the VS.NET Immediate Window ]]></title>
<link>https://blog.codinghorror.com/c-vbnet-and-echoing-strings-in-the-vsnet-immediate-window/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
I've become rather agnostic on the whole topic of <a href="http://www.codinghorror.com/blog/archives/000128.html">C# versus VB.NET</a>, but there are still those annoying little differences that sneak up behind you and rabbit-punch you in the kidneys. Like, say, using the VS.NET 2003 <a href="http://msdn2.microsoft.com/en-us/library/c3a0kd3x.aspx">command window in immediate mode</a> to print a string:
</p>
<p>
<img alt="image placeholder" >
</p>
<p>
<img alt="image placeholder" >
</p>
<p>
Usually VB.NET is guilty of handling things in odd and unexpected ways, but this time it's C#. <b>I expect newlines to appear in the immediate window as, oh, I don't know.. NEW LINES?</b> It's a bit difficult to read text filled with a bunch of rn notation instead of human readable whitespace. What's worse is that <i>even the variable tooltips in C# behave this way!</i>
</p>
<p>
How can I work around this annoying "feature" of the C# IDE? I thought about creating a macro to use <code>?System.Diagnostics.Debug.WriteLine(s)</code>, which behaves appropriately, but the Diagnostics class isn't always in scope at a breakpoint.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2005-11-28T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/c-vbnet-and-echoing-strings-in-the-vsnet-immediate-window/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ In praise of Beyond Compare ]]></title>
<link>https://blog.codinghorror.com/in-praise-of-beyond-compare/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
It's a shame that <a href="http://www.scootersoftware.com/home.php">Beyond Compare</a> isn't listed in more <a href="http://www.hanselman.com/blog/ScottHanselmans2005UltimateDeveloperAndPowerUsersToolList.aspx">"favorite tool" lists</a>. This amazing little folder and file differencing tool has earned its spot in my core toolset a dozen times over. Here's a screenshot of it in action:
</p>
<p>
<img alt="image placeholder" >
</p>
<p>
<a href="http://www.codinghorror.com/blog/archives/000153.html">I've mentioned Beyond Compare before</a>, but even a year later, few developers seem to know about it. If you haven't tried it yet, what are you waiting for? Are you <a href="http://www.codeproject.com/csharp/DiffEngine.asp">writing your own diff program in c#</a>? <a href="http://www.scootersoftware.com/beycomp.exe">Give it a 30-day trial spin</a>, and check out <a href="http://www.scootersoftware.com/download.php?c=v2plugins">the viewer plugins</a>, too.
</p>
<p>
Here are a few beginner tips when using Beyond Compare:
</p>
<p>
</p>
<ul>
<li>Make use of the ultra-handy right-click explorer file and folder context menus to compare stuff.
</li>
<li>The default comparison is file size plus date and time, which is super speedy but not always accurate. Use the little scales icon (or the Session | Comparison Control menu) to switch the comparison type to Size and CRC.
</li>
<li>When viewing a file comparison, use the referee icon (or the Tools | Edit Current Rules menu) to tweak the file comparison rules. I usually turn off all the options under "Unimportant Text" such as leading whitespace, case, line endings, etcetera.
</li>
</ul>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2005-11-29T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/in-praise-of-beyond-compare/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ Whatever Happened to the META Tag? ]]></title>
<link>https://blog.codinghorror.com/whatever-happened-to-the-meta-tag/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
When was the last time you saw a HTML header like this?
</p>
<p>
</p>
<pre>
&lt;head&gt;
&lt;title&gt;GUID World&lt;/title&gt;
&lt;meta name="description"
content="Everything you wanted to know about GUIDs but were afraid to ask"&gt;
&lt;meta name="keywords"
content="GUID, UUID, globally unique identifiers, 128-bit"&gt;
&lt;/head&gt;
</pre>
<p>
The web is a <b>metadata-free zone</b>. It's widely known that Google <a href="http://searchenginewatch.com/sereport/article.php/2165061">completely ignores metadata</a> in its indexes. The &lt;meta&gt; tag has fallen so far out of favor that it drags the whole concept of metadata down with it. And perhaps rightfully so. Cory Doctorow viciously deconstructs metadata in <a href="http://www.well.com/~doctorow/metacrap.htm">Metacrap: Putting the torch to seven straw-men of the meta-utopia</a>:
</p>
<p>
</p>
<blockquote>
There are at least seven insurmountable obstacles between the world as we know it and meta-utopia. I'll enumerate them below:.
<p>
1. People lie
</p>
<p>
Metadata exists in a competitive world. Suppliers compete to sell their goods, cranks compete to convey their crackpot theories (mea culpa), artists compete for audience. Attention-spans and wallets may not be zero-sum, but they're damned close. That's why:
</p>
<p>
</p>
<ul>
<li>A search for any commonly referenced term at a search-engine like Altavista will often turn up at least one porn link in the first ten results.
</li>
<li>Your mailbox is full of spam with subject lines like "Re: The information you requested."
</li>
<li>Publisher's Clearing House sends out advertisements that holler "You may already be a winner!"
</li>
<li>Press-releases have gargantuan lists of empty buzzwords attached to them.
</li>
</ul>
<p>
Meta-utopia is a world of reliable metadata. When poisoning the well confers benefits to the poisoners, the meta-waters get awfully toxic in short order.
</p>
</blockquote>
<p>
The other six reasons are equally caustic, and all have a common theme: <b>relying on users to create accurate metadata means you're betting on an optimistic view of human behavior.</b> And we all know how well <i>that</i> works out.
</p>
<p>
Which brings me to the complete abandonment of the &lt;meta&gt; tag. Isn't it ironic that groups still advocate manually adding metadata to web pages? Who, exactly, is adding <a href="http://dublincore.org/documents/dces/">The Dublin Core Metadata Element Set</a> to the &lt;head&gt; section of their web pages? Nobody, that's who.
</p>
<p>
Manual metadata may be suspect, but <b>automated generation of metadata is practically the holy grail.</b> Google's entire 450 zillion dollar market cap is predicated on one tiny, automatically generated piece of metadata on every web page they index: <a href="http://www.google.com/technology/">PageRank</a>. Popularity rules the web. It's high school all over again: either you're popular and people link to you, or.. well, good luck on that whole prom thing.
</p>
<p>
But popularity has some limitations. For one thing, <b>PageRank doesn't work on an intranet</b>. Office documents are rarely HTML, rarely linked to each other, and you probably don't have a large enough sample set to do any fancy statistical analysis, either. That's why the <a href="http://www.google.com/enterprise/">Google Search Appliance</a> not only actively indexes metadata in the &lt;meta&gt; tag, it <i>requires</i> metadata to return relevant results. It's <a href="http://code.google.com/gsa_apis/xml_reference.html#request_meta_filter">right in the manual</a>. Just try doing that with the capital-g Google.
</p>
<p>
Perhaps that's why <a href="http://www.tbray.org/ongoing/When/200x/2003/07/29/SearchMeta">Tim Bray steadfastly maintains that some form of metadata is necessary to improve search results</a>.
</p>
<p>
</p>
<blockquote>
One of the Web's distinguishing features is that there's <b>a big gaping hole where the metadata ought to be</b>. The Web has resources, identified by URI, and you can ask for "representations," which come with some metadata, but the metadata is about the representation, not the resource. Given a URI, the Web has no built-in way to ask questions about it, for example "What is this about?" or "When does it expire?" or "Is this suitable for children?" or "Is this good?"
</blockquote>
<p>
I'm not an advocate of the <a href="http://en.wikipedia.org/wiki/Semantic_Web">utopian semantic web</a>, mind you, but I sure would like something that can tell the difference between <a href="http://www.codinghorror.com/blog/archives/000445.html">a Jaguar and a Jaguar</a> instead of telling me which one is more popular.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2005-11-30T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/whatever-happened-to-the-meta-tag/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ Trespasser Postmortem ]]></title>
<link>https://blog.codinghorror.com/trespasser-postmortem/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
I love playing videogames, but I have no illusions whatsoever of being talented enough to <i>write</i> videogames. Game developers live a hard life, and <a href="http://www.codinghorror.com/blog/archives/000129.html">not just because the industry is notoriously abusive</a>. Even the most brilliant minds can get bogged down in the morass of complexity that is game development. Take, for example, 1998's <a href="http://www.mobygames.com/game/trespasser">Trespasser</a>. The design goals for the game were impressive even by today's standards, as documented in the <a href="http://www.gamasutra.com/features/19990514/trespasser_01.htm">Gamasutra postmortem</a> (login required; use <a href="http://www.bugmenot.com/view.php?url=gamasutra">BugMeNot</a> credentials or disable JavaScript):
</p>
<p>
</p>
<blockquote>
<img alt="image placeholder" >
The pie-in-the-sky concept for Trespasser was an outdoor engine with no levels, a complete rigid-body physics simulation, and behaviorally-simulated and physics-modeled dinosaurs. The underlying design goal was to achieve a realistic feel through consistency of looks and behavior. Having an abandoned island setting was a useful way to exclude anything which did not seem possible to simulate, such as flexible solids like cloth and rope, wheeled vehicles, and the effects of burning, cutting, and digging.
<p>
The game would play from a first-person perspective, and you would experience the environment through a virtual body to avoid the "floating gun" feeling prevalent in the Wolfenstein breed of first person games. Combat would be less important than in a shooter, and dinosaurs would be much more dangerous than traditional first-person shooter enemies. The point of the game would be exploration and puzzle-solving, and when combat happened, it would more often involve frightening opponents away by inflicting pain than the merciless slaughter of every moving creature.
</p>
<p>
Likewise, though we would only have a few different types of dinosaurs, the dinosaur AI system would allow them to react to each other and the player in a large variety of ways, choosing appropriate responses depending on their emotional state. Sophisticated, fully-interruptable scenes would occur spontaneously rather than requiring large amounts of scripting, and observing the food chain in action would be as absorbing as playing the game itself. Interacting with the limited but rich features would lead to "emergent gameplay," the grail for many of Looking Glass' best thinkers since Underworld I shipped and fans began to write in describing favorite moments - moments which had not been specifically designed or even experienced by the team itself.
</p>
</blockquote>
<p>
All of the <a href="http://gamasutra.com/php-bin/article_display.php?category=5">GamaSutra postmortems</a> are <b>fascinating war stories of extremely challenging software development projects</b>. Like Steve McConnell's <a href="http://www.codinghorror.com/blog/archives/000017.html">list of classic development mistakes</a>, it's worth reading through a few of these, at least for games you're interested in. Trespasser is a worthy starting point because it was so far ahead of its time, and because it's also <a href="http://www.justadventure.com/articles/Turkeys/Turkeys.shtm">one of the most notorious failures in PC gaming history</a>.
</p>
<p>
Personally, I loved Trespasser, even though it was a perplexing mish-mash of 50 percent genius and 50 percent unfinished beta. It didn't help that the game was released right as hardware 3D acceleration was becoming mainstream, either. But the deepest problems had nothing to do with software, and everything to do with <a href="http://www.amazon.com/exec/obidos/ASIN/0932633439/codihorr-20">peopleware</a>. Here are a few highlights from the <a href="http://www.gamasutra.com/features/19990514/trespasser_01.htm">postmortem</a>:
</p>
<p>
</p>
<blockquote>
The biggest indication that Trespasser had game design problems was the fact that it never had a proper [gameplay] design spec. For a long time, the only documents which described the gameplay were a prose-based walkthrough of what the main character would do as she went through the game, and a short design proposal listing the keys which would be used and some rough ideas of what gameplay might actually be. These documents were created before any playable technology existed and were based on promises of how that technology was supposed to work.
<p>
When the game had a complete team and had essentially entered production, the prose walkthrough was used to create level maps and more-complete puzzle descriptions. However, by this point in the project artists had been building assets for nearly a year and programmers had been implementing code for even longer, and <b>the gameplay was being crafted as a primarily engineering-driven rather than design-driven process</b>. Engineering-driven software design can work fine when the gameplay needs of the final product are extremely light and flexible, but in the case of Trespasser, where we were trying to achieve a specific and complex gameplay, it ended up being the source of many of our problems.
</p>
<p>
The general awkwardness of team relations was exacerbated by <b>having a key part of the whole project - the physics - written by the project leader</b>. It used to be that it was possible to both run a project and contribute key work to it, but with a game as complicated and a team as large as Trespasser, it was not reasonable to expect that this would be possible. Beyond being a nigh-impossible task, it also put the department heads of the project, especially the lead programmer, in an unenviable and difficult position. When the physics code was continuously delayed and unsatisfactory, there was no easy way to take action to fix those problems. No lead programmer should be expected to tell their boss that he had better get his work done or take some drastic action to get the project back on schedule. [..] Perhaps worst of all were the personality conflicts which arose - after a while, it became impossible to even attempt to raise concerns about the physics code without in a constructive rather than confrontational manner. Many on the team began to go out of their way to avoid dealing with the issue at all, but this only allowed the problems to continue growing.
</p>
</blockquote>
<p>
Sound familiar? The project lead on Trespasser was <a href="http://en.wikipedia.org/wiki/Seamus_Blackley">Seamus Blackley</a>, who later went on to work for Microsoft, where he created and evangelized the Xbox.
</p>
<p>
(if you liked this postmortem, I highly recommend the book <a href="http://www.amazon.com/exec/obidos/ASIN/1578202140/codihorr-20">Postmortems from Game Developer: Insights from the Developers of Unreal Tournament, Black and White, Age of Empires, and Other Top-Selling Games</a>, which is a giant collection of in-depth postmortems like the one on Trespasser.)
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2005-12-01T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/trespasser-postmortem/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ The TweakUI Tips ]]></title>
<link>https://blog.codinghorror.com/the-tweakui-tips/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
I've been running some version of Microsoft's cool <a href="http://www.microsoft.com/windowsxp/downloads/powertoys/xppowertoys.mspx%0A">TweakUI powertoy</a> since the heady days of Windows 95. I recently found out that the author is <a href="http://blogs.msdn.com/oldnewthing/archive/2005/02/02/365432.aspx">none other than Raymond Chen</a>:
</p>
<p>
</p>
<blockquote><i>
Some people claim that Tweak UI was written because Microsoft got tired of responding to customer complaints. I don't know where they got that from. Tweak UI was written because I felt like writing it.
</i></blockquote>
<p>
TweakUI has a Tips section which contains some highly useful advice about cool little Windows subtleties. I've seen at least three of these tips posted verbatim as "Eureka!" blog entries by various people at various times, so I think <b>everyone would benefit from a quick TweakUI tips refresher</b>, including myself. I used the SysInternals <a href="http://www.sysinternals.com/Utilities/Strings.html%0A">strings utility</a> to dump all the strings from the executable and isloated the tips. Here they are, in order:
</p>
<p>
</p>
<ol>
<li>Press Win+L to switch to the Welcome screen or to lock your workstation.
</li>
<li>You can switch users without going through the Welcome screen:  From Task Manager, go to the Users tab, right-click a user, and select Connect.
</li>
<li>Hold down the shift key in the shutdown dialog to change "Stand By" to "Hibernate".  Or just press H to hibernate instantly.  You can even use the Power Control Panel to configure your power button to hibernate.
</li>
<li>To disable the password when resuming from standby or hibernation, open the Power Control Panel and uncheck "Prompt for password after returning from standby" on the Advanced tab.
</li>
<li>You can rename multiple files all at once: Select a group of files, right-click the first file, and select "Rename". Type in a name for the first file, and the rest will follow.
</li>
<li>Hold down the shift key when switching to thumbnail view to hide the file names.  Do it again to bring them back.
</li>
<li>If you create a file called Folder.jpg, that image will be used as the thumbnail for the folder.  What's more, that image will also be used as the album art in Windows Media Player for all media files in that folder.
</li>
<li>From the View Menu, select "Choose Details" to select which file properties should be shown in the Explorer window. To sort by a file property, check its name in the "Choose Details" in order to make that property available in the "Arrange Icons by" menu.
</li>
<li>To display the volume control icon in the taskbar, go to the Sounds and Audio Devices Control Panel and select "Place volume icon in the taskbar".
</li>
<li>Hold down the shift key when deleting a file to delete it immediately instead of placing it in the Recycle Bin. Files deleted in this way cannot be restored.
</li>
<li>If you hold down the shift key while clicking "No" in a Confirm File Operation dialog, the response will be interpreted as "No to All".
</li>
<li>To save a document with an extension other than the one a program wants to use, enclose the entire name in quotation marks.  For example, if you run Notepad and save a file under the name Dr.Z, it will actually be saved under the name Dr.Z.txt. But if you type "Dr.Z" then the document will be saved under the name Dr.Z.  Note that a document so-named cannot be opened via double-clicking since the extension is no longer ".txt".
</li>
<li>Put a shortcut to your favorite editor in your Send To folder and it will appear in your "Send To" menu. You can then right-click any file and send it to your editor.
</li>
<li>Ctrl+Shift+Escape will launch Task Manager.
</li>
<li>To arrange two windows side-by-side, switch to the first window, then hold the Control key while right-clicking the taskbar button of the second window.  Select "Tile Vertically".
</li>
<li>To close several windows at once, hold down the Control key while clicking on the taskbar buttons of each window.  Once you have selected all the windows you want to close, right-click the last button you selected and pick "Close Group".
</li>
<li>Some objects (such as Control Panel applications) support additional commands which are available by holding the Shift key while right-clicking.
</li>
<li>In the Address Bar, type "microsoft" and hit Ctrl+Enter.  Internet Explorer automatically inserts the "http://www." and ".com" for you.
</li>
<li>To remove an AutoComplete entry from a Web form, highlight the item in the AutoComplete dropdown and press the Delete key. To remove all Web form AutoComplete entries, go to the Internet Explorer Tools menu, select Internet Options, Content, AutoComplete, then press the "Clear Forms" button.
</li>
<li>To organize your Favorites in Explorer instead of using the Organize Favorites dialog, hold the shift key while selecting "Organize Favorites" from the Favorites menu of an Explorer window.
</li>
<li>You can organize your Favorites by dragging the items around your Favorites menu. Alternatively, you can open the Favorites pane and hold the Alt key while pressing the up and down arrows to change the order of your Favorites.
</li>
<li>To run Internet Explorer fullscreen, press F11. Do it again to return to normal mode.
</li>
<li>When dragging a file in Explorer, you can control the operation that will be performed when you release the mouse button:<br>
Hold the Control key to force a Copy.<br>
Hold the Shift key to force a Move.<br>
Hold the Alt key to force a Create Shortcut.<br>
</li>
<li>If your "Printers and Faxes" folder is empty, you can hide the "Printers and Faxes" icon when viewed from other computers by stopping the Print Spooler service.
</li>
<li>You can turn a folder into a desktop toolbar by dragging the icon of the desired folder to the edge of the screen. You can then turn it into a floating toolbar by dragging it from the edge of the screen into the middle of the screen.  (It helps if you minimize all application windows first.)
</li>
<li>You can turn a folder into a taskbar toolbar.<br>
First, unlock your taskbar.<br>
Next, drag the icon of the desired folder to the space between the taskbar buttons and the clock. (Wait for the no-entry cursor to change to an arrow. It's a very tiny space; you will have to hunt for it.)<br>
You can rearrange and resize the taskbar toolbar you just created. You can even turn the taskbar toolbar into a menu by resizing it until only its name is visible.
</li>
<li>To add or remove columns from Details mode, select Choose Details from the View menu, or just right-click the column header bar.
</li>
<li>In Internet Explorer, hold the Shift key while turning the mouse wheel to go forwards or backwards.
</li>
<li>In Internet Explorer, hold the Shift key while clicking on a link to open the Web page in a new window.
</li>
<li>In Internet Explorer, type Ctrl+D to add the current page to your Favorites. This and many more keyboard shortcuts can be found by going to Internet Explorer, clicking the Help menu, then selecting Contents and Index.  From the table of contents, open Accessibility and click "Using Internet Explorer keyboard shortcuts".
</li>
<li>In some applications (such as Internet Explorer), holding the Control key while turning the mouse wheel will change the font size.
</li>
<li>To shut down via Remote Desktop, click the Start button, then type Alt+F4.
</li>
</ol>
<p>
If you knew all these, then you're either the world's biggest liar, or a true Windows <a href="http://www.thinkgeek.com/books/humor/783f/">Ninja</a>. I'll add one of my own that isn't listed here but most people don't know: many standard windows messagebox dialogs (of the OK, CANCEL variety) can be copied to the clipboard by pressing CTRL+C. Try it.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2005-12-02T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/the-tweakui-tips/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ The Case For Case Insensitivity ]]></title>
<link>https://blog.codinghorror.com/the-case-for-case-insensitivity/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
One of the most pernicious problems with C-based languages is that <b>they're case-sensitive</b>. While this decision may have made sense in 1972 <a href="http://cm.bell-labs.com/cm/cs/who/dmr/chist.html">when the language was created</a>, one wonders why <a href="http://cm.bell-labs.com/cm/cs/cbook/">the sins of Kernighan and Ritchie</a> have been blindly perpetuated for the last thirty-three years.
</p>
<p>
I realize this is a religious issue. I'm not attempting to change anyone's mind. I'm merely voicing my discontent with the status quo. Thirty plus years later, does case sensitivity still make sense? Julian at OddThinking makes a compelling argument that it doesn't in <a href="http://www.somethinkodd.com/oddthinking/2005/10/27/the-case-for-case-preserving-case-insensitivity/">The Case for Case-Preserving, Case-Insensitivity</a>:
</p>
<p>
</p>
<blockquote>
Suppose I declare that "KEANU REEVES interferes with elephants.". Can I claim that I was not libelling the wooden Hollywood actor, purely because I spelt his name in all-caps? Can I claim to a judge that KEANU REEVES was a undeclared identifier and therefore the entire statement was semantically meaningless? Of course not. The English language is flexible enough to recognise that "KEANU" and "Keanu" are the same name. Even mail addressed to "KeAnU rEeVeS" will be delivered to the correct person.
<p>
If a computer can also disambiguate this accurately, it should do so too. If the software fails to adapt to the similarity of upper- and lower-case, it leads to frustration.
</p>
<p>
For me, an example of this frustration appears in both Python and PHP. Each of them have the same killer combination: they are case-sensitive with identifiers, but they are scripting language that do not resolve identifiers at parse-time. <b>I consistently fall for the same traps. A distressingly large percentage of my debugging time is spent correcting mistyped identifiers - often not detected until several minutes into a test run. The most common mistyping I make is incorrect capitalisation.</b> Of those, the two most common capitalisation errors I make are: HOlding DOwn THe SHift KEy TOo LOng, and being inconsistent in CamelCasing the term "fileName" (I never did resolve satisfactorily whether it was one word or two!)
</p>
</blockquote>
<p>
However you feel about case sensitivity, the bottom line has to be this: does it cost you productivity? The answer is undeniably yes, <a href="http://www.hanselman.com/blog/CommentView,guid,a393244f-bd14-49d3-b76e-ac94753e00d8.aspx">as Scott Hanselman notes</a>:
</p>
<p>
</p>
<blockquote>
I spend an hour today debugging a possible problem only to notice that "SignOn" != "Signon".
<p>
<b>If I had a nickel for every time Case-Sensitivity or Case-Insensitivity bit me, I'd have like seven or eight bucks. Seriously.</b>
</p>
<p>
Moral: Know if whatever you're working on cares about Case, and if it does, make a Post-It to remind you and stick it to your monitor.
</p>
</blockquote>
<p>
There's nothing we can do about existing tools and languages that are case sensitive, but we can make sure we don't perpetuate past mistakes. Unless you have extremely compelling reasons to make something case-sensitive, <b>case insensitivity is a much more human being friendly design choice.</b> Designing software that's easier for machines is questionable at best.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2005-12-04T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/the-case-for-case-insensitivity/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
<item>
<title><![CDATA[ Why Programmers File the Worst Bug Reports ]]></title>
<link>https://blog.codinghorror.com/why-programmers-file-the-worst-bug-reports/</link>
<content><![CDATA[ 
                <!--kg-card-begin: markdown--><p>
Who files better bugs? Users or developers? In <a href="http://www.chiark.greenend.org.uk/~sgtatham/bugs.html">How to Report Bugs Effectively</a>, Simon Tatham notes that software developers, contrary to what you might think, file some of the worst bug reports:
</p>
<p>
</p>
<blockquote>
It isn't only non-programmers who produce bad bug reports. <b>Some of the worst bug reports I've ever seen come from programmers, and even from good programmers.</b>
<p>
I worked with another programmer once, who kept finding bugs in his own code and trying to fix them. Every so often he'd hit a bug he couldn't solve, and he'd call me over to help. "What's gone wrong?" I'd ask. He would reply by telling me his current opinion of what needed to be fixed.
</p>
<p>
This worked fine when his current opinion was right. It meant he'd already done half the work and we were able to finish the job together. It was efficient and useful.
</p>
<p>
But quite often he was wrong. We would work for some time trying to figure out why some particular part of the program was producing incorrect data, and eventually we would discover that it wasn't, that we'd been investigating a perfectly good piece of code for half an hour, and that the actual problem was somewhere else.
</p>
<p>
I'm sure he wouldn't do that to a doctor. "Doctor, I need a prescription for Hydroyoyodyne." People know not to say that to a doctor: you describe the symptoms, the actual discomforts and aches and pains and rashes and fevers, and you let the doctor do the diagnosis of what the problem is and what to do about it. Otherwise the doctor dismisses you as a hypochondriac or crackpot, and quite rightly so.
</p>
</blockquote>
<p>
Programmers file bad bug reports for the same reason that programmers screw up <a href="http://www.webpagecontent.com/arc_archive/124/5/">usability tests</a>: <b>they mean well, but they're heavily prone to prescription instead of observation.</b> In a usability test, most developers can't bear to see the user fail, and will actually intervene on the user's behalf. "Wait-- don't click there! Click here!"
</p>
<p>
This, of course, completely screws up the usability test.
</p>
<p>
Developers' heads are full of cool technical arcana, and that's precisely why they need to resist the urge to screw up their bug reports with inappropriate prescriptions. Cultivate your observation skills! Slapping together a hastily concocted call to action is easy; patiently observing and collecting evidence to make a compelling case is much more difficult.
</p>
<p>
</p>
<p></p>
<!--kg-card-end: markdown-->
             ]]></content>
<pubDate>2005-12-05T12:00:00.000Z</pubDate>
<guid>https://blog.codinghorror.com/why-programmers-file-the-worst-bug-reports/</guid>
<author><![CDATA[ Jeff Atwood ]]></author>
</item>
</channel>
</rss>
