<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
<channel>
<title>Matrix67: The Aha Moments</title>
<description></description>
<link>http://www.matrix67.com/blog</link>
<pubDate>2021-11-20T14:45:25+08:00</pubDate>
<!-- other elements omitted from this example -->
<item>
<title><![CDATA[ 用选择公理来预测未来 ]]></title>
<link>http://www.matrix67.com/blog/archives/3210</link>
<content><![CDATA[ 
		<p>    承认选择公理可能给我们带来很多有悖于直觉的结论。最著名的例子可谓 Banach-Tarski 悖论了：你可以把一个三维的实心球分成有限多块，通过刚体移动把它变成两个和原来一模一样的球。本 Blog 还介绍过另外一个<a href="http://www.matrix67.com/blog/archives/444">有趣的结论</a>，它违背常理的程度也不亚于 Banach-Tarski 悖论。今天，我给大家看一个比这些悖论更加荒唐的结论：利用选择公理，我们可以实现预测未来！</p>
<p>    在探讨这个话题之前，我们得先为“预测未来”建立一个合理的数学模型。我们假设，对于任一时刻，宇宙中的所有信息都可以编码为某个状态值，我们就把它叫做宇宙的一个“点状态”。宇宙中所有可能的点状态就组成了宇宙的“状态集合”。以数学的眼光看宇宙，一个宇宙也就无非是一个一元函数 f(t) 。它的定义域是整个时间轴 R ，它的值域是宇宙的状态集合，预测未来也就仅仅是根据已知的函数值来推测未知的函数值罢了。假设我们已经知道在区间 (-∞, t0) 上函数的所有取值，如果你能据此给出 f(t0) 的精确值，我们就说你成功地预测了 t0 时刻的宇宙状态。当然，仅凭借过去的信息你是不可能保证猜对 t0 时刻的点状态的，例如对于两个只在 t0 处有区别的宇宙，算法最多只能猜对其中一个宇宙在 t0 处的状态。但你相信吗，存在一个算法，使得我能正确预测几乎所有时间点的宇宙状态。换句话说，我能构造出这样一个算法，使得除了可数个点以外，给定任意一点以前的全部函数值，我都能套用该算法猜对该点的点状态。再换句话说，利用这个算法预测任意时刻的宇宙状态，成功的概率为 1 。</p>
<p><span id="more-3210"></span><br>
    这个算法非常简单。注意到一个给定的函数 f(t) 就定义了一个宇宙，因此所有可能的函数 f(t) 就包含了所有可能的平行宇宙。这是一个大得难以置信的集合，即使两个宇宙间只有某一个时刻的点状态有细微的区别，我们都把它们视为两个不同的平行宇宙。由于选择公理与良序定理等价，因此，我可以给所有可能的平行宇宙排出一个次序来。如果平行宇宙 A 排在平行宇宙 B 的前面，我们就说 A 比 B 更靠前一些， B 则比 A 靠后一些。<br>
    从这个角度来说，预测未来实质上就是，当你观察到 t0 以前的所有函数值之后，你需要从所有平行宇宙中筛选出 t0 以前的函数值跟已知数据一模一样的那些宇宙，再从这些候选宇宙中选出一个，断定这个宇宙就是我们现在所处的宇宙，并宣称 t0 时刻的点状态就是这个宇宙在 t0 时的点状态。而我们预测未来的算法就只有简单的一句话：总是从候选宇宙中选择次序最靠前的那一个宇宙。</p>
<p> <br>
    下面我们证明，用这个算法预测点状态，只会在可数个时间点上失败。为此，我们只需要说明那些预测会失败的时刻所组成的集合是一个通常序下的良序集。反证，假设这些失策时刻所组成的集合可以形成一个没有最小元素的链 t1 &gt; t2 &gt; t3 &gt; … 。不妨把算法在预测 t1 时所选择的宇宙记作 A ，把算法在预测 t2 时选择的宇宙记为 B 。由于算法对 t2 的预测是错误的，即宇宙 B 在 t2 时刻的点状态与实际宇宙在 t2 时的点状态不符；因此，所有在 (-∞, t2] 的函数值与实际宇宙相符的宇宙都比 B 更靠后。而算法对 t1 的预测是基于正确的 t2 点状态的，也就是说 A 在 (-∞, t2] 是符合实际宇宙的，因此 A 比 B 更靠后些。同理， t2 的预测又比 t3 的预测靠后， t3 的预测又比 t4 的预测靠后，因此我们能够找出一系列平行宇宙，它在平行宇宙的顺序中一个比一个更靠前，形成一个无穷长的链。这与平行宇宙次序是良序的矛盾。这就证明了，预测会失效的那些时间点组成的是一个通常序下的良序集。而通常序下的良序集显然是可数的，因此预测失败的概率为 0 。</p>
<p>    这个结论确实是有悖于常理的——我们怎么可能仅根据以前的函数值就能保证推出目标点的函数值呢？但是，从另一个角度理解算法的本质，这一反直觉的事实便有了一个合理的解释。如果我们用复杂程度来解释平行宇宙构成的良序集，即宇宙 A 排在宇宙 B 前面就说明宇宙 A 比宇宙 B 更“简单”，更有规律。那么，根据 Occam 剃刀原理，在所有 (-∞, t0) 与观察到的数据相符的宇宙中，最简单的那个最有可能是真实的情况，它在 t0 时刻的点状态就是我们所作出的预测。</p>
<p>查看更多：<a href="http://persweb.wabash.edu/facstaff/hardinc/pub/peculiar.pdf">http://persweb.wabash.edu/facstaff/hardinc/pub/peculiar.pdf</a></p>
			 ]]></content>
<pubDate>2010-05-13T17:28:43+00:00</pubDate>
<guid>http://www.matrix67.com/blog/archives/3210</guid>
<author><![CDATA[ 顾森 ]]></author>
</item>
<item>
<title><![CDATA[ “爱的方程式3D版”出Tee了！ ]]></title>
<link>http://www.matrix67.com/blog/archives/3222</link>
<content><![CDATA[ 
		<p>  <img alt="image placeholder" >
<p>    三年前，我在 Blog 上发了<a href="http://www.matrix67.com/blog/archives/223">一篇日志</a>，给大家介绍了一个能绘出立体心形的方程，并用 Mathematica 把它画了出来。今年夏天将至， <a href="http://www.gkpower.net/?p=428">Geek Power</a> 又推出了一系列有创意的衣服，那个著名的“心之函数”也终于走出了电子世界，来到大家的生活之中。在制作这款衣服的印花时，我也算是出了一点力吧，因此 Geek Power 的店主特地送了我一件，看上去效果很不错。</p>
<p><span id="more-3222"></span><br>
  <img alt="image placeholder" >
<p>  <img alt="image placeholder" >
<p>    感兴趣的数学 Geek 们可以点击<a href="http://item.taobao.com/item_detail.jhtml?item_id=488683c84a8318e23415d03f880d8418">这里</a>查看详情。</p>
			 ]]></content>
<pubDate>2010-05-14T16:17:30+00:00</pubDate>
<guid>http://www.matrix67.com/blog/archives/3222</guid>
<author><![CDATA[ 顾森 ]]></author>
</item>
<item>
<title><![CDATA[ Futurama 5×10 – The Farnsworth Parabox ]]></title>
<link>http://www.matrix67.com/blog/archives/3230</link>
<content><![CDATA[ 
		<p><object width="420" height="363"><param name="movie" value="http://www.tudou.com/v/YP7twFzOA3A/v.swf">
<param name="allowFullScreen" value="true">
<param name="allowscriptaccess" value="always">
<param name="wmode" value="opaque">
<embed src="http://www.tudou.com/v/YP7twFzOA3A/v.swf" type="application/x-shockwave-flash" allowscriptaccess="always" allowfullscreen="true" wmode="opaque" width="420" height="363"></embed></object></p>
<p>视频链接：<a href="http://www.tudou.com/programs/view/YP7twFzOA3A/">http://www.tudou.com/programs/view/YP7twFzOA3A/</a></p>
<p><span id="more-3230"></span></p>
<p> <br>
（注：以下文字有剧透！）<br>
TBBT 并不是拍给 Geek 看的。 TBBT 里几乎没有什么只有 Geek 才能体会到的笑话，笑点都在 Geek 的言行上。因此，我一直不咋喜欢 TBBT 。像 Futurama 一类的科幻剧才能算作真正的 Geek 剧。不过，我看过的 Futurama 并不多，也不过是前两年的那几个剧场版而已。之所以又开始把以前的 Futurama 翻出来看，是因为昨天看到<a href="http://www.reddit.com/r/math/comments/c4xji/the_final_page_of_the_script_of_a_new_futurama/">这里</a>讨论 Futurama 幕后的数学。在某次访谈中，一位剧作者说，他们曾为 The Farnsworth Parabox 一集的结局构造了一个巧妙的数学解。剧作者们建立了数学模型，设计了一套在平行宇宙间运送盒子的方案，使得所有人都回到了自己的宇宙，并且所有的盒子都位于别人无法销毁的地方。剧作者们证明了算法的正确性，并分析了算法的复杂度（它是一个线性的算法）。只是很可惜，这个算法最后并没有用到剧中（剧中用了一个没那么严肃的解法）。总之，这一集 Futurama 绝对是令人称奇的 20 分钟。我把这一集下载下来，加上英文字幕后传到了国内服务器上，和大家一起分享。<br>
 </p>
			 ]]></content>
<pubDate>2010-05-18T16:01:49+00:00</pubDate>
<guid>http://www.matrix67.com/blog/archives/3230</guid>
<author><![CDATA[ 顾森 ]]></author>
</item>
<item>
<title><![CDATA[ e的近似表达：一个令人惊讶的数字游戏 ]]></title>
<link>http://www.matrix67.com/blog/archives/3265</link>
<content><![CDATA[ 
		<p>          <img alt="image placeholder" >
<p> <br>
    刚才看到这个很漂亮的无理数 e 的近似表达，它恰好用到了 1 到 9 这 9 个数字。<br>
    猜猜看它能精确到 e 的小数点后多少位？ 10 位？ 100 位？ 1000 位？ 10000 位？</p>
<p><span id="more-3265"></span><br>
    远比想象中的牛 B —— 它能精确到小数点后 18, 457, 734, 525, 360, 901, 453, 873, 570 位！显然，这绝对不是一个巧合。它的秘密就在于， e 事实上等于 lim(n→∞) (1 + 1/n)^n ，而 9^(4^(7·6)) 恰好就等于 3^(2^85) 。这个指数相当大， Mathematica 直接就报 Overflow 了，难怪它能精确到 e 的小数点后那么多位。</p>
<p>    据说，这个神一般的近似表达最早来源于<a href="http://www2.stetson.edu/~efriedma/mathmagic/0804.html">这里</a>。</p>
			 ]]></content>
<pubDate>2010-05-19T22:28:31+00:00</pubDate>
<guid>http://www.matrix67.com/blog/archives/3265</guid>
<author><![CDATA[ 顾森 ]]></author>
</item>
<item>
<title><![CDATA[ Which Way Did the Bicycle Go 趣题选（下） ]]></title>
<link>http://www.matrix67.com/blog/archives/3243</link>
<content><![CDATA[ 
		<p> </p>
<blockquote><p>23. 一些硬币互不重叠地放在桌上。四色定理告诉我们，若要对硬币进行染色，使得挨在一起的硬币颜色不同的话，最多只需要四种颜色就可以了。存在至少需要四种颜色的构造吗？</p></blockquote>
<p> </p>
<blockquote>
<p>答案：存在。如图，若只允许三种颜色的话， A 的颜色必须与所有阴影硬币颜色相同， B 的颜色也必须与所有阴影硬币颜色相同， A 、 B 将会同色。</p>
<p>  <img alt="image placeholder" >
</blockquote>
<p><span id="more-3243"></span><br>
 <br>
 </p>
<blockquote><p>24. 将火柴棍视为边，其端点视为顶点，可以把用火柴棍拼成的图形看作一个平面图。试着用火柴棍拼一个所有顶点的度均为 3 的平面图。</p></blockquote>
<p> </p>
<blockquote>
<p>
答案：如图。</p>
<p>  <img alt="image placeholder" >
</blockquote>
<p> <br>
 </p>
<blockquote><p>25. 圆周上有 2n 个等分点，每两点之间连一条边，构成一个完全图 K_2n 。是否存在一个 Hamilton 回路，使得图中经过的边互不平行？</p></blockquote>
<p> </p>
<blockquote><p>答案：不存在这样的回路。把 2n 个顶点从 1 到 2n 顺次编号，并定义一条边的方向值为两端点的编号之和。显然，两条边平行当且仅当它们的方向值模 2n 同余。假设有一条 Hamilton 回路使得途中任意两边都不平行，则这些边的方向值只可能恰好为 1, 2, …, 2n (mod 2n)，它们的和为 1 + 2 + … + 2n = 2n^2 + n ≡ n (mod 2n) 。另外，由于这是一条 Hamilton 回路，因此整条路所经过的边的方向值之和为 2 * (1 + 2 + … + 2n) = 4n^2 + 2n ≡ 0 (mod 2n) ，矛盾。</p></blockquote>
<p> <br>
 </p>
<blockquote><p>26. 证明：对任意正整数 n ，从 1 到 10^n 中的总数字个数等于从 1 到 10^(n+1) 中数字 0 出现的次数。</p></blockquote>
<p> </p>
<blockquote>
<p>答案：对于 1 到 10^n 中每个数，列出所有在中间插入一个 0 后可以得到的数，构成一个新的数列：</p>
<p>    1<span style="color:red">0</span>, 2<span style="color:red">0</span>, 3<span style="color:red">0</span>, 4<span style="color:red">0</span>, 5<span style="color:red">0</span>, 6<span style="color:red">0</span>, 7<span style="color:red">0</span>, 8<span style="color:red">0</span>, 9<span style="color:red">0</span>, 1<span style="color:red">0</span>0, 10<span style="color:red">0</span>, 1<span style="color:red">0</span>1, 11<span style="color:red">0</span>, 1<span style="color:red">0</span>2, 12<span style="color:red">0</span>, …</p>
<p>由于对于一个 k 位数来说，在中间插入一个 0 有 k 种方法，因此数列的总项数就等于 1 到 10^n 中的总数字个数。下面我们只需说明，数列的总项数也等于 1 到 10^(n+1) 中数字 0 出现的次数。这是因为数列中的所有数显然都不超过 10^(n+1) ，并且显然一个数有几个 0 ，它就在该数列中出现了几次。</p>
</blockquote>
<p> <br>
 </p>
<blockquote><p>27. 经过一个公共点的 n 个平面（但任意三个平面不过同一直线）把空间分为了多少块？</p></blockquote>
<p> </p>
<blockquote><p>答案：以这个公共点为球心做一个球面，我们要求的即是球面被切分出来的区域数。在这个球面上利用 Euler 公式 V – E + F = 2 ，我们能很快求出 F 的值。由于每对大圆有两个交点，因此 V = 2 * C(n, 2) ；由于每个顶点的度都为 4 ，因此 E = 4V/2 = 2V。于是 F = E – V + 2 = 2V – V + 2 = V + 2 = n^2 – n + 2。<br>
利用 Euler 公式还可以瞬间秒杀下面这个经典问题： n 个圆最多可以把平面分成多少块？由于每两个圆之间都有两个交点，因此顶点数 V = n(n – 1) ；由于每个圆被切成了 2(n – 1) 条弧，因此 E = 2n(n – 1) 。于是， F = E – V + 2 = 2n(n – 1) – n(n – 1) + 2 = n^2 – n + 2 。<br>
注意到，上述两个问题答案是一样的。其实，这并不是巧合。把前一个问题中的球面从北极点投影到与南极点相切的平面上，你就会发现这两个问题其实是一回事。</p></blockquote>
<p> <br>
 </p>
<blockquote>
<p>28. 证明：当 m 、 n 互质时， m×n 的棋盘的对角线恰好穿过 m + n – 1 个格子。</p>
<p>  <img alt="image placeholder" >
</blockquote>
<p> </p>
<blockquote><p>答案：由于 m 、 n 互质，显然对角线不会穿过交叉点。而从左下角到右上角必须要经过 m – 1 条竖直线和 n – 1 条水平线，因此对角线与棋盘必然有 m + n – 2 个交点，即它穿过了 m + n – 1 个格子。该结论可扩展为：对任意正整数 m 、 n ， m×n 的棋盘的对角线恰好穿过 m + n – gcd(m, n) 个格子。</p></blockquote>
<p> <br>
 </p>
<blockquote><p>29. 在空间中放置 8 个点，使得对于任意三个点，它们之间的三条线段中至少有两条一样长。换句话说，这 8 个点确定的所有三角形（包括退化成线的三角形）都是等腰三角形。</p></blockquote>
<p> </p>
<blockquote>
<p>答案：在 x-y 平面作一个单位圆，标出它的五等分点。另外三个点放在 (0, 0, 0) 、 (0, 0, -1) 和 (0, 0, 1) 处。</p>
<p>  <img alt="image placeholder" >
</p>
</blockquote>
<p> <br>
 </p>
<blockquote>
<p>30. 证明：每组对边都相等的四面体中，每个面都是锐角三角形。</p>
<p>  <img alt="image placeholder" >
</blockquote>
<p> </p>
<blockquote>
<p>答案：把三角形 △PQR 和 △PSR 想象成是由转轴 PR 连接的两个三角形木板， QS 是一条橡皮筋。旋转 △PSR 使得 △PSR 和 △PQR 位于同一平面，橡皮筋 QS 将被拉长到 d 。此时，整个图形变成了一个平行四边形。由于对角线 d &gt; c ，因此 ∠PQR &lt; 90° 。同理可知，四面体中的每个角都小于 90° 。</p>
<p>  <img alt="image placeholder" >
</blockquote>
<p> <br>
 </p>
<blockquote><p>31. 对于空间中的点集 E ，把所有点对确定的直线所构成的点集记作 L(E) 。如果 V 是一个正四面体的四个顶点，那么 L(V) 就是该四面体的六条边所在的直线所组成的点集。请问： L(L(V)) 是否包含了空间中所有点？</p></blockquote>
<p> </p>
<blockquote>
<p>答案：不是。如图，设想一个由正方体六个面的对角线构成的正四面体。下面我们说明， P 点不在 L(L(V)) 中。首先，在四面体中相邻的边上取点，确定出来的直线始终在四面体的面上，不会过 P 点；在对边上取点构成的连线也不会过 P ，比方说同时过红色线段和蓝色线段的直线一定不会过 P ，因为过 P 且与红色线段相交的线都在正方体的顶面上。</p>
<p>  <img alt="image placeholder" >
<p>可以证明，不在 L(L(V)) 中的点只有正方体中不在四面体上的那四个顶点。</p>
</blockquote>
<p> <br>
 </p>
<blockquote><p>32. 一幢大楼的底层有 1001 根电线，这些电线一直延伸到大楼楼顶。你需要确定底层的 1001 个线头和楼顶的 1001 个线头的对应关系。你有一个电池，一个灯泡，和许多很短的电线。如何只上下楼一次就确定电线线头的对应关系？</p></blockquote>
<p> </p>
<blockquote><p>答案：对于奇数根电线的情况，都可以采用下面这种做法。在楼下把线头两个两个相接，余下单独一个线头什么都不接。把这个单出来的线头标号为 #1 。到楼顶找出和谁接都不构成回路的导线，它就是 #1 。在剩下的导线中测出能构成回路的导线对，并标号为 (#2, #3) ， (#4, #5) ，…… 。接下来，把 #1 和 #2 相接， #3 和 #4 相接，依此类推，让 #1001 单着。到楼下拆掉原有的连接，然后从 #1 开始顺藤摸瓜确定所有对应关系：和 #1 能构成回路的导线就是 #2 ，原来和 #2 配对的就是 #3 ，和 #3 能构成回路的就是 #4 ，依此类推。</p></blockquote>
<p> <br>
 </p>
<blockquote><p>33. 桌子上有 15 张大小形状任意的纸，它们完全覆盖了整个桌面。这些纸可能有重叠，也可能伸出桌面。证明：总能从中拿走其中 5 张纸，使得剩下的纸仍然覆盖了至少 2/3 的桌面。</p></blockquote>
<p> </p>
<blockquote><p>答案：假设纸在放到桌面上之前，桌面上刷满了红色颜料。把纸覆盖上去后，某一些纸（的全部或某些部分）染上了颜色。由于整个桌面被完全覆盖，因此所有纸上的所有红色区域面积总和恰好等于桌面面积。如果我们拿掉颜料最少的五张纸，则拿走的颜料面积显然不会超过 1/3 ，也就是说纸上的红色面积之和还有至少 2/3 ，即还有至少 2/3 的桌面是被覆盖了的。</p></blockquote>
<p> <br>
 </p>
<blockquote><p>34. 即使钟的时针和分针一样长，大多数时候也能读出正确的时间来。例如，两针一个指向 12 一个指向 6 ，那么前者只能是分针，后者只能是时针。但有时候，时针和分针的位置互换后，所指的时间仍然有意义，我们就说这时的指针位置有歧义。从 0:00 到 12:00 这 12 个小时中，指针位置会产生歧义的时刻有多少个？</p></blockquote>
<p> </p>
<blockquote><p>答案： 132 个。假设有 A 、 B 两个钟叠放在一起， A 以正常的速度运转， B 以 12 倍的速度运转。因此， B 的时针将永远与 A 的分针重合。每当 B 的分针与 A 的时针重合时， A 此时所指的时刻就是有歧义的。而 B 的分针比 A 的时针快 144 倍，因此 A 的时针转了一圈后， B 的分针转了 144 圈，因此 B 的分针与 A 的时针重合了 143 次。但是，这其中有 11 次是同一个钟的时针和分针本身就重合的，不会导致歧义，因此真正会导致歧义的有 143 – 11 = 132 个时刻。</p></blockquote>
<p> <br>
 </p>
<blockquote><p>35. Alice 和 Bob 玩猜数游戏。 Alice 背着 Bob 写下 n 个正整数 x1, x2, …, xn 。然后 Bob 选择 n 个正整数 a1, a2, …, an 告诉 Alice ， Alice 说出 a1·x1 + a2·x2 + … + an·xn 的值。接下来， Bob 又选择另外 n 个正整数 b1, b2, …, bn ，并获知 Σbi·xi 的值。如此下去，直到 Bob 能够推出 Alice 写下的 n 个数。 Bob 需要多少次询问就可以保证猜出所有 n 个数？</p></blockquote>
<p> </p>
<blockquote>
<p>答案：两次。先选择 a1 = a2 = … = an = 1 ，从而获知 n 个数之和 S 。注意到，由于 Alice 写下的数都是正整数，因此对所有 i 都有 xi ≤ S 。然后，选择 b1 = 1, b2 = S+1, b3 = (S+1)^2, …, bn = (S+1)^(n-1)，然后 Alice 将告诉他一个数</p>
<p>    N = x1 + x2·(S+1) + x3·(S+1)^2 + … + xn·(S+1)^(n-1)</p>
<p>接下来， Bob 只需要把 N 写成 S+1 进制，每个数位上的数就依次是 Alice 的那 n 个数了。</p>
<p>下面我们证明，两次询问已经是最优的了，只问一次是猜不出来的。假设 Bob 第一次询问得到的结果是 a1 + a2 + … + an + a1·a2 ，则他没法知道 Alice 的 n 个数是 a2+1, 1, 1, …, 1 ，还是 1, a1+1, 1, 1, …, 1 。</p>
</blockquote>
<p> <br>
 </p>
<blockquote><p>36. 桌上有两个盒子，一个盒子里有 51 枚硬币，一个盒子里有 101 枚硬币。 Alice 和 Bob 轮流把其中一个盒子的硬币倒掉，再把另一个盒子里的硬币分装在两个盒子中。最后谁不能继续操作了，谁就输了。如果 Alice 先走，谁有必胜策略？</p></blockquote>
<p> </p>
<blockquote><p>答案： Bob 必胜。 Alice 走后，两个盒子里的硬币数必然是一奇一偶。 Bob 倒掉有奇数枚硬币的盒子，把剩下的硬币分成 1 加另一个奇数。这样 Bob 面前总有一个盒子里有偶数枚硬币，因此他始终有走的。</p></blockquote>
<p> <br>
 </p>
<blockquote><p>37. 如果一个平面向量满足 y ≥ 0 ，我们就说这个向量是朝上的。两个朝上的单位向量，其向量和可能很小很小。证明：奇数个朝上的单位向量，向量和的长度不可能小于 1 。</p></blockquote>
<p> </p>
<blockquote><p>答案：假设 n 个向量分别为 V1, V2, …, Vn 。注意到， V1 + V2 + … + Vn = V1 + (V2 + … + Vn) ，而两个向量的夹角变大将使得和向量变小，因此把 V1 变成 (1, 0) 或 (-1, 0) 中的某一个，那么这 n 个向量的和将会变得更小。反复利用该引理可知，这 n 个向量都是水平向量时，向量和最小。而奇数个单位水平向量的最小值为 1 。</p></blockquote>
<p> <br>
 </p>
<blockquote><p>38. 假设 n 次多项式 p(x) 满足，对于所有 x ，都有 p(x) ≥ 0 。证明，对于所有 x ，都有 p(x) + p'(x) + p”(x) + … + p^(n)(x) ≥ 0 </p></blockquote>
<p> </p>
<blockquote><p>答案：由于对于所有 x 都有 p(x) ≥ 0 ，因此 p(x) 的次数 n 一定是偶数，且最高次项系数大于 0 。令 q(x) = p(x) + p'(x) + p”(x) + … + p^(n)(x) ，显然 q(x) 的次数和最高次项系数跟 p(x) 一样，因此 q(x) 存在一个最小值，比方说 q(x0) 。我们只需要说明 q(x0) ≥ 0 即可。<br>
由于 q(x0) 是最小值，因此 q'(x0) = 0 。而 q'(x) = p'(x) + p”(x) + … + p^(n)(x) = q(x) – p(x) ，因此 q(x0) – p(x0) = 0 ，即 q(x0) = p(x0) ≥ 0 。</p></blockquote>
<p> <br>
 </p>
<blockquote>
<p>39. 是否有可能在平面上画不可数个不相交的 8 ？</p>
<p>  <img alt="image placeholder" >
</blockquote>
<p> </p>
<blockquote><p>答案：不可能。对于任意一个 8 字形，在两个洞里各取一个有理点 P 、 Q （由于平面上的有理点是稠密的，这是总能办到的），则称这个 8 字形圈住了有理点对 (P, Q) 。注意到由于 8 字形不能相交，因此两个 8 字形不可能圈住同一对有理点。由于平面上的有理点对是可数的，因此 8 字形的数量也是可数的。</p></blockquote>
			 ]]></content>
<pubDate>2010-05-19T22:30:35+00:00</pubDate>
<guid>http://www.matrix67.com/blog/archives/3243</guid>
<author><![CDATA[ 顾森 ]]></author>
</item>
<item>
<title><![CDATA[ 史上最牛的Crossword ]]></title>
<link>http://www.matrix67.com/blog/archives/3281</link>
<content><![CDATA[ 
		<p>    这是一个由 Lee Sallows 创造的谜题。下面这个 Crossword 中有 6 个横向短语和 6 个纵向短语。每个短语都是形如“多少多少个某某字母”的形式，比方说 “THIRTEEN NS” 、 “EIGHT ES” 等等，它表示整个 Crossword 中恰好就有 13 个字母 N ， 8 个字母 E 。由于整个 Crossword 中有 12 个短语，这就意味着 Crossword 的解里只含 12 个不同的字母。牛 B 就牛 B 在，这个 Crossword 有唯一解。你能找到这个解吗？</p>
<p>  <img alt="image placeholder" >
<p><span id="more-3281"></span></p>
<p> <br>
    突破口就在中间一列只有 5 个字母的纵向短语，它只可能是 “ONE ?” 。而最底下那个含有 6 个字母的横向短语则只可能是 “TWO ?S” 、 “SIX ?S” 和 “TEN ?S” 。但填 “TWO” 和 “TEN” 都是不可能的，否则字母 O 和 N 就不止一个了。因此，这6个字母只可能是 “SIX ?S” 。那个最长的纵列只能是 “THIRTEEN SS” 、 “FOURTEEN SS” 、 “EIGHTEEN SS” ，但 “FOURTEEN” 是不可能的，因为不存在以 F 打头长度为 5 的数词。 “EIGHTEEN SS” 也是不可能的，因为即使算上可能出现的 “SEVEN” ， 12 个短语也还不足以产生 18 个 S 。因此，这个最长的纵列只能是 “THIRTEEN SS” 。以 T 打头长度为 5 的数词只有 “THREE” ，而以 “R” 结尾长度为 4 的数词只有 “FOUR” 。现在，我们已经确定了 12 个 S 的位置，还差一个 S ，而填 “SIX” 、 “SIXTEEN” 、 “SEVENTEEN” 的地方都没了，因此两个阴影单词中必有一个是 “SEVEN” 。</p>
<p>  <img alt="image placeholder" >
<p> <br>
    中间那个还没填的纵列只能是 “FOUR ?S” 、 “FIVE ?S” 、 “NINE ?S” ，但 “NINE” 是不可能的，否则就不止 3 个字母 “N” 了。因此 “SEVEN” 不在横向的阴影位置，否则 E 的个数将不止 4 个或 5 个。那么 “SEVEN” 只能在纵向阴影位置。此时，我们已经确定了 Crossword 中的 12 个字母分别是 EFHINORSTUVX ，没有字母 G ，因此横向阴影不会是 “EIGHT” ，只能是 “THREE” 。对比已有字母的个数和未填的短语，剩下的空格很快就能完成。以下就是这个 Crossword 的唯一解：</p>
<p>  <img alt="image placeholder" >
			 ]]></content>
<pubDate>2010-05-21T00:43:03+00:00</pubDate>
<guid>http://www.matrix67.com/blog/archives/3281</guid>
<author><![CDATA[ 顾森 ]]></author>
</item>
<item>
<title><![CDATA[ 习一文一乐，便入安宁万世…… ]]></title>
<link>http://www.matrix67.com/blog/archives/3289</link>
<content><![CDATA[ 
		<p>    我曾经在<a href="http://www.matrix67.com/blog/archives/290">这里</a>介绍过一个叫做 mnemonic 的文字游戏：</p>
<blockquote><p>  数学家 George Pólya 曾说过一句经典的话： How I need a drink, alcoholic of course, after the heavy chapters involving quantum mechanics! 依次数出每个单词的字母个数，你会惊讶的发现它正好是圆周率的前 15 位。后来又有人在后面加上一句 All of thy geometry, Herr Planck, is fairly hard ，让圆周率长度增加到 24 位。</p></blockquote>
<p>    事实上，人们还创造了很多类似的句子，比如</p>
<p>      Can I have a large container of orange juice?<br>
      How I wish I could calculate pi faster.<br>
      For a girl I loved contrived; by nature tough, her heart survived.</p>
<p>    这种各个单词的字母个数恰好与圆周率的各位数字相同的句子就叫做 <a href="http://en.wikipedia.org/wiki/Piphilology">piphilology</a> ，它是由单词 pi 和philology 合成的一个词。</p>
<p> <br>
    最近和朋友聊天时，又一次谈到了相关的内容。作为一个酷爱文字游戏的中文系学生，我当时就不爽了——中国语言文字博大精深，为什么就没有中文 piphilology 呢？要知道，英文单词有字母数，中文汉字也有笔画数呀！于是，我决心自己创作一个中文 piphilology ，使得一句话里每个字的笔画数恰好等于圆周率的小数展开。</p>
<p><span id="more-3289"></span></p>
<p> <br>
   <img alt="image placeholder" >
<p> <br>
    利用网上下载的词库、 Mathematica 、以及我自己做的 <a href="http://www.matrix67.com/ideagen/">IdeaGenerator</a> ，我开始动手进行 piphilology 的创作。作为一种典型的孤立语，汉语字词的多义性和语法的灵活性为中文 piphilology 的创作提供了有利的条件。我找出了一些可以用得上的句式，整个句子的轮廓开始有了眉目。摆在我面前的路有两条：是构造一个读来通顺但意义不大的“口水话”，还是一个句式牵强但充满理趣的“诗句”呢？考虑到圆周率中的 141 和 979 为对偶提供了可能，我选择了后者。为此，我甚至放弃了诸如“下一月一号是……”的漂亮句式（感兴趣的读者不妨接着这句话造下去）。最后，我总算得到了一个比较令人满意的句子。<br>
    掌声请出史上第一个中文 piphilology ：</p>
<p>        <strong>习一文一乐，便入安宁万世；</strong><br>
        <strong>知思远思小，人才话中有力。</strong><br>
 </p>
			 ]]></content>
<pubDate>2010-05-24T22:31:18+00:00</pubDate>
<guid>http://www.matrix67.com/blog/archives/3289</guid>
<author><![CDATA[ 顾森 ]]></author>
</item>
<item>
<title><![CDATA[ Manufactoria：非常好玩的自动机编程游戏 ]]></title>
<link>http://www.matrix67.com/blog/archives/3306</link>
<content><![CDATA[ 
		<p>  我把今天一下午加上一晚上的时间都花在了这个 Flash 小游戏上。这是我所见过的程序设计类 Puzzle 游戏中最好玩的一个。它是真正意义上的程序设计游戏，游戏不但提供了完备的读写和流程控制功能，甚至还引入了随机测试数据。游戏很快就会引入算法的思想，因为玩家渐渐会发现，这些谜题并不是单靠模拟就能解决的；后面的谜题则越发困难，需要相当有技巧性的算法设计，对脑力绝对是一个大挑战。如果你热爱算法与程序设计，你一定会爱上这个游戏的。</p>
<p><object classid="clsid:d27cdb6e-ae6d-11cf-96b8-444553540000" codebase="http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=9,0,0,0" width="640" height="480" id="flashobj" align="middle"><param name="allowScriptAccess" value="sameDomain">
<param name="allowFullScreen" value="false">
<param name="movie" value="http://www.matrix67.com/data/manufactoria.swf">
<param name="quality" value="high">
<embed src="http://www.matrix67.com/data/manufactoria.swf" quality="high" width="640" height="480" name="flashcontent" align="middle" allowscriptaccess="sameDomain" allowfullscreen="false" type="application/x-shockwave-flash" pluginspage="http://www.macromedia.com/go/getflashplayer"></embed></object></p>
<p> <br>
游戏来源：<a href="http://jayisgames.com/games/manufactoria/">http://jayisgames.com/games/manufactoria/</a></p>
			 ]]></content>
<pubDate>2010-05-24T23:12:37+00:00</pubDate>
<guid>http://www.matrix67.com/blog/archives/3306</guid>
<author><![CDATA[ 顾森 ]]></author>
</item>
<item>
<title><![CDATA[ 一探汉语中的文字幻方 ]]></title>
<link>http://www.matrix67.com/blog/archives/3314</link>
<content><![CDATA[ 
		<p>    大家都知道，幻方是这样一种数字游戏，将 1 到 n^2 这 n^2 个数填入 n×n 的方阵中之后，每行、每列及两条对角线上的数字之和都相同。作为一个古老的数学游戏，幻方的生命力极强，直到现在数学家们还在寻找满足各种奇怪性质的幻方。更有意思的是，这神奇的数字方阵后来竟也发展成了文字游戏。人们发现，在 4×4 的方阵中填入以下字母，每行每列都是一个单词：</p>
<blockquote><p>C A R D<br>
A R E A<br>
R E A R<br>
D A R T</p></blockquote>
<p>    这样的字母方阵就被称为“文字幻方” (<a href="http://en.wikipedia.org/wiki/Word_square">word square</a>) 。</p>
<p>    最近本人对文字游戏尤其感兴趣，心头开始思考起这么一个问题：是否有可能在方阵中填入汉字，让每行每列都是一个词语呢？看着电脑桌面上放着上次寻找 <a href="http://www.matrix67.com/blog/archives/3289">中文 piphilology</a> 的词库，我就又手痒了，于是花了一下午的时间，利用 Mathematica 对汉字幻方作了一些搜索。下面和大家分享一下我得到的结果。</p>
<p><span id="more-3314"></span><br>
    由于汉语的四字词很多，因此我的主要精力放在了寻找 4 阶汉字幻方上。估计大家不会想到，构造一个汉字幻方比构造英文幻方容易得多——这得归功于汉语中独有的叠词。只需要找到一对形如 AABB 和 BBCC 的词，我们就立即得到了一个 4 阶幻方。例如：</p>
<blockquote><p>匆匆忙忙<br>
匆匆忙忙<br>
忙忙碌碌<br>
忙忙碌碌</p></blockquote>
<p>    这种简单的幻方是其它语言中都不大可能实现的。可以想象，这样的 4 阶幻方还有不少。根据我的词库，计算机找到了 13 组形如 (AABB, BBCC) 的词，它们是：</p>
<blockquote><p>匆匆忙忙，忙忙碌碌<br>
急急忙忙，忙忙碌碌<br>
平平安安，安安静静<br>
平平安安，安安稳稳<br>
老老实实，实实在在<br>
切切实实，实实在在<br>
确确实实，实实在在<br>
踏踏实实，实实在在<br>
严严实实，实实在在<br>
扎扎实实，实实在在<br>
冷冷清清，清清白白<br>
痛痛快快，快快乐乐<br>
战战兢兢，兢兢业业</p></blockquote>
<p>    可见， 4 阶汉字幻方至少有 13 个。</p>
<p>    不过，大多数读者会认为这样的幻方太“平凡”了吧。有没有什么其它的 4 阶汉字幻方呢？有。在寻找其它形状的汉字幻方时，计算机给出了下面这组解：</p>
<blockquote><p>可有可无<br>
有职有权<br>
可有可无<br>
无权无势</p></blockquote>
<p>    这使得幻方中实际包含的词语原来的 2 个增加到了 3 个。不过，这样的结果似乎仍然不太完美，我希望得到的是 4 个词语都不相同的汉字幻方。这种完美的 4 阶幻方究竟存在吗？一方面，由于包含某个特定汉字的词数量很有限，因此构造完美的汉字幻方显然比构造英文幻方困难得多；而另一方面，汉语造词时语素和语义的关联性又为汉字幻方的存在提供了有利的条件。如果我们能找到一个“语义圈”，这个圈子里的词总是那几个字，在它们之间就很容易产生一个幻方。有幸的是，这样的语义圈是存在的——计算机找到了这样一组大家耳熟能详的、尽显汉语言特色的词，构成了一个汉字幻方：</p>
<blockquote><p>全党全国<br>
党和国家<br>
全国人大<br>
国家大事</p></blockquote>
<p>    不过，上面这个幻方还有一点美中不足的是，第一个词用到了相同的字。能够避免同一个词内的字都不一样吗？是的。计算机给出下面这个完美的 4 阶汉字幻方。</p>
<blockquote><p>西欧各国<br>
欧洲国家<br>
各国人民<br>
国家民委</p></blockquote>
<p>    这种满足用词不重复，并且每个词内也无重字的 4 阶幻方可以说是相当罕见。在我所用的词库中，上面这个 4 阶幻方是唯一的解。</p>
<p> <br>
 <br>
    或许有的读者还不满足：上面这些幻方都是依赖于对称性的。有没有可能创作一个非对称的文字幻方呢？换句话说， n 个横向单词和 n 个纵向单词能否都不相同？在英文文字游戏中，这叫做“双文字幻方” (double word square) 。人们发现了不少双文字幻方，比如：</p>
<blockquote><p>L A C K<br>
I R O N<br>
M E R E<br>
B A K E</p></blockquote>
<p>    在汉语中，存在 4 阶双文字幻方的希望太渺茫了，不过 3 阶双汉字幻方倒有可能存在。事实上，由于英文是一个只有 26 个字母的拼音文字，而常用汉字就有数千个，因此我们或许能做到一件英文文字幻方望尘莫及的事情：不但 2n 个词语互不相同，连格子中的 n^2 个字也互不相同。遗憾的是，计算机并没有找到这般完美的双汉字幻方。最接近的两个结果如下：</p>
<p> <br>
    只有两个重复字的 3 阶双汉字幻方：</p>
<blockquote><p>山东省<br>
西北部<br>
省部级</p></blockquote>
<p> <br>
    只有一个重复字的 3 阶双汉字幻方：</p>
<blockquote><p>中新社<br>
学生会<br>
生活上</p></blockquote>
<p> <br>
    由于汉语词汇大多是双字词，因此创作 2 阶的双汉字幻方就容易多了。利用汉字双字词的构词特点，我们不但能保证 2 阶双汉字幻方中的 4 个字都不一样，还能保证方阵的两条对角线也恰好成词。例如：</p>
<blockquote><p>天上<br>
地下</p></blockquote>
<p> <br>
    这一下午搜索出来的结果多少算是补上了汉语文字游戏中的一块空白，但文字幻方的探索远未结束。如果扩大词库，或者加入短语甚至句子，是否能构造出阶数更高的文字幻方呢？有待万能的网友们继续努力了。</p>
			 ]]></content>
<pubDate>2010-05-26T23:49:31+00:00</pubDate>
<guid>http://www.matrix67.com/blog/archives/3314</guid>
<author><![CDATA[ 顾森 ]]></author>
</item>
<item>
<title><![CDATA[ 用一张日落照片估算出地球的半径 ]]></title>
<link>http://www.matrix67.com/blog/archives/3331</link>
<content><![CDATA[ 
		<p>    你相信吗，仅仅利用一张日落的照片，你就能得出地球的半径大小！ Princeton 大学的 Robert Vanderbei 在最近的<a href="http://orfe.princeton.edu/~rvdb/tex/sunset/ms.pdf">一篇论文</a>中对一张摄于密歇根湖的日落照片进行了分析，不但证实了地球是圆的，还依据照片上的内容对地球半径进行了估算。我把计算的大致过程向大家描述一下，供大家膜拜。</p>
<p>  <img alt="image placeholder" >
<p>    事情的起因就是上面这张很平常的日落照片，以及这样一个大家平时并没有太在意的问题：太阳露出水面的部分应该是一个标准的弓形，但为什么在日出日落时，我们所看到的太阳是一个橄榄球一样的形状？大家或许会很快想到，发光体的下半部分其实是日光反射在水面上造成的。随之产生的是另一个问题：为什么它的下半部分要比上半部分小一些呢？</p>
<p><span id="more-3331"></span><br>
  <img alt="image placeholder" >
<p>    这是因为——想到这个问题的答案并不容易——地球是圆的。上图就是人站在地球上看日出的一个比例夸张版示意图，其中 O 为地球的中心， A 为人眼的位置， AB 为视平线， B 点为水天交界处。由于太阳距离我们相当遥远，因此我们把太阳光看作是一束理想的平行光线。我们把直接射入人眼的太阳光与 AB 的夹角记为 α ，把经过水面上的一点 C 反射进入人眼的光线与 AB 的夹角记为 β 。从图上可见，视角 β 比 α 小，也就是说太阳在水面上的镜像比本身要小一些。</p>
<p> <br>
  <img alt="image placeholder" >
<p>     β 究竟比 α 小多少呢？对照片进行精确地测量，可知太阳的直径相当于照片中的 317 个像素，而露出水面的部分高 69 像素，水中的倒影则只有 29 像素。众所周知太阳的视直径（看太阳的视角）为 0.5 度，因此我们就得到 α = 0.5 * 69 / 317 ≈ 0.1088 度， β = 0.5 * 29 / 317 ≈ 0.0457 度。<br>
    如果再已知人眼（或者说相机）离水面的垂直距离 h 为 2 米，那么根据这些数据我们就足以估算出地球的半径了。不妨把 ∠AOB 记为 φ ，把 ∠AOC 记为 θ ，把人眼到水天相接处的距离 AB 记为 D ，把人眼到反射点的距离 AC 记为 d ，入射角和反射角记为 γ ，最后用 r 来表示地球半径，那么此时我们一共有 6 个未知量。为了求解出这 6 个未知数，我们需要寻找 6 个不同的方程。这 6 个方程可以由以下 6 组等量关系得到：</p>
<p>  <img alt="image placeholder" >
<p> <br>
      1. 四边形 OBAC 的内角和为 360° ，即 (φ – θ) + 90° + β + (180° – γ + 90°) = 360° ， 化简得 <strong>方程(1) φ + β = θ + γ</strong></p>
<p>      2. 两条平行线的同旁内角相加为 180° ，即 (α + β) + (180° – 2γ) = 180° ，即 <strong>方程(2) α + β = 2γ</strong></p>
<p>      3. 由于 AO = h + r ，同时又有 AO = AD + DO = D·sinφ + r·cosφ ，因此有 <strong>方程(3) h + r = D·sinφ + r·cosφ</strong></p>
<p>      4. BD 既可以等于 D·cosφ ，又可以等于 r·sinφ ，于是有 <strong>方程(4) D·cosφ = r·sinφ</strong></p>
<p>      5. 由于 AO = h + r ，同时又有 AO = AE + EO = d·sin(γ+θ) + r·cosθ ，因此有 <strong>方程(5) h + r = d·sin(γ+θ) + r·cosθ</strong></p>
<p>      6. CE 既可以等于 d·cos(γ+θ) ，又可以等于 r·sinθ ，于是有 <strong>方程(6) d·cos(γ+θ) = r·sinθ</strong></p>
<p> <br>
    一系列复杂的代数运算（省略数百字）最终告诉我们：</p>
<p>      r = h / (√<span style="text-decoration:overline">1 – 2·cosβ·cosγ + cos<sup>2</sup>γ</span> / sinβ – 1)</p>
<p>    其中 γ = (α + β)/2 。代入已知的 α 、 β 和 h 可以得到，地球半径 r 大约为 7.29312 * 10<sup>6</sup> 米，也即 7293 千米。</p>
<p>    这个估算的误差有多大呢？事实上，地球的半径大约为 6300 多千米，可见误差不是一般的大。不过，考虑到我们估算的依据仅仅是一张照片，能把数量级估对就已经相当牛 B 了。除了测量的精度之外，还有很多潜在的因素会导致误差。目前看来，误差的最主要来源似乎是不完全平静的水面——一点小小的波浪就会给 α 、 β 的值带来巨大的影响。</p>
			 ]]></content>
<pubDate>2010-06-01T11:41:17+00:00</pubDate>
<guid>http://www.matrix67.com/blog/archives/3331</guid>
<author><![CDATA[ 顾森 ]]></author>
</item>
<item>
<title><![CDATA[ 如果我说的是假话，那么我说的是假话 ]]></title>
<link>http://www.matrix67.com/blog/archives/3357</link>
<content><![CDATA[ 
		<p>在准备一份数理逻辑的材料时，我创作了下面 10 个逻辑推理问题。在每个问题中，甲、乙、丙三人各说了一句话，你需要判断出每个人说的究竟是真话还是假话。每个问题都有唯一解。注意，与传统的逻辑推理题目不同，没有任何条件告诉你究竟有多少人在说真话，有多少人在说假话。解决问题时尽量避免用枚举法试遍所有 8 种可能，否则这将失去“逻辑推理”的意义。</p>
<p> <br>
(1) 甲：乙说的是假话<br>
     乙：丙说的是假话<br>
     丙：甲要么说的是真话，要么说的是假话</p>
<p style="color:#e5e5e5">答案：显然，丙说的是真话。<br>
        因此，乙说的是假话。<br>
        因此，甲说的是真话。</p>
<p><span id="more-3357"></span><br>
 <br>
(2) 甲：我们三个人当中有人说真话<br>
     乙：我们三个人当中有人说假话<br>
     丙：我们三个人当中没有人说假话</p>
<p style="color:#e5e5e5">答案：乙和丙说的互相矛盾，他俩的话一真一假。<br>
        这就表明，三个人当中既有人说真话，又有人说假话。<br>
        因此，甲和乙都说的真话，丙说的是假话。</p>
<p> <br>
 <br>
(3) 甲：我们三个人都说的真话<br>
     乙：我们三个人都说的假话<br>
     丙：我们三个人当中，有些人在说真话，有些人在说假话</p>
<p style="color:#e5e5e5">答案：这三句话互相矛盾，却又涵盖了所有情况。<br>
        因此，三句话中有且仅有一句话为真。<br>
        因此，甲、乙说的是假话，丙说的是真话。</p>
<p> <br>
 <br>
(4) 甲：丙说的真话<br>
     乙：丙说的假话<br>
     丙：你们俩一个说的真话，一个说的假话</p>
<p style="color:#e5e5e5">答案：甲和乙说的互相矛盾，他俩的话一真一假。<br>
        因此，丙说的是真话。<br>
        因此，甲说的是真话，乙说的是假话。</p>
<p> <br>
 <br>
(5) 甲：乙说的是真话<br>
     乙：甲说的是真话<br>
     丙：我们都说的是假话</p>
<p style="color:#e5e5e5">答案：显然，丙不可能说的真话。<br>
        因此，丙说的是假话。<br>
        因此，不是所有人说的都是假话。<br>
        因此，甲和乙当中至少有一个人说的是真话。<br>
        不管甲和乙谁说了真话，都可推出甲和乙都在说真话。</p>
<p> <br>
 <br>
(6) 甲：我们当中有一个人说假话<br>
     乙：我们当中有两个人说假话<br>
     丙：我们当中有三个人说假话</p>
<p style="color:#e5e5e5">答案：显然，不可能所有人都在说假话，否则丙就说的真话。<br>
        显然，不可能有两个或两个以上的人在说真话，因为这三句话是互相矛盾的。<br>
        因此，恰好有一个人说的是真话。<br>
        因此，恰好有两个人说的是假话。<br>
        因此，乙说的是真话，甲和丙说的是假话。</p>
<p> <br>
 <br>
(7) 甲：我说的是真话。<br>
     乙：我说的是真话。<br>
     丙：如果我说的是真话，那么甲和乙都说的是真话。</p>
<p style="color:#e5e5e5">答案：如果丙说的是假话，那么“如果我说的是真话，那么……”永远为真，矛盾。<br>
        因此，丙说的是一定是真话。<br>
        因此，甲和乙说的都是真话。</p>
<p> <br>
 <br>
(8) 甲：如果乙说的是真话，那么丙说的是真话。<br>
     乙：如果丙说的是真话，那么甲说的是真话。<br>
     丙：我们说的都是假话。</p>
<p style="color:#e5e5e5">答案：不可能所有人都说的假话，否则甲和乙说的就是真话，矛盾。<br>
        因此，丙说的是假话。<br>
        因此，乙说的是真话。<br>
        因此，甲说的是假话。</p>
<p> <br>
 <br>
(9) 甲：如果丙说的是假话，那么我说的是假话<br>
     乙：如果丙说的是假话，那么我说的是假话<br>
     丙：如果我说的是假话，那么我说的是假话</p>
<p style="color:#e5e5e5">答案：如果丙说的是假话，那么“如果我说的是假话，那么我说的是假话”就为真，矛盾。<br>
        因此，丙说的是真话。<br>
        因此，甲和乙说的都是真话。</p>
<p> <br>
 <br>
(10) 甲：我们三个人要么都说的真话，要么都说的假话<br>
      乙：我们三个人要么都说的真话，要么都说的假话<br>
      丙：我们三个人要么都说的真话，要么都说的假话</p>
<p style="color:#e5e5e5">答案：显然他们说的都是真话。</p>
<p> </p>
			 ]]></content>
<pubDate>2010-06-03T23:32:56+00:00</pubDate>
<guid>http://www.matrix67.com/blog/archives/3357</guid>
<author><![CDATA[ 顾森 ]]></author>
</item>
<item>
<title><![CDATA[ 日文中的数学名词和计算机名词都是什么样的？ ]]></title>
<link>http://www.matrix67.com/blog/archives/3376</link>
<content><![CDATA[ 
		<p>有时候会觉得日文很有喜感，印象最深的就是第一次听说“努力学习”在日文中写作“一生悬命勉强”时，真把我笑得前俯后仰。今天网上闲逛，偶入一日文数学网站，惊奇地发现里面的大多数日文数学名词我都能看懂，并且依旧给人带来一种新奇的陌生感：“多边形”叫做“多角形”，“梯形”叫做“台形”，“切线”叫做“接线”，等等。于是我想到了下面这个有趣的游戏：我在日文 Wikipedia 中挑选了一些词汇，看看大家能否猜得到它们的意思。括号里的数字表明对应的汉语名词有几个字。</p>
<p>=== 数学篇 ===<br>
1. 自乗 (2)<br>
2. 確率 (2)<br>
3. 合同 (2)<br>
4. 二進法 (3)<br>
5. 放物線 (3)<br>
6. 背理法 (3)<br>
7. 暗号理論 (3)<br>
8. 天井関数 (5)<br>
9. 数理論理学 (4)<br>
10. 可付番集合 (4)<br>
11. 鳩の巣原理 (4)<br>
12. 半順序関係 (4)<br>
13. 位相幾何学 (3)<br>
14. 連続体仮説 (5)<br>
15. 排他的論理和 (2)<br>
16. 双子素数の予想 (6)<br>
17. ユークリッド原論 (4)<br>
18. 一対一上への写像 (4)<br>
19. 平方剰余の相互法則 (5)<br>
20. ゲーデルの不完全性定理 (8)</p>
<p><span id="more-3376"></span><br>
=== 程序篇 ===<br>
1. 再帰 (2)<br>
2. 定数 (2)<br>
3. 貪欲法 (3)<br>
4. 機械語 (4)<br>
5. 互換性 (3)<br>
6. 二分木 (3)<br>
7. 文字列 (3)<br>
8. 赤黒木 (3)<br>
9. 接頭辞 (2)<br>
10. 情報理論 (3)<br>
11. 正規表現 (5)<br>
12. 動的計画法 (4)<br>
13. 多次元配列 (4)<br>
14. 幅優先探索 (6)<br>
15. 連結リスト (2)<br>
16. 統合開発環境 (6)<br>
17. 遺伝的アルゴリズム (4)<br>
18. ユークリッドの互除法 (5)<br>
19. 並列コンピューティング (4)<br>
20. オブジェクト指向プログラミング (8)</p>
<p> <br>
 <br>
 <br>
答案：</p>
<p>1. 自乗 → 平方<br>
2. 確率 → 概率<br>
3. 合同 → 全等<br>
4. 二進法 → 二进制<br>
5. 放物線 → 抛物线<br>
6. 背理法 → 反证法<br>
7. 暗号理論 → 密码学<br>
8. 天井関数 → 上取整函数<br>
9. 数理論理学 → 数理逻辑<br>
10. 可付番集合 → 可数集合<br>
11. 鳩の巣原理 → 鸽笼原理<br>
12. 半順序関係 → 偏序关系<br>
13. 位相幾何学 → 拓扑学<br>
14. 連続体仮説 → 连续统假设<br>
15. 排他的論理和 → 异或 <span style="color:gray">（日文中“论理和”是“逻辑或”的意思，“论理积”才是“逻辑和”的意思）</span><br>
16. 双子素数の予想 → 孪生素数猜想<br>
17. ユークリッド原論 → 几何原本<br>
18. 一対一上への写像 → 一一映射<br>
19. 平方剰余の相互法則 → 二次互反律<br>
20. ゲーデルの不完全性定理 → 哥德尔不完备定理</p>
<p>1. 再帰 → 递归<br>
2. 定数 → 常量<br>
3. 貪欲法 → 贪心法<br>
4. 機械語 → 机器语言<br>
5. 互換性 → 兼容性<br>
6. 二分木 → 二叉树<br>
7. 文字列 → 字符串<br>
8. 赤黒木 → 红黑树<br>
9. 接頭辞 → 前缀<br>
10. 情報理論 → 信息论<br>
11. 正規表現 → 正则表达式<br>
12. 動的計画法 → 动态规划<br>
13. 多次元配列 → 多维数组<br>
14. 幅優先探索 → 广度优先搜索<br>
15. 連結リスト → 链表<br>
16. 統合開発環境 → 集成开发环境<br>
17. 遺伝的アルゴリズム → 遗传算法<br>
18. ユークリッドの互除法 → 辗转相除法<br>
19. 並列コンピューティング → 并行计算<br>
20. オブジェクト指向プログラミング → 面向对象程序设计</p>
<p>说实话有几个日文词挺帅气的，比如“多次元配列”。</p>
			 ]]></content>
<pubDate>2010-06-05T18:23:08+00:00</pubDate>
<guid>http://www.matrix67.com/blog/archives/3376</guid>
<author><![CDATA[ 顾森 ]]></author>
</item>
<item>
<title><![CDATA[ 趣题：和有可能为1的区间分布 ]]></title>
<link>http://www.matrix67.com/blog/archives/3385</link>
<content><![CDATA[ 
		<p>    如果 10 个非负数 x1, x2, …, x10 满足 x1 + x2 + x3 + … + x10 = 1 ，那么这 10 个数都均匀地分布在 [0,1] 之间吗？显然不是。为了说明这一点，最好的方法或许是把分布情况变得有限——我们可以把 [0,1] 区间划分成若干个小区间，并说明这 10 个数不可能均匀地分布在这些区间内。比方说，把 [0,1] 分成 [0, 0.25), [0.25, 0.5), [0.5, 0.75), [0.75, 1] 这四段：如果 10 个数都落在 [0, 0.25) 里，它们的和是有可能为 1 的；但若 10 个数都落在 [0.75, 1] 里，显然它们的和不可能为 1 。一个有趣的问题由此产生：考虑 10 个数的 4^10 种分布，它们的和有可能为 1 的有多少情况？</p>
<p> <br>
 <br>
    显然， 10 个区间的右端点之和一定比 1 大。因此，只要 10 个区间的左端点之和不超过 1 ，就可以保证在这些区间中选的数之和可能为 1 。不妨把区间 [0, 0.25), [0.25, 0.5), [0.5, 0.75), [0.75, 1] 依次编号为 0, 1, 2, 3 ，由于它们的左端点分别为 0/4, 1/4, 2/4, 3/4 ，因此左端点之和不超过 1 相当于 10 个区间的编号之和不超过 4 。而和不超过 4 的 10 个非负整数，又与 4 个小球和 10 个隔板的排列顺序一一对应，它们一共有 C(14, 4) = 1001 种情况。但在这 1001 种情况中， (4, 0 ,0, …, 0), (0, 4, 0, …, 0), ……, (0, 0, 0, …, 4) 这 10 种情况是要排除的，因为区间编号只有 0 到 3 。因此，在 10 个数的 4^10 种区间分布中，只有 991 种分布才满足它们的和可能为 1 。</p>
<p><span id="more-3385"></span><br>
    接下来，我们自然而然地想到了这样一个问题：如果把 [0, 1] 划分成不同的四段，问题的答案还是 991 吗？好像并不是这样。容易想到，由于偏小的数更容易出现，因此若划分出来的区间在前面更密集一些，就会出现不止 991 种满足要求的分布。那么，同样是把 [0, 1] 分成四段，满足要求的分布最多能有多少个呢？</p>
<p> <br>
 <br>
    我们先来说明，答案最多不会多于 4^10 – 3^10 ，因为无论怎样划分区间，至少有 3^10 种分布是不满足要求的。只需要注意到，如果某种分布符合要求，则所有区间的左端点之和一定比 1 小；那么把所有 10 个区间都左移一下，原分布中的左端点之和就变成了新分布的右端点之和，由于它比 1 小，因此新的分布一定不符合要求。现在，假如 10 个数都只能落在编号为 1, 2, 3 的区间里，那么总的分布情况数就有 3^10 种。对于这里面的每一种分布，要么它自身是不合要求的，要么所有区间左移一下后得到的新分布是不合要求的。因此，至少有 3^10 种分布不符合要求，也即最多有 4^10 – 3^10 种可行的分布。<br>
    这个上界是可以达到的。例如，四个区间分别为 [0, 0.01), [0.01, 0.02), [0.02, 0.03), [0.03, 1]，则满足要求的分布恰有 4^10 – 3^10 = 989527 种。</p>
<p>题目来源：<a href="http://domino.research.ibm.com/Comm/wwwr_ponder.nsf/Challenges/May2010.html">上月 IBM Ponder This</a></p>
			 ]]></content>
<pubDate>2010-06-10T02:42:43+00:00</pubDate>
<guid>http://www.matrix67.com/blog/archives/3385</guid>
<author><![CDATA[ 顾森 ]]></author>
</item>
<item>
<title><![CDATA[ 中文自我描述句 ]]></title>
<link>http://www.matrix67.com/blog/archives/3389</link>
<content><![CDATA[ 
		<p>    我曾经在<a href="http://www.matrix67.com/blog/archives/289">这里</a>介绍过一种叫做 autogram 的文字游戏，简单说就是“与自身相符的句子”，或者更简单地叫做“自我描述句”。例如，“这句话是用中文写的”、“这句话有七个字”等等。蛋疼的人还真不少，有人创作出了一些异常牛 B 的 autogram ，比如：</p>
<blockquote><p>This autogram contains five a’s, one b, two c’s, two d’s, thirty-one e’s, five f’s, five g’s, eight h’s, twelve i’s, one j, one k, two l’s, two m’s, eighteen n’s, sixteen o’s, one p, one q, six r’s, twenty-seven s’s, twenty-one t’s, three u’s, seven v’s, eight w’s, three x’s, four y’s, and one z.</p></blockquote>
<p> <br>
    1982 年， Scientific American 月刊上刊登了一个 autogram 杰作：</p>
<blockquote><p>Only the fool would take trouble to verify that his sentence was composed of ten a’s, three b’s, four c’s, four d’s, forty-six e’s, sixteen f’s, four g’s, thirteen h’s, fifteen i’s, two k’s, nine l’s, four m’s, twenty-five n’s, twenty-four o’s, five p’s, sixteen r’s, forty-one s’s, thirty-seven t’s, ten u’s, eight v’s, eight w’s, four x’s, eleven y’s, twenty-seven commas, twenty-three apostrophes, seven hyphens and, last but not least, a single !</p></blockquote>
<p><span id="more-3389"></span></p>
<p> <br>
    大家或许已经猜到我昨天干了什么蛋疼的事了——鉴于我最近对汉语文字游戏特别感兴趣，我理所当然地又开始思考创作中文 autogram 的事情了。好在中文的数字并不复杂，用 Mathematica 跑了不久，我便搜索到了一个解：</p>
<blockquote><p>这句话里有五个“一”、十个“两”、两个 “三”、一个“四”、两个“五”、一个“六”、一个“七”、两个“八”、一个“九”、三个“十”、两个“这”、两个“句”、两个“话”、两个“里”、两个 “有”、两个“和”和十八个“个”。</p></blockquote>
<p> </p>
<p>    不过，后来我才知道，寻找中文的自我描述句似乎早有人做过了。网友 <a href="http://twitter.com/txyyss/status/15765632558">txyyss</a> 告诉我说，他也曾利用迭代算法寻找过中文 autogram ，并找到了下面这个更漂亮的结果：</p>
<blockquote><p>这句由电脑生成的话一共有一百二十三个字，其中有两个“这”字，两个“句”字，两个“由”字，两个“电”字，两个“脑”字，两个“生”字，两个“成”字，两个“的”字，两个“话”字，两个“共”字，三个“有”字，二十六个“个”字，二十六个“字”字，两个“其”字，两个“中”字，十五个“两”字，三个“一”字，四个“二”字，五个“三”字，两个“四”字，五个“五”字，三个“六”字，五个“十”字，两个“百”字。</p></blockquote>
<p> <br>
    关于中文的自我描述句，还能得到哪些比较有趣的结果？欢迎网友们继续扩充。</p>
<p> <br>
    Update: 网友 <a href="http://blog.joycode.com/zee/archive/2004/08/04/29469.joy">zee</a> 写道：</p>
<blockquote><p>你看到的这个句子一共有九十个字。其中有：二个“你”，二个“看”，二个“到”，二个“的”，二个“这”，二十六个“个”，二个“句”，二个“子”，二个 “共”，三个“有”，二个“字”，二个“其”，二个“中”，四个“一”，十七个“二”，二个“三”，四个“四”，一个“五”，二个“六”，二个“七”，一个“八”，二个“九”，四个“十”。</p></blockquote>
<p> <br>
 <br>
    网友 <a href="http://www.matrix67.com/blog/archives/3389/comment-page-1#comment-197981">Voldemort</a> 给出了目前为止最为强大的句子（只可惜我验证了一下，发现是错的……不好意思啊）<br>
 </p>
			 ]]></content>
<pubDate>2010-06-10T03:11:19+00:00</pubDate>
<guid>http://www.matrix67.com/blog/archives/3389</guid>
<author><![CDATA[ 顾森 ]]></author>
</item>
<item>
<title><![CDATA[ 玩转内接多边形（五）：任意多边形内均存在内接菱形 ]]></title>
<link>http://www.matrix67.com/blog/archives/3412</link>
<content><![CDATA[ 
		<p>    我们曾经用两种巧妙的方法证明了这样一个命题：<a href="http://www.matrix67.com/blog/archives/3035">任意<strong>凸</strong>多边形内均存在内接菱形</a>。利用上次讲到的<a href="http://www.matrix67.com/blog/archives/3059">登山引理</a>，我们可以证明一个更强的命题：<strong>任意多边形</strong>内均存在内接菱形。</p>
<p>    证明的大致思路如下：在多边形外任选一点 u 。把多边形上离 u 最近的点记作 y ，把多边形上离 u 最远的点记作 z 。 y 和 z 这两个点就把整个多边形的边界分成了两个部分。</p>
<p>  <img alt="image placeholder" >
<p><span id="more-3412"></span><br>
    回忆登山引理的内容：对于两个函数值从 0 连续地变到 1 的“折线段函数” f(x) 和 g(x) ，我们总能连续地调整 x1 和 x2 的位置，使得 f(x1) 与 g(x2) 总保持相等，它们从一开始的 0 出发，同时到达 1 。把登山引理应用到上图中，我们可以得到这个结论：我们可以让点 x1 从 y 出发沿着图中的上半部分移动到 z ，点 x2 从 y 出发沿着图中的下半部分移动到 z ，并且保证 x1 到 u 的距离始终等于 x2 到 u 的距离（为了照顾对方，必要时 x1 和 x2 可能会走回头路）。这样， u 、 x1 、 x2 就始终能成为一个菱形的三个顶点。我们把菱形的第四个顶点记作 v 。容易证明 v 的轨迹也是连续的。<br>
    当 x1 和 x2 离 y 点充分近的时候， v 点显然在多边形内部；但当 x1 和 x2 跑到 z 附近时， v 显然就跑到了多边形外。在此过程中， v 点必然穿过了多边形的边界，此时 u 、 x1 、 x2 、 v 就构成了这样一个菱形，它的后面三个顶点都在多边形上。</p>
<p>    现在，固定 y 点，让 v 点逐渐靠拢 y 点，则对应的这个菱形也会连续地发生变化。容易想到，这一过程的极限将会收敛到某个固定的菱形（这是可以证明的），它就是我们所求的内接菱形。</p>
			 ]]></content>
<pubDate>2010-06-19T18:13:23+00:00</pubDate>
<guid>http://www.matrix67.com/blog/archives/3412</guid>
<author><![CDATA[ 顾森 ]]></author>
</item>
<item>
<title><![CDATA[ 玩转内接多边形（六）：任意凸多边形内均存在内接正方形 ]]></title>
<link>http://www.matrix67.com/blog/archives/3422</link>
<content><![CDATA[ 
		<p>    这一系列文章的最后，我们将证明：任意凸多边形内均存在内接正方形。事实上，这几乎是“任意凸多边形内均存在内接菱形”这一命题的直接推论。在<a href="http://www.matrix67.com/blog/archives/3035">这篇日志</a>中，我们实际上证明了这样一个结论：在任意凸多边形中，任选一个方向 u ，总能找到一个内接菱形，它的其中一条对角线与所选方向平行。<br>
    现在，慢慢旋转方向 u ，则所得菱形的两条对角线将连续地变化。当方向 u 旋转了 90 度后，原来的两条对角线交换了位置，换句话说两条对角线的长度之差变号了。因此，在方向 u 旋转的过程中，必然有一个时刻两条对角线的长度恰好相同，此时内接正方形也就得到了。</p>
<p>    可能有的读者想问了，去掉“凸多边形”这一条件，任意多边形内都存在内接正方形吗？答案是肯定的。 Square Peg 定理告诉我们，对于任意一个简单多边形，总能在上面找到四个点，使得它们恰好是一个正方形的四个顶点。定理的证明需要用到很多之前提到的类似的方法，不过更加复杂一些，这里就不再叙述了。</p>
<p>    最后还有一个有趣的话题想与大家分享一下。大家看到了，在一个多边形内内接等边三角形、矩形、菱形甚至正方形都是没有问题的，那么这类问题的极限在哪里？有什么图形是一个多边形内不能内接的吗？肯定是有的。下面我们证明，存在一个多边形，它不能内接正七边形。<br>
    事实上，任何三角形内都不能内接正七边形。考虑一个正七边形的外接圆，它与三角形最多只有六个交点（因为一条线段和一个圆最多只能产生两个交点），因此正七边形显然是不能内接于三角形内的。</p>
			 ]]></content>
<pubDate>2010-06-19T18:53:17+00:00</pubDate>
<guid>http://www.matrix67.com/blog/archives/3422</guid>
<author><![CDATA[ 顾森 ]]></author>
</item>
<item>
<title><![CDATA[ 连杆系统：比你想象中的更强大 ]]></title>
<link>http://www.matrix67.com/blog/archives/3427</link>
<content><![CDATA[ 
		<p>    在机器时代，作为机械构造的理论工具，连杆系统曾一度成为数学界中最热门的话题。所谓连杆系统，就是一些刚性的小杆在端点处以转轴的方式相连，形成的一个机械装置。固定某些顶点的位置之后，其余的动点就能画出一些有趣的轨迹。比方说，固定线段 AB 的其中一个端点 A ，则顶点 B 将描绘出一个绕 A 点的圆周。</p>
<p>  <img alt="image placeholder" >
<p>    连杆系统最激动人心的，莫过于一些简单的连杆装置能够描绘出非常复杂的曲线。例如，上面的右图就是由五根相同长度的线段构成的连杆。固定 A 、 B 两个端点后，显然 C 和 D 描绘出的都是圆弧，但 E 点的轨迹就很难以想象了。事实上， E 点的轨迹相当的诡异，需要用一些复杂的代数语言才能描述。</p>
<p> <img alt="image placeholder" >
<p><span id="more-3427"></span><br>
 <br>
    在连杆系统领域中，有一个困扰人类近百年的难题——利用连杆系统是否能画出直线来？当时看来，这个问题是如此的困难，以至于人们普遍猜测甚至试图去证明，能画出直线的连杆压根儿是不存在的。 1864 年，一位法国海军军官 Charles-Nicolas Peaucellier 发明了第一个能画出直线的连杆系统，在当时引起了极大的轰动。 Peaucellier 连杆的原理并不难理解，利用初中几何知识足以证明 Peaucellier 连杆的正确性。</p>
<p>  <img alt="image placeholder" >
<p>    Peaucellier 连杆是由 7 根连杆组成的，其中 AC=AD=a ， BC=CE=ED=DB=b ， OB 为任意长。固定 A 点和 O 点的位置，使得 OA 的距离恰好等于 OB ，则 E 点将会描绘出一条垂直于 AO 的直线来。容易看出， A 、 B 、 E 三点在同一条直线上。我们首先说明， AB·AE 是一个常数。过点 C 作 CH⊥AE ，垂足为 H 。于是 AB·AE = (AH+HE)·(AH-HB) = AH<sup>2</sup> – BH<sup>2</sup> = (AC<sup>2</sup> – CH<sup>2</sup>) – (BC<sup>2</sup> – CH<sup>2</sup>) = a<sup>2</sup> – b<sup>2</sup> = 常数。</p>
<p>  <img alt="image placeholder" >
<p>    为什么 AB·AE 为常数，就能保证 E 点的轨迹是一条直线呢？过 A 点作出圆 O 的直径 AM ，在射线 AM 上找出一点 N 使得 AM·AN 也等于这个常数。由于 AM·AN = AB·AE ，我们立即可知 △ABM∽△ANE ，因此 ∠ANE = ∠ABM = 90° ，也就是说 EN 与 AN 始终垂直。这就证明了， E 点的轨迹确实是一条与 AO 垂直的直线。</p>
<p> <br>
 <br>
    解决了连杆画直线的问题后，数学家们显然还不满足。很多迹象都表明，连杆系统比我们想象中的更强大，画出一些更奇怪的图形似乎不成问题。<br>
    有一个非常简单的构造几乎是瞬间增强了连杆系统的功能，让人们更加相信构造复杂连杆的可能性。虽然连杆系统要求杆与杆必须在端点处连接，但我们可以利用三角形的稳定性，把某根杆的一端直接接到另一根杆的中间。如下图，虽然 AB 和 BC 是两根各自能绕着 B 转的连杆，但简单地用三角形固定一下， AB 和 BC 将会变成一条线段 AC 。利用这一基本构造，我们就能把连杆的端点直接连在另一根连杆的中间了。</p>
<p>  <img alt="image placeholder" >
<p> <br>
    这一基本构造极大地激励了我们——我们何不像<a href="http://www.matrix67.com/blog/archives/497">研究尺规作图</a>一样，借助最基本的构造，构造出更实用的基本构造，逐渐搭建起连杆作图的大厦呢？ 1877 年，英国数学家 Alfred Kempe 顺着这个思路研究下去，最后得出了一个惊人的结论：连杆系统不仅能画出直线和圆，还能画出双曲线、抛物线、椭圆，甚至半立方抛物线、双纽线等复杂的曲线。事实上，任何代数曲线 f(x,y) = Σ(i=1..n) Σ(j=1..n) C<sub>i, j</sub> · x<sup>i</sup> · y<sup>j</sup> = 0 都是可以用连杆系统画出的！</p>
<p> <br>
  <img alt="image placeholder" >
<p>    这个证明的基本思路是这样的。首先，以 O 为端点构造两个菱形。利用 Peaucellier 连杆，我们可以让 x 点和 y 点始终沿着两条垂直的直线运动。固定 O 点后，我们就建立起了一个平面直角坐标系。接下来，我们需要把 y 点绕着原点顺时针旋转 90 度。假设菱形 OCyD 的边长为 l ，则构造连杆 OC’ = C’y’ = y’D’ = D’O = l ， CC’ = DD’ = √<span style="text-decoration:overline">2</span> l ，这样我们就把 Oy 的长度转移到了 x 轴上。接下来，我们将用一系列连杆构造出一个点 T ，使得 T 始终在坐标系中的 (f(x, y), 0) 的位置上。然后我们将构造出一个点 S ，使得 S 始终在坐标系中的 (x, y) 位置上。最后，我们把 T 点的位置固定在 (0, 0) ，则 S 点就将描绘出 f(x, y) = 0 的图象来。<br>
    为了得到 T(f(x, y), 0) ，我们只需要实现对 x 轴上的点的以下四种操作：</p>
<p>      (1) 把某个点的坐标加上一个常数 c<br>
      (2) 把某个点的坐标乘上一个常数 c<br>
      (3) 把两个点的坐标相加<br>
      (4) 把两个点的坐标相乘</p>
<p> <br>
    <img alt="image placeholder" >
<p>    前两个操作并不困难。对于 x 轴上的某个点 p ，为了得到点 z=p+c，只需要固定两个距离为 c 的点 A 、 B ，并构造一系列平行四边形即可。为了得到点 z=c·p，我们只需要构造一组相似三角形 OAp 和 OBz ，使得 OB=c·OA ， Bz=c·Ap 。添加一个连杆 pC 使得四边形 ABCp 为平行四边形，以保证这两个三角形是相似的。注意，在乘法器的构造中，我们用到了前面所说的基本构造，即连杆中间直接连接另一根连杆。</p>
<p> <br>
    <img alt="image placeholder" >
<p>    把两个变量相加也比想象中的容易。事实上，我们不但能在 x 轴上对两个动点做加法，还能直接实现一个更强的基本操作——对平面上的两个向量进行相加。只需要构造一系列的平行四边形，容易证明向量 Oz 即是向量 Op 和 Oq 之和。</p>
<p> <br>
    <img alt="image placeholder" >
<p>    但是，对 x 轴上的两个变量进行相乘就有些麻烦了。注意到，由于 p·q = ((p+q)<sup>2</sup> – (p-q)<sup>2</sup>) / 4 ，因此只要我们能实现平方操作，也就有了实现乘法的方法。而由于 1/(p-1) – 1/(p+1) = 2/(p<sup>2</sup> – 1) ，因此只要我们能实现倒数操作，也就有了实现平方的方法。在证明 Peaucellier 连杆的正确性时，我们已经证明了，在上图中的连杆中有 z·p = a<sup>2</sup> – b<sup>2</sup> ，利用它我们便能实现 z = (a<sup>2</sup> – b<sup>2</sup>)/p 。取 a 、 b 为适当的值，我们就能得到 p 的倒数了。</p>
<p>    由于 x 和 y’ 都已经在 x 轴上了，利用上面的这些基本操作，我们便能得到 T(f(x, y), 0) 。另外，利用向量加法器，我们可以得到 Ox 和 Oy 的向量和 S = (x, y) 。将 T 点的位置固定在原点 O 处， S 的轨迹就是 f(x, y) = 0 的图象了。<br>
    Kempe 的结论最令人惊讶的地方莫过于，由于各种曲线都能用代数曲线近似地描述，因此连杆系统几乎可以视为万能的了。因此，如果你足够有耐心的话，你甚至能构造一个连杆系统，它能签出你的大名来！</p>
			 ]]></content>
<pubDate>2010-06-22T04:45:50+00:00</pubDate>
<guid>http://www.matrix67.com/blog/archives/3427</guid>
<author><![CDATA[ 顾森 ]]></author>
</item>
<item>
<title><![CDATA[ 火柴棒搭成的几何世界 ]]></title>
<link>http://www.matrix67.com/blog/archives/3448</link>
<content><![CDATA[ 
		<p>    前几天，我看到了这样一个问题：如何用火柴棒准确地搭出一个正方形？注意，由于没有任何工具可以让两根火柴棒拼成一个 90° 角，因此用四根火柴棒随意摆出一个四边形，最多也只能是个菱形。要想拼出一个正方形，我们还得想些奇招来。</p>
<p>      <img alt="image placeholder" >
<p>    一个经典的做法如上图所示。先摆出线段 AB ，下面我们将要确定线段 AK 的位置，使得两条线段成 90° 角。在 AB 上随意找一个点 C ，以 AC 为底搭出两个腰为 1 的等腰三角形 DAC 和 EAC 。容易看出， D 、 E 是关于 AB 对称的两个点。搭建一系列等边三角形 △ADF 、 △AFG 、 △AGH ，确定出 D 关于 A 点的对称点 H 。这样， H 、 E 两点就关于 AK 轴对称了。再搭一个等边三角形 AIE ，则 I 、 G 两点也关于 AK 对称。因此， HG 和 IE 的交点 J 就在 AK 上，自然 AK 的位置也就确定出来了。重复执行以上操作，我们便能完成以 AB 为边的整个正方形。</p>
<p><span id="more-3448"></span><br>
    受此启发，我们自然而然地想到了这样一个问题：火柴棒的几何作图能力到底有多强？我们能仅凭借火柴棒找出三角形的外心吗？我们能仅凭借火柴棒搭出一个正五边形吗？ 1939 年， T. R. Dawson 在一篇论文中证明了一个惊人的结论：火柴棒作图与尺规作图的能力完全一样！换句话说，用尺规作图能够确定的点，用火柴棒作图也能确定；而尺规作图办不到的事，火柴棒作图也没法办到。也就是说，火柴棒作图完全等价于尺规作图！</p>
<p>    为了证明这一结论，我们首先得给火柴棒作图下一个定义。我们约定，用火柴棒作图时只允许以下四种基本操作，它们就是火柴棒几何中的“公理”：</p>
<blockquote><p>1. 给定一点 A ，可以作一条通过 A 的单位长线段，或者以 A 为端点的单位长线段<br>
2. 给定距离不超过单位长的两点 A 、 B ，可以作一条通过 A 、 B 的单位长线段，或者以 A 为端点过 B 的单位长线段<br>
3. 给定距离不超过单位长的两点 A 、 B ，可以以 AB 为底作一个腰为单位长的等腰三角形 ABC 。<br>
4. 给定距离不超过单位长的点 A 和直线 l ，可以作一条以 A 为端点，另一端点在 l 上的单位长线段</p></blockquote>
<p>    有了这些基本操作，我们便可以一步一步搭出火柴棒的几何世界了。</p>
<p> <br>
    <strong>延长一条线段</strong></p>
<p>      <img alt="image placeholder" >
<p>    如上图，搭出一系列等边三角形，我们便能实现线段的延长。注意到线段 CD 与 AB 平行且相距 √<span style="text-decoration:overline">3</span>/2 个单位，因此我们还得到了一个非常有用的工具：将给定线段平移 √<span style="text-decoration:overline">3</span>/2 个单位。</p>
<p> <br>
    <strong>找出长度小于单位长的线段的中点</strong></p>
<p>      <img alt="image placeholder" >
<p>    如图， AB 为已知线段。先作等腰三角形 ABC ；再作等边三角形 BDC 和 AEC 。 BD 和 AE 的交点 F 就在等腰三角形的中线上。 CF 的延长线与 AB 的交点就是我们所求的点 G 。<br>
    由于 CG 还平分了 ∠ACB 和 ∠DCE ，因此我们相当于有了一个平分不超过 120° 且不等于 60° 的角的办法。另外，由于 CG 还是 AB 的垂线，因此我们又有了过点 C 向已知线段作垂线的方法——先利用公理 4 摆出线段 CA 和 CB ，再找出 AB 的中点。即使 C 点离已知线段很远，垂线照样作得出，因为我们可以将已知线段不断平移 √<span style="text-decoration:overline">3</span>/2 个单位，让它与 C 的距离足够近。不过，这里还是有一种特殊的情况：若 C 与已知线段的距离恰好是 √<span style="text-decoration:overline">3</span>/2 的整倍数，这么做就不行了。</p>
<p> <br>
    <strong>找出长度等于单位长的线段的中点</strong></p>
<p>      <img alt="image placeholder" >
<p>    假如 AB 是一条长度恰为单位长的已知线段。首先在 AB 上任取一点 C ，然后作等腰三角形 ADC 。作等边三角形 CED ，与 AD 交于 F ；作等边三角形 AGD ，与 CD 交于 H ； CE 和 AG 交于点 I 。那么， DI 与 FH 的交点 J 就是 FH 的中点。 BH 与 AD 交于点 K ， KJ 与 AB 交于点 L ，于是我们就成功地把 FH 的中点转移到了 AB 的中点。<br>
    这个构造弥补了我们之前留下的空缺。现在，我们不但能平分恰为 60° 的角，也能引出距离恰为 √<span style="text-decoration:overline">3</span>/2 的整倍数的垂线了。</p>
<p> <br>
    <strong>过已知线段外的一点，作已知线段的平行线</strong></p>
<p>      <img alt="image placeholder" >
<p>    不断平移已知线段 AB ，直到它离点 C 足够近。以 C 为端点，利用公理 4 引单位长线段 CD 、 CE 。反向延长 CE 到 F ，则 ∠DCF 的平分线 CG 就与 AB 平行。</p>
<p> <br>
    <strong>找出距离大于单位长的两点的中点</strong></p>
<p>      <img alt="image placeholder" >
<p>    已知很远的两点 A 、 B 。向任意方向作单位长线段 AC ，过 B 作它的平行线段 BD 。利用一系列等边三角形，构造逐渐向中间靠拢的中心对称图形，直到出现距离不超过单位长的对称点 E 、 F 。 EF 的中点也就是 AB 的中点。<br>
    既然我们能找到任意线段的中点，平分大于 120° 的角也就不成问题了。</p>
<p> <br>
    好了，准备工作基本结束，下面我们就来说明火柴棒作图与尺规作图的等价性。注意到，火柴棒作图的四项基本操作都能用尺规作图实现，因此火柴棒作图是尺规作图的子集。为了说明尺规作图同时也是火柴棒作图的子集，我们只需要用火柴棒实现尺规作图的三个基本操作：作出过两点的直线、作出直线和圆的交点，作出圆和圆的交点。</p>
<p> <br>
    <strong>作出过两点的直线</strong></p>
<p>    为了连接 AB ，首先找出 AB 的中点 C ，然后找出 AC 的中点 D ， BC 的中点 E ……如此下去，直到 AB 之间有足够多的点，相邻点的距离都小于单位长度。这样，我们便可以用火柴棒连接很远的两点了。</p>
<p> <br>
    <strong>作出直线和圆的交点</strong></p>
<p>      <img alt="image placeholder" >
<p>    如图，给定点 A 、点 B 、圆心 C 以及圆周上一点 D ，我们需要找到直线 AB 与（隐形的）圆 C 的交点 L 。过 C 作 CE⊥AB 。在 CE 的反向延长线上截取 CF=CD （这是可以办到的，比如先作 ∠DCF 的角平分线，再过 D 作角平分线的垂线；后面还会反复用到这个技巧）。向任意方向作单位长度线段 FG 。过 E 作 CG 的平行线，交 FG 延长线于 H 。过 H 作 EC 的平行线，截取 HI=HG 。作 IJ∥HE 。最后，利用公理 4 作单位长线段 JK ，则过 C 平行于 JK 的直线与 AB 的交点就是所求点 L 。<br>
    为了证明其正确性，我们只需要说明 CL=CD 。图中的一系列平行线和等长线段告诉我们， CE:CD = CE:CF = HG:GF = HI:GF = JE:GF = JE:JK = CE:CL ，因此 CL 是等于 CD 的。</p>
<p> <br>
    <strong>作出圆和圆的交点</strong></p>
<p>      <img alt="image placeholder" >
<p>    如图，已知圆心 A 和圆周上一点 B ，圆心 C 和圆周上一点 D ，我们想要找出这两个圆的交点。由于我们已经能作直线与圆的交点了，因此为了作出两圆的交点，只要能找出公共弦所在直线即可。而公共弦与连心线垂直，因此我们只需要找出公共弦与连心线的交点 L 即可。不妨把圆 A 的半径记作 a ，把圆 C 的半径记作 c ，再在连心线上找出 LK=LC ，则由勾股定理可得 a^2 – AL^2 = c^2 – CL^2 ，即 (a+c)(a-c) = AC·AK 。也就是说， AK 就等于 (a+c)(a-c)/AC 。我们将利用这个关系找出 K 点来。<br>
    过 C 作 AB 的平行线，截取 CE=CD 。作 EF∥CB ，则 AF 就等于 a+c 。过 B 作 AC 的平行线，截取 BG=BF 。截取 AH=AB ，然后作 BI∥GH ， AI 就等于 a-c 。作 IJ∥CF ，则 AJ 就等于 (a+c)(a-c)/AC 。最后，只需要截取 AK=AJ ，再找出 CK 的中点 L ，问题就圆满解决了。</p>
<p> <br>
    这样一来，所有尺规作图能够办到的事情，只用火柴棒也能办到，一切火柴棒作图问题都被终结掉了。不过，对火柴棒几何的研究还远未结束。如何简化作图过程，作出指定图形最少需要多少根火柴棒……这些悬而为解的问题都还有待人们继续探索。</p>
			 ]]></content>
<pubDate>2010-06-30T05:49:42+00:00</pubDate>
<guid>http://www.matrix67.com/blog/archives/3448</guid>
<author><![CDATA[ 顾森 ]]></author>
</item>
<item>
<title><![CDATA[ 六道黑白棋占角谜题 ]]></title>
<link>http://www.matrix67.com/blog/archives/3470</link>
<content><![CDATA[ 
		<p>    黑白棋是我最喜欢的棋类游戏之一。它的规则非常简单，但变化也极其丰富，有着“学会一分钟，精通一世功”的称号。从红白机时代开始，我就非常迷恋黑白棋游戏；现在，每入手一款电子产品，我都会先给它装上黑白棋游戏。最近我在看一些与黑白棋有关的资料，打算系统研究一下黑白棋。<br>
    和围棋一样，黑白棋也遵循着“金角银边草肚皮”的金科玉律，因为四个角上的棋子是永远也不会被吃掉的。因此，如何领先对手占据更多的角，成为了游戏制胜的关键。在上世纪 80 年代，有一种非常流行的解谜游戏叫做“占角谜题”。顾名思义，在一个占角谜题中，你的目标就是在规定的步数内占领其中一个角。下面我选择了六个经典的占角谜题，题目下方的“Black in 2”就表示黑棋先走并在两步内占据一个角。如果你经常跟电脑玩黑白棋的话，估计你常常会无助于电脑在最后关头运用强大的边角判断能力下出的几步让你陷于无解之境的好棋。现在，报仇的机会来了——解决了这几个占角谜题后，你会发现自己也能掌握令对手感到无奈的边角判断能力。</p>
<p>  <img alt="image placeholder" >
<p><span id="more-3470"></span></p>
<p> <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 </p>
<p>  <img alt="image placeholder" >
<p>答案：<br>
Puzzle 1. 黑棋先走 a6 ，白棋不得不走 a7 ，而这将会把 g7 翻过来，黑棋便占住 h8 。<br>
Puzzle 2. 白棋走 h4 ，同时进攻 a1 和 h8 两个角，黑棋无法兼顾。<br>
Puzzle 3. 黑棋应走 b2 。这样，白棋只有 a2 和 b7 可走，两种走法都会送给黑棋一个角。这告诉大家， b2 的位置也不是真的走不得。<br>
Puzzle 4. 黑棋走 a7 ，白棋不得不走 a8 。然后，黑棋走 g1 ，就能保证占住 a1 。<br>
Puzzle 5. 黑棋先走 g8 。不管白棋怎么走，黑棋再走 e8 ，就能保证占据 a8 。<br>
Puzzle 6. 白棋应走 b2 。若黑棋走 d1 ，则白棋走 c1 ，给黑棋造成二难困境；若黑棋走别的地儿，则白棋自己把 d1 填上，同样给黑棋造成二难困境（这种二难困境叫做 Stoner 陷阱）。</p>
			 ]]></content>
<pubDate>2010-07-01T14:38:22+00:00</pubDate>
<guid>http://www.matrix67.com/blog/archives/3470</guid>
<author><![CDATA[ 顾森 ]]></author>
</item>
<item>
<title><![CDATA[ 推荐视频：Portal 2中的新元素 ]]></title>
<link>http://www.matrix67.com/blog/archives/3476</link>
<content><![CDATA[ 
		<p>对于我来说，在刚刚结束的 E3 上，最激动人心的莫过于 Portal 2 的消息了。刚才， <a href="http://www.youtube.com/user/Valve">Valve 的 YouTube 账户</a>更新了六段 Portal 2 的宣传视频，里面介绍了六个振奋人心的新元素；我把它们传到土豆网上了，方便大家无障碍观看。</p>
<p> <br>
<strong>Aerial Faith Plate</strong></p>
<p><embed src="http://www.tudou.com/v/VsbFmIqNZGM" type="application/x-shockwave-flash" allowscriptaccess="always" allowfullscreen="true" wmode="opaque" width="630" height="380"></embed></p>
<p><span id="more-3476"></span><br>
 <br>
<strong>Excursion Funnel</strong></p>
<p><embed src="http://www.tudou.com/v/ruO-xOtYxvs" type="application/x-shockwave-flash" allowscriptaccess="always" allowfullscreen="true" wmode="opaque" width="630" height="380"></embed></p>
<p> <br>
 <br>
<strong>Thermal Discouragement Beam</strong></p>
<p><embed src="http://www.tudou.com/v/Drl9rWUVqUo" type="application/x-shockwave-flash" allowscriptaccess="always" allowfullscreen="true" wmode="opaque" width="630" height="380"></embed></p>
<p> <br>
 <br>
<strong>Pneumatic Diversity Vent</strong></p>
<p><embed src="http://www.tudou.com/v/l0EvxGGlzV8" type="application/x-shockwave-flash" allowscriptaccess="always" allowfullscreen="true" wmode="opaque" width="630" height="380"></embed></p>
<p> <br>
 <br>
<strong>Repulsion Gel</strong></p>
<p><embed src="http://www.tudou.com/v/tZWWKZSFoCo" type="application/x-shockwave-flash" allowscriptaccess="always" allowfullscreen="true" wmode="opaque" width="630" height="380"></embed></p>
<p> <br>
 <br>
<strong>Propulsion Gel</strong></p>
<p><embed src="http://www.tudou.com/v/ZS6rrB2HvxQ" type="application/x-shockwave-flash" allowscriptaccess="always" allowfullscreen="true" wmode="opaque" width="630" height="380"></embed></p>
<p> <br>
Portal 2 预计于 2011 年发售，届时会登陆 PS3、XBOX 360、PC 等各大平台。据称，游戏在 PS3 上的效果最好。到时候我很可能为了玩 Portal 2 去买一台 PS3 。<br>
 </p>
			 ]]></content>
<pubDate>2010-07-02T15:31:40+00:00</pubDate>
<guid>http://www.matrix67.com/blog/archives/3476</guid>
<author><![CDATA[ 顾森 ]]></author>
</item>
<item>
<title><![CDATA[ 《新知客》趣题专栏 2010.07 ]]></title>
<link>http://www.matrix67.com/blog/archives/3485</link>
<content><![CDATA[ 
		<p>从本月起，我开始在《新知客》杂志上主持一个趣题栏目。每月杂志发行后，我将在 Blog 上同步更新。</p>
<p> <br>
<strong>推理：</strong><br>
1. 老王熬夜工作到凌晨 2 点多时，实在不行了，倒在床上就开始呼呼大睡。睡觉前他看了一下闹钟，发现了一件有趣的事情——时钟上的时针和分针正好重合在了一起。早晨 8 点多时，老王被闹钟闹醒。他看了一下闹钟，又发现了一件有意思的事——此时时钟上的时针和分针正好指向完全相反的方向。老王究竟睡了多久呢？不足 6 个小时， 6 个多小时，还是正好 6 个小时？</p>
<p>2. 小 A 、小 B 和小 C 竞选推理协会的会长，有 99 个人参与了投票（当然，三位候选人是不能参与投票的）。唱票后，三位候选人惊奇地发现，每个人各得了 33 票。为了分出胜负，小 A 提议，每个投票人都选出自己心目中的“第二人选”。巧合的是，第二轮投票之后，三个人又是各得 33 票。接下来该怎么办呢？小 A 注意到了投票的人数是奇数，于是想到了一个一定能决出胜负的投票方案：所有投票人先在小 B 和小 C 当中进行投票，获胜者再和小 A 进行 PK 。这时，小 B 突然站出来反对：这种方案是不公平的，这对小 A 明显更有利一些。小 B 的说法对吗？</p>
<p><span id="more-3485"></span><br>
<strong>计算：</strong></p>
<p>1. 周长相等的正三角形和正六边形，面积之比是多少？</p>
<p>2. 平面上有 n 个红点和 n 个蓝点，你需要把它们一红一蓝地配成 n 对，并用线段把每一对点连接起来。证明，总存在一种配对方案，使得所有连线都不交叉。</p>
<p><strong>填图：</strong></p>
<p>1. 把图中的棋盘划分为一个一个的矩形，使得每个矩形中恰好包含一个数字，而这个数字恰好等于这个矩形中的小方格数。</p>
<p><img alt="image placeholder" >
<p>2. 把 1 到 9 这九个数字填入方格中，使得每行三个数之和等于这一行右边的数，每列三个数之和等于这一列下方的数。</p>
<p><img alt="image placeholder" >
<p> <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 </p>
<p><strong>推理：</strong><br>
1. 老王熬夜工作到凌晨 2 点多时，实在不行了，倒在床上就开始呼呼大睡。睡觉前他看了一下闹钟，发现了一件有趣的事情——时钟上的时针和分针正好重合在了一起。早晨 8 点多时，老王被闹钟闹醒。他看了一下闹钟，又发现了一件有意思的事——此时时钟上的时针和分针正好指向完全相反的方向。老王究竟睡了多久呢？不足 6 个小时， 6 个多小时，还是正好 6 个小时？</p>
<p>答案：正好 6 个小时。在这 6 个小时里，时针转了一个半圈，分针转了 6 个整圈，因此两针正好指向了相反的方向。</p>
<p> <br>
 <br>
2. 小 A 、小 B 和小 C 竞选推理协会的会长，有 99 个人参与了投票（当然，三位候选人是不能参与投票的）。唱票后，三位候选人惊奇地发现，每个人各得了 33 票。为了分出胜负，小 A 提议，每个投票人都选出自己心目中的“第二人选”。巧合的是，第二轮投票之后，三个人又是各得 33 票。接下来该怎么办呢？小 A 注意到了投票的人数是奇数，于是想到了一个一定能决出胜负的投票方案：所有投票人先在小 B 和小 C 当中进行投票，获胜者再和小 A 进行 PK 。这时，小 B 突然站出来反对：这种方案是不公平的，这对小 A 明显更有利一些。小 B 的说法对吗？</p>
<p>答案：小 B 是对的——在新的方案下，小 A 将必胜！为了说明这一点，我们把投票人的偏好分成六类：</p>
<p>(1) A &gt; B &gt; C<br>
(2) A &gt; C &gt; B<br>
(3) B &gt; A &gt; C<br>
(4) B &gt; C &gt; A<br>
(5) C &gt; A &gt; B<br>
(6) C &gt; B &gt; A</p>
<p>    由于第一轮投票是平局，因此 (1) (2) 的总人数、 (3) (4) 的总人数、 (5) (6) 的总人数各占 1/3 。也就是说，如果要在小 B 和小 C 之间进行 PK 的话，就全看 (1) 和 (2) 的人数谁多谁少了。不妨假设 (1) 的人数比 (2) 多（这样的话小 B 将在 PK 中获胜，并与小 A 对决），那么 (4) 的人数就一定比 (3) 多，否则 (2) (4) 的总人数将不足 1/3 ，小 C 不可能在第二轮投票中与小 A 和小 B 战平。类似地， (5) 的人数就一定比 (6) 多，否则 (3) (5) 的总人数将不足 1/3 ，小 A 不可能在第二轮投票中与小 B 、小 C 战平。既然 (5) 的人数比 (6) 多，那么在小 A 和小 B 之间进行最后的角逐，小 A 一定会获胜。<br>
    对于 (2) 的人数比 (1) 多的情况，类似的分析可以推出同样的结果来。</p>
<p> <br>
 <br>
<strong>计算：</strong></p>
<p>1. 周长相等的正三角形和正六边形，面积之比是多少？</p>
<p>答案：把它们都剖分成完全相同的小正三角形，很快就能看出它们的面积比是 2:3 。</p>
<p><img alt="image placeholder" >
<p> <br>
 <br>
2. 平面上有 n 个红点和 n 个蓝点，你需要把它们一红一蓝地配成 n 对，并用线段把每一对点连接起来。证明，总存在一种配对方案，使得所有连线都不交叉。</p>
<p>答案：考虑所有可能的配对方案，选择所有连线的长度总和最小的那一种方案。下面我们证明，这种方案是满足要求的。假如在这种方案中有某四个点 A 、 B 、 C 、 D ，其中红点 A 和蓝点 B 相连，红点 C 和蓝点 D 相连，两条连线交于点 O 。那么，把它们改成 A 与 D 相连， B 与 C 相连，则由三角形两边之和大于第三边， AB + CD = (AO + DO) + (BO + CO) &gt; AD + BC，说明连线的总长度变得更短了，由此产生矛盾。</p>
<p><img alt="image placeholder" >
（图已更正）</p>
<p> <br>
 <br>
<strong>填图：</strong></p>
<p>1. 把图中的棋盘划分为一个一个的矩形，使得每个矩形中恰好包含一个数字，而这个数字恰好等于这个矩形中的小方格数。</p>
<p><img alt="image placeholder" >
<p>答案：</p>
<p><img alt="image placeholder" >
<p> <br>
 <br>
2. 把 1 到 9 这九个数字填入方格中，使得每行三个数之和等于这一行右边的数，每列三个数之和等于这一列下方的数。</p>
<p><img alt="image placeholder" >
<p>答案：</p>
<p><img alt="image placeholder" >
			 ]]></content>
<pubDate>2010-07-08T15:16:38+00:00</pubDate>
<guid>http://www.matrix67.com/blog/archives/3485</guid>
<author><![CDATA[ 顾森 ]]></author>
</item>
<item>
<title><![CDATA[ 别用 pi 了，用 tau 吧！ ]]></title>
<link>http://www.matrix67.com/blog/archives/3492</link>
<content><![CDATA[ 
		<p>    虽说数学家们早已注意到了把圆周率定义为周长和<strong>直径</strong>之比的种种不爽，但在论文中正式地提出了这一点还是造成了不小的轰动。 2001 年， Bob Palais 在 The Mathematical Intelligencer 杂志上发表了一篇题为 <a href="http://www.math.utah.edu/~palais/pi.html">pi is wrong</a> 的论文，正式对这一历史错误宣战。不知为什么，最近这篇论文来了个回锅热，重新在网络上火了起来。人们普遍赞同 Bob Palais 的观点：圆周率的定义完全是一个历史错误，圆周率本应该为周长与<strong>半径</strong>之比的，因为半径才是圆的核心要素。<br>
    如果 pi 真的等于 6.28 ，很多公式都可以变得更美妙。圆的周长公式将变成 pi * r ，圆的面积公式将变成 (1/2)pi * r^2 ，这和其它图形的面积公式保持着某种不可言传的一致性。而 360 度转化为弧度将会正好是一个 pi ，于是一连串数学公式和定理将会变得更优雅： sin(x) 将等于 sin(x + pi) ， n! 将近似于 √<span style="text-decoration:overline">pi * n</span> * (n / e)^n，而史上最美的数学公式其实本该是 e^(pi * i) = 1 。</p>
<p>    但是，考虑到历史原因， pi 当然不能“刷”地一下通通变成 6.28 。为了逐渐将 pi 引入正轨， Michael Hartl 建立了网站 <a href="http://tauday.com/">tauday.com</a> ，呼吁人们用希腊字母 tau (τ) 来表示“正确的”圆周率 C/r = 6.2831853… 。 tau 不但和 pi 长得很像，还可以谐音一个 turn ，而本身又不代表别的常数，因此它似乎是新 pi 所用记号的最佳选择。 Michael Hartl 建议大家以后在写论文时，用一句“为方便起见，定义 tau = 2 * pi ”开头，推广这一更为科学的圆周率记号。</p>
			 ]]></content>
<pubDate>2010-07-09T15:29:45+00:00</pubDate>
<guid>http://www.matrix67.com/blog/archives/3492</guid>
<author><![CDATA[ 顾森 ]]></author>
</item>
<item>
<title><![CDATA[ Boolean Hair Logic ]]></title>
<link>http://www.matrix67.com/blog/archives/3505</link>
<content><![CDATA[ 
		<p><img alt="image placeholder" >
<p>来源：<a href="http://www.toothpastefordinner.com/index.php?date=071310">http://www.toothpastefordinner.com/index.php?date=071310</a></p>
			 ]]></content>
<pubDate>2010-07-14T23:07:13+00:00</pubDate>
<guid>http://www.matrix67.com/blog/archives/3505</guid>
<author><![CDATA[ 顾森 ]]></author>
</item>
<item>
<title><![CDATA[ 惊人的答案：平均要取多少个(0,1)中的随机数才能让和超过1 ]]></title>
<link>http://www.matrix67.com/blog/archives/3507</link>
<content><![CDATA[ 
		<p>    数学常数最令人着迷的就是，它们常常出现在一些看似与之毫不相干的场合中。 随便取一个 0 到 1 之间的数，再加上另一个 0 到 1 之间的随机数，然后再加上一个 0 到 1 之间的随机数⋯⋯直到和超过 1 为止。一个有趣的问题：平均需要加多少次，才能让和超过 1 呢？答案是 e 次。</p>
<p>  <img alt="image placeholder" >
<p><span id="more-3507"></span> <br>
    为了证明这一点，让我们先来看一个更简单的问题：任取两个 0 到 1 之间的实数，它们的和小于 1 的概率有多大？容易想到，满足 x+y&lt;1 的点 (x, y) 占据了正方形 (0, 1)×(0, 1) 的一半面积，因此这两个实数之和小于 1 的概率就是 1/2 。类似地，三个数之和小于 1 的概率则是 1/6 ，它是平面 x+y+z=1 在单位立方体中截得的一个三棱锥。这个 1/6 可以利用截面与底面的相似比关系，通过简单的积分求得：

       ∫(0..1) (x^2)*1/2 dx = 1/6

  <img alt="image placeholder" >
<p> <br>
    可以想到，四个 0 到 1 之间的随机数之和小于 1 的概率就等于四维立方体一角的“体积”，它的“底面”是一个体积为 1/6 的三维体，在第四维上对其进行积分便可得到其“体积”</p>
<p>       ∫(0..1) (x^3)*1/6 dx = 1/24</p>
<p>    依此类推， n 个随机数之和不超过 1 的概率就是 1/n! ，反过来 n 个数之和大于 1 的概率就是 1 – 1/n! ，因此加到第 n 个数才刚好超过 1 的概率就是</p>
<p>       (1 – 1/n!) – (1 – 1/(n-1)!) = (n-1)/n!</p>
<p>    因此，要想让和超过 1 ，需要累加的期望次数为</p>
<p>       ∑(n=2..∞) n * (n-1)/n! = ∑(n=1..∞) n/n! = e</p>
<p> <br>
来源：<a href="http://www.mostlymaths.net/2010/08/and-e-appears-from-nowhere.html">http://www.mostlymaths.net/2010/08/and-e-appears-from-nowhere.html</a></p>
			 ]]></content>
<pubDate>2010-08-08T13:16:47+00:00</pubDate>
<guid>http://www.matrix67.com/blog/archives/3507</guid>
<author><![CDATA[ 顾森 ]]></author>
</item>
<item>
<title><![CDATA[ 不走寻常路：寻找线段的中点 ]]></title>
<link>http://www.matrix67.com/blog/archives/3513</link>
<content><![CDATA[ 
		<p>    一名初三的学生刘小坤给我提出了这样的问题：</p>
<blockquote><p>给你一条线段 AB ，再预先给你一条平行于线段 AB 的直线 l 。请只用直尺作出线段 AB 的中点。<br>
 <br>
  <img alt="image placeholder" >
 
</p></blockquote>
<p>    你能想到该怎么做吗？</p>
<p><span id="more-3513"></span></p>
<p> <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 </p>
<p>  <img alt="image placeholder" >
<p>    在直线 l 的另一侧任取一点 C 。连接 AC 、 BC ，分别与 l 交于点 D 、点 E 。连接 AE 、 BD ，两线段交于点 F 。则 CF 的延长线与 AB 的交点 H 就是 AB 的中点。<br>
    由于 △CDG 与 △CAH 、 △CEG 与 △CBH 是两对相似三角形，因此我们有</p>
<p>      AH:DG = AC:DC = BC:EC = BH:EG</p>
<p>    另外，由于 △AFH 和 △EFG 、 △BFH 与 △DFG 又是两对相似三角形，因此我们还有</p>
<p>      AH:EG = FH:FG = BH:DG</p>
<p>    注意到 AH:DG = BH:EG 以及 AH:EG = BH:DG 同时成立，等式两边对应相乘便可得到 AH = BH 。</p>
<p> <br>
    且慢，这只是一道热身题而已，有意思的现在才真正开始：</p>
<blockquote><p>给你一条线段 AB ，请你用直尺和圆规作出线段 AB 的中点，不过在作图过程中你只能用一次圆规。</p></blockquote>
<p>    这次你还能想出办法吗？</p>
<p> <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 </p>
<p>   <img alt="image placeholder" >
<p>    以 B 为圆心， AB 为半径作圆。延长 AB 与圆交于 C ， AC 就成了圆的一条直径。过圆心 B 随便作另一条直径 DE ，于是四边形 ADCE 就是一个矩形。由于 AD∥EC ，因此借助前面讲过的方法我们能仅用直尺作出 AD 的中点 F ；类似地由于 AE∥DC ，因此我们也能找出 AE 的中点 G ；显然， FG 的连线与 AB 的交点 H 就是 AB 的中点。</p>
<p> <br>
    好了，如果前两个问题你都想到了的话，请准备好接受终极挑战吧：</p>
<blockquote><p>给你一条线段 AB ，请你只用圆规作出线段 AB 的中点。</p></blockquote>
<p> <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 </p>
<p>   <img alt="image placeholder" >
<p>    以 B 为圆心， AB 为半径作圆。以 AB 为长度，从 A 点出发，在圆周上连续截取三次，得到点 C 。这个点 C 显然满足 AC ＝ 2AB ，它相当于是倍长 AB 后得到的点。现在，以 A 为圆心， AB 为半径作圆，再以 C 为圆心， AC 为半径作圆，两圆交于点 D 。以 D 为圆心， AD 为半径作圆，与 AB 交于点 E 。 E 就是 AB 的中点。<br>
    这是因为， △CAD 与 △DAE 是一对相似三角形（它们都是以 ∠A 为底角的等腰三角形），而 AD 是 AC 的一半，因此 AE 就是 AD 的一半。而 AD 是等于 AB 的，因此 AE 也就是 AB 的一半了。<br>
 </p>
			 ]]></content>
<pubDate>2010-08-08T14:12:53+00:00</pubDate>
<guid>http://www.matrix67.com/blog/archives/3513</guid>
<author><![CDATA[ 顾森 ]]></author>
</item>
<item>
<title><![CDATA[ 新闻二则：P≠NP有望得证 魔方问题告破 ]]></title>
<link>http://www.matrix67.com/blog/archives/3520</link>
<content><![CDATA[ 
		<p>    昨天的消息：一位 HP 的研究员 Vinay Deolalikar 宣称自己证明了 <a href="http://www.matrix67.com/blog/archives/105">NP 问题</a>，得出了 P≠NP 的结论。 P 是否等于 NP ，这是计算机科学领域中最困难的问题之一，也是意义最深远的问题之一，长期以来一直备受争议。如果这个问题获得解决，将会在各个科学领域中引起轰动。 Vinay Deolalikar 的整个证明有 100 多页，详细的论文可以在这里看到：</p>
<p>      <a href="http://www.win.tue.nl/~gwoegi/P-versus-NP/Deolalikar.pdf">http://www.win.tue.nl/~gwoegi/P-versus-NP/Deolalikar.pdf</a></p>
<p>    Stanford 的博士后 <a href="http://twitter.com/random_walker">randomwalker</a> 看完证明后表示，很多迹象表明，<a href="http://news.ycombinator.com/item?id=1586091">这个证明很有可能是正确的</a>。</p>
<p>     －－－－－－－－－－－－－－－－－－－－－－－－－－－</p>
<p>    今天早晨的消息： Morley Davidson 、 John Dethridge 、 Herbert Kociemba 和 Tomas Rokicki 宣称，他们已经利用计算机，完美地解决了魔方问题。他们验证了，任何一种魔方的初始状态都可以在 20 步以内解出。他们将 43,252,003,274,489,856,000 种初始状态分为了 2,217,093,120 组，再利用对称性和集合覆盖将规模缩小到了 55,882,296 组。他们的程序可以在 20 秒左右求解出一组问题的解法，最终利用 Google 提供的强大的计算机，彻底解决了魔方问题。<br>
    利用组合数学，我们能够证明，存在一种魔方初始状态，它需要至少 18 步才能解决。 1995 年， Michael Reid 找到了一种最少需要 20 步才能获解的魔方初始状态，因而将魔方问题的下界提高到了 20 。此后，数学家们猜想，任意给定一个魔方的初始状态，最多 20 步就能解决。 2008 年， Tomas Rokicki 和 John Welborn 证明了，任意一个魔方初始状态都可以在 22 步以内解决。 2010 年 7 月，这个上界终于降低到了 20 ，从而完成了对魔方最优解问题数十年来的探索。<br>
    详细的研究成果见这里：</p>
<p>      <a href="http://www.cube20.org/">http://www.cube20.org/</a><br>
 </p>
			 ]]></content>
<pubDate>2010-08-10T07:36:38+00:00</pubDate>
<guid>http://www.matrix67.com/blog/archives/3520</guid>
<author><![CDATA[ 顾森 ]]></author>
</item>
<item>
<title><![CDATA[ 选举制度的学问 ]]></title>
<link>http://www.matrix67.com/blog/archives/3537</link>
<content><![CDATA[ 
		<p>    完美的制度是永远不存在。我们可能会产生一种觉得某某制度很完美的错觉，这只是因为我们习惯了它而已。若把这个制度拿出来仔细琢磨琢磨，你会发现它还存在太多的问题。<br>
    我们习惯了“多数票当选”的选举制度。每个投票者把自己手中的票投给其中一位候选人，得票数最多的候选人即获胜，因为他的支持者最多。这看上去似乎挺合理。但在实际生活中，这种选举制度并不见得总是合理的——得票数最多的候选人很可能并不是大家喜欢的候选人。有时候，获胜的候选人竟会是最不受欢迎的那个人。</p>
<p>    假设有 A 、 B 、 C 、 D 四位候选领导人，其中 A 、 B 、 C 三人的思想、观点、作风都不相上下；候选人 D 则观点偏激、做事极端，他故意与前面三个人作对，一心想在竞选中获胜。虽然 A 、 B 、 C 三人大受好评，但他们却处于一个非常不利的地位：由于得票最多的候选人获胜，三人内部的激烈竞争很可能会使他们都输掉竞选。我们假设只有 34% 的人支持候选人 D ，而另外 66% 的候选人都在 A 、 B 、 C 三人之间犹豫不决。最终， A 、 B 、 C 每个人都只得到 22% 左右的票，候选人 D 以绝对的优势获得胜利。但请注意，候选人 D 却是最不受欢迎的那个人。如果按照投票淘汰制进行选举，候选人 D 将在第一轮就被淘汰，因为最不喜欢他的人达到了 66% 。<br>
    有人会说，那么干脆以后选举都搞投票淘汰制，每个投票者每轮都选出一位仍未淘汰的人中自己最讨厌的，问题不就解决了吗？这样也有问题——对称地，如果 A 、 B 、 C 三人都很讨厌，投票者会在他们三人之间纠结， D 却反而处于了最不利的地位。因此，要想彻底避免这种问题，我们还得想点儿别的着。</p>
<p><span id="more-3537"></span><br>
 </p>
<p style="clear:both"> </p>
<p>   <img alt="image placeholder" >
<p>    澳大利亚大选即将到来，极具特色的澳大利亚选举制度也再度成为人们热议的话题。<br>
    容易看出，传统的选举制度之所以会出现前面提到的问题，根本原因就在于这“一票定乾坤”确实值得商讨。澳大利亚的选举制度从根本入手，用偏好投票制 (preferential voting) 代替了传统的多数票制 (plurality voting) 。选民必须将所有候选人从优到劣排序，在选票上用数字 1, 2, 3, ⋯⋯进行编号。统计选票时，首先按每位选民选出的第一候选人进行计票。<br>
    如果某位候选人的得票数过半，那么毫无疑问他就是最受欢迎的人，他将在此次选举中胜出。若没有人的得票数过半，则此时得票最少的人将被淘汰，多余出来的票将被再次统计，重新分给选票上的第二候选人。如果此时仍然没有得票过半的候选人，则继续淘汰掉得票最少的候选人，他的选票将继续分给各选票上的下一个候选人。由于总的票数不变，剩余的候选人却越来越少，因此总有一个时候会有候选人票数过半。一旦出现了这样的情况，他就获胜了，选举便到此结束，因为即使程序继续走下去，他也再不可能被打败了。</p>
<p>    容易验证，澳大利亚的选举制度能够解决之前我们提到的传统选举制度的弊端。但也正如本文一开始提到的，完美的制度是永远不存在的，即使看似完备的澳大利亚选举制或许也充斥着种种不足。事实上， <a href="http://en.wikipedia.org/wiki/Arrow's_impossibility_theorem">Arrow 不可能性定理</a>告诉我们，满足一定条件的选票制度理论上是不存在的。不过，借助一些小小的数学技巧，便可让人民得到一个更好的政府，这才是澳大利亚选举制真正令我们感动的。</p>
<p style="clear:both"> </p>
<p>参考资料：<a href="http://www.mathteacherctk.com/blog/2010/08/are-australian-elections-fair-as-claimed">http://www.mathteacherctk.com/blog/2010/08/are-australian-elections-fair-as-claimed</a></p>
			 ]]></content>
<pubDate>2010-08-15T01:47:26+00:00</pubDate>
<guid>http://www.matrix67.com/blog/archives/3537</guid>
<author><![CDATA[ 顾森 ]]></author>
</item>
<item>
<title><![CDATA[ 献给所有单身的数学Geek ]]></title>
<link>http://www.matrix67.com/blog/archives/3547</link>
<content><![CDATA[ 
		<p>  <img alt="image placeholder" >
 </p>
			 ]]></content>
<pubDate>2010-08-16T00:05:35+00:00</pubDate>
<guid>http://www.matrix67.com/blog/archives/3547</guid>
<author><![CDATA[ 顾森 ]]></author>
</item>
<item>
<title><![CDATA[ 《新知客》趣题专栏 2010.08 ]]></title>
<link>http://www.matrix67.com/blog/archives/3549</link>
<content><![CDATA[ 
		<p>目前，我正在《新知客》杂志上主持一个趣题栏目。每月杂志发行后，我将在 Blog 上同步更新。点击 <a href="http://www.matrix67.com/blog/archives/tag/%E3%80%8A%E6%96%B0%E7%9F%A5%E5%AE%A2%E3%80%8B%E8%B6%A3%E9%A2%98">这里</a> 可以查看往期题目。</p>
<p><strong>推理</strong><br>
1. 下一个图形是什么？<br>
<img alt="image placeholder" >
<p> <br>
2. 小 A 和小 B 玩游戏。小 A 取出一副扑克牌并去掉大小王，剩下红色的牌和黑色的牌各 26 张。洗好牌后，小 A 依次翻开每一张牌，让小 B 看到牌的颜色。小 B 可以在任意时刻打断小 A ，并打赌“下一张牌是红色”。如果下一张牌真是红色，小 A 给小 B 一块钱；如果下一张牌是黑色的，小 B 输给小 A 一块钱。注意，小 B 必须要在某个时刻下赌注，并且机会只有一次；如果他一直没打断小 A ，则默认他赌最后一张牌是红色。<br>
小 B 的最佳策略是什么？在这种策略下，他有多大的概率获胜？</p>
<p><span id="more-3549"></span><br>
 <br>
<strong>计算</strong><br>
1. 一张长 10 厘米、宽 9 厘米的长方形纸张可以裁剪成两个宽 1 厘米的、一模一样的螺旋形纸带。那么，每个螺旋形纸带的周长是多少厘米？</p>
<p><img alt="image placeholder" >
<p> <br>
2. 广场上站着 99 个间谍，间谍与间谍之间的距离互不相等。每个间谍都盯着离自己最近的那个间谍看。证明：总存在一个没被人盯着的间谍。</p>
<p> <br>
 <br>
<strong>填图</strong><br>
1. 24 根火柴棒摆成了如图所示的形状。这些火柴棒组成了大大小小一共 14 个正方形。请您：</p>
<p><img alt="image placeholder" >
<p>(1) 去掉两根火柴棒，使得图中只剩下 7 个正方形<br>
(2) 去掉三根火柴棒，使得图中只剩下 4 个正方形<br>
(3) 去掉四根火柴棒，使得图中只剩下 2 个正方形</p>
<p> <br>
2. 像左图中的示例那样，只用两种不同长度的线段，把图中的 14 个点两个两个一对地连接起来。<br>
<img alt="image placeholder" >
<p> <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 </p>
<p><strong>推理</strong></p>
<p>1. 下一个图形是什么？<br>
<img alt="image placeholder" >
<p> <br>
答案：<br>
<img alt="image placeholder" >
<p>这些图形分别是字母 A 到 J 的“轮廓”——假设我们在从 A 到 J 的每个字母外面拉上一圈橡皮筋，松手之后橡皮筋就依次变成了图中的这些形状。</p>
<p><img alt="image placeholder" >
<p> <br>
 <br>
2. 小 A 和小 B 玩游戏。小 A 取出一副扑克牌并去掉大小王，剩下红色的牌和黑色的牌各 26 张。洗好牌后，小 A 依次翻开每一张牌，让小 B 看到牌的颜色。小 B 可以在任意时刻打断小 A ，并打赌“下一张牌是红色”。如果下一张牌真是红色，小 A 给小 B 一块钱；如果下一张牌是黑色的，小 B 输给小 A 一块钱。注意，小 B 必须要在某个时刻下赌注，并且机会只有一次；如果他一直没打断小 A ，则默认他赌最后一张牌是红色。<br>
小 B 的最佳策略是什么？在这种策略下，他有多大的概率获胜？</p>
<p>答案：乍看上去，小B似乎有很多方法能保证他的获胜概率大于 50% 。比方说，他可以等到黑牌都翻完了时赌下一张牌是红色。不过别忘了，黑牌先翻完不是总能发生的。如果红色的牌先翻完，他就必输无疑了。因此，采取这种策略并不会增加小 B 获胜的概率。<br>
事实上，这是一个完全公平的游戏，小 B 没有所谓的“最佳策略”。小 B 的任何一种策略效果都完全一样—— 50% 的概率获胜， 50% 的概率输掉。为了证明这一点，让我们来考虑这场赌博游戏的一个修改版：小 A 把牌一张一张地翻开，小 B 可以在任何时候打断小 A ，并赌最后一张牌是红色。显然，在剩下的牌里面，第一张是红色与最后一张是红色的概率完全相同。因此，把原游戏中的策略应用到新的游戏中来，获胜的概率不变。但很容易看出，新规则下的游戏是一个非常无聊的游戏，因为不管小 B 用什么策略，获胜的概率总是 50% ——最后一张牌是红色，小 B 就赢；最后一张牌是黑色，小 B 就输。</p>
<p> <br>
 <br>
<strong>计算</strong></p>
<p>1. 一张长 10 厘米、宽 9 厘米的长方形纸张可以裁剪成两个宽 1 厘米的、一模一样的螺旋形纸带。那么，每个螺旋形纸带的周长是多少厘米？</p>
<p><img alt="image placeholder" >
<p> <br>
答案： 92 厘米。</p>
<p><img alt="image placeholder" >
<p>我们可以用剪拼法把纸带的拐角“扳直”，并且保持它的周长和面积不变。这样的话，整个螺旋形纸带就可以看作是一个宽为 1 厘米的长条形纸带。既然整个长方形的面积是 90 平方厘米，那么其中一个纸带的面积就是 45 平方厘米，因而它的周长就是 (45+1)×2=92 厘米。</p>
<p> <br>
 <br>
2. 广场上站着 99 个间谍，间谍与间谍之间的距离互不相等。每个间谍都盯着离自己最近的那个间谍看。证明：总存在一个没被人盯着的间谍。</p>
<p>答案：考虑距离最近的两个间谍，显然他们俩正互相盯着。如果还有别人盯着他们俩中的任何一个，就表明有人同时被两个人盯着，因此必然存在另一个人没被人盯着；如果没有别人在盯这两个人，那么我们就可以去掉这两个人，这对其他人不会产生任何影响。注意到广场上的总人数是个奇数，因此如此继续下去，要么我们能在某一步找到一个没被盯着的人，要么最终就只剩下一个人，而他显然没有被任何人盯着。</p>
<p> <br>
 <br>
<strong>填图</strong></p>
<p>1. 24 根火柴棒摆成了如图所示的形状。这些火柴棒组成了大大小小一共 14 个正方形。请您：</p>
<p><img alt="image placeholder" >
<p>(1) 去掉两根火柴棒，使得图中只剩下 7 个正方形<br>
(2) 去掉三根火柴棒，使得图中只剩下 4 个正方形<br>
(3) 去掉四根火柴棒，使得图中只剩下 2 个正方形</p>
<p>答案：<br>
<img alt="image placeholder" >
（答案不唯一）</p>
<p> <br>
 <br>
2. 像左图中的示例那样，只用两种不同长度的线段，把图中的 14 个点两个两个一对地连接起来。<br>
<img alt="image placeholder" >
<p>答案：<br>
<img alt="image placeholder" >
			 ]]></content>
<pubDate>2010-08-16T20:16:34+00:00</pubDate>
<guid>http://www.matrix67.com/blog/archives/3549</guid>
<author><![CDATA[ 顾森 ]]></author>
</item>
<item>
<title><![CDATA[ 切片引理和两个意想不到的应用 ]]></title>
<link>http://www.matrix67.com/blog/archives/3565</link>
<content><![CDATA[ 
		<p>    考考你的立体几何直觉：用一系列间距相等的平行平面把一个球体切成厚度相同的薄片，这些薄片的侧面积都相等吗？</p>
<p>  <img alt="image placeholder" >
<span id="more-3565"></span></p>
<p>    是的。用平行平面把球体截成一个个切片，如果切片的厚度都相同，那么它们的侧面积也都相同，不管这些切片位于球体的什么位置。也就是说，切片的侧面积是与切片的厚度成正比的。推导这个惊人的结论非常适合用作定积分计算旋转体侧面积的练习题。圆的表达式是 √<span style="text-decoration:overline">1 – x^2</span> ，套用公式 ∫(a..b) 2π·f(x)·√<span style="text-decoration:overline">1 + f'(x)^2</span> dx 即可发现，整个积分被化简为 ∫(a..b) 2π dx ，因此薄片侧面积就是 2π(b-a) 。换句话说，半径为 1 的球里，一个切片的侧面积总等于 2π 乘以切片的厚度，两个切片的侧面积相等当且仅当它们的厚度相等。我查了半天，似乎这个经典结论并没有什么特别的名字，不妨就把它叫做“切片引理”吧。</p>
<p> <br>
  <img alt="image placeholder" >
<p>    有趣的是，这个定理在二维情形是不成立的。比方说，取半径 OA 的中点 M ，过 O 和 M 分别作半径的垂线。由于 OM 是 OB 的一半，可知 ∠AOB=60° ， ∠BOC=30° ，弧 AB 和弧 BC 明显不相等。</p>
<p> <br>
    最近，我看到了两个非常有趣的问题，它们与上述引理非常奇妙地联系在了一起。其中一个问题是：用圆规在平面上和在球面上各画一个圆，哪个圆大一些？考虑一些特殊情况，我们会非常惊奇地看到，两个圆竟然是一样大的！比方说，设球的半径为 1 ，取圆规两脚的距离为 r＝√<span style="text-decoration:overline">2</span> ，则在平面上圆规将画出一个半径为 √<span style="text-decoration:overline">2</span> 的圆，面积为 2π ；圆规将在球上画出赤道线，这个“圆”的面积就是一个球的表面积的一半，也是 2π 。</p>
<p>     <img alt="image placeholder" >
<p>    在一般情况下，这也是成立的。若圆规两脚间距为 r ，在半径为 1 的球上画圆，则它圈出来的面积就是一个高为 h 的切片侧面积，其中 h 满足 r^2 – h^2 = 1 – (1-h)^2 ，可解出 h = r^2/2 。根据前面的结论，切片的侧面积就是 r^2/2 的 2π 倍，即 πr^2 。</p>
<p> <br>
    另一个有趣的问题来自于一个经典的竞赛题目：用有限多个长度无限、宽度有限的“带状区域”能否覆盖整个平面？答案是否定的。我们下面说明，给你一些宽度和为 1 的纸带，你甚至不能覆盖一个半径为 1 的圆。因为，一个宽度为 w 的纸带与单位圆的公共面积不可能超过 2w ，因此所有纸带与圆的公共面积之和不可能超过 2 ；但圆面积为 π ，这个值远远比 2 大，结论也就证到了。<br>
    上述推理过程告诉我们，要想覆盖一个单位圆，需要一组宽度和至少为 π/2 的纸带，但很明显 π/2 这个下界还是太松了。事实上，为了覆盖一个单位圆，纸带的宽度和为 2 是充分且必需的。充分性很显然——把纸带从上到下一张一张平行地摆放就可以了。因此，接下来我们就着重研究它的必要性。如何说明一组覆盖单位圆的纸带，它们的宽度和至少为 2 呢？下面我们给出一个巨牛无比的诡异证明，它是我见到的又一个<a href="http://www.matrix67.com/blog/archives/58">把平面图形扩展到空间</a>之后立刻秒杀的问题。</p>
<p>     <img alt="image placeholder" >
<p>    把这个单位圆想象成是一个单位球中的过圆心的截面。我们把圆上的每一条纸带都投影到球的表面上。假如这个纸带的宽度是 w ，不管纸带在圆上的什么位置，它在球上的投影面积总是 2πw 。一组覆盖了整个单位圆的纸带，其投影必然也覆盖了整个球面；然而球面的总面积是 4π ，因此所有 w 之和至少为 2 才行。</p>
			 ]]></content>
<pubDate>2010-08-17T21:48:23+00:00</pubDate>
<guid>http://www.matrix67.com/blog/archives/3565</guid>
<author><![CDATA[ 顾森 ]]></author>
</item>
<item>
<title><![CDATA[ Futurama S06E10中的数学问题 ]]></title>
<link>http://www.matrix67.com/blog/archives/3570</link>
<content><![CDATA[ 
		<p>     <img alt="image placeholder" >
<p>    经典 Geek 动画 <a href="http://www.tv.com/futurama/show/249/summary.html">Futurama</a> 上周播出了第 6 季的第 10 集 <a href="http://www.tv.com/futurama/the-prisoner-of-benda/episode/1351678/summary.html">The Prisoner of Benda</a> 。在这一集中，教授 Farnsworth 发明了一种“心灵对换机”，它可以把两个人的思想互相对换，使得 A 的大脑跑进 B 的身体里，而 B 的大脑则跑到 A 的身体里。 Farnsworth 和 Amy 都想得到对方的身体，便成为了这台机器的第一对实验者。等到他们爽够了想换回来后， Farnsworth 却发现了一个严重的问题：已经互换过大脑的两个身体不能再次进行大脑对换操作。但这并不表示两个人完全没有希望回到自己的身体里—— Farnsworth 突然想到，或许可以用第三者作为一个临时的大脑储存空间，从而实现间接对换。正巧机器人 Bender 进了实验室，于是（身为 Amy 的） Farnsworth 和 Bender 又坐上了机器，这下 Farnsworth 的大脑便跑到 Bender 身体里了，而 Bender 的大脑则进了 Amy 的身体里。此时 Farnsworth 才意识到，引入<strong>一个</strong>第三者是不够的——再让（身为 Bender 的） Farnsworth 和（身为 Farnsworth 的） Amy 互换大脑，可以让 Farnsworth 恢复原状，但同时 Amy 的大脑会跑到 Bender 的身体里去；这样 Bender 和 Amy 的身体正好颠倒了，而他们却已不能再次使用机器。换句话说，要想恢复两个换位了的大脑，需要引入不止一个新的人。<br>
    但现在，问题已经变得更加复杂了——这下已经产生了三个大脑位置错乱的人。大家很容易联想到一个更一般的问题：给定 n 个人以及他们之前使用“心灵对换机”的记录，至少得引入多少个新的人，才能让所有人的大脑都“物归原主”呢？</p>
<p><span id="more-3570"></span><br>
（给大家上传一个无字幕版本）<br>
<embed src="http://www.tudou.com/v/5EgL_G7yva8/v.swf" type="application/x-shockwave-flash" allowscriptaccess="always" allowfullscreen="true" wmode="opaque" width="480" height="360"></embed><br>
  </p>
<p>    当然，这一集的结局是圆满的： 9 个大脑位置错乱的人，在两个新躯体的帮助下，用了 13 次对换，完成了还原的工作。编剧在剧中给出了一般情况下问题的答案：不管 n 是多少，不管现状有多混乱，引入两个新的身体总是足够的。在剧中，这个结论的证明过程写在了一个黑板上，编剧毫无顾忌地给了黑板一个特写——上面写的真的就是这个结论的证明（点击<a href="http://www.matrix67.com/blogimage_2010/201008233.png" target="_blank">这里</a>看大图）！</p>
<p>  <img alt="image placeholder" >
<p> <br>
    这一群编剧来头可不小，他们竟然个个都拿过数学学位。下面，就让我们一起来看看这群变态编剧的证明思路。这是一个构造性的证明。首先，让我们来考虑一种特殊的情形：</p>
<blockquote><p>躯体：1  2  3  4  5  6  …  k-1  k<br>
大脑：2  3  4  5  6  7  …   k   1</p></blockquote>
<p>    换句话说，这些人的脑子所在的位置正好“转了一圈”。我们引入 x 、 y 两个新的人，然后使用下面的策略（每行第 i 个数表示第 i 具躯体里装的谁的大脑，第一行是初始时的状态）：</p>
<blockquote><p>2  3  4  5  6  …  k   1  x  y  <br>
x  3  4  5  6  …  k   1  2  y<br>
x  y  4  5  6  …  k   1  2  3<br>
x  y  3  5  6  …  k   1  2  4<br>
x  y  3  4  6  …  k   1  2  5<br>
x  y  3  4  5  …  k   1  2  6<br>
… … …<br>
x  y  3  4  5  … k-1  1  2  k<br>
x  y  3  4  5  … k-1  k  2  1<br>
x  2  3  4  5  … k-1  k  y  1<br>
1  2  3  4  5  … k-1  k  y  x</p></blockquote>
<p>（谢谢大家提醒，已更正）</p>
<p>    容易验证，上面所有的对换操作均发生在原来的人与最后两个人之间，而且所有操作都没有重复。也就是说，不管初始时的混乱状态是怎么得到的，引入 x 和 y 之后，这 k 个大脑总能回到自己的身体里去，而 x 和 y 的位置则与初始时颠倒。注意到一个 1 到 n 的排列总能分解成若干个循环的乘积，对每个循环分别进行上述操作，最后如果需要的话就再把 x 和 y 互换一下，问题就解决了。</p>
			 ]]></content>
<pubDate>2010-08-23T21:13:24+00:00</pubDate>
<guid>http://www.matrix67.com/blog/archives/3570</guid>
<author><![CDATA[ 顾森 ]]></author>
</item>
<item>
<title><![CDATA[ 酷图分享：I ❤ Mathematics ]]></title>
<link>http://www.matrix67.com/blog/archives/3596</link>
<content><![CDATA[ 
		<p>和大家分享一张超级帅的 T 恤印花，数学各个分支领域中最深刻最神奇的结论在此汇聚一堂，组成了一个心形。<br>
你能从中认出多少个经典的数学研究对象和结论？</p>
<p><img alt="image placeholder" >
<p>来源：<a href="http://shirt.woot.com/Blog/ViewEntry.aspx?Id=14093">http://shirt.woot.com/Blog/ViewEntry.aspx?Id=14093</a></p>
			 ]]></content>
<pubDate>2010-08-28T23:29:54+00:00</pubDate>
<guid>http://www.matrix67.com/blog/archives/3596</guid>
<author><![CDATA[ 顾森 ]]></author>
</item>
<item>
<title><![CDATA[ 趣题：寻找隐藏的公共秘密 ]]></title>
<link>http://www.matrix67.com/blog/archives/3605</link>
<content><![CDATA[ 
		<p>    刚刚看到一道智力题，颇有些意思，说来给大家听听。我把题意稍微改了一下，原题中的 XX 侠是一个（不太容易解释的） lynch mob 。</p>
<p>    某座城市里发生了一起命案，已经确定凶手是 8 个嫌疑犯之一。经过很多可靠的调查，城南和城北的两名警探各自独立地把嫌疑犯的名单缩减到了两个人。现在，两名警探正在通电话，他们试图对比一下彼此的调查结果。如果他俩的嫌疑犯名单中正好只有一处重合，他们就能确定出凶手的身份了。但问题是，这座城市里有一个伸张正义、凌驾于法律之上的 XX 侠，他正在窃听两名警探的通话。如果他从中获知了凶手的身份，他将在警方实施拘捕之前先杀死凶手。<br>
    现在， XX 侠已经知道了那 8 个嫌疑犯是谁，但不知道两名警探各自都把目标锁定在了哪两个人上。这两名警探之前从未见过面，这通电话是他们俩第一次进行交流。他们俩能成功地确定凶手的身份，而又不让 XX 侠知道凶手是谁吗？<br>
    （当然，这里我们不允许使用那些基于数论的<a href="http://www.matrix67.com/blog/archives/1120">公钥加密体系</a>，不然题目就没啥意思了）</p>
<p><span id="more-3605"></span><br>
    显然，要想秘密地传递消息，他们事先必须得有一个只有他们俩才知道的秘密。这个问题有趣就有趣在，两名警探之间并不是没有公共的秘密——他们是有一个公共秘密的，而这个公共的秘密恰恰是他们此次通话的目的。让我们来看看下面这种方案是如何利用这个公共秘密的。</p>
<p>    为了便于叙述，我们把 8 个嫌疑犯用数字 1 到 8 编号。从 8 个嫌疑犯中选出 2 个人有 28 种情况，我们把这 28 种情况列成下表：</p>
<blockquote><p>(1,2)  (1,3)  (1,4)  (1,5)  (1,6)  (1,7)  (1,8)<br>
(3,4)  (2,4)  (2,3)  (2,6)  (2,5)  (2,8)  (2,7)<br>
(5,6)  (5,7)  (5,8)  (3,7)  (3,8)  (3,5)  (3,6)<br>
(7,8)  (6,8)  (6,7)  (4,8)  (4,7)  (4,6)  (4,5)</p></blockquote>
<p>    注意这个表的特点：每一列恰好都既无重复又无遗漏地包含了所有 8 个嫌疑犯。假设警探 A 的嫌疑犯名单是 (1,2) ，他就这样告诉警探 B ：</p>
<blockquote><p>我的嫌疑犯名单在第一列中。</p></blockquote>
<p>    如果 B 的嫌疑犯名单也在第一列中，他就立即知道两份名单是一模一样的。因此 B 可以说：</p>
<blockquote><p>洗洗睡吧，我们俩的嫌疑犯名单是一样的。</p></blockquote>
<p>    但若 B 的嫌疑犯名单不在第一列，对比一下自己手中的名单，他就能知道 A 的名单可能是第一列的哪两个了。比方说，如果 B 的两个嫌疑犯是 (2,7) ，他就知道了 A 的名单只可能是 (1,2) 或者 (7,8) 。接下来， B 就跟 A 说：</p>
<blockquote><p>我名单中的两个人或者都在 1、2、7、8 这一组里，或者都在 3、4、5、6 这一组里。</p></blockquote>
<p>    由于 A 的两个嫌疑犯是 (1,2) ，当 A 听了 B 的这句话后，立刻就意会了：其实 B 的那两个人是在前一组里面的。此时， A 、 B 之间就有了一个公共的秘密！有了这个公共的秘密， A 、 B 之间的秘密交流就容易多了。比如说， A 可以借助这个公共秘密，大胆地把自己手中的名单告诉 B ：</p>
<blockquote><p>我的名单是这一组中的前两个人。</p></blockquote>
<p>    或者更明确地说：</p>
<blockquote><p>我的名单是 (1,2) 或者 (3,4) 。</p></blockquote>
<p>    B 也能立即明白， A 指的是 (1,2) 。一对比 B 自己的名单，哦，原来凶手是 2 号。于是 B 就可以说：</p>
<blockquote><p>凶手是你的名单中编号大的那一个。</p></blockquote>
<p>    或者干脆说：</p>
<blockquote><p>凶手是 2 号或者 4 号。</p></blockquote>
<p>    由于 XX 侠不知道他们讨论的是前一组还是后一组， XX 侠就只能听天书了。</p>
<p> <br>
    知道答案后我不由得拍案叫绝，随后便开始静下心来仔细思考，究竟<strong>为什么</strong>两名警探能进行秘密通信？用于交流的公共秘密究竟是从哪里来的？其实，这个隐藏的公共秘密来源于双方的一个共识：我们两人的名单有交集。换句话说，如果 A 手中的名单是 (1,2) ， A 就知道了 B 的名单一定是(1,2), (1,3), … , (1,8), (2,3), (2,4), … , (2,8) 等 13 种情况中的一个。同时， B 也知道他自己的名单是这 13 种情况中的一个（因为他知道自己的名单是什么），因此这个信息就成了两人之间的一个隐藏着的公共秘密。<br>
    类似的情况还发生在很多其它的场合。比方说，有 1、2、3、4、5 五张牌，随机发给 A 和 B 两个人，每个人发两张牌。显然，他们俩互相之间都不知道对方手中的牌。现在，有一群人在旁边围观， A 能否把自己手中的牌告诉 B ，而不让围观者知道？这是有可能的，因为 A 、 B 两人享有一个别人都不知道的信息：他们知道对方手中没有什么牌！举个例子来说， A 手中的牌是 (1,2) ，那么 A 就知道 B 手中既没有 1 又没有 2。当然， B 自己肯定也知道这一点，因此他们就有了一个别人不知道的秘密信息。<br>
    怎样利用这个公共秘密呢？不妨像前面那样，把五选二的 10 种情况列成下表，其中每一列的 4 个数都不相同：</p>
<blockquote><p>(1,2)  (1,3)  (1,4)  (1,5)  (2,3)<br>
(3,4)  (2,5)  (3,5)  (2,4)  (4,5)</p></blockquote>
<p>    现在， A 只需要说自己的两张牌在哪一列就可以了。如果 A 说自己的牌在第一列，但 B 手中的牌是 (3,5) ，那么 B 就立即知道 A 的牌是 (1,2) 了，因为 A 不可能有 3。<br>
    继续深入的研究还能得出一些更有意思的结果：在打牌时，你甚至有办法把自己手中的牌秘密地告诉你的队友！</p>
			 ]]></content>
<pubDate>2010-09-03T07:35:19+00:00</pubDate>
<guid>http://www.matrix67.com/blog/archives/3605</guid>
<author><![CDATA[ 顾森 ]]></author>
</item>
<item>
<title><![CDATA[ 100个囚犯和灯泡的那些事儿（上） ]]></title>
<link>http://www.matrix67.com/blog/archives/3618</link>
<content><![CDATA[ 
		<p>    说有 100 个囚犯分别关在 100 间牢房里。牢房外有一个空荡荡的房间，房间里有一个由开关控制的灯泡。初始时，灯是关着的。看守每次随便选择一名囚犯进入房间，但保证每个囚犯都会被选中无穷多次。如果在某一时刻，有囚犯成功断定出所有人都进过这个房间了，所有囚犯都能释放。游戏开始前，所有囚犯可以聚在一起商量对策，但在此之后它们唯一可用来交流的工具就只有那个灯泡。他们应该设计一个怎样的协议呢？</p>
<p>    这个经典的问题在网上转载无数，题目描述被好事者们改得天花乱坠，甚至加进了“这盏灯永远有充足的能源供应”、“如果灯泡坏了或是电路出了故障会马上修好”等条件，剥掉了“算法问题”的外壳，填补了本不存在的漏洞，让更多的人动起了脑筋。在论坛上，每次贴出这个问题，总会引起一大群人的口水战。但很不幸的是，这个题目的来源至今仍是个谜。据目前的已知情况推测，这个题目最早来源于 Berkeley 的电气工程荣誉学会，时间大概是 2001 年。在 2002 年的 7 月， IBM 的 Ponder This 趣题栏目介绍这个题目，囚犯与灯泡一炮走红，随即遍布网络的各个角落。 2003 年， The Mathematical Intelligencer 杂志上发表了一篇题为 One hundred prisoners and a lightbulb 的论文，也让囚犯们正式引起了数学家们的关注。</p>
<p><span id="more-3618"></span><br>
    相信这个问题的答案大家已经非常熟悉了，不过这里我想用另一种更玄乎的、更具启发性的方式重新讲述一下答案。<br>
    不妨幻想房间中有一个盒子，盒子里可以容纳一个小球。灯泡亮就表示这个假想的盒子里有一个假想的小球，灯泡不亮就表示这个假想的盒子是空的。因此，用开关控制灯泡就相当于在盒子里放进小球或者取走小球。初始时，每个囚犯手中都有一个小球（当然这个小球也是囚犯们自己意淫出来的）。游戏开始前，囚犯们选择一个代表作为统计者。之后，每次有囚犯进入房间后，如果小球还在他手里，盒子恰恰又是空着的，他就把小球放进去；而统计者的任务就是收集小球——每次进入房间后，看到盒子里有小球就把它拿走。如果某个时刻统计者手中集齐了（包括它自己的） 100 个小球，就说明所有人都进过房间了。</p>
<p>    这个简单而巧妙的协议让人大为折服。然而，对这个问题的讨论并未结束，计算协议完成所需的期望时间、设计期望时间更短的协议，这都是非常有挑战性的问题，虽然它们已经背离了这个问题的初衷——协议的设计。<a href="http://www.ocf.berkeley.edu/~wwu/papers/100prisonersLightBulb.pdf">这篇论文</a>里详细总结了著名数学趣题论坛 [wu::forums] 上的牛人们对上述问题的探索。不过，即使回到协议设计的话题上，这个题目也还有戏可唱。<br>
    现在，让我们来考虑这个问题的一个加强版。上述策略能成功的原因是，大家都知道房间里的灯泡一开始是不亮的（盒子里一开始没有小球）。如果灯泡的初始状态并不确定，那就麻烦了：统计者收集了 100 个小球并不足以说明所有人都来过房间，而他有可能永远也等不到第 101 个小球。那么，这个问题还有解吗？在继续想下去之前，你不妨先思考一下。</p>
<p> <br>
    是的，这个问题仍然有解，而且办法和原来几乎一样，只是有一些非常巧妙的变通。此时，“小球模型”开始发挥作用了：在引入了一些更加复杂的因素后，比起开灯关灯，用“小球语言”来描述显得更直观易懂。<br>
    囚犯们仍然选出一个统计者，由他来完成收集小球的任务。只不过这一次，每个囚犯初始时都有两个（假想的）小球。每个囚犯来到房间后，如果发现盒子是空的，手中正好还有小球的话，他就在盒子里放一个小球。统计者仍然只负责把小球从盒子里取出来。什么时候统计者收集到了200个小球（包括自己的两个），他就知道所有人都来过了，因为如果还有人没进房间，他最多只能拿到 198 + 1 个小球。注意，这 200 个小球可能就是囚犯手中的 200 个小球，也有可能是囚犯手中的 199 个小球加上初始时房间里的小球。体会一下这个协议如何巧妙地解决了房间初始状态不确定的难题，真是越想越有味道。</p>
<p>    还不过瘾吗？现在与大家分享一个更强的加强版。<br>
    在以上协议中，只有一个人能知道所有人都来过房间。是否存在一个协议，使得最终可以产生两个人，他们都知道所有人都进过房间？如果存在这样的协议，给出一个来；如果不存在，证明之。为了方便思考，你可以暂时假设初始时房间的灯泡不亮。<br>
    不要轻易就认定这是不可能的。至少当 n = 2时，这样的协议明显存在！</p>
			 ]]></content>
<pubDate>2010-09-05T00:12:49+00:00</pubDate>
<guid>http://www.matrix67.com/blog/archives/3618</guid>
<author><![CDATA[ 顾森 ]]></author>
</item>
<item>
<title><![CDATA[ 100个囚犯和灯泡的那些事儿（下） ]]></title>
<link>http://www.matrix67.com/blog/archives/3630</link>
<content><![CDATA[ 
		<p>    即使灯泡的初始状态不定，当 n=2 时，两个人也能保证都知道对方进过房间。假设双方手中各有两个球，囚犯 A 总是试图把自己的小球放进盒子，囚犯 B 总是试图把小球取走。如果 B 拿到了 4 个小球，他就知道了 A 一定来过房间；而只要 A 放好的小球被拿走了， A 也知道 B 进过了房间。<br>
    但是，当 n&gt;2 时，不存在这样的协议，使得有两个人都能获知所有人都已进过房间。 Peter Winkler 的 Mathematical Puzzles: A Connoisseur’s Collection 一书中给出了这个结论的一个大致证明思路。<br>
    让我们考虑其中任何一个囚犯。我们假设他的策略是确定性的，他的下一步行动完全取决于之前看到的状态序列。假设在某一步，他看到的状态和上次离开房间时的状态相同，但他选择了改变状态。这时，你可以质问他，那你为啥不在上次就把状态改过来，偏偏要这次才去扳开关呢？看守完全有可能连续两次都是叫你进的房间，这样你不就浪费了一次进房间的机会了吗？因此，我们可以假设，当他进入房间时看见的状态和上次走的时候一样，他是不会去扳动开关的。<br>
    接下来，让我们假设在某一步，这个囚犯的策略是“不动开关，保留原状态”。那么，我们可以认为他以后就再也不会动那个开关了！因为在最坏情况下，他根本没有改变灯泡状态的机会！具体地说，若无视掉这个囚犯以后的行动，今后的房间状态序列里必然有一种状态将出现无穷多次，比方说状态“开”出现了无穷多次吧。那么在最坏的情况下，这个囚犯从此开始总是在开灯的时候进屋。而他在这一步没有变动开关，并且以后的每一步里他所看到的状态都将和上次看到的一样，因此以后他都不会变动开关了。</p>
<p><span id="more-3630"></span><br>
    因此，这名囚犯首次进入房间时的策略绝不可能是“不动开关”，因为这样他以后可能都没机会动开关了，没人会知道他来过房间。如果他的策略是“如果灯开着，就把它关掉”，那么由第一个引理，今后他看见关灯状态都不会去改变状态了，直到下次见到灯亮时才会有所行动。每次见到灯亮时，他有两种选择，把灯关掉，或者让它接着亮。如果选择关灯，他又要等到下次灯亮才会行动；如果不关灯的话，相当于他这次没做任何操作，今后就再也没法行动了。也就是说，他的整个策略无非是“关过多少多少次灯之后就不管了”。类似地，如果他首次进入房间时的策略是“如果灯关着，就把它打开”，同理可知他今后的策略限制在了“再开几次灯就不开了”。当然，首次进入房间的策略还可能是“无论状态如何，总是扳动开关”，不过实际情况一揭晓，他的策略也就立即归为了上述两种情况中的一种。<br>
    换句话说，每个人的策略都无外乎两种：只负责开 x 次灯，或者只负责关 x 次灯。当然，如果所有人都只开灯不关灯（或者只关灯不开灯），肯定是一点用处都没有。因此，无妨假设囚犯 A 负责开灯，囚犯 B 负责关灯。如果囚犯 C 也只负责开灯， A 永远不能分辨出 B 、 C 究竟是都完成了协议，还是都差最后一步；如果囚犯 C 只负责关灯， B 就成了那个被蒙在鼓里的人了。<br>
    也就是说，整个问题的唯一解法就是，其中一个人只负责关灯，另外所有人只负责开灯；或者其中一个人只负责开灯，另外所有人都只关灯。换句话说，我们的“统计者协议”其实是唯一的解法。</p>
<p> <br>
    在 Mathematical Puzzles: A Connoisseur’s Collection 一书中，我们有幸看到了这个问题的另一个更加有趣的变种，让囚犯们的难题继续活跃着人们的大脑。<br>
    还是 100 个囚犯，还是一个空房间，还是要求所有囚犯事先构造一个协议，能保证有人可以断定出所有人都来过房间。不过，这次不同的是，房间里有两个灯泡，分别由两个开关来控制（不妨假设初始时他们都是不亮的）。大家估计要说了，一个灯泡都能解决的事儿，用两个灯泡还不容易？嘿嘿，这次有一个附加的要求：所有人都必须遵循同一套策略。</p>
<p>    这些智力游戏不仅仅是思维的体操，它竟然有不少让人意想不到的实际应用。远在这个智力题诞生之前，就有一个几乎等价的分布式计算难题困扰着人们：假如一个程序有 n 个进程，它们操作的是同一段（不太宽裕的）公共内存。但在程序运行中，有些进程可能会崩溃掉。我们希望程序能报告出当前还有多少个进程在工作，但使用的空间越少越好。一个简单的解决方案就是，预先指定一个进程作为统计者，照搬囚犯们的策略，只消一个 bit 即可统计出活动进程的大致数量。但问题是——这个统计进程崩溃了咋办？因此，为了避免有关键进程崩溃，这些进程的行为必须得一致才行。 1990 年， Michael J. Fischer 、 Shlomo Moran 、 Steven Rudich 、 Gadi Taubenfeld 四位牛人共同发表了一篇叫做 The Wakeup Problem 的论文，提出了著名的跷跷板协议 (see-saw protocol) ，成功解决了这一难题。</p>
<p>    我们还是把其中一个开关想象成一个盒子，它里面只能放一个小球。再把另一个开关想像成一个跷跷板，它也只有两种状态：左低右高、左高右低。要想改变跷跷板的倾斜方向，只能扳动它的开关。初始时，每个囚犯手中都有一个（假想的）小球。每个囚犯第一次进入房间后，他都幻想自己坐到跷跷板低的那一边上，然后把自己这一侧扳高。以后每次回到这个房间时，他都看看自己所在的那一侧是高还是低：如果是低的话，他就取走盒子里的小球（如果有的话），于是手中就多了一个小球；如果是高的话，他就在盒子里放一个小球（如果盒子是空的），此时手中的小球就少了一个。注意，如果他把手中的最后一个小球放进盒子了（此时他手中没有小球了），他就必须从跷跷板上下来，把自己所在的那一侧扳低，之后就再也不进行任何操作了。如果有某个囚犯收集到了 100 个小球，显然他就知道所有人都来过房间了。问题的关键就是：为什么最终总会有一个人能集齐所有的小球？<br>
    其实，协议中的很多复杂的细节都是为了保证下面这个引理成立：每一个人离开房间之后，房间里都只可能有两种情况：</p>
<p>      A. 跷跷板两侧的人一样多<br>
      B. 高的那边多一个人</p>
<p>    这是因为，如果有囚犯第一次进入房间，他将坐上低的那一侧，并把那一侧扳高，于是原本是情况 A 现在就会变成情况 B ，而情况 B 则会变成情况 A ；另外，如果有囚犯下了跷跷板，高的那一侧将少一人，同时该侧将被扳低，同样有情况 A 将变情况 B ，情况 B 将变情况 A 。<br>
    现在，让我们假设所有人都进过房间了，并且有 k 个人正在跷跷板上（其余的人都已经离开跷跷板了）。由于跷跷板两侧最多差一人，因此当 k 大于 1 时，跷跷板两侧都是有人的。而由于每个人都进过房间了，因此不会有新的人坐上跷跷板了。此时，位于高处的人将不断拿出自己的球，并被位于低处的人取走。直到某个时刻高处有人拿不出小球了，他将走下跷跷板，此时跷跷板的状态才会发生变化，跷跷板上的总人数将变成 k-1 。最后跷跷板上只剩一个人时，显然他就拥有了所有人的小球，此时他就知道所有人都来过了。</p>
<p>    容易想到，如果初始时房间的状态不定，人手两个球的改进方法同样能解决问题。当然，对问题的探索是永无止境的，我们相信囚犯与灯泡的问题还会有更多漂亮的变种和扩展，不断启发着人们的思维。即使这些问题没有任何使用价值，思考过程本身也是有益而有趣的。让我们感谢最初设计这个智力趣题的无名氏，他给我们带来了无尽的思维乐趣。</p>
			 ]]></content>
<pubDate>2010-09-05T08:53:37+00:00</pubDate>
<guid>http://www.matrix67.com/blog/archives/3630</guid>
<author><![CDATA[ 顾森 ]]></author>
</item>
<item>
<title><![CDATA[ 用数学解赌博问题不稀奇，用赌博解数学问题才牛B ]]></title>
<link>http://www.matrix67.com/blog/archives/3638</link>
<content><![CDATA[ 
		<p>    有一个经典的概率问题：平均需要抛掷多少次硬币，才会首次出现连续的 n 个正面？它的答案是 2^(n+1) – 2 。取 n=2 的话，我们就有这样的结论：平均要抛掷 6 次硬币，才能得到两个连续的正面。或许这个期望次数比你想象中的要多吧。我们不妨试着来验证一下这一结果。由简单的递推可得，所有 1 都不相邻的 k 位 01 串有 F<sub>k+2</sub> 个，其中 F<sub>i</sub> 表示 Fibonacci 数列中的第 i 项。而“抛掷第 k 次才出现连续两个正面”的意思就是， k 位 01 串的末三位是 011 ，并且前面 k – 3 位中的数字 1 都不相邻。因此，在所有 2^k 个 k 位 01 串中，只有 F<sub>k-1</sub> 个是满足要求的。因此，我们要求的期望值就等于 ∑ (k=2..∞) k * F<sub>k-1</sub> / 2^k 。这个无穷级数就等于 6 。我怎么算的呢？我用 Mathematica 算的。</p>
<p>      <img alt="image placeholder" >
<p> <br>
    显然，当 n 更大的时候，期望值的计算更加复杂。而简单美妙的结论让我们不由得开始思考，这个问题有没有什么可以避免计算的巧妙思路？万万没有想到的是，在赌博问题的研究中，概率论帮了不少大忙；而这一回，该轮到赌博问题反过来立功了。<br>
<span id="more-3638"></span></p>
<p>    设想有这么一家赌场，赌场里只有一个游戏：猜正反。游戏规则很简单，玩家下注 x 元钱，赌正面或者反面；然后庄家抛出硬币，如果玩家猜错了他就会输掉这 x 元，如果玩家猜对了他将得到 2x 元的回报（也就是净赚 x 元）。<br>
    让我们假设每一回合开始之前，都会有一个新的玩家加入游戏，与仍然在场的玩家们一同赌博。每个玩家最初都只有 1 元钱，并且他们的策略也都是相同的：每回都把当前身上的所有钱都押在正面上。运气好的话，从加入游戏开始，庄家抛掷出来的硬币一直是正面，这个玩家就会一直赢钱；如果连续 n 次硬币都是正面朝上，他将会赢得 2^n 元钱。这个 2^n 就是赌场老板的心理承受极限——一旦有人赢到了 2^n 元钱，赌场老板便会下令停止游戏，关闭赌场。让我们来看看，在这场游戏中存在哪些有趣的结论。</p>
<p>    首先，连续 n 次正面朝上的概率虽然很小，但确实是有可能发生的，因此总有一个时候赌场将被关闭。赌场关闭之时，唯一赚到钱的人就是赌场关闭前最后进来的那 n 个人。每个人都只花费了 1 元钱，但他们却赢得了不同数量的钱。其中，最后进来的人赢回了 2 元，倒数第二进来的人赢回了 4 元，倒数第 n 进来的人则赢得了 2^n 元（他就是赌场关闭的原因），他们一共赚取了 2 + 4 + 8 + … + 2^n = 2^(n+1) – 2 元。其余所有人初始时的 1 元钱都打了水漂，因为没有人挺过了倒数第 n + 1 轮游戏。<br>
    另外，由于这个游戏是一个完全公平的游戏，因此赌场的盈亏应该是平衡的。换句话说，有多少钱流出了赌场，就该有多少的钱流进赌场。既然赌场的钱最终被赢走了 2^(n+1) – 2 元，因此赌场的期望收入也就是 2^(n+1) – 2 元。而赌场收入的唯一来源是每人 1 元的初始赌金，这就表明游戏者的期望数量是 2^(n+1) – 2 个。换句话说，游戏平均进行了 2^(n+1) – 2 次。再换句话说，平均抛掷 2^(n+1) – 2 次硬币才会出现 n 连正的情况。<br>
 </p>
			 ]]></content>
<pubDate>2010-09-09T15:22:39+00:00</pubDate>
<guid>http://www.matrix67.com/blog/archives/3638</guid>
<author><![CDATA[ 顾森 ]]></author>
</item>
<item>
<title><![CDATA[ 趣题：半径相等的半圆和圆 内接正方形的面积之比 ]]></title>
<link>http://www.matrix67.com/blog/archives/3658</link>
<content><![CDATA[ 
		<p>  <img alt="image placeholder" >
<p>在半径相等的半圆和圆中各画一个内接正方形。这两个正方形的面积之比是多大？有什么简单些的算法吗？<br>
<span id="more-3658"></span></p>
<p> <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
  <img alt="image placeholder" >
<p>答案：两个正方形的面积之比是 2:5 。考虑 12 个单位小正方形排成的一个十字架，以及这个十字架的外接圆。半圆里的内接正方形占了其中 4 个单位小正方形，而圆内接正方形的边长则是 √<span style="text-decoration:overline">10</span> ，它的面积就为 10 。因此，两个正方形的面积之比就是 2:5 。嚯嚯，秒杀咯！</p>
<p>来源：<a href="http://www.cut-the-knot.org/proofs/SqInSemi.shtml">http://www.cut-the-knot.org/proofs/SqInSemi.shtml</a></p>
			 ]]></content>
<pubDate>2010-09-10T16:32:18+00:00</pubDate>
<guid>http://www.matrix67.com/blog/archives/3658</guid>
<author><![CDATA[ 顾森 ]]></author>
</item>
<item>
<title><![CDATA[ 视频推荐：WORDS ]]></title>
<link>http://www.matrix67.com/blog/archives/3666</link>
<content><![CDATA[ 
		<p><embed src="http://www.tudou.com/v/aPO0DfxwmO0" type="application/x-shockwave-flash" allowscriptaccess="always" allowfullscreen="true" wmode="opaque" width="500" height="310"></embed></p>
<p> <br>
这段唯美的视频似乎是由大千世界中的各种场景毫无意义地拼接而成的，而事实上却并非如此。视频中的片段是精心选择的，它们描述了生活中最常见的一些单词。这就给大家留下了一个小小的谜题：这段视频究竟是以哪些单词为主题的？你能找全吗？</p>
<p><span id="more-3666"></span><br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 </p>
<p>答案：视频中的片段依次讲述的是 Play, Blow, Break, Split, Run, Fly, Fall, Light, Space 。很多单词都是以不同的意义甚至不同的词性出现在片段中的，这些绝妙的文字游戏让整个视频充满了智慧。</p>
<p>来源：<a href="http://www.npr.org/templates/story/story.php?storyId=129111163">http://www.npr.org/templates/story/story.php?storyId=129111163</a></p>
			 ]]></content>
<pubDate>2010-09-11T08:53:44+00:00</pubDate>
<guid>http://www.matrix67.com/blog/archives/3666</guid>
<author><![CDATA[ 顾森 ]]></author>
</item>
<item>
<title><![CDATA[ 《新知客》趣题专栏 2010.09 ]]></title>
<link>http://www.matrix67.com/blog/archives/3677</link>
<content><![CDATA[ 
		<p>目前，我正在《新知客》杂志上主持一个趣题栏目。每月杂志发行后，我将在 Blog 上同步更新。点击 <a href="http://www.matrix67.com/blog/archives/tag/%E3%80%8A%E6%96%B0%E7%9F%A5%E5%AE%A2%E3%80%8B%E8%B6%A3%E9%A2%98">这里</a> 可以查看往期题目。</p>
<p><strong>推理</strong><br>
1. 在每一个小题中，我们都列出了八种物品，其中前面四种物品都有一个共同点，而这个共同点是后面四种物品所不具有的。请您找出这个共同点来。<br>
(1) 小肠、地毯、水蜜桃、贵宾犬 | 牙刷、足球、藤椅、冰块<br>
(2) 电线、棋子、指示灯、扇形图 | 闹钟、绳子、条形码、井字棋<br>
(3) 电池、钥匙、酵母、书签 | 火柴、魔方、药瓶、订书机</p>
<p>2. 小 A 站在甲、乙两地之间的某个位置，他想乘坐出租车到乙地去。他看见一辆空车远远地从甲地驶来，而此时整条路上并没有别人与他争抢空车。我们假定车的行驶速度和人的步行速度都是固定不变的，并且车速大于人速。为了更快地到达目的地，小 A 应该怎样做呢？你认为下面哪种思路是正确的？<br>
(A) 由于车速大于人速，小 A 应该尽可能早地上车，充分利用汽车的速度优势。因此，小 A 应该迎着空车走上去，提前与车相遇。<br>
(B) 为了尽早到达目的地，小 A 应该充分利用时间，马不停蹄地赶往目的地。因此，他应该自己先朝目的地走一段路，再让出租车载他走完剩下的路程。</p>
<p><span id="more-3677"></span><br>
 <br>
<strong>计算</strong><br>
1. 六个相同大小的正方形如图摆放。图中所示的角为多少度？</p>
<p><img alt="image placeholder" >
<p> <br>
2. 用哪四个相同的正整数（不限于 1 到 13 ）能算出 24 ？您能找出这个问题的所有 11 组解吗？<br>
（注意：这里算 24 的规则和平常一样，只允许加减乘除四则运算，可以添加括号改变运算顺序）</p>
<p> <br>
 <br>
<strong>填图：</strong><br>
1. 把左图所示的“加号”放入右图中，使得这些“加号”互不重叠。请问，最少需要放入多少个“加号”，才能使得图中无法放进新的“加号”？</p>
<p><img alt="image placeholder" >
<p> <br>
2. 在方格中填入数字 1 到 6 ，使得每一行、每一列以及每个用粗线划分出的 2 × 3 小矩形内的六个方格都恰好包含了 1 到 6 这六个数字。如果相邻方格之间有一个小圆点，则这两个方格内必须填入两个相邻的数。图中有一个数字已经为您填好。</p>
<p><img alt="image placeholder" >
<p> <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
<strong>推理</strong></p>
<p>1. 在每一个小题中，我们都列出了八种物品，其中前面四种物品都有一个共同点，而这个共同点是后面四种物品所不具有的。请您找出这个共同点来。<br>
(1) 小肠、地毯、水蜜桃、贵宾犬 | 牙刷、足球、藤椅、冰块<br>
(2) 电线、棋子、指示灯、扇形图 | 闹钟、绳子、条形码、井字棋<br>
(3) 电池、钥匙、酵母、书签 | 火柴、魔方、药瓶、订书机</p>
<p>答案：(1) 表面有毛绒 (2) 常用颜色进行区分 (3) 需要放在别的物体内使用</p>
<p> <br>
 <br>
2. 小 A 站在甲、乙两地之间的某个位置，他想乘坐出租车到乙地去。他看见一辆空车远远地从甲地驶来，而此时整条路上并没有别人与他争抢空车。我们假定车的行驶速度和人的步行速度都是固定不变的，并且车速大于人速。为了更快地到达目的地，小 A 应该怎样做呢？你认为下面哪种思路是正确的？<br>
(A) 由于车速大于人速，小 A 应该尽可能早地上车，充分利用汽车的速度优势。因此，小 A 应该迎着空车走上去，提前与车相遇。<br>
(B) 为了尽早到达目的地，小 A 应该充分利用时间，马不停蹄地赶往目的地。因此，他应该自己先朝目的地走一段路，再让出租车载他走完剩下的路程。</p>
<p>答案：两种方案花费的时间是一样的。只要站在出租车的角度上想一想，问题就变得很显然了：不管小 A 在哪儿上车，出租车都要驶完甲地到乙地的全部路程，因此小 A 到达乙地的时间总等于出租车驶完全程的时间，加上途中接小 A 上车可能耽误的时间。</p>
<p> <br>
 <br>
<strong>计算</strong></p>
<p>1. 六个相同大小的正方形如图摆放。图中所示的角为多少度？</p>
<p><img alt="image placeholder" >
<p> <br>
答案： 45 度。这是一个等腰直角三角形的其中一个底角。</p>
<p><img alt="image placeholder" >
<p> <br>
 <br>
2. 用哪四个相同的正整数（不限于 1 到 13 ）能算出 24 ？您能找出这个问题的所有 11 组解吗？<br>
（注意：这里算 24 的规则和平常一样，只允许加减乘除四则运算，可以添加括号改变运算顺序）</p>
<p>答案：这 11 个解分别是 3 、 4 、 5 、 6 、 12 、 22 、 23 、 24 、 25 、 26 、 48 ，您找全了吗？下面我们分别给出每组解的其中一种算法。有趣的是，多数人会理所当然地认为四个 24 显然能算出 24 ，随后却发现这并不是一件容易的事情。在继续看答案之前您不妨先自己想想该怎么算。</p>
<p>3 * 3 * 3 – 3 = 24<br>
4 * 4 + 4 + 4 = 24<br>
5 * 5 – 5 / 5 = 24<br>
6 + 6 + 6 + 6 = 24<br>
12 + 12 + 12 – 12 = 24<br>
22 + (22 + 22) / 22 = 24<br>
(23 * 23 + 23) / 23 = 24<br>
24 + (24 – 24) * 24 = 24<br>
(25 * 25 – 25) / 25 = 24<br>
26 – (26 + 26) / 26 = 24<br>
48 / ((48 + 48) / 48) = 24</p>
<p> <br>
 <br>
<strong>填图：</strong></p>
<p>1. 把左图所示的“加号”放入右图中，使得这些“加号”互不重叠。请问，最少需要放入多少个“加号”，才能使得图中无法放进新的“加号”？</p>
<p><img alt="image placeholder" >
<p> <br>
答案： 2 个。</p>
<p><img alt="image placeholder" >
<p> <br>
 <br>
2. 在方格中填入数字 1 到 6 ，使得每一行、每一列以及每个用粗线划分出的 2 × 3 小矩形内的六个方格都恰好包含了 1 到 6 这六个数字。如果相邻方格之间有一个小圆点，则这两个方格内必须填入两个相邻的数。图中有一个数字已经为您填好。</p>
<p><img alt="image placeholder" >
<p> <br>
答案：</p>
<p><img alt="image placeholder" >
			 ]]></content>
<pubDate>2010-09-12T19:04:35+00:00</pubDate>
<guid>http://www.matrix67.com/blog/archives/3677</guid>
<author><![CDATA[ 顾森 ]]></author>
</item>
<item>
<title><![CDATA[ 那些神秘的数学常数 ]]></title>
<link>http://www.matrix67.com/blog/archives/3682</link>
<content><![CDATA[ 
		<p>    我一直觉得，数学中的各种常数是最令人敬畏的东西，它们似乎是宇宙诞生之初上帝就已经精心选择好了的。那一串无限不循环的数字往往会让人陷入一种无底洞般的沉思——为什么这串数字就不是别的，偏偏就是这个样呢。除了那些众所周知的基本常数之外，还有很多非主流的数学常数，它们的存在性和无理性同样给它们赋予了浓重的神秘色彩。今天，就让我们一起来看一看，数学当中到底有哪些神秘的无理常数。</p>
<p> <br>
<strong>√<span style="text-decoration:overline">2</span> ≈ 1.4142135623730950488</strong></p>
<p>    古希腊的大哲学家 Pythagoras 很早就注意到了数学与大千世界的联系，对数学科学的发展有着功不可没的贡献。他还创立了在古希腊影响最深远的学派之一—— Pythagoras 学派。 Pythagoras 学派对数字的认识达到了审美的高度。他们相信，在这个世界中“万物皆数”，所有事物都可以用整数或者整数之比来描述。<br>
    第一个无理数 √<span style="text-decoration:overline">2</span> 的发现者就是一位 Pythagoras 学派的学者，他叫做 Hippasus 。据说，一日 Hippasus 向 Pythagoras 提出了这样的问题：边长为 1 的正方形，对角线长度能用整数之比来表示吗？ Pythagoras 自己做了一些思考，证明了这个数确实无法用整数之比来表示。由于这一发现触犯了学派的信条，因此 Pythagoras 杀害了 Hippasus 。<br>
    利用勾股定理可知，这个数是方程 x^2 = 2 的唯一正数解，我们通常就记作 √<span style="text-decoration:overline">2</span> 。 √<span style="text-decoration:overline">2</span> 可能是最具代表性的无理数了，我们之前曾经介绍过很多 <a href="http://www.matrix67.com/blog/archives/156">√<span style="text-decoration:overline">2</span> 的无理性的证明</a>。无理数的出现推翻了古希腊数学体系中的一个最基本的假设，直接导致了第一次数学危机，整座数学大厦险些轰然倒塌。<br>
    无理数虽说无理，在生产生活中的用途却是相当广泛。例如，量一量你手边的书本杂志的长与宽，你会发现它们的比值就约为 1.414 。这是因为通常印刷用的纸张都满足这么一个性质：把两条宽边对折到一起，得到一个新的长方形，则新长方形的长宽之比和原来一样。因此，如果原来的长宽比为 x : 1 ，新的长宽比就是 1 : x/2 。解方程 x : 1 = 1 : x/2 就能得到 x = √<span style="text-decoration:overline">2</span> 。</p>
<p><span id="more-3682"></span> <br>
<strong>圆周率 π ≈ 3.1415926535897932385</strong></p>
<p>    不管圆有多大，它的周长与直径的比值总是一个固定的数。我们就把这个数叫做圆周率，用希腊字母 π 来表示。人们很早就认识到了圆周率的存在，对圆周率的研究甚至可以追溯到公元以前；从那以后，人类对圆周率的探索就从未停止过。几千年过去了，人类对圆周率的了解越来越多，但却一直被圆周率是否有理的问题所困扰。直到 1761 年，德国数学家 Lambert 才证明了 π 是一个无理数。<br>
    π 是数学中最基本、最重要、最神奇的常数之一，它常常出现在一些与几何毫无关系的场合中。例如，任意取出两个正整数，则它们互质（最大公约数为 1 ）的概率为 6 / π^2 。</p>
<p> <br>
<strong>自然底数 e ≈ 2.7182818284590452354</strong></p>
<p>    在 17 世纪末，瑞士数学家 Bernoulli 注意到了一个有趣的现象：当 x 越大时， (1 + 1/x)^x 将会越接近某个固定的数。例如， (1 + 1/100)^100 ≈ 2.70481 ， (1 + 1/1000)^1000 ≈ 2.71692 ，而 (1 + 1/10000)^10000 则约为 2.71815 。 18 世纪的大数学家 Euler 仔细研究了这个问题，并第一次用字母 e 来表示当 x 无穷大时 (1 + 1/x)^x 的值。他不但求出了 e ≈ 2.718，还证明了 e 是一个无理数。<br>
    e 的用途也十分广泛，很多公式里都有 e 的身影。比方说，如果把前 n 个正整数的乘积记作 n! ，则有 Stirling 近似公式 n! ≈ √<span style="text-decoration:overline">2 π n</span> (n / e)^n 。在微积分中，无理数 e 更是大显神通，这使得它也成为了高等数学中最重要的无理数之一。</p>
<p> <br>
<strong>黄金分割 φ = (1 + √<span style="text-decoration:overline">5</span>)/2 ≈ 1.6180339887498948482</strong></p>
<p>    把一根线段分为两段，分割点在什么位置时最为美观？分在中点处，似乎太对称了不好看；分在三等分点处，似乎又显得有些偏了。人们公认，最完美的分割点应该满足这样一种性质：较长段与较短段的长度比，正好等于整条线段与较长段的长度比。这个比值就叫做黄金分割，用希腊字母 φ 来表示。若令线段的较短段的长度为 1 ，则 φ 就满足方程 φ = (1 + φ) / φ ，可解出 φ = (1 + √<span style="text-decoration:overline">5</span>)/2 。<br>
<img alt="image placeholder" >
    在数学中，黄金分割 φ 也展示出了它的无穷魅力。例如，在正五角星中，同一条线上三个点 A 、 B 、 C 就满足 AB : BC = φ 。再比如，在 Fibonacci 数列 1, 1, 2, 3, 5, 8, 13, 21, … 中，相邻两数之比将会越来越接近于 φ 。</p>
<p style="clear:both"> </p>
<p> <br>
<strong>Khinchin 常数 K ≈ 2.6854520010653064453</strong></p>
<p>    每一个实数都能写成 a<sub>0</sub> + 1/(a<sub>1</sub> + 1/(a<sub>2</sub> + …)) 的形式，其中 a<sub>0</sub>, a<sub>1</sub>, a<sub>2</sub>, … 都是整数。我们就把 [a<sub>0</sub>; a<sub>1</sub>, a<sub>2</sub>, a<sub>3</sub>, …] 叫做该数的连分数展开。和小数展开比起来，连分数展开具有更加优雅漂亮的性质，这使得连分数成为了数学研究中的必修课。<br>
    在 1964 年出版的一本连分数数学课本中，数学家 Khinchin 证明了这样一个惊人的结论：除了有理数、二次整系数方程的根等部分特殊情况以外，几乎所有实数的连分数展开序列的几何平均数都收敛到一个相同的数，它约为 2.685452 。例如，圆周率 π 的连分数展开序列中，前 20 个数的几何平均数约为 2.62819 ，前 100 个数的几何平均数则为 2.69405 ，而前 1 000 000 个数的几何平均数则为 2.68447 。<br>
    目前，人们对这个神秘常数的了解并不太多。虽然 Khinchin 常数很可能是无理数，但这一点至今仍未被证明。而 Khinchin 的精确值也并不容易求出。 1997 年， David Bailey 等人对一个收敛极快的数列进行了优化，但也只求出了 Khinchin 小数点后 7350 位。</p>
<p> <br>
<strong>Conway 常数 λ ≈ 1.3035772690342963913</strong></p>
<p>    你能找出下面这个数列的规律吗？</p>
<blockquote><p>1, 11, 21, 1211, 111221, 312211, 13112221, 1113213211, …</p></blockquote>
<p>    这个数列的规律简单而又有趣。数列中的第一个数是 1 。从第二个数开始，每个数都是对前一个数的描述：第二个数 11 就表示它的前一个数是“ 1 个 1 ”，第三个数 21 就表示它的前一个数是“ 2 个 1 ”，第四个数 1211 就表示它的前一个数是“ 1 个 2 ， 1 个 1 ”……这个有趣的数列就叫做“外观数列”。<br>
    外观数列有很多有趣的性质。例如，数列中的数虽然会越来越长，但数字 4 永远不会出现。 1987 年，英国数学家 John Conway 发现，在这个数列中，相邻两数的长度之比越来越接近一个固定的数。最终，数列的长度增长率将稳定在某个约为 1.303577 的常数上。 John Conway 把这个常数命名为 Conway 常数，并用希腊字母 λ 表示。 John Conway 证明了 λ 是一个无理数，它是某个 71 次方程的唯一实数解。</p>
<p> <br>
<strong>Champernowne 常数 C<sub>10</sub> ≈ 0.1234567891011121314</strong></p>
<p>    把全体正整数从小到大依次写成一排，并在最前面加上一个小数点，便得到了一个无限小数 0.1234567891011121314… 。这个数是由英国统计学家 Champernowne 于 1933 年构造出来的，他把它命名为 Champernowne 常数，用符号 C<sub>10</sub> 表示。与其它的数学常数相比，Champernowne 常数有一个很大的区别：这个数仅仅是为了论证一些数学问题而人为定义出来的，它并未描述任何一个数学对象。<br>
    Champernowne 常数有很多难能可贵的性质。首先，容易看出它是一个无限不循环小数，因此它也就是一个无理数。其次，它还是一个“超越数”，意即它不是任何一个整系数多项式方程的解。它还是一个“正规数”，意即每一种数字或者数字组合出现的机会都是均等的。在众多数学领域中， Champernowne 常数都表现出了其非凡的意义。</p>
<p> <br>
（本文已发表于《中学生数理化·八年级》 2010 年第 9 期，原标题为《无理常数知多少》，内容有修改）<br>
 </p>
			 ]]></content>
<pubDate>2010-09-15T15:55:49+00:00</pubDate>
<guid>http://www.matrix67.com/blog/archives/3682</guid>
<author><![CDATA[ 顾森 ]]></author>
</item>
<item>
<title><![CDATA[ 趣题：过纸张外的一点作直线 ]]></title>
<link>http://www.matrix67.com/blog/archives/3705</link>
<content><![CDATA[ 
		<p><img alt="image placeholder" >
<p>晚饭之后一起来动动脑吧。纸上有两条<strong>夹角很小</strong>的直线 a 、 b ，它们在纸外交于一点 O 。在纸上还有一点 P ，大致位置如上图所示。请你利用圆规和（没有刻度的）直尺作出一条同时过 O 、 P 的直线。当然，你不能把图作到纸张外面去。</p>
<p><span id="more-3705"></span><br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 </p>
<p><img alt="image placeholder" >
<p>答案：过 P 作直线 a 的垂线，垂足为 H<sub>a</sub> ，和 b 交于点 A 。过 P 作直线 b 的垂线，垂足为 H<sub>b</sub> ，和 a 交于点 B 。连接 AB 。然后，过 P 作 AB 的垂线 HP ，这条 HP 一定会经过直线 a 、 b 的交点 O 。这是因为， △ABO 的三条高交于一点。</p>
<p>题目来源：<a href="http://www.cut-the-knot.org/wiki-math/index.php?n=Geometry.ConstructionsRelatedToAnInaccessiblePoint">CTK Wiki Math</a></p>
<p> <br>
如果你喜欢这个，不妨看几个类似的另类作图趣题：<br>
<a href="http://www.matrix67.com/blog/archives/528">http://www.matrix67.com/blog/archives/528</a><br>
<a href="http://www.matrix67.com/blog/archives/3513">http://www.matrix67.com/blog/archives/3513</a><br>
以及 <a href="http://www.matrix67.com/blog/archives/3113">http://www.matrix67.com/blog/archives/3113</a> 的第 8 题</p>
			 ]]></content>
<pubDate>2010-09-16T19:21:23+00:00</pubDate>
<guid>http://www.matrix67.com/blog/archives/3705</guid>
<author><![CDATA[ 顾森 ]]></author>
</item>
<item>
<title><![CDATA[ 谬证大全：1+1≠2的n种可能 ]]></title>
<link>http://www.matrix67.com/blog/archives/3718</link>
<content><![CDATA[ 
		<p>    最近看到几个有趣的数学谬证，想写下来与大家分享；结果写到这个又想到那个，一写就写个没完，于是想到干脆做一篇谬证大全，收集各种荒谬的证明。<br>
    如果你有什么更棒的“证明”，欢迎来信与我分享，我会更新到这篇日志中。我的邮箱是 matrix67 at tom.com ，或者 gs.matrix67 at gmail.com 。</p>
<p><strong>1=2？史上最经典的“证明”</strong></p>
<p>    设 a = b ，则 a·b = a^2 ，等号两边同时减去 b^2 就有 a·b – b^2 = a^2 – b^2 。注意，这个等式的左边可以提出一个 b ，右边是一个平方差，于是有 b·(a – b) = (a + b)(a – b) 。约掉 (a – b) 有 b = a + b 。然而 a = b ，因此 b = b + b ，也即 b = 2b 。约掉 b ，得 1 = 2 。</p>
<p>    这可能是有史以来最经典的谬证了。 Ted Chiang 在他的短篇科幻小说 Division by Zero 中写到：</p>
<blockquote><p>There is a well-known “proof” that demonstrates that one equals two. It begins with some definitions: “Let a = 1; let b = 1.” It ends with the conclusion “a = 2a,” that is, one equals two. Hidden inconspicuously in the middle is a division by zero, and at that point the proof has stepped off the brink, making all rules null and void. Permitting division by zero allows one to prove not only that one and two are equal, but that any two numbers at all—real or imaginary, rational or irrational—are equal.</p></blockquote>
<p>    这个证明的问题所在想必大家都已经很清楚了：等号两边是不能同时除以 a – b 的，因为我们假设了 a = b ，也就是说 a – b 是等于 0 的。</p>
<p><span id="more-3718"></span><br>
<strong>无穷级数的力量 (1)</strong></p>
<p>    小学时，这个问题困扰了我很久：下面这个式子等于多少？</p>
<p>      1 + (-1) + 1 + (-1) + 1 + (-1) + …</p>
<p>    一方面，</p>
<p>        1 + (-1) + 1 + (-1) + 1 + (-1) + …<br>
      = [1 + (-1)] + [1 + (-1)] + [1 + (-1)] + …<br>
      = 0 + 0 + 0 + …<br>
      = 0</p>
<p>    另一方面，</p>
<p>        1 + (-1) + 1 + (-1) + 1 + (-1) + …<br>
      = 1 + [(-1) + 1] + [(-1) + 1] + [(-1) + …<br>
      = 1 + 0 + 0 + 0 + …<br>
      = 1</p>
<p>    这岂不是说明 0 = 1 吗？</p>
<p>    后来我又知道了，这个式子还可以等于 1/2 。不妨设 S = 1 + (-1) + 1 + (-1) + … ， 于是有 S = 1 – S ，解得 S = 1/2 。</p>
<p>    学习了微积分之后，我终于明白了，这个无穷级数是发散的，它没有一个所谓的“和”。无穷个数相加的结果是多少，这个是需要定义的。</p>
<p> <br>
<strong>无穷级数的力量 (2)</strong></p>
<p>    同样的戏法可以变出更多不可思议的东西。例如，令</p>
<p>      x = 1 + 2 + 4 + 8 + 16 + …</p>
<p>    则有</p>
<p>      2x = 2 + 4 + 8 + 16 + …</p>
<p>    于是</p>
<p>      2x – x = x = (2 + 4 + 8 + 16 + …) – (1 + 2 + 4 + 8 + 16 + …) = -1</p>
<p>    也就是说</p>
<p>      1 + 2 + 4 + 8 + 16 + … = -1</p>
<p> <br>
<strong>平方根的阴谋 (1)</strong></p>
<p>    定理：所有数都相等。<br>
    证明：取任意两个数 a 和 b ，令 t = a + b 。于是，</p>
<p>      a + b = t<br>
      (a + b)(a – b) = t(a – b)<br>
      a^2 – b^2 = t·a – t·b<br>
      a^2 – t·a = b^2 – t·b<br>
      a^2 – t·a + (t^2)/4 = b^2 – t·b + (t^2)/4<br>
      (a – t/2)^2 = (b – t/2)^2<br>
      a – t/2 = b – t/2<br>
      a = b</p>
<p>    怎么回事儿？</p>
<p> <br>
 <br>
    问题出在倒数第二行。<br>
    永远记住， x^2 = y^2 并不能推出 x = y ，只能推出 x = ±y 。</p>
<p> <br>
<strong>平方根的阴谋 (2)</strong></p>
<p>    1 = √<span style="text-decoration:overline">1</span> = √<span style="text-decoration:overline">(-1)(-1)</span> = √<span style="text-decoration:overline">-1</span>·√<span style="text-decoration:overline">-1</span> = -1</p>
<p>    嗯？</p>
<p> <br>
 <br>
    只有 x 、 y 都是正数时， √<span style="text-decoration:overline">x·y</span> = √<span style="text-decoration:overline">x</span>·√<span style="text-decoration:overline">y</span> 才是成立的。<br>
    -1 的平方根有两个， i 和 -i 。 √<span style="text-decoration:overline">(-1)(-1)</span> 展开后应该写作 i·(-i) ，它正好等于 1 。</p>
<p> <br>
<strong>复数才是王道</strong></p>
<p>    考虑方程</p>
<p>      x^2 + x + 1 = 0</p>
<p>    移项有</p>
<p>      x^2 = – x – 1</p>
<p>    等式两边同时除以 x ，有</p>
<p>      x = – 1 – 1/x</p>
<p>    把上式代入原式中，有</p>
<p>      x^2 + (-1 – 1/x) + 1 = 0</p>
<p>    即</p>
<p>      x^2 – 1/x = 0</p>
<p>    即</p>
<p>      x^3 = 1</p>
<p>    也就是说 x = 1。</p>
<p>    把 x = 1 代回原式，得到 1^2 + 1 + 1 = 0 。也就是说， 3 = 0 ，嘿嘿！</p>
<p> <br>
    其实， x = 1 并不是方程 x^2 + x + 1 = 0 的解。在实数范围内，方程 x^2 + x + 1 = 0 是没有解的，但在复数范围内有两个解。<br>
    另一方面， x = 1 只是 x^3 = 1 的其中一个解。 x^3 = 1 其实一共有三个解，只不过另外两个解是复数范围内的。考虑方程 x^3 – 1 = (x – 1)(x^2 + x + 1) = 0 ，容易看出 x^3 = 1 的两个复数解正好就是 x^2 + x + 1 的两个解。因此， x^2 + x + 1 = 0 与 x^3 = 1 同时成立并无矛盾。<br>
    注意，一旦引入复数后，这个谬论才有了一个完整而漂亮的解释。或许这也说明了引入复数概念的必要性吧。</p>
<p> <br>
<strong>颇具喜剧色彩的错误</strong></p>
<p>    众所周知，</p>
<p>      1 + 2 + 3 + … + n = n(n+1) / 2</p>
<p>    让我们用 n – 1 去替换 n ，可得</p>
<p>      1 + 2 + 3 + … + (n-1) = (n-1)n / 2</p>
<p>    等式两边同时加 1 ，得：</p>
<p>      1 + 2 + 3 + … + n = (n-1)n / 2 + 1</p>
<p>    也就是</p>
<p>      n(n+1) / 2 = (n-1)n / 2 + 1</p>
<p>    展开后有</p>
<p>      n^2 / 2 + n / 2 = n^2 / 2 – n / 2 + 1</p>
<p>    可以看到 n = 1 是这个方程的唯一解。<br>
    也就是说⋯⋯ 1 + 2 + 3 + … + n = n(n+1) / 2 仅在 n = 1 时才成立！</p>
<p> <br>
 <br>
 </p>
<p>    这个推理过程中出现了一个非常隐蔽而搞笑的错误。等式两边同时加 1 后，等式左边得到的应该是</p>
<p>      1 + 2 + 3 + … + (n-2) + (n-1) + 1</p>
<p> <br>
<strong>1 块钱等于 1 分钱？</strong></p>
<p>    我要用数学的力量掏空你的钱包！请看：</p>
<p>      1 元 = 100 分 = (10 分)^2 = (0.1 元)^2 = 0.01 元 = 1 分</p>
<p> <br>
 </p>
<p>    用这个来骗小孩子们简直是屡试不爽，因为小学（甚至中学）教育忽视了一个很重要的思想：单位也是要参与运算的。事实上， “100 分 = (10 分)^2” 是不成立的， “10 分” 的平方应该是 “100 平方分” ，正如 “10 米” 的平方是 “100 平方米” 一样。</p>
<p> <br>
<strong>数学归纳法的杯具 (1)</strong></p>
<p>    下面这个“证明”是由数学家 George Pólya 给出的：任意给定 n 匹马，可以证明这 n 匹马的颜色都相同。<br>
    对 n 施归纳：首先，当 n = 1 时命题显然成立。若命题对 n = k 成立，则考虑 n = k + 1 的情形：由于 {#1, #2, …, #k} 这 k 匹马的颜色相同， {#2, #3, …, #k+1 } 这 k 匹马也相同，而这两组马是有重叠的，可知这 k+1 匹马的颜色也都相同了。</p>
<p> <br>
 </p>
<p>    这个证明错在，从 n = 1 推不出 n = 2 ，虽然当 n 更大的时候，这个归纳是正确的。这是数学归纳法出错的一个比较奇特的例子：基础情形和归纳推理都没啥问题，偏偏卡在归纳过程中的某一步上。</p>
<p> <br>
<strong>数学归纳法的杯具 (2)</strong></p>
<p>    下面，我来给大家证明，所有正整数都相等。<br>
    为了证明这一点，只需要说明对于任意两个正整数 a 、 b ，都有 a = b 。<br>
    为了证明这一点，只需要说明对于所有正整数 n ，如果 max(a, b) = n ，那么 a = b 。<br>
    我们对 n 施归纳。当 n = 1 时，由于 a 、 b 都是正整数，因此 a 、 b 必须都等于 1 ，所以说 a = b 。若当 n = k 时命题也成立，现在假设 max(a, b) = k + 1 。则 max(a – 1, b – 1) = k ，由归纳假设知 a – 1 = b – 1 ，即 a = b 。</p>
<p> <br>
 </p>
<p>    这个问题出在， a – 1 或者 b – 1 有可能不是正整数了，因此不能套用归纳假设。</p>
<p> <br>
<strong>1 是最大的正整数？</strong></p>
<p>    来自网友 <a href="mailto:ppwwyyxxc@gmail.com">boring David</a> 发来的邮件：<br>
    证明： 1 是最大的正整数。假设最大的正整数不是 1 ，是 a ，则必有 a &gt; 1 。于是有 a^2 &gt; a ，即 a^2 是一个比 a 更大的正整数，与 a 的最大性矛盾。因此 1 是最大的正整数。</p>
<p> <br>
 <br>
    这个证明是错误的。在假设最大正整数是 a 之前，你得先说明它的存在性，排除最大的正整数根本不存在的可能性（而事实情况正是后者）。</p>
<p> <br>
<strong>所有三角形都是等腰三角形</strong></p>
<p>    别以为谬证都是隐藏在数字和字母之中的。下面就是一个经典的几何谬论。<br>
    画一个任意三角形 ABC 。下面我将证明， AB = AC ，从而说明所有三角形都是等腰三角形。</p>
<p>   <img alt="image placeholder" >
<p>    令 BC 的中垂线与 ∠A 的角平分线交于点 P 。过 P 作 AB 、 AC 的垂线，垂足分别是 E 、 F 。由于 AP 是角平分线，因此 P 到两边的距离相等，即 PE = PF 。于是，由 AAS 可知 △APE ≌ △APF 。由于 DP 是中垂线，因此 P 到 B 、 C 的距离相等，由 SSS 可知 △BPD ≌ △CPD 。另外，由于 PE = PF ， PB = PC ，且 ∠BEP = ∠CFP = 90° ，由 HL 可知 △BEP ≌ △CFP 。现在，由第一对全等三角形知 AE = AF ，由最后一对全等三角形知 BE = CF ，因此 AE + BE = AF + CF ，即 AB = AC 。</p>
<p> <br>
 <br>
   <img alt="image placeholder" >
<p>    这个证明过程其实字字据理，并无破绽。证明的问题出在一个你完全没有意识到的地方——这个图形就是错的！事实上， BC 的中垂线与 ∠A 的角平分线不可能交于三角形的内部。我们可以证明， P 点总是落在 △ABC 的外接圆上。如图， P 是 BC 的中垂线与外接圆的交点，显然 P 就是弧 BC 的中点，即弧 BP = 弧 PC 。因此， ∠BAP = ∠CAP ，换句话说 P 恰好就在 ∠A 的角平分线上。</p>
<p> <br>
   <img alt="image placeholder" >
<p>    P 在 △ABC 外的话，会对我们的证明产生什么影响呢？你会发现，垂足的位置发生了本质上的变化—— F 跑到 AC 外面去了！也就是说，结论 AE + BE = AF + CF 并不错，只是 AF + CF 并不等于 AC 罢了。</p>
<p> <br>
<strong>一个可怕的逻辑错误</strong></p>
<p>    下面这个勾股定理的“证明”曾经发表在 1896 年的 The American Mathematical Monthly 杂志上：</p>
<p>   <img alt="image placeholder" >
<p>    假设勾股定理是正确的，于是我们可以得到</p>
<p>      AB^2 = AC^2 + BC^2<br>
      BC^2 = CD^2 + BD^2<br>
      AC^2 = AD^2 + CD^2</p>
<p>    把后两式代入第一个式子，有</p>
<p>      AB^2 = AD^2 + 2·CD^2 + BD^2</p>
<p>    但 CD^2 = AD·BD ，因此</p>
<p>      AB^2 = AD^2 + 2·AD·BD + BD^2</p>
<p>    即</p>
<p>      AB^2 = (AD + BD)^2</p>
<p>    即</p>
<p>       AB = AD + BD</p>
<p>    而这显然成立。因此，我们的假设也是成立的。</p>
<p> <br>
    这个证明是错误的。假设结论正确，推出一个矛盾，确实能说明这个假设是错误的（这就是反证法）；但假设结论正确，推出它与条件吻合，这却并不能说明假设真的就是正确的。错误的假设也有可能推出正确的结果来。最经典的例子就是，不妨假设 1 = 2 ，由等式的对称性可知 2 = 1 ，等量加等量有  1+2 = 2+1 ，即 3 = 3 。但 3 = 3 是对的并不能表明 1 = 2 是对的。</p>
<p> <br>
<strong>如此反证</strong><br>
    下面这个有趣的故事来源于 Lewis Carroll 的一篇题为 A Logical Paradox 的小论文。<br>
    Joe 去理发店理发。理发店有 A 、 B 、 C 三位师傅，但他们并不总是待在理发店里。 Joe 最喜欢 C 的手艺，他希望此时 C 在理发店里。他远远地看见理发店还开着，说明里面至少有一位师傅。另外， A 是一个胆小鬼，没有 B 陪着的话 A 从不离开理发店。<br>
    Joe 推出了这么一个结论： C 必然在理发店内。让我们来看看他的推理过程。<br>
    反证，假设 C 不在理发店。这样的话，如果 A 也不在理发店，那么 B 就必须在店里了，因为店里至少有一个人；然而，如果 A 不在理发店， B 也理应不在理发店，因为没有 B 陪着的话 A 是不会离开理发店的。因此，由 “C 不在理发店” 同时推出了 “若 A 不在则 B 一定在” 和 “若 A 不在则 B 也一定不在” 两个矛盾的结论。这说明， “C 不在理发店” 的假设是错误的。</p>
<p>    从已有的条件看， C 当然有可能不在理发店。但是，为什么 Joe 竟然证出了 C 一定在理发店呢？因为他的证明是错的。其实， “若 A 不在则 B 一定在” 和 “若 A 不在则 B 也一定不在” 并不矛盾——如果事实上 A 在理发店，那么这两个条件判断句都是真的。 “若 A 不在则 B 一定在” 真正的否定形式应该是 “A 不在并且 B 也不在” 。</p>
<p> <br>
<strong>自然语言的表达能力</strong></p>
<p>    我曾在 <a href="http://www.matrix67.com/blog/archives/380">另类搞笑：自我指涉例句不完全收集</a> 一文中写过：</p>
<blockquote><p>定理：所有的数都可以用 20 个以内的汉字表达（比如 25852016738884976640000 可以表达为“二十三的阶乘”， 100000000000000000000000 可以表达为“一后面二十三个零”）<br>
证明：反证，假设存在不能用 20 个以内的汉字表达的数，则必有一个最小的不能用 20 个以内的汉字表达的数，而这个数已经用“最小的不能用 20 个以内的汉字表达的数”表达出来了，矛盾。</p></blockquote>
<p>    当然，这个定理明显是错的，因为 20 个汉字的组合是有限的，而数是无限多的。这个证明错在哪儿了呢？我也没办法一针见血地道出个所以然来，大家一起来讨论吧。</p>
<p>    有趣的是，我们有一个与之相关的（正确的）定理：存在一个实数，它不能用有限个汉字来表达。这是因为，有限长的汉字字符串是可数的，而实数是不可数的。更有趣的是，这个定理的证明必然是非构造性的。</p>
<p> <br>
 <br>
<strong>两边同时取导数 (1)</strong></p>
<p>    取一个正整数 N 。则有</p>
<p>      N^2 = N + N + N + … + N （ N 个 N ）</p>
<p>    两边同时取导数，有</p>
<p>      2N = 1 + 1 + 1 + … + 1 = N</p>
<p>    两边同时除以 N ，得</p>
<p>      2 = 1</p>
<p>    数学威武！</p>
<p> <br>
 </p>
<p>    这个推理是有问题的（废话）。随着 N 的增加，等式右边的 N 的个数却没变，因此 N^2 的增长率比等式右边更大。</p>
<p> <br>
<strong>两边同时取导数 (2)</strong></p>
<p>    令 x = 1 ，两边同时取导数， 1 = 0 。哈哈！</p>
<p>    问题出在哪儿？这里有意略去答案不写，呵呵。</p>
<p> <br>
<strong>链式法则也出错？</strong></p>
<p>    下面这个例子告诉我们，数学符号混淆不得，分清每个数学符号的意义有多重要。</p>
<p>    定义 f(x, y) := (x + y)^2 ，然后令 x = u – v ，令 y = u + v 。我们有：</p>
<p>      ∂f/∂x = ∂f/∂y = 2(x + y)<br>
      ∂x/∂v = -1<br>
      ∂y/∂v = +1</p>
<p>    根据链式法则，有</p>
<p>      ∂f/∂v = (∂f/∂x)·(∂x/∂v) + (∂f/∂y)·(∂y/∂v)<br>
        = 2(x + y)·(-1) + 2(x + y)·(1)<br>
        = 0</p>
<p>    但是， f(u, v) = (u + v)^2 ，因此 ∂f/∂v = 2(u + v) = 2y 。这岂不是说明 y = 0 了么？但是，条件里并没有什么地方规定 y = 0 呀？这怎么回事？</p>
<p> <br>
 </p>
<p>    问题出在，整个推理过程把两个不同的函数都用 f 来表示了。事实上，一个函数是 f(x, y) := (x + y)^2，另一个函数是 F(u, v) = f(u – v, u + v) = (2u)^2 。链式法则求的并不是 ∂f/∂v ，而是 ∂F/∂v 。</p>
<p> <br>
<strong>不定积分的困惑</strong></p>
<p>    我们尝试用分部积分法求解 ∫ (1/x) dx 。<br>
    令 u = 1/x ， dv = dx<br>
      du = -1/x^2 dx ， v = x<br>
    于是 ∫ (1/x) dx = (1/x)x – ∫ x(-1/x^2) dx = 1 + ∫ (1/x) dx</p>
<p>    怎么回事？</p>
<p> <br>
 </p>
<p>    不怎么回事。这个等式是成立的。别忘了，不定积分的最后结果要加上一个常数 C 。<br>
    记得学高数时，求一积分，两哥们儿做出来的答案差别很大，而且试了很久也没能把其中一个答案变形成另外一个。后来终于恍然大悟：他们的答案是有可能不相同的，可以差一个常数嘛！</p>
<p> <br>
<strong>貌似漏掉了什么</strong></p>
<p>    很多 Goldbach 猜想、孪生素数猜想的“证明”都栽在了下面这个有时候很不容易注意到漏洞。</p>
<p>    让我们来证明一个看上去有些不可思议的结论： π^e 是一个有理数。首先注意到，对任意有理数 r ， log<sub>π</sub>r 都是无理数，否则令 s = log<sub>π</sub>r ，我们就有 π^s = r ，这与 π 是超越数矛盾。<br>
    现在，假设 π^e 是无理数，也就是说对任意有理数 r ， π^e 都不等于 r 。这也就是说，对任意一个 r ， log<sub>π</sub>π^e 都不等于 log<sub>π</sub>r 。由前面的结论， log<sub>π</sub>π^e 就不等于任意一个无理数。但 log<sub>π</sub>π^e 是等于 e 的，这与 e 的无理性矛盾了。因此，我们的假设是错的—— π^e 是一个有理数。</p>
<p> <br>
 </p>
<p>    对于有理数 r ， log<sub>π</sub>r 确实是无理数；但遍历所有的有理数 r ，并不能让 log<sub>π</sub>r 遍历所有的无理数，而 e 正好就等于某个漏掉的无理数。<br>
    不过，也不要想当然地认为， π^e 当然是一个无理数。目前为止， π^e 是否有理还是一个谜。<br>
 </p>
			 ]]></content>
<pubDate>2010-09-25T23:51:57+00:00</pubDate>
<guid>http://www.matrix67.com/blog/archives/3718</guid>
<author><![CDATA[ 顾森 ]]></author>
</item>
<item>
<title><![CDATA[ 数学不只是一堆公式，正如天文学不只是一堆望远镜 ]]></title>
<link>http://www.matrix67.com/blog/archives/3743</link>
<content><![CDATA[ 
		<p><img alt="image placeholder" >
<p><span id="more-3743"></span></p>
<p>厌倦数学的人往往以为，数学不过就是一堆公式。可惜他们没有看到这些公式后面的数学之美。今天看到一段 <a href="http://www.youtube.com/watch?v=tl8VZV2RK-k">YouTube 视频</a>，第一次听到“数学公式就像天文望远镜”这一绝妙的比喻。于是制作了这张图片，献给所有痴迷的数学爱好者，也献给所有由于各种原因没喜欢上数学的朋友。<br>
 </p>
			 ]]></content>
<pubDate>2010-09-26T22:44:28+00:00</pubDate>
<guid>http://www.matrix67.com/blog/archives/3743</guid>
<author><![CDATA[ 顾森 ]]></author>
</item>
<item>
<title><![CDATA[ 来自圣经的算法 ]]></title>
<link>http://www.matrix67.com/blog/archives/3748</link>
<content><![CDATA[ 
		<p>    《来自圣经的证明》收集了数十个简洁而优雅的数学证明，迅速赢得了大批数学爱好者的追捧。如果还有一本《来自圣经的算法》，哪些算法会列入其中呢？最近，有人在 <a href="http://cstheory.stackexchange.com/questions/189/algorithms-from-the-book">StackExchange</a> 上发起了提问，向网友们征集那些来自圣经的算法。众人在一大堆入围算法中进行投票，最终得出了呼声最高的五个算法：</p>
<p><strong>第五名： BFPRT 算法</strong><br>
    1973 年， Blum 、 Floyd 、 Pratt 、 Rivest 、 Tarjan 集体出动，合写了一篇题为 “Time bounds for selection” 的论文，给出了一种在数组中选出第 k 大元素的算法，俗称”中位数之中位数算法”。依靠一种精心设计的 pivot 选取方法，该算法从理论上保证了最坏情形下的线性时间复杂度，打败了平均线性、最坏 O(n^2) 复杂度的传统算法。一群大牛把递归算法的复杂度分析玩弄于<del datetime="2010-09-29T05:21:01+00:00">骨掌</del>股掌之间，构造出了一个当之无愧的来自圣经的算法。</p>
<p><span id="more-3748"></span><br>
<strong>第四名：快速排序</strong><br>
    快速排序算法是 1960 年由英国计算机科学家 C.A.R. Hoare 发明的，是一种既高效又简洁的排序方法，现在已是学习算法的必修内容之一。快速排序的思想并不复杂，妙就妙在那个线性的数据分割过程，而真正最牛 B 的则是对整个算法的时间复杂度分析。我曾写过一个<a href="http://www.matrix67.com/blog/archives/172">快速排序平均 O(n log n) 的证明</a>，分析过程绝对值得欣赏。</p>
<p> <br>
<strong>第三名：并查集</strong><br>
    严格地说，并查集是一种数据结构，它专门用来处理集合的合并操作和查询操作。并查集巧妙地借用了树结构，使得编程复杂度降低到了令人难以置信的地步；用上一些递归技巧后，各种操作几乎都能用两行代码搞定。而路径压缩的好主意，更是整个数据结构的画龙点睛之笔。并查集的效率极高，单次操作的时间复杂度几乎可以看作是常数级别；但由于数据结构的实际行为难以预测，精确的时间复杂度分析需要用到不少高深的技巧。</p>
<p> <br>
<strong>第二名： KMP 算法</strong><br>
    KMP 算法是一种非常有效的字符串匹配算法，它告诉了人们一个有些反直觉的事实：字符串匹配竟然能在线性时间里完成！整个算法写成代码不足 10 行，但其中蕴含的天才般的奇妙思想让算法初学者们望而却步，而它的复杂度分析则更是堪称经典。</p>
<p> <br>
<strong>第一名：辗转相除法</strong><br>
    辗转相除法是 Euclid 的《几何原本》中提到的一种寻找两个数的最大公因数的算法。无论是简洁的算法过程，还是深刻的算法原理，抑或是巧妙的复杂度分析，都称得上是来自圣经的算法。而扩展的辗转相除法则构造性地证明了，对任意整数 a 和 b ，存在一对 x 、 y 使得 ax + by = gcd(a, b) 。这一结论的普遍性和实用性让它成为了数论中的基本定理之一，在很多数学问题中都能看到它的身影。</p>
			 ]]></content>
<pubDate>2010-09-28T17:41:21+00:00</pubDate>
<guid>http://www.matrix67.com/blog/archives/3748</guid>
<author><![CDATA[ 顾森 ]]></author>
</item>
<item>
<title><![CDATA[ 指数级增长毕竟是指数级增长 ]]></title>
<link>http://www.matrix67.com/blog/archives/3753</link>
<content><![CDATA[ 
		<p>    最近，一道 Google 校园招聘面试题红遍了整个中文网络：</p>
<blockquote><p>    现在北京有一套房子，价格 200 万，假设房价每年上涨 10% ，一个软件工程师每年固定能赚 40 万。如果他想买这套房子，不贷款，不涨工资，没有其他收入，每年不吃不喝不消费，那么他需要几年才能攒够钱买这套房子？<br>
    A. 5年<br>
    B. 7年<br>
    C. 8年<br>
    D. 9年<br>
    E. 永远买不起</p></blockquote>
<p>    并不让人感到意外，这道题的答案选 E 。这背后的数学道理就是，线性的增长速度毕竟是赶不上指数级的增长速度的。我用 Mathematica 画了一个简单的图，按照题目所给数据模拟了 50 年内的房价和收入情况。可见，尽管底数仅仅是 1.1 ，指数级增长的威力也一如既往的令人震撼。</p>
<p> <br>
    <img alt="image placeholder" >
 <br>
    唉⋯⋯什么时候工资也能成比地增长就好了。<br>
 </p>
			 ]]></content>
<pubDate>2010-09-29T12:30:22+00:00</pubDate>
<guid>http://www.matrix67.com/blog/archives/3753</guid>
<author><![CDATA[ 顾森 ]]></author>
</item>
<item>
<title><![CDATA[ Morpion Solitaire的新纪录 ]]></title>
<link>http://www.matrix67.com/blog/archives/3763</link>
<content><![CDATA[ 
		<p>    三年前，我曾经给大家介绍过一个单人版的五子棋游戏—— <a href="http://www.matrix67.com/blog/archives/340">Morpion Solitaire</a> 。这个游戏通常分作 5T 和 5D 两种规则不同的版本。初始时，棋盘上画有 36 个棋子，它们排成一个空心十字架的形状。接下来，你需要在棋盘上添加一个新的棋子，使得它与某四个已有的棋子连成一条线。如此重复，直到在 5T 或者 5D 的规则下再没有满足要求的走法为止。在 5T 规则中，同一方向上的连线不允许有重合； 5D 规则则更加严格，同一方向上的连线在棋子处相接也是不允许的。由于 Morpion Solitaire 游戏不受时间和空间限制，因此它成为了消磨时间的一大利器。不管是在课堂上，餐馆里，还是在飞机上，地铁上，你都可以抓起纸和笔，向自己的最高纪录挑战。</p>
<p>  <img alt="image placeholder" >
<p><span id="more-3763"></span><br>
    这个游戏看似简单，实则变幻莫测，一步之差就可能导致最后的成绩大变。在两种规则下，最多分别能走多少步，至今仍是一个谜。 5T 游戏的最高纪录一直停留在 170 步，它是 1976 年由 Charles-Henri Bruneau 用笔和纸玩出来的； 5D 游戏的世界纪录保持者则是 Tristan Cazenave ，他在 2008 年利用计算机找到了一种 80 步的解法。不过最近，这两项纪录都被打破了。更牛 B 的是，打破这两项纪录的是同一个人—— Christopher Rosin 。<br>
    Christopher Rosin 发明了一个很强大的新算法，用 C++ 写了一个程序，最终在 8 月 16 日得到了一个 172 步的 5T 解法，而以前的那些计算机程序最多只生成了 146 步的解。仅仅是 5 天之后， Christopher Rosin 借助同样的算法又找到了 5D 的 82 步解，而得到这个结果仅仅花了计算机一小时的计算时间。<br>
    下图分别是 Christopher Rosin 的 5T 游戏 172 步解和 5D 游戏 82 步解，点击可以查看大图。更多信息参见：</p>
<p>      <a href="http://www.morpionsolitaire.com/English/News1008.htm">http://www.morpionsolitaire.com/English/News1008.htm</a></p>
<p> <br>
 <br>
<a href="http://www.morpionsolitaire.com/Grid5T172Rosin+.gif"><img alt="image placeholder" >
<p> <br>
 <br>
<a href="http://www.morpionsolitaire.com/Grid5D82Rosin+.gif"><img alt="image placeholder" >
			 ]]></content>
<pubDate>2010-10-01T00:48:26+00:00</pubDate>
<guid>http://www.matrix67.com/blog/archives/3763</guid>
<author><![CDATA[ 顾森 ]]></author>
</item>
<item>
<title><![CDATA[ UyHiP趣题：100囚犯之黑白手套 ]]></title>
<link>http://www.matrix67.com/blog/archives/3771</link>
<content><![CDATA[ 
		<p>    <a href="http://brand.site.co.il/riddles/201009q.html">上个月的 UyHiP 趣题</a>非常妙，个人认为是近几个月里最漂亮的一道谜题了。<br>
    典狱长要和 100 个囚犯玩这么一个游戏。典狱长给每个囚犯发两个手套，一个黑色的，一个白色的。之后，每个囚犯的额头上都会写上一个实数，所有这 100 个实数互不相同。每个囚犯都能看到其他 99 个囚犯前额上所写的数，但不能看到自己的数。接下来，每个囚犯必须独立地决定把哪个手套戴在哪只手上。等到所有囚犯都戴好了手套，典狱长会把他们按照前额上所写的数从小到大地排好，并要求他们手牵着手站成一横排。如果每两只握在一起的手都戴着相同颜色的手套，那么所有 100 个囚犯都可以被释放。<br>
    在游戏开始前，他们可以聚在一起，商量一个对策。游戏开始后，囚犯与囚犯之间不允许有任何交流。囚犯们能够保证全部释放吗？</p>
<p><span id="more-3771"></span><br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
    答案：真的有这么一个策略，使得囚犯们保证能被释放。为了便于叙述，我们换一种方式来描述这个游戏：囚犯们需要根据自己看到的情况，独立地在一张小纸条上写下字母 A 或 B （对应着“左黑右白”和“左白右黑”两种决策）；然后，把囚犯按前额的数从小到大排序，依次念出囚犯所写的字母，如果 A 和 B 自始至终一直交替出现，囚犯们就能被释放。<br>
    完美策略的存在性并不太令人吃惊。如果只有两个囚犯，显然有一个必胜的方案：只需要事先约定不管怎样都是你写 A 我写 B 就行了。如果有更多的囚犯，下面的策略可以保证他们获胜。<br>
    不妨把囚犯们从 1 到 n 进行编号（这个编号可以由囚犯们在游戏开始前约定好）。把囚犯们按额头上的数重新排序后，我们就得到了一个从 1 到 n 的排列。比方说有 8 个囚犯，他们额头上的数分别是：</p>
<p><code>囚犯编号： 1   2   3   4   5   6   7   8<br>
额上实数：0.1 0.4 0.6 0.2 0.8 1.1 0.5 1.5</code></p>
<p>    那么重新排序后得到的排列是：</p>
<p>      1, 4, 2, 7, 3, 5, 6, 8</p>
<p>    但是，由于囚犯不知道自己额头上的数，因此每个囚犯只能“看见”这个排列除他之外剩下的部分。比方说，囚犯 2 就只能看到另外 7 个人形成的不完整排列：</p>
<p>      1, 4, 7, 3, 5, 6, 8</p>
<p>    如果在一个序列中，位于前面的某个数比位于后面的某个数更大，我们就说这两个数是一对“逆序对”。囚犯们的策略是，数一数自己看到的序列中有多少逆序对，如果逆序对的个数与他自己的编号同奇偶，则回答字母 A ，否则回答字母 B 。比方说，例子中囚犯 2 能看到的逆序对有 (4,3), (7,3), (7,5), (7,6) 共 4 个，自己的编号是 2 ，因此他将回答 A 。而囚犯 7 将看到序列</p>
<p>      1, 4, 2, 3, 5, 6, 8</p>
<p>    他只能看到 (4,2), (4,3) 两个逆序对，自己的编号却是奇数 7 ，因此他将回答 B 。你会发现，囚犯 2 和囚犯 7 这两个位置相邻的人恰好一个回答了 A 一个回答了 B 。这并不是一个巧合。我们将以这两个囚犯为例，说明位置相邻的囚犯看到的逆序对个数的奇偶性相同，当且仅当他们编号的奇偶性不同。</p>
<p>    注意到，两个囚犯看到的序列都形如</p>
<p>      1, 4, ?, 3, 5, 6, 8</p>
<p>    其中问号处就是对方的编号。在此序列中，不含问号项的逆序对是囚犯 2 和囚犯 7 都能看见的。囚犯 2 能看见的额外的逆序对，一定是在数字 7 和别的数之间产生的；而囚犯 7 能看见的额外的逆序对，则是在数字 2 和别的数之间产生。注意到，对于所有小于 2 或者大于 7 的数 k ，不管 k 在序列中的什么位置， 2 和 k 、 7 和 k 要么都是逆序对，要么都不是逆序对；而对于序列中那些大小严格介于 2 和 7 之间的数 k ，要么 2 和 k 构成一对逆序对，要么 7 和 k 构成一对逆序对。也就是说，囚犯 2 和囚犯 7 看到的逆序对个数是否同奇偶，取决于位于 2 和 7 之间的数是否有偶数个，也就是取决于 2 和 7 是否不同奇偶。<br>
    类似地，我们可以说明，按照额上的实数排序后，相邻两个囚犯一定都写下了不同的字母。因此，他们能保证 100% 地通过游戏，获得释放。</p>
			 ]]></content>
<pubDate>2010-10-02T13:16:55+00:00</pubDate>
<guid>http://www.matrix67.com/blog/archives/3771</guid>
<author><![CDATA[ 顾森 ]]></author>
</item>
<item>
<title><![CDATA[ 《新知客》趣题专栏 2010.10 ]]></title>
<link>http://www.matrix67.com/blog/archives/3791</link>
<content><![CDATA[ 
		<p>目前，我正在《新知客》杂志上主持一个趣题栏目。每月杂志发行后，我将在 Blog 上同步更新。点击 <a href="http://www.matrix67.com/blog/archives/tag/%E3%80%8A%E6%96%B0%E7%9F%A5%E5%AE%A2%E3%80%8B%E8%B6%A3%E9%A2%98">这里</a> 可以查看往期题目。</p>
<p><strong>推理</strong><br>
1. 在每一个小题中，我们都按照某种属性把 26 个字母分成了两组。请你找出每个小题中的分组依据。</p>
<p>  (1) CEFGHIJKLMNSTUVWXYZ ABDOPQR<br>
  (2) AEFHIKLMNTVWXYZ BCDGJOPQRSU<br>
  (3) COPSUVWXZ ABDEFGHIJKLMNQRTY<br>
  (4) ABCDEFGQRSTVWXZ HIJKLMNOPUY<br>
  (5) CDILMVX ABEFGHJKNOPQRSTUWYZ</p>
<p> <br>
2. 在面临二选一的情形犹豫不决时，很多人喜欢用抛硬币来解决问题。但是，由于硬币的两侧轻重不一，因此正反两面出现的几率并不是绝对均等的。这样的话，我们还能让硬币来帮助我们做决定吗？于是就有了下面这个有趣的问题：<br>
假如你手中有一枚不公平的硬币，其中一面朝上的概率更大一些（但是你不知道具体大了多少）。你能想办法用这枚硬币“模拟”出一枚公平的硬币吗？</p>
<p><span id="more-3791"></span><br>
 <br>
<strong>计算</strong><br>
1. 一根棍子的左端有 6 只间隔相等的蚂蚁，它们正以一个相同的速度向右爬行；棍子的右端也有 6 只蚂蚁，它们也在以同样的速度向左爬行。如果两个蚂蚁相向而行撞在了一起，它们会同时掉头往回爬行。如果某只蚂蚁爬出了棍子的端点，它会从棍子上掉下去。请问，到所有的蚂蚁都掉下棍子的时候，蚂蚁与蚂蚁之间一共发生了多少次碰撞？</p>
<p><img alt="image placeholder" >
<p> <br>
2. 有这么一种赌博游戏：玩家选择 1 到 6 之间的一个数，并下 1 块钱的赌注。然后，庄家同时抛掷三颗骰子。如果这三颗骰子中都没有你选的数，你将输掉那 1 块钱；如果有一颗骰子的点数是你选的数，那么你不但能收回你的赌注，还能反赢 1 块钱；如果你选的数出现了两次，你将反赢 2 块钱；如果三颗骰子的点数都是你选的数，你将反赢 3 块钱。<br>
这个赌博游戏对玩家有利还是对庄家有利？</p>
<p> <br>
 <br>
<strong>填图</strong><br>
1. 左图的每个小方格内都填了一个不同的数，神奇的是方阵中的每一行、每一列和两条对角线上的三个数之和都相等（都等于 15 ）。现在，你能否在右图的每个小方格内填入一个不同的数（不一定是九个连续的数），使得方阵中的每一行、每一列和两条对角线上的三个数之乘积都相等？</p>
<p> <img alt="image placeholder" >
<p> <br>
2. 从最左下角的小方格出发，画出一条到达右上角的路径。你的路径必须要经过每个灰色2×3方格中的其中两个小格。左图是一个示例。</p>
<p> <img alt="image placeholder" >
<p> <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 </p>
<p><strong>推理</strong></p>
<p>1. 在每一个小题中，我们都按照某种属性把 26 个字母分成了两组。请你找出每个小题中的分组依据。</p>
<p>  (1) CEFGHIJKLMNSTUVWXYZ ABDOPQR<br>
  (2) AEFHIKLMNTVWXYZ BCDGJOPQRSU<br>
  (3) COPSUVWXZ ABDEFGHIJKLMNQRTY<br>
  (4) ABCDEFGQRSTVWXZ HIJKLMNOPUY<br>
  (5) CDILMVX ABEFGHJKNOPQRSTUWYZ</p>
<p>答案：(1) 字母中是否含有封闭区域 (2) 字母是否仅由直线笔划组成 (3) 字母的大小写形状是否一样 (4) 打字时用左手按键还是用右手按键 (5) 是否为罗马数字所用的字母</p>
<p> <br>
 <br>
2. 在面临二选一的情形犹豫不决时，很多人喜欢用抛硬币来解决问题。但是，由于硬币的两侧轻重不一，因此正反两面出现的几率并不是绝对均等的。这样的话，我们还能让硬币来帮助我们做决定吗？于是就有了下面这个有趣的问题：<br>
假如你手中有一枚不公平的硬币，其中一面朝上的概率更大一些（但是你不知道具体大了多少）。你能想办法用这枚硬币“模拟”出一枚公平的硬币吗？</p>
<p>答案：考虑连续抛掷两次硬币后的结果：如果结果是一正一反，那么先正后反和先反后正的概率一定是相同的（即使这枚硬币是不公平的）。借助这一点，我们就有了下面这个方案：连续抛掷两次硬币，如果两次抛掷的结果分别是“正”、“反”，就视作最终结果为“正”；如果两次抛掷的结果分别是“反”、“正”，就视作最终结果为“反”；如果是其它情况，就重新再来。</p>
<p> <br>
 <br>
<strong>计算</strong></p>
<p>1. 一根棍子的左端有 6 只间隔相等的蚂蚁，它们正以一个相同的速度向右爬行；棍子的右端也有 6 只蚂蚁，它们也在以同样的速度向左爬行。如果两个蚂蚁相向而行撞在了一起，它们会同时掉头往回爬行。如果某只蚂蚁爬出了棍子的端点，它会从棍子上掉下去。请问，到所有的蚂蚁都掉下棍子的时候，蚂蚁与蚂蚁之间一共发生了多少次碰撞？</p>
<p><img alt="image placeholder" >
<p> <br>
答案： 36 次。我们不妨把两只蚂蚁相撞后双双调头往回走看作是它们互相穿过了对方的身体继续向前爬行，此时答案就很显然了。</p>
<p> <br>
 <br>
2. 有这么一种赌博游戏：玩家选择 1 到 6 之间的一个数，并下 1 块钱的赌注。然后，庄家同时抛掷三颗骰子。如果这三颗骰子中都没有你选的数，你将输掉那 1 块钱；如果有一颗骰子的点数是你选的数，那么你不但能收回你的赌注，还能反赢 1 块钱；如果你选的数出现了两次，你将反赢 2 块钱；如果三颗骰子的点数都是你选的数，你将反赢 3 块钱。<br>
这个赌博游戏对玩家有利还是对庄家有利？</p>
<p>答案：这个赌博游戏是真实存在的，它叫做“骰子掷好运” (Chuck-a-Luck) ，在美国很多赌场都能玩得到。对玩家而言，这个游戏看上去相当诱人：用三颗骰子掷出 6 个数中的一个，怎么也会有一半的概率砸中吧，那玩家起码有一半的时间是在赚钱，应当是稳赚不赔呀。这种直观的想法其实是错误的。一颗骰子的点数有 5/6 的概率不是你选的数，若三颗骰子的点数都不是你所选的数，其概率就应为 5/6 的 3 次方，大约是 57.87% 。也就是说，大多数时候你都是在赔钱的。<br>
不过，考虑到赚钱时玩家有机会成倍地赢钱，这能否把输掉的钱赢回来呢？一些更为细致的计算可以告诉我们，即使考虑到这一点，游戏对玩家仍然是不利的：平均每赌 1 块钱就会让玩家损失大约 8 分钱。在这里，我们避免繁琐的计算，而是用一种简单而有趣的解释来说明，庄家的确是这个游戏的大赢家。<br>
假设有 6 名玩家同时在玩这个游戏，这 6 个人分别赌 6 个不同的点数。抛掷骰子后，如果三颗骰子的点数都不一样，庄家赢 3 块亏 3 块；如果有两颗骰子点数一样，庄家赢 4 块亏 3 块；如果三颗骰子的点数全一样，庄家赢 5 块亏 3 块。也就是说，无论抛掷骰子的结果如何，庄家都不会赔钱！虽然一轮游戏下来有的玩家赚了，有的玩家亏了，但从整体来看这 6 名玩家是在赔钱的，因此平均下来每个玩家也是在不断输钱的。</p>
<p> <br>
 <br>
<strong>填图</strong></p>
<p>1. 左图的每个小方格内都填了一个不同的数，神奇的是方阵中的每一行、每一列和两条对角线上的三个数之和都相等（都等于 15 ）。现在，你能否在右图的每个小方格内填入一个不同的数（不一定是九个连续的数），使得方阵中的每一行、每一列和两条对角线上的三个数之乘积都相等？</p>
<p> <img alt="image placeholder" >
<p> <br>
答案：满足要求的填法不是唯一的，但下面这个答案或许是最简单的一种。依次观察题目左图所给的方阵中的每个小方格：方格里的数是几，在新方阵的相应位置中就填入 1 后面加多少个 0 。显然，新方阵中的每一行、每一列和两条对角线上的三个数之乘积都是 1 后面 15 个 0 。</p>
<p> <img alt="image placeholder" >
<p> <br>
 <br>
2. 从最左下角的小方格出发，画出一条到达右上角的路径。你的路径必须要经过每个灰色2×3方格中的其中两个小格。左图是一个示例。</p>
<p> <img alt="image placeholder" >
<p>答案：</p>
<p> <img alt="image placeholder" >
			 ]]></content>
<pubDate>2010-10-09T18:03:58+00:00</pubDate>
<guid>http://www.matrix67.com/blog/archives/3791</guid>
<author><![CDATA[ 顾森 ]]></author>
</item>
<item>
<title><![CDATA[ 我刚才说的是谎话 ]]></title>
<link>http://www.matrix67.com/blog/archives/3795</link>
<content><![CDATA[ 
		<p>（注：本文纯属搞笑，请勿当真）</p>
<p>理发师常论：一个理发师只给别人理发。</p>
<p>说谎者常论：我刚才说的是谎话。</p>
<p>Berry 常论：最小的能用 20 个以内的汉字描述的正整数。</p>
<p>万能上帝常论：上帝是万能的，他甚至为人类创造了一个“万能上帝悖论”，搞得大伙儿现在还在纠结中。</p>
<p>突击测验常论：老师决定在周一至周五的某一天进行一次出其不意的测验，但是他没有告诉学生。测验当天，所有学生都没有预料到。</p>
<p><span id="more-3795"></span><br>
生日常论：三个人中至少有两个人的生日相同，其概率约为 0.008 。</p>
<p>Benford 常论： 0 到 9 十个数字在统计数据末位出现的机会均等。</p>
<p>Monty Hall 常论：两扇门后面是羊，一扇门后面是车。你选择了其中一扇门。主持人给你一次更改选择的机会。此时，你换不换都一样。</p>
<p> <br>
Zeno 常论：为了走到 A 点，光想是没有用的。</p>
<p>Banach–Tarski 常论：用一把刀把一个西瓜切成五块后，你能把它们拼成一个和原来大小形状一模一样的西瓜。</p>
<p>Hilbert 旅馆常论：一家旅馆有 100 个房间，每个房间都有客人入住。这时又走进来一位客人。前台说：“抱歉，今天满房了”。来客转身离开。</p>
<p> <br>
Schrödinger 常论：把一只猫放进充满毒气的封闭盒子里，过一会儿它就死了。</p>
<p>孪生子常论：大毛和二毛是双胞胎，他俩一样大。大毛到国外留学一年，回来时发现大毛和二毛还是一样大。</p>
<p>外祖父常论：你的孙子从未来穿越到现在，准备动手杀你。你说：“傻 B ，仔细想想，你敢杀我吗？”孙子想了想，就走了。</p>
<p> <br>
本文绝大多数创意来自： <a href="http://scottaaronson.com/blog/?p=285">http://scottaaronson.com/blog/?p=285</a></p>
			 ]]></content>
<pubDate>2010-10-10T19:09:09+00:00</pubDate>
<guid>http://www.matrix67.com/blog/archives/3795</guid>
<author><![CDATA[ 顾森 ]]></author>
</item>
<item>
<title><![CDATA[ Cramer悖论：线性代数的萌芽 ]]></title>
<link>http://www.matrix67.com/blog/archives/3803</link>
<content><![CDATA[ 
		<p>    在准备<a href="http://www.matrix67.com/blog/archives/3795">前一篇日志</a>时，我查阅了很多经典的悖论。我发现，虽说数学悖论大多是一些让人越想越糊涂的逻辑思维游戏，但也有不少悖论来自于实实在在的数学问题。在缺乏现代数学工具的年代，这些反直觉的结论和看似不可调和的矛盾让数学家们百思不得其解，那些最难解决的悖论甚至为数学新分支的开创带来了足够的动机。不太为人熟知的 Cramer 悖论就是一个漂亮的例子。</p>
<p>    在描述 Cramer 悖论之前，让我们先来考虑一个简单的情况。两条直线交于一点。反过来，过一点可以做两条不同的直线。事实上，过一点可以做无数条直线。确定一条直线需要两个点才够。一切都很正常。<br>
    现在，考虑平面上的两条三次曲线。由于将两个二元三次方程联立求解，最多可以得到 9 组不同的解，因此两条三次曲线最多有 9 个交点。另外，三次曲线的一般形式为</p>
<p>      x^3 + a·x^2·y + b·x·y^2 + c·y^3 + d·x^2 + e·x·y + f·y^2 + g·x + h·y + i = 0</p>
<p>    这里面一共有 9 个未知系数。代入曲线上的 9 组不同的 (x, y) ，我们就能得出 9 个方程，解出这 9 个未知系数，恢复出这个三次曲线的原貌。也就是说，平面上的 9 个点唯一地确定了一个三次曲线。这次貌似就出问题了： “两条三次曲线交于 9 个点” 和 “ 9 个点唯一地确定一条三次曲线” 怎么可能同时成立呢？既然这 9 个点是两条三次曲线所共有的，那它们究竟会“唯一地”确定出哪条曲线呢？在没有线性代数的年代，这是一个令人匪夷所思的问题。</p>
<p><span id="more-3803"></span><br>
    Cramer 和 Euler 是同一时代的两位大数学家。他们曾就代数曲线问题有过不少信件交流。上面这个问题就是 1744 年 9 月 30 日 Cramer 在给 Euler 的信中提出来的。在信中， Cramer 摆出了两个稍作思考便能看出显然成立的事实：一条三次曲线能用 9 个点唯一地确定下来，两条三次曲线可能产生出 9 个交点。 Cramer 向 Euler 提出了自己的疑问：这两个结论怎么可能同时成立呢？</p>
<p>    Euler 心中的疑问不比 Cramer 的少。接下来的几年里，他都在寻找这个矛盾产生的源头。 1748 年， Euler 发表了一篇题为 Sur une contradiction apparente dans la doctrine des lignes courbes （关于曲线规律中的一个明显的矛盾）的文章，尝试着解决这一难题。正如大家所想，矛盾的源头就是， 9 个点不见得能唯一地确定出三次曲线的方程，因为不是每个点的位置都能给我们带来足够的信息。</p>
<p>    Euler 试图向人们解释这样一件事情：曲线上的 9 个点虽然给出了 9 个不同的方程，但有时它们并不能唯一地解出那 9 个未知数，因为有些方程是废的。在没有线性代数的年代，解释这件事情并不容易。 Euler 举了一个最简单的例子：方程组</p>
<p>      3x − 2y = 5<br>
      4y = 6x − 10</p>
<p>    表面上存在唯一解，但事实上两个方程的本质相同——第一个方程乘以 2 再移项后就直接变成第二个方程了。换句话说，后一个方程并没有给我们带来新的信息，有它没它都一样。当然，这只是一个最为简单的例子。在当时，真正让人大开眼界的则是 Euler 文中给出的三元一次方程组：</p>
<p>      2x − 3y + 5z = 8<br>
      3x − 5y + 7z = 9<br>
      x − y + 3z = 7</p>
<p>    这个方程组也没有唯一解，原因就很隐蔽了：后两个方程之和其实是第一个方程的两倍，换句话说第一个方程本来就能由另外两个方程推出来。因此，整个方程组本质上只有两个不同的方程，它们不足以确定出三个未知数来。 Euler 还给出了一个四元一次方程组的例子，向人们展示了更加复杂的情况。<br>
    类似地， 9 个九元一次方程当然也会因为出现重复信息而不存在唯一解，不过具体情况几乎无法预料：很可能方程 (1) 就是方程 (2) 和方程 (5) 的差的多少多少倍，也有可能方程 (7) 和 (9) 的差恰是前三个方程的和。究竟什么叫做一个方程“提供了新的信息”，用什么来衡量一个方程组里的信息量，怎样的方程组才会有唯一解？ Euler 承认，“要想给出一个一般情况下的公式是很困难的”。</p>
<p>    此时大家或许能体会到， Euler 提出的这些遗留问题太具启发性了，当时的数学研究者们看到之后必然是浑身血液沸腾。包括 Cramer 在内的数学家们沿着 Euler 的思路继续想下去，一个强大的数学新工具——线性代数——逐渐开始成型。没错，这个 Cramer 正是后来提出线性代数一大基本定理—— Cramer 法则——的那个人。</p>
<p>参考资料：<br>
<a href="http://en.wikipedia.org/wiki/Cramer%27s_rule">http://en.wikipedia.org/wiki/Cramer’s_paradox</a><br>
<a href="http://www.maa.org/editorial/euler/How%20Euler%20Did%20It%2010%20Cramers%20Paradox.pdf">http://www.maa.org/editorial/euler/How Euler Did It 10 Cramers Paradox.PDF</a></p>
			 ]]></content>
<pubDate>2010-10-11T15:37:24+00:00</pubDate>
<guid>http://www.matrix67.com/blog/archives/3803</guid>
<author><![CDATA[ 顾森 ]]></author>
</item>
<item>
<title><![CDATA[ 趣题：用树来表示数（已更新） ]]></title>
<link>http://www.matrix67.com/blog/archives/3819</link>
<content><![CDATA[ 
		<p><img alt="image placeholder" >
<p>你能找出规律吗？明天晚上公布问题答案，并探讨一些延伸话题。</p>
<p><span id="more-3819"></span><br>
Update: 抱歉昨晚有些突发情况，没能更新。</p>
<p>这个问题来自于 <a href="http://www.reddit.com/r/math/comments/doqmi/reddit_what_is_the_most_creativebest_equation_you/">这里</a> 。没错，图中的规律就是：每棵树代表一个质数，一个森林（若干个树放一块儿）就表示这些质数的乘积；如果一个森林表示的是 n ，在这个森林下方添加一个公共根，就构成了新的质数——第 n 个质数。例如， 69 就等于 3 乘以 23 ，它们分别是第 2 个质数和第 3×3 个质数。 131 这个例子更能说明问题，因为它就是第 32 个质数。</p>
<p>这个东西牛就牛在，它建立了一个自然数到森林的一一对应关系（从而也就建立了自然数到有根树的一一对应关系，因为我们可以用添加超级根的方法把森林都视作树）。这种为有根树编号的方法叫做 Matula-Goebel 编号法，参见数列 <a href="http://www.research.att.com/~njas/sequences/A127301">A127301</a> 。</p>
<p>注意到质因数分解在构造一一对应关系中的妙用。正是因为有唯一分解定理，数的表示方法才是唯一的。于是乎，图论和数论巧妙地结合在了一起，实在令人拍案叫绝。</p>
			 ]]></content>
<pubDate>2010-10-12T15:20:03+00:00</pubDate>
<guid>http://www.matrix67.com/blog/archives/3819</guid>
<author><![CDATA[ 顾森 ]]></author>
</item>
<item>
<title><![CDATA[ 趣题：三角形内切圆的一个性质 ]]></title>
<link>http://www.matrix67.com/blog/archives/3832</link>
<content><![CDATA[ 
		<p>  <img alt="image placeholder" >
<p>    动脑时间咯！搞搞几何题，脑子不生锈。作出任意三角形 ABC 的内切圆 ⊙I ，它与 AC 相切于点 N 。过 N 作 AC 的垂线，与 ⊙I 的另一个交点记作 M （因此 MN 就是这个圆的一条直径）。连接并延长 BM ，与 AC 交于点 L 。求证： CN＝AL 。</p>
<p><span id="more-3832"></span></p>
<p> <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
  <img alt="image placeholder" >
<p>    下面这个证明方法很妙：过 M 点作 ⊙I 的切线，与 AB 、 BC 分别交于点 E 、 F 。因此， EF 与 AC 平行。以 B 点为中心，把 △BEF 放大到 △BAC ，则 M 点就会和 L 点重合，而 ⊙I （作为 △BEF 的旁切圆）则会变成 △BAC 的旁切圆 ⊙I’ 。<br>
    下面我们要用到与切线长相关的两个定理：</p>
<p>      (1) 两圆的两条外公切线等长<br>
      (2) 圆外一点到圆的两条切线等长</p>
<p>    由 (1) 可知 XY = ZW ，即 AX + AY = CZ + CW 。由 (2) 可知 AX 、 AY 、 CZ 、 CW 分别等于 AN 、 AL 、 CN 、 CL 。于是有 AN + AL = CN + CL 。等式两边都减去 NL 一段，有 2 * AL = 2 * CN ，结论就证到了。</p>
<p>问题来源：<a href="http://www.cut-the-knot.org/Curriculum/Geometry/PerpIndiameter.shtml">http://www.cut-the-knot.org/Curriculum/Geometry/PerpIndiameter.shtml</a></p>
			 ]]></content>
<pubDate>2010-10-19T18:28:28+00:00</pubDate>
<guid>http://www.matrix67.com/blog/archives/3832</guid>
<author><![CDATA[ 顾森 ]]></author>
</item>
<item>
<title><![CDATA[ 能平铺平面，却不能周期性地平铺平面 ]]></title>
<link>http://www.matrix67.com/blog/archives/3840</link>
<content><![CDATA[ 
		<p>    看看自己脚下的地板——虽然正方形、长方形、正六边形等图形都能平铺整个平面，但平铺的方式却非常无聊，不过是同一种模式不断重复罢了。有没有什么“非平凡”的平铺方案呢？下面就给大家看这样一个图形，加上一些限制条件之后，它仍然能够平铺整个平面，不过平铺出来的结果却非常神奇——它并不能通过简单的重复得到，也就是说它不具有周期性。<br>
    下图就是这个传说中的地板砖（及其镜像）：</p>
<p>  <img alt="image placeholder" >
<p>    拼接时有两个要求：</p>
<p>      (1) 黑色的线条必须连在一起<br>
      (2) 一条边两端的紫色小旗必须朝向相同的方向（如箭头所示，注意两个小旗来自于两个不相邻的砖块）</p>
<p>  <img alt="image placeholder" >
<p><span id="more-3840"></span><br>
    可以证明，用这种六边形（及其镜像）是能够平铺整个平面的，但方案是唯一的——一个有点分形味道的图形。拼接的限制很巧妙地迫使黑色线条构成规模越来越大的三角形，从而使得整个图形在任意方向上都不具有周期性。</p>
<p> <br>
  <img alt="image placeholder" >
<p>    这是首个用单块图形实现的只能非周期地平铺整个平面的砖块，是由 Joan M. Taylor 在今年 9 月发现的。详细的讨论可以看看 <a href="http://arxiv.org/pdf/1003.4279v2">他的论文</a> 。</p>
			 ]]></content>
<pubDate>2010-10-20T12:28:45+00:00</pubDate>
<guid>http://www.matrix67.com/blog/archives/3840</guid>
<author><![CDATA[ 顾森 ]]></author>
</item>
<item>
<title><![CDATA[ 画圈圈和画叉叉的区别 ]]></title>
<link>http://www.matrix67.com/blog/archives/3851</link>
<content><![CDATA[ 
		<p>    给你一张纸，要求你在上面画尽可能多的圆圈，使得所有圆圈都不相交。你最多能画多少个？<br>
    显然，你可以画无穷多个圆圈。事实上，你可以画不可数个圆圈——只需要画出一系列半径长均为无理数的同心圆即可。由于每两个无理数之间都夹有有理数，因此任意两个圆都没挨在一块儿。</p>
<p>    给你一张纸，要求你在上面画尽可能多的叉，使得所有的叉都不相交。你最多能画多少个？<br>
    你可以画无穷多个不相交的叉。画法有很多，下图便是一种方案：</p>
<p>  <img alt="image placeholder" >
<p>    现在问题来了：你能在纸上画出不可数个叉吗？如果可以，请给出一种方案；如果不行，证明之。</p>
<p><span id="more-3851"></span></p>
<p> <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
    答案是否定的。和画圆圈不同，你无法在纸上画不可数个叉。为了证明这一点，首先注意到，在纸上只能容下有限个单位大小的叉（从中心到四个端点距离都是 1 的叉）。这是因为，要想两个单位大小的叉不相交，两个叉的中心的间距必须要大于 1 才行，这就限制了单位大小的叉的总个数。</p>
<p>    可是，纸上的叉可大可小，如何说明所有叉的个数是可数的呢？只需要把纸上的所有叉看作是“尺寸大于 1 的叉”、“尺寸大于 1/2 的叉”、“尺寸大于 1/4 的叉”、“尺寸大于 1/8 的叉”⋯⋯这可数个集合的并集就可以了。由于可数个有限集的并集一定是可数集，因此纸上最多只能有可数个叉。</p>
<p>题目来源：<a href="http://people.sc.fsu.edu/~jburkardt/fun/puzzles/tiny_writing_puzzle.html">http://people.sc.fsu.edu/~jburkardt/fun/puzzles/tiny_writing_puzzle.html</a></p>
			 ]]></content>
<pubDate>2010-10-25T20:59:49+00:00</pubDate>
<guid>http://www.matrix67.com/blog/archives/3851</guid>
<author><![CDATA[ 顾森 ]]></author>
</item>
<item>
<title><![CDATA[ 比乘法更大的是乘方，比乘方更大的是什么？ ]]></title>
<link>http://www.matrix67.com/blog/archives/3857</link>
<content><![CDATA[ 
		<p>    小学时，老师说，由于生活中经常需要把同一个数加很多很多次，因此人们发明了乘法。 a × b 就表示 b 个 a 相加。初中时，老师说，由于生活中经常需要把同一个数乘很多很多次，因此人们发明了乘方。 a ^ b 就表示 b 个 a 相乘。令人失望的是，到了高中时，我们并没有学到更牛 B 的运算符号；大学都快学完了，似乎也没见到乘方升级的苗头。乘方之上究竟是什么？下面，有请今天的主角——超级幂——登场！</p>
<p>    很容易想到，比乘方更大一级的运算就是把 b 个 “a 次方” 重叠起来。不过，这里我们却遇到了一个之前不曾遇到的问题： a ^ a ^ a 究竟应该等于 (a ^ a) ^ a ，还是 a ^ (a ^ a) ？。我们不妨来算一算，不同算法得到的结果相差多远：</p>
<blockquote><p>(2 ^ 2) ^ 2 = 4 ^ 2 = 16<br>
2 ^ (2 ^ 2) = 2 ^ 4 = 16</p></blockquote>
<p>    难道两种不同的计算顺序，得到的结果总是相同的吗？让我们换 a = 3 试试：</p>
<blockquote><p>(3 ^ 3) ^ 3 = 27 ^ 3 = 19683<br>
3 ^ (3 ^ 3) = 3 ^ 27 = 7625597484987</p></blockquote>
<p>    哇，这下可就差远了。可以想象，如果把 “a 次方” 再多迭代几次，从右往左算和从左往右算会差得更多。恐怖的是，当有多重指数时，运算正是按照从右往左算的顺序进行的。试想，若有一种运算专门用来表示 b 个 a 构成的指数塔，这种运算的威力会多大。</p>
<p><span id="more-3857"></span><br>
    1947 年，数学家 Goodstein 发现，不管初始时选取哪个自然数，按照某种预先定义好的规则进行迭代，数列最终将变成 0 。但是，数列收敛到 0 的速度极其缓慢，以至于 Goodstein 需要处理一些连乘方也无法表达出来的大数。于是， Goodstein 便正式提出了这种超越乘方的运算。他把 b 个指数 a 迭代的结果记为 <sup>b</sup>a ，也就是把 b 放在 a 的左上角。在国外的一些论坛上，有时也能看见 a^^b 的表示方法，便于在纯文本格式下的传播。不过，当时 Goodstein 并没有用超级幂 (superexponentiation) 一词，而是用的 tetration 一词。这是由前缀“四” (tetra-) 和迭代 (iteration) 一词合成的，意即排在加法、乘法、乘方之后的第四级运算。事实上， tetration 比 superexponentiation 更常用一些。网上甚至有一个 <a href="http://math.eretrandre.org/tetrationforum/index.php">tetration 论坛</a>，论坛里活跃着一群热爱 tetration 的数学 geek 。</p>
<p>  <img alt="image placeholder" >
<p>    超级幂是一个极为厉害的运算，它的增长速度非常惊人。在很小的数之间进行超级幂运算，就有可能得到一个巨大的天文数字。 <sup>3</sup>2 等于 2 ^ (2 ^ 2) = 16 ，而 <sup>4</sup>2 就等于 2 ^ (2 ^ (2 ^ 2)) = 65536 。那么， <sup>5</sup>2 等于多少呢？它应当等于 2 的 65536 次方，其结果是一个上万位的数。那 <sup>6</sup>2 呢？ <sup>100</sup>100 呢？大家自己去想象吧。</p>
<p>    我们能轻松定义出超级幂的概念，但为什么这个东西却如此“小众”呢？当然，超级幂缺乏很多加减乘除和乘方运算具有的性质，这是一个重要的原因；不过，我想应该还有一个最基本的原因吧——超级幂本身没有什么实用价值。重复对折纸张、增长率的叠加、赌博游戏中的翻番，它们都可以用乘方来描述。实际生活中有什么事情正好能用超级幂来描述的吗？我想应该不会有吧。</p>
<p> <br>
 </p>
<p>  <img alt="image placeholder" >
<p>    人类的想象力是无止境的。即使超级幂已经大到无法用言语描述的地步，大家还是会问，再把 “a 次超级幂” 迭代 b 层（注意运算顺序仍是从最深那一层开始），又会得到什么？是否就得到了第五级的运算呢？或许你马上就意识到了，这样扩展上去是没有尽头的，每一级运算迭代之后都能产生更高一级的运算。虽然此时脑子已经有点乱了，但是数学语言的严格性和理想性告诉我们，利用某种清晰的数学符号和递归法则，我们一定有办法定义出等级越来越高的运算来。<br>
    Goodstein 牛就牛在这儿。他定义了 Goodstein 记号 G(n, a, b) ，来表示 a 与 b 之间的第 n 级运算。当 n = 0 时，规定 G(0, a, b) = b + 1 。也就是说，第零级运算是一个一元运算——自然数的后继。当 n = 1 时，规定边界值 G(1, a, 0) = a ，并规定 G(1, a, b) 表示对 G(1, a, 0) 的值进行上一级操作（后继操作），并重复迭代 b 次，其结果也就是 a 加上 b 。⼀般地，有:</p>
<blockquote><p>G(n, a, b) = G(n – 1, a, G(n, a, b – 1))</p></blockquote>
<p>    其中边界值为</p>
<blockquote><p>G(1, a, 0) = a<br>
G(2, a, 0) = 0<br>
G(3, a, 0) = 1<br>
G(4, a, 0) = 1<br>
G(5, a, 0) = 1<br>
…</p></blockquote>
<p>    这就形式化地给出了第 n 级运算的意思。</p>
<p>    类似的东西不止一次地被提出过。两年前给大家介绍过<a href="http://www.matrix67.com/blog/archives/925">世界上最大的数</a>，当时就用到了 Knuth 箭头记号。这也是一种表示大数的方法，其思想与 Goodstein 记号几乎完全一样。 Ackermann 函数也是一个神速增长的函数，它的定义也有异曲同工之处。很多外文数学论坛则用 a [n] b 来表示 a 与 b 之间的第 n 级运算，是我比较喜欢的一种符号。</p>
<p>    当然，有 a [n] b ，必然会有 a [a [n] b] b ，从而又会有 a [a [a [n] b] b] b ⋯⋯没有最大的数，只有更大的数。人脑和数学是两个神奇的东西，没有什么数大到人脑想不出来，也没有什么数大到数学表示不出来。仅仅在脑中试想一下 100 [100] 100 ，你的思想就已经超越了整个宇宙的大小了。</p>
			 ]]></content>
<pubDate>2010-10-27T10:43:29+00:00</pubDate>
<guid>http://www.matrix67.com/blog/archives/3857</guid>
<author><![CDATA[ 顾森 ]]></author>
</item>
<item>
<title><![CDATA[ Conway常数是怎么得来的？ ]]></title>
<link>http://www.matrix67.com/blog/archives/3870</link>
<content><![CDATA[ 
		<p>    在所有寻找数字规律的谜题中，下面这个难题可能是最有意思的题目之一了：</p>
<blockquote><p>1, 11, 21, 1211, 111221, 312211, 13112221, 1113213211, ⋯⋯<br>
上面这个数列有什么规律？</p></blockquote>
<p>    若你是第一次听到这个问题，你一定会非常喜欢问题的答案：下一个数是对上一个数的描述，比方说 1211 里有 “ 1 个 1 ， 1 个 2 ， 2 个 1 ” ，那么 111221 就是它的下一个数。通常我们把这个数列叫做“外观数列”。<br>
    作为一个让人拍案叫绝的智力游戏，外观数列的故事似乎就已经到此为止了。可是，人们渐渐发现，外观数列里面还大有文章可做。例如，数列中的数虽然会越来越长，但数字 4 始终不会出现。这些优雅的性质成功地引来了数学家们的围观。在对外观数列的研究中，最引人注目的成果之一要归功于英国数学家 John Conway 。 1987 年， John Conway 发现，在这个数列中，相邻两数的长度之比越来越接近一个固定的数。最终，数列的长度增长率将稳定在 30% 左右。事实上，如果把数列中第 n 个数的长度记作 L_n ，则当 n 趋于无穷大的时候， L_(n+1) / L_n 将趋于一个极限。 John Conway 把这个极限用希腊字母 λ 表示，并证明了这个数是 71 次方程</p>
<blockquote><p>x^71 – x^69 – 2*x^68 – x^67 + 2*x^66 + 2*x^65 + x^64 – x^63 – x^62 – x^61 – x^60 – x^59 + 2*x^58 + 5*x^57 + 3*x^56 – 2*x^55 – 10*x^54 – 3*x^53 – 2*x^52 + 6*x^51 + 6*x^50 + x^49 + 9*x^48 – 3*x^47 – 7*x^46 – 8*x^45 – 8*x^44 + 10*x^43 + 6*x^42 + 8*x^41 – 5*x^40 – 12*x^39 + 7*x^38 – 7*x^37 + 7*x^36 + x^35 – 3*x^34 + 10*x^33 + x^32 – 6*x^31 – 2*x^30 – 10*x^29 – 3*x^28 + 2*x^27 + 9*x^26 – 3*x^25 + 14*x^24 – 8*x^23 – 7*x^21 + 9*x^20 + 3*x^19 – 4*x^18 – 10*x^17 – 7*x^16 + 12*x^15 + 7*x^14 + 2*x^13 – 12*x^12 – 4*x^11 – 2*x^10 + 5*x^9 + x^7 – 7*x^6 + 7*x^5 – 4*x^4 + 12*x^3 – 6*x^2 + 3*x – 6 = 0</p></blockquote>
<p>    的唯一实数解，它约为 1.303577 。这就是传说中的 Conway 常数。</p>
<p><span id="more-3870"></span><br>
    我一直很好奇：这个 71 次方程是怎么来的啊？今天，我看到了 <a href="http://www.nathanieljohnston.com/2010/10/a-derivation-of-conways-degree-71-look-and-say-polynomial/">Conway 常数的一个推导</a>，终于解开了困扰我 N 久的谜题，在这里和大家分享一下。</p>
<p>    Conway 常数的推导依赖于 Conway 发现的另一个定理：从第 8 个数开始，所有的数都是由 92 个“基本串”构成的。下面这个表格按照字典序列出了这 92 个基本串，以及每一个串的长度。列表的第 4 列给出了每个串迭代一次后会演变成哪些串。举例来说，第 2 个基本串是 1112133 ，它的下一个数就是 31121123 , 是由第 64 个基本串和第 62 个基本串拼接组成的。</p>
<table style="margin-left: auto; margin-right: auto;">
<tbody>
<tr>
<th>#</th>
<th>Subsequence</th>
<th>Length</th>
<th>Evolves Into</th>
</tr>
<tr>
<td><strong>1</strong></td>
<td>1112</td>
<td>4</td>
<td>(63)</td>
</tr>
<tr>
<td><strong>2</strong></td>
<td>1112133</td>
<td>7</td>
<td>(64)(62)</td>
</tr>
<tr>
<td><strong>3</strong></td>
<td>111213322112</td>
<td>12</td>
<td>(65)</td>
</tr>
<tr>
<td><strong>4</strong></td>
<td>111213322113</td>
<td>12</td>
<td>(66)</td>
</tr>
<tr>
<td><strong>5</strong></td>
<td>1113</td>
<td>4</td>
<td>(68)</td>
</tr>
<tr>
<td><strong>6</strong></td>
<td>11131</td>
<td>5</td>
<td>(69)</td>
</tr>
<tr>
<td><strong>7</strong></td>
<td>111311222112</td>
<td>12</td>
<td>(84)(55)</td>
</tr>
<tr>
<td><strong>8</strong></td>
<td>111312</td>
<td>6</td>
<td>(70)</td>
</tr>
<tr>
<td><strong>9</strong></td>
<td>11131221</td>
<td>8</td>
<td>(71)</td>
</tr>
<tr>
<td><strong>10</strong></td>
<td>1113122112</td>
<td>10</td>
<td>(76)</td>
</tr>
<tr>
<td><strong>11</strong></td>
<td>1113122113</td>
<td>10</td>
<td>(77)</td>
</tr>
<tr>
<td><strong>12</strong></td>
<td>11131221131112</td>
<td>14</td>
<td>(82)</td>
</tr>
<tr>
<td><strong>13</strong></td>
<td>111312211312</td>
<td>12</td>
<td>(78)</td>
</tr>
<tr>
<td><strong>14</strong></td>
<td>11131221131211</td>
<td>14</td>
<td>(79)</td>
</tr>
<tr>
<td><strong>15</strong></td>
<td>111312211312113211</td>
<td>18</td>
<td>(80)</td>
</tr>
<tr>
<td><strong>16</strong></td>
<td>111312211312113221133211322112211213322112</td>
<td>42</td>
<td>(81)(29)(91)</td>
</tr>
<tr>
<td><strong>17</strong></td>
<td>111312211312113221133211322112211213322113</td>
<td>42</td>
<td>(81)(29)(90)</td>
</tr>
<tr>
<td><strong>18</strong></td>
<td>11131221131211322113322112</td>
<td>26</td>
<td>(81)(30)</td>
</tr>
<tr>
<td><strong>19</strong></td>
<td>11131221133112</td>
<td>14</td>
<td>(75)(29)(92)</td>
</tr>
<tr>
<td><strong>20</strong></td>
<td>1113122113322113111221131221</td>
<td>28</td>
<td>(75)(32)</td>
</tr>
<tr>
<td><strong>21</strong></td>
<td>11131221222112</td>
<td>14</td>
<td>(72)</td>
</tr>
<tr>
<td><strong>22</strong></td>
<td>111312212221121123222112</td>
<td>24</td>
<td>(73)</td>
</tr>
<tr>
<td><strong>23</strong></td>
<td>111312212221121123222113</td>
<td>24</td>
<td>(74)</td>
</tr>
<tr>
<td><strong>24</strong></td>
<td>11132</td>
<td>5</td>
<td>(83)</td>
</tr>
<tr>
<td><strong>25</strong></td>
<td>1113222</td>
<td>7</td>
<td>(86)</td>
</tr>
<tr>
<td><strong>26</strong></td>
<td>1113222112</td>
<td>10</td>
<td>(87)</td>
</tr>
<tr>
<td><strong>27</strong></td>
<td>1113222113</td>
<td>10</td>
<td>(88)</td>
</tr>
<tr>
<td><strong>28</strong></td>
<td>11133112</td>
<td>8</td>
<td>(89)(92)</td>
</tr>
<tr>
<td><strong>29</strong></td>
<td>12</td>
<td>2</td>
<td>(1)</td>
</tr>
<tr>
<td><strong>30</strong></td>
<td>123222112</td>
<td>9</td>
<td>(3)</td>
</tr>
<tr>
<td><strong>31</strong></td>
<td>123222113</td>
<td>9</td>
<td>(4)</td>
</tr>
<tr>
<td><strong>32</strong></td>
<td>12322211331222113112211</td>
<td>23</td>
<td>(2)(61)(29)(85)</td>
</tr>
<tr>
<td><strong>33</strong></td>
<td>13</td>
<td>2</td>
<td>(5)</td>
</tr>
<tr>
<td><strong>34</strong></td>
<td>131112</td>
<td>6</td>
<td>(28)</td>
</tr>
<tr>
<td><strong>35</strong></td>
<td>13112221133211322112211213322112</td>
<td>32</td>
<td>(24)(33)(61)(29)(91)</td>
</tr>
<tr>
<td><strong>36</strong></td>
<td>13112221133211322112211213322113</td>
<td>32</td>
<td>(24)(33)(61)(29)(90)</td>
</tr>
<tr>
<td><strong>37</strong></td>
<td>13122112</td>
<td>8</td>
<td>(7)</td>
</tr>
<tr>
<td><strong>38</strong></td>
<td>132</td>
<td>3</td>
<td>(8)</td>
</tr>
<tr>
<td><strong>39</strong></td>
<td>13211</td>
<td>5</td>
<td>(9)</td>
</tr>
<tr>
<td><strong>40</strong></td>
<td>132112</td>
<td>6</td>
<td>(10)</td>
</tr>
<tr>
<td><strong>41</strong></td>
<td>1321122112</td>
<td>10</td>
<td>(21)</td>
</tr>
<tr>
<td><strong>42</strong></td>
<td>132112211213322112</td>
<td>18</td>
<td>(22)</td>
</tr>
<tr>
<td><strong>43</strong></td>
<td>132112211213322113</td>
<td>18</td>
<td>(23)</td>
</tr>
<tr>
<td><strong>44</strong></td>
<td>132113</td>
<td>6</td>
<td>(11)</td>
</tr>
<tr>
<td><strong>45</strong></td>
<td>1321131112</td>
<td>10</td>
<td>(19)</td>
</tr>
<tr>
<td><strong>46</strong></td>
<td>13211312</td>
<td>8</td>
<td>(12)</td>
</tr>
<tr>
<td><strong>47</strong></td>
<td>1321132</td>
<td>7</td>
<td>(13)</td>
</tr>
<tr>
<td><strong>48</strong></td>
<td>13211321</td>
<td>8</td>
<td>(14)</td>
</tr>
<tr>
<td><strong>49</strong></td>
<td>132113212221</td>
<td>12</td>
<td>(15)</td>
</tr>
<tr>
<td><strong>50</strong></td>
<td>13211321222113222112</td>
<td>20</td>
<td>(18)</td>
</tr>
<tr>
<td><strong>51</strong></td>
<td>1321132122211322212221121123222112</td>
<td>34</td>
<td>(16)</td>
</tr>
<tr>
<td><strong>52</strong></td>
<td>1321132122211322212221121123222113</td>
<td>34</td>
<td>(17)</td>
</tr>
<tr>
<td><strong>53</strong></td>
<td>13211322211312113211</td>
<td>20</td>
<td>(20)</td>
</tr>
<tr>
<td><strong>54</strong></td>
<td>1321133112</td>
<td>10</td>
<td>(6)(61)(29)(92)</td>
</tr>
<tr>
<td><strong>55</strong></td>
<td>1322112</td>
<td>7</td>
<td>(26)</td>
</tr>
<tr>
<td><strong>56</strong></td>
<td>1322113</td>
<td>7</td>
<td>(27)</td>
</tr>
<tr>
<td><strong>57</strong></td>
<td>13221133112</td>
<td>11</td>
<td>(25)(29)(92)</td>
</tr>
<tr>
<td><strong>58</strong></td>
<td>1322113312211</td>
<td>13</td>
<td>(25)(29)(67)</td>
</tr>
<tr>
<td><strong>59</strong></td>
<td>132211331222113112211</td>
<td>21</td>
<td>(25)(29)(85)</td>
</tr>
<tr>
<td><strong>60</strong></td>
<td>13221133122211332</td>
<td>17</td>
<td>(25)(29)(68)(61)(29)(89)</td>
</tr>
<tr>
<td><strong>61</strong></td>
<td>22</td>
<td>2</td>
<td>(61)</td>
</tr>
<tr>
<td><strong>62</strong></td>
<td>3</td>
<td>1</td>
<td>(33)</td>
</tr>
<tr>
<td><strong>63</strong></td>
<td>3112</td>
<td>4</td>
<td>(40)</td>
</tr>
<tr>
<td><strong>64</strong></td>
<td>3112112</td>
<td>7</td>
<td>(41)</td>
</tr>
<tr>
<td><strong>65</strong></td>
<td>31121123222112</td>
<td>14</td>
<td>(42)</td>
</tr>
<tr>
<td><strong>66</strong></td>
<td>31121123222113</td>
<td>14</td>
<td>(43)</td>
</tr>
<tr>
<td><strong>67</strong></td>
<td>3112221</td>
<td>7</td>
<td>(38)(39)</td>
</tr>
<tr>
<td><strong>68</strong></td>
<td>3113</td>
<td>4</td>
<td>(44)</td>
</tr>
<tr>
<td><strong>69</strong></td>
<td>311311</td>
<td>6</td>
<td>(48)</td>
</tr>
<tr>
<td><strong>70</strong></td>
<td>31131112</td>
<td>8</td>
<td>(54)</td>
</tr>
<tr>
<td><strong>71</strong></td>
<td>3113112211</td>
<td>10</td>
<td>(49)</td>
</tr>
<tr>
<td><strong>72</strong></td>
<td>3113112211322112</td>
<td>16</td>
<td>(50)</td>
</tr>
<tr>
<td><strong>73</strong></td>
<td>3113112211322112211213322112</td>
<td>28</td>
<td>(51)</td>
</tr>
<tr>
<td><strong>74</strong></td>
<td>3113112211322112211213322113</td>
<td>28</td>
<td>(52)</td>
</tr>
<tr>
<td><strong>75</strong></td>
<td>311311222</td>
<td>9</td>
<td>(47)(38)</td>
</tr>
<tr>
<td><strong>76</strong></td>
<td>311311222112</td>
<td>12</td>
<td>(47)(55)</td>
</tr>
<tr>
<td><strong>77</strong></td>
<td>311311222113</td>
<td>12</td>
<td>(47)(56)</td>
</tr>
<tr>
<td><strong>78</strong></td>
<td>3113112221131112</td>
<td>16</td>
<td>(47)(57)</td>
</tr>
<tr>
<td><strong>79</strong></td>
<td>311311222113111221</td>
<td>18</td>
<td>(47)(58)</td>
</tr>
<tr>
<td><strong>80</strong></td>
<td>311311222113111221131221</td>
<td>24</td>
<td>(47)(59)</td>
</tr>
<tr>
<td><strong>81</strong></td>
<td>31131122211311122113222</td>
<td>23</td>
<td>(47)(60)</td>
</tr>
<tr>
<td><strong>82</strong></td>
<td>3113112221133112</td>
<td>16</td>
<td>(47)(33)(61)(29)(92)</td>
</tr>
<tr>
<td><strong>83</strong></td>
<td>311312</td>
<td>6</td>
<td>(45)</td>
</tr>
<tr>
<td><strong>84</strong></td>
<td>31132</td>
<td>5</td>
<td>(46)</td>
</tr>
<tr>
<td><strong>85</strong></td>
<td>311322113212221</td>
<td>15</td>
<td>(53)</td>
</tr>
<tr>
<td><strong>86</strong></td>
<td>311332</td>
<td>6</td>
<td>(38)(29)(89)</td>
</tr>
<tr>
<td><strong>87</strong></td>
<td>3113322112</td>
<td>10</td>
<td>(38)(30)</td>
</tr>
<tr>
<td><strong>88</strong></td>
<td>3113322113</td>
<td>10</td>
<td>(38)(31)</td>
</tr>
<tr>
<td><strong>89</strong></td>
<td>312</td>
<td>3</td>
<td>(34)</td>
</tr>
<tr>
<td><strong>90</strong></td>
<td>312211322212221121123222113</td>
<td>27</td>
<td>(36)</td>
</tr>
<tr>
<td><strong>91</strong></td>
<td>312211322212221121123222122</td>
<td>27</td>
<td>(35)</td>
</tr>
<tr>
<td><strong>92</strong></td>
<td>32112</td>
<td>5</td>
<td>(37)</td>
</tr>
</tbody>
</table>
<p>    外观数列的前 8 项分别是 1, 11, 21, 1211, 111221, 312211, 13112221, 1113213211 。其中，第 8 项是由基本串 #24 和基本串 #39 组成的。在此之后，所有的数列都在基本串之间互相演变，构成了越来越长的数字串。可以说，这 92 个基本串就是 92 个原子，它们组成了外观数列世界中的各种数字串。在 <a href="http://mathworld.wolfram.com/CosmologicalTheorem.html">MathWorld 的相关页面</a> 上，甚至有这 92 个原子的“元素周期表”；表格里不但有元素的名称，还给出了每个元素的丰度。</p>
<p> <br>
    有了上面这张表格，我们就能算出数列中的每一项的长度了。考虑一个 92 × 92 的矩阵 T ，其中第 i 列表示的就是基本串 ＃i 的演变情况。举例来说，基本串 #2 将会演化出 #64 和 #62，那么我们就令矩阵 T 的第 2 列第 64 行等于基本串 #64 与 #2 的长度比，而第 62 行则为基本串 #62 和 #2 的长度比。外观数列的第 8 项包含了基本串 #24 和 #39 ，它们俩的长度都是 5 。我们就用一个含 92 个元素的向量 A = (0, 0, …, 0, 5, 0, …, 0, 5, 0, 0, …, 0) 来表示外观数列第 8 项中各基本串所占的长度。于是， T * A 就反映了数列第 9 项的长度信息， T^2 * A 则对应数列的第 10 项⋯⋯于是我们便得到了一个数列长度的递推关系。</p>
<p>    好在这个矩阵很稀疏，不难得到它的特征方程：</p>
<blockquote><p>x^18 * (x + 1) * (x – 1)^2 * (x^71 – x^69 – 2*x^68 – x^67 + 2*x^66 + 2*x^65 + x^64 – x^63 – x^62 – x^61 – x^60 – x^59 + 2*x^58 + 5*x^57 + 3*x^56 – 2*x^55 – 10*x^54 – 3*x^53 – 2*x^52 + 6*x^51 + 6*x^50 + x^49 + 9*x^48 – 3*x^47 – 7*x^46 – 8*x^45 – 8*x^44 + 10*x^43 + 6*x^42 + 8*x^41 – 5*x^40 – 12*x^39 + 7*x^38 – 7*x^37 + 7*x^36 + x^35 – 3*x^34 + 10*x^33 + x^32 – 6*x^31 – 2*x^30 – 10*x^29 – 3*x^28 + 2*x^27 + 9*x^26 – 3*x^25 + 14*x^24 – 8*x^23 – 7*x^21 + 9*x^20 + 3*x^19 – 4*x^18 – 10*x^17 – 7*x^16 + 12*x^15 + 7*x^14 + 2*x^13 – 12*x^12 – 4*x^11 – 2*x^10 + 5*x^9 + x^7 – 7*x^6 + 7*x^5 – 4*x^4 + 12*x^3 – 6*x^2 + 3*x – 6) = 0</p></blockquote>
<p>    舍去 0 、 1 、 -1 三个根，就只剩下这个 71 次方程了。这个 71 次方程恰有一个实根，它就是我们要找的数列增长速率。</p>
			 ]]></content>
<pubDate>2010-11-02T14:16:02+00:00</pubDate>
<guid>http://www.matrix67.com/blog/archives/3870</guid>
<author><![CDATA[ 顾森 ]]></author>
</item>
<item>
<title><![CDATA[ 趣题：面积为1的凸多边形总能放进一个面积为2的矩形里 ]]></title>
<link>http://www.matrix67.com/blog/archives/3878</link>
<content><![CDATA[ 
		<p>证明：任意给定一个面积为 1 的凸多边形，我们总能把它放进一个面积为 2 的矩形里。<br>
注意，这里“凸多边形”的条件是必需的——如果图形不是凸的，很容易想出反例来。</p>
<p> <br>
<span id="more-3878"></span></p>
<p> <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 </p>
<p>容易想到，对于面积为 1 的三角形来说，结论是成立的：</p>
<p>   <img alt="image placeholder" >
<p>下面，让我们来考虑一般的情况。找出多边形中距离最远的两个点（以下图为例的话就是顶点 A 和 E ）。过这两个点作它们的连线的垂线（即下图中的两条水平线）。显然，多边形上的所有点都夹在这两条直线之间（否则会出现这些点到 A 或者 E 的距离大于 AE 的情况）。再在线段 AE 的两侧分别找出多边形上距离 AE 最远的点（即 C 、 G 两点），分别作 AE 的平行线。</p>
<p>   <img alt="image placeholder" >
<p>这四条直线形成的矩形完全包含了整个多边形，并且矩形的面积等于 △ACE 、 △AGE 的面积和的两倍，因而小于整个多边形面积的两倍。注意，在最后一步我们用到了<strong>凸</strong>多边形这一条件： △ACE 和 △AGE 一定在这个凸多边形的内部。</p>
<p>问题来源： <a href="http://www.cut-the-knot.org/Generalization/PolygonInRectangle.shtml">http://www.cut-the-knot.org/Generalization/PolygonInRectangle.shtml</a></p>
			 ]]></content>
<pubDate>2010-11-02T16:42:19+00:00</pubDate>
<guid>http://www.matrix67.com/blog/archives/3878</guid>
<author><![CDATA[ 顾森 ]]></author>
</item>
<item>
<title><![CDATA[ There is always a bigger fish ]]></title>
<link>http://www.matrix67.com/blog/archives/3885</link>
<content><![CDATA[ 
		<p>   <img alt="image placeholder" >
<p>     <a href="http://tvtropes.org/pmwiki/pmwiki.php/Main/AlwaysABiggerFish">Always A Bigger Fish</a> 不但是电影情节中的经典桥段，也是各种恶搞的灵感来源——小鱼总是被大鱼吃掉，而大鱼上面总还有更大的鱼。久而久之，聪明的大鱼或许就不会去吃小鱼了，否则按照传统剧情，它身后会出现一条更大的鱼。一个有趣的问题出现了：倘若所有的鱼都是理性的，那会出现怎样的情况呢？<br>
    让我们把问题重新叙述一下。假设有 n 条鱼，它们从小到大依次编号为 1, 2, …, n 。我们规定，吃鱼必须要严格按顺序执行。也就是说，大鱼只能吃比自己小一级的鱼，不能越级吃更小的鱼；并且只有等到第 i 条鱼吃了第 i – 1 条鱼后，第 i + 1 条鱼才能吃第 i 条鱼。第 1 条鱼则啥都不能吃，只有被吃的份儿。我们假设，如果有小鱼吃的话，大鱼肯定不会放过；但是，保全性命的优先级显然更高，在吃小鱼之前，大鱼得先保证自己不会被吃掉才行。假设每条鱼都是无限聪明的（并且它们也都知道这一点，并且它们也都知道它们知道这一点⋯⋯），那么第 1 条鱼能存活下来吗？</p>
<p><span id="more-3885"></span><br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 </p>
<p>    答案或许有些出人意料：当 n 是奇数时，第 1 条鱼将会存活下来；当 n 是偶数时，第 2 条鱼将会吃掉第 1 条鱼。为了证明这一点，让我们来考虑一些简单的情况。当 n = 1 时，第 1 条鱼显然活得自由自在；当 n = 2 时，第 2 条鱼将会吃掉第 1 条鱼，因为第 2 条鱼是无敌的，它不用担心自己会被吃掉。当 n = 3 时，第 2 条鱼不能吃第 1 条鱼，否则情况将化为 n = 2 的情形，它将会被第 3 条鱼吃掉。有趣的事情发生在 n = 4 的时候，此时第 2 条鱼可以大胆地吃掉第 1 条鱼，因为根据前面的结论，它知道第 3 条鱼是不会吃它的⋯⋯以此类推，当 n 是奇数时，这 n 条鱼将会和平相处；当 n 是偶数时，第 1 条鱼将会被第 2 条鱼吃掉，情况就化为了 n 为奇数时的稳定状态。</p>
			 ]]></content>
<pubDate>2010-11-03T17:04:00+00:00</pubDate>
<guid>http://www.matrix67.com/blog/archives/3885</guid>
<author><![CDATA[ 顾森 ]]></author>
</item>
<item>
<title><![CDATA[ 《新知客》趣题专栏 2010.11 ]]></title>
<link>http://www.matrix67.com/blog/archives/3895</link>
<content><![CDATA[ 
		<p>目前，我正在《新知客》杂志上主持一个趣题栏目。每月杂志发行后，我将在 Blog 上同步更新。点击 <a href="http://www.matrix67.com/blog/archives/tag/%E3%80%8A%E6%96%B0%E7%9F%A5%E5%AE%A2%E3%80%8B%E8%B6%A3%E9%A2%98">这里</a> 可以查看往期题目。</p>
<p><strong>推理</strong><br>
1. 高三 (17) 班有 50 个同学，他们的学号分别是 1, 2, 3, …, 50 。一次数学考试结束后，同学们都交完试卷离开了考场。数学老师小 A 清点试卷时发现，他手中只有 49 张卷子。究竟是谁没有交卷呢？正巧小 A 手边没有笔，他也不想把所有卷子按照学号重新排序。他希望不借助任何工具，仅仅通过依次查看每张卷子上写的学号，便能找出缺失的那个学号。和常人一样，小 A 的记忆力很有限，他没法记住之前到底看到过哪些学号；不过，作为一个数学老师，小 A 拥有无人匹敌的计算能力。他有办法找出没交卷的那位同学的学号吗？</p>
<p>2. 小 A 和小 B 玩游戏。从小 A 开始，两个人轮流从 1 到 9 当中选一个数（已经选过的数不能再选），约定谁先选到三个和为 15 的数，谁就获胜了。比方说，小 A 先选了 4 ，然后小 B 选 5 ，小 A 选 6 ，小 B 选 2 。为了阻止小 B 获胜，下一步小 A 就必须得选 8 （否则小 B 将靠 5 、 2 、 8 三个数获胜）。为了阻止小 A 获胜，小 B 选择了 1 （否则小 A 将靠 6 、 8 、 1 三个数获胜）。但是，这已经阻止不了小 A 的胜利了——小 A 可以选择 3 ，从而得到 4 、 8 、 3 三个加起来等于 15 的数。<br>
在这个游戏中，小 A 有必胜策略吗？</p>
<p><span id="more-3895"></span><br>
 <br>
<strong>计算</strong><br>
1. 有一块长方形的巧克力，它由 m×n 个小块组成。你想要把它们全部掰开。每一步，你只能拾起其中一块巧克力，沿着直线把它掰成两块。请证明，不管你用什么样的策略，把所有小块全部掰开所需要的步数都是相同的。</p>
<p><img alt="image placeholder" >
<p> <br>
2. 把一副洗好的牌（共 52 张）背面朝上地摞成一摞，然后依次翻开每一张牌，直到翻出第一张 A 。下一张牌是黑桃 A 的可能性大还是黑桃 2 的可能性大？</p>
<p> <br>
 <br>
<strong>填图：</strong><br>
1. 你能把一个等边三角形分成三个面积相等但形状各不相同的小三角形吗？</p>
<p><img alt="image placeholder" >
<p> <br>
2. 像示例那样，在图中画出一条封闭的回路。这条路必须既无重复又无遗漏地经过每一个白色方格。</p>
<p><img alt="image placeholder" >
<p> <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 </p>
<p><strong>推理</strong></p>
<p>1. 高三 (17) 班有 50 个同学，他们的学号分别是 1, 2, 3, …, 50 。一次数学考试结束后，同学们都交完试卷离开了考场。数学老师小 A 清点试卷时发现，他手中只有 49 张卷子。究竟是谁没有交卷呢？正巧小 A 手边没有笔，他也不想把所有卷子按照学号重新排序。他希望不借助任何工具，仅仅通过依次查看每张卷子上写的学号，便能找出缺失的那个学号。和常人一样，小 A 的记忆力很有限，他没法记住之前到底看到过哪些学号；不过，作为一个数学老师，小 A 拥有无人匹敌的计算能力。他有办法找出没交卷的那位同学的学号吗？</p>
<p>答案：首先算出 1 到 50 这 50 个数之和，它等于 1275 。然后从 1275 这个数开始，不断减去看到的学号，最后剩下的数就是缺失的那个学号。</p>
<p> <br>
 <br>
2. 小 A 和小 B 玩游戏。从小 A 开始，两个人轮流从 1 到 9 当中选一个数（已经选过的数不能再选），约定谁先选到三个和为 15 的数，谁就获胜了。比方说，小 A 先选了 4 ，然后小 B 选 5 ，小 A 选 6 ，小 B 选 2 。为了阻止小 B 获胜，下一步小 A 就必须得选 8 （否则小 B 将靠 5 、 2 、 8 三个数获胜）。为了阻止小 A 获胜，小 B 选择了 1 （否则小 A 将靠 6 、 8 、 1 三个数获胜）。但是，这已经阻止不了小 A 的胜利了——小 A 可以选择 3 ，从而得到 4 、 8 、 3 三个加起来等于 15 的数。<br>
在这个游戏中，小 A 有必胜策略吗？</p>
<p>答案： 1 到 9 中的三个数之和为 15 一共有 8 种情况：</p>
<p>   1+5+9   1+6+8   2+4+9   2+5+8<br>
   2+6+7   3+4+8   3+5+7   4+5+6</p>
<p><img alt="image placeholder" >
<p>把 1 到 9 依照上图填进 3×3 的方阵中，方阵的每一行、每一列和两条对角线上的三个数之和都是 15 ，它们恰好涵盖了上述所有 8 种情况。因此，游戏的目标即是让自己选的数在方阵中成一条直线。也就是说，小 A 和小 B 在玩的其实是井字棋游戏！众所周知井字棋游戏是没有必胜策略的，因此在这个游戏中小 A 也是没有必胜策略的。</p>
<p> <br>
 <br>
<strong>计算</strong></p>
<p>1. 有一块长方形的巧克力，它由 m×n 个小块组成。你想要把它们全部掰开。每一步，你只能拾起其中一块巧克力，沿着直线把它掰成两块。请证明，不管你用什么样的策略，把所有小块全部掰开所需要的步数都是相同的。</p>
<p><img alt="image placeholder" >
<p> <br>
答案：每掰一次后，巧克力的总块数都会加一。要想把一块巧克力掰成 m×n 小块，显然不管怎样都需要掰 m×n – 1 次。据说，这个简单得近乎荒唐的问题，有时竟能困扰数学教授们一整天的时间！</p>
<p> <br>
 <br>
2. 把一副洗好的牌（共 52 张）背面朝上地摞成一摞，然后依次翻开每一张牌，直到翻出第一张 A 。下一张牌是黑桃 A 的可能性大还是黑桃 2 的可能性大？</p>
<p>答案：很多人可能会认为，下一张牌是黑桃 2 的可能性更大，因为刚才翻出的首张 A 可能就是黑桃 A 。其实这种直觉是错误的。令人吃惊的是，下一张牌是黑桃 A 的概率与下一张牌是黑桃 2 的概率一样大，它们都等于 1/52 。<br>
为了说明这一点，我们不妨来看一种同样能实现绝对随机的另类洗牌方式：先把一副牌中的黑桃 A 抽出来，随机洗牌打乱剩下 51 张牌的顺序，然后把黑桃 A 插回这摞牌中（包括最顶端和最底端在内，共有 52 个可以插入的位置）。显然，黑桃 A 正好插到了这摞牌的首张 A 下面有 1/52 的可能性。同样的道理，首张 A 下面是黑桃 2 的概率也是 1/52 。事实上，任何一张牌都有可能出现在首张 A 的下面，它们出现的概率是相等的，都等于 1/52 。</p>
<p> <br>
 <br>
<strong>填图：</strong></p>
<p>1. 你能把一个等边三角形分成三个面积相等但形状各不相同的小三角形吗？</p>
<p><img alt="image placeholder" >
<p> <br>
答案：可以，如图。</p>
<p><img alt="image placeholder" >
<p> <br>
 <br>
2. 像示例那样，在图中画出一条封闭的回路。这条路必须既无重复又无遗漏地经过每一个白色方格。</p>
<p><img alt="image placeholder" >
<p> <br>
答案：<br>
<img alt="image placeholder" >
			 ]]></content>
<pubDate>2010-11-09T13:03:28+00:00</pubDate>
<guid>http://www.matrix67.com/blog/archives/3895</guid>
<author><![CDATA[ 顾森 ]]></author>
</item>
<item>
<title><![CDATA[ 可能是数学公式最多的图了 ]]></title>
<link>http://www.matrix67.com/blog/archives/3892</link>
<content><![CDATA[ 
		<p><a href="http://i.imgur.com/n4eCN.jpg"><img alt="image placeholder" >
<p>和大家分享一张刚刚看到的极为壮观的图。点击小图可以看到大图。<br>
数学 Geek 们不妨把它印成一张海报贴在墙上，绝对吸引眼球。</p>
<p>来源： <a href="http://www.reddit.com/r/AskReddit/comments/e2yeb/reddit_if_you_cant_find_this_i_officially_give_up/">http://www.reddit.com/r/AskReddit</a></p>
			 ]]></content>
<pubDate>2010-11-09T17:24:49+00:00</pubDate>
<guid>http://www.matrix67.com/blog/archives/3892</guid>
<author><![CDATA[ 顾森 ]]></author>
</item>
<item>
<title><![CDATA[ 你正在函数图像的最大值上 ]]></title>
<link>http://www.matrix67.com/blog/archives/3909</link>
<content><![CDATA[ 
		<p><img alt="image placeholder" >
			 ]]></content>
<pubDate>2010-11-11T00:16:27+00:00</pubDate>
<guid>http://www.matrix67.com/blog/archives/3909</guid>
<author><![CDATA[ 顾森 ]]></author>
</item>
<item>
<title><![CDATA[ 不用编程也能制作分形图形 ]]></title>
<link>http://www.matrix67.com/blog/archives/3913</link>
<content><![CDATA[ 
		<p><embed src="http://www.tudou.com/v/dNRW3ltYXFs" type="application/x-shockwave-flash" allowscriptaccess="always" allowfullscreen="true" wmode="opaque" width="550" height="400"></embed></p>
<p>用摄像机对准三个屏幕，每个屏幕都显示摄像机拍到的内容，于是整个图形就是由三个与整体自相似的图形构成的，分形便诞生了。<br>
这毫无疑问是我见过的最简单、最聪明、最酷的分形图形制作方法！</p>
<p>来源：<a href="http://scientopia.org/blogs/goodmath/2010/11/02/fractals-without-a-computer/">http://scientopia.org/blogs/goodmath/2010/11/02/fractals-without-a-computer/</a></p>
			 ]]></content>
<pubDate>2010-11-13T21:45:11+00:00</pubDate>
<guid>http://www.matrix67.com/blog/archives/3913</guid>
<author><![CDATA[ 顾森 ]]></author>
</item>
<item>
<title><![CDATA[ 神一般的定理，以及神一般的证明 ]]></title>
<link>http://www.matrix67.com/blog/archives/3918</link>
<content><![CDATA[ 
		<p>  <img alt="image placeholder" >
<p>定理：平面上有三个圆，每一对圆的外公切线交于一点，则三个交点共线。</p>
<p><span id="more-3918"></span></p>
<p> <br>
  <img alt="image placeholder" >
<p>证明 1 ：容易证明，对于两个圆 ⊙A 和 ⊙B ，外公切线的交点到它们的圆心的距离与它们各自的半径成正比。也就是说，如果 ⊙A 的质量是 1/r<sub>a</sub> ，⊙B 的质量是 -1/r<sub>b</sub> ，那么由杠杆原理（考虑朝向屏幕内部的大小为 1/r<sub>a</sub> 的重力，以及由于“反重力”得到的朝向屏幕外的大小为 1/r<sub>b</sub> 的力），这两个物体的重心就位于它们的外公切线的交点处。</p>
<p>现在，考虑平面上的三个圆 ⊙A 、 ⊙B 、 ⊙C ，它们的质量都与各自的半径成反比。考虑系统 {m<sub>a</sub> , -m<sub>b</sub>} ，它的重心在 ⊙A 、 ⊙B 外公切线的交点处；考虑另一个系统 {m<sub>b</sub> , -m<sub>c</sub>} ，它的重心则在 ⊙B 、 ⊙C 外公切线的交点处。最后，考虑系统 {m<sub>a</sub> , -m<sub>c</sub>} ，它的重心应该在 ⊙A 、 ⊙C 外公切线的交点处。而最后这个系统其实是前两个系统合成的结果，它的重心显然应该和前两个系统的重心共线。</p>
<p> <br>
证明 2 ：把平面上的三个圆想像成空间中的三个球，每一对圆的外公切线就成了这对球所确定的圆锥的母线。我们要证明的就是，这三个圆锥的顶点共线。<br>
考虑三个球的一个公切面，显然它和这三个圆锥的侧面也都相切，因此三个圆锥的顶点都在这个公切面上。注意到空间中的三个球有两个公切面，因此三个圆锥的顶点必然都位于两个公切面的交线上。</p>
<p> <br>
证明 3 ：想象你站在一个无穷大的平面上。有三个<strong>等大</strong>的球放在这个平面上，只不过由于有的球离你更近，有些球离你更远，因此这三个球看上去不一样大。每两个球确定了一个圆柱体，这三个横放在平面上的圆柱体将延伸到无穷远处，最终都消失在地平线处。看了这个“证明”后，你再看看本文最前面的图，是不是突然觉得这个定理很显然？</p>
<p> <br>
来源：<a href="http://www.cut-the-knot.org/proofs/threecircles.shtml">http://www.cut-the-knot.org/proofs/threecircles.shtml</a></p>
			 ]]></content>
<pubDate>2010-11-15T09:33:01+00:00</pubDate>
<guid>http://www.matrix67.com/blog/archives/3918</guid>
<author><![CDATA[ 顾森 ]]></author>
</item>
<item>
<title><![CDATA[ 趣题：最“悬”的悬挂方式 ]]></title>
<link>http://www.matrix67.com/blog/archives/3930</link>
<content><![CDATA[ 
		<p>  <img alt="image placeholder" >
<p>    把画框悬挂在钉子上，总是给人一种很不安全的感觉，如果钉子掉了的话，画框也会重重地砸在地上。像上图那样，把画框挂在两颗钉子上，看上去可就安全得多了——如果有一颗钉子掉了的话，画框仍然能够悬挂在另一颗钉子上，就好像上了双保险一样。<br>
    今天，我们要考大家一个完全相反的蛋疼问题——如何把画框挂在两颗钉子上，使得去掉任意一颗钉子，画框都会掉下去？</p>
<p><span id="more-3930"></span><br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
    答案：如下图。这样缠绕绳子后，画框保证能挂稳，但少了任意一颗钉子都不行。你不妨用耳机线和两根手指头亲自试一试。</p>
<p>  <img alt="image placeholder" >
<p>  <br>
    有趣的是，对于任意数量的钉子，这种“一个都不能少”的悬挂方法都是存在的，并且可以利用数学归纳法得到一种构造解。有兴趣的读者可以看看这篇论文： <a href="http://jedidiah.stuff.gen.nz/link_problem.pdf">http://jedidiah.stuff.gen.nz/link_problem.pdf</a></p>
			 ]]></content>
<pubDate>2010-11-17T23:26:33+00:00</pubDate>
<guid>http://www.matrix67.com/blog/archives/3930</guid>
<author><![CDATA[ 顾森 ]]></author>
</item>
<item>
<title><![CDATA[ 趣题：平均要取到第几个随机数才会让序列第一次下降 ]]></title>
<link>http://www.matrix67.com/blog/archives/3936</link>
<content><![CDATA[ 
		<p>考虑这么一个游戏：不断在区间 [0, 1] 中概率均等地选取随机数，直到所取的数第一次比上一个数小。那么，平均需要抽取多少个随机数，才会出现这样的情况？</p>
<p> <br>
答案：记 P<sub>i</sub> 为第 i 次才取到小于前一个数的数的概率。则我们要求的就是 P<sub>1</sub> + 2 * P<sub>2</sub> + 3 * P<sub>3</sub> + 4 * P<sub>4</sub> + … 。妙就妙在下面这个变形（在继续看下去之前你能想到吗）：</p>
<p><span id="more-3936"></span><br>
      P<sub>1</sub> + 2 * P<sub>2</sub> + 3 * P<sub>3</sub> + 4 * P<sub>4</sub> + …<br>
  = (P<sub>1</sub> + P<sub>2</sub> + P<sub>3</sub> + …) + (P<sub>2</sub> + P<sub>3</sub> + …) + (P<sub>3</sub> + …) + …<br>
  = P(取数次数≥1) + P(取数次数≥2) + P(取数次数≥3) + …</p>
<p>显然，取数次数是一定大于等于 1 的。事实上，取数次数也是一定大于等于 2 的。要想取到第 3 个数，则前面两个数必须是递增的，其概率是 1/2 ；取数次数达到了 4 次或者更多，当且仅当前三个数是递增的，其概率为 1/3! = 1/6 ⋯⋯因此，本题的答案为：</p>
<p>   1 + 1 + 1/2! + 1/3! + 1/4! + …</p>
<p>没错，这个问题的答案竟然是 e 。</p>
<p> <br>
题目来源： <a href="http://mindyourdecisions.com/blog/2010/11/16/an-interesting-probability-game/">Mind Your Decisions</a><br>
大家有兴趣的话可以看看我之前发过的一个<a href="http://www.matrix67.com/blog/archives/3507">类似的题目</a>，这两个问题似乎是有一腿。</p>
			 ]]></content>
<pubDate>2010-11-19T16:45:58+00:00</pubDate>
<guid>http://www.matrix67.com/blog/archives/3936</guid>
<author><![CDATA[ 顾森 ]]></author>
</item>
<item>
<title><![CDATA[ 公平分割问题：均衡分割与免嫉妒分割 ]]></title>
<link>http://www.matrix67.com/blog/archives/3944</link>
<content><![CDATA[ 
		<p>    大家或许都知道经典的两人分饼问题——为了实现公平性，只需要一个人切，另一个人选即可。不过，在现实生活中，情况远没有那么理想。如果把大饼换成蛋糕，问题就复杂了很多——你想吃奶油，我想吃巧克力，他想吃水果⋯⋯如果分蛋糕的人对蛋糕各部分的价值看法有分歧，还能实现公平的分割吗？如果分蛋糕的人不止两个呢？</p>
<p>    事实上，对于两个人分蛋糕的情况，经典的“你来分我来选”的方法仍然是非常有效的，即使双方对蛋糕价值的计算方法不一致也没关系。首先，由其中一人执刀，把蛋糕切分成两块；然后，另一个人选出他自己更想要的那块，剩下的那块就留给第一个人。由于分蛋糕的人事先不知道选蛋糕的人会选择哪一块，为了保证自己的利益，他必须（按照自己的标准）把蛋糕分成均等的两块。这样，不管对方选择了哪一块，他都能保证自己总可以得到蛋糕总价值的 1/2 。<br>
    不过，细究起来，这种方法也不是完全公平的。对于分蛋糕的人来说，两块蛋糕的价值均等，但对于选蛋糕的人来说，两块蛋糕的价值差异可能很大。因此，选蛋糕的人往往能获得大于 1/2 的价值。一个简单的例子就是，蛋糕表面是一半草莓一半巧克力的。分蛋糕的人只对蛋糕体积感兴趣，于是把草莓的部分分成一块，把巧克力的部分分成一块；但他不知道，选蛋糕的人更偏爱巧克力一些。因此，选蛋糕的人可以得到的价值超过蛋糕总价值的一半，而分蛋糕的人只能恰好获得一半的价值。而事实上，更公平一些的做法是，前一个人得到所有草莓部分和一小块巧克力部分，后面那个人则分得剩下的巧克力部分。这样便能确保两个人都可以得到一半多一点的价值。<br>
    但是，要想实现上面所说的理想分割，双方需要完全公开自己的信息，并且要能够充分信任对方。然而，在现实生活中，这是很难做到的。考虑到分蛋糕的双方尔虞我诈的可能性，实现绝对公平几乎是不可能完成的任务。因此，我们只能退而求其次，给“公平”下一个大家普遍能接受的定义。在公平分割 (fair division) 问题中，有一个最为根本的公平原则叫做“均衡分割” (proportional division) 。它的意思就是， 如果有 n 个人分蛋糕，则每个人都认为自己得到了整个蛋糕至少 1/n 的价值 。从这个角度来说，“你来分我来选”的方案是公平的——在信息不对称的场合中，获得总价值的一半已经是很让人满意的结果了。</p>
<p><span id="more-3944"></span><br>
    如果分蛋糕的人更多，均衡分割同样能够实现，而且实现的方法不止一种。其中一种简单的方法就是，每个已经分到蛋糕的人都把自己手中的蛋糕分成更小的等份，让下一个没有分到蛋糕的人来挑选。具体地说，先让其中两个人用“你来分我来选”的方法，把蛋糕分成两块；然后，每个人都把自己手中的蛋糕分成三份，让第三个人从每个人手里各挑出一份来；然后，每个人都把自己手中的蛋糕分成四份，让第四个人从这三个人手中各挑选一份；不断这样继续下去，直到最后一个人选完自己的蛋糕。只要每个人在切蛋糕时能做到均分，无论哪块被挑走，他都不会吃亏；而第 n 个人拿到了每个人手中至少 1/n 的小块，合起来自然也就不会少于蛋糕总价值的 1/n 。虽然这样下来，蛋糕可能会被分得零零碎碎，但这能保证每个人手中的蛋糕在他自己看来都是不小于蛋糕总价值的 1/n 的。<br>
    还有一种思路完全不同的分割方案叫做“最后削减人算法”，它也能做到均衡分割。我们还是把总的人数用字母 n 来表示。首先，第一个人从蛋糕中切出他所认为的 1/n ，然后把这一小块传给第二个人。第二个人可以选择直接把这块蛋糕递交给第三个人，也可以选择从中切除一小块（如果在他看来这块蛋糕比 1/n 大了），再交给第三个人。以此类推，每个人拿到蛋糕后都有一次“修剪”的机会，然后移交给下一个人。规定，最后一个对蛋糕大小进行改动的人将获得这块蛋糕，余下的 n – 1 个人则从头开始重复刚才的流程，分割剩下的蛋糕。每次走完一个流程，都会有一个人拿到了令他满意的蛋糕，下一次重复该流程的人数就会减少一人。不断这样做下去，直到每个人都分到蛋糕为止。<br>
    第一轮流程结束后，拿到蛋糕的人可以保证手中的蛋糕是整个蛋糕价值的 1/n 。而对于每个没有拿到蛋糕的人来说，由于当他把蛋糕传下去之后，他后面的人只能减蛋糕不能加蛋糕，因此在他看来被拿走的那部分蛋糕一定不到 1/n ，剩余的蛋糕对他来说仍然是够分的。在接下来的流程中，类似的道理也同样成立。更为厉害的是，在此游戏规则下，大家会自觉地把手中的蛋糕修剪成自认为的 1/n ，耍赖不会给他带来任何好处。分蛋糕的人绝不敢把蛋糕切得更小，否则得到这块蛋糕的人就有可能是他；而如果他把一块大于 1/n 的蛋糕拱手交给了别人，在他眼里看来，剩下的蛋糕就不够分了，他最终分到的很可能远不及 1/n 。</p>
<p> <br>
    这样一来，均衡分割问题便完美解决了。不过，正如前面我们说过的，均衡条件仅仅是一个最低的要求。在生活中，人们对“公平”的概念还有很多更不易形式化的理解。如果对公平的要求稍加修改，上述方案的缺陷便暴露了出来。让我们来看这样一种情况：如果 n 个人分完蛋糕后，每个人都自认为自己分得了至少 1/n 的蛋糕，但其中两个人还是打起来了，可能是什么原因呢？由于不同的人对蛋糕各部分价值的判断标准不同，因此完全有可能出现这样的情况——虽然自己已经分到了至少 1/n 份，但在他看来，有个人手里的蛋糕比他还多。看来，我们平常所说的公平，至少还有一层意思——每个人都认为别人的蛋糕都没我手里的好。在公平分割理论中，我们把满足这个条件的分蛋糕方案叫做免嫉妒分割 (envy-free division) 。</p>
<p>    免嫉妒分割是一个比均衡分割更强的要求。如果每个人的蛋糕都没我多，那我的蛋糕至少有 1/n ，也就是说满足免嫉妒条件的分割一定满足均衡的条件。但反过来，满足均衡条件的分割却不一定是免嫉妒的。比方说， A 、 B 、 C 三人分蛋糕，但 A 只在乎蛋糕的体积， B 只关心蛋糕上的草莓颗数， C 只关心蛋糕上的巧克力块数。最后分得的结果是， A 、 B 、 C 三人的蛋糕体积相等，但 A 的蛋糕上什么都没有，B 的蛋糕上有一颗草莓两块巧克力，C 的蛋糕上有两颗草莓一块巧克力。因此，每个人从自己的角度来看都获得了整个蛋糕恰好 1/3 的价值，但这样的分法明显是不科学的—— B 、 C 两人会互相嫉妒。<br>
    之前我们介绍的两种均衡分割方案，它们都不满足免嫉妒性。就拿第一种方案来说吧，如果有三个人分蛋糕，按照规则，首先应该让第一人分第二人选，然后两人各自把自己的蛋糕切成三等份，让第三人从每个人手中各挑一份。这种分法能保证每个人获得至少 1/3 的蛋糕，但却可能出现这样的情况：第三个人从第二个人手中挑选的部分，恰好是第一个人非常想要的。这样一来，第一个人就会觉得第三个人手里的蛋糕更好一些，这种分法就不和谐了。</p>
<p>    构造一套免嫉妒的分割方案非常困难。 1960 年， John Selfridge 和 John Conway 各自独立地分析了人数为 3 的情况，构造出了第一个满足免嫉妒条件的三人分割方案。这种分割方案就被称为“Selfridge-Conway 算法”。<br>
    首先，A 把蛋糕分成三等份（当然是按照自己的看法来分的，后面提到的切分、选取也都是这样）。如果 B 认为这三块蛋糕中较大的两块是一样大的，那么按照 C 、 B 、 A 的顺序依次选取蛋糕，问题就解决了。麻烦就麻烦在 B 认为较大的两块蛋糕不一样大的情况。此时，B 就把最大的那块蛋糕的其中一小部分切下来，让剩余的部分和第二大的蛋糕一样大。被切除的部分暂时扔在一旁，在第二轮分割时再来处理。接下来，按照 C 、 B 、 A 的顺序依次选蛋糕，但有一个限制：如果 C 没有选那块被修剪过的蛋糕，B 就必须选它。<br>
    这样，三人就各分得了一块蛋糕。由于 A 是切蛋糕的人，对于他来说拿到哪一块都一样，因此 A 不会嫉妒别人。由于 B 选取的是两个较大块中的一个，因此 B 也不会嫉妒别人。由于 C 是第一个选蛋糕的，显然他也不会嫉妒别人。因此，就目前来说，三个人之间是不会有嫉妒发生的。<br>
    但是，还有一小块被切除的部分没分完，因此分割流程进入第二轮。<br>
    在 B 和 C 之间，一定有一个人选择了那块被修剪过的蛋糕。不妨把这个人重新记作 X ，另一个人就记作 Y 。让 Y 把最后那一小块分成三等份，按照 X 、 A 、 Y 的顺序依次挑选蛋糕，结束第二轮流程。这一轮结束后，每个人都又得到了一小块蛋糕。由于 X 是第一个选蛋糕的人， X 显然不会嫉妒别人；由于 Y 是分蛋糕的人， Y 也不会嫉妒别人。由于 A 比 Y 先选， A 不会嫉妒 Y 。最后，A 也是不会嫉妒 X 的，因为即使 X 拥有了第二轮中的全部蛋糕，X 手里的蛋糕加起来也只是第一轮开始时 A 等分出来的其中一块蛋糕，这是不可能超过 A 的。这就说明了，三个人之间仍然不会有嫉妒发生，Selfridge-Conway 算法的确满足免嫉妒条件。</p>
<p>    不过，Selfridge-Conway 算法只能在三人分蛋糕时使用，并不能扩展到人数更多的情况。对于人数更多的情况，免嫉妒分割问题更加困难，目前数学家们还没有找到一个比较可行的方案。正如数学家 Sol Garfunkel 所说，分蛋糕问题是 20 世纪数学研究中最重要的问题之一。直到现在，也还有一大群数学家正投身于分蛋糕问题之中，研究包括免嫉妒性在内的各种公平条件，致力于构造新的公平分割方案。</p>
<p>（感谢 <a href="http://618log.com/">0.618</a> 同学的友情帮助）</p>
			 ]]></content>
<pubDate>2010-11-29T12:17:51+00:00</pubDate>
<guid>http://www.matrix67.com/blog/archives/3944</guid>
<author><![CDATA[ 顾森 ]]></author>
</item>
<item>
<title><![CDATA[ 1 4 6 4 1不是唯一答案，我们还有Rascal三角 ]]></title>
<link>http://www.matrix67.com/blog/archives/3948</link>
<content><![CDATA[ 
		<p>    如果有人问你，三角形</p>
<p>  <img alt="image placeholder" >
<p>    的下一行数是什么，你一定会毫不犹豫地说，下一行是 “1 4 6 4 1” ——这是 Pascal 三角，每个数都等于两肩的数之和。不过，最近 The College Mathematics Journal 上的一篇论文却给出了一个同样合理的正确答案： 1 4 5 4 1 。理由同样对称而美观：每个数都等于两肩的数之积加 1 ，除以头顶上（再上一行的对应位置上）的数。例如，第 2 个数 4 就等于 (1*3 + 1) / 1 ，而第 3 个数 5 则等于 (3*3 + 1) / 2 。我们不妨就紧跟 Pascal 的脚步，把它取名为 Rascal 三角吧。<br>
    有网友肯定会说了，你就瞎掰吧， Rascal 三角形的生成规则里有除法，这会让三角形里面充斥着大量的分数的。你错了，这才是 Rascal 三角形的神奇之处：尽管每个数都是由两数相除得来的，但它们保证都是整数！你能看出这是为什么吗？</p>
<p>  <img alt="image placeholder" >
<p><span id="more-3948"></span></p>
<p> <br>
 </p>
<p>    把脑袋转过 45 度，斜着看这个三角形，于是就有了下面这个方阵：</p>
<p>  <img alt="image placeholder" >
<p>    原来 Rascal 三角形的规律竟是这样简单：变换成上图的方阵后，第 m 行第 n 列的数就是 mn + 1 （行数列数从 0 算起）。利用数学归纳法，我们可以轻易证实这一点。按照 Rascal 三角的生成法则，第 m + 1 行第 n + 1 列就应该等于 m(n + 1) + 1 与 (m + 1)n + 1 的乘积加 1 ，再除以 mn + 1 。而</p>
<p>   [m(n + 1) + 1] [(m + 1)n + 1] + 1<br>
= [(mn + 1) + m] [(mn + 1) + n] + 1<br>
= (mn + 1)(mn + 1) + m(mn + 1) + (mn + 1)n + mn + 1<br>
= (mn + 1) [(mn + 1) + m + n + 1]<br>
= (mn + 1) [(m + 1)(n + 1) + 1]</p>
<p>    它除以 mn + 1 后，正好就等于 (m + 1)(n + 1) + 1了 。</p>
<p>来源：<a href="http://www.cut-the-knot.org/arithmetic/algebra/RascalTriangle.shtml">http://www.cut-the-knot.org/arithmetic/algebra/RascalTriangle.shtml</a></p>
			 ]]></content>
<pubDate>2010-11-30T23:03:28+00:00</pubDate>
<guid>http://www.matrix67.com/blog/archives/3948</guid>
<author><![CDATA[ 顾森 ]]></author>
</item>
<item>
<title><![CDATA[ 原来函数也是有平方根的 ]]></title>
<link>http://www.matrix67.com/blog/archives/3951</link>
<content><![CDATA[ 
		<p>    最近看到一类有趣的问题：如何求解 f(f(x)) = g(x) ？我在网上简单搜索了一下，发现这里面真是大有文章。最先对这个问题进行系统研究的应该是 Hellmuth Kneser ，他把函数迭代的次数扩展到了非整数的情况，求解 f(f(x)) = g(x) 就可以更简单地说成是求解 g(x) 迭代 1/2 次后的结果，更形象的说法就是 g(x) 的“平方根”。 Hellmuth Kneser 还对 f(f(x)) = e^x 的解进行了研究，从之后的数学论文发表情况来看，这也是数学家们最关心的问题。</p>
<p>    e^x 的“平方根”究竟是什么样的呢？不妨假设满足要求的 f(x) 也是一个连续递增的函数，那么它的增长速度必然超过一切多项式函数（否则迭代的结果还是多项式），同时也必然小于一切指数形式的函数。而事实上，求解一个满足要求的 f(x) 并不难；稍作思考，我们就能够给出一个看似有些平凡的答案。</p>
<p>    取任意一个负数，记作 a 。选取任意一个在 (-∞, a] 上单调递增的函数，使得当 x 从 -∞ 增加到 a 时，函数值也从 a 增加到 0 。这样一来，当 x 趋于负无穷时， f(x) 趋于 a ， f(f(a)) 就正好趋于 0 了。但 f(a) = 0 ，那么 f(0) 就必须是 e^a ；而考虑到 f(0) ＝ e^a ，那么 f(e^a) 便只能取 1 了。同理，f(1) = e^(e^a)，而 f(e^(e^a)) 就等于 e 。以此类推，我们便得到了一连串满足要求的点。我们可以从 (-∞, a] 上的其它点出发，用同样的方法填充上述“端点值”之间的部分，得到满足要求的 f(x) 。</p>
<p>    根据这个思想，我们可以构造出一个具体的 f(x) 来。取 a = -1，在 (-∞, -1] 上定义 f(x) = e^(x+1) – 1，它的函数值正好从 -1 变到了 0 。在 (-1, 0] 上，则有 f(x) = e^(f<sup>-1</sup>(x)) = e^(ln(x + 1) – 1) = (x + 1)/e 。对于其它的 x ，则递归地定义为 f(x) = e^(f(ln(x))) 。由此我们便得到一个分段函数，正是这个分段的办法才让它夹在了多项式增长和指数级增长之间：</p>
<p><img alt="image placeholder" >
<p><span id="more-3951"></span><br>
 <br>
    当然，满足 f(f(x)) = e^x 的函数不止这一个，利用上述构造方法我们能找出无穷多个满足要求的函数来。事实上，我们还有更简单的例子，来说明 f(f(x)) = g(x) 的解有可能不止一个：</p>
<p>    定理 1. 对于某些 g(x) ，满足 f(f(x)) = g(x) 的函数 f(x) 可能不止一个。</p>
<p>    例如， f(f(x)) = x 就不止一个解。 f(x) = x 和 f(x) = -x 都是满足要求的解。</p>
<p> <br>
    而对于任意给定的 g(x) ，我们还有一个超级赖皮的方法找出一个<strong>几乎</strong>完全符合要求的 f(x) ：</p>
<p>    定理 2. 对于任意 g(x) ，都存在某个 f(x) ，使得除了某个任意小的区间以外，其余所有 x 都满足 f(f(x)) = g(x) 。</p>
<p>    随便取某个很小很小的区间 I 。随便取一个从 R\I 到 I 之间的一一对应函数 h(x) 。然后规定，当 x 属于 R\I 时， f(x) = h(x)； 当 x 属于 I 时， f(x) = g(h<sup>-1</sup>(x)) 。这样一来，对于所有不属于 I 的实数 x ，都有 f(f(x)) = g(x) 了。</p>
<p> <br>
    不过，也不要把事情想得太乐观了。</p>
<p>    定理 3. 对于某些 g(x) ，不存在函数 f(x) 使得 f(f(x)) = g(x) 。</p>
<p>    令 g(0) = 1 ， g(1) = 0 ，其余情况下都有 g(x) = x 。下面我们证明，不存在 f(x) 使得 f(f(x)) = g(x) 。假如有这样的 f(x) ，无妨假设 f(0) = a 。则 f(a) = f(f(0)) = g(0) = 1 。容易看出， a 既不可能是 0 ，又不可能是 1 （否则 f(0) 或者 f(1) 将成为不动点，矛盾）。于是 f(1) = f(f(a)) = g(a) = a 。于是 g(1) = f(f(1)) = f(a) = 1 ≠ 0 ，矛盾。</p>
<p>    这个话题还有很多有意思的研究结果。感兴趣的朋友可以移步至下面两个链接。</p>
<p>    <a href="http://www.math.niu.edu/~rusin/known-math/97/sqrt.exp">http://www.math.niu.edu/~rusin/known-math/97/sqrt.exp</a><br>
    <a href="http://mathoverflow.net/questions/17614/solving-ffxgx">http://mathoverflow.net/questions/17614/solving-ffxgx</a></p>
			 ]]></content>
<pubDate>2010-12-01T23:49:28+00:00</pubDate>
<guid>http://www.matrix67.com/blog/archives/3951</guid>
<author><![CDATA[ 顾森 ]]></author>
</item>
<item>
<title><![CDATA[ 最帅的Menelaus定理证明方法 ]]></title>
<link>http://www.matrix67.com/blog/archives/3965</link>
<content><![CDATA[ 
		<p>  <img alt="image placeholder" >
<p>    Menelaus 定理是平面几何中用于判断三点共线的一个常用定理。在 △ABC 中，点 D 、 E 、 F 分别在 BC 、 AC 、 AB 所在直线上，若 D 、 E 、 F 三点共线，则有 AF/BF · BD/CD · CE/AE = 1 。 Menelaus 定理的证明方法有很多，今天我见到了我所见过的证明方法中最帅的一种，它解决了之前很多证明方法缺乏对称性的问题，完美展示了几何命题中的对称之美。</p>
<p><span id="more-3965"></span></p>
<p> <br>
  <img alt="image placeholder" >
<p>    过 DEF 所在直线作一个新的平面（没错，辅助线做到三维空间中去了）。分别过 A 、 B 、 C 作原平面的垂线，与新的平面交于点 A’ 、 B’ 、 C’ 。于是，我们有：</p>
<p>      AA’ / BB’ = AF / BF<br>
      BB’ / CC’ = BD / CD<br>
      CC’ / AA’ = CE / AE</p>
<p>    三式乘在一块儿，结论得证。</p>
<p>    来源：<a href="http://www.cut-the-knot.org/proofs/Menelaus.shtml">http://www.cut-the-knot.org/proofs/Menelaus.shtml</a></p>
			 ]]></content>
<pubDate>2010-12-02T14:46:28+00:00</pubDate>
<guid>http://www.matrix67.com/blog/archives/3965</guid>
<author><![CDATA[ 顾森 ]]></author>
</item>
<item>
<title><![CDATA[ 把几何定理画成油画 ]]></title>
<link>http://www.matrix67.com/blog/archives/3970</link>
<content><![CDATA[ 
		<p>数学教师 Suman Vaze 在业余时间里，把一个个经典的几何定理搬上了画布。不对称的几何图形蕴含了一种更深层的对称性，无疑带来了位于构图和色彩之外的另一种美。这下，似乎又有新的油画派别诞生了——几何定理派。</p>
<p> <br>
<img alt="image placeholder" >
<p>在平行四边形中，过图形中心的直线将平分整个图形的周长。在上面这个由三个半圆组成的图形中，同样的性质仍然成立。证明的任务就留给大家自己去做了。</p>
<p><span id="more-3970"></span><br>
 <br>
<img alt="image placeholder" >
<p>三角形的三条高交于一点，这个点叫做垂心；连接三个垂足所形成的三角形叫做垂足三角形，它也满足很多优雅的性质。图形中存在大量四点共圆的情况，这又能带来一系列漂亮的定理。</p>
<p> <br>
 <br>
<img alt="image placeholder" >
<p>三个圆两两之间的公共弦交于一点。这个定理本身已经相当美妙了，神奇的是它还有一个<a href="http://www.matrix67.com/blog/archives/58">更加美妙的证明</a>。</p>
<p> <br>
 <br>
<img alt="image placeholder" >
<p>这幅图描述的是一个经典问题：已知直线 l 同侧两点 A 、 B ，求直线上一点 P 使得 AP + BP 最短。</p>
<p> <br>
 <br>
<img alt="image placeholder" >
<p>到三角形三个顶点距离之和最短的点叫做 Fermat 点。 Fermat 点的另外几个有趣的性质完美地表现在了上图中：以三角形各边为边向外作等边三角形，则原三角形各顶点与相对的等边三角形的第三个顶点的连线相交在一起，这个交点就是 Fermat 点；同时，三个等边三角形的外接圆也都过 Fermat 点。一些与 Fermat 点相关的讨论见<a href="http://www.matrix67.com/blog/archives/422">这里</a>。</p>
<p> <br>
 <br>
<img alt="image placeholder" >
<p>Desargues 定理：平面上的两个三角形的对应顶点的连线共点，则对应边的交点共线。难以想象，仅仅涉及到点与直线的位置关系，就能产生如此神奇的定理，这使得 Desargues 定理成为了射影几何中最受关注的研究对象之一。从射影几何的角度看 Desargues 定理，定理的正确性几乎是显然的。</p>
<p> <br>
 <br>
<img alt="image placeholder" >
<p>Pascal 定理：假如圆锥曲线内的（可以自相交的）内接六边形各边依次为 a 、 b 、 c 、 d 、 e 、 f ，则 a 和 d 的交点、 b 和 e 的交点， c 和 f 的交点共线。 Pascal 定理是射影几何中神一般的定理，它揭示了更多射影几何中的深刻道理。</p>
<p> <br>
 <br>
<img alt="image placeholder" >
<p>Monge 定理：平面上的三个圆，每一对圆都有两条外公切线，这两条外公切线将会交于一点。则由此产生的三个点共线。这个神一般的定理有很多<a href="http://www.matrix67.com/blog/archives/3918">神一般的证明</a>。</p>
<p> <br>
 <br>
<img alt="image placeholder" >
<p>这是另一个漂亮的定理：若三个等圆交于一点，则另外三个交点又确定了一个圆，这个圆与原来的三个圆一样大。这个定理的证明也交给大家了吧。</p>
<p> <br>
 <br>
来源： <a href="http://www.guokr.com/article/2750/">http://www.guokr.com/article/2750/</a><br>
查看更多：<a href="http://sites.google.com/site/vazeart/">http://sites.google.com/site/vazeart/</a><br>
 </p>
			 ]]></content>
<pubDate>2010-12-03T20:50:04+00:00</pubDate>
<guid>http://www.matrix67.com/blog/archives/3970</guid>
<author><![CDATA[ 顾森 ]]></author>
</item>
<item>
<title><![CDATA[ N体问题的30个周期性解 ]]></title>
<link>http://www.matrix67.com/blog/archives/3979</link>
<content><![CDATA[ 
		<p>突然想到在网上查查三体问题进展究竟如何，于是摸到了这么一个地方：</p>
<p>   <a href="http://www.maia.ub.es/dsg/nbody">http://www.maia.ub.es/dsg/nbody</a></p>
<p>上面这个地方提供了多体问题中颇具代表性的 47 个解的数据，用的 gnuplot 格式。我选择了其中 30 个，用 Mathematica 读出数据，生成了 30 个直观的 gif 动画。大家将会看到，在引力的作用下，多颗星体可能会形成的一些极其诡异的轨道。后面的解越来越不平凡，可见多体问题之难。<strong>图片总共 7 M，服务器表示压力很大，转载勿盗链图片。</strong></p>
<p><img alt="image placeholder" >
<p><span id="more-3979"></span><br>
<img alt="image placeholder" >
<p> <br>
<img alt="image placeholder" >
<p> <br>
<img alt="image placeholder" >
<p> <br>
<img alt="image placeholder" >
<p> <br>
<img alt="image placeholder" >
<p> <br>
<img alt="image placeholder" >
<p> <br>
<img alt="image placeholder" >
<p> <br>
<img alt="image placeholder" >
<p> <br>
<img alt="image placeholder" >
<p> <br>
<img alt="image placeholder" >
<p> <br>
<img alt="image placeholder" >
<p> <br>
<img alt="image placeholder" >
<p> <br>
<img alt="image placeholder" >
<p> <br>
<img alt="image placeholder" >
<p> <br>
<img alt="image placeholder" >
<p> <br>
<img alt="image placeholder" >
<p> <br>
<img alt="image placeholder" >
<p> <br>
<img alt="image placeholder" >
<p> <br>
<img alt="image placeholder" >
<p> <br>
<img alt="image placeholder" >
<p> <br>
<img alt="image placeholder" >
<p> <br>
<img alt="image placeholder" >
<p> <br>
<img alt="image placeholder" >
<p> <br>
<img alt="image placeholder" >
<p> <br>
<img alt="image placeholder" >
<p> <br>
<img alt="image placeholder" >
<p> <br>
<img alt="image placeholder" >
<p> <br>
<img alt="image placeholder" >
<p> <br>
<img alt="image placeholder" >
			 ]]></content>
<pubDate>2010-12-06T22:03:34+00:00</pubDate>
<guid>http://www.matrix67.com/blog/archives/3979</guid>
<author><![CDATA[ 顾森 ]]></author>
</item>
<item>
<title><![CDATA[ 神秘常量复出！用0x077CB531计算末尾0的个数 ]]></title>
<link>http://www.matrix67.com/blog/archives/3985</link>
<content><![CDATA[ 
		<p>    大家或许还记得 Quake III 里面的一段<a href="http://www.matrix67.com/blog/archives/362">有如天书般的代码</a>，其中用到的神秘常量 0x5F3759DF 究竟是怎么一回事，着实让不少人伤透了脑筋。今天，我见到了一段同样诡异的代码。<br>
    下面这个位运算小技巧可以迅速给出一个数的二进制表达中末尾有多少个 0 。比如， 123 456 的二进制表达是 1 11100010 01000000 ，因此这个程序给出的结果就是 6 。</p>
<p><code>unsigned int v;  // find the number of trailing zeros in 32-bit v<br>
int r;           // result goes here<br>
static const int MultiplyDeBruijnBitPosition[32] =<br>
{<br>
  0, 1, 28, 2, 29, 14, 24, 3, 30, 22, 20, 15, 25, 17, 4, 8,<br>
  31, 27, 13, 23, 21, 19, 16, 7, 26, 12, 18, 6, 11, 5, 10, 9<br>
};<br>
r = MultiplyDeBruijnBitPosition[((uint32_t)((v &amp; -v) * 0x077CB531U)) &gt;&gt; 27];</code></p>
<p>    熟悉<a href="http://www.matrix67.com/blog/archives/266">位运算</a>的朋友们可以认出， v &amp; -v 的作用就是取出右起连续的 0 以及首次出现的 1 。当 v = 123 456 时， v &amp; -v 就等于 64 ，即二进制的 1000000 。怪就怪在，这个 0x077CB531 是怎么回事？数组 MultiplyDeBruijnBitPosition 又是什么玩意儿呢？</p>
<p><span id="more-3985"></span><br>
    这还得从 0x077CB531 本身的一个性质开始说起。把这个常数写成 32 位二进制，可以得到</p>
<p><code>00000111011111001011010100110001</code></p>
<p>    这个 01 串有一个无比牛 B 的地方：如果把它看作是循环的，它正好包含了全部 32 种可能的 5 位 01 串，既无重复，又无遗漏！其实，这样的 01 串并不稀奇，因为构造这样的 01 串完全等价于寻找一个有向图中的 Euler 回路。如下图，构造一个包含 16 个顶点的图，顶点分别命名为 0000, 0001, 0010, …, 1111 。如果某个点的后 3 位，正好等于另一个点的前 3 位，就画一条从前者出发指向后者的箭头。也就是说，只要两个顶点上的数满足 abcd 和 bcde 的关系（ a 、 b 、 c 、 d 、 e 可能代表相同的数字），就从 abcd 出发，连一条到 bcde 的路，这条路就记作 abcde 。注意，有些点之间是可以相互到达的（比如 1010 和 0101 ），有些点甚至有一条到达自己的路（比如 0000 ）。</p>
<p>  <img alt="image placeholder" >
<p>    构造一个字符串使其包含所有可能的 5 位 01 子串，其实就相当于沿着箭头在上图中游走的过程。不妨假设字符串以 0000 开头。如果下一个数字是 1 ，那么 00001 这个子串就被包含了，同时最新的 4 位数就变成了 0001 ；但若下一个数字还是 0 ，那么 00000 就被包含了进来，最新的 4 个数仍然是 0000 。从图上看，这无非是一个从 0000 点出发走了哪条路的问题：你是选择了沿 00001 这条路走到了 0001 这个点，还是沿着 00000 这条路走回了 0000 这个点。同理，每添加一个数字，就相当于沿着某条路走到了一个新的点，路上所写的 5 位数就是刚被考虑到的 5 位数。我们的目的便是既无重复又无遗漏地遍历所有的路。显然图中的每个顶点入度和出度都是 2 ，因此这个图一定存在 Euler 回路，我们便能轻易构造出一个满足要求的 01 串了。这样的 01 串就叫做 De Bruijn 序列。</p>
<p>    De Bruijn 序列在这里究竟有什么用呢？它的用途其实很简单，就是为 32 种不同的情况提供了一个唯一索引。比方说， 1000000 后面有 6 个 0 ，将 1000000 乘以 0x077CB531 ，就得到</p>
<p><code>   00000111011111001011010100110001<br>
-&gt; 11011111001011010100110001000000</code></p>
<p>    相当于把 De Bruijn 序列左移了 6 位。再把这个数右移 27 位，就相当于提取出了这个数的头 5 位：</p>
<p><code>   11011111001011010100110001000000<br>
-&gt;                            11011</code></p>
<p>    由于 De Bruijn 序列的性质，因此当输入数字的末尾 0 个数不同时，最后得到的这个 5 位数也不同。而数组 MultiplyDeBruijnBitPosition 则相当于一个字典的功能。 11011 转回十进制是 27 ，于是我们查一查 MultiplyDeBruijnBitPosition[27] ，程序即返回 6 。<br>
    注意到当输入数字的末尾 0 个数超过 27 个时，程序也是正确的，因为左移时低位正好是用 0 填充的。</p>
<p>    这段神一般的代码取自 <a href="http://graphics.stanford.edu/~seander/bithacks.html">http://graphics.stanford.edu/~seander/bithacks.html</a> ，欢迎大家前去围观。</p>
			 ]]></content>
<pubDate>2010-12-13T22:02:21+00:00</pubDate>
<guid>http://www.matrix67.com/blog/archives/3985</guid>
<author><![CDATA[ 顾森 ]]></author>
</item>
<item>
<title><![CDATA[ 徒手画分形图形，此MM乃神人也！ ]]></title>
<link>http://www.matrix67.com/blog/archives/4000</link>
<content><![CDATA[ 
		<p>此 MM 叫做 <a href="http://vihart.com/">Vi Hart</a> 。她制作了一系列叫做 Doodling in Math Class 的视频，在 YouTube 上的观看人数都是好几万。在欣赏其无比强大的画图能力的同时，你也将会从一个全新的角度体验到数学的美妙。</p>
<p><strong>Doodling in Math Class – Infinity Elephants</strong></p>
<p><embed src="http://www.tudou.com/v/crBBJxe2m5A" type="application/x-shockwave-flash" allowscriptaccess="always" allowfullscreen="true" wmode="opaque" width="480" height="400"></embed></p>
<p><span id="more-4000"></span><br>
 </p>
<p><strong>Doodling in Math Class – Binary Trees</strong></p>
<p><embed src="http://www.tudou.com/v/dY7rRAa9jx4" type="application/x-shockwave-flash" allowscriptaccess="always" allowfullscreen="true" wmode="opaque" width="480" height="400"></embed></p>
<p> <br>
 </p>
<p><strong>Doodling in Math Class – Snakes Graphs</strong></p>
<p><embed src="http://www.tudou.com/v/p3jpdpH5tlE" type="application/x-shockwave-flash" allowscriptaccess="always" allowfullscreen="true" wmode="opaque" width="480" height="400"></embed></p>
<p> <br>
 </p>
<p><strong>Doodling in Math Class – Stars</strong></p>
<p><embed src="http://www.tudou.com/v/BefMHX8-iBE" type="application/x-shockwave-flash" allowscriptaccess="always" allowfullscreen="true" wmode="opaque" width="480" height="400"></embed></p>
<p> <br>
来源： <a href="http://vihart.com/doodling/">http://vihart.com/doodling/</a></p>
<p>附赠此 MM 照片一张：</p>
<p><img alt="image placeholder" >
 </p>
			 ]]></content>
<pubDate>2010-12-15T17:36:10+00:00</pubDate>
<guid>http://www.matrix67.com/blog/archives/4000</guid>
<author><![CDATA[ 顾森 ]]></author>
</item>
<item>
<title><![CDATA[ 点燃绳子究竟还能测出哪些时间？ ]]></title>
<link>http://www.matrix67.com/blog/archives/4009</link>
<content><![CDATA[ 
		<p>    有一根不均匀的绳子，烧完正好需要 1 个小时。如何用这根绳子测出半个小时的时间呢？答案很巧妙：把这根绳子的两头同时点燃，绳子烧完时正好就过了半个小时。更妙的是下面这个加强版：如何用两根这样的绳子来计时 45 分钟？答案是，把其中一根绳子的两头都点燃，同时点燃另一根绳子的其中一头；待到前一根绳子烧完之后，再把第二根绳子的另一头也点燃，于是便能测出 30 + 15  = 45 分钟了。<br>
    一个有趣的问题自然而然地产生了：假如这样的绳子足够多，哪些时间能够用烧绳子的方法测出来呢？</p>
<p>    为了解决这一问题，让我们先把这个问题本身理清楚——“烧绳子测量时间”的“游戏规则”究竟是什么？首先，一根绳子（的任意一头）可以在第 0 时刻或者另外某根绳子烧完的瞬间点燃。另外我们假设，在同一时刻，我们可以同时点燃任意多根绳子。而由此测出的时间段则定义为从点燃第一根绳子到最后一根绳子烧完的总时间。<br>
    用形式化的语言来描述，如果绳子两端分别在第 a 时刻和第 b 时刻点燃（其中 |a – b| &lt; 1 ），那么绳子最终将在 (a + b + 1)/2 时刻烧尽。我们说某个时间点 x 是可以到达的，当且仅当存在两个可以到达的时间 a 、 b ，使得 x = (a + b + 1)/2 。显然，第 0 时刻是可以到达的。从第 0 时刻出发，不断用 (a + b + 1)/2 进行迭代，我们就能得到所有能够测出的时间了。

  <img alt="image placeholder" >
<p>     可以看到，随着迭代次数的增加，能够测量的时间越来越多，也越来越精确；不过，时间一去不复返，有些时间还是无法测量，绳子再多也没法弥补。</p>
<p><span id="more-4009"></span><br>
 <br>
     如果绳子充分多，能够测量的时间精确得吓人。最小的可测时间是 0 + 2^(-1) ，在时刻 1 之后最小的可测时间则是 1 + 2^(-3) ，超过 2 但最接近 2 的可测时间则是 2 + 2^(-10) 。</p>
<p>  <img alt="image placeholder" >
<p>    那么，在 3 之后最接近 3 的可测时间是 3 加上 2 的负多少次方呢？答案是 2 的 负 1 541 023 937 次方，可见烧绳子测量时间理论上有多精确。序列 1, 3, 10, 1 541 023 937 的增长速度之惊人，甚至可以说已经超过了指数级增长。那么，序列的下一项有多大呢？这个下一项真的可以说是大到难以想象了。即使说它有多少位，或者它的位数有多少位，也不能描述出它的大小。这个数必须用一些<a href="http://www.matrix67.com/blog/archives/3857">特殊的数学记号</a>来表示，它大到甚至可以和 <a href="http://www.matrix67.com/blog/archives/925">Graham 数</a> 相提并论。</p>
<p>    具体的一些结果还可以看这里：<br>
    <a href="http://mathpuzzle.com/fusible.pdf">http://mathpuzzle.com/fusible.pdf</a></p>
			 ]]></content>
<pubDate>2010-12-18T01:03:28+00:00</pubDate>
<guid>http://www.matrix67.com/blog/archives/4009</guid>
<author><![CDATA[ 顾森 ]]></author>
</item>
<item>
<title><![CDATA[ 趣题：两两间的距离都是整数的点集 ]]></title>
<link>http://www.matrix67.com/blog/archives/4018</link>
<content><![CDATA[ 
		<p>    最多能在平面上找出多少个点，使得它们两两之间的距离都是整数？当然，我们忽略最平凡的解——所有点都在一条直线上。</p>
<p>    三个点的解显然是存在的，只需要构造一个边长为 1 的等边三角形即可。事实上，满足任意两数之和大于第三数的一组整数都可以成为一个三角形的三条边。寻找含有四个点的解也并不困难，一个长为 4 宽为 3 的矩形就能满足要求。不过，我们还有更小一些的解。最小的解貌似是下面这个等腰梯形：上底、下底分别是 3 和 4 ，两腰都是 2 ，两条对角线都是 4 ，正好也都是整数。</p>
<p>      <img alt="image placeholder" >
<p>    那么，能否找到平面上的五个不共线的点，使得两两之间的距离都是整数呢？最多能找到多少个这样的点呢？</p>
<p><span id="more-4018"></span><br>
    想到这个问题之后，我在网上简单地搜索了一下。出人意料的是，我们能在平面上找出<strong>任意多个</strong>不共线的点，使得它们两两之间的距离都是整数。构造方法有很多，<a href="http://www.ocf.berkeley.edu/~wwu/cgi-bin/yabb/YaBB.cgi?board=riddles_putnam;action=display;num=1103227094">这里</a>提到的是我最喜欢的构造方法之一。</p>
<p>    为了得到所有距离都是整数的点集，我们只需要构造出所有距离都是有理数的点集，再乘以所有分母的公倍数即可。现在，作一个直径为 1 的圆，任意作一条直径 AB 。取两组勾股数，比如 (3, 4, 5) 和 (5, 12, 13) 吧。在圆上找一点 C ，使得 ABC 组成一个边长分别为 (3/5, 4/5, 1) 的直角三角形；在圆上找一点 D ，使得 ABD 组成一个边长分别为 (5/13, 12/13, 1) 的直角三角形。这样一来， AB 、 AC 、 BC 、 AD 、 BD 的长度就都是有理数了。有趣的是，根据 Ptolemy 定理，这个圆内接四边形满足 AB · CD ＋ AC · BD = AD · BC ，由此可知 CD 的长度也一定是一个有理数。</p>
<p>  <img alt="image placeholder" >
<p>    由于本质上不同的勾股数组有无穷多个，因此圆弧上像 C 和 D 这样的点也有无穷多个。也就是说，我们能在圆上找到任意多的点，使得它们之间的距离都是有理数。乘以这些有理数的公分母后，便能得到任意多个两两距离都是整数的点了。</p>
<p>    寻找满足各种条件的“整距离图形”是一个非常有趣的话题。这类问题叫做 Rational Distances ，搜索一下可以找到很多有趣的结论。</p>
			 ]]></content>
<pubDate>2010-12-27T14:31:08+00:00</pubDate>
<guid>http://www.matrix67.com/blog/archives/4018</guid>
<author><![CDATA[ 顾森 ]]></author>
</item>
<item>
<title><![CDATA[ 生日悖论外传：任取两个人生日相同的概率是50% ]]></title>
<link>http://www.matrix67.com/blog/archives/4025</link>
<content><![CDATA[ 
		<p>    对原题的误读，有时竟会产生一些更有意思的问题。<a href="http://www.guokr.com/ask/item/4236/">果壳问答</a>上，网友 qxx 提问说：</p>
<blockquote><p>一个房间里面有很多人，我想让房间里面任意两个人的生日相同的概率是 50% 的话那房间里面应该最少有多少人？</p></blockquote>
<p>    当然，几乎可以肯定，提问人原本是想说“至少两个人”的，而问题的答案就是 23 ——生日悖论带来的惊人的答案。不过，如果把“至少两个人”误说成“任意两个人”，题目意思就完全变了，并且变得明显更有意思了。</p>
<p>    大家很快便会想到，如果任取两个人，他们的生日相同的概率恰好是 50% ，那么房间里最少有四个人，其中三个人的生日是同一天，另外一个人的生日跟他们都不同 。从四个人里选出两个人有 6 种方案，选出生日相同的两人则有 3 种方案，恰好是 6 的一半。</p>
<p>    继续看下去之前，大家不妨来猜猜看，这个问题还有其它的解吗？下一个解有多大？</p>
<p><span id="more-4025"></span><br>
    问题的本质就是，把 n 拆分成 n<sub>1</sub> + n<sub>2</sub> + … + n<sub>k</sub> ，使得 C(n<sub>1</sub> , 2) + C(n<sub>2</sub> , 2) + … + C(n<sub>k</sub> , 2) 正好等于 C(n, 2) 的一半。下一个解发生在 n = 9 的时候，其中有 6 个人拥有共同的生日，另外 3 个人拥有另一个共同的生日。我们不妨把这个解简记作  9 ＝ 6 + 3 。<br>
    我用 Mathematica 进行了一些简单的搜索，得到了 n &lt; 40 时全部的解：


</p>
<blockquote>4 = 3 + 1<br>
9 = 6 + 3<br>
13 = 9 + 3 + 1<br>
16 = 10 + 6<br>
17 = 12 + 2 + 2 + 1<br>
20 = 14 + 3 + 2 + 1<br>
21 = 15 + 1 + 1 + 1 + 1 + 1 + 1<br>
24 = 17 + 2 + 2 + 1 + 1 + 1<br>
25 = 15 + 10<br>
28 = 19 + 6 + 3 = 18 + 9 + 1<br>
29 = 20 + 5 + 3 + 1<br>
32 = 22 + 6 + 2 + 2<br>
33 = 23 + 5 + 2 + 1 + 1 + 1<br>
36 = 25 + 6 + 1 + 1 + 1 + 1 + 1 = 25 + 4 + 4 + 3 = 24 + 9 + 3 = 21 + 15<br>
37 = 26 + 4 + 2 + 2 + 1 + 1 + 1 = 26 + 3 + 3 + 2 + 2 + 1</blockquote>
<p>    当 n ＝ 40, 41, 44, 45, 48, 49 时也是有解的，解的个数分别为 5, 3, 6, 3, 5, 8 。 n &gt; 50 时我就没算了，不过估计解会越来越多。</p>
<p>    看上去，问题的解似乎很没规律， n = 8 时竟然无解想必会让不少人大吃一惊，而 n 是某些质数时却反而有不少解，这使得问题变得非常有趣。是否能找到一种构造解的方法，从而说明问题有无穷多解？解的个数与 n 之间存在什么关系？能否找到一种生成全部解的方法？这个问题之前有研究过吗？得出过什么有趣的结论吗？欢迎大家在下面一起来讨论。</p>
			 ]]></content>
<pubDate>2010-12-30T15:22:18+00:00</pubDate>
<guid>http://www.matrix67.com/blog/archives/4025</guid>
<author><![CDATA[ 顾森 ]]></author>
</item>
<item>
<title><![CDATA[ 19有什么特别的地方？ ]]></title>
<link>http://www.matrix67.com/blog/archives/4032</link>
<content><![CDATA[ 
		<p>    今天在网上看到一个<a href="http://www.futilitycloset.com/2010/12/31/bewitched/">神奇的东西</a>：把从 1/19 到 18/19 的所有分数展开成小数，得到一个 18 × 18 的数字方阵。这个数字方阵有什么特别的地方呢？</p>
<p>    <img alt="image placeholder" >
<p>    答案是，它是一个幻方——每一行、每一列和两条对角线上的数字之和都是 81 （注：严格意义上说它不算幻方，因为有相同数字）。</p>
<p><span id="more-4032"></span><br>
    当然，相信大家像我一样，看到上图之后第一件事情就是验证把 19 换成 7 能否得到一个 6 阶幻方。嗯，我已经试过了，不能——对角线上的数不等于循环节内的数字之和。嗯，我已经把17、23、29之类的都试过了，都不能形成幻方。<br>
    19 这个数字有什么特别的地方？这真的只是一个巧合吗？</p>
			 ]]></content>
<pubDate>2011-01-04T06:17:45+00:00</pubDate>
<guid>http://www.matrix67.com/blog/archives/4032</guid>
<author><![CDATA[ 顾森 ]]></author>
</item>
<item>
<title><![CDATA[ 千万别学数学：最折磨人的数学未解之谜（一） ]]></title>
<link>http://www.matrix67.com/blog/archives/4035</link>
<content><![CDATA[ 
		<p>    数学之美不但体现在漂亮的结论和精妙的证明上，那些尚未解决的数学问题也有让人神魂颠倒的魅力。和 Goldbach 猜想、 Riemann 假设不同，有些悬而未解的问题趣味性很强，“数学性”非常弱，乍看上去并没有触及深刻的数学理论，似乎是一道可以被瞬间秒杀的数学趣题，让数学爱好者们“不找到一个巧解就不爽”；但令人称奇的是，它们的困难程度却不亚于那些著名的数学猜想，这或许比各个领域中艰深的数学难题更折磨人吧。</p>
<p>    作为一本数学趣题集， Mathematical Puzzles 一书中竟把仍未解决的数学趣题单独列为一章，可见这些问题有多么令人着迷。我从这一章里挑选了一些问题，在这里和大家分享一下。这本书是 04 年出版的，书里提到的一些“最新进展”其实已经不是最新的了；不过我也没有仔细考察每个问题当前的进展，因此本文的信息并不保证是 100% 准确的，在此向读者们表示歉意。</p>
<p>    这篇文章很长，大家不妨用自己喜欢的方式马克一下，一天读一点。</p>
<p><span id="more-4035"></span><br>
<strong>天使和恶魔</strong></p>
<p>    天使和恶魔在一个无限大的棋盘上玩游戏。每一次，恶魔可以挖掉棋盘上的任意一个格子，天使则可以在棋盘上飞行 1000 步之后落地；如果天使落在了一个被挖掉的格子上，天使就输了。<br>
    问题：恶魔能否困住天使（在天使周围挖一圈厚度 1000 的坑）？</p>
<p>    这是 Conway 大牛的又一个经典谜题。经常阅读这个 Blog 的人会发现， Conway 大牛的<a href="http://www.matrix67.com/blog/?s=Conway">出镜率</a>极高。不过这一次，Conway 真的是伤透了不少数学家的脑筋。作为一个很“正常”的组合游戏，天使与恶魔的问题竟然一直没能得到解决。目前已经有的结论是，如果天使每次只能移动一步，恶魔一定能获胜。不过，天使只要能每次飞两步，似乎就已经很无敌了。当然，魔鬼的优势也不小——它不用担心自己“走错”，每多挖一个坑对于它来说都是有利的。</p>
<p>    话说回来， Conway 本人似乎仍然相信天使能赢——他悬赏了 1000 美元征求恶魔必胜的证明，但只悬赏了 100 美元征求天使必胜的证明。一些更详细的讨论可以见<a href="http://library.msri.org/books/Book29/files/conway.pdf">这里</a>。</p>
<p>    Update: 网友 yllan 评论到，这个问题已经被解开了，n ≥ 2 时天使贏。 详见 <a href="http://home.broadpark.no/~oddvark/angel/">这里</a>。</p>
<p> <br>
<strong>3x + 1 问题</strong></p>
<p>    从任意一个正整数开始，重复对其进行下面的操作：如果这个数是偶数，把它除以 2 ；如果这个数是奇数，则把它扩大到原来的 3 倍后再加 1 。序列是否最终总会变成 4, 2, 1, 4, 2, 1, … 的循环？</p>
<p>    这个问题可以说是一个“坑”——乍看之下，问题非常简单，突破口很多，于是数学家们纷纷往里面跳；殊不知进去容易出去难，不少数学家到死都没把这个问题搞出来。已经中招的数学家不计其数，这可以从 3x + 1 问题的各种别名看出来： 3x + 1 问题又叫 Collatz 猜想、 Syracuse 问题、 Kakutani 问题、 Hasse 算法、 Ulam 问题等等。后来，由于命名争议太大，干脆让谁都不沾光，直接叫做 3x + 1 问题算了。</p>
<p>    3x + 1 问题不是一般的困难。这里举一个例子来说明数列收敛有多么没规律。从 26 开始算起， 10 步就掉入了“421 陷阱”：</p>
<blockquote><p>26, 13, 40, 20, 10, 5, 16, 8, 4, 2, 1, 4, 2, 1, …</p></blockquote>
<p>    但是，从 27 开始算起，数字会一路飙升到几千多，你很可能会一度认为它脱离了“421 陷阱”；但是，经过上百步运算后，它还是跌了回来：</p>
<blockquote><p>27, 82, 41, 124, 62, 31, 94, 47, 142, 71, 214, 107, 322, 161, 484, 242, 121, 364, 182, 91, 274, 137, 412, 206, 103, 310, 155, 466, 233, 700, 350, 175, 526, 263, 790, 395, 1186, 593, 1780, 890, 445, 1336, 668, 334, 167, 502, 251, 754, 377, 1132, 566, 283, 850, 425, 1276, 638, 319, 958, 479, 1438, 719, 2158, 1079, 3238, 1619, 4858, 2429, 7288, 3644, 1822, 911, 2734, 1367, 4102, 2051, 6154, 3077, 9232, 4616, 2308, 1154, 577, 1732, 866, 433, 1300, 650, 325, 976, 488, 244, 122, 61, 184, 92, 46, 23, 70, 35, 106, 53, 160, 80, 40, 20, 10, 5, 16, 8, 4, 2, 1, 4, 2, 1, …</p></blockquote>
<p> <br>
<strong>随机 01 串的最长公共子序列</strong></p>
<p>    如果从数字序列 A 中删除一些数字就能得到数字序列 B ，我们就说 B 是 A 的子序列。例如， 110 是 010010 的子序列，但不是 001011 的子序列。两个序列的“公共子序列”有很多，其中最长的那个就叫做“最长公共子序列”。<br>
    随机产生两个长度为 n 的 01 序列，其中数字 1 出现的概率是 p ，数字 0 出现的概率是 1 – p 。用 C<sub>p</sub>(n) 来表示它们的最长公共子序列的长度，用 C<sub>p</sub> 来表示 C<sub>p</sub>(n) / n 的极限值。</p>
<p>    关于 C<sub>p</sub> 的存在性，有一个非常巧妙的证明；然而，这个证明仅仅说明了 C<sub>p</sub> 的存在性，它完全没有给计算 C<sub>p</sub> 带来任何有用的提示。<br>
    即使是 C<sub>1/2</sub> 的值，也没人能成功算出来。 Michael Steele 猜想 C<sub>1/2</sub> = 2/(1 + √<span style="text-decoration:overline">2</span>) ≈ 0.828427 。后来， V. Chvátal 和 D. sankoff 证明了 0.773911 &lt; C<sub>1/2</sub> &lt; 0.837623 ，看上去 Michael Steele 的猜想似乎很可能是对的。 2003 年， George Lueker 证明了 0.7880 &lt; C<sub>1/2</sub> &lt; 0.8263 ，推翻了 Michael Steele 的猜想。<br>
    更糟的是，“当 p 为 1/2 时 C<sub>p</sub> 达到最小”似乎是一件很靠谱的事，但这个结论也无人能证明。</p>
<p> <br>
<strong>曲线的内接正方形</strong></p>
<p>    证明或推翻，在平面中的任意一条简单封闭曲线上，总能找到四个点，它们恰能组成一个正方形。</p>
<p>    这样一个看上去如此基本的问题，竟然没有被解决！这个 Blog 上曾经<a href="http://www.matrix67.com/blog/archives/3422">证明过</a>，任意凸多边形上总存在四个可以构成正方形的点；对证明方法进行改进，可以把结论扩展到凹多边形上。目前，对于充分光滑的曲线，似乎已经有了肯定的结论；但对于任意曲线来说，这仍然是一个悬而未解的问题。平面上的曲线无奇不有，说不准我们真能精心构造出一种不满足要求的怪异曲线。</p>
<p> <br>
<strong>环形跑道难题</strong></p>
<p>    有一个环形跑道，总长为 1 个单位。n 个人从跑道上的同一位置出发，沿着跑道顺时针一直跑下去。每个人的速度都是固定的，但不同人的速度不同。证明或推翻，对于每一个人，总会有一个时刻，他与其他所有人的距离都<del datetime="2012-07-12T04:51:02+00:00">大于</del>不小于 1/n 。</p>
<p>    乍看上去，这个问题无异于其它各种非常巧妙的初等组合数学问题，但不可思议的是，这个问题竟然直到现在仍没解决。目前最好的结果是，当 n ≤ 6 时，结论是成立的。直觉上，对于更大的 n ，结论也应该成立，不过尚未有人证明。</p>
<p> <br>
<strong>排序问题加强版</strong></p>
<p>    有 n 个盒子，从左至右依次编号为 1, 2, …, n 。第 1 个盒子里放两个编号为 n 的小球，第 2 个盒子里放两个编号为 n – 1的小球，以此类推，第 n 个盒子里放两个编号为 1 的小球。每一次，你可以在相邻两个盒子中各取一个小球，交换它们的位置。为了把所有小球放进正确的盒子里，最少需要几次交换？</p>
<p>    为了说明这个问题背后的陷阱，我们不妨先拿 n = 5 的情况做个例子。首先，如果每个盒子里只有一个球，问题就变成了经典的排序问题了：只能交换相邻元素，如何最快地把 5, 4, 3, 2, 1 变成 1, 2, 3, 4, 5 ？如果一个数列中前面的某个数反而比后面的某个数大，我们就说这两个数是一个“逆序对”。显然，初始情况下所有数对都是逆序对，n = 5 时逆序对共有 10 个。我们的目的就是要把这个数目减少到 0 。而交换两个相邻的数只能消除一个逆序对，因此 10 次交换是必需的。<br>
    不过，题目里面每个盒子里有两个球，那么是不是必须要交换 20 次才行呢？错！下面这种做法可以奇迹般地在 15 步之内完成排序：</p>
<blockquote><p>55, 44, 33, 22, 11<br>
54, 54, 33, 22, 11<br>
54, 43, 53, 22, 11<br>
54, 43, 32, 52, 11<br>
54, 43, 32, 21, 51<br>
54, 43, 21, 32, 51<br>
54, 31, 42, 32, 51<br>
41, 53, 42, 32, 51<br>
41, 32, 54, 32, 51<br>
41, 32, 42, 53, 51<br>
41, 32, 42, 31, 55<br>
41, 32, 21, 43, 55<br>
41, 21, 32, 43, 55<br>
11, 42, 32, 43, 55<br>
11, 22, 43, 43, 55<br>
11, 22, 33, 44, 55</p></blockquote>
<p>    第一次看上去似乎很不可思议，但细想一下还是能想明白的：同一个盒子里能够放两个数，确实多了很多新的可能。如果左边盒子里的某个数比右边某个盒子里的数大，我们就说这两个数构成一个逆序对；但如果两个不同的数在同一个盒子里，我们就把它们视作半个逆序对。现在让我们来看看，一次交换最多能消除多少个逆序对。假设某一步交换把 ab, cd 变成了 ac, bd ，最好的情况就是 bc 这个逆序对彻底消除了，同时 ac 、 bd 两个逆序对消除了一半， ab 、 cd 两个（已经消除了一半的）逆序对也消除了一半，因此一次交换最多可以消除 3 个逆序对。由于一开始每个盒子里的两个相同的数都会在中间的某个时刻分开来，最后又会合并在一起，因此我们可以把初始时两个相同的数也当作一个逆序对。这样的话，初始时每两个数都是逆序对， n 个盒子里将产生 C(2n, 2)个逆序对。自然，我们至少需要 C(2n, 2) / 3 步才能完成排序。当 n = 5 时， C(2n, 2) / 3 = 15 ，这就说明了上面给出的 n = 5 的排序方案是最优的。</p>
<p>    这个分析太巧妙了，实在是让人拍案叫绝。就只可惜，这个下界并不是总能达到的。当 n = 6 时，上述分析得出的下界是 22 步，但计算机穷举发现没有 23 步交换是不行的。于是，这个问题又变成了一个诱人的坑，至今仍未被填上。</p>
<p> <br>
<strong>多面体的展开</strong></p>
<p>    证明或推翻，总可以把一个凸多面体沿着棱剪开，展开成一个简单的平面多边形。</p>
<p>    这是一个看上去很“自然”的问题，或许大家在玩弄各种纸制包装盒的时候，就已经思考过这个问题了。现在，人们已经找到了不满足条件的凹多面体，也就是说存在凹多面体使得无论怎样展开它都会不可避免地得到与自身重叠的平面多边形。同时，确实也存在一些凸多面体，按照某种方式展开它后，会得到与自身重叠的平面多边形。不过，对于某个凸多面体，任何一种方法都不能把它展开到一个平面上，这听上去似乎不大可能；然而，在数学上这一点却一直没被证明。</p>
<p> <br>
<strong>用平面镜拼成的多边形</strong></p>
<p>    证明或推翻，对于任意一个内壁全是镜面的多边形，总能在里面找到一个点，使得位于这个点的光源可以照亮整个多边形内部。</p>
<p>    这是一个非常有创意的问题，只可惜问题最早的出处已经不得而之了。问题有趣就有趣在，“多边形”这个条件是必需的：如果允许有曲线的话，我们就能构造出一个由镜面构成的平面图形（左图），里面的每个点都不能照亮整个图形。</p>
<p>   <img alt="image placeholder" >
<p>    对于多边形的情况， 1995 年 Tokarsky 给出了一个 26 边形房间（右图），把光源放在其中一个点上，它将无法照到另一个点（假设顶点处不反射光线）。因此，问题就只剩下一个了：有没有什么多边形，任意位置的光源都无法照亮整个图形？</p>
<p>    在与之相关的领域中，还有很多很帅的未解问题，大家可以参见这份 <a href="http://dimacs.rutgers.edu/dci/2001/Visibility.ppt">ppt</a> 。</p>
<p> <br>
<strong>Thrackle 猜想</strong></p>
<p>   <img alt="image placeholder" >
<p>    如果一个图中，每条边都与其它所有边相交恰好一次（顶点处相接也算相交），这个图就叫做一个 thrackle 。问，是否存在边数大于顶点数的 thrackle 图？</p>
<p>    给你一次机会，让你猜猜这个猜想是谁提出来的！没错，又是 John Conway 。这明显又是一个坑，看到这个问题谁都想试试，然后就纷纷崩溃掉。 Conway 悬赏 1000 美元征解，可见这个问题有多么不容易。目前已知的最好的结果是，一个 thrackle 的边数不会超过顶点数的两倍减 3 。</p>
<p> <br>
<strong>遍历所有的“中间子集”</strong></p>
<p>    证明或推翻，你可以通过每次添加或者删除一个元素，遍历集合 {1, 2, …, 2n + 1} 的所有大小为 n 或 n + 1 的子集。</p>
<p>    看完上面的这一行字，我可以想象你已经有一种克制不住的冲动，拿起铅笔、草稿纸和电脑，开始寻找 n 不大时的规律。这可以说是本文的所有问题中最大的一个坑了——这个问题极具诱惑性，每个人第一次看到这个问题时都会认为存在一种对所有 n 都适用的构造解，于是众人一个接一个地往坑里跳，拦都拦不住。<br>
    没有人认为这个猜想是错误的，简单的计算机枚举显示，随着 n 的增加，遍历这些子集的方案数不但也随之增加，而且增长得非常之快。到了某个 n ，方案数突然跌到了 0 ，这明显是一件极不可能发生的事。但是，几十年过去了，却没有人能够证明它！</p>
<p> <br>
<strong>关于 Venn 图</strong></p>
<p>   <img alt="image placeholder" >
<p>    画惯了三个集合的 Venn 图，很多人都会认为，四个圈画成一朵花一样的形状就是四个集合的 Venn 图了。其实这是不对的——四个圆只能产生 14 个区域，而四个集合将会交出 16 种情况。如果把四个圆圈像中间那幅图一样排列，就少了两个区域：只属于左下角的圆和右上角的圆的区域，以及只属于左上角的圆和右下角的圆的区域。<br>
    那么，是不是四个集合的 Venn 图就没法画了呢？也不是。如果你不是一个完美主义者，你可以像右图那样，把三个集合的 Venn 图扩展到四个集合；虽然看上去非常不美观，但是站在拓扑的角度看上去，只要逻辑上正确无误，谁管它画得圆不圆呢。<br>
    大家会自然而然地想到一个问题：右边这个图是否还能继续扩展成五个集合的 Venn 图呢？更一般的，是否随便什么样的 n 个集合的 Venn 图都可以扩展到 n + 1 个集合呢？</p>
<p>    令人难以置信的是，这个问题竟然还没被解决！事实上，对满足各种条件的 Venn 图的研究是一个经久不衰的话题，与 Venn 图相关的猜想绝不止这一个。</p>
<p> <br>
<strong>出现次数超过一半的元素</strong></p>
<p>    令 U 是一个有限集，S<sub>1</sub> , S<sub>2</sub> , … , S<sub>n</sub> 都是 U 的非空子集，它们满足任意多个集合的并集仍然在这些集合里。证明，一定能找到某个元素，它出现在了至少一半的集合里。</p>
<p>    不可思议，即使是最基本最离散的数学研究对象——有限集——里面，也有让人崩溃的未解问题。<br>
    1999 年， Piotr Wojcik 用一种非常巧妙的方法证明了，存在一个元素出现在了至少 n/log<sub>2</sub>n 的集合里。不过，这离目标还有很大一段距离。</p>
			 ]]></content>
<pubDate>2011-01-04T12:52:30+00:00</pubDate>
<guid>http://www.matrix67.com/blog/archives/4035</guid>
<author><![CDATA[ 顾森 ]]></author>
</item>
<item>
<title><![CDATA[ 趣题：两步猜出多项式的各项系数 ]]></title>
<link>http://www.matrix67.com/blog/archives/4064</link>
<content><![CDATA[ 
		<p>有一个黑匣子，黑匣子里有一个关于 x 的多项式 p(x) 。我们不知道它有多少项，但已知所有的系数都是正整数。每一次，你可以给黑匣子输入一个整数，黑匣子将返回把这个整数代入多项式后的值。有一个不可思议的结论：你可以在两步之内还原出整个多项式！这是如何做到的呢？</p>
<p style="color:#e5e5e5">首先，输入 1 ，于是便得到整个多项式的所有系数之和。不妨把这个系数和记作 S 。下一步，输入 S + 1 ，于是黑匣子返回</p>
<p style="color:#e5e5e5">    a<sub>n</sub> * (S + 1)<sup>n</sup> + a<sub>n-1</sub> * (S + 1)<sup>n-1</sup> + … + a<sub>1</sub> * (S + 1) + a<sub>0</sub></p>
<p style="color:#e5e5e5">把这个值转换成 S + 1 进制，依次读出每一位上的数，它们就是多项式的各项系数了。</p>
<p>来源：<a href="http://rjlipton.wordpress.com/2010/12/20/some-mathematical-gifts/">http://rjlipton.wordpress.com/2010/12/20/some-mathematical-gifts/</a><br>
这个有趣的问题曾经以另一形式出现在了这个 Blog 里，见 <a href="http://www.matrix67.com/blog/archives/3243">这里</a> 的 35 题。</p>
			 ]]></content>
<pubDate>2011-01-09T13:11:23+00:00</pubDate>
<guid>http://www.matrix67.com/blog/archives/4064</guid>
<author><![CDATA[ 顾森 ]]></author>
</item>
<item>
<title><![CDATA[ 不用怀疑了，我已经写程序验证过了 ]]></title>
<link>http://www.matrix67.com/blog/archives/4071</link>
<content><![CDATA[ 
		<p>    先邀请大家完成一个非常欢乐的智力测试。</p>
<blockquote><p><strong>How Smart Are You?</strong><br>
 <br>
1. You’re participating in a race. You finally overtake the second person. What position are you in?<br>
 <br>
2. And if you just overtook the last person, then you are…?<br>
 <br>
3. Some very puzzling arithmetic! This must be calculated in your head only. Don’t use a calculator or even paper and pencil for this. Add 40 to 1000. Now add 1000. Add 30 more. Add 1000. Now add 20 more. Add another 1000. Add 10 more. What is the total?<br>
 <br>
4. Mary’s father had five lovely daughters: 1. Nana, 2. Nene, 3. Nini, 4. Nono… What’s the name of the fifth daughter?<br>
 <br>
5. A mute person goes into some shop to buy himself a toothbrush. By imitating the action of brushing his teeth, he successfully expresses himself to the shopkeeper and manages to buy it. Then a blind man comes into the shop and wants to buy a pair of sunglasses; how would HE indicate what he wants?<br>
 <br>
 <br>
Answers to the quiz:<br>
 <br>
1. If you answered that you’re first, then you’re absolutely WRONG! If you overtake the second person and you take his place, YOU’RE in second place.<br>
 <br>
2. If you answered you’re second to last, then you’re WRONG again. How can you overtake the LAST person?!<br>
 <br>
3. Did you get 5000? It’s not very accurate… The correct answer is actually 4100.<br>
 <br>
4. Did you Answer Nunu? No! Of course it’s incorrect. Her name is Mary. Read this question again!<br>
 <br>
5. It’s very simple, really: He opens his mouth and ask for it… </p></blockquote>
<p><span id="more-4071"></span><br>
    俗话说，智商测试就是看自己到底笨到了什么地步。下面邀请大家做一个更加欢乐的脑残测试。</p>
<blockquote><p><strong>How Stupid Are You? </strong><br>
 <br>
Choose an answer for each question, then add up the numbers to determine your stupidity level:<br>
 <br>
The capital of Greece is…<br>
 <br>
1. Dwindling.<br>
2. Athens.<br>
3. G.<br>
4. “Saturday Night Fever” is a lot more fun.<br>
 <br>
What’s the opposite of Apathy?<br>
 <br>
1. I don’t care.<br>
2. Interest.<br>
3. Cherokee.<br>
4. A-dead-end-y?<br>
 <br>
Who’s known as the discoverer of America?<br>
 <br>
1. ┉Neanderthals.<br>
2. ┉Christopher Columbus.<br>
3. Americus Gazpacho.<br>
4. Captain Crunch.<br>
 <br>
Who’s buried in Grant’s Tomb?<br>
 <br>
1. The man who invented this “joke”, hopefully.<br>
2. Ulysses S. Grant.<br>
3. I need more information.<br>
4. Which one of them?<br>
 <br>
Let’s say I wed your cousin and I have a cousin too; then he is…<br>
 <br>
1. Not wanted on Thanksgiving.<br>
2. My cousin-in-law’s cousin.<br>
3. A next of kin of sorts.<br>
4. We can’t both be married to my cousin!<br>
 <br>
 <br>
Let’s add up your points:<br>
 <br>
5-7: You possess a negative amount of stupidity. You’re a constant smartass who has no energy to try this unneeded test. Go read Kafka or something.<br>
 <br>
8-12: You have zero stupidity and answered almost every question in the test correctly. Well done, you are duller than a fourth grade history teacher. You are the person that often tells everyone when ‘whom’ should be used.<br>
 <br>
13-19: You maintain a healthy amount of stupidity. You are a failure, fall down a lot and are a real hazard to yourself and to others. You are probably a pet psychic.<br>
 <br>
20: You are Sarah Palin. </p></blockquote>
<p> <br>
留给大家的问题：这两套测试题有什么牛 B 的地方（牛 B 到了我足以单独发一篇日志的地步）？</p>
<p> <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 </p>
<p>答案：这两套测试互为 <a href="http://www.matrix67.com/blog/archives/289">Anagram</a> ，换句话说上面两个文字框里包含的每种字母的个数都完全相同！</p>
<p>来源：<a href="http://www.anagrammy.com/archives/2010/anag-201006.html">http://www.anagrammy.com/archives/2010/anag-201006.html</a><br>
 </p>
			 ]]></content>
<pubDate>2011-01-17T07:01:29+00:00</pubDate>
<guid>http://www.matrix67.com/blog/archives/4071</guid>
<author><![CDATA[ 顾森 ]]></author>
</item>
<item>
<title><![CDATA[ 出租车几何学：一个全新的几何世界 ]]></title>
<link>http://www.matrix67.com/blog/archives/4078</link>
<content><![CDATA[ 
		<p>    从北大打车到四惠，我一定会选择走四环。虽然从北京城中间直穿过去看上去很诱人，但考虑到北京道路几乎总是正南正北的方向，不会真有人认为这样能抄近路吧。在城市中，我们估算两点之间的距离时，往往不会直接去测量两点之间的直线距离，而会去考虑它们相距多少个街区。在理想模型中，假设每条道路都是水平或者竖直的，那么只要你朝着目标走（不故意绕远路），不管你怎样走，花费的路程都是一样的。今天，我看到了一个非常有意思的名词——出租车几何学 (taxicab geometry) ，其名称就来源于这样的想法。</p>
<p>  <img alt="image placeholder" >
<p>    在出租车几何学中，点还是形如 (x, y) 的有序实数对，直线还是满足 a x + b y + c = 0 的所有 (x, y) 组成的图形，角度大小的定义也和原来一样。只是，(x<sub>1</sub>, y<sub>1</sub>) 和 (x<sub>2</sub>, y<sub>2</sub>) 的距离重新定义为了 |x<sub>1</sub> – x<sub>2</sub>| + |y<sub>1</sub> – y<sub>2</sub>| ，即两点的横坐标之差加上纵坐标之差。</p>
<p>    这是一个对“距离”的合理定义，因为它满足</p>
<ul>
<li>非负性：两点距离总是大于等于 0</li>
<li>对称性： A 到 B 的距离等于 B 到 A 的距离</li>
<li>零距离： A 到 B 的距离为 0 当且仅当 A = B</li>
<li>三角形不等式：对于任意三点 A 、 B 、 C ，不等式 AB + BC ≥ AC 总成立</li>
</ul>
<p>    也就是说出租车几何学是建立在一个合理的度量空间上的。这是一个全新的几何世界。</p>
<p><span id="more-4078"></span><br>
    在这个世界里，很多经典几何定理仍然成立。比方说，三角形的内角和还是 180 度。因为，这是一个关于角度的定理，与距离的度量方式无关；既然角度的度量方式不变，三角形的内角和也仍然不会变。</p>
<p>  <img alt="image placeholder" >
<p>    不过，一旦涉及到三角形的边长，很多基本命题就不再成立了。等边对等角是首先被否定掉的定理，底角不相等的等腰三角形满地都是。例如上图中的三角形 ABC ，虽然 AB = AC ，但三角形的两个底角显然不等。类似地，等角对等边也不成立了，例如右图中虽然角 E 和角 F 相等，但 DE = 5 ， DF = 7 。 更不可思议的是，在出租车几何中，甚至能画出等边直角三角形来！</p>
<p>  <img alt="image placeholder" >
<p>    在这个几何世界中，边边边不能用来判断三角形全等了。我们可以画出两个三角形 ABC 和 A’B’C’ ，它们的对应边都相等，但这两个三角形并不能重合在一起。边角边也不能作为全等三角形的判定依据了——三角形 DEF 和 D’E’F’ 都是直角边均为 2 的直角三角形，不过它们明显不全等。</p>
<p> <br>
    真正有趣的不是出租车几何学世界中的三角形，而是这个世界中的圆。我们仍然定义圆是所有到定点距离为定值的点组成的图形。那么在这个几何世界里，圆是什么样的？下图给出了这个几何世界中一个半径为 2 的圆，圆周上的所有点到 O 的距离均为 2 ：</p>
<p>  <img alt="image placeholder" >
<p>    惊奇的不止这一点。圆的方程似乎更简单了，以原点为圆心的单位圆对应的方程是 |x| + |y| = 1 。更神奇的是，这个几何世界的圆周率值也不一样了，它精确地等于 4 ！</p>
<p> <br>
    重新定义距离后，很多图形会变得更加复杂。定义两点间的垂直平分线为到两点距离相等的点组成的图形。在这个几何世界里，垂直平分线是什么样的？在一般情况下，垂直平分线并不是“垂直”平分线，而是一条折线段。</p>
<p>  <img alt="image placeholder" >
<p>    但尽管垂直平分线如此奇怪，不过（一般情况下）三角形三边的垂直平分线仍然交于一点。这是因为，“三角形三边的垂直平分线交于一点”的证明过程只与垂直平分线的定义有关，而与垂直平分线的具体形式是无关的。即使证明过程用到了距离的定义，用到的也是新旧两种定义共有的一些基本性质。更有趣的是，这个点也是名副其实的“外心”，以它为中心可以作出这个三角形的外接圆来！也就是说，在出租车几何里，一般位置上的三个点也唯一地确定了一个圆。</p>
<p>  <img alt="image placeholder" >
<p>    不过，也有一些特殊的情况，三点不能确定一个圆。比方说，同时过 (0, 1) 、 (0, -1) 、 (1, 0) 的圆就有无穷多个。这是因为，(0, 1) 和 (1, 0) 的垂直平分线，以及(0, -1) 和 (1, 0) 的垂直平分线都不是“线”，有整块区域的点都满足到两端点的距离相等。因此这几条“垂直平分线”的交集不止一个点。</p>
<p> <br>
    还有哪些欧氏几何的经典结论在出租车几何学中同样成立？出租车几何学中有什么漂亮而独特的结论？如何定义一些更加复杂的几何对象？它们在出租车几何学中又是什么样？大家不妨继续往下思考一下。</p>
			 ]]></content>
<pubDate>2011-01-19T11:30:15+00:00</pubDate>
<guid>http://www.matrix67.com/blog/archives/4078</guid>
<author><![CDATA[ 顾森 ]]></author>
</item>
<item>
<title><![CDATA[ 蛋疼研究之怎样刷屏最快？ ]]></title>
<link>http://www.matrix67.com/blog/archives/4092</link>
<content><![CDATA[ 
		<p>    最近在做网站测试时，遇到了需要在输入框输入 3000 字的测试用例。联想到平时聊天时经常复制粘贴一堆笑脸刷屏讨 MM 欢心的行为，不由想到了一个有趣的问题：为了输入一定数量的字符，最少需要按多少个键？</p>
<p>    大家最常用的策略或许是， 先输一些字符，然后全选复制，粘贴到一定规模后，再全选复制，粘贴到一个新的数量级，如此反复。注意到进入全选状态（并且复制后），第一次粘贴将会覆盖掉选中的部分，第二次粘贴才会增加原来的文本长度。当然，全选复制后按一次向右键也可以消除选中状态，不过却并没有节省按键次数。因此我们规定，在输入字符时只有四种原子操作：</p>
<p>      1. 按一个按键，输入一个字符<br>
      2. 按 Ctrl + A ，全选<br>
      3. 按 Ctrl + C ，复制<br>
      4. 按 Ctrl + V ，粘贴</p>
<p><span id="more-4092"></span><br>
    排除明显不划算的行为，真正的决策其实只有两种：</p>
<p>      1. 按一次按键，输入一个字符<br>
      2. 按 k + 2 次按键，将现有内容复制成 k 份。</p>
<p>    这样一来，我们就有了一个清晰的递推思路。设 f(n) 表示输入 n 个字符所需要的最少按键次数，则 f(n) 将会在 f(n-1) + 1 和 f(n/k) + k + 2 中取一个最小值（其中 k 取遍 n 的所有约数）。<br>
    Mathematica 牛 B 就牛 B 在，这样的动态规划程序只需要一行便能写完：</p>
<p>  <img alt="image placeholder" >
<p>    可见，输入 100 个字符需要 18 次按键。具体方法是，用 5 次按键输入 5 个字符，再用 7 次按键把它变成 25 个字符，再用 6 次按键把它变成 100 个字符。</p>
<p>  <img alt="image placeholder" >
<p>    有趣的是，这个函数并不是单调的。输入 99 个字符需要的按键次数比输入 100 个字符需要的按键次数更多一些，事实上这最少要花费 20 次按键。方法是，先用 5 次按键输入 5 个字符，4 次按键把它变成 10 个字符，单独按一次键添加一个字符， 5 次按键把字符数复制粘贴到 33 ，再来 5 次按键把字符数复制粘贴到 99 。</p>
<p>    下面这个图是输入不同的字符数所需要的最少按键。</p>
<p>  <img alt="image placeholder" >
<p>    可以看到， 20 次按键足以应付 100 以内任何数量的字符，也就是说 99 个字符所需要的按键次数已经是 100 个字符以内的情况中最大的了。不过，最悲剧的应该要数 83 个字符了，它是所有至少要用 20 次按键的情况中字符个数最少的（也即首次出现的要用 20 次按键才能输入的情况）。对应的输入方案是 5 → 20 → 80 → 81 → 82 → 83 （直到分析到这里，我才意识到，在考虑输入<strong>指定数量</strong>的字符时，引入退格键可以带来的更少的按键次数）。</p>
<p>    那么， 20 次按键最多可以输入多少个字符呢？为了解决这个问题，我们可以给出另外一个递推式。令 g(n) 为 n 次按键最多可以输入的字符个数。对于每一个 n ，考虑两种转移决策：要么在 n – 1 次按键能够达到的最大字符数基础上加 1 ，要么把 n – k 次按键能够达到的字符数复制成 k – 2 份。也就是说， g(n) 就等于 g(n-1) + 1 和 g(n-k) * (k-2) 的最大值，其中 k 可以从 3 取到 n – 1。我们还是用一句话写下这个转移方程式：</p>
<p>  <img alt="image placeholder" >
<p>    可以看到， 20 次按键足以输入 150 个字符（方案是 6 → 30 → 150 ）， 30 次按键足以输入 1600 个字符（方案是 5 → 25 → 100 → 400 → 1600 ）。这样看上去，我们好像有了快速刷屏的指导思想：粘贴到原来的 4 倍长或者 5 倍长后再进行下一波全选复制粘贴似乎总是最优的选择。另外，这个数列增长得很快， 80 次按键能输入的字符数就已经上亿了。看来，要想刷屏到系统崩溃并不难，不足 100 次按键就能产生上 G 的数据。</p>
<p>    似乎这个增长速度是指数级的。描出 g(n) 的图象证实了我们这一想法：</p>
<p>  <img alt="image placeholder" >
<p>    我们自然而然地想到观察数列 g(n) 相邻两项的比值：</p>
<p>  <img alt="image placeholder" >
<p>    容易看到，当 n 到了一定大时，数列已经呈现出了一定的规律，多数时候都是以 1.25 倍的速度增长。给出并证明数列的通项公式或许会是一件非常有趣的事情。</p>
			 ]]></content>
<pubDate>2011-01-24T23:22:37+00:00</pubDate>
<guid>http://www.matrix67.com/blog/archives/4092</guid>
<author><![CDATA[ 顾森 ]]></author>
</item>
<item>
<title><![CDATA[ 集数学与艺术于一体的几何幻方 ]]></title>
<link>http://www.matrix67.com/blog/archives/4103</link>
<content><![CDATA[ 
		<p>Lee Sallows 最近做了<a href="http://www.geomagicsquares.com">一个网站</a>，收集了很多在几何意义上也成立的幻方，集数学与艺术于一体，为传统意义的幻方赋予了新的生命。大家来欣赏一下吧。</p>
<p> </p>
<p><img alt="image placeholder" >
<p>这是一个幻方，它由九块积木组成。这些积木所含的小方格数分别是 2, 6, 8, 10, 12, 14, 16, 18, 22，每行每列和两对角线上的方格总数都是 36 。 牛 B 的是，每条线上的三块积木正好也都能拼成一个 6 × 6 的矩形。</p>
<p><span id="more-4103"></span> <br>
 </p>
<p><img alt="image placeholder" >
<p>与上图类似的一个几何幻方，不过明显更帅一些。</p>
<p> <br>
 </p>
<p><img alt="image placeholder" >
<p>这个可以说是三重幻方了：幻方中的积木所含的小方格数恰好是前 9 个正整数，并且每条线上的三块积木正好能拼成一个（中间带有空洞的）正方形，而这些 4 × 4 的正方形本身又构成了幻方（空洞代表零）。</p>
<p> <br>
 </p>
<p><img alt="image placeholder" >
<p>当然，四阶也是有的。这就是一个四阶的几何幻方。</p>
<p> <br>
 </p>
<p><img alt="image placeholder" >
<p>这是一个更牛的四阶几何幻方。不但每条线上的四块积木都能拼出 5 × 5 的方形，而且积木里书写的数字加起来也都是 44 。</p>
<p> <br>
 </p>
<p><img alt="image placeholder" >
<p>这是另一个四阶几何幻方。中间是由 16 块图形组成的，它们大致排成了 4 × 4 的形状。这 16 块图形本身就组成了四个正方形，而每行每列和两条对角线上的四块图形也都能拼成正方形。</p>
<p> <br>
 </p>
<p><img alt="image placeholder" >
<p>这是一个不是幻方的几何“幻方”。平面上有九个圆圈，它们排成了九行，每行三个圆圈。每个圆圈里有一种积木。每条线上的三块积木，以及每个等边三角形三个顶点上的积木，都能拼成同一个图形。</p>
<p>查看更多：<a href="http://www.geomagicsquares.com/gallery.php">http://www.geomagicsquares.com/gallery.php</a></p>
			 ]]></content>
<pubDate>2011-01-30T23:20:21+00:00</pubDate>
<guid>http://www.matrix67.com/blog/archives/4103</guid>
<author><![CDATA[ 顾森 ]]></author>
</item>
<item>
<title><![CDATA[ 兔年快乐，送大家分形兔子一只 ]]></title>
<link>http://www.matrix67.com/blog/archives/4110</link>
<content><![CDATA[ 
		<p>    考虑复数域上的迭代公式 z<sub>n+1</sub> = z<sub>n</sub>^2 + (- 0.123 + 0.745 i) 。取不同的初始值 z<sub>0</sub> ，迭代后 z<sub>i</sub> 的发散速度是不一样的。对于复平面上的每个点，以它为初始值的数列发散速度越快，就染越深的颜色表示；如果以它为初始值数列发散缓慢甚至收敛，则用相对较浅的颜色来表示。那么，整个图形将会是什么样子呢？本人纯手工打造 Mathematica 代码两行，为大家送上这幅神奇的图形：</p>
<p>  <img alt="image placeholder" >
<p>    难以置信，简单的公式竟然生成了如此复杂的分形图形，看上去仿佛是大大小小的兔子竖着耳朵跳出来给大家拜年一样。这个图形叫做 Douady 兔子，是由法国数学家 Adrien Douady 发现的。它是一种 <a href="http://www.matrix67.com/blog/archives/292">Julia 集</a>。</p>
			 ]]></content>
<pubDate>2011-02-03T17:31:22+00:00</pubDate>
<guid>http://www.matrix67.com/blog/archives/4110</guid>
<author><![CDATA[ 顾森 ]]></author>
</item>
<item>
<title><![CDATA[ 超级游戏悖论：千万别说“让我们来玩一个游戏” ]]></title>
<link>http://www.matrix67.com/blog/archives/4120</link>
<content><![CDATA[ 
		<p>    今天听说了一个非常有趣的思想实验——超级游戏（ Hypergame ，暂且让我翻译成“超级游戏”吧）。首先，如果一个游戏能在有限步之内分出胜负，我们就把它叫做“有限游戏”。注意，一个有无穷多种状态的游戏也可以是有限游戏。虽然每一步的决策无穷多，但只要能在有限步内结束游戏，我们都把它叫做有限游戏。举个例子，玩家 1 和玩家 2 游戏，玩家 1 说出任意一个正整数 N ，然后立即获胜。这个游戏的决策有无穷多，但它显然是有限游戏。另外，一个有限游戏的总步数甚至也可以没有上限。比如说，玩家 1 说出任意一个正整数 N ，然后玩家 2 说 N – 1 ，玩家 1 说 N – 2 ，以此类推，两人轮流倒数，谁数到 0 谁就获胜。结束这个游戏所需要的步数可以是任意多，但只要是有限的，我们都把它叫做有限游戏。</p>
<p>    下面，我们来看这个叫做“超级游戏”的游戏。在超级游戏中，首先，玩家 1 指定一个有限游戏，然后玩家 2 作为这个有限游戏的先行者与玩家 1 对弈。谁赢得了这个有限游戏，也就是这局超级游戏的获胜者。</p>
<p>    这个异想天开的游戏可以说是一下子打开了我们的思路，很多再正常不过的事情此时都变得有争议了。比如说，超级游戏的决策树是什么样子的？超级游戏算是组合游戏吗？甚至是问，超级游戏本身是一个有限游戏吗？</p>
<p><span id="more-4120"></span><br>
    有人或许会说，超级游戏当然算有限游戏，虽然玩家 1 的决策（挑选一个有限游戏）有无穷多种，但是一旦游戏一确定，第一步过去了，整个游戏的有限性就很显然了。且慢。由于超级游戏本身也是一个有限游戏，因此玩家 1 有一个很奇异的合法决策：“让我们来玩⋯⋯来玩超级游戏吧！”按照规则，此时就应该由玩家 2 在玩家 1 提出的这个游戏中扮演先行者。而这个游戏本身又是一个超级游戏，因此玩家 2 也需要提出一个有限游戏来玩。当然，玩家 2 也可以说“那⋯⋯我们就来玩超级游戏吧”，把球又扔回给玩家 1 。如果每个人都说“我们来玩超级游戏吧”，显然这个游戏就永远结束不了了。因此，超级游戏并不是一个有限游戏。</p>
<p>    是吗？你会发现此时我们陷入了理发师悖论的困境。如果假设超级游戏不是一个有限游戏，那么玩家 1 提出玩超级游戏就不是一个合法的决策了，从而超级游戏就变得有限了。因此，超级游戏既不是有限游戏，又算是有限游戏，悖论由此产生。</p>
<p>    逻辑的世界中满地都是地雷，想不到一句“让我们来玩一个游戏吧”也能带来悖论。跟一个逻辑学家或是一台计算机对话时一定要小心，千万别说一些自我指涉的话来。不过，这还是防不胜防，殊不知一句“让我们来玩一个游戏吧”也能把它们搞崩溃。</p>
			 ]]></content>
<pubDate>2011-02-04T11:50:13+00:00</pubDate>
<guid>http://www.matrix67.com/blog/archives/4120</guid>
<author><![CDATA[ 顾森 ]]></author>
</item>
<item>
<title><![CDATA[ 趣题：随机折断的木棒 ]]></title>
<link>http://www.matrix67.com/blog/archives/4125</link>
<content><![CDATA[ 
		<p>  依次考虑下面三个问题。</p>
<p>    1. 一根单位长的木棒。随机在中间选取一点，把这根木棒折断。那么，短的那一截木棒平均有多长？</p>
<p>    2. 一根单位长的木棒。随机在中间选取一点，把这根木棒折断。那么，长的那一截木棒平均有多长？</p>
<p>    3. 一根单位长的木棒。随机在中间选取一点，把这根木棒折断。那么，短的那一截与长的那一截的长度之比平均是多少？</p>
<p><span id="more-4125"></span><br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 <br>
 </p>
<p>    没错，由于折断点均匀分布在这根木棒上，因此短的那一段木棒的长度也均匀地分布在 0 到 0.5 之间，它的平均长度是 0.25 ；类似地，长的那一段木棒，其长度也均匀分布在 0.5 到 1 之间，平均长度为 0.75 。不过，有趣的是，两段木棒长度的平均比值却并不是 1:3 。计算机模拟告诉我们，短木棒与长木棒的长度之比的期望值大约为 0.3863 ，要比 1:3 大一点点。平均的长度之比不等于平均长度之比，这似乎有悖于人们的直觉。</p>
<p>    计算出准确的长度之比期望值可以作为又一个有趣的微积分练习题。对这个比值积分后容易得出答案：</p>
<p>      <img alt="image placeholder" >
<p>    也就是说，两段木棒的长度之比平均为 2·ln2 – 1 。令人称奇的是，神秘的常数 e 又一次出现在了本与它毫无关系的问题中！</p>
<p>    来源： <a href="http://mindyourdecisions.com/blog/2011/02/01/broken-sticks-puzzle-and-a-seemingly-paradoxical-ratio/">Mind Your Decisions</a></p>
			 ]]></content>
<pubDate>2011-02-07T05:04:35+00:00</pubDate>
<guid>http://www.matrix67.com/blog/archives/4125</guid>
<author><![CDATA[ 顾森 ]]></author>
</item>
<item>
<title><![CDATA[ 除了正多面体，骰子还可以做成哪些形状？ ]]></title>
<link>http://www.matrix67.com/blog/archives/4131</link>
<content><![CDATA[ 
		<p>   <img alt="image placeholder" >
<p>    上图的拍摄者一定是个桌游达人，五种正多面体骰子的全家福竟然都能被他搞出来。我们自然会想到一个有趣的问题：还有别的形状的骰子吗？或者更“数学”一些的说法，在凸多面体的每个面上都标一个数字，能用来当骰子的就只有这五种吗？看上去似乎是这样：只有正多面体才能保证这颗骰子是“公平”的。呃⋯⋯是吗？</p>
<p><span id="more-4131"></span><br>
    事实上，对于骰子来说， 正多面体不是必要的。至少不需要那么“正”——只需要满足多面体每个面的地位都相同就可以了。例如，取两个全等的正 n 棱锥，底面和底面互相粘在一起，就能得到一个有 2n 个面的多面体。</p>
<p>   <img alt="image placeholder" >
<p>    这个多面体不是正多面体，不同顶点所处的位置是有区别的，不同的棱也有本质上的区别。不过，这个多面体的每个面的情况都是一样的，这就足以让它成为一颗公正的骰子了。</p>
<p>    有没有同样满足要求，但却没这么“平凡”的多面体呢？还真有不少。下图是把四个相同的三棱锥分别粘在一个正四面体的各面得到的十二面体。</p>
<p>   <img alt="image placeholder" >
<p>    满足要求的最简单的多面体则是这样一个四面体，它由一个长方体 6 个面上的对角线组成。</p>
<p>   <img alt="image placeholder" >
<p>    这个四面体看上去似乎很不规则，但仔细看看便能看出，它的每个面恰好都是一个由三种不同长度的棱组成的三角形，并且这三条棱各自的另一侧正好分别对应着另外的三个面。因此，这是一个满足要求的多面体。</p>
<p>    类似的多面体还有很多，这里有一个<a href="http://loki3.com/poly/isohedra.html">图鉴</a>，有兴趣的读者不妨前去围观。</p>
<p> <br>
    其实，可以用来当骰子的多面体要求还可以更松一些。如果在一个多面体中，所有面可以分成 n 组，每一组的形状和地位都完全相等，那么我们也可以把它做成一颗有 n 个“广义面”的骰子。下图便是一个简单的例子。</p>
<p>   <img alt="image placeholder" >
<p>    我们可以把上面这个多面体的 12 个面分成四组，每组各含一个正方形和两个三角形。由于不同的组之间没有本质区别，因此把第 i 组里的三个面都标上数字 i ，或者干脆大手笔地在整组面上标数字，一颗符合要求的骰子就诞生了。套用这种方法，我们可以生成面的组数任意多并且每一组包含面数也任意多的骰子。</p>
<p>    非平凡的此类多面体也是有的。下图便是一个由 4 个正方形和 4 个正三角形拼成的八面体。</p>
<p>   <img alt="image placeholder" >
<p>    这个图形大致可以看作是有四个“侧面”。如果把这些“侧面”分别标作 1 、 2 、 3 、 4 ，也可以成为一个符合要求的骰子。</p>
<p>    如果你对这个话题感兴趣，欢迎继续阅读：<br>
    <a href="http://loki3.com/poly/fair-dice.html">http://loki3.com/poly/fair-dice.html</a><br>
    <a href="http://www.maa.org/editorial/mathgames/mathgames_05_16_05.html">http://www.maa.org/editorial/mathgames/mathgames_05_16_05.html</a></p>
<p>    如果你对各种诡异形状的骰子感兴趣，你一定会喜欢这个：<br>
    <a href="http://www.dicecollector.com/DICEINFO_WHAT_SHAPES_DO_DICE_HAVE.html">http://www.dicecollector.com/DICEINFO_WHAT_SHAPES_DO_DICE_HAVE.html</a></p>
			 ]]></content>
<pubDate>2011-02-10T20:28:23+00:00</pubDate>
<guid>http://www.matrix67.com/blog/archives/4131</guid>
<author><![CDATA[ 顾森 ]]></author>
</item>
<item>
<title><![CDATA[ 情人节特献：有心之函数必然就有分手函数 ]]></title>
<link>http://www.matrix67.com/blog/archives/4139</link>
<content><![CDATA[ 
		<p>    首先，祝大家情人节快乐。不过，对于单身 Geek 来说，情人节或许并不快乐。情人节可以说是各种 Geek 们永久的伤痛了。即使是热爱数学的你，或许看到已经被转发到烂的“心之函数”今日再度走红，心中也会觉得不爽：我们发明出来的 Geek 玩物，竟然都被你们这些非 Geek 人士拿去装 Geek 泡妞用了，最终情人节宅在家里面向显示器编程度过平凡一天的反而还是我们这群 Geek 。</p>
<p>  <img alt="image placeholder" >
<p>    于是乎，“订完全部大床房”、“买光影院单号位”、“扎破所有安全套”等经典段子年年少不了。当然，我也没有闲着。为什么有 Geek 式的爱情祝福，就没有 Geek 式的分手诅咒？我计划着创作一个“分手函数”，它的函数图像是一个裂成两半的心。</p>
<p><span id="more-4139"></span><br>
    要制造分手函数，首先要有一个等待被恶搞的心形原型。我所选用的原型函数则是 2006 年 5 月 4 日本 Blog <a href="http://www.matrix67.com/blog/archives/85">所发文章</a>里的函数（看到五年前的文章真是让我感慨万千啊）。这个函数的形式相当对称美观： 17 x^2 – 16|x|y + 17 y^2 &lt; 225 。用 Mathematica 画出来大概是这样：

  <img alt="image placeholder" >
<p>    这个心形函数的成因非常简单，去掉中间一项的绝对值后你就明白了：</p>
<p>  <img alt="image placeholder" >
<p>    原来，17 x^2 – 16 x y + 17 y^2 &lt; 225 将会画出一个椭圆，因此给 x 加上绝对值，相当于把平面直角坐标系 y 轴右半部分镜像过来，就得到一个大致的心形了。我们的目标，便是要沿着 y 轴方向给这颗心加上一道的裂缝。

    裂缝一般都是锯齿形的。什么函数也是锯齿形的呢？最常用的估计就是三角函数和取余函数了吧。这里，我决定用大家熟知的并且也是相对容易控制的正弦函数来描绘裂缝的形状。考虑二元函数 f(x, y) = x ，由于所有 x 坐标相同的点函数值都一样，它的“等高线图像”就是一条条简单的竖直线，如图所示：

  <img alt="image placeholder" >
<p>    那么，函数 f(x, y) = x + sin(y) 就是对上图中纵坐标为 y 的所有点偏移 sin(y) 的量，也就把一个个带状区域扭成了波浪。</p>
<p>  <img alt="image placeholder" >
<p>    不过，这个波浪似乎还不够剧烈，离我们的“裂缝”要求远了些。我们不妨加大正弦函数的频率：</p>
<p>  <img alt="image placeholder" >
<p>    哇， f(x, y) = x + sin(5 y) 的周期倒是变短了，不过这波动得也太剧烈了一些。看来，我们应该让 x 的变化也稍微剧烈一些，让它能适应 sin(5 y) 的步伐。于是，我把 f(x, y) 改成了 5 x + sin(5 y)</p>
<p>  <img alt="image placeholder" >
<p>    这就有点裂缝的味道了。注意，图里看上去裂缝带有些宽，这无所谓——这只是生成图形中等高线画得比较稀而已。光从无差异曲线的分布形状来看，我们已经实现裂缝效果了。</p>
<p>    但是，怎样把这个裂缝应用到之前的心之函数里呢？注意到心之函数其实是一个不等式 17 x^2 – 16|x|y + 17 y^2 &lt; 225 。如果我们能找一个两侧值小、靠近 y 轴部分陡然增大的波浪形函数 f(x, y) 就好了。把这样的 f(x, y) 加到心之函数上，就相当于给 y 轴附近的一个波浪形范围加上一个大得出奇的值，让不等式左边超过 225 ，出现裂缝状的空缺；同时，这以外的部分 f(x, y) 几乎为 0，该小于 225 的还是小于 225 ， 该大于 225 的还是大于 225 ，对心形不会造成任何实质性的影响。

    什么操作能够让一个函数变得两边小到几乎为 0 ，靠近 y 轴的地方陡然增大呢？答案是“绝对值分之一”。

  <img alt="image placeholder" >
<p>    把它应用到之前的 f(x, y) 上（函数也就变成 1/|5 x + sin(5 y)| 了）：</p>
<p>  <img alt="image placeholder" >
<p>    哈哈，这个有效果，中间的函数值陡然增大，大到都亮得发白了。</p>
<p>    让我们把这个 f(x, y) 加到心之函数上，也就是说画出不等式 17 x^2 – 16|x|y + 17 y^2 + 1/|5 x + sin(5 y)| &lt; 225 ：

  <img alt="image placeholder" >
<p>    咦？怎么没有效果呢？且慢，仔细看图的中间，已经有一些要裂开的痕迹了。我想到了一个可能的原因：裂缝带的函数值还不够大。心形图形是由所有满足 17 x^2 – 16|x|y + 17 y^2 小于 225 的点组成的，但是这些点的函数值并不是刚好 225 ，以至于加上了一个大数后仍然比 225 小。为了扩大裂缝的影响，让我们把 1/|5 x + sin(5 y)| 的分子改成 150 ：</p>
<p>  <img alt="image placeholder" >
<p>    让我们祈祷这次裂缝的函数值足以把心形破坏掉吧：</p>
<p>  <img alt="image placeholder" >
<p>    哈哈，这次成功了，裂开的心形！我原创的“分手方程”就此出炉了： 17 x^2 – 16|x|y + 17 y^2 + 150/|5 x + sin(5 y)| &lt; 225 。让我们把这个不等式本身标在图上，方便在网络上传播：

  <img alt="image placeholder" >
<p>    不过，这个分手函数有一些美中不足的地方：它用到了分式运算，不能和已有的部分很好地合并在一起，很容易看出这是由心形函数和裂缝函数拼合而成的，看上去有些平凡。另外，对于某些特殊的取值（比如 x 和 y 都为 0 ），不等式左边有可能因分母为 0 而无意义，虽然在分母上加个很小的常数可以避免，但作为完美主义者我仍然感觉很不爽。</p>
<p>    这个方程有诸多不完美之处，如何构造一个看上去更酷的方程呢？写了这么多我也有些累了，脑子有点不够使了。既然“情侣去死去死团”年年都少不了 Geek 方阵， Geek 恋爱困境似乎百年不能动摇；如何寻找更完美的分手函数，不妨留着我们明年再来讨论。</p>
			 ]]></content>
<pubDate>2011-02-13T18:20:51+00:00</pubDate>
<guid>http://www.matrix67.com/blog/archives/4139</guid>
<author><![CDATA[ 顾森 ]]></author>
</item>
<item>
<title><![CDATA[ 用正方形纸片折出等边三角形 ]]></title>
<link>http://www.matrix67.com/blog/archives/4152</link>
<content><![CDATA[ 
		<p><img alt="image placeholder" >
<p>    给定一个正方形纸片，用上面这种方法可以折出一个等边三角形。你能看出这是为什么吗？</p>
<p><span id="more-4152"></span></p>
<p>  <img alt="image placeholder" >
<p>    由对称性，组成等边三角形的前两道折痕显然一样长，我们只需要证明它们之间的夹角是 60 度即可。注意到，如图折叠后将会立即产生直角边是斜边长度一半的直角三角形， 30 度角由此产生。由此可知，前两道折痕和纸片边上的夹角都是 15 度，两折痕之间的夹角自然也就正好是 60 度了。</p>
<p>    这个等边三角形的折法来源于 <a href="http://www.ganymeta.org/~darren/origami.php">这里</a>。同一个网站还给出了折出其它正 N 边形的方法，感兴趣的读者可以尝试着证明其正确性（你们会疯掉的）。</p>
<p>    稍微容易一些的用正方形纸片折出正八边形：</p>
<p><img alt="image placeholder" >
<p> <br>
    用正方形纸片折出正六边形：</p>
<p><img alt="image placeholder" >
<p> <br>
    正方形纸片折出正五边形：</p>
<p><img alt="image placeholder" >
<p> <br>
    最后一个，你一定会喜欢的，是纸折正七边形！</p>
<p><img alt="image placeholder" >
<p>    也就是说，存在一些尺规无法完成的作图可以用折纸办到，看来折纸几何构造比我们想象中的要强大得多。<a href="http://www.matrix67.com/blog/archives/231">这里</a> 还有一种折纸三等分任意角的方案，感兴趣的读者也可以研究一下。</p>
			 ]]></content>
<pubDate>2011-02-15T10:12:49+00:00</pubDate>
<guid>http://www.matrix67.com/blog/archives/4152</guid>
<author><![CDATA[ 顾森 ]]></author>
</item>
<item>
<title><![CDATA[ 用相同的面组成多面体，凸多面体不一定会更大 ]]></title>
<link>http://www.matrix67.com/blog/archives/4159</link>
<content><![CDATA[ 
		<p>    有这么两个八面体，它们是由一组相同的三角形面组成的，不过一个是凸多面体，一个是凹多面体。这两个多面体的体积哪个更大？</p>
<p>    不可思议的是，真的就有这么两个八面体，凹的那个比凸的那个更大一些。 2002 年， S. N. Mikhalev 首次发现了这样一对八面体，其中凸多面体的六个顶点分别为</p>
<blockquote><p>N(0, 0, 1)，A(10, 1, 0)，B(0, 6, 0)，C(-10, 1, 0)，D(0, -10, 0)，S(0, 0, -1)</p></blockquote>
<p>    凹多面体的六个顶点则为</p>
<blockquote><p>N(0, 0, √<span style="text-decoration:overline">61/3</span>)，A(√<span style="text-decoration:overline">71</span>, 4√<span style="text-decoration:overline">2/3</span>, 0)，B(0, -5√<span style="text-decoration:overline">2/3</span>, 0)，C(-√<span style="text-decoration:overline">71</span>, 4√<span style="text-decoration:overline">2/3</span>, 0)，D(0, -11√<span style="text-decoration:overline">2/3</span>, 0)，S(0, 0, -√<span style="text-decoration:overline">61/3</span>)</p></blockquote>
<p><span id="more-4159"></span><br>
    感兴趣的读者可以自己验证一下，它们的对应棱确实都是一样长的，并且后者的体积确实比前者大。我用 Mathematica 画了一下，两个多面体大致是这样：</p>
<p>   <img alt="image placeholder" >
<p>   <img alt="image placeholder" >
<p>来源：<a href="http://www.cut-the-knot.org/Curriculum/Geometry/Polyhedra/Mikhalev.shtml">http://www.cut-the-knot.org/Curriculum/Geometry/Polyhedra/Mikhalev.shtml</a></p>
			 ]]></content>
<pubDate>2011-02-18T23:00:30+00:00</pubDate>
<guid>http://www.matrix67.com/blog/archives/4159</guid>
<author><![CDATA[ 顾森 ]]></author>
</item>
<item>
<title><![CDATA[ 量纲法竟然还能这样用 ]]></title>
<link>http://www.matrix67.com/blog/archives/4163</link>
<content><![CDATA[ 
		<p>    公式 h = (1/2)·g·t^2 里， t 头上的平方并不奇怪。显然，物体下落的路程是与重力加速度 g 和时间 t 有关的，高度 h 就由这两个变量决定。注意到 g 是一个加速度单位，是米除以平方秒的形式；为了得出一个以长度为单位的结果，我们必须要消除分母位置上的“平方秒”，因而时间变量 t 必须要以平方的形式出现。</p>
<p>    类似地， E = m·c^2 里的平方也不是凭空而来的。能量的单位是牛乘以米，牛本身又是千克乘以米每平方秒，刨根到底能量的单位就该是 千克·(米^2)/(秒^2) ，正好符合等式右侧“质量乘以速度平方”的量纲。</p>
<p>    在数学中，量纲法也是无处不在。 n 维球的体积公式一定是半径的 n 次方乘以一个系数， Heron 公式 A = √<span style="text-decoration:overline">s(s – a)(s – b)(s – c)</span> 看似复杂的外表下也遵循着量纲这一金科玉律。给定 n 个数，我们有多种定义其平均数的方案，包括所有数之和的 n 分之一（算术平均数），所有数乘积的 n 次方根（几何平均数），所有数的倒数和的倒数的 n 倍（调和平均数），所有数的平方和的 n 分之一的平方根（均方根），等等。由于一组数的平均值的量纲应该和这些数本身的量纲保持一致，因此在各种平均数的公式里，平方了就要开回去，取倒了还得倒回来，全乘在一起就得开 n 次方，这样才能得到同样类型的数。</p>
<p>    自从在《怎样解题》里看到了量纲法，在学习和讲解数理知识时我便特别留意量纲，慢慢总结出上面这些用于说明量纲规律的经典例子。今天，我又看到了一个把量纲用得神乎其技的<a href="http://ocw.mit.edu/courses/mathematics/18-098-street-fighting-mathematics-january-iap-2008/readings/1.pdf">经典例子</a>，在这里和大家分享。</p>
<p><span id="more-4163"></span></p>
<p>    在微积分里，下面这个公式是一个相当帅气的结论：</p>
<p>    <img alt="image placeholder" >
<p>    它的推导过程也非常帅，大家可以在<a href="http://mathworld.wolfram.com/GaussianIntegral.html">这里</a>欣赏到。</p>
<p>    不过这并不是这篇文章的重点。我们的问题是，下面这个定积分等于多少？</p>
<p>    <img alt="image placeholder" >
<p>    或者一般地，下面这个定积分等于多少？</p>
<p>    <img alt="image placeholder" >
<p> <br>
    毫无疑问，随着 α 值的变化，定积分的结果也会随之变化。我们关心的是，这个结果究竟会随着 α 怎样变？这个式子是对 x 进行积分，我们不妨假设 x 是一个表示长度的量，它的单位是米。首先，指数表示“多少个底数相乘”，应该是一个数，是不会有单位的。也就是说，指数 -α·x^2 应该是无量纲的。但 α 后面乘了一个 x^2 ，因此 α 本身的量纲就应该是 1/(米^2) 。由于底数 e 是一个没有单位的常数，因此连续的 e 相乘也是没有单位的； dx 是 x 变化一点点的量，它的量纲和 x 一致，也是米；因而， e^(-2x^2) dx 的单位也就是米了。而对这些以长度为单位的量进行求和，得到的结果也只能是“多少多少米”的形式。也就是说，整个定积分应该会得到一个以米为单位的量。</p>
<p>    同时，定积分的结果也是一个关于 α 的函数。但是， α 是一个以 1/(米^2) 为单位的量，怎样才能把它变成一个以米为单位的量呢？答案就是， α 必然要以 1/√<span style="text-decoration:overline">α</span> 的形式出现在定积分的结果中。也就是说，整个定积分就是 1/√<span style="text-decoration:overline">α</span> 乘上一个系数。至于这个系数究竟是多少，前面的公式已经给了我们充分的条件了：当 α = 1 时，定积分的值是 √<span style="text-decoration:overline">π</span> （也即 √<span style="text-decoration:overline">π</span>/√<span style="text-decoration:overline">α</span> ），也就是说这个系数就是 √<span style="text-decoration:overline">π</span> 。因此，结论就是：</p>
<p>    <img alt="image placeholder" >
<p>    注意到，我们完全用量纲法，推导出了一个定积分运算结果的形式！</p>
			 ]]></content>
<pubDate>2011-02-20T23:11:06+00:00</pubDate>
<guid>http://www.matrix67.com/blog/archives/4163</guid>
<author><![CDATA[ 顾森 ]]></author>
</item>
<item>
<title><![CDATA[ 漫话折纸几何学 ]]></title>
<link>http://www.matrix67.com/blog/archives/4169</link>
<content><![CDATA[ 
		<p>    前几天，一篇叫做 <a href="http://www.matrix67.com/blog/archives/4152">用正方形纸片折出等边三角形</a> 的日志引起大家的讨论，折出正七边形和折出角三等分线的方案更是让大家争论不休。提得最多的问题就是，折纸为什么要比尺规作图更强？这是一个好问题。我查了不少资料，了解到不少折纸几何的历史，收获颇大，不赶紧记下来就亏大了。于是有了这篇文章。</p>
<p>    要解答为何折纸如此强大，首先我们得解决一个问题：什么叫折纸。折纸的游戏规则是什么？换句话说，折纸允许哪些基本的操作？大家或许会想到一些折纸几何必须遵守的规则：所有直线都由折痕或者纸张边缘确定，所有点都由直线的交点确定，折痕一律是将纸张折叠压平再展开后得到的，每次折叠都要求对齐某些已有几何元素（不能凭感觉乱折），等等。不过，这些定义都太“空”了，我们需要更加形式化的折纸规则。 1991 年， Humiaki Huzita 指出了折纸过程中的 6 种基本操作（也可以叫做折纸几何的公理）：</p>
<blockquote>
<p>   <img alt="image placeholder" >
<p> 1. 已知 A 、 B 两点，可以折出一条经过 A 、 B 的折痕</p>
</blockquote>
<p><span id="more-4169"></span></p>
<blockquote>
<p>   <img alt="image placeholder" >
<p> 2. 已知 A 、 B 两点，可以把点 A 折到点 B 上去（想象这张纸是透明的，所有几何对象正反两面都能看见，下同）</p>
</blockquote>
<blockquote>
<p>   <img alt="image placeholder" >
<p> 3. 已知 a 、 b 两条直线，可以把直线 a 折到直线 b 上去</p>
</blockquote>
<blockquote>
<p>   <img alt="image placeholder" >
<p> 4. 已知点 A 和直线 a ，可以沿着一条过 A 点的折痕，把 a 折到自身上</p>
</blockquote>
<blockquote>
<p>   <img alt="image placeholder" >
<p> 5. 已知 A 、 B 两点和直线 a ，可以沿着一条过 B 点的折痕，把 A 折到 a 上</p>
</blockquote>
<blockquote>
<p>   <img alt="image placeholder" >
<p> 6. 已知 A 、 B 两点和 a 、 b 两直线，可以把 A 、 B 分别折到 a 、 b 上</p>
</blockquote>
<p>    容易看出，它们实际上对应着不同的几何作图操作。例如，操作 1 实际上相当于连接已知两点，操作 2 实际上相当于作出已知两点的连线的垂直平分线，操作 3 则相当于作出已知线段的夹角的角平分线，操作 4 则相当于过已知点作已知线的垂线。真正强大的则是后面两项操作，它们确定出来的折痕要满足一系列复杂的特征，不是尺规作图一两下能作出来的（有时甚至是作不出来的）。正是这两个操作，让折纸几何有别于尺规作图，折纸这门学问从此处开始变得有趣起来。</p>
<p>    更有趣的是，操作 5 的解很可能不止一个。在大多数情况下，过一个点有两条能把点 A 折到直线 a 上的折痕。</p>
<p>    <img alt="image placeholder" >
<p>    操作 6 则更猛：把已知两点分别折到对应的已知两线上，最多可以有三个解！</p>
<p>    <img alt="image placeholder" >
<p>    一组限定条件能同时产生三个解，这让操作 6 变得无比灵活，无比强大。利用一些并不太复杂的解析几何分析，我们能得出操作 6 有三种解的根本原因：满足要求的折痕是一个三次方程的解。也就是说，给出两个已知点和两条对应的已知线后，寻找符合要求的折痕的过程，本质上是在解一个三次方程！</p>
<p>    让我们来回顾一下尺规作图里的五个基本操作：</p>
<blockquote><p> 1. 过已知两点作直线<br>
 2. 给定圆心和圆周上一点作圆<br>
 3. 寻找直线与直线的交点<br>
 4. 寻找圆与直线的交点<br>
 5. 寻找圆与圆的交点</p></blockquote>
<p>    这五项操作看上去变化多端，但前三项操作都是唯一解，后两项操作最多也只能产生两个解。从这个角度来看，尺规作图最多只能解决二次问题，加减乘除和不断开方就已经是尺规作图的极限了。能解决三次问题的折纸规则，势必比尺规作图更加强大。</p>
<p>    正因为如此，一些尺规作图无法完成的任务，在折纸几何中却能办到。这就回到了文章开头提到的问题：用折纸法可以实现作正七边形，而这是无法用尺规作图办到的。</p>
<p>    我们有更简单的例子来说明，用折纸法能完成尺规作图办不到的事情。“倍立方体”问题是古希腊三大尺规作图难题之一，它要求把立方体的体积扩大到原来的两倍，本质上是求作 2 的立方根。由于尺规作图最多只能开平方，因而它无法完成“倍立方体”的任务。但是，折纸公理 6 相当于解三次方程，解决“倍立方体”难题似乎是游刃有余。</p>
<p>    有意思的是，用纸片折出 2 的立方根比想象中的更加简单。取一张正方形纸片，将它横着划分成三等份（方法有很多，大家不妨自己想想）。然后，将右边界中下面那个三等分点折到正方形内上面那条三等分线上，同时将纸片的右下角顶点折到正方形的左边界。那么，纸片的左边界就被分成了 <sup>3</sup>√<span style="text-decoration:overline">2</span> : 1 两段。</p>
<p>    <img alt="image placeholder" >
<p>    利用勾股定理和相似三角形建立各线段长度的关系，我们不难证明它的正确性。强烈建议大家自己动笔算一算，来看看三次方程是如何产生的。</p>
<p>    本文写到这里，大家或许以为故事就结束了吧。 10 年以后（也就是 2001 年），事情又有了转折： Koshiro Hatori 发现， Humiaki Huzita 的 6 个折纸公理并不是完整的。 Koshiro Hatori 给出了折纸的第 7 种操作。从形式上看，第 7 公理与已有的公理如出一辙，并不出人意料，很难想象这个公理整整十年里竟然一直没被发现。继续阅读之前，大家不妨先自己想想，这个缺失的操作是什么。这段历史背景无疑让它成为了一个非常有趣的思考题。</p>
<p> <br>
 <br>
 <br>
    Koshiro Hatori 补充的公理是：</p>
<blockquote>
<p>   <img alt="image placeholder" >
<p> 7. 已知点 A 和 a 、 b 两直线，可以沿着一条垂直于 b 的折痕，把 A 折到 a 上。</p>
</blockquote>
<p>    后来，这 7 条公理就合称为了 Huzita–Hatori 公理，你可以在 <a href="http://en.wikipedia.org/wiki/Huzita%E2%80%93Hatori_axioms">Wikipedia</a> 上读到这个条目。在 2003 年的一篇文章中， Robert J. Lang  对这些公理进行了一番整理和分析，证明了这 7 条公理已经包含折纸几何中的全部操作了。</p>
<p>    Robert J. Lang 注意到了，上述 7 项基本操作其实是由一些更基本的操作要素组合而成的，例如“把已知点折到已知线上”、“折痕经过已知点”等等。说得更贴切一些，这些更加基本的操作要素其实是对折痕的“限制条件”。在平面直角坐标系中，折痕完全由斜率和截距确定，它等价于一个包含两个变量的方程。不同的折叠要素对折痕的限制力是不同的，例如“把已知点折到已知点上”就同时要求 x<sub>1</sub>‘ = x<sub>2</sub> 并且 y<sub>1</sub>‘ = y<sub>2</sub> ，可以建立出两个等量关系，一下子就把折痕的两个变量都限制住了。而“折痕经过已知点”则只能列出一个方程，只能确定一个变量（形式上通常表示为与另一个变量的关系），把折痕的活动范围限制在一个维度里。</p>
<p>    不难总结出，基本的折叠限制要素共有 5 个：</p>
<blockquote><p> (1) 把已知点折到已知点上，确定 2 个变量<br>
 (2) 把已知点折到已知线上，确定 1 个变量<br>
 (3) 把已知线折到已知线上，确定 2 个变量<br>
 (4) 把已知线折到自身上，确定 1 个变量<br>
 (5) 折痕经过已知点，确定 1 个变量</p></blockquote>
<p>    而折痕本身有 2 个待确定的变量，因此符合要求的折纸操作只有这么几种： (1) ， (2)+(2) ， (3) ， (4)+(4) ， (5)+(5) ， (2)+(4) ， (2)+(5) ， (4)+(5) 。但是，这里面有一种组合需要排除掉： (4)+(4) 。在绝大多数情况下， (4)+(4) 实际上都是不可能实现的。如果给出的两条直线不平行，我们无法折叠纸张使得它们都与自身重合，因为没有同时垂直于它们的直线。</p>
<p>    另外 7 种则正好对应了前面 7 个公理，既无重合，又无遗漏。折纸几何至此便有了一套完整的公理。</p>
<p>    不过，折纸的学问远远没有到此结束。如果允许单次操作同时包含多处折叠，折纸公理将会更复杂，更强大。折纸的极限究竟在哪里，这无疑是一个非常激动人心的话题。</p>
			 ]]></content>
<pubDate>2011-02-24T15:26:27+00:00</pubDate>
<guid>http://www.matrix67.com/blog/archives/4169</guid>
<author><![CDATA[ 顾森 ]]></author>
</item>
<item>
<title><![CDATA[ 另类称球趣题：验证砝码所标克数的正确性 ]]></title>
<link>http://www.matrix67.com/blog/archives/4183</link>
<content><![CDATA[ 
		<p>    有六个砝码，它们的重量分别是 1 克、 2 克、 3 克、 4 克、 5 克、 6 克。每个砝码上都标有这个砝码的重量，但由于生产过程中的疏忽，重量有可能被标错了。请你用天平称两次，来检验这些砝码所标克数是否完全正确。</p>
<p>    Update: 实际克数和所标克数都是 1 、 2 、 3 、 4 、 5 、 6 ，“标错”就是指它们的对应关系是错的。称砝码的目的只是检验所标克数的正确性，如果不正确，不用找出问题出在哪些砝码上。<br>
 <br>
 <br>
    答案：先把标有 1 、 2 、 3 的砝码放在天平左边，把 6 放在天平右边。注意到，如果其中三个砝码的重量之和等于另一个砝码的重量，则 1 + 2 + 3 = 6 是唯一的情况。因此，假如天平平衡，那么天平左边一定就是 1 克、 2 克、 3 克的砝码，天平右边就一定是 6 克的砝码。</p>
<p>    但是，这只能说明， 6 克的砝码是标对了的。我们仍然不排除 1 、 2 、 3 这三个砝码之间标混了的情况，同时也不能排除 4 、 5 两个砝码标反的情况。接下来该怎么办呢？</p>
<p> <br>
<span id="more-4183"></span><br>
 </p>
<p>    下一步——很难想到——是把 3 、 5 两个砝码放在天平左边， 1 、 6 两个砝码放在天平右边。如果左边比右边重，即可说明所有的砝码都标对了。这是因为，如果在 {1, 2, 3} 和 {4, 5} 中各挑一个放在一起，再在 {1, 2, 3} 里挑一个和 6 放在一起，结果前者比后者更重，那么 3 + 5 &gt; 1 + 6 是唯一的解。这就表明， 1 、 3 、 5 这三个砝码都是标对了的。因此，余下的 2 和 4 就都标对了。</p>
<p>    问题来源：<a href="http://www.cut-the-knot.org/blue/6MisnamedCoins.shtml">http://www.cut-the-knot.org/blue/6MisnamedCoins.shtml</a></p>
<p>    这是 1991 年莫斯科数学竞赛的一个问题。 Max Alekseyev 给出了这个问题的另一个答案： 1 + 2 + 5 &lt; 3 + 6 ， 1 + 3 &lt; 5 。其正确性基于下面这一事实：满足 a + b + c &lt; d + e 且 a + d &lt; c 的只有上述这一个解。 Tanya Khovanova 和 Joel Lewis 对这个问题进行了扩展，有兴趣的读者可以看看<a href="http://www.combinatorics.org/Volume_18/PDF/v18i1p37.pdf">这篇论文</a>。</p>
			 ]]></content>
<pubDate>2011-03-01T10:11:48+00:00</pubDate>
<guid>http://www.matrix67.com/blog/archives/4183</guid>
<author><![CDATA[ 顾森 ]]></author>
</item>
<item>
<title><![CDATA[ Fitch悖论：我们已经掌握了所有的知识 ]]></title>
<link>http://www.matrix67.com/blog/archives/4191</link>
<content><![CDATA[ 
		<p>    今天听说了 <a href="http://en.wikipedia.org/wiki/Fitch's_paradox_of_knowability">Fitch 可知性悖论</a>，在这里给大家讲一讲。这是由美国逻辑学家 Frederic Fitch 在 1963 年的一篇论文中提出来的。在这篇论文中， Fitch 利用严密的数理逻辑得出了一个看上去很不可思议的结论：假设所有知识都是人类有可能掌握的，那么所有知识都已经被人类掌握了。</p>
<p>    为了表达“能掌握的知识”这一概念，我们需要用到模态逻辑。模态逻辑中允许出现这样一种情况：一个命题是假的，但是它有可能是真的。比方说，命题“一加一等于三”是假的，而且它不可能是真的；命题“朝鲜在 2010 年世界杯中获得冠军”是假的，但它却有可能是真的。这两种情况的区别可以从平行宇宙的角度来解释。前者可以在逻辑上被推翻，在任何一个平行宇宙中都不成立；后者虽然在我们的世界中是假的，但却不排除在其它世界中为真的可能。在模态逻辑中，“明天可能会下雨”也能成为一个合法的命题。</p>
<p>    下面，我们用 K(φ) 表示人类已经知道了 φ 为真（也就是说 φ 在人类的知识库中）。因而， ¬K(φ) 就表示人类不知道 φ 。再用 P(φ) 表示 φ 有可能为真（在至少一个平行宇宙中成立）。因而， ¬P(φ) 就表示 φ 不可能为真，P(K(φ)) 就表示人类有可能知道 φ 为真。我们作出以下四个假设：</p>
<p><span id="more-4191"></span></p>
<blockquote><p>A. K(φ) → φ ，如果我们知道 φ 为真，则 φ 为真。即所有已经知道的都是真理。<br>
 <br>
B. K(φ ∧ ψ) → (K(φ) ∧ K(ψ)) ，即如果已知 φ 和 ψ ，则已知 φ ，并且已知 ψ 。<br>
 <br>
C. φ → P(K(φ)) ，如果 φ 为真，则我们有可能知道 φ 为真。即所有真理都是有可能被知道的（这是整个悖论的核心假设）。<br>
 <br>
D. 如果我们证明了 ¬φ ，就可得 ¬P(φ) 。即如果我们能从逻辑上证明出 φ 不成立，由于这番推理适用于任意一个平行宇宙，因此 φ 就没有成立的可能了。</p></blockquote>
<p> <br>
    上面四个假设看上去都没啥问题。不过，这些假设却有一个看上去十分荒唐的推论：所有真理都是我们已经知道的了：</p>
<table class="article" style="margin: 10px 30px;">
<tr>
<td>(1)</td>
<td>假设 K(φ ∧ ¬K(φ))</td>
<td> </td>
<td>假设我们知道， φ 是一个真理，并且我们不知道这个真理</td>
</tr>
<tr>
<td>(2)</td>
<td>K(φ) ∧ K(¬K(φ))</td>
<td>(1) + 公理 B</td>
<td>我们知道 φ ，并且我们知道我们不知道 φ</td>
</tr>
<tr>
<td>(3)</td>
<td>K(φ)</td>
<td>(2) + ∧消去律</td>
<td>我们知道 φ</td>
</tr>
<tr>
<td>(4)</td>
<td>K(¬K(φ))</td>
<td>(2) + ∧消去律</td>
<td>我们知道我们不知道 φ</td>
</tr>
<tr>
<td>(5)</td>
<td>¬K(φ)</td>
<td>(4) + 公理 A</td>
<td>我们不知道 φ</td>
</tr>
<tr>
<td>(6)</td>
<td>¬K(φ ∧ ¬K(φ))</td>
<td>(3)(5)矛盾，假设不成立</td>
<td>我们不知道， φ 是一个真理，并且我们不知道这个真理</td>
</tr>
<tr>
<td>(7)</td>
<td>¬P(K(φ ∧ ¬K(φ)))</td>
<td>(6) + 规则 D</td>
<td>我们不可能知道， φ 是一个真理，并且我们不知道这个真理</td>
</tr>
<tr>
<td>(8)</td>
<td>假设 φ ∧ ¬K(φ)</td>
<td> </td>
<td>假设 φ 是一个真理，并且我们不知道这个真理</td>
</tr>
<tr>
<td>(9)</td>
<td>P(K(φ ∧ ¬K(φ)))</td>
<td>(8) + 公理 C</td>
<td>我们有可能知道， φ 是一个真理，并且我们不知道这个真理</td>
</tr>
<tr>
<td>(10)</td>
<td>¬(φ ∧ ¬K(φ))</td>
<td>(7)(9)矛盾，假设不成立</td>
<td>φ 是一个真理，我们不知道这个真理，两者不同时成立</td>
</tr>
<tr>
<td>(11)</td>
<td>¬φ ∨ K(φ)</td>
<td>(10) + De Morgan 律</td>
<td>φ 不是真理，或者我们知道 φ</td>
</tr>
<tr>
<td>(12)</td>
<td>φ → K(φ)</td>
<td>(11) + 蕴含等值式</td>
<td>所有真理 φ 都是我们已经知道的</td>
</tr>
</table>
<p>    然后呢？要么承认，人类是全知全能的；要么承认，假设 C 不成立，有些知识是不可能为人所知的。当然，也有人指出， Fitch 的推理存在一些很隐蔽的问题，比如假设 C 的式子并不能理解为“所有知识都可知”。你选择哪一派？</p>
			 ]]></content>
<pubDate>2011-03-07T22:37:35+00:00</pubDate>
<guid>http://www.matrix67.com/blog/archives/4191</guid>
<author><![CDATA[ 顾森 ]]></author>
</item>
<item>
<title><![CDATA[ 漫话中文自动分词和语义识别（上）：中文分词算法 ]]></title>
<link>http://www.matrix67.com/blog/archives/4212</link>
<content><![CDATA[ 
		<p>    记得第一次了解中文分词算法是在 <a href="http://www.google.com.hk/ggblog/googlechinablog/2006/04/blog-post_7327.html">Google 黑板报</a> 上看到的，当初看到那个算法时我彻底被震撼住了，想不到一个看似不可能完成的任务竟然有如此神奇巧妙的算法。最近在詹卫东老师的《中文信息处理导论》课上再次学到中文分词算法，才知道这并不是中文分词算法研究的全部，前前后后还有很多故事可讲。在没有建立统计语言模型时，人们还在语言学的角度对自动分词进行研究，期间诞生了很多有意思的理论。</p>
<p>    中文分词的主要困难在于分词歧义。“结婚的和尚未结婚的”，应该分成“结婚／的／和／尚未／结婚／的”，还是“结婚／的／和尚／未／结婚／的”？人来判断很容易，要交给计算机来处理就麻烦了。问题的关键就是，“和尚未”里的“和尚”也是一个词，“尚未”也是一个词，从计算机的角度看上去，两者似乎都有可能。对于计算机来说，这样的分词困境就叫做“交集型歧义”。</p>
<p>    有时候，交集型歧义的“歧义链”有可能会更长。“中外科学名著”里，“中外”、“外科”、“科学”、“学名”、“名著”全是词，光从词库的角度来看，随便切几刀下去，得出的切分都是合理的。类似的例子数不胜数，“提高产品质量”、“鞭炮声响彻夜空”、“努力学习语法规则”等句子都有这样的现象。在这些极端例子下，分词算法谁优谁劣可谓是一试便知。</p>
<p><span id="more-4212"></span><br>
    最简单的，也是最容易想到的自动分词算法，便是“最大匹配法”了。也就是说，从句子左端开始，不断匹配最长的词（组不了词的单字则单独划开），直到把句子划分完。算法的理由很简单：人在阅读时也是从左往右逐字读入的，最大匹配法是与人的习惯相符的。而在大多数情况下，这种算法也的确能侥幸成功。不过，这种算法并不可靠，构造反例可以不费吹灰之力。例如，“北京大学生前来应聘”本应是“北京／大学生／前来／应聘”，却会被误分成“北京大学／生前／来／应聘”。</p>
<p>    维护一个特殊规则表，可以修正一些很机械的问题，效果相当不错。例如，“不可能”要划分成“不／可能”，“会诊”后面接“断”、“疗”、“脉”、“治”时要把“会”单独切出，“的确切”后面是抽象名词时要把“的确切”分成“的／确切”，等等。</p>
<p>    还有一个适用范围相当广的特殊规则，这个强大的规则能修正很多交集型歧义的划分错误。首先我们要维护一个一般不单独成词的字表，比如“民”、“尘”、“伟”、“习”等等；这些字通常不会单独划出来，都要跟旁边的字一块儿组成一个词。在分词过程中时，一旦发现这些字被孤立出来，都重新考虑它与前面的字组词的可能。例如，在用最大匹配法切分“为人民服务”时，算法会先划出“为人”一词，而后发现“民”字只能单独成词了。查表却发现，“民”并不能单独划出，于是考虑进行修正——把“为人”的“人”字分配给“民”字。巧在这下“为”和“人民”正好都能成词，据此便可得出正确的划分“为／人民／服务”。</p>
<p> <br>
    不过，上述算法归根结底，都是在像人一样从左到右地扫描文字。为了把问题变得更加形式化，充分利用计算机的优势，我们还有一种与人的阅读习惯完全不同的算法思路：把句子作为一个整体来考虑，从全局的角度评价一个句子划分方案的好坏。设计自动分词算法的问题，也就变成了如何评估分词方案优劣的问题。最初所用的办法就是，寻找词数最少的划分。注意，每次都匹配最长的词，得出的划分不见得是词数最少的，错误的贪心很可能会不慎错过一些更优的路。因而，在有的情况下，最少词数法比最大匹配法效果更好。若用最大匹配法来划分，“独立自主和平等互利的原则”将被分成“独立自主／和平／等／互利／的／原则”，一共有 6 个词；但词数更少的方案则是“独立自主／和／平等互利／的／原则”，一共只有 5 个词。</p>
<p>    当然，最少词数法也会有踩大便的时候。“为人民办公益”的最大匹配划分和最少词数划分都是“为人／民办／公益”，而正确的划分则是“为／人民／办／公益”。同时，很多句子也有不止一个词数最少的分词方案，最少词数法并不能从中选出一个最佳答案。不过，把之前提到的“不成词字表”装备到最少词数法上，我们就有了一种简明而强大的算法：</p>
<p>    对于一种分词方案，里面有多少词，就罚多少分；每出现一个不成词的单字，就加罚一分。最好的分词方案，也就是罚分最少的方案。</p>
<p>    这种算法的效果出人意料的好。“他说的确实在理”是一个很困难的测试用例，“的确”和“实在”碰巧也成词，这给自动分词带来了很大的障碍。但是“确”、“实”、“理”通常都不单独成词的，因此很多切分方案都会被扣掉不少分：</p>
<p>      他／说／的／确实／在理 （罚分：1+1+1+1+1 = 5 ）<br>
      他／说／的确／实／在理 （罚分：1+1+1+2+1 = 6 ）<br>
      他／说／的确／实在／理 （罚分：1+1+1+1+2 = 6 ）</p>
<p>    正确答案胜出。</p>
<p>    需要指出的是，这个算法并不需要枚举所有的划分可能。整个问题可以转化为图论中的最短路径问题，利用动态规划效率则会更高。</p>
<p>    算法还有进一步加强的余地。大家或许已经想到了，“字不成词”有一个程度的问题。“民”是一个不成词的语素，它是绝对不会单独成词的。“鸭”一般不单独成词，但在儿歌童谣和科技语体中除外。“见”则是一个可以单独成词的语素，只是平时我们不常说罢了。换句话说，每个字成词都有一定的概率，每个词出现的频率也是不同的。</p>
<p>    何不用每个词出现的概率，来衡量分词的优劣？于是我们有了一个更标准、更连续、更自动的改进算法：先统计大量真实语料中各个词出现的频率，然后把每种分词方案中各词的出现概率乘起来作为这种方案的得分。利用动态规划，不难求出得分最高的方案。</p>
<p>    以“有意见分歧”为例，让我们看看最大概率法是如何工作的。查表可知，在大量真实语料中，“有”、“有意”、“意见”、“见”、“分歧”的出现概率分别是 0.0181 、 0.0005 、 0.0010 、 0.0002 、 0.0001 ，因此“有／意见／分歧”的得分为 1.8×10<sup>-9</sup> ，但“有意／见／分歧”的得分只有 1.0×10<sup>-11</sup> ，正确方案完胜。</p>
<p>    这里的假设是，用词造句无非是随机选词连在一块儿，是一个简单的一元过程。显然，这个假设理想得有点不合理，必然会有很多问题。考虑下面这句话：</p>
<p>      这／事／的确／定／不／下来</p>
<p>    但是概率算法却会把这个句子分成：</p>
<p>      这／事／的／确定／不／下来</p>
<p>    原因是，“的”字的出现概率太高了，它几乎总会从“的确”中挣脱出来。</p>
<p>    其实，以上所有的分词算法都还有一个共同的大缺陷：它们虽然已经能很好地处理交集型歧义的问题，却完全无法解决另外一种被称为“组合型歧义”的问题。所谓组合型歧义，就是指同一个字串既可合又可分。比如说，“个人恩怨”中的“个人”就是一个词，“这个人”里的“个人”就必须拆开；“这扇门的把手”中的“把手”就是一个词，“把手抬起来”的“把手”就必须拆开；“学生会宣传部”中的“学生会”就是一个词，“学生会主动完成作业”里的“学生会”就必须拆开。这样的例子非常多，“难过”、“马上”、“将来”、“才能”、“过人”、“研究所”、“原子能”都有此问题。究竟是合还是分，还得取决于它两侧的词语。到目前为止，所有算法对划分方案的评价标准都是基于每个词固有性质的，完全不考虑相邻词语之间的影响；因而一旦涉及到组合型歧义的问题，最大匹配、最少词数、概率最大等所有策略都不能实现具体情况具体分析。</p>
<p>    于是，我们不得不跳出一元假设。此时，便有了那个 Google 黑板报上提到的统计语言模型算法。对于任意两个词语 w<sub>1</sub> 、 w<sub>2</sub> ，统计在语料库中词语 w<sub>1</sub> 后面恰好是 w<sub>2</sub> 的概率 P(w<sub>1</sub>, w<sub>2</sub>) 。这样便会生成一个很大的二维表。再定义一个句子的划分方案的得分为 P(∅, w<sub>1</sub>) · P(w<sub>1</sub>, w<sub>2</sub>) · … · P(w<sub>n-1</sub>, w<sub>n</sub>) ，其中 w<sub>1</sub>, w<sub>2</sub>, …, w<sub>n</sub> 依次表示分出的词。我们同样可以利用动态规划求出得分最高的分词方案。这真是一个天才的模型，这个模型一并解决了词类标注、语音识别等各类自然语言处理问题。</p>
<p>    至此，中文自动分词算是有了一个漂亮而实用的算法。</p>
<p> <br>
 <br>
    但是，随便拿份报纸读读，你就会发现我们之前给出的测试用例都太理想了，简直就是用来喂给计算机的。在中文分词中，还有一个比分词歧义更令人头疼的东西——未登录词。中文没有首字母大写，专名号也被取消了，这叫计算机如何辨认人名地名之类的东西？最近十年来，中文分词领域都在集中攻克这一难关。</p>
<p>    在汉语的未定义词中，中国人名的规律是最强的了。根据统计，汉语姓氏大约有 1000 多个，其中“王”、“陈”、“李”、“张”、“刘”五大姓氏的覆盖率高达 32% ，前 400 个姓氏覆盖率高达 99% 。人名的用字也比较集中，“英”、“华”、“玉”、“秀”、“明”、“珍”六个字的覆盖率就有 10.35% ，最常用的 400 字则有 90% 的覆盖率。虽然这些字分布在包括文言虚词在内的各种词类里，但就用字的感情色彩来看，人名多用褒义字和中性字，少有不雅用字，因此规律性还是非常强的。根据这些信息，我们足以计算一个字符串能成为名字的概率，结合预先设置的阈值便能很好地识别出可能的人名。</p>
<p>    可是，如何把人名从句子中切出来呢？换句话说，如果句中几个连续字都是姓名常用字，人名究竟应该从哪儿取到哪儿呢？人名以姓氏为左边界，相对容易判定一些。人名的右边界则可以从下文的提示确定出来：人名后面通常会接“先生”、“同志”、“校长”、“主任”、“医生”等身份词，以及“是”、“说”、“报道”、“参加”、“访问”、“表示”等动作词。</p>
<p>    但麻烦的情况也是有的。一些高频姓氏本身也是经常单独成词的常用字，例如“于”、“马”、“黄”、“常”、“高”等等。很多反映时代性的名字也是本身就成词的，例如“建国”、“建设”、“国庆”、“跃进”等等。更讨厌的就是那些整个名字本身就是常用词的人了，他们会彻底打乱之前的各种模型。如果分词程序也有智能的话，他一定会把所有叫“高峰”、“汪洋”的人拖出去斩了；要是听说了有人居然敢叫“令计划”，估计直接就崩溃了。</p>
<p>    还有那些恰好与上下文组合成词的人名，例如：</p>
<p>     费孝<span style="text-decoration:underline">通向</span>人大常委会提交书面报告<br>
     邓颖<span style="text-decoration:underline">超生</span>前使用过的物品</p>
<p>    这就是最考验分词算法的句子了。</p>
<p>    相比之下，中国地名的用字就分散得多了。北京有一个地方叫“臭泥坑”，网上搜索“臭泥坑”，第一页全是“臭泥坑地图”、“臭泥坑附近酒店”之类的信息。某年《重庆晨报》刊登停电通知，上面赫然印着“停电范围包括沙坪坝区的犀牛屙屎和犀牛屙屎抽水”，读者纷纷去电投诉印刷错误。记者仔细一查，你猜怎么着，印刷并无错误，重庆真的就有叫“犀牛屙屎”和“犀牛屙屎抽水”的地方。</p>
<p>    好在，中国地名数量有限，这是可以枚举的。中国地名委员会编写了《中华人民共和国地名录》，收录了从高原盆地到桥梁电站共 10 万多个地名，这让中国地名的识别便利了很多。</p>
<p>    真正有些困难的就是识别机构名了，虽然机构名的后缀比较集中，但左边界的判断就有些难了。更难的就是品牌名了。如今各行各业大打创意战，品牌名可以说是无奇不有，而且经常本身就包含常用词，更是给自动分词添加了不少障碍。</p>
<p>    最难识别的未登录词就是缩略语了。“高数”、“抵京”、“女单”、“发改委”、“北医三院”都是比较好认的缩略语了，有些缩略语搞得连人也是丈二和尚摸不着头脑。你能猜到“人影办”是什么机构的简称吗？打死你都想不到，是“人工影响天气办公室”。</p>
<p>    汉语中构造缩略语的规律很诡异，目前也没有一个定论。初次听到这个问题，几乎每个人都会做出这样的猜想：缩略语都是选用各个成分中最核心的字，比如“安全检查”缩成“安检”，“人民警察”缩成“民警”等等。不过，反例也是有的，“邮政编码”就被缩成了“邮编”，但“码”无疑是更能概括“编码”一词的。当然，这几个缩略语已经逐渐成词，可以加进词库了；不过新近出现的或者临时构造的缩略语该怎么办，还真是个大问题。</p>
<p>    说到新词，网络新词的大量出现才是分词系统真正的敌人。这些新词汇的来源千奇百怪，几乎没有固定的产生机制。要想实现对网络文章的自动分词，目前来看可以说是相当困难的。革命尚未成功，分词算法还有很多进步的余地。</p>
			 ]]></content>
<pubDate>2011-03-10T11:04:36+00:00</pubDate>
<guid>http://www.matrix67.com/blog/archives/4212</guid>
<author><![CDATA[ 顾森 ]]></author>
</item>
<item>
<title><![CDATA[ UyHiP趣题：限制最苛刻的选票统计程序 ]]></title>
<link>http://www.matrix67.com/blog/archives/4228</link>
<content><![CDATA[ 
		<p>    因为忙，不少计划写下来的东西都一直搁置着。其中一个拖了很久都没写的就是 <a href="http://www.brand.site.co.il/riddles/201101q.html">UyHiP 一月的题目</a> 了。这是一道看上去非常困难的算法题目，当时我没能解答出来；看到答案后才恍然大悟，拍案叫绝。这是一道非常少见的算法好题，在这里记下来。</p>
<p>    一个国家里有 N 个公民，这些公民从 1 到 N 依次编号。这是一个民主国家，国家做出的每个决定都需要全体公民投票，每个人必须且只能投一票。</p>
<p>    不过，随着该国家人口数量的增加，这种投票方式的效率越来越低。于是，这个国家实行了一种新的民主制度。每过四年，这个国家将会举行一次“代表选举大会”，届时，每个公民都必须且只能提名一个他信得过的人，来作为他自己的代表。注意，提名自己作为自己的代表也是允许的。对于每个被提名了的人，有百分之多少的人提名他，他就拥有了相当于多少张选票的权力（向下取整）。在接下来的四年里，国家要做出某项决定时，就只需要这些代表来参加了。</p>
<p>    比方说，这个国家有 200 个人，在代表选举大会上，有 98 个人提名 1 号公民当代表，有 101 个人提名 2 号公民当代表，有 1 个人提名 200 号公民当代表。结果就是，只有 1 号公民和 2 号公民成为代表，在接下来的四年里参与投票，其中 1 号公民一票当 49 票，2 号公民一票当 50 票。值得注意的是， 200 号公民虽然有提名，但支持率仅 0.5% ，因此他今后四年没有当代表的权力。</p>
<p><span id="more-4228"></span><br>
    为了支持新的民主政策，你需要设计一套算法，来计算每届代表选举大会结束后，哪些公民成为了代表，他们手中各自有多少票的权力。程序的输入数据来源于一盘磁带。磁带上有 N 个数，分别记录了这 N 个公民各自提名的代表的编号（由于提名是匿名的，磁带上的数据不是顺序的，你无法判断出每个数都是谁的）。程序可以多次读取磁带，但是每次都只能是从头到尾依次读取每一个数。由于这个国家的人数已经增加到了一定规模，因此你的程序必须非常高效。具体地说，你的算法必须要满足以下几点限制：</p>
<p>    1. 你的程序读取磁带的次数要尽可能的少；</p>
<p>    2. 磁带是只读的；</p>
<p>    3. 程序可以在自己的内存里储存变量，不过只能使用 O(1) 个单元的空间（即所耗费的内存空间与 N 无关）；</p>
<p>    4. 内存里每个单元的空间只能储存 0 到 N 之间的整数（包括 0 和 N ）；</p>
<p>    5. 预处理阶段完成后，程序将进入询问阶段，即针对形如“公民 x 获得了多少票的权力”的问题给出回答。一旦预处理完成进入询问阶段后，程序就不能再接触磁带了。</p>
<p>    现在的问题是，在最坏情况下，最少需要读取多少次磁带？给出一个满足要求的算法，并证明读取磁带的次数已经不能再少了。</p>
<p> <br>
 <br>
 <br>
 <br>
    答案：最少需要读取两次磁带。</p>
<p>    首先我们来说明，读取一次磁带是不够的。假设 N 是 100 的某个很大的倍数。磁带前面有 (N/2) + 50 个互不相同的数。磁带后面则又是 50 个不同的数，其中每个数都出现了 (N/100) – 1 次，从而恰好填充满整个磁带。注意，出现了 (N/100) – 1 次就意味着，再多出现一次就能成为代表了。因此正确的输出结果就是，如果这 50 个人中有人正好也在磁带前半部分出现过，则他将获得一票的代表权力。因此，如果程序想要一次读带就完成任务，在读完前 (N/2) + 50 个数之后，它必须要能记住哪些数出现过哪些数没出现过，这显然无法用 O(1) 的空间存下。这就说明，仅用一次磁带是不够的。</p>
<p>    如果允许读磁带两次，我们有下面这个算法。</p>
<p>    首先，通读一遍磁带，同时维护一个“谁谁谁目前都得到了多少次提名”的表（没有被提名的人就不用写进表里了）。为了保证内存空间在常数级别，我们引入“裁减”操作：只要表里的人数达到 100，就让所有代表都减少一个提名。这样的话，必然有人又会变成“零提名”，从而让表里的人数回到 100 以下。每当表里的人数达到 100 时，我们都进行一次裁减操作，除非我们正好处理完最后一个提名。</p>
<p>    现在我们证明，最后没有留在表中的人，都绝不可能成为代表。反证，假设某人得到了 x ≥ N/100 次提名，但最后却没有留在表中。由于一次裁减只能让他失去一个提名，因此读取磁带的过程中至少发生了 x 次裁减。每次裁减都会裁掉 100 个提名，因此整个过程中至少有 100x 个提名被裁掉了。但我们一共就只有 N 个提名，而且最后一个提名是肯定不会被裁掉的，因此 100x 必然严格地小于 N 。这与 x ≥ N/100 矛盾。因此，所有有可能成为代表的人都已经留在表里了。</p>
<p>    接下来就容易了。再从头至尾读一遍磁带，并且记录每个代表真正的提名次数。只不过这一次，我们只为上一轮最后还留在表里的那些人做记录。第二轮磁带读完后，我们便能算出每个代表拥有的权力了。</p>
			 ]]></content>
<pubDate>2011-03-16T23:15:58+00:00</pubDate>
<guid>http://www.matrix67.com/blog/archives/4228</guid>
<author><![CDATA[ 顾森 ]]></author>
</item>
<item>
<title><![CDATA[ 数学家集体相，看你能认出多少大牛来 ]]></title>
<link>http://www.matrix67.com/blog/archives/4236</link>
<content><![CDATA[ 
		<p><a href="http://www.matrix67.com/blogimage_2011/201103192.jpg"><img alt="image placeholder" >
<p>偶然看到一张图片，分享在此。各人物手里的东西和身旁的公式是亮点。<br>
点击小图看大图。</p>
<p>来源：<a href="http://angelustenebrae.livejournal.com/15908.html">http://angelustenebrae.livejournal.com/15908.html</a></p>
			 ]]></content>
<pubDate>2011-03-19T13:06:29+00:00</pubDate>
<guid>http://www.matrix67.com/blog/archives/4236</guid>
<author><![CDATA[ 顾森 ]]></author>
</item>
<item>
<title><![CDATA[ 比Conway生命游戏更酷的Langton蚂蚁 ]]></title>
<link>http://www.matrix67.com/blog/archives/4238</link>
<content><![CDATA[ 
		<p>不知道有多少人已经熟知 Conway 的生命游戏，但却从没听说过 Langton 的蚂蚁游戏？反正我是其中之一。直到今天我才听说了这个比生命游戏更酷的游戏——<a href="http://mathworld.wolfram.com/LangtonsAnt.html"> Langton 的蚂蚁</a>。这也是一个二维自动机形式的零玩家游戏，不过我觉得它比生命游戏有趣得多。这有两个理由：</p>
<p>1. 它的算法过程更简单。初始时，蚂蚁位于一张空白画布的某个方格里。如果当前蚂蚁在白色方格上，则对当前方格反色，左转 90 度，前进一格；如果当前蚂蚁在黑色方格上，则对当前方格反色，右转 90 度，前进一格。如此反复。</p>
<p>  <img alt="image placeholder" >
<p><span id="more-4238"></span><br>
2. 它的结果更有意思——刚开始，画布上将生成毫无规律的复杂图形，实在让人很难相信这竟是由如此简单的规则产生的；直到上万步之后，整个过程才会进入循环，画出有规律的图形。</p>
<p>下面是一个模拟 Langton 蚂蚁的 javascript 小程序（<a href="http://wendlinger.org/jowe/langton_ant.html">来源</a>）。你有兴趣看到第 10000 步吗？</p>
<p>注意：最好不要尝试在图形区域里点鼠标什么的，我的浏览器几次都因为这个而停止响应。</p>
<p><script type="text/javascript">
	// Directions : 0=>Nord, 1=>Est, 2=>Sud, 3=>West
	var currentAntDirection = 0;
	var currentLine;
	var currentColumn;
	var intervalId;
	var currentStep = 0;
	var currentStepDisplayDiv = null;
	var lignes = 100;
	var colonnes = 100;
	var maxHeight = 400;
	var maxWidth = 400;
	var timeout = 100;
	function generateGrid() {
		var cellHeight = maxHeight / lignes;
		var cellWidth = maxWidth / colonnes;
		var position_div = document.getElementById("position");
		//position_div.style.width = (maxWidth + 2*colonnes) + "px";
		//position_div.style.height = (maxHeight + 2*lignes) + "px";
		position_div.style.width = maxWidth + "px";
		position_div.style.height = maxHeight + "px";
		for (i = 0; i < lignes; i++) {
			for (j = 0; j < colonnes; j++) {
				var div = document.createElement("div");
				div.style.height = cellHeight + "px";
				div.style.width = cellWidth + "px";
				div.style.border = "none";
				div.style.cssFloat = "left";
				div.style.backgroundColor = "white";
				div.className = "cell_div";
				div.id = i + "-" + j;
				position_div.appendChild(div);
			}
			var divClear = document.createElement("div");
			divClear.style.clear = "both";
			position_div.appendChild(divClear);
		}
	}
	function setStartPosition()
	{
		currentLine = Math.round(lignes/2);
		currentColumn = Math.round(colonnes/2);
	}
	function startAntWalk()
	{
		setStartPosition();
		intervalId = window.setInterval("antStep()", 10);
	}
	function switchColor(div)
	{
		var color = div.style.backgroundColor == "" ? "white" : div.style.backgroundColor;
		if (color == "white")
		{
			div.style.backgroundColor = "black";
		}
		else
		{
			div.style.backgroundColor = "white";
		}
	}
	function antStep()
	{
		currentStep ++;
		displayStep();
		var currentDivId = currentLine + "-" + currentColumn;
		var currentDiv = document.getElementById(currentDivId);
		// if div does not exist, we are out of the box.
		try
		{
			var currentColor = currentDiv.style.backgroundColor == "" ? "white" : currentDiv.style.backgroundColor;
		}
		catch(e)
		{
			window.clearInterval(intervalId);
			return;
		}
		switchColor(currentDiv);
		if (currentAntDirection == 0)
		{
			if (currentColor == "white")
			{
				currentAntDirection = 1
				currentColumn ++;
			}
			else
			{
				currentColumn --;
				currentAntDirection = 3
			}
		}
		else if (currentAntDirection == 1)
		{
			if (currentColor == "white")
			{
				currentLine ++;
				currentAntDirection = 2
			}
			else
			{
				currentLine --;
				currentAntDirection = 0
			}
		}
		else if (currentAntDirection == 2)
		{
			if (currentColor == "white")
			{
				currentColumn --;
				currentAntDirection = 3
			}
			else
			{
				currentColumn ++;
				currentAntDirection = 1
			}
		}
		else if (currentAntDirection == 3)
		{
			if (currentColor == "white")
			{
				currentLine --;
				currentAntDirection = 0
			}
			else
			{
				currentLine ++;
				currentAntDirection = 2
			}
		}
	}
	function displayStep()
	{
		document.getElementById("step_display").innerHTML = currentStep + " steps";
	}
	function startAnt()
	{
		generateGrid();
		startAntWalk();
	}
</script><br>
<input type="button" onclick="startAnt()" value="Start"></p>
<div id="step_display"><!-- empty --></div>
<div id="position" style="margin: 10px; width: 400px; height: 400px; border: 1px solid #676767;"><!-- empty --></div>
<p> </p>
			 ]]></content>
<pubDate>2011-03-22T14:20:11+00:00</pubDate>
<guid>http://www.matrix67.com/blog/archives/4238</guid>
<author><![CDATA[ 顾森 ]]></author>
</item>
<item>
<title><![CDATA[ 趣题：能否把三维空间分成无穷个圆？ ]]></title>
<link>http://www.matrix67.com/blog/archives/4248</link>
<content><![CDATA[ 
		<p>    这是一个非常经典的问题：是否存在无穷个互不相交的圆，它们并在一起就是整个三维空间？换句话说，能否用圆形既无重复又无遗漏地填满整个三维空间？</p>
<p>    我很早就见过这个问题。我第一次看到这个问题时，显然没能理解到这个问题的精妙之处。当时我在想，这不是显然可以吗？把三维空间想像成无穷个平行平面的并集，而每个平面又可以看作是由无穷多个同心圆组成的，这样一来整个空间不就划分成无穷个不相交的圆了吗？因此，我一直没有认真考虑过这个问题。</p>
<p>    直到今天我才想到，上面的方案显然有问题——那些同心圆的圆心不属于任何一个圆。这个最容易想到的构造其实是错误的。看来，这个问题似乎没那么平凡。问题重新摆在了我们面前：究竟能不能把三维空间分成无穷个圆？</p>
<p><span id="more-4248"></span><br>
    答案是肯定的。下面是 Mathematical Puzzles: A Connoisseur’s Collection 一书中提到的一个非常漂亮的构造。首先注意到，和平面上的情况类似，我们也无法把球面划分成不相交的圆，除非挖去球面上的两个相异点（不一定是两个对称点）。然后，在平面 z=0 上，分别以 …，(-7, 0)，(-3, 0)，(1, 0)，(5, 0)，(9, 0)，… 为圆心作单位圆。注意到，每个以原点为中心的球面都会与它们产生恰好两个交点，我们只需要把这些有两相异点已经不用再考虑的球面分割成圆就可以了。</p>
<p>  <img alt="image placeholder" >
<p>    另外，原点本身也已经包含在了那个以 (1, 0) 为圆心的单位圆里，因此三维空间中的所有点都被包含了。<br>
 </p>
			 ]]></content>
<pubDate>2011-03-25T10:59:27+00:00</pubDate>
<guid>http://www.matrix67.com/blog/archives/4248</guid>
<author><![CDATA[ 顾森 ]]></author>
</item>
<item>
<title><![CDATA[ 用事实告诉你高斯有多牛B ]]></title>
<link>http://www.matrix67.com/blog/archives/4253</link>
<content><![CDATA[ 
		<p>Johann Carl Friedrich Gauss（1777－1855），史上最牛的数学家。他上知天文，下知地理，涉足数学各个领域，死后都在用未知的神秘力量影响着数学的发展。作为当之无愧的第一大数学家，Gauss 有很多鲜为人知的传奇经历，现在就为你一一八卦：</p>
<ul>
<li>Erdős 相信上帝手中有一本包含世间所有精妙证明的天书。上帝相信这本书在 Gauss 手上。</li>
<li>Gauss 把无穷当作归纳证明中的第一个非平凡的情况。</li>
<li>Gauss 不用任何公理就能证明一个定理。</li>
<li>Gauss 不理解什么是 P=NP。在他看来，一切都是常数级别的。</li>
<li>Gauss 从后往前列举了一下质数，就知道了质数有无穷多。</li>
<li>Gauss 从来不会用光书本页面边缘的空白。</li>
<li>Gauss 的 Erdős 数为 -1。</li>
<li>Gauss 等于自己的幂集。</li>
<li>Gauss 可以化圆为方，再把它变成一个四维球。</li>
<li>Gauss 可以既无重复又无遗漏地走遍 Königsberg 的七座桥。</li>
<li>Gauss 可以用尺规作图三等分角。</li>
<li>Gauss 可以在六步以内解决骑士周游问题。</li>
<li>Gauss 同时给 Bertrand Russell 和自己理发。</li>
<li>Gauss 想喝果汁时，直接对橙子使用夹挤定理。</li>
<li>Gauss 唱完 “Aleph-Null Bottles of Beer on the Wall” 只用了四分钟。</li>
<li>Gauss 用 Klein 瓶喝酒。</li>
<li>Gauss 做俯卧撑时，他不是把自己撑起来，而是把整个地球按下去。</li>
<li>Hilbert 不能住进 Gauss 旅馆，因为 Gauss 旅馆已经满房了。</li>
<li>不是 Gauss 发现了正态分布，而是自然规律遵循着 Gauss 的模型。</li>
<li>读了 Gauss 的书之后，Maxwell 决定退出数学界，从事咖啡行业。</li>
<li>对于 Gauss 来说，算术公理体系同时满足完备性和一致性。</li>
<li>尽管微积分在 Gauss 生前 100 年诞生，但 Gauss 仍然发明了微积分。</li>
<li>如果 Gauss 发表了他的所有发现，数学界里就没啥可证的了。</li>
<li>有一次，Gauss 和自己玩了一个零和游戏，然后赢了 50 块钱。</li>
<li>有一次，Fermat 惹怒了 Gauss，于是就有了 Fermat 最终定理。</li>
<li>只有 Gauss 才知道 Schrödinger 的猫是死是活。</li>
</ul>
<p>来源：<a href="http://www.gaussfacts.com">http://www.gaussfacts.com</a> （太欢乐了）</p>
			 ]]></content>
<pubDate>2011-04-01T12:55:32+00:00</pubDate>
<guid>http://www.matrix67.com/blog/archives/4253</guid>
<author><![CDATA[ 顾森 ]]></author>
</item>
</channel>
</rss>
