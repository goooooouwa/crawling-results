<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
<channel>
<title>酷 壳 – CoolShell</title>
<description>享受编程和技术所带来的快乐 – Coding Your Ambition</description>
<link>https://coolshell.cn</link>
<pubDate>2021-11-25T11:50:53+08:00</pubDate>
<!-- other elements omitted from this example -->
<item>
<title><![CDATA[ 不要拯救那些职场上的“无可救药” ]]></title>
<link>https://coolshell.cn/articles/753.html</link>
<content><![CDATA[ 
<p><a href="http://www.marshallgoldsmithlibrary.com/blog/2009/05/02/spotting-the-uncoachables/">此文</a>来自Marshall Goldsmith的<a href="http://www.marshallgoldsmithlibrary.com/blog/">博客</a>，此人曾任Peter Drucker Foundation 的Board  member（实在不知道怎么翻译），49年出生，生平中是一系列管理学方面的成就，是一位罕见的高产的，大师型的博主。</p>
<p>显然，我所翻译的标题有些夸张（原标题是“spotting the uncoachables”）。</p>
<p>职场上除了职位所确立的关系之外，还有一种重要的关系，那就是“师徒关系”。如果幸运，大家会遇到有人愿意 coach 自己，给自己传递技能或者指点职场之道。等我们在一个地方呆久了，也会有时候 coach 一些新入道的同事，甚至有时候为了达到团队目的，需要用自己的经验和技能影响自己的同僚。</p>
<p>此文提到的了4种很难coach的情形，大家可以拿来参考。但是这并不代表我们遇到觉得“朽木不可雕也”的人的时候就应该彻底放弃。如果我们无可避免的需要影响他们的行为，我们需要更有技巧的选择自己的方式。</p>
<p><span id="more-753"></span></p>
<p><strong>四类不可coach的人：</strong></p>
<ol>
<li>自己并没意识到有任何问题的人</li>
<li>其努力方向和公司战略相左的人</li>
<li>入错行的人（也许我们应该引导他们去发现自己才能所属的领域）</li>
<li>怨天尤人的人（老认为别人有问题的人）</li>
</ol>
<p>祝好</p>
<blockquote>
<p>原文：</p>
<h2><a title="Permanent Link: Spotting the “Uncoachables”" rel="bookmark" href="http://www.marshallgoldsmithlibrary.com/blog/2009/05/02/spotting-the-uncoachables/">Spotting the “Uncoachables”</a></h2>
<div class="entry">
<p>Even if you are the best coach in the world, if the person you are coaching shouldn’t be coached, the coaching isn’t going to work. The good news is that the “uncoachables” are easier than you think to spot. How do you know when someone is uncoachable? How do you detect a lost cause? Following are four indicators that you are dealing with one of these people:</p>
<p><strong>1. She doesn’t think she has a problem</strong>.</p>
<p>This successful adult has no interest in changing. Her behavior is working fine for her. If she doesn’t care to change, you are wasting your time! Let me give you an example of a nice woman who didn’t think she had a problem. My mother, a lovely woman and much-admired first-grade teacher, was so dedicated to her craft that she didn’t draw the line between inside and outside the classroom. She talked to all of us, including my father, in the same slow, patient manner, using the same simple vocabulary that she used with her six-year-olds every day. One day as she graciously and methodically corrected his grammar for the millionth time, he looked at her, sighed, and said, “Honey, I’m 70 years old. Let it go.” My father had absolutely no interest in changing. He didn’t perceive a problem. So no matter how much, how hard, or how diligently she coached, he wasn’t going to change.</p>
<p><strong>2. He is pursuing the wrong strategy for the organization</strong>.</p>
<p>If this guy is already going in the wrong direction, all you’re going to do with your coaching is help him get there faster.</p>
<p><strong>3. They’re in the wrong job</strong>.</p>
<p>Sometimes people feel that they’re in the wrong job with the wrong company. They may believe they’re meant to be doing something else or that their skills are being misused. Here’s a good way to determine if you’re working with one of these people. Ask them, “If we shut down the company today, would you be relieved, surprised, or sad?” If you hear ‘relieved,’ you’ve got yourself a live one. Send them packing. You can’t change the behavior of unhappy people so that they become happy: You can only fix behavior that’s making people around them unhappy.</p>
<p><strong>4. They think everyone else is the problem</strong>.</p>
<p>A long time ago I had a client who, after a few high-profile employee departures, was concerned about employee morale. He had a fun, successful company and people liked the work, but feedback said that the boss played favorites in the way he compensated people. When I reported this feedback to my client, he completely surprised me. He said he agreed with the charge and thought he was right to do so. First off, I’m not a compensation strategist and so I wasn’t equipped to deal with this problem, but then he surprised me again. He hadn’t called me to help him change; he wanted me to fix his employees. It’s times like these that I find the nearest exit. It’s hard to help people who don’t think they have a problem. It’s impossible to fix people who think someone else is the problem.</p>
<p>My suggestion in cases like these? Save time, skip the heroic measures, and move on. These are arguments you can’t ever win.</p>
</div>
<p>Life is good.<br>
Marshall</p>
</blockquote>
<p></p>
<p align="center"><img alt="image placeholder" >
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/3125.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/10804.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/1457.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/694.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/1256.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/20765.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
</ul>
</div></div>
<div id="post-ratings-753" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="fa4570db73">
<img alt="image placeholder" >
<meta itemprop="headline" content="不要拯救那些职场上的“无可救药”">
<meta itemprop="description" content="此文来自Marshall Goldsmith的博客，此人曾任Peter Drucker Foundation 的Board  member（实在不知道怎么翻译），49年出生，生平中是一系列管理学方面的成就，是一位罕见的高产的，大师型的博主。

显然，我所翻译的标题有些夸张（原标题是“spotting the uncoachables”）。

职场上除了职位所确立的关系之外，还有一种重要的关...">
<meta itemprop="datePublished" content="2009-05-03T18:06:26+08:00">
<meta itemprop="dateModified" content="2009-05-04T14:43:42+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/753.html">
<meta itemprop="author" content="mailper">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/753.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="2">
<meta itemprop="ratingCount" content="4">
</div>
</div>
<div id="post-ratings-753-loading" class="post-ratings-loading">
<img alt="image placeholder" >
 ]]></content>
<pubDate>2009-05-03T18:06:26+08:00</pubDate>
<guid>https://coolshell.cn/articles/753.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ 如何检查网页浏览器的兼容性 ]]></title>
<link>https://coolshell.cn/articles/757.html</link>
<content><![CDATA[ 
<p><a href="http://browsershots.org/" target="_blank">BrowserShots.org</a> 是一个很不错的在线服务，它主要帮助你检查一下你所设计网站是否兼容所有的浏览器。其目前支持四个操作系统：Linux, Windows, MacOS和BSD。浏览器支持的就多了：包括MSIE，Firefox，Chrome，Safari，Opera，Dillo，SeaMonkey，Navigator等等浏览器的不同版本。</p>
<p>使用这个在线服务其实很简单，只需要输入你的网址，并勾选一下各种浏览器。当然，你还可以指定分辨率，色彩度，Javascript，Java和Flash的版本。然后，这个网站会利用虚拟机的技术，启动操作系统然后运行相应的浏览器访问你的网站，并把图抓下来上传到你可以访问的位置以例提供你下载。</p>
<p>需要注意的是，如果你选中了太多的浏览器，可能整个速度就有些慢了，而系统设置是30分钟过期，而可能有很多浏览器的任务却高于这个时间。所以，你需要过会就去点击一下“Extend”按钮，以告诉系统延长过期时间。</p>
<p>下面是“酷壳”的一些抓图链接如下：<br>
<a href="http://browsershots.org/https://coolshell.cn/">http://browsershots.org/https://coolshell.cn/</a></p>
<p align="center"><img alt="image placeholder" >
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/18360.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/18094.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/12225.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/12206.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/12136.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/12012.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
</ul>
</div></div>
<div id="post-ratings-757" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="ff961465cc">
<img alt="image placeholder" >
<meta itemprop="headline" content="如何检查网页浏览器的兼容性">
<meta itemprop="description" content="BrowserShots.org 是一个很不错的在线服务，它主要帮助你检查一下你所设计网站是否兼容所有的浏览器。其目前支持四个操作系统：Linux, Windows, MacOS和BSD。浏览器支持的就多了：包括MSIE，Firefox，Chrome，Safari，Opera，Dillo，SeaMonkey，Navigator等等浏览器的不同版本。

使用这个在线服务其实很简单，只需要输入你的...">
<meta itemprop="datePublished" content="2009-05-04T14:57:24+08:00">
<meta itemprop="dateModified" content="2011-12-06T11:22:37+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/757.html">
<meta itemprop="author" content="陈皓">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/757.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="1.75">
<meta itemprop="ratingCount" content="4">
</div>
</div>
<div id="post-ratings-757-loading" class="post-ratings-loading">
<img alt="image placeholder" >
 ]]></content>
<pubDate>2009-05-04T14:57:24+08:00</pubDate>
<guid>https://coolshell.cn/articles/757.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ 让Ruby增加30%的性能改进 ]]></title>
<link>https://coolshell.cn/articles/766.html</link>
<content><![CDATA[ 
<h4>一切都和 <code>--enable-pthread</code> 有关</h4>
<p>问一下 Ruby 黑客怎么简单地增加一个线程的Ruby应用程序的性能。也许，这些黑客会告诉你，“<strong>小伙，每个人都知道在编译Ruby的时候你需要使用<code>configure</code> 的 <code>--disable-pthread</code>参数</strong>”。没错，在<code>configure</code> <code>--disable-pthread</code> 可以让你得到大约 30% 性能提高。但是，这是为什么呢？</p>
<p>所有的这一些我们需要使用 <a href="http://timetobleed.com/hello-world/">strace</a> 工具，这个工具可以打出所有的真实的操作系统的调用。</p>
<p>下面，是一段我们测试的例程：</p>
<p><span id="more-766"></span></p>
<p></p>
<pre data-enlighter-language="ruby" class="EnlighterJSRAW">def make_thread
  Thread.new {
    a = []
    10_000_000.times {
      a &lt;&lt; "a"
      a.pop
    }
  }
end

t = make_thread
t1 = make_thread

t.join
t1.join
</pre>
<p>如果我们使用 <code>strace</code> 工具去测试 <code>configure</code> <code>--enable-pthread</code> 版本的Ruby引擎，那么我们可以得到下面这样的结果：</p>
<p></p>
<pre data-enlighter-language="shell" class="EnlighterJSRAW">22:46:16.706136 rt_sigprocmask(SIG_BLOCK, NULL, [], 8 ) = 0 &lt;0.000004&gt;
22:46:16.706177 rt_sigprocmask(SIG_BLOCK, NULL, [], 8 ) = 0 &lt;0.000004&gt;
22:46:16.706218 rt_sigprocmask(SIG_BLOCK, NULL, [], 8 ) = 0 &lt;0.000004&gt;
22:46:16.706259 rt_sigprocmask(SIG_BLOCK, NULL, [], 8 ) = 0 &lt;0.000005&gt;
22:46:16.706301 rt_sigprocmask(SIG_BLOCK, NULL, [], 8 ) = 0 &lt;0.000004&gt;
22:46:16.706342 rt_sigprocmask(SIG_BLOCK, NULL, [], 8 ) = 0 &lt;0.000004&gt;
22:46:16.706383 rt_sigprocmask(SIG_BLOCK, NULL, [], 8 ) = 0 &lt;0.000004&gt;
</pre>
<p>你会发现上面的sigprocmask 系统调用一页一页又一页地没完没了的。如果你用 <code>strace -c，你会发现</code>一共大约<strong>20,054,180</strong> 个<code>sigprocmask系统调用<span style="font-family: Georgia;">。但是，如果你是在</span></code><code>--disable-pthread</code> 的Ruby版本下运行，你会发现根本没有那么多的<code>sigprocmask</code> 系统调用（只有 <strong>3</strong> 次，简直就是<strong>天壤之别</strong>）</p>
<h4>查看一下源代码</h4>
<p>我们知道 <code>configure</code> 是一个脚本，其主要用来创建一个 <code>config.h</code> 文件，其中有一大堆宏定义 <code>define</code>s ，这些宏定义决定了使用什么样的函数。所以，让我们来比较一下版本 <code>./configure --enable-pthread</code> 和版本<code>./configure --disable-pthread的不同之处吧。</code></p>
<p></p>
<pre data-enlighter-language="shell" class="EnlighterJSRAW" data-enlighter-highlight="6,7">$ diff config.h config.h.pthread
&gt; #define _REENTRANT 1
&gt; #define _THREAD_SAFE 1
&gt; #define HAVE_LIBPTHREAD 1
&gt; #define HAVE_NANOSLEEP 1
&gt; #define HAVE_GETCONTEXT 1
&gt; #define HAVE_SETCONTEXT 1
</pre>
<p>好的，现在我们再 <code>grep</code> 一下Ruby的源代码，我们可以看到只要<code>HAVE_[S/G]ETCONTEXT</code> 被设置了，Ruby 就会调用<code>setcontext()</code> 和<code>getcontext()</code> 这两个系统调用来存取context 的状态，以便异常处理时的切换（通过<code>EXEC_TAG）。</code></p>
<p>而如果 <code>HAVE_[S/G]ETCONTEXT</code> <strong>没有被定义</strong> <code>的情况下，</code>Ruby 会使用 <code>_setjmp/_longjmp这两个系统调用。</code></p>
<div><code>我们来看看 <code>_setjmp/_longjmp</code> 的man page:</code></div>
<blockquote><p>… The _longjmp() and _setjmp() functions shall be equivalent to longjmp() and setjmp(), respectively, with the additional restriction that _longjmp() and _setjmp() shall not manipulate the signal mask…</p></blockquote>
<p>还有<code>setcontext /getcontext的</code> man page:</p>
<blockquote><p>… uc_sigmask is the set of signals blocked in this context (see sigprocmask(2)) …</p></blockquote>
<p>我们可以看到 <code>getcontext</code> 调用每次都要调用<code>sigprocmask</code> 但是<code>_setjmp</code> 不会。</p>
<h4>补丁</h4>
<p>请点击 <strong><a href="https://github.com/ice799/matzruby/commit/0b9b69f9653782a33aee2b8937d405eae245b60c" target="_blank">这里</a></strong>获取补丁</p>
<p>这个补丁增加了一个configure 的参数 <code>--disable-ucontext</code> 其可以让你关闭使用 <code>setcontext或getcontext，你只需要像如下方式使用就好了。</code></p>
<p></p>
<pre data-enlighter-language="shell" class="EnlighterJSRAW">./configure --disable-ucontext --enable-pthread
</pre>
<p>如果你以这种方式编译Ruby，那么，你的程序的性能在同等条件下可能会有30%左右的提升。</p>
<p>文章：<a href="http://timetobleed.com/fix-a-bug-in-rubys-configurein-and-get-a-30-performance-boost/" target="_blank">来源</a></p>
<p align="center"><img alt="image placeholder" >
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/17381.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/11454.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/10910.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/10337.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/9703.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/9169.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
</ul>
</div></div>
<div id="post-ratings-766" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="d3b0848bf0">
<img alt="image placeholder" >
<meta itemprop="headline" content="让Ruby增加30%的性能改进">
<meta itemprop="description" content="一切都和 --enable-pthread 有关
问一下 Ruby 黑客怎么简单地增加一个线程的Ruby应用程序的性能。也许，这些黑客会告诉你，“小伙，每个人都知道在编译Ruby的时候你需要使用configure 的 --disable-pthread参数”。没错，在configure --disable-pthread 可以让你得到大约 30% 性能提高。但是，这是为什么呢？

所有的这一...">
<meta itemprop="datePublished" content="2009-05-05T23:44:55+08:00">
<meta itemprop="dateModified" content="2009-05-05T23:44:55+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/766.html">
<meta itemprop="author" content="陈皓">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/766.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="2.67">
<meta itemprop="ratingCount" content="6">
</div>
</div>
<div id="post-ratings-766-loading" class="post-ratings-loading">
<img alt="image placeholder" >
 ]]></content>
<pubDate>2009-05-05T23:44:55+08:00</pubDate>
<guid>https://coolshell.cn/articles/766.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ 一个在线的画UML图的网站 ]]></title>
<link>https://coolshell.cn/articles/776.html</link>
<content><![CDATA[ 
<p style="TEXT-ALIGN: center"><a href="http://yuml.me/"><img alt="image placeholder" >
<p style="TEXT-ALIGN: center"><a href="http://yuml.me/">http://yuml.me/</a></p>
<p style="TEXT-ALIGN: left">这个网站可以允许你在线地，通过一些UML的语法，生成相应的图片。</p>
<p style="TEXT-ALIGN: left">比如，如果你输入：</p>
<p></p>
<pre data-enlighter-language="html" class="EnlighterJSRAW">&lt;img src="http://yuml.me/diagram/class/[Customer]1-0..*[Address]"/&gt;
</pre>
<br>
<span id="more-776"></span><br>
那么，你就可以得到下面的图片：
<p style="TEXT-ALIGN: center"><img alt="image placeholder" >
<p style="TEXT-ALIGN: left">如果，我们输入：</p>
<p style="TEXT-ALIGN: left"></p>
<pre data-enlighter-language="html" class="EnlighterJSRAW">&lt;img src="http://yuml.me/diagram/class/
[User|+Forename+;Surname;+HashedPassword;-Salt|+Login();+Logout()]" alt="" /&gt;
</pre>
<p style="text-align: center;"><img alt="image placeholder" >
<p style="text-align: left;"> </p>
<p style="text-align: left;">还有Use Case：</p>
<p style="text-align: left;"></p>
<pre data-enlighter-language="html" class="EnlighterJSRAW">&lt;img src="http://yuml.me/diagram/usecase/[Customer]-(Login), [Customer]-(Logout)"/&gt;
</pre>
<p style="text-align: center;"><img alt="image placeholder" >
<p style="text-align: left;">还是挺不错的吧，呵呵。大家可以上去试试。</p>
<p></p>
<p align="center"><img alt="image placeholder" >
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/3609.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/1310.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/873.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/309.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/6441.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/3903.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
</ul>
</div></div>
<div id="post-ratings-776" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="410eac4b41">
<img alt="image placeholder" >
<meta itemprop="headline" content="一个在线的画UML图的网站">
<meta itemprop="description" content='
http://yuml.me/
这个网站可以允许你在线地，通过一些UML的语法，生成相应的图片。
比如，如果你输入：

[html]
&lt;img src="http://yuml.me/diagram/class/[Customer]1-0..*[Address]"/&gt;
[/html]

那么，你就可以得到下面的图片：

如果，我们输入：

[html]
&lt;img sr...'>
<meta itemprop="datePublished" content="2009-05-06T16:16:48+08:00">
<meta itemprop="dateModified" content="2009-05-06T16:17:34+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/776.html">
<meta itemprop="author" content="陈皓">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/776.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="2.75">
<meta itemprop="ratingCount" content="4">
</div>
</div>
<div id="post-ratings-776-loading" class="post-ratings-loading">
<img alt="image placeholder" >
 ]]></content>
<pubDate>2009-05-06T16:16:48+08:00</pubDate>
<guid>https://coolshell.cn/articles/776.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ 如何知道某网站运行在GAE上 ]]></title>
<link>https://coolshell.cn/articles/780.html</link>
<content><![CDATA[ 
<p>GAE就是<a href="https://code.google.com/appengine/" target="_blank">Google Application Engine</a>，通过Alexa的网站排名系统，我们可以知道Top 10的使用GAE的网站，他们是：（截止至今天）</p>
<li>1. <a href="https://www.robtex.com/">www.robtex.com</a> (Alexa rank: 1691)</li>
<li>2. <a href="http://www.twibes.com/">www.twibes.com</a> (Alexa rank: 13143)</li>
<li>3. <a href="http://www.acid-play.com/">www.acid-play.com</a> (Alexa rank: 25884)</li>
<li>4. <a href="http://www.jaiku.com/">www.jaiku.com</a> (Alexa rank: 29061)</li>
<li>5. <a href="http://www.wordle.net/">www.wordle.net</a> (Alexa rank: 34022)</li>
<li>6. <a href="http://www.twazzup.com/">www.twazzup.com</a> (Alexa rank: 40910)</li>
<li>7. <a href="http://www.twollo.com/">www.twollo.com</a> (Alexa rank: 41414)</li>
<li>8. <a href="https://downforeveryoneorjustme.com/">www.downforeveryoneorjustme.com</a> (Alexa rank: 41718)</li>
<li>9. <a href="https://www.chromeexperiments.com/">www.chromeexperiments.com</a> (Alexa rank: 49899)</li>
<li>10. <a href="http://www.desktop-reporting.com/">www.desktop-reporting.com</a> (Alexa rank: 51447)</li>
<p>那么，我们如何才能知道一个网站是运行在GAE上的呢？</p>
<p><span id="more-780"></span></p>
<p>如果一个网站运行在GAE上，那么其会有如下三个事情会为真：</p>
<ul>
<li>网站的 别名记录（CNAME）会 指向ghs.google.com， ghs.l.google.com 或者appspot.l.google.com 。</li>
<li>访问网站的/form 路径会返回Google风格的404 错误页。</li>
<li>网站的”Server”标题会是 “Google Frontend”</li>
</ul>
<p>测试这三个条件并不难，在Linux下，我们可以用这样的命令行检查：</p>
<p><code><strong>有google.com字样的CNAME</strong><br>
  dig www.example.com cname | egrep -i 'cname.*google.com'</code></p>
<p><code><strong>Google 404 错误for /form:</strong><br>
  curl -s -D - http://www.example.com/form | egrep 'G.*o.*o.*g.*l.*e'</code></p>
<p><code><strong>"Google Frontend" 字符串<br>
</strong></code><code>  curl -s -D - http://www.example.com/ | egrep '^Server:'</code></p>
<p>请注意，头两个条件在一些时候对于运行在Blogspot 的主机也是成立的，估计Blogspot就是运行在GAE上的一个站点。但第三个条件就不一样了。GAE上的是”Google Frontend”，而 Blogspot上的则是 “GFE/2.0″。</p>
<p align="center"><img alt="image placeholder" >
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/12136.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/9508.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/5815.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/5701.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/5224.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/3806.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
</ul>
</div></div>
<div id="post-ratings-780" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="5d934b52c1">
<img alt="image placeholder" >
<meta itemprop="headline" content="如何知道某网站运行在GAE上">
<meta itemprop="description" content="GAE就是Google Application Engine，通过Alexa的网站排名系统，我们可以知道Top 10的使用GAE的网站，他们是：（截止至今天）
	1. www.robtex.com (Alexa rank: 1691)
	2. www.twibes.com (Alexa rank: 13143)
	3. www.acid-play.com (Alexa rank: 25884...">
<meta itemprop="datePublished" content="2009-05-06T16:33:52+08:00">
<meta itemprop="dateModified" content="2009-05-06T16:33:52+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/780.html">
<meta itemprop="author" content="陈皓">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/780.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="1">
<meta itemprop="ratingCount" content="2">
</div>
</div>
<div id="post-ratings-780-loading" class="post-ratings-loading">
<img alt="image placeholder" >
 ]]></content>
<pubDate>2009-05-06T16:33:52+08:00</pubDate>
<guid>https://coolshell.cn/articles/780.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ 十大最失水准的科技预测 ]]></title>
<link>https://coolshell.cn/articles/783.html</link>
<content><![CDATA[ 
<p>英国权威消费数码杂志T3评出了有史以来十大最失水准的科技预测。比尔·盖茨也占了其中2项。预测未来的确是一件很难的事情，即便是最聪明的人也会马失前蹄。</p>
<p>1.  下一个圣诞节，iPod将会死去，完蛋，过时。<em><span style="color: #808080;"> Allan Sugar爵士（一个很著名的英国企业家，和BBC合作一个著名的节目《学徒》）, 2005.</span><br>
</em>2.  家庭不需要有一台电脑。  <em><span style="color: #808080;">Ken Olsen, Digital Equipment简称DEC的创始人, 1977.</span></em><br>
3.  核能吸尘器将在10年内成为现实。  <span style="color: #808080;"><em>Alex Lewyt（</em>真空吸尘器公司Lewyt Corp的CEO<em>）, 1955.</em></span><br>
4.  电视不可能兴盛起来，因为人们“很快就会因为每晚盯着一个胶合板盒子而感到厌烦”。 <span style="color: #808080;"><em>Darryl Zanuck（</em> 好莱坞多栖明星<em>）, 1946.</em></span><br>
5.  1933年，在可容纳10名乘客的波音247首航之后，一名自豪的波音工程师曾表示：“永远不可能制造出比247更大的飞机”。 <span style="color: #808080;"><em>Boeing engineer, 1933.</em></span></p>
<p><span id="more-783"></span><br>
6.  我们已处在火箭邮递时代开始的前夜。 <span style="color: #808080;"><em>Arthur Summerfield（美国邮政部长）, 1959.</em></span><br>
7.  不可能再有人需要为自己的PC安装超过640 KB的内存。 <span style="color: #808080;"><em>Bill Gates, allegedly in  1981</em></span><br>
8.  美国人需要电话，但我们并不需要，因为我们有数量庞大的信差。 <span style="color: #808080;"><em>William Preece 爵士, </em>英国邮政总局首席工程师<em>, 1874.</em></span><br>
9.  垃圾邮件问题将在两年内得到解决。 <span style="color: #808080;"><em>Bill Gates, 2004.</em></span><br>
10. 事实将证明，X射线不过是一个骗局。  <span style="color: #808080;"><em>Lord Kelvin, </em>英国皇家学会会长<em>, 1883.</em></span></p>
<p><span style="color: #808080;">原文链接: <a href="http://www.t3.com/news/sugar-ipod-error-is-worst-tech-prediction?=37516"><span style="color: #5588aa;">http://www.t3.com/news/sugar-ipod-error-is-worst-tech-prediction?=37516</span></a> </span></p>
<p align="center"><img alt="image placeholder" >
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/10192.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/10115.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/2065.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/9070.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/12176.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/4429.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
</ul>
</div></div>
<div id="post-ratings-783" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="47de13ac76">
<img alt="image placeholder" >
<meta itemprop="headline" content="十大最失水准的科技预测">
<meta itemprop="description" content="英国权威消费数码杂志T3评出了有史以来十大最失水准的科技预测。比尔·盖茨也占了其中2项。预测未来的确是一件很难的事情，即便是最聪明的人也会马失前蹄。

1.  下一个圣诞节，iPod将会死去，完蛋，过时。 Allan Sugar爵士（一个很著名的英国企业家，和BBC合作一个著名的节目《学徒》）, 2005.
2.  家庭不需要有一台电脑。  Ken Olsen, Digital Equipm...">
<meta itemprop="datePublished" content="2009-05-10T14:45:05+08:00">
<meta itemprop="dateModified" content="2009-05-10T14:45:05+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/783.html">
<meta itemprop="author" content="陈皓">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/783.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="4.17">
<meta itemprop="ratingCount" content="6">
</div>
</div>
<div id="post-ratings-783-loading" class="post-ratings-loading">
<img alt="image placeholder" >
 ]]></content>
<pubDate>2009-05-10T14:45:05+08:00</pubDate>
<guid>https://coolshell.cn/articles/783.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ 用TCC可以干些什么？ ]]></title>
<link>https://coolshell.cn/articles/786.html</link>
<content><![CDATA[ 
<p>Tiny C Compiler 是一个微型的 C 语言编译器，支持 Windows 和 Linux 平台。其项目主页是： <a href="http://bellard.org/tcc/" target="_blank">http://bellard.org/tcc/</a> 。你可以使用这个不到100K的编译器编译你的C文件，其支持C的预处理，编译，机器码汇编和链接。编译速度也超过了gcc，而且它支持ISO C99标准，并且，tcc还包括了一些内存和数组边界的检查。其还可以编译Linux的内核。</p>
<p>不过，TCC 最有趣的特性是可以用 UNIX 系统上常见的 #!/usr/bin/tcc 的方式来执行 ANSI C 语言写就的源程序，省略掉了在命令行上进行编译和链接的步骤，而可以直接运行 C 语言写就的源程序。这样就能做到像任何一种其它的脚本语言比如 Perl 或者是 Python 一样，显著的加快开发步调。可以像编写 Shell 脚本一样的使用 C 语言，随便想一想都觉得是一件奇妙的事情。但是 TCC 还有一些其它的特性呢！</p>
<p><span id="more-786"></span></p>
<p>在TCC这个超小型的C语言编译器下，我们还可以干得更多，比如这个开源项目：C in Python，项目主页是：<a href="https://www.cs.tut.fi/~ask/cinpy/">http://www.cs.tut.fi/~ask/cinpy/</a>，这个项目主要是让你可以在Python中直接使用C的源码。呵呵。</p>
<p>Cinpy 是一个Python的库，它可以让你在Python的模块中实现C的函数。在前些天，酷壳向大家介绍过《<a class="title" rel="bookmark" href="https://coolshell.cn/articles/671.html"><span style="color: #4c4c4c;">Python调用C语言函数</span></a>》——这主要是通过调用动态链接库的方式调用C的函数。而Cinpy则是直接在Python中写C语言。</p>
<p>我们来看一个示例：（部分代码）</p>
<p></p>
<pre data-enlighter-language="python" class="EnlighterJSRAW">import ctypes
import cinpy

# Fibonacci in Python
def fibpy(x):
    if x&lt;=1: return 1
    return fibpy(x-1)+fibpy(x-2)

# Fibonacci in C
fibc=cinpy.defc("fib",
                ctypes.CFUNCTYPE(ctypes.c_long,ctypes.c_int),
                """
                long fib(int x) {
                    if (x&lt;=1) return 1;
                    return fib(x-1)+fib(x-2);
                }
                """)

# ...and then just use them...
# (there _is_ a difference in the performance)
print fibpy(30)
print fibc(30)
</pre>
<p>源代码这里下载：<a href="https://coolshell.cn/wp-admin/cinpy-0.10.tar.gz">cinpy-0.10.tar.gz</a></p>
<p align="center"><img alt="image placeholder" >
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/18360.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/11265.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/10822.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/10169.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/7886.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/4939.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
</ul>
</div></div>
<div id="post-ratings-786" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="6e106c8612">
<img alt="image placeholder" >
<meta itemprop="headline" content="用TCC可以干些什么？">
<meta itemprop="description" content="Tiny C Compiler 是一个微型的 C 语言编译器，支持 Windows 和 Linux 平台。其项目主页是： http://bellard.org/tcc/ 。你可以使用这个不到100K的编译器编译你的C文件，其支持C的预处理，编译，机器码汇编和链接。编译速度也超过了gcc，而且它支持ISO C99标准，并且，tcc还包括了一些内存和数组边界的检查。其还可以编译Linux的内核。
...">
<meta itemprop="datePublished" content="2009-05-10T15:22:15+08:00">
<meta itemprop="dateModified" content="2009-05-10T15:24:15+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/786.html">
<meta itemprop="author" content="陈皓">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/786.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="3.4">
<meta itemprop="ratingCount" content="5">
</div>
</div>
<div id="post-ratings-786-loading" class="post-ratings-loading">
<img alt="image placeholder" >
 ]]></content>
<pubDate>2009-05-10T15:22:15+08:00</pubDate>
<guid>https://coolshell.cn/articles/786.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ 十个你可能不曾用过的Linux命令 ]]></title>
<link>https://coolshell.cn/articles/790.html</link>
<content><![CDATA[ 
<p>下面可能是你不曾用过后十个Linux的命令。相当的有用。</p>
<p><strong>1）pgrep</strong></p>
<p>pgrep名字前有个p，我们可以猜到这和进程相关，又是grep，当然这是进程相关的grep命令。不过，这个命令主要是用来列举进程ID的。如：</p>
<p></p>
<pre data-enlighter-language="shell" class="EnlighterJSRAW">$ pgrep -u hchen
22441
22444
</pre>
<p>这个命令相当于：</p>
<p><code data-enlighter-language="shell" class="EnlighterJSRAW">ps -ef | egrep '^hchen' | awk '{print $2}'</code></p>
<p><span id="more-790"></span></p>
<p><strong>2）pstree</strong></p>
<p>这个命令可以以树形的方式列出进程。如下所示：</p>
<p></p>
<pre data-enlighter-language="shell" class="EnlighterJSRAW">[<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="bad2d9d2dfd4fae8f2fff6e9ece88f">[email protected]</a> ~]$ pstree
init-+-acpid
     |-auditd-+-python
     |        `-{auditd}
     |-automount---4*[{automount}]
     |-backup.sh---sleep
     |-dbus-daemon
     |-events/0
     |-events/1
     |-hald---hald-runner---hald-addon-acpi
     |-httpd---10*[httpd]
     |-irqbalance
     |-khelper
     |-klogd
     |-ksoftirqd/0
     |-ksoftirqd/1
     |-kthread-+-aio/0
     |         |-aio/1
     |         |-ata/0
     |         |-ata/1
     |         |-ata_aux
     |         |-cqueue/0
     |         |-cqueue/1
     |         |-kacpid
     |         |-kauditd
     |         |-kblockd/0
     |         |-kblockd/1
     |         |-kedac
     |         |-khubd
     |         |-6*[kjournald]
     |         |-kmirrord
     |         |-kpsmoused
     |         |-kseriod
     |         |-kswapd0
     |         |-2*[pdflush]
     |         |-scsi_eh_0
     |         |-scsi_eh_1
     |         |-xenbus
     |         `-xenwatch
     |-migration/0
     |-migration/1
     |-6*[mingetty]
     |-3*[multilog]
     |-mysqld_safe---mysqld---9*[{mysqld}]
     |-smartd
     |-sshd---sshd---sshd---bash---pstree
     |-svscanboot---svscan-+-3*[supervise---run]
     |                     |-supervise---qmail-send-+-qmail-clean
     |                     |                        |-qmail-lspawn
     |                     |                        `-qmail-rspawn
     |                     `-2*[supervise---tcpserver]
     |-syslogd
     |-udevd
     |-watchdog/0
     |-watchdog/1
     `-xinetd
</pre>
<p> </p>
<p><strong>3）bc</strong></p>
<p>这个命令主要是做一个精度比较高的数学运算的。比如开平方根等。下面是一个我们利用bc命令写的一个脚本（文件名：sqrt）</p>
<p></p>
<pre data-enlighter-language="shell" class="EnlighterJSRAW">#!/bin/bash
if [ $# -ne 1 ]
then
    echo 'Usage: sqrt number'
    exit 1
else
    echo -e "sqrt($1)\nquit\n" | bc -q -i
fi
</pre>
<p>于是，我们可以这样使用这个脚本进行平方根运算：</p>
<p></p>
<pre data-enlighter-language="shell" class="EnlighterJSRAW">[<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="127a717a777c52405a575e41444027">[email protected]</a>]$ ./sqrt 36
6
[<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="9ff7fcf7faf1dfcdd7dad3ccc9cdaa">[email protected]</a>]$ ./sqrt 2.0000
1.4142
[<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="2b4348434e456b79636e67787d791e">[email protected]</a>]$ ./sqrt 10.0000
3.1622
</pre>
<p> </p>
<p><strong>4）split</strong></p>
<p>如果你有一个很大的文件，你想把其分割成一些小的文件，那么这个命令就是干这件事的了。</p>
<p></p>
<pre data-enlighter-language="shell" class="EnlighterJSRAW">[<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="afc7ccc7cac1effde7eae3fcf9fd9a">[email protected]</a> applebak]# ls -l largefile.tar.gz
-rw-r--r-- 1 hchen hchen 436774774 04-17 02:00 largefile.tar.gz 

[<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="ec848f848982acbea4a9a0bfbabed9">[email protected]</a> applebak]# split -b 50m largefile.tar.gz LF_

[<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="c2aaa1aaa7ac82908a878e919490f7">[email protected]</a>]# ls -l LF_*
-rw-r--r-- 1 hchen hchen 52428800 05-10 18:34 LF_aa
-rw-r--r-- 1 hchen hchen 52428800 05-10 18:34 LF_ab
-rw-r--r-- 1 hchen hchen 52428800 05-10 18:34 LF_ac
-rw-r--r-- 1 hchen hchen 52428800 05-10 18:34 LF_ad
-rw-r--r-- 1 hchen hchen 52428800 05-10 18:34 LF_ae
-rw-r--r-- 1 hchen hchen 52428800 05-10 18:35 LF_af
-rw-r--r-- 1 hchen hchen 52428800 05-10 18:35 LF_ag
-rw-r--r-- 1 hchen hchen 52428800 05-10 18:35 LF_ah
-rw-r--r-- 1 hchen hchen 17344374 05-10 18:35 LF_ai
</pre>
<br>
 
<p>文件合并只需要使用简单的合并就行了，如：</p>
<p></p>
<pre data-enlighter-language="shell" class="EnlighterJSRAW">[<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="e0888388858ea0b2a8a5acb3b6b2d5">[email protected]</a>]#  cat LF_* &gt;largefile.tar.gz
</pre>
<br>
 
<p><strong>5）nl</strong></p>
<p>nl命令其它和cat命令很像，只不过它会打上行号。如下所示：</p>
<p></p>
<pre data-enlighter-language="shell" class="EnlighterJSRAW">[<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="4c242f2429220c1e0409001f1a1e79">[email protected]</a> include]# nl stdio.h | head -n 10
     1  /* Define ISO C stdio on top of C++ iostreams.
     2     Copyright (C) 1991,1994-2004,2005,2006 Free Software Foundation, Inc.
     3     This file is part of the GNU C Library. 

     4     The GNU C Library is free software; you can redistribute it and/or
     5     modify it under the terms of the GNU Lesser General Public
     6     License as published by the Free Software Foundation; either
     7     version 2.1 of the License, or (at your option) any later version.

     8     The GNU C Library is distributed in the hope that it will be useful,
</pre>
<p> </p>
<p><strong>6）mkfifo</strong></p>
<p>熟悉Unix的人都应该知道这个是一个创建有名管道的系统调用或命令。平时，我们在命令行上使用竖线“|”把命令串起来是使用无命管道。而我们使用mkfifo则使用的是有名管道。下面是示例：</p>
<p>下面是创建一个有名管道：</p>
<p></p>
<pre data-enlighter-language="shell" class="EnlighterJSRAW">[<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="4a2229222f240a18020f06191c187f">[email protected]</a> ~]# mkfifo /tmp/hchenpipe

[<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="78101b101d16382a303d342b2e2a4d">[email protected]</a> ~]# ls -l /tmp
prw-rw-r-- 1 hchen  hchen  0 05-10 18:58 hchenpipe
</pre>
<p>然后，我们在一个shell中运行如下命令，这个命令不会返回，除非有人从这个有名管道中把信息读走。</p>
<p></p>
<pre data-enlighter-language="shell" class="EnlighterJSRAW">[<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="21494249444f617369646d72777314">[email protected]</a> ~]# ls -al &gt; /tmp/hchenpipe
</pre>
<p>我们在另一个命令窗口中读取这个管道中的信息：（其会导致上一个命令返回）</p>
<p></p>
<pre data-enlighter-language="shell" class="EnlighterJSRAW">[<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="8de5eee5e8e3cddfc5c8c1dedbdfb8">[email protected]</a> ~]# head /tmp/hchenpipe
drwx------ 8 hchen hchen    4096 05-10 18:27 .
drwxr-xr-x 7 root  root     4096 03-05 00:06 ..
drwxr-xr-x 3 hchen hchen    4096 03-01 18:13 backup
-rw------- 1 hchen hchen     721 05-05 22:12 .bash_history
-rw-r--r-- 1 hchen hchen      24 02-28 22:20 .bash_logout
-rw-r--r-- 1 hchen hchen     176 02-28 22:20 .bash_profile
-rw-r--r-- 1 hchen hchen     124 02-28 22:20 .bashrc
-rw-r--r-- 1 root  root    14002 03-07 00:29 index.htm
-rw-r--r-- 1 hchen hchen   31465 03-01 23:48 index.php
</pre>
<p> </p>
<p><strong>7）ldd</strong></p>
<p>这个命令可以知道你的一个可执行文件所使用了动态链接库。如：</p>
<p></p>
<pre data-enlighter-language="shell" class="EnlighterJSRAW">[<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="ec848f848982acbea4a9a0bfbabed9">[email protected]</a> ~]# ldd /usr/bin/java
        linux-gate.so.1 =&gt;  (0x00cd9000)
        libgij.so.7rh =&gt; /usr/lib/libgij.so.7rh (0x00ed3000)
        libgcj.so.7rh =&gt; /usr/lib/libgcj.so.7rh (0x00ed6000)
        libpthread.so.0 =&gt; /lib/i686/nosegneg/libpthread.so.0 (0x00110000)
        librt.so.1 =&gt; /lib/i686/nosegneg/librt.so.1 (0x009c8000)
        libdl.so.2 =&gt; /lib/libdl.so.2 (0x008b5000)
        libz.so.1 =&gt; /usr/lib/libz.so.1 (0x00bee000)
        libgcc_s.so.1 =&gt; /lib/libgcc_s.so.1 (0x00aa7000)
        libc.so.6 =&gt; /lib/i686/nosegneg/libc.so.6 (0x0022f000)
        libm.so.6 =&gt; /lib/i686/nosegneg/libm.so.6 (0x00127000)
        /lib/ld-linux.so.2 (0x00214000)
</pre>
<p> </p>
<p><strong>8）col</strong></p>
<p>这个命令可以让你把man文件转成纯文本文件。如下示例：</p>
<p></p>
<pre data-enlighter-language="shell" class="EnlighterJSRAW"># PAGER=cat
# man less | col -b &gt; less.txt
</pre>
<p> </p>
<p><strong>9）xmlwf</strong></p>
<p>这个命令可以让你检查一下一个XML文档是否是所有的tag都是正常的。如：</p>
<p></p>
<pre data-enlighter-language="shell" class="EnlighterJSRAW">[<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="e0888388858ea0b2a8a5acb3b6b2d5">[email protected]</a> ~]# curl 'https://coolshell.cn/?feed=rss2' &gt; cocre.xml
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
100 64882    0 64882    0     0  86455      0 --:--:-- --:--:-- --:--:-- 2073k
[<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="b3dbd0dbd6ddf3e1fbf6ffe0e5e186">[email protected]</a> ~]# xmlwf cocre.xml
[<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="ee868d868b80aebca6aba2bdb8bcdb">[email protected]</a> ~]# perl -i -pe '<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="fa89ba">[email protected]</a>&lt;link&gt;@&lt;br&gt;@g' cocre.xml
[<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="5f373c373a311f0d171a130c090d6a">[email protected]</a> ~]# xmlwf cocre.xml
cocre.xml:13:23: mismatched tag
</pre>
<p> </p>
<p><strong>10）lsof</strong></p>
<p>可以列出打开了的文件。</p>
<p></p>
<pre data-enlighter-language="shell" class="EnlighterJSRAW">[<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="52203d3d2612001a171e01040067">[email protected]</a> ~]# lsof | grep TCP
httpd       548    apache    4u     IPv6   14300967    TCP *:http (LISTEN)
httpd       548    apache    6u     IPv6   14300972    TCP *:https (LISTEN)
httpd       561    apache    4u     IPv6   14300967    TCP *:http (LISTEN)
httpd       561    apache    6u     IPv6   14300972    TCP *:https (LISTEN)
sshd       1764      root    3u     IPv6       4993    TCP *:ssh (LISTEN)
tcpserver  8965      root    3u     IPv4  153795500    TCP *:pop3 (LISTEN)
mysqld    10202     mysql   10u     IPv4   73819697    TCP *:mysql (LISTEN)
sshd      10735      root    3u     IPv6  160731956    TCP 210.51.0.232:ssh-&gt;123.117.239.68:31810 (ESTABLISHED)
sshd      10767     hchen    3u     IPv6  160731956    TCP 210.51.0.232:ssh-&gt;123.117.239.68:31810 (ESTABLISHED)
vsftpd    11095      root    3u     IPv4  152157957    TCP *:ftp (LISTEN)
</pre>
<p align="center"><img alt="image placeholder" >
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/19219.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/18654.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/18360.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/17998.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/17416.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/17200.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
</ul>
</div></div>
<div id="post-ratings-790" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="42728d73a3">
<img alt="image placeholder" >
<meta itemprop="headline" content="十个你可能不曾用过的Linux命令">
<meta itemprop="description" content="下面可能是你不曾用过后十个Linux的命令。相当的有用。

1）pgrep

pgrep名字前有个p，我们可以猜到这和进程相关，又是grep，当然这是进程相关的grep命令。不过，这个命令主要是用来列举进程ID的。如：

[shell]
$ pgrep -u hchen
22441
22444
[/shell]

这个命令相当于：

[shell]ps -ef | eg...">
<meta itemprop="datePublished" content="2009-05-10T19:26:09+08:00">
<meta itemprop="dateModified" content="2009-05-10T19:26:09+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/790.html">
<meta itemprop="author" content="陈皓">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/790.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="3.71">
<meta itemprop="ratingCount" content="7">
</div>
</div>
<div id="post-ratings-790-loading" class="post-ratings-loading">
<img alt="image placeholder" >
 ]]></content>
<pubDate>2009-05-10T19:26:09+08:00</pubDate>
<guid>https://coolshell.cn/articles/790.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ 5个不错的3D素材网站 ]]></title>
<link>https://coolshell.cn/articles/796.html</link>
<content><![CDATA[ 
<p>你也许并不是一个创建3D图形的好手，你也许只能创建一些原始的东西，如：停止或灯炮标志等等这些小孩子玩的东西。而我们现实世界则需要更复杂更牛的东西，比如说一个人物，一个机车等等。这里有史上最好的5个网站，你可以通过这些网站找到你想要的模型，这些3D的模型或资源对你开发游戏一定会有很大的帮助。</p>
<h3><a href="http://www.3drt.com/">3DRT</a></h3>
<p>这是一个迄今为止最好的站点。不仅仅因为这个站点有很多非常专业的模型，而且这个站点在收费方面还不是太坏——经常会有一些折扣。几乎，所有的模型都是动两国的，而且他们还是有皮肤的。他们有各式各样样的格式，并且提供PSD文件，这样方便你创建自己的皮肤。</p>
<p><span id="more-796"></span></p>
<h3><a href="http://www.garagegames.com/products/browse/artpacks">Garage Games</a></h3>
<p>在 Garage Games，一些艺术包也有非常“漂亮”的价格，有一些相当不错，但也有一些普普通通。这些东西完全取决于艺术家们怎么去创作他们的。这个站点并不提供很多的格式。另外，在 Garage Games上，你还能找到很多不错的声音素材。</p>
<h3><a href="http://www.fpscreator.com/">FPS Creator</a></h3>
<p>这个站点有很多相当不错的模型和声音。所有的素材都是动画的和有皮肤的。所有的都是基于FPS creator格式的和可以被转换成其它格式的 .X 格式。有一个很不错的是，这些FPS 模型（手臂和火枪）包括了很多的乱七八糟的生物和敌人，这些东西几乎可以用来直接用于游戏了。</p>
<h3><a href="http://www.realmcrafter.com/store/home.php?cat=250">Realm Crafter Packs</a></h3>
<p>这里的模式是中等质量的。他们并不是最好的，不过他们的价格可能是比较低的。几乎所有的模型都是有动画的并有一些不同的格式。有一些模式只是静态的而没有动画。</p>
<h3><a href="http://www.tridinaut.com/products.htm">Tridinaut</a></h3>
<p>如果你想一些中世纪的武器，那么这个站点会给你提供很多这类的玩意。质量非常好，而且所有的模型现在还在免费。如果你给上 $50-$100 美金，他们会给你制作你想要的东西，这些人的确非常不错。</p>
<p>希望你觉得这5个站点对你的游戏编程的工作很有用。</p>
<p>文章：<a href="http://www.omahagamedev.com/?p=12" target="_blank">来源</a></p>
<p align="center"><img alt="image placeholder" >
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/7829.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/5537.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/3903.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/3516.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/3267.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/2998.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
</ul>
</div></div>
<div id="post-ratings-796" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="a79a761090">
<img alt="image placeholder" >
<meta itemprop="headline" content="5个不错的3D素材网站">
<meta itemprop="description" content="你也许并不是一个创建3D图形的好手，你也许只能创建一些原始的东西，如：停止或灯炮标志等等这些小孩子玩的东西。而我们现实世界则需要更复杂更牛的东西，比如说一个人物，一个机车等等。这里有史上最好的5个网站，你可以通过这些网站找到你想要的模型，这些3D的模型或资源对你开发游戏一定会有很大的帮助。
3DRT
这是一个迄今为止最好的站点。不仅仅因为这个站点有很多非常专业的模型，而且这个站点在收费方面还不...">
<meta itemprop="datePublished" content="2009-05-11T22:14:47+08:00">
<meta itemprop="dateModified" content="2009-05-11T22:15:55+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/796.html">
<meta itemprop="author" content="陈皓">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/796.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="3">
<meta itemprop="ratingCount" content="4">
</div>
</div>
<div id="post-ratings-796-loading" class="post-ratings-loading">
<img alt="image placeholder" >
 ]]></content>
<pubDate>2009-05-11T22:14:47+08:00</pubDate>
<guid>https://coolshell.cn/articles/796.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ 电子书：编译器设计基础 ]]></title>
<link>https://coolshell.cn/articles/799.html</link>
<content><![CDATA[ 
<p>这是一本关于编译器设计原理的书，让我又想起了大学时的《编译原理》还有那长篇长篇的作业，以及几个方法分析器的上机实习。现在基本上都全部还给老师了。</p>
<p>Basics of Compiler Design<br>
<a href="http://www.diku.dk/hjemmesider/ansatte/torbenm/Basics/">http://www.diku.dk/hjemmesider/ansatte/torbenm/Basics/</a></p>
<p><a href="http://www.diku.dk/hjemmesider/ansatte/torbenm/Basics/basics_lulu.pdf"><strong>PDF下载</strong></a></p>
<p align="center"><img alt="image placeholder" >
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/9410.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/8115.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/7886.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/4710.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/4220.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/3903.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
</ul>
</div></div>
<div id="post-ratings-799" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="1810b6d7e5">
<img alt="image placeholder" >
<meta itemprop="headline" content="电子书：编译器设计基础">
<meta itemprop="description" content="这是一本关于编译器设计原理的书，让我又想起了大学时的《编译原理》还有那长篇长篇的作业，以及几个方法分析器的上机实习。现在基本上都全部还给老师了。

Basics of Compiler Design
http://www.diku.dk/hjemmesider/ansatte/torbenm/Basics/

PDF下载">
<meta itemprop="datePublished" content="2009-05-11T22:20:24+08:00">
<meta itemprop="dateModified" content="2010-09-25T11:21:32+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/799.html">
<meta itemprop="author" content="陈皓">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/799.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="3.67">
<meta itemprop="ratingCount" content="6">
</div>
</div>
<div id="post-ratings-799-loading" class="post-ratings-loading">
<img alt="image placeholder" >
 ]]></content>
<pubDate>2009-05-11T22:20:24+08:00</pubDate>
<guid>https://coolshell.cn/articles/799.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ 关于C++构造函数的FAQ ]]></title>
<link>https://coolshell.cn/articles/804.html</link>
<content><![CDATA[ 
<p>下面是一些关于C++构造函数的FAQ。你能回答得出来吗？你可以点链接查看答案，不过是英文版的。他们来自于<a title="C++ FAQ Lite" href="http://www.parashift.com/c++-faq-lite/index.html"><em>C++ FAQ Lite</em></a>。当然，也有中文版的，只可惜中文版的太老了，只更新到了2001年。在<a title="C++ FAQ Lite" href="http://www.parashift.com/c++-faq-lite/index.html"><em>C++ FAQ Lite</em></a>上还有很多关于其它部分的FAQ，大家可以去看看。</p>
<p><a title="[1] What's the deal with constructors?" href="http://www.parashift.com/c++-faq-lite/ctors.html#faq-10.1">[1] 构造函数是用来干什么的？</a></p>
<p><a title="[2] Is there any difference between List x; and List x();?" href="http://www.parashift.com/c++-faq-lite/ctors.html#faq-10.2">[2] <tt>List x;</tt> 和 <tt>List x();有什么不同</tt>?</a></p>
<p><a title="[3] Can one constructor of a class call another constructor of the same class to initialize the this object?" href="http://www.parashift.com/c++-faq-lite/ctors.html#faq-10.3">[3] 是否一个类的构造函数可以调用另一个构造函数来初始化自己？</a></p>
<p><a title="[4] Is the default constructor for Fred always Fred::Fred()?" href="http://www.parashift.com/c++-faq-lite/ctors.html#faq-10.4">[4] 是否Fred类的默认的函数函数就一定是<tt>Fred::Fred()？</tt></a></p>
<p><a title="[5] Which constructor gets called when I create an array of Fred objects?" href="http://www.parashift.com/c++-faq-lite/ctors.html#faq-10.5">[5] 如果要创建一个<tt>Fred</tt> 对像数组，什么样的构数函数会被调用?</a></p>
<p><a title='[6] Should my constructors use "initialization lists" or "assignment"?' href="http://www.parashift.com/c++-faq-lite/ctors.html#faq-10.6">[6] 构造函数初始化成员变量时，用 “初始化列表” 还是 “赋值”？</a></p>
<p><span id="more-804"></span></p>
<p><a title="[7] Should you use the this pointer in the constructor?" href="http://www.parashift.com/c++-faq-lite/ctors.html#faq-10.7">[7] 在构造函数中用<tt>this</tt> 指针是否有问题？</a></p>
<p><a title='[8] What is the "Named Constructor Idiom"?' href="http://www.parashift.com/c++-faq-lite/ctors.html#faq-10.8">[8]什么是“名字构造函数”（Named Constructor Idiom）？</a></p>
<p><a title="[9] Does return-by-value mean extra copies and extra overhead?" href="http://www.parashift.com/c++-faq-lite/ctors.html#faq-10.9">[9] “值返回”意味着额外的拷贝吗？</a></p>
<p><a title="[10] Why can't I initialize my static member data in my constructor's initialization list?" href="http://www.parashift.com/c++-faq-lite/ctors.html#faq-10.10">[10] 为什么我们不能在构造函数初始化列表中初始化一个 <tt>static</tt> 成员变量？</a></p>
<p><a title="[11] Why are classes with static data members getting linker errors?" href="http://www.parashift.com/c++-faq-lite/ctors.html#faq-10.11">[11] 为什么一个有 <tt>static</tt> 成员变量的类会有链接错误？</a></p>
<p><a title="[12] What's the &quot;static initialization order fiasco&quot;?" href="http://www.parashift.com/c++-faq-lite/ctors.html#faq-10.12">[12] 什么是“<tt>static</tt> initialization order fiasco”？</a></p>
<p><a title='[13] How do I prevent the "static initialization order fiasco"?' href="http://www.parashift.com/c++-faq-lite/ctors.html#faq-10.13">[13] 我该如果避免 “<tt>static</tt> initialization order fiasco”?</a></p>
<p><a title="[14] Why doesn't the construct-on-first-use idiom use a static object instead of a static pointer?" href="http://www.parashift.com/c++-faq-lite/ctors.html#faq-10.14">[14] 为什么 construct-on-first-use 什么静态变量而不是指针？</a></p>
<p><a title='[15] How do I prevent the "static initialization order fiasco" for my static data members?' href="http://www.parashift.com/c++-faq-lite/ctors.html#faq-10.15">[15] 怎么才能避免静态成员中的“<tt>static</tt> initialization order fiasco” ？</a></p>
<p><a title='[16] Do I need to worry about the "static initialization order fiasco" for variables of built-in/intrinsic types?' href="http://www.parashift.com/c++-faq-lite/ctors.html#faq-10.16">[16] 我是否要为内建类型的“<tt>static</tt> initialization order fiasco”而担心？</a></p>
<p><a title="[17] How can I handle a constructor that fails?" href="http://www.parashift.com/c++-faq-lite/ctors.html#faq-10.17">[17] 如果构造函数出错了怎么办？</a></p>
<p><a title='[18] What is the "Named Parameter Idiom"?' href="http://www.parashift.com/c++-faq-lite/ctors.html#faq-10.18">[18] 什么是“命名参数惯用法”（Named Parameter Idiom）？</a></p>
<p><a title="[19] Why am I getting an error after declaring a Foo object via Foo x(Bar())?" href="http://www.parashift.com/c++-faq-lite/ctors.html#faq-10.19">[19] 为什么我通过<tt>Foo x(Bar())</tt>声明一个<tt>Foo</tt> 对象会得到一个错误？</a></p>
<p align="center"><img alt="image placeholder" >
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/20845.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/18360.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/18024.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/12052.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/12012.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/11466.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
</ul>
</div></div>
<div id="post-ratings-804" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="cca597ecc7">
<img alt="image placeholder" >
<meta itemprop="headline" content="关于C++构造函数的FAQ">
<meta itemprop="description" content="下面是一些关于C++构造函数的FAQ。你能回答得出来吗？你可以点链接查看答案，不过是英文版的。他们来自于C++ FAQ Lite。当然，也有中文版的，只可惜中文版的太老了，只更新到了2001年。在C++ FAQ Lite上还有很多关于其它部分的FAQ，大家可以去看看。

[1] 构造函数是用来干什么的？

[2] List x; 和 List x();有什么不同?

[3] 是否一个类...">
<meta itemprop="datePublished" content="2009-05-13T22:38:36+08:00">
<meta itemprop="dateModified" content="2009-05-13T23:07:45+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/804.html">
<meta itemprop="author" content="陈皓">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/804.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="3">
<meta itemprop="ratingCount" content="4">
</div>
</div>
<div id="post-ratings-804-loading" class="post-ratings-loading">
<img alt="image placeholder" >
 ]]></content>
<pubDate>2009-05-13T22:38:36+08:00</pubDate>
<guid>https://coolshell.cn/articles/804.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ 22条经典的编程引言 ]]></title>
<link>https://coolshell.cn/articles/808.html</link>
<content><![CDATA[ 
<p style="text-align: left;">下面的这些经典的引言来自英文，也许有些我翻译的是不很好，所以，我提供了中英对照，如果有问题，请大家指正。</p>
<p style="text-align: left;"> </p>
<p style="text-align: left;">过早的优化是万恶之源。Premature optimization is the root of all evil!<br>
<em>– Donald Knuth</em></p>
<p style="text-align: left;"> </p>
<p style="text-align: left;">在水里行走和以一个需求规格进行软件开发，有一点是相同的，那就是如果水或需求都被冻住不了，那么行走和软件开发都会变得容易。Walking on water and developing software from a specification are easy if both are frozen<br>
<em>– Edward V Berard</em></p>
<p style="text-align: left;"><em></em></p>
<p style="text-align: left;"><em></em></p>
<p style="text-align: left;"> </p>
<p style="text-align: left;">Hofstadter 定理：“一件事情总是会花费比你预期更多的时间，就算是你已经考虑过本条<em>Hofstadter </em>定理”。It always takes longer than you expect, even when you take into account Hofstadter’s Law.<br>
<em>– Hofstadter’s Law</em></p>
<p><span id="more-808"></span></p>
<p> </p>
<p>有些遇到问题的人总是会说“我知道，我会使用正则表达式”，那么，你现在有两个问题了。（意思是：你本想用正则表达式来解决你已有问题，但实际上你又引入了“正则表达式”的一个新问题）Some people, when confronted with a problem, think “I know, I’ll use regular expressions.” Now they have two problems<br>
<em>– Jamie Zawinski</em></p>
<p><em></em></p>
<p> </p>
<p>调试程序的难度是写代码的两倍。因此，只要你的代码写的尽可能的清楚，那么你在调试代码时就不需要那么地有技巧。Debugging is twice as hard as writing the code in the first place. Therefore, if you write the code as cleverly as possible, you are, by definition, not smart enough to debug it.<br>
<em>– Brian Kernighan</em></p>
<p style="text-align: left;"> </p>
<p>用代码行来衡量开发进度，无异于用重量来衡量制造飞机的进度。Measuring programming progress by lines of code is like measuring aircraft building progress by weight.<br>
<em>– Bill Gates</em></p>
<p style="text-align: left;"> </p>
<p>PHP被一些不合格的业余人员造就成了一个小恶魔；而Perl则是被一些熟练的但不正当的专业人员造就成了一个超级大恶魔。PHP is a minor evil perpetrated and created by incompetent amateurs, whereas Perl is a great and insidious evil, perpetrated by skilled but perverted professionals.<br>
<em>– Jon Ribbens</em></p>
<p style="text-align: left;"> </p>
<p>在两个场合我被问到：“请你告诉我，如果你给机器输入了错误的数字，那么，是否还能得到正确的答案？”我并不能正确领会这类想法。（注意，本引言的作者姓Babbage，这个名字和神父同名，意思是，作者在反问提问的人，你是问我还是向神父祈祷？）On two occasions I have been asked, ‘Pray, Mr. Babbage, if you put into the machine wrong figures, will the right answers come out?’ I am not able rightly to apprehend the kind of confusion of ideas that could provoke such a question.”<br>
<em>– Charles Babbage</em></p>
<p style="text-align: left;"> </p>
<p>在编程的时候，我们一定要想像一下，以后维护我们自己的代码的那个人会成为一个有暴力倾向的疯子，并且，他还知道我们住在哪里？Always code as if the guy who ends up maintaining your code will be a violent psychopath who knows where you live.<br>
<em>– Rick Osborne</em></p>
<p style="text-align: left;"> </p>
<p>现代的编程是“程序员努力建一个更大更傻的程序”和“世界正在尝试创造更多更傻的人”之间的一种竞赛，目前为止，后者是赢家。Programming today is a race between software engineers striving to build bigger and better idiot-proof programs, and the Universe trying to produce bigger and better idiots. So far, the Universe is winning.<br>
<em>– Rich Cook</em></p>
<p style="text-align: left;"> </p>
<p>我才不关于我的代码是否能在你的机器上工作！我们不会给你提供机器。I don’t care if it works on your machine! We are not shipping your machine!<br>
<em>– Ovidiu Platon</em></p>
<p style="text-align: left;"> </p>
<p>我总是希望我的电脑能够像电话一样容易使用；我的这个希望正在变成现实，因为我现在已经不知道怎么去使用我的电话了。I have always wished for my computer to be as easy to use as my telephone; my wish has come true because I can no longer figure out how to use my telephone.<br>
<em>– Bjarne Stroustrup</em></p>
<p style="text-align: left;"> </p>
<p>计算机是一种在人类历史上所有发明中，可以让你比以前更快地犯更多的错误的发明，同样，其也包括了“手枪”和“龙舌兰酒”这两种发明的缺陷。A computer lets you make more mistakes faster than any other invention in human history, with the possible exceptions of handguns and tequila.<br>
<em>– Mitch Ratcliffe</em></p>
<p style="text-align: left;"> </p>
<p>如果调试程序是一种标准的可以铲除BUG的流程，那么，编程就是把他们放进来的流程。If debugging is the process of removing software bugs, then programming must be the process of putting them in.<br>
<em>– E. W. Dijkstra</em></p>
<p style="text-align: left;"> </p>
<p>教一群被BASIC先入为主的学生，什么是好的编程风格简直是一件不可能的事。对于一些有潜力的程序员，他们所受到的智力上的伤害远远超过了重建他们的信心。It is practically impossible to teach good programming style to students that have had prior exposure to BASIC. As potential programmers, they are mentally mutilated beyond hope of regeneration.<br>
<em>– E. W. Dijkstra</em></p>
<p style="text-align: left;"> </p>
<p>理论上来说，理论和实际是一样的。但实际上来说，他们则不是。In theory, theory and practice are the same. In practice, they’re not.<br>
<em>– Unknown</em></p>
<p style="text-align: left;"> </p>
<p>只有两个事情是无穷尽的：宇宙和人类的愚蠢。当然，我现在还不能确定宇宙是无穷尽的。Two things are infinite: the universe and human stupidity; and I’m not sure about the universe.<br>
<em>– Albert Einstein</em></p>
<p style="text-align: left;"> </p>
<p>Perl这种语言就好像是被RSA加密算法加密过的一样。Perl – The only language that looks the same before and after RSA encryption.<br>
<em>– Keith Bostic</em></p>
<p style="text-align: left;"> </p>
<p>我爱“最终期限”，我喜欢“嗖嗖嗖”的声音就像他们在飞一样。I love deadlines. I like the whooshing sound they make as they fly by.<br>
<em>– Douglas Adams</em></p>
<p style="text-align: left;"> </p>
<p>说Java好的是因为它跨平台就像好像说肛交好是因为其可以适用于一切性别。Saying that Java is good because it works on all platforms is like saying anal sex is good because it works on all genders<br>
<em>– Unknown</em></p>
<p style="text-align: left;"> </p>
<p>XML就像是一种强暴——如果它不能解决你的问题，那只能说明你没有用好它。XML is like violence – if it doesn’t solve your problems, you are not using enough of it.<br>
<em>– Unknown</em></p>
<p style="text-align: left;"> </p>
<p>爱因期坦说，自然界中的一切一定会有一个简单的解释，因为上帝并不是反复无常和独裁的。当然，不会有什么信仰能程序员像爱因期坦那样感到舒服。Einstein argued that there must be simplified explanations of nature, because God is not capricious or arbitrary. No such faith comforts the software engineer.<br>
<em>– Fred Brooks</em></p>
<p style="text-align: left;">文章：<a href="http://www.storm-consultancy.com/blog/other/classic-programming-quotes/" target="_blank">来源</a></p>
<p></p>
<p align="center"><img alt="image placeholder" >
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/2117.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/873.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/2036.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/1850.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/3549.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/5202.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
</ul>
</div></div>
<div id="post-ratings-808" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="ab5622d957">
<img alt="image placeholder" >
<meta itemprop="headline" content="22条经典的编程引言">
<meta itemprop="description" content="下面的这些经典的引言来自英文，也许有些我翻译的是不很好，所以，我提供了中英对照，如果有问题，请大家指正。
 

过早的优化是万恶之源。Premature optimization is the root of all evil!
- Donald Knuth
 

在水里行走和以一个需求规格进行软件开发，有一点是相同的，那就是如果水或需求都被冻住不了，那么行走和软件开发都会变得容易。...">
<meta itemprop="datePublished" content="2009-05-15T12:25:49+08:00">
<meta itemprop="dateModified" content="2009-06-01T17:02:37+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/808.html">
<meta itemprop="author" content="陈皓">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/808.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="4.25">
<meta itemprop="ratingCount" content="16">
</div>
</div>
<div id="post-ratings-808-loading" class="post-ratings-loading">
<img alt="image placeholder" >
 ]]></content>
<pubDate>2009-05-15T12:25:49+08:00</pubDate>
<guid>https://coolshell.cn/articles/808.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ Linux磁盘使用命令du的改进 ]]></title>
<link>https://coolshell.cn/articles/822.html</link>
<content><![CDATA[ 
<p>我们知道，在Linux下，如果你想知道当前目录下，每个文件或子目录的尺寸，你可以使用du命令来完成这一动作。如：</p>
<p></p>
<pre data-enlighter-language="shell" class="EnlighterJSRAW">$  du -sh *
</pre>
<p>这个命令可以以K，M，G的方式显示每个文件和子目录的大小。我们把这种方式叫做，human-readable，也就是可以让人读的方式，如下所示：</p>
<pre>8.4G Desktop
2.6G Documents
12K keys
12M Pictures
536K scripts</pre>
<p><span id="more-822"></span><br>
但是，很可惜的是，我们的du并没有提供相关的排序功能，所以，如果在human-readable下，也就是-h参数下，我们很难使用sort命令来排序。因为那变成了字符串排序，小数点，数字的位数，还有单位K，M，G都会让排序变得混乱。那么，我们如何才能即有human-readble这种功能，还能有排序呢。我们得借用一些脚本语言来处理了。</p>
<p>下面是使用了Perl来达到这一功能：</p>
<p></p>
<pre data-enlighter-language="shell" class="EnlighterJSRAW">du -sk * | sort -n |       #以 K 字节的方式排序
perl -ne '                 #使用Perl来处理 K M 和 G 单位
  ($s,$f)=split(m{\t});    #把 尺寸/文件名 分开
  for (qw(K M G)) {        #以尺寸单位循环
     if($s&lt;1024) {         #如果 尺寸&lt;1024 那么就输出
       printf("%.1f",$s);  #显示文件尺寸
       print "$_\t$f";     #显示文件名
       last                #换行
     };
     $s=$s/1024            #除1024然后进入下一个尺寸单位
  }
'
</pre>
<p align="center"><img alt="image placeholder" >
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/19219.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/18654.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/18360.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/17998.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/17416.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/17200.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
</ul>
</div></div>
<div id="post-ratings-822" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="f9dc68e13c">
<img alt="image placeholder" >
<meta itemprop="headline" content="Linux磁盘使用命令du的改进">
<meta itemprop="description" content="我们知道，在Linux下，如果你想知道当前目录下，每个文件或子目录的尺寸，你可以使用du命令来完成这一动作。如：

[shell]
$  du -sh *
[/shell]

这个命令可以以K，M，G的方式显示每个文件和子目录的大小。我们把这种方式叫做，human-readable，也就是可以让人读的方式，如下所示：


8.4G Desktop
2.6G Documents...">
<meta itemprop="datePublished" content="2009-05-15T16:41:29+08:00">
<meta itemprop="dateModified" content="2009-05-15T16:47:14+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/822.html">
<meta itemprop="author" content="陈皓">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/822.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="2.6">
<meta itemprop="ratingCount" content="5">
</div>
</div>
<div id="post-ratings-822-loading" class="post-ratings-loading">
<img alt="image placeholder" >
 ]]></content>
<pubDate>2009-05-15T16:41:29+08:00</pubDate>
<guid>https://coolshell.cn/articles/822.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ 语言的歧义 ]]></title>
<link>https://coolshell.cn/articles/830.html</link>
<content><![CDATA[ 
<p>语言是人与人相互沟通的途径，而计算机语言则是人和计算机沟通的途径。就算是任何再完美的自然语言都会有歧义，但是又是什么让人和计算计算机间产生了歧义呢？<br>
下面这篇文章来自Gowri Kumar的<a href="http://www.gowrikumar.com/c/index.html">Puzzle C</a>一文。我做了一些整理，挑选了其中的一些问题，并在之后配上相应的答案(这些答案是我加的，如果需要原版的答案可以直接和本文作者Gowri Kumar联系，作者的联系方式可以从<a href="http://www.gowrikumar.com/contact.html">这里</a>得到)。</p>
<h3>puzzle 1</h3>
<p>此段程序的作者希望输出数组中的所有元素，但是他却没有得到他想要的结果，是什么让程序员和计算机产生歧义？</p>
<p></p>
<pre data-enlighter-language="c" class="EnlighterJSRAW">#include &lt;stdio.h&gt;
#define TOTAL_ELEMENTS (sizeof(array) / sizeof(array[0]))
int array[] = {23,34,12,17,204,99,16};
int main()
{
    int d;

    for(d=-1;d &lt;= (TOTAL_ELEMENTS-2);d++)
        printf("%d\n",array[d+1]);

    return 0;
}
</pre>
<p><span id="more-830"></span></p>
<p><strong>解答：</strong><br>
运行上面的程序，结果是什么都没有输出，导致这个结果的原因是sizeof的返回值是一个unsinged int，为此在比较int d 和TOTAL_ELEMENTS两个值都被转换成了unsigned int来进行比较，这样就导致-1被转换成一个非常大的值，以至于for循环不满足条件。因此，如果程序员不能理解sizeof操作符返回的是一个unsigned int的话，就会产生类似如上的人机歧义。</p>
<h3>puzzle 2</h3>
<p>看上去非常完美的程序，是什么导致了编程程序不通过？</p>
<p></p>
<pre data-enlighter-language="c" class="EnlighterJSRAW">#include &lt;stdio.h&gt;

void OS_Solaris_print()
{
    printf("Solaris - Sun Microsystems\n");
}

void OS_Windows_print()
{
    printf("Windows - Microsoft\n");
}

void OS_HP-UX_print()
{
    printf("HP-UX - Hewlett Packard\n");
}

int main()
{
    int num;
    printf("Enter the number (1-3):\n");
    scanf("%d",&amp;num);

    switch(num)
    {
        case 1:
            OS_Solaris_print();
            break;
        case 2:
            OS_Windows_print();
            break;
        case 3:
            OS_HP-UX_print();
            break;
        default:
            printf("Hmm! only 1-3 :-)\n");
        break;
    }
    return 0;
}
</pre>
<p><strong>解答：</strong><br>
程序员要以计算机的语言进行思考，不上上面那段程序导致的结果不止是歧义这么简单，而直接的结果是，导致计算机”听不懂”你在说什么。导致计算机听不懂的原因是HP-UX中的’-‘是减号？还是其他什么？</p>
<h3>puzzle 3</h3>
<p>下面这段程序会输出什么，为什么？</p>
<p></p>
<pre data-enlighter-language="c" class="EnlighterJSRAW">enum {false,true};

int main()
{
    int i=1;
    do
    {
        printf("%d\n",i);
        i++;

        if(i &lt; 15)
            continue;
    }while(false);

    return 0;
}
</pre>
<p><strong>解答：</strong><br>
1到14？不对，结果是1，因为continue的含义是不执行循环体之后语义，而直接到循环点。明显while(false)不属于循环体。导致这段程序的歧义就是：程序员没有完全理解计算机语言中continue的含义。</p>
<h3>puzzle 4</h3>
<p>下面这段程序的输出结果是：</p>
<p></p>
<pre data-enlighter-language="c" class="EnlighterJSRAW">#include &lt;stdio.h&gt;
#define f(a,b) a##b
#define g(a)   #a
#define h(a) g(a)

int main()
{
        printf("%s\n", h(f(1,2)));
        printf("%s\n", g(f(1,2)));
        return 0;
}
</pre>
<p>当然，你首先要了解##和#的用法，如果不懂的话，本题你可以直接跳过。<br>
<strong>解答：</strong><br>
看到这段程序你可能会认为，这两个printf输出的同一个结果，可是答案却非如此，本题的输出是12和f(1,2)，为什么会这样呢？因为这是宏，宏的解开不象函数执行，由里带外。</p>
<h3>puzzle 5</h3>
<p>下面这段程序的输出是什么</p>
<blockquote><p>#include &lt;stdio.h&gt;<br>
int main()<br>
{<br>
int a=10;<br>
switch(a)<br>
{<br>
case ‘1’:<br>
printf(“ONE\n”);<br>
break;<br>
case ‘2’:<br>
printf(“TWO\n”);<br>
break;<br>
defau1t:<br>
printf(“NONE\n”);<br>
｝<br>
return 0;<br>
}</p></blockquote>
<p><strong>解答：</strong><br>
本题我故意将语法敏感插件去掉，为了就是能得到更好的效果，这道题又是什么让歧义再次发生，如果不仔细你可能永远都找不到答案，如果真到的到了那个时候，你是否会因为对default语义的怀疑，而不敢再使用default？本题的歧义点就是default，看好了是defau1t而不是default，不是关键字！为什么计算能”听懂”这样的defau1t，算然它听懂了，但它的理解却是标号”defau1t”</p>
<h3>puzzle 6</h3>
<p>下面这段程序的输出什么？</p>
<p></p>
<pre data-enlighter-language="c" class="EnlighterJSRAW">#include &lt;stdio.h&gt;

int main()
{
    float f=0.0f;
    int i;

    for(i=0;i&lt;10;i++)
        f = f + 0.1f;

    if(f == 1.0f)
        printf("f is 1.0 \n");
    else
        printf("f is NOT 1.0 \n");

    return 0;
}
</pre>
<p><strong>解答：</strong><br>
你是否似曾相识？不错这个问题在酷壳之前的博文《<a href="https://coolshell.cn/articles/688.html">你能做对下面这些JavaScript的题吗？</a>》中曾今提到过，不要让两个浮点数相比较。所以本题的答案是”f is NOT 1.0″，如果你真想比较两个浮点数时，你应该按一定精度来比较，比如你一定要在本题中做比较那么你应该这么做if( (f – 1.0f)&lt;0.1 )</p>
<h3>puzzle 7</h3>
<p>下面两个函数是否具有相同的原型？</p>
<p></p>
<pre data-enlighter-language="c" class="EnlighterJSRAW">int foobar(void);
int foobar();
</pre>
<p>下面这两段程序将会帮你找到上题的答案<br>
程序1</p>
<p></p>
<pre data-enlighter-language="c" class="EnlighterJSRAW">#include &lt;stdio.h&gt;
void foobar1(void)
{
    printf("In foobar1\n");
}

void foobar2()
{
    printf("In foobar2\n");
}

int main()
{
    char ch = 'a';

    foobar1();
    foobar2(33, ch);

     return 0;
}
</pre>
<p>程序2</p>
<p></p>
<pre data-enlighter-language="c" class="EnlighterJSRAW">#include "stdio.h"
void foobar1(void)
{
    printf("In foobar1\n");
}

void foobar2()
{
    printf("In foobar2\n");
}

int main()
{
    char ch = 'a';

    foobar1(33,ch);
    foobar2();

    return 0;
}
</pre>
<p><strong>解答</strong><br>
程序片段一，没有问题，程序片段二编译报错，这两个程序告诉我们，foobar1(void)和foobar2()是有不同原型的的。我们可以在《ISO/IEC 9899》的C语言规范找到下面两段关于函数声明的描述</p>
<blockquote><p>10.The special case of an unnamed parameter of type void as the only item in the list specifies that the function has no parameters</p></blockquote>
<blockquote><p>14.An identifier list declares only the identifiers of the parameters of the function. An empty list in a function declarator that is part of a definition of that function specifies that the function has no parameters. The empty list in a function declarator that is not part of a definition of that function specifies that no information about the number or types of the parameters is supplied.124)</p></blockquote>
<p>上面两段话的意思就是：foobar1(void)是没有参数，而foobar1()等于forbar1(…)等于参数类型未知。</p>
<p><strong>总结</strong><br>
看到这些C语言的题目，不禁让我想起了巴别塔，计算机语言作为如此严谨的语言都有可能带来如此多的歧义，更何况自然语言，更何况相互不通的自然语言。要杜绝歧义，我们就必须清晰的了解计算机语言每一个指令的语义。就如同人类，人类要和平就要相互了解各自的文化。愿世界上人们清晰了解别人的语言的语义，愿世界不再因为文化的不同而战争，原世界和平。</p>
<p align="center"><img alt="image placeholder" >
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/20845.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/18360.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/18024.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/12052.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/12012.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/11466.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
</ul>
</div></div>
<div id="post-ratings-830" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="c006bb7c66">
<img alt="image placeholder" >
<meta itemprop="headline" content="语言的歧义">
<meta itemprop="description" content="语言是人与人相互沟通的途径，而计算机语言则是人和计算机沟通的途径。就算是任何再完美的自然语言都会有歧义，但是又是什么让人和计算计算机间产生了歧义呢？
下面这篇文章来自Gowri Kumar的Puzzle C一文。我做了一些整理，挑选了其中的一些问题，并在之后配上相应的答案(这些答案是我加的，如果需要原版的答案可以直接和本文作者Gowri Kumar联系，作者的联系方式可以从这里得到)。
puz...">
<meta itemprop="datePublished" content="2009-05-17T15:57:59+08:00">
<meta itemprop="dateModified" content="2011-12-06T10:49:01+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/830.html">
<meta itemprop="author" content="Neo">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/830.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="4.4">
<meta itemprop="ratingCount" content="25">
</div>
</div>
<div id="post-ratings-830-loading" class="post-ratings-loading">
<img alt="image placeholder" >
 ]]></content>
<pubDate>2009-05-17T15:57:59+08:00</pubDate>
<guid>https://coolshell.cn/articles/830.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ Web设计的速查卡 ]]></title>
<link>https://coolshell.cn/articles/870.html</link>
<content><![CDATA[ 
<p>速查卡不仅仅可能帮助我们记住一些重要的东西，而且可以放在手边，当我们需要的时候，可以很快地查找。</p>
<p>在本篇文章中，你可以看到28个相当不错的关于Web设计的速查卡，它们分别是关于：<strong>Photoshop, Dreamweaver, 颜色, 排版,</strong>和<strong> 其它Web设计相关的。</strong>他们都是一页纸，可以方便你很快地打印出来。</p>
<h3>Photoshop</h3>
<div id="ez-toc-container" class="ez-toc-v2_0_17 counter-hierarchy counter-decimal ez-toc-grey">
<div class="ez-toc-title-container">
<p class="ez-toc-title">目录</p>
<span class="ez-toc-title-toggle"></span>
</div>
<nav><ul class="ez-toc-list ez-toc-list-level-1">
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-1" href="#Photoshop_CS3_%E5%BF%AB%E6%8D%B7%E9%94%AE%E9%80%9F%E6%9F%A5%E5%8D%A1" title="Photoshop CS3 快捷键速查卡">Photoshop CS3 快捷键速查卡</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-2" href="#%E5%85%B3%E4%BA%8E%E8%B0%83%E8%89%B2%E6%9D%BF%E7%9A%84%E4%B8%80%E4%BA%9B%E7%83%AD%E9%94%AE_HTML" title="关于调色板的一些热键 (HTML)">关于调色板的一些热键 (HTML)</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-3" href="#Photoshop_%E5%B7%A5%E5%85%B7%E6%A0%8F%E9%80%9F%E6%9F%A5_HTML" title="Photoshop 工具栏速查 (HTML)">Photoshop 工具栏速查 (HTML)</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-4" href="#Photoshop_%E5%A5%97%E7%B4%A2%E5%B7%A5%E5%85%B7%E9%80%9F%E6%9F%A5" title="Photoshop 套索工具速查">Photoshop 套索工具速查</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-5" href="#Photoshop_%E7%AC%94%E5%88%B7%E5%B7%A5%E4%BD%9C%E9%80%9F%E6%9F%A5" title="Photoshop 笔刷工作速查">Photoshop 笔刷工作速查</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-6" href="#RGB_%E5%8D%81%E5%85%AD%E8%BF%9B%E5%88%B6%E8%A1%A8" title="RGB 十六进制表">RGB 十六进制表</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-7" href="#%E9%A2%9C%E8%89%B2%E9%80%9F%E6%9F%A5_PDF" title="颜色速查 (PDF)">颜色速查 (PDF)</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-8" href="#Web%E8%AE%BE%E8%AE%A1%E9%A2%9C%E8%89%B2" title="Web设计颜色">Web设计颜色</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-9" href="#Web_%E5%AE%89%E5%85%A8%E9%A2%9C%E8%89%B2%E8%A1%A8_HTML" title="Web 安全颜色表 (HTML)">Web 安全颜色表 (HTML)</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-10" href="#%E5%8D%81%E5%85%AD%E8%BF%9B%E5%88%B6%E9%A2%9C%E8%89%B2%E8%A1%A8_HTML" title="十六进制颜色表 (HTML)">十六进制颜色表 (HTML)</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-11" href="#_%E6%B5%8F%E8%A7%88%E5%99%A8%E9%A2%9C%E8%89%B2%E8%A1%A8_HTML" title=" 浏览器颜色表 (HTML)"> 浏览器颜色表 (HTML)</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-12" href="#VisiBone_Font_Card" title="VisiBone Font Card">VisiBone Font Card</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-13" href="#%E5%B8%B8%E7%94%A8%E5%AD%97%E4%BD%93%E8%A1%A8_HTML" title="常用字体表  (HTML)">常用字体表  (HTML)</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-14" href="#%E6%B7%B7%E5%90%88%E5%AD%97%E4%BD%93_PDF" title="混合字体 (PDF)">混合字体 (PDF)</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-15" href="#Points_%E5%92%8CPixels%E8%BF%91%E4%BC%BC%E8%BD%AC%E6%8D%A2%E8%A1%A8_HTML" title="Points 和Pixels近似转换表 (HTML)">Points 和Pixels近似转换表 (HTML)</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-16" href="#Megapixels_%E8%A1%A8" title="Megapixels 表">Megapixels 表</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-17" href="#Blueprint_CSS_%E9%80%9F%E6%9F%A5%E5%8D%A1" title="Blueprint CSS 速查卡">Blueprint CSS 速查卡</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-18" href="#YUI_Library_CSS_Reset_Base_Fonts_and_Grids_PDF" title="YUI Library: CSS Reset, Base, Fonts, and Grids (PDF)">YUI Library: CSS Reset, Base, Fonts, and Grids (PDF)</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-19" href="#CSS_%E9%80%9F%E6%9F%A5%E5%8D%A1_PDF" title="CSS 速查卡 (PDF)">CSS 速查卡 (PDF)</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-20" href="#Apples_CSS_%E9%80%9F%E6%9F%A5%E5%8D%A1_Mac_Dashboard_Widget" title="Apple’s CSS 速查卡 (Mac Dashboard Widget)">Apple’s CSS 速查卡 (Mac Dashboard Widget)</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-21" href="#HTML_XHTML_%E6%A0%87%E8%AF%86%E9%80%9F%E6%9F%A5_PDF" title="HTML &amp; XHTML 标识速查 (PDF)">HTML &amp; XHTML 标识速查 (PDF)</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-22" href="#HTMLXHTML_%E7%89%B9%E6%AE%8A%E5%AD%97%E7%AC%A6%E8%A1%A8" title="HTML/XHTML 特殊字符表">HTML/XHTML 特殊字符表</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-23" href="#XHTML_%E7%89%B9%E6%AE%8A%E5%AD%97%E7%AC%A6_HTML" title="XHTML 特殊字符 (HTML)">XHTML 特殊字符 (HTML)</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-24" href="#Dreamweaver_%E5%BF%AB%E9%80%9F%E7%B4%A2%E5%BC%95_PDF" title="Dreamweaver 快速索引 (PDF)">Dreamweaver 快速索引 (PDF)</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-25" href="#Dreamweaver_CS3_for_Mac_Quick_Reference_Card_PDF" title="Dreamweaver CS3 for Mac Quick Reference Card (PDF)">Dreamweaver CS3 for Mac Quick Reference Card (PDF)</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-26" href="#Adobe_Illustrator_CS2_%E7%83%AD%E9%94%AE-_MAC" title="Adobe Illustrator CS2 热键– MAC">Adobe Illustrator CS2 热键– MAC</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-27" href="#%E6%B5%8F%E8%A7%88%E5%99%A8%E5%85%BC%E5%AE%B9%E6%80%A7%E8%A1%A8_HTML" title="浏览器兼容性表 (HTML)">浏览器兼容性表 (HTML)</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-28" href="#W3C_DOM_%E5%85%BC%E5%AE%B9%E6%80%A7%E8%A1%A8_HTML" title="W3C DOM 兼容性表 (HTML)">W3C DOM 兼容性表 (HTML)</a></li>
</ul></nav>
</div>
<h4>
<span class="ez-toc-section" id="Photoshop_CS3_%E5%BF%AB%E6%8D%B7%E9%94%AE%E9%80%9F%E6%9F%A5%E5%8D%A1"></span><a title="Trevor Morris Photographics - Adobe Photoshop Keyboard Shortcuts" href="http://morris-photographics.com/photoshop/shortcuts/#pscs3">Photoshop CS3 快捷键速查卡</a><span class="ez-toc-section-end"></span>
</h4>
<p><img alt="image placeholder" >
<p><span class="figure-caption"><span id="more-870"></span></span></p>
<p> </p>
<h4>
<span class="ez-toc-section" id="%E5%85%B3%E4%BA%8E%E8%B0%83%E8%89%B2%E6%9D%BF%E7%9A%84%E4%B8%80%E4%BA%9B%E7%83%AD%E9%94%AE_HTML"></span><a title="Adobe - Keys for using the Layers palette" href="http://livedocs.adobe.com/en_US/Photoshop/10.0/help.html?content=WS7D245964-27B4-403e-82D5-DDD1CB19A82B.html">关于调色板的一些热键</a> (HTML)<span class="ez-toc-section-end"></span>
</h4>
<p><img alt="image placeholder" >
<h4>
<span class="ez-toc-section" id="Photoshop_%E5%B7%A5%E5%85%B7%E6%A0%8F%E9%80%9F%E6%9F%A5_HTML"></span><a href="http://simplephotoshop.com/photoshop_tools/index.htm">Photoshop 工具栏速查</a> (HTML)<span class="ez-toc-section-end"></span>
</h4>
<p><img alt="image placeholder" >
<h4>
<span class="ez-toc-section" id="Photoshop_%E5%A5%97%E7%B4%A2%E5%B7%A5%E5%85%B7%E9%80%9F%E6%9F%A5"></span><a title="CreativeIQ - Staging: Photoshop Lasso Tool Cheatsheet." href="http://www.creativetechs.com/iq-staging/photoshop_lasso_tool_cheatshee.html">Photoshop 套索工具速查</a><span class="ez-toc-section-end"></span>
</h4>
<p><img alt="image placeholder" >
<h4>
<span class="ez-toc-section" id="Photoshop_%E7%AC%94%E5%88%B7%E5%B7%A5%E4%BD%9C%E9%80%9F%E6%9F%A5"></span><a title="CreativeTechs - Photoshop Brush Tool Cheatsheet" href="http://www.creativetechs.com/iq/photoshop_brush_tool_cheatsheet.html">Photoshop 笔刷工作速查</a><span class="ez-toc-section-end"></span>
</h4>
<p><img alt="image placeholder" >
<h3> </h3>
<h3>颜色</h3>
<h4>
<span class="ez-toc-section" id="RGB_%E5%8D%81%E5%85%AD%E8%BF%9B%E5%88%B6%E8%A1%A8"></span><a title="Added Bytes - RGB Hex Colour Chart" href="http://www.addedbytes.com/cheat-sheets/colour-chart/">RGB 十六进制表</a><span class="ez-toc-section-end"></span>
</h4>
<p><img alt="image placeholder" >
<h4>
<span class="ez-toc-section" id="%E9%A2%9C%E8%89%B2%E9%80%9F%E6%9F%A5_PDF"></span><a href="http://www.veign.com/downloads/guides/qrg0006.pdf">颜色速查</a> (PDF)<span class="ez-toc-section-end"></span>
</h4>
<p><img alt="image placeholder" >
<h4>
<span class="ez-toc-section" id="Web%E8%AE%BE%E8%AE%A1%E9%A2%9C%E8%89%B2"></span><a title="Visibone - Web Designer's Color Reference Hexagon Mouse Pad" href="http://www.visibone.com/color/hexagon3x.html">Web设计颜色</a><span class="ez-toc-section-end"></span>
</h4>
<p><img alt="image placeholder" >
<h4>
<span class="ez-toc-section" id="Web_%E5%AE%89%E5%85%A8%E9%A2%9C%E8%89%B2%E8%A1%A8_HTML"></span><a title="Page Tutor - 216 color chart" href="http://www.pagetutor.com/common/bgcolors216.html">Web 安全颜色表</a> (HTML)<span class="ez-toc-section-end"></span>
</h4>
<p><img alt="image placeholder" >
<h4>
<span class="ez-toc-section" id="%E5%8D%81%E5%85%AD%E8%BF%9B%E5%88%B6%E9%A2%9C%E8%89%B2%E8%A1%A8_HTML"></span><a href="http://www.funky-chickens.com/hex.html">十六进制颜色表</a> (HTML)<span class="ez-toc-section-end"></span>
</h4>
<p><img alt="image placeholder" >
<h4>
<span class="ez-toc-section" id="_%E6%B5%8F%E8%A7%88%E5%99%A8%E9%A2%9C%E8%89%B2%E8%A1%A8_HTML"></span><a href="http://www.cookwood.com/html4_4e/examples/appendices/colorcharthex.html"> 浏览器颜色表</a> (HTML)<span class="ez-toc-section-end"></span>
</h4>
<p><img alt="image placeholder" >
<h3> </h3>
<h3>排版</h3>
<h4>
<span class="ez-toc-section" id="VisiBone_Font_Card"></span><a title="Visibone - VisiBone Font Card" href="http://www.visibone.com/font/">VisiBone Font Card</a><span class="ez-toc-section-end"></span>
</h4>
<p><img alt="image placeholder" >
<h4>
<span class="ez-toc-section" id="%E5%B8%B8%E7%94%A8%E5%AD%97%E4%BD%93%E8%A1%A8_HTML"></span><a href="http://www.ampsoft.net/webdesign-l/WindowsMacFonts.html">常用字体表 </a> (HTML)<span class="ez-toc-section-end"></span>
</h4>
<p><img alt="image placeholder" >
<h4>
<span class="ez-toc-section" id="%E6%B7%B7%E5%90%88%E5%AD%97%E4%BD%93_PDF"></span><a title="PDF Download - Mixing Typefaces" href="http://www.as8.it/handouts/mixing-typefaces_U&amp;lc1992.pdf">混合字体</a> (PDF)<span class="ez-toc-section-end"></span>
</h4>
<p><img alt="image placeholder" >
<h3>单元/尺寸</h3>
<h4>
<span class="ez-toc-section" id="Points_%E5%92%8CPixels%E8%BF%91%E4%BC%BC%E8%BD%AC%E6%8D%A2%E8%A1%A8_HTML"></span><a title="Reed Design - Approximate Conversion from Points to Pixels" href="http://www.reeddesign.co.uk/test/points-pixels.html">Points 和Pixels近似转换表</a> (HTML)<span class="ez-toc-section-end"></span>
</h4>
<p><img alt="image placeholder" >
<h4>
<span class="ez-toc-section" id="Megapixels_%E8%A1%A8"></span><a title="Design215 - megapixels comparison and maximum print size charts" href="http://www.design215.com/toolbox/megapixels.php">Megapixels 表</a><span class="ez-toc-section-end"></span>
</h4>
<p><img alt="image placeholder" >
<h3>CSS/CSS 框架</h3>
<h4>
<span class="ez-toc-section" id="Blueprint_CSS_%E9%80%9F%E6%9F%A5%E5%8D%A1"></span><a title="The Montoya Herald - Blueprint CSS Cheat Sheet" href="http://www.christianmontoya.com/2007/11/12/blueprint-css-cheat-sheet/">Blueprint CSS 速查卡</a><span class="ez-toc-section-end"></span>
</h4>
<p><img alt="image placeholder" >
<h4>
<span class="ez-toc-section" id="YUI_Library_CSS_Reset_Base_Fonts_and_Grids_PDF"></span><a title="YUI Library - CSS Reset, Base, Fonts, and Grids" href="http://yuiblog.com/assets/pdf/cheatsheets/css.pdf">YUI Library: CSS Reset, Base, Fonts, and Grids</a> (PDF)<span class="ez-toc-section-end"></span>
</h4>
<p><img alt="image placeholder" >
<h4>
<span class="ez-toc-section" id="CSS_%E9%80%9F%E6%9F%A5%E5%8D%A1_PDF"></span><a href="http://www.eddiewelker.com/wp-content/uploads/2007/09/csscheatsheet.pdf">CSS 速查卡</a> (PDF)<span class="ez-toc-section-end"></span>
</h4>
<p><img alt="image placeholder" >
<h4>
<span class="ez-toc-section" id="Apples_CSS_%E9%80%9F%E6%9F%A5%E5%8D%A1_Mac_Dashboard_Widget"></span><a title="Apple Dashboard Widgets - CSS Cheat Sheet" href="https://www.apple.com/downloads/dashboard/developer/csscheatsheet.html">Apple’s CSS 速查卡</a> (Mac Dashboard Widget)<span class="ez-toc-section-end"></span>
</h4>
<p><img alt="image placeholder" >
<h3>HTML/XHTML</h3>
<h4>
<span class="ez-toc-section" id="HTML_XHTML_%E6%A0%87%E8%AF%86%E9%80%9F%E6%9F%A5_PDF"></span><a href="http://home.uchicago.edu/~gan/file/html.pdf">HTML &amp; XHTML 标识速查</a> (PDF)<span class="ez-toc-section-end"></span>
</h4>
<p><img alt="image placeholder" >
<h4>
<span class="ez-toc-section" id="HTMLXHTML_%E7%89%B9%E6%AE%8A%E5%AD%97%E7%AC%A6%E8%A1%A8"></span><a href="http://www.html.su/entities.html">HTML/XHTML 特殊字符表</a><span class="ez-toc-section-end"></span>
</h4>
<p><img alt="image placeholder" >
<h4>
<span class="ez-toc-section" id="XHTML_%E7%89%B9%E6%AE%8A%E5%AD%97%E7%AC%A6_HTML"></span><a href="http://www.digitalmediaminute.com/reference/entity/index.php">XHTML 特殊字符</a> (HTML)<span class="ez-toc-section-end"></span>
</h4>
<p><img alt="image placeholder" >
<h3>Dreamweaver</h3>
<h4>
<span class="ez-toc-section" id="Dreamweaver_%E5%BF%AB%E9%80%9F%E7%B4%A2%E5%BC%95_PDF"></span><a href="http://www.uwsp.edu/it/ApplicationSupport/appSuppDocsImages/referenceGuides/dreamweaver-quick-reference-cs3.pdf">Dreamweaver 快速索引</a> (PDF)<span class="ez-toc-section-end"></span>
</h4>
<p><img alt="image placeholder" >
<h4>
<span class="ez-toc-section" id="Dreamweaver_CS3_for_Mac_Quick_Reference_Card_PDF"></span><a href="http://daviddiskin.com/documents/Dreamweaver%20CS3%20for%20Mac.pdf">Dreamweaver CS3 for Mac Quick Reference Card</a> (PDF)<span class="ez-toc-section-end"></span>
</h4>
<p><img alt="image placeholder" >
<h3>Illustrator</h3>
<h4>
<span class="ez-toc-section" id="Adobe_Illustrator_CS2_%E7%83%AD%E9%94%AE-_MAC"></span><a href="http://www.nobledesktop.com/shortcuts-illustratorcs2-mac.html">Adobe Illustrator CS2 热键– MAC</a><span class="ez-toc-section-end"></span>
</h4>
<p><img alt="image placeholder" >
<h3>Browsers</h3>
<h4>
<span class="ez-toc-section" id="%E6%B5%8F%E8%A7%88%E5%99%A8%E5%85%BC%E5%AE%B9%E6%80%A7%E8%A1%A8_HTML"></span><a href="http://centricle.com/ref/css/filters/?highlight_columns=true">浏览器兼容性表</a> (HTML)<span class="ez-toc-section-end"></span>
</h4>
<p><img alt="image placeholder" >
<h4>
<span class="ez-toc-section" id="W3C_DOM_%E5%85%BC%E5%AE%B9%E6%80%A7%E8%A1%A8_HTML"></span><a href="http://www.quirksmode.org/dom/compatibility.html#t00">W3C DOM 兼容性表</a> (HTML)<span class="ez-toc-section-end"></span>
</h4>
<p><img alt="image placeholder" >
<p>文章：<a href="http://sixrevisions.com/resources/cheat_sheets_for_web_designers/" target="_blank">来源</a></p>
<p align="center"><img alt="image placeholder" >
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/17634.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/9666.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/6840.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/3903.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/3684.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/3063.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
</ul>
</div></div>
<div id="post-ratings-870" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="f7aa1127dc">
<img alt="image placeholder" >
<meta itemprop="headline" content="Web设计的速查卡">
<meta itemprop="description" content="速查卡不仅仅可能帮助我们记住一些重要的东西，而且可以放在手边，当我们需要的时候，可以很快地查找。

在本篇文章中，你可以看到28个相当不错的关于Web设计的速查卡，它们分别是关于：Photoshop, Dreamweaver, 颜色, 排版,和 其它Web设计相关的。他们都是一页纸，可以方便你很快地打印出来。
Photoshop
Photoshop CS3 快捷键速查卡
Download...">
<meta itemprop="datePublished" content="2009-05-19T21:43:19+08:00">
<meta itemprop="dateModified" content="2009-05-19T21:43:19+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/870.html">
<meta itemprop="author" content="陈皓">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/870.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="4">
<meta itemprop="ratingCount" content="8">
</div>
</div>
<div id="post-ratings-870-loading" class="post-ratings-loading">
<img alt="image placeholder" >
 ]]></content>
<pubDate>2009-05-19T21:43:19+08:00</pubDate>
<guid>https://coolshell.cn/articles/870.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ 谁说C语言很简单？ ]]></title>
<link>https://coolshell.cn/articles/873.html</link>
<content><![CDATA[ 
<p class="li-enumerate">前两天，Neo写了一篇《<a href="https://coolshell.cn/articles/830.html">语言的歧义</a>》其使用C语言讨论了一些语言的歧义。大家应该也顺便了解了一下C语言中的很多不可思异的东西，可能也是你从未注意到的东西。</p>
<p class="li-enumerate">是的，C语言并不简单，让我们来看看下面这些示例：</p>
<ol class="enumerate" type="1">
<li class="li-enumerate">
<strong>为什么下面的代码会返回0？(这题应该很简单吧)<br>
</strong>
<pre class="verbatim"><span style="color: #0000ff;">  int x;
  return x == (1 &amp;&amp; x);
</span></pre>
<p>本题主要是关于C/C++中变量初始化的问题。</p>
</li>
<p><span id="more-873"></span></p>
<li class="li-enumerate">
<strong>为什么下面的代码会返回0而不是-1？</strong>
<pre class="verbatim"><span style="color: #0000ff;"> return ((1 - sizeof(int)) &gt;&gt; 32);
</span></pre>
<p>答案：<tt>sizeof</tt> 是一个unsigned的类型，所以……</p>
</li>
<li class="li-enumerate">
<strong>代码作用域是一件很诡异的事，下面这个函数返回值是什么？<br>
</strong>
<pre class="verbatim"><span style="color: #0000ff;">int x = 5;
int f() {
  int x = 3;
  {
    extern int x;
    return x;
  }
}
</span></pre>
<p>答案：5</p>
</li>
<li class="li-enumerate">
<strong>函数和函数指针可以相互转换。下面的语句哪些是合法的？<br>
</strong>
<pre class="verbatim"><span style="color: #0000ff;">int (*pf)(void);
int f(void)
{

   pf = &amp;f; <span style="color: #008000;">// 没问题</span>
   pf = ***f; <span style="color: #008000;">// 取址？</span>
   pf(); <span style="color: #008000;">// 函数指针可以调用？
</span>   (****pf)();  <span style="color: #008000;">// 这又是什么？</span>
   (***************f)(); <span style="color: #008000;">// 这个够变态了吧？</span>
}
</span></pre>
<p>答案：全部合法。</p>
</li>
<li class="li-enumerate">
<strong>初始化可能是ISO C中最难的部分了。无论是MSVC 还是GCC 都没有完全实现。GCC 可能更接近标准。在下面的代码中，<tt>i.nested.y</tt> 和<tt>i.nested.z的最终值是什么？</tt></strong>
<pre class="verbatim"><span style="color: #0000ff;">struct {
   int x;
   struct {
       int y, z;
   } nested;
} i = { .nested.y = 5, 6, .x = 1, 2 };
</span></pre>
<p>答案：2和6</p>
</li>
<li class="li-enumerate">
<strong>下面这个示例是C语言的痛，main函数返回值是什么？</strong>
<pre class="verbatim"><span style="color: #0000ff;">typedef struct
{
  char *key;
  char *value;
} T1;

typedef struct
{
  long type;
  char *value;
} T3;

T1 a[] =
{
  {
    "",
    ((char *)&amp;((T3) {1, (char *) 1}))
  }
};
int main() {
   T3 *pt3 = (T3*)a[0].value;
   return pt3-&gt;value;
}
</span></pre>
<p>答案：1（你知道为什么吗？）</p>
</li>
<li class="li-enumerate">
<strong>下面这个例就更变态了。在GCC的文档中，这个语法是合法的，但是不知道为什么GCC并没有实现。下面的代码返回 2.</strong>
<pre class="verbatim"><span style="color: #0000ff;"> return ((int []){1,2,3,4})[1];
</span></pre>
<p> </p>
</li>
<li class="li-enumerate">
<strong>在下面的这个示例中，有一个“bar” 函数及其函数指针 “pbar” 的两个拷贝(static 类型一般作用于语句块或文件域).</strong>
<pre class="verbatim"><span style="color: #0000ff;">  int foo() {
     static bar();
     static (*pbar)() = bar;

  }

  static bar() {
    return 1;
  }

  static (*pbar)() = 0;
</span></pre>
<p> </p>
</li>
<li class="li-enumerate">
<strong>下面的这个函数返回值是什么？取决于编译器是先处理unsigned long转型，还是负号。</strong>
<pre class="verbatim"><span style="color: #0000ff;">  unsigned long foo() {
    return (unsigned long) - 1 / 8;
  }
</span></pre>
<p>如果是： <tt>((unsigned long) - 1) / 8，那将是一个很大的数。<br>
</tt><tt>如果是：</tt> <tt>(unsigned long) (- 1 / 8 )</tt>, 那将是 0</p>
</li>
</ol>
<p class="li-enumerate">是的，这样使用C语言可能很奇怪，不过我们可以从另一方面了解C语言的很多我们不常注意的特性。C语言其实并不容易。</p>
<p></p>
<p align="center"><img alt="image placeholder" >
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/20845.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/18360.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/18024.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/12052.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/12012.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/11466.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
</ul>
</div></div>
<div id="post-ratings-873" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="cec7d01884">
<img alt="image placeholder" >
<meta itemprop="headline" content="谁说C语言很简单？">
<meta itemprop="description" content="前两天，Neo写了一篇《语言的歧义》其使用C语言讨论了一些语言的歧义。大家应该也顺便了解了一下C语言中的很多不可思异的东西，可能也是你从未注意到的东西。
是的，C语言并不简单，让我们来看看下面这些示例：


	为什么下面的代码会返回0？(这题应该很简单吧)

  int x;
  return x == (1 &amp;&amp; x);

本题主要是关于C/C++中变量初始化的问题。

	...">
<meta itemprop="datePublished" content="2009-05-19T22:10:25+08:00">
<meta itemprop="dateModified" content="2009-05-19T22:12:00+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/873.html">
<meta itemprop="author" content="陈皓">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/873.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="4.08">
<meta itemprop="ratingCount" content="25">
</div>
</div>
<div id="post-ratings-873-loading" class="post-ratings-loading">
<img alt="image placeholder" >
 ]]></content>
<pubDate>2009-05-19T22:10:25+08:00</pubDate>
<guid>https://coolshell.cn/articles/873.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ 一个C的序列化库tpl ]]></title>
<link>https://coolshell.cn/articles/878.html</link>
<content><![CDATA[ 
<p>tpl(<a href="http://tpl.sourceforge.net/">http://tpl.sourceforge.net/</a>)是一个开源的小项目，其主要是提供一个可以序列化或反序列化C语言数据的一个API函数库。tpl号称是最有效率的也是最快的，它可以把你内存中的数据存放到文件中，并可以在你需要的时候用文件中反序例化到内存变量中。而且这个函数库没有依赖于别的函数库。</p>
<p>下面是一个简单的示例（来源于其主页）</p>
<p>把一个数组（“序号”和“人名”）序例化到文件中。</p>
<p><span id="more-878"></span></p>
<p></p>
<pre data-enlighter-language="c" class="EnlighterJSRAW">#include "tpl.h"

int main(int argc, char *argv[]) {
    tpl_node *tn;
    int id=0;
    char *name, *names[] = { "joe", "bob", "cary" };

    tn = tpl_map("A(is)", &amp;id, &amp;name);

    for(name=names[0]; id &lt; 3; name=names[++id]) {
        tpl_pack(tn,1);
    }

    tpl_dump(tn, TPL_FILE, "users.tpl");
    tpl_free(tn);
}
</pre>
<br>
把上面那个序列化到文件的“序号”和“人名”反序列化回来。
<p></p>
<pre data-enlighter-language="c" class="EnlighterJSRAW">#include "tpl.h"

int main(int argc, char *argv[]) {
    tpl_node *tn;
    int id;
    char *name;

    tn = tpl_map("A(is)", &amp;id, &amp;name);
    tpl_load(tn, TPL_FILE, "users.tpl");

    while ( tpl_unpack(tn,1) &gt; 0 ) {
        printf("id %d, user %s\n", id, name);
        free(name);
    }
    tpl_free(tn);
}
</pre>
<br>
更详细的使用说明请看其文档：<br>
<a href="http://tpl.sourceforge.net/userguide.html">http://tpl.sourceforge.net/userguide.html</a>
<p align="center"><img alt="image placeholder" >
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/20845.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/18360.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/18024.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/12052.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/12012.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/11466.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
</ul>
</div></div>
<div id="post-ratings-878" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="8036548945">
<img alt="image placeholder" >
<meta itemprop="headline" content="一个C的序列化库tpl">
<meta itemprop="description" content="tpl(http://tpl.sourceforge.net/)是一个开源的小项目，其主要是提供一个可以序列化或反序列化C语言数据的一个API函数库。tpl号称是最有效率的也是最快的，它可以把你内存中的数据存放到文件中，并可以在你需要的时候用文件中反序例化到内存变量中。而且这个函数库没有依赖于别的函数库。

下面是一个简单的示例（来源于其主页）

把一个数组（“序号”和“人名”）序例化到文...">
<meta itemprop="datePublished" content="2009-05-21T22:54:21+08:00">
<meta itemprop="dateModified" content="2009-05-21T22:54:21+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/878.html">
<meta itemprop="author" content="陈皓">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/878.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="3.6">
<meta itemprop="ratingCount" content="10">
</div>
</div>
<div id="post-ratings-878-loading" class="post-ratings-loading">
<img alt="image placeholder" >
 ]]></content>
<pubDate>2009-05-21T22:54:21+08:00</pubDate>
<guid>https://coolshell.cn/articles/878.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ 几个有意思的漫画 ]]></title>
<link>https://coolshell.cn/articles/880.html</link>
<content><![CDATA[ 
<div id="ez-toc-container" class="ez-toc-v2_0_17 counter-hierarchy counter-decimal ez-toc-grey">
<div class="ez-toc-title-container">
<p class="ez-toc-title">目录</p>
<span class="ez-toc-title-toggle"></span>
</div>
<nav><ul class="ez-toc-list ez-toc-list-level-1">
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-1" href="#%E8%BD%AF%E4%BB%B6Bug%E5%92%8C%E8%BD%AF%E4%BB%B6Feature%E7%9A%84%E5%B7%AE%E5%88%AB" title="软件Bug和软件Feature的差别">软件Bug和软件Feature的差别</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-2" href="#%E4%B8%80%E4%B8%AA%E7%90%86%E8%A7%A3%E6%B5%81%E7%A8%8B%E5%9B%BE%E7%9A%84%E6%8C%87%E5%8D%97" title="一个理解流程图的指南">一个理解流程图的指南</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-3" href="#%E4%BB%80%E4%B9%88%E5%8F%AB%E6%9E%81%E9%99%90%E7%BC%96%E7%A8%8B" title="什么叫极限编程">什么叫极限编程</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-4" href="#%E5%A6%82%E4%BD%95%E8%A1%A1%E9%87%8F%E5%A5%BD%E7%9A%84%E4%BB%A3%E7%A0%81" title="如何衡量好的代码">如何衡量好的代码</a></li>
</ul></nav>
</div>
<h4>
<span class="ez-toc-section" id="%E8%BD%AF%E4%BB%B6Bug%E5%92%8C%E8%BD%AF%E4%BB%B6Feature%E7%9A%84%E5%B7%AE%E5%88%AB"></span>软件Bug和软件Feature的差别<span class="ez-toc-section-end"></span>
</h4>
<p>注释：有时候bug和feature的差别就是bug长得难看了一些。</p>
<p><a href="https://coolshell.cn/wp-content/uploads/2009/05/bug-feature.jpg"><img alt="image placeholder" >
<p><span id="more-880"></span></p>
<p> </p>
<h4>
<span class="ez-toc-section" id="%E4%B8%80%E4%B8%AA%E7%90%86%E8%A7%A3%E6%B5%81%E7%A8%8B%E5%9B%BE%E7%9A%84%E6%8C%87%E5%8D%97"></span>一个理解流程图的指南<span class="ez-toc-section-end"></span>
</h4>
<p><a href="https://coolshell.cn/wp-content/uploads/2009/05/flow_charts.png"><img alt="image placeholder" >
<h4>
<span class="ez-toc-section" id="%E4%BB%80%E4%B9%88%E5%8F%AB%E6%9E%81%E9%99%90%E7%BC%96%E7%A8%8B"></span>什么叫极限编程<span class="ez-toc-section-end"></span>
</h4>
<p>注释，对话翻译——</p>
<p>1）程序员：我不能在第一个版本给你所有的的功能。<br>
2）程序员：并且，每个功能需要有一个所谓的“用户案例（User Story）”<br>
3）用户：好吧，我告诉你一个“用户案例”——我要所有的功能，不然我就毁了你的生活。</p>
<p><a href="https://coolshell.cn/wp-content/uploads/2009/05/extreme-programming.gif"><img alt="image placeholder" >
<p><a href="https://coolshell.cn/wp-content/uploads/2009/05/bug-feature.jpg"></a><a href="https://coolshell.cn/wp-content/uploads/2009/05/bug-feature.jpg"></a></p>
<h4>
<span class="ez-toc-section" id="%E5%A6%82%E4%BD%95%E8%A1%A1%E9%87%8F%E5%A5%BD%E7%9A%84%E4%BB%A3%E7%A0%81"></span>如何衡量好的代码<span class="ez-toc-section-end"></span>
</h4>
<p>注释：下图中用“代码审核”流程中的每分钟出现“脏话”的个数来衡量代码的质量。（WTF is stand for “What the F**K”）</p>
<p><a href="https://coolshell.cn/wp-content/uploads/2009/05/measurement-of-code-quality.jpg"><img alt="image placeholder" >
<p align="center"><img alt="image placeholder" >
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/2608.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/17029.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/3806.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/7186.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/1592.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/873.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
</ul>
</div></div>
<div id="post-ratings-880" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="798421ae3c">
<img alt="image placeholder" >
<meta itemprop="headline" content="几个有意思的漫画">
<meta itemprop="description" content="软件Bug和软件Feature的差别
注释：有时候bug和feature的差别就是bug长得难看了一些。





 
一个理解流程图的指南

什么叫极限编程
注释，对话翻译——

1）程序员：我不能在第一个版本给你所有的的功能。
2）程序员：并且，每个功能需要有一个所谓的“用户案例（User Story）”
3）用户：好吧，我告诉你一个“用户案例”——我要所有的功能...">
<meta itemprop="datePublished" content="2009-05-21T23:07:47+08:00">
<meta itemprop="dateModified" content="2009-05-21T23:09:53+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/880.html">
<meta itemprop="author" content="陈皓">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/880.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="3.86">
<meta itemprop="ratingCount" content="7">
</div>
</div>
<div id="post-ratings-880-loading" class="post-ratings-loading">
<img alt="image placeholder" >
 ]]></content>
<pubDate>2009-05-21T23:07:47+08:00</pubDate>
<guid>https://coolshell.cn/articles/880.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ 20非常有用的Java程序片段 ]]></title>
<link>https://coolshell.cn/articles/889.html</link>
<content><![CDATA[ 
<p>下面是20个非常有用的Java程序片段，希望能对你有用。</p>
<p><strong>1. 字符串有整型的相互转换</strong></p>
<p></p>
<pre data-enlighter-language="java" class="EnlighterJSRAW"> 
String a = String.valueOf(2);   //integer to numeric string  
int i = Integer.parseInt(a); //numeric string to an int 

</pre>
<p><span id="more-889"></span><br>
<strong>2. 向文件末尾添加内容</strong></p>
<p></p>
<pre data-enlighter-language="java" class="EnlighterJSRAW"> 
BufferedWriter out = null;  
try {  
    out = new BufferedWriter(new FileWriter(”filename”, true));  
    out.write(”aString”);  
} catch (IOException e) {  
    // error processing code  
} finally {  
    if (out != null) {  
        out.close();  
    }  
} 
</pre>
<p><strong>3. 得到当前方法的名字</strong></p>
<p></p>
<pre data-enlighter-language="java" class="EnlighterJSRAW">String methodName = Thread.currentThread().getStackTrace()[1].getMethodName(); 
</pre>
<p><strong>4. 转字符串到日期</strong></p>
<p></p>
<pre data-enlighter-language="java" class="EnlighterJSRAW"> 
java.util.Date = java.text.DateFormat.getDateInstance().parse(date String); 
</pre>
<p>或者是：</p>
<p></p>
<pre data-enlighter-language="java" class="EnlighterJSRAW"> 
SimpleDateFormat format = new SimpleDateFormat( "dd.MM.yyyy" );  
Date date = format.parse( myString ); 
</pre>
<p><strong>5. 使用JDBC链接Oracle</strong></p>
<p></p>
<pre data-enlighter-language="java" class="EnlighterJSRAW">public class OracleJdbcTest  
{  
    String driverClass = "oracle.jdbc.driver.OracleDriver";  
 
    Connection con;  
 
    public void init(FileInputStream fs) throws ClassNotFoundException, SQLException, FileNotFoundException, IOException  
    {  
        Properties props = new Properties();  
        props.load(fs);  
        String url = props.getProperty("db.url");  
        String userName = props.getProperty("db.user");  
        String password = props.getProperty("db.password");  
        Class.forName(driverClass);  
 
        con=DriverManager.getConnection(url, userName, password);  
    }  
 
    public void fetch() throws SQLException, IOException  
    {  
        PreparedStatement ps = con.prepareStatement("select SYSDATE from dual");  
        ResultSet rs = ps.executeQuery();  
 
        while (rs.next())  
        {  
            // do the thing you do  
        }  
        rs.close();  
        ps.close();  
    }  
 
    public static void main(String[] args)  
    {  
        OracleJdbcTest test = new OracleJdbcTest();  
        test.init();  
        test.fetch();  
    }  
} 
</pre>
<p><strong>6. 把 Java util.Date 转成 sql.Date</strong></p>
<p></p>
<pre data-enlighter-language="java" class="EnlighterJSRAW">java.util.Date utilDate = new java.util.Date();  
java.sql.Date sqlDate = new java.sql.Date(utilDate.getTime()); 
</pre>
<p><strong>7. 使用NIO进行快速的文件拷贝</strong><br>
 </p>
<p></p>
<pre data-enlighter-language="java" class="EnlighterJSRAW">public static void fileCopy( File in, File out )  
            throws IOException  
    {  
        FileChannel inChannel = new FileInputStream( in ).getChannel();  
        FileChannel outChannel = new FileOutputStream( out ).getChannel();  
        try 
        {  
//          inChannel.transferTo(0, inChannel.size(), outChannel);      // original -- apparently has trouble copying large files on Windows  
 
            // magic number for Windows, 64Mb - 32Kb)  
            int maxCount = (64 * 1024 * 1024) - (32 * 1024);  
            long size = inChannel.size();  
            long position = 0;  
            while ( position &lt; size )  
            {  
               position += inChannel.transferTo( position, maxCount, outChannel );  
            }  
        }  
        finally 
        {  
            if ( inChannel != null )  
            {  
               inChannel.close();  
            }  
            if ( outChannel != null )  
            {  
                outChannel.close();  
            }  
        }  
    } 
</pre>
<p><strong>8. 创建图片的缩略图</strong></p>
<p></p>
<pre data-enlighter-language="java" class="EnlighterJSRAW">private void createThumbnail(String filename, int thumbWidth, int thumbHeight, int quality, String outFilename)  
        throws InterruptedException, FileNotFoundException, IOException  
    {  
        // load image from filename  
        Image image = Toolkit.getDefaultToolkit().getImage(filename);  
        MediaTracker mediaTracker = new MediaTracker(new Container());  
        mediaTracker.addImage(image, 0);  
        mediaTracker.waitForID(0);  
        // use this to test for errors at this point: System.out.println(mediaTracker.isErrorAny());  
 
        // determine thumbnail size from WIDTH and HEIGHT  
        double thumbRatio = (double)thumbWidth / (double)thumbHeight;  
        int imageWidth = image.getWidth(null);  
        int imageHeight = image.getHeight(null);  
        double imageRatio = (double)imageWidth / (double)imageHeight;  
        if (thumbRatio &lt; imageRatio) {  
            thumbHeight = (int)(thumbWidth / imageRatio);  
        } else {  
            thumbWidth = (int)(thumbHeight * imageRatio);  
        }  
 
        // draw original image to thumbnail image object and  
        // scale it to the new size on-the-fly  
        BufferedImage thumbImage = new BufferedImage(thumbWidth, thumbHeight, BufferedImage.TYPE_INT_RGB);  
        Graphics2D graphics2D = thumbImage.createGraphics();  
        graphics2D.setRenderingHint(RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_BILINEAR);  
        graphics2D.drawImage(image, 0, 0, thumbWidth, thumbHeight, null);  
 
        // save thumbnail image to outFilename  
        BufferedOutputStream out = new BufferedOutputStream(new FileOutputStream(outFilename));  
        JPEGImageEncoder encoder = JPEGCodec.createJPEGEncoder(out);  
        JPEGEncodeParam param = encoder.getDefaultJPEGEncodeParam(thumbImage);  
        quality = Math.max(0, Math.min(quality, 100));  
        param.setQuality((float)quality / 100.0f, false);  
        encoder.setJPEGEncodeParam(param);  
        encoder.encode(thumbImage);  
        out.close();  
    } 
</pre>
<p><strong>9. 创建 JSON 格式的数据</strong></p>
<p>请先阅读<a href="http://viralpatel.net/blogs/2009/02/creating-parsing-json-data-with-java-servlet-struts-jsp-json.html"><span style="color: #366799;">这篇文章</span></a> 了解一些细节，<br>
并下面这个JAR 文件：<a href="http://viralpatel.net/blogs/download/json/json-rpc-1.0.jar"><span style="color: #366799;">json-rpc-1.0.jar (75 kb)</span></a></p>
<p></p>
<pre data-enlighter-language="java" class="EnlighterJSRAW">import org.json.JSONObject;  
...  
...  
JSONObject json = new JSONObject();  
json.put("city", "Mumbai");  
json.put("country", "India");  
...  
String output = json.toString();  
... 
</pre>
<p><strong>10. 使用iText JAR生成PDF</strong></p>
<p>阅读这篇<a href="http://viralpatel.net/blogs/2009/04/generate-pdf-file-in-java-using-itext-jar.html"><span style="color: #366799;">文章</span></a> 了解更多细节</p>
<p></p>
<pre data-enlighter-language="java" class="EnlighterJSRAW"> 
import java.io.File;  
import java.io.FileOutputStream;  
import java.io.OutputStream;  
import java.util.Date;  
 
import com.lowagie.text.Document;  
import com.lowagie.text.Paragraph;  
import com.lowagie.text.pdf.PdfWriter;  
 
public class GeneratePDF {  
 
    public static void main(String[] args) {  
        try {  
            OutputStream file = new FileOutputStream(new File("C:\\Test.pdf"));  
 
            Document document = new Document();  
            PdfWriter.getInstance(document, file);  
            document.open();  
            document.add(new Paragraph("Hello Kiran"));  
            document.add(new Paragraph(new Date().toString()));  
 
            document.close();  
            file.close();  
 
        } catch (Exception e) {  
 
            e.printStackTrace();  
        }  
    }  
} 
</pre>
<p><strong>11. HTTP 代理设置</strong></p>
<p>阅读这篇 <a href="http://viralpatel.net/blogs/2009/04/http-proxy-setting-java-setting-proxy-java.html"><span style="color: #366799;">文章</span></a> 了解更多细节。</p>
<p></p>
<pre data-enlighter-language="java" class="EnlighterJSRAW"> 
System.getProperties().put("http.proxyHost", "someProxyURL");  
System.getProperties().put("http.proxyPort", "someProxyPort");  
System.getProperties().put("http.proxyUser", "someUserName");  
System.getProperties().put("http.proxyPassword", "somePassword"); 
</pre>
<p><strong>12. 单实例Singleton 示例</strong></p>
<p>请先阅读这篇<a href="http://viralpatel.net/blogs/2009/01/java-singleton-design-pattern-tutorial-example-singleton-j2ee-design-pattern.html"><span style="color: #366799;">文章</span></a> 了解更多信息</p>
<p></p>
<pre data-enlighter-language="java" class="EnlighterJSRAW"> 
public class SimpleSingleton {  
    private static SimpleSingleton singleInstance =  new SimpleSingleton();  
 
    //Marking default constructor private  
    //to avoid direct instantiation.  
    private SimpleSingleton() {  
    }  
 
    //Get instance for class SimpleSingleton  
    public static SimpleSingleton getInstance() {  
 
        return singleInstance;  
    }  
} 
</pre>
<p>另一种实现</p>
<p></p>
<pre data-enlighter-language="java" class="EnlighterJSRAW">public enum SimpleSingleton {  
    INSTANCE;  
    public void doSomething() {  
    }  
}  
 
//Call the method from Singleton:  
SimpleSingleton.INSTANCE.doSomething(); 
</pre>
<p><strong>13. 抓屏程序</strong></p>
<p>阅读这篇<a href="http://viralpatel.net/blogs/2009/01/how-to-take-screen-shots-in-java-taking-screenshots-java.html"><span style="color: #366799;">文章</span></a> 获得更多信息。</p>
<p></p>
<pre data-enlighter-language="java" class="EnlighterJSRAW">import java.awt.Dimension;  
import java.awt.Rectangle;  
import java.awt.Robot;  
import java.awt.Toolkit;  
import java.awt.image.BufferedImage;  
import javax.imageio.ImageIO;  
import java.io.File;  
 
...  
 
public void captureScreen(String fileName) throws Exception {  
 
   Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();  
   Rectangle screenRectangle = new Rectangle(screenSize);  
   Robot robot = new Robot();  
   BufferedImage image = robot.createScreenCapture(screenRectangle);  
   ImageIO.write(image, "png", new File(fileName));  
 
}  
... 
</pre>
<p> </p>
<p> </p>
<p><strong>14. 列出文件和目录</strong></p>
<p></p>
<pre data-enlighter-language="java" class="EnlighterJSRAW">File dir = new File("directoryName");  
  String[] children = dir.list();  
  if (children == null) {  
      // Either dir does not exist or is not a directory  
  } else {  
      for (int i=0; i &lt; children.length; i++) {  
          // Get filename of file or directory  
          String filename = children[i];  
      }  
  }  
 
  // It is also possible to filter the list of returned files.  
  // This example does not return any files that start with `.'.  
  FilenameFilter filter = new FilenameFilter() {  
      public boolean accept(File dir, String name) {  
          return !name.startsWith(".");  
      }  
  };  
  children = dir.list(filter);  
 
  // The list of files can also be retrieved as File objects  
  File[] files = dir.listFiles();  
 
  // This filter only returns directories  
  FileFilter fileFilter = new FileFilter() {  
      public boolean accept(File file) {  
          return file.isDirectory();  
      }  
  };  
  files = dir.listFiles(fileFilter); 
</pre>
<p><strong>15. 创建ZIP和JAR文件<br>
</strong></p>
<p></p>
<pre data-enlighter-language="java" class="EnlighterJSRAW"> 
import java.util.zip.*;  
import java.io.*;  
 
public class ZipIt {  
    public static void main(String args[]) throws IOException {  
        if (args.length &lt; 2) {  
            System.err.println("usage: java ZipIt Zip.zip file1 file2 file3");  
            System.exit(-1);  
        }  
        File zipFile = new File(args[0]);  
        if (zipFile.exists()) {  
            System.err.println("Zip file already exists, please try another");  
            System.exit(-2);  
        }  
        FileOutputStream fos = new FileOutputStream(zipFile);  
        ZipOutputStream zos = new ZipOutputStream(fos);  
        int bytesRead;  
        byte[] buffer = new byte[1024];  
        CRC32 crc = new CRC32();  
        for (int i=1, n=args.length; i &lt; n; i++) {  
            String name = args[i];  
            File file = new File(name);  
            if (!file.exists()) {  
                System.err.println("Skipping: " + name);  
                continue;  
            }  
            BufferedInputStream bis = new BufferedInputStream(  
                new FileInputStream(file));  
            crc.reset();  
            while ((bytesRead = bis.read(buffer)) != -1) {  
                crc.update(buffer, 0, bytesRead);  
            }  
            bis.close();  
            // Reset to beginning of input stream  
            bis = new BufferedInputStream(  
                new FileInputStream(file));  
            ZipEntry entry = new ZipEntry(name);  
            entry.setMethod(ZipEntry.STORED);  
            entry.setCompressedSize(file.length());  
            entry.setSize(file.length());  
            entry.setCrc(crc.getValue());  
            zos.putNextEntry(entry);  
            while ((bytesRead = bis.read(buffer)) != -1) {  
                zos.write(buffer, 0, bytesRead);  
            }  
            bis.close();  
        }  
        zos.close();  
    }  
} 
</pre>
<p><strong>16. 解析/读取XML 文件</strong></p>
<p>XML文件<br>
 </p>
<p></p>
<pre data-enlighter-language="xml" class="EnlighterJSRAW">&lt;?xml version="1.0"?&gt; 
&lt;students&gt; 
    &lt;student&gt; 
        &lt;name&gt;John&lt;/name&gt; 
        &lt;grade&gt;B&lt;/grade&gt; 
        &lt;age&gt;12&lt;/age&gt; 
    &lt;/student&gt; 
    &lt;student&gt; 
        &lt;name&gt;Mary&lt;/name&gt; 
        &lt;grade&gt;A&lt;/grade&gt; 
        &lt;age&gt;11&lt;/age&gt; 
    &lt;/student&gt; 
    &lt;student&gt; 
        &lt;name&gt;Simon&lt;/name&gt; 
        &lt;grade&gt;A&lt;/grade&gt; 
        &lt;age&gt;18&lt;/age&gt; 
    &lt;/student&gt; 
&lt;/students&gt; 
</pre>
<p>Java代码</p>
<p></p>
<pre data-enlighter-language="java" class="EnlighterJSRAW"> 
package net.viralpatel.java.xmlparser;  
 
import java.io.File;  
import javax.xml.parsers.DocumentBuilder;  
import javax.xml.parsers.DocumentBuilderFactory;  
 
import org.w3c.dom.Document;  
import org.w3c.dom.Element;  
import org.w3c.dom.Node;  
import org.w3c.dom.NodeList;  
 
public class XMLParser {  
 
    public void getAllUserNames(String fileName) {  
        try {  
            DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();  
            DocumentBuilder db = dbf.newDocumentBuilder();  
            File file = new File(fileName);  
            if (file.exists()) {  
                Document doc = db.parse(file);  
                Element docEle = doc.getDocumentElement();  
 
                // Print root element of the document  
                System.out.println("Root element of the document: " 
                        + docEle.getNodeName());  
 
                NodeList studentList = docEle.getElementsByTagName("student");  
 
                // Print total student elements in document  
                System.out  
                        .println("Total students: " + studentList.getLength());  
 
                if (studentList != null &amp;&amp; studentList.getLength() &gt; 0) {  
                    for (int i = 0; i &lt; studentList.getLength(); i++) {  
 
                        Node node = studentList.item(i);  
 
                        if (node.getNodeType() == Node.ELEMENT_NODE) {  
 
                            System.out  
                                    .println("=====================");  
 
                            Element e = (Element) node;  
                            NodeList nodeList = e.getElementsByTagName("name");  
                            System.out.println("Name: " 
                                    + nodeList.item(0).getChildNodes().item(0)  
                                            .getNodeValue());  
 
                            nodeList = e.getElementsByTagName("grade");  
                            System.out.println("Grade: " 
                                    + nodeList.item(0).getChildNodes().item(0)  
                                            .getNodeValue());  
 
                            nodeList = e.getElementsByTagName("age");  
                            System.out.println("Age: " 
                                    + nodeList.item(0).getChildNodes().item(0)  
                                            .getNodeValue());  
                        }  
                    }  
                } else {  
                    System.exit(1);  
                }  
            }  
        } catch (Exception e) {  
            System.out.println(e);  
        }  
    }  
    public static void main(String[] args) {  
 
        XMLParser parser = new XMLParser();  
        parser.getAllUserNames("c:\\test.xml");  
    }  
} 
</pre>
<p><strong>17. 把 Array 转换成 Map </strong></p>
<p></p>
<pre data-enlighter-language="java" class="EnlighterJSRAW"> 
import java.util.Map;  
import org.apache.commons.lang.ArrayUtils;  
 
public class Main {  
 
  public static void main(String[] args) {  
    String[][] countries = { { "United States", "New York" }, { "United Kingdom", "London" },  
        { "Netherland", "Amsterdam" }, { "Japan", "Tokyo" }, { "France", "Paris" } };  
 
    Map countryCapitals = ArrayUtils.toMap(countries);  
 
    System.out.println("Capital of Japan is " + countryCapitals.get("Japan"));  
    System.out.println("Capital of France is " + countryCapitals.get("France"));  
  }  
} 
</pre>
<p><strong>18. 发送邮件</strong></p>
<p></p>
<pre data-enlighter-language="java" class="EnlighterJSRAW">import javax.mail.*;  
import javax.mail.internet.*;  
import java.util.*;  
 
public void postMail( String recipients[ ], String subject, String message , String from) throws MessagingException  
{  
    boolean debug = false;  
 
     //Set the host smtp address  
     Properties props = new Properties();  
     props.put("mail.smtp.host", "smtp.example.com");  
 
    // create some properties and get the default Session  
    Session session = Session.getDefaultInstance(props, null);  
    session.setDebug(debug);  
 
    // create a message  
    Message msg = new MimeMessage(session);  
 
    // set the from and to address  
    InternetAddress addressFrom = new InternetAddress(from);  
    msg.setFrom(addressFrom);  
 
    InternetAddress[] addressTo = new InternetAddress[recipients.length];  
    for (int i = 0; i &lt; recipients.length; i++)  
    {  
        addressTo[i] = new InternetAddress(recipients[i]);  
    }  
    msg.setRecipients(Message.RecipientType.TO, addressTo);  
 
    // Optional : You can also set your custom headers in the Email if you Want  
    msg.addHeader("MyHeaderName", "myHeaderValue");  
 
    // Setting the Subject and Content Type  
    msg.setSubject(subject);  
    msg.setContent(message, "text/plain");  
    Transport.send(msg);  
} 
</pre>
<p><strong>19. 发送代数据的HTTP 请求</strong></p>
<p></p>
<pre data-enlighter-language="java" class="EnlighterJSRAW"> 
import java.io.BufferedReader;  
import java.io.InputStreamReader;  
import java.net.URL;  
 
public class Main {  
    public static void main(String[] args)  {  
        try {  
            URL my_url = new URL("https://coolshell.cn/");  
            BufferedReader br = new BufferedReader(new InputStreamReader(my_url.openStream()));  
            String strTemp = "";  
            while(null != (strTemp = br.readLine())){  
            System.out.println(strTemp);  
        }  
        } catch (Exception ex) {  
            ex.printStackTrace();  
        }  
    }  
}
</pre>
<p><strong>20. 改变数组的大小</strong></p>
<p></p>
<pre data-enlighter-language="java" class="EnlighterJSRAW"> 
/** 
* Reallocates an array with a new size, and copies the contents 
* of the old array to the new array. 
* @param oldArray  the old array, to be reallocated. 
* @param newSize   the new array size. 
* @return          A new array with the same contents. 
*/ 
private static Object resizeArray (Object oldArray, int newSize) {  
   int oldSize = java.lang.reflect.Array.getLength(oldArray);  
   Class elementType = oldArray.getClass().getComponentType();  
   Object newArray = java.lang.reflect.Array.newInstance(  
         elementType,newSize);  
   int preserveLength = Math.min(oldSize,newSize);  
   if (preserveLength &gt; 0)  
      System.arraycopy (oldArray,0,newArray,0,preserveLength);  
   return newArray;  
}  
 
// Test routine for resizeArray().  
public static void main (String[] args) {  
   int[] a = {1,2,3};  
   a = (int[])resizeArray(a,5);  
   a[3] = 4;  
   a[4] = 5;  
   for (int i=0; i&lt;a.length; i++)  
      System.out.println (a[i]);  
}
</pre>
<p><strong>(全文完)</strong></p>
<p align="center"><img alt="image placeholder" >
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/20845.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/18360.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/11541.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/11454.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/11175.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/9703.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
</ul>
</div></div>
<div id="post-ratings-889" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="a3f0d2819e">
<img alt="image placeholder" >
<meta itemprop="headline" content="20非常有用的Java程序片段">
<meta itemprop="description" content="下面是20个非常有用的Java程序片段，希望能对你有用。

1. 字符串有整型的相互转换

[java] 
String a = String.valueOf(2);   //integer to numeric string  
int i = Integer.parseInt(a); //numeric string to an int 

[/java]


2. 向文...">
<meta itemprop="datePublished" content="2009-05-23T15:09:36+08:00">
<meta itemprop="dateModified" content="2009-05-23T15:09:36+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/889.html">
<meta itemprop="author" content="陈皓">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/889.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="4.5">
<meta itemprop="ratingCount" content="22">
</div>
</div>
<div id="post-ratings-889-loading" class="post-ratings-loading">
<img alt="image placeholder" >
 ]]></content>
<pubDate>2009-05-23T15:09:36+08:00</pubDate>
<guid>https://coolshell.cn/articles/889.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ 将vim变得简单:如何在vim中得到你最喜爱的IDE特性 ]]></title>
<link>https://coolshell.cn/articles/894.html</link>
<content><![CDATA[ 
<p>原文出处:<a href="https://arstechnica.com/open-source/guides/2009/05/vim-made-easy-how-to-get-your-favorite-ide-features-in-vim.ars">这里</a></p>
<p><strong>摘要：</strong><br>
开源的vim文本编辑器提供许多灵活而强大的功能，但是vim自身是很难被配置使用的，在本教材中，我们将向你显示通过几个简单的方式使得你的vim具有集成开发环境IDE的行为</p>
<p>vim是很多程序员和系统管理员最爱的文本编辑器，虽然他提供了很多优秀而灵活的功能，但是对于新手来说他依然是难于上手的。从传统集成开发环境转到vim的开发人员通常会开在发方式的转变中发现迷失了自己。</p>
<p>我经常收到来自于读者的邮件，他们希望能找到一种方式使得vim变得对开发者更友好。一个常见的抱怨是vim并不是自身就带有IDE的特性，并且如何来通过配置能得到等价IDE功能也不是很清晰。而揭开vim真正神奇的秘密就是利用强大的vim插件系统和对vim自身功能的改善和增强的第三方脚本。在阅你读本文之前，我已经整理好了一个vim的有用tips和插件列表，这些列表中的内容将会使那些用惯IDE功能的人们在vim上感到宾至如归的感觉。</p>
<p><span id="more-894"></span></p>
<p>虽然vim主要是设计给基于字符方式的文本编辑器，并且它有可能是这类编辑器中最高效的工具，但是现在在vim上也存在一些更适合新手使用的基于图形的外壳。不像运行在终端窗口上的vim，你可以尝试使用一下gvim,一个基于GUI的vim版本。gvim拥有可配置的的菜单和工具条，因此可以通过鼠标直接访问到vim的编程上的最本质的特性。gvim可以让你使用操作系统自带的文件对话框，并允许你通过鼠标点击拖拉编辑面板的能力。gvim有windows和linux的版本，等价的Mac OS X的版本是MacVim，MacVim提供了Mac机的本地Cocoa用户接口，包括菜单集成的功能。<br>
<a rel="attachment wp-att-896" href="https://coolshell.cn/?attachment_id=896"><img alt="image placeholder" >
<p>我听到来自vim用户最经常被抱怨的功能是vim的编辑区列表非常麻烦，并且没有一种简单的方式可以明了的看到什么文件是打开的。在vim上有几个插件可以解决这个问题，并提供了一个额外的编辑区列表用于方便在打开文件中切换。我最喜欢的一个插件是<a href="https://www.vim.org/scripts/script.php?script_id=159">MiniBufExplorer</a>，它将列表显示在窗口的头上。当MiniBufExplorer被激活时，你可以通过tab键来在列表的这些项中循环，然后通过回车键或双击鼠标来选择在编辑区显示和你要处理的文件。<br>
<a rel="attachment wp-att-898" href="https://coolshell.cn/?attachment_id=898"><img alt="image placeholder" >
<p>许多的IDE工具都有用于显示你程序项目结构和允许你通过鼠标在特定的类和方法间跳转的代码导航区。你可以通过使用流行的<a href="http://vim-taglist.sourceforge.net/installation.html">Tag List 插件</a>来得到这个特性。这个插件需要<a href="http://ctags.sourceforge.net/">Exuberant Ctags</a>实用工具，这个工具用于分析你的代码。TagList可以通过命令:Tlist来激活，并将你的类和方法显示在激活的区域，当你打开其他的文件或切换到其他打开文件时，新的类或方法会被加到代码导航区。在gvim中你可以通过单击方法名跳到对应方法定义。如果要使用键盘，那么通过光标键上下移光标到你希望的方法处，单击回车即可达到目标。</p>
<p><a rel="attachment wp-att-895" href="https://coolshell.cn/?attachment_id=895"><img alt="image placeholder" >
<p>自动文本完成(<strong>译者注</strong>：就是eclipse，visual studio中常见的输入前几个字符后面的内容通过列表显示的功能)是另外一种在IDE工具中常用特性，并且很多用户都希望在vim中有这些特性。这个特性已经在vim7中通过<a href="http://vim.wikia.com/wiki/Omni_completion">Omnicompletion system</a>被引入进来。它是可编程，这就意味着你可以通过定制，使的这个功能能在各种个样的编程语言中使用，在vim中甚至存在对动态语言python或ruby生效的自动文本完成功能。现在，自动文本完成的配置已经变成了vim包中的一个部分，所以现在你可以什么都不做就能让这个功能生效。要调出自动完成菜单(列表)，你需要敲下ctrl+x和ctrl+o键，接着你可以用ctrl+n和ctrl+p在可能完成列表中进行上下选择，当你移动到一个选项，vim将为你在另外一个Scratch区域显示带方法说明和属性的上下文帮助信息。<br>
<a rel="attachment wp-att-897" href="https://coolshell.cn/?attachment_id=897"><img alt="image placeholder" >
<p>你可以多种方式来改善你的vim体验，<a href="http://vim.wikia.com/wiki/Main_Page">vim维基vim wiki</a>和<a href="https://www.vim.org/scripts/index.php">脚本库script repository</a>为你提供了可用于增强功能的第三方增强扩展集合。这些插件实现sinppet system，outlining tools，项目管理工具，和大量的其他的特性。同时还有大量的脚本实现了对某些特定编程语言和框架的增强。例如有一个<a href="https://www.vim.org/scripts/script.php?script_id=1567">非常流行的脚本</a>，这个脚本将会改善你Ruby的语法高亮，并且为你Ruby on Rail的部署提供了非常方便的导航特性</p>
<p>同时也有一些<a href="http://cream.sourceforge.net/">面向新手的脚本集合</a>，这个集合使得vim的行为变得更像一个带有简单菜单和快捷键的传统的文本编辑器。如果你对vim那些神秘键盘命名感到不舒服的话，你可以选择这个作为你使用vim的开始。</p>
<p>vim的多样性使得它满足不同的用户使用。对于那些没有时间，能力，和爱好去通过自己去建立一个完美vim配置的人来说，无数的第三方脚本和插件为你提供了一种简单的方式，通过这种方式你可以付出很少的努力就能得到你想要的功能和特性。</p>
<p align="center"><img alt="image placeholder" >
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/7166.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/3125.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/3083.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/3013.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/11312.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/8883.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
</ul>
</div></div>
<div id="post-ratings-894" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="0e476e5c42">
<img alt="image placeholder" >
<meta itemprop="headline" content="将vim变得简单:如何在vim中得到你最喜爱的IDE特性">
<meta itemprop="description" content="原文出处:这里

摘要：
开源的vim文本编辑器提供许多灵活而强大的功能，但是vim自身是很难被配置使用的，在本教材中，我们将向你显示通过几个简单的方式使得你的vim具有集成开发环境IDE的行为

vim是很多程序员和系统管理员最爱的文本编辑器，虽然他提供了很多优秀而灵活的功能，但是对于新手来说他依然是难于上手的。从传统集成开发环境转到vim的开发人员通常会开在发方式的转变中发现迷失了自...">
<meta itemprop="datePublished" content="2009-05-23T16:32:05+08:00">
<meta itemprop="dateModified" content="2009-05-24T20:56:35+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/894.html">
<meta itemprop="author" content="Neo">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/894.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="4.16">
<meta itemprop="ratingCount" content="19">
</div>
</div>
<div id="post-ratings-894-loading" class="post-ratings-loading">
<img alt="image placeholder" >
 ]]></content>
<pubDate>2009-05-23T16:32:05+08:00</pubDate>
<guid>https://coolshell.cn/articles/894.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ 7个免费强大的Ajax文件管理器 ]]></title>
<link>https://coolshell.cn/articles/909.html</link>
<content><![CDATA[ 
<p>如果你正在开发一个WEB应用，需要一个不错的强大的文件管理器，并且可以简单的定制，那么，下面的这七个免费开源的文件管理器你一会喜欢的。这些文件管理器都很强大，他们全部都支持PHP，Javascript和Ajax，有几个还支持别的WEB开发语言。这些管理理可以让你完成目录文件浏览，搜索，上传/下载，编辑，拷贝，移动，删除等等文件操作功能。</p>
<h3 class="title">1. <a href="http://www.ajaxplorer.info/">AjaXplorer</a>
</h3>
<p class="img"><img alt="image placeholder" >
<p>AjaXplorer 是一个免费的 Ajax 文件管理器，其很容易安装。而且它的布局很丰富，可以用于多种应用，比如：文件管理，文件共享，图片库，代码库等等。不过它只支持(4 呀 5) ，不支持数据库。</p>
<p><span id="more-909"></span></p>
<ul>
<li>改名/拷贝/移动/删除/下载文件或目录。</li>
<li>以进度条的方式上传多个文件 (需要Flash 支持，不支持https)</li>
<li>创建目录和空文件。</li>
<li>编辑纯文本文件和代码 (js, php, html, java, sql, perl)，支持语法高亮。</li>
<li>查看图片，有缩略图功能。</li>
<li>可以在线地播放MP3文件。</li>
<li>在线地查看Flash videos (FLV) 文件。</li>
<li>可以在线地浏览或解压ZIP 文件。</li>
</ul>
<p><strong>链接：</strong></p>
<ul>
<li>
<strong>下载</strong>：<a href="http://www.ajaxplorer.info/download/">http://www.ajaxplorer.info/download/</a>
</li>
<li>
<strong>演示</strong>：<a href="http://www.ajaxplorer.info/demo/">http://www.ajaxplorer.info/demo/</a>
</li>
</ul>
<p> </p>
<div id="livedownload">
<a class="livedemo" href="http://www.ajaxplorer.info/demo/" target="_blank"></a><a class="livedownload" href="http://www.ajaxplorer.info/download/" target="_blank"></a>
</div>
<h3 class="title">2. <a href="http://filenice.com/">fileNice</a>
</h3>
<p class="img"><img alt="image placeholder" >
<p>fileNice 是一个免费的PHP文件浏览器。</p>
<p><strong>链接：</strong></p>
<ul>
<li>
<strong>主页：</strong><a href="http://filenice.com/">http://filenice.com/</a>
</li>
<li>
<strong>演示：</strong><a href="http://filenice.com/demo/">http://filenice.com/demo/</a>
</li>
</ul>
<p> </p>
<div id="livedownload">
<a class="livedemo" href="http://filenice.com/demo/" target="_blank"></a><a class="livedownload" href="http://filenice.com/" target="_blank"></a>
</div>
<h3 class="title">3. <a href="http://www.solitude.dk/filethingie/">File Thingie</a>
</h3>
<p class="img"><img alt="image placeholder" >
<p>File Thingie 是一个小型的文件管理器。由PHP写成。他主要的目的是提示一个WEB界面的文件管理器（如果你不能使用或是不会使用FTP）。通过File Thingie你可以完成下面这些事：</p>
<ul>
<li>安装简单— 只有一个文件</li>
<li>多文件上传</li>
<li>多用户和用户组</li>
<li>创建子目录</li>
<li>改名，移动，删除，拷贝文件和目录</li>
<li>搜索文件或目录名</li>
<li>通过黑/白名单进行文件级的存取控制</li>
<li>编辑纯文本文件</li>
<li>在线Unzip 文件</li>
<li>非常容易地进行CSS界面定制</li>
<li>支持多国语言</li>
</ul>
<p><strong>链接：</strong></p>
<ul>
<li>
<strong>教程：</strong><a href="http://www.solitude.dk/filethingie/tour">http://www.solitude.dk/filethingie/tour</a>
</li>
<li>
<strong>下载：</strong><a href="http://www.solitude.dk/filethingie/download">http://www.solitude.dk/filethingie/download</a>
</li>
</ul>
<p> </p>
<div id="livedownload">
<a class="livedemo" href="http://www.solitude.dk/filethingie/tour" target="_blank"></a><a class="livedownload" href="http://www.solitude.dk/filethingie/download" target="_blank"></a>
</div>
<h3 class="title">4. <a href="http://og5.net/christoph/article/MooTools_based_FileManager">MooTools based FileManager</a>
</h3>
<p class="img"><img alt="image placeholder" >
<p>MooTools based File-Manager 提供了预览，上传和修改文件和目录的功能。其主要功能如下：</p>
<ul>
<li>浏览文件和目录</li>
<li>改名，删除，移动（拖放）,拷贝（Ctrl+拖放）和下载</li>
<li>查看文件细节和预览图片文件，文本文件，压缩文件和音频文件。</li>
<li>非常不错的UI设计 </li>
<li>通过FancyUpload 上传文件</li>
<li>提供在上传时自动缩放图片尺寸的选项</li>
</ul>
<p><strong>链接：</strong></p>
<ul>
<li>
<strong>演示：</strong><a href="http://og5.net/christoph/Scripts/FileManager/Demos/">http://og5.net/christoph/Scripts/FileManager/Demos/</a>
</li>
<li>
<strong>下载：</strong><a href="http://og5.net/christoph/article/MooTools_based_FileManager">http://og5.net/christoph/article/MooTools_based_FileManager</a>
</li>
</ul>
<p> </p>
<div id="livedownload">
<a class="livedemo" href="http://og5.net/christoph/Scripts/FileManager/Demos/" target="_blank"></a><a class="livedownload" href="http://og5.net/christoph/article/MooTools_based_FileManager" target="_blank"></a>
</div>
<h3 class="title">5. <a href="http://ecosmear.com/relay/">Relay</a>
</h3>
<p class="img"><img alt="image placeholder" >
<p>Relay 是一个极牛的Ajax 文件管理器。在上传和下载文件它做得相当出色。下面是它的一些功能：</p>
<ul>
<li>可以随意拖放文件和目录</li>
<li>动态地载入文件目录结构 </li>
<li>上传文件进度条 </li>
<li>缩略图预览（包括PDF文件） </li>
<li>多用户和帐号</li>
</ul>
<p><strong>链接：</strong></p>
<ul>
<li>
<strong>演示：</strong><a href="http://ecosmear.com/relay/demo/">http://ecosmear.com/relay/demo/</a>
</li>
<li> <strong>主页：</strong><a href="http://ecosmear.com/relay/">http://ecosmear.com/relay/</a>
</li>
</ul>
<p> </p>
<div id="livedownload">
<a class="livedemo" href="http://ecosmear.com/relay/demo/" target="_blank"></a><a class="livedownload" href="http://ecosmear.com/relay/" target="_blank"></a>
</div>
<h3 class="title">6. <a href="http://kfm.verens.com/">Kae’s File Manager</a>
</h3>
<p class="img"><img alt="image placeholder" >
<p>KFM 是一个在线的文件管理器，它可以单独使用或是以一个插件的方式给一些编辑器使用。比如这些编辑器：FCKeditor 或TinyMCE。KFM 是一个开源的免费的项目，下面是它的一些特性：</p>
<ul>
<li>鼠标拖放功能</li>
<li>图标显示，列表显示</li>
<li>支持插件</li>
<li>图片操作，幻灯片播放</li>
<li>简单的安装和升级</li>
<li>文本编辑时语法高亮</li>
<li>搜索引擎</li>
<li>标签</li>
<li>多语言</li>
<li>mp3 和视频播放插件</li>
</ul>
<p><strong>链接：</strong></p>
<ul>
<li>
<strong>演示：</strong><a href="http://kfm.verens.com/demo/1.3.1/?lang=en">http://kfm.verens.com/demo/1.3.1/?lang=en</a>
</li>
<li>
<strong>主页：</strong><a href="http://kfm.verens.com/">http://kfm.verens.com/</a>
</li>
</ul>
<p> </p>
<div id="livedownload">
<a class="livedemo" href="http://kfm.verens.com/demo/1.3.1/?lang=en" target="_blank"></a><a class="livedownload" href="http://kfm.verens.com/" target="_blank"></a>
</div>
<h3 class="title">7. <a href="http://extplorer.sourceforge.net/">eXtplorer</a>
</h3>
<p class="img"><img alt="image placeholder" >
<p>eXtplorer 特性如下：</p>
<ul>
<li>文件目录浏览</li>
<li>编辑，复制，移动，删除文件</li>
<li>搜索，上传和下载文件</li>
<li>创建和释放压缩文件</li>
<li>创建文件和目录</li>
<li>更改文件和目录权限</li>
<li>其它更多更多的内容</li>
</ul>
<p><strong>链接：</strong></p>
<ul>
<li>
<strong>主页：</strong> <a href="http://extplorer.sourceforge.net/">http://extplorer.sourceforge.net/</a>
</li>
</ul>
<p> </p>
<div id="livedownload">
<a class="livedemo" href="http://extplorer.sourceforge.net/extplorer.png" target="_blank"></a>文章：<a href="http://devsnippets.com/article/ajax/7-free-powerful-file-managers.html" target="_blank">来源</a>
</div>
<p></p>
<p align="center"><img alt="image placeholder" >
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/9749.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/4795.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/3684.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/2593.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/2053.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/1850.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
</ul>
</div></div>
<div id="post-ratings-909" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="8990f3af80">
<img alt="image placeholder" >
<meta itemprop="headline" content="7个免费强大的Ajax文件管理器">
<meta itemprop="description" content="如果你正在开发一个WEB应用，需要一个不错的强大的文件管理器，并且可以简单的定制，那么，下面的这七个免费开源的文件管理器你一会喜欢的。这些文件管理器都很强大，他们全部都支持PHP，Javascript和Ajax，有几个还支持别的WEB开发语言。这些管理理可以让你完成目录文件浏览，搜索，上传/下载，编辑，拷贝，移动，删除等等文件操作功能。
1. AjaXplorer

AjaXplorer 是...">
<meta itemprop="datePublished" content="2009-05-24T20:46:56+08:00">
<meta itemprop="dateModified" content="2009-05-26T10:49:30+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/909.html">
<meta itemprop="author" content="陈皓">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/909.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="2.63">
<meta itemprop="ratingCount" content="8">
</div>
</div>
<div id="post-ratings-909-loading" class="post-ratings-loading">
<img alt="image placeholder" >
 ]]></content>
<pubDate>2009-05-24T20:46:56+08:00</pubDate>
<guid>https://coolshell.cn/articles/909.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ 6个变态的C语言Hello World程序 ]]></title>
<link>https://coolshell.cn/articles/914.html</link>
<content><![CDATA[ 
<p>下面的六个程序片段主要完成这些事情：</p>
<ol>
<li>输出Hello, World</li>
<li>混乱C语言的源代码</li>
</ol>
<p>下面的所有程序都可以在GCC下编译通过，只有最后一个需要动用C++的编译器g++才能编程通过。</p>
<p><strong>hello1.c</strong></p>
<p></p>
<pre data-enlighter-language="c" class="EnlighterJSRAW">    #define _________ }
    #define ________ putchar
    #define _______ main
    #define _(a) ________(a);
    #define ______ _______(){
    #define __ ______ _(0x48)_(0x65)_(0x6C)_(0x6C)
    #define ___ _(0x6F)_(0x2C)_(0x20)_(0x77)_(0x6F)
    #define ____ _(0x72)_(0x6C)_(0x64)_(0x21)
    #define _____ __ ___ ____ _________
    #include&lt;stdio.h&gt;
    _____
</pre>
<br>
<span id="more-914"></span>
<p><strong>hello2.c</strong> </p>
<p></p>
<pre data-enlighter-language="c" class="EnlighterJSRAW">    #include&lt;stdio.h&gt;
    main(){
      int x=0,y[14],*z=&amp;y;*(z++)=0x48;*(z++)=y[x++]+0x1D;
      *(z++)=y[x++]+0x07;*(z++)=y[x++]+0x00;*(z++)=y[x++]+0x03;
      *(z++)=y[x++]-0x43;*(z++)=y[x++]-0x0C;*(z++)=y[x++]+0x57;
      *(z++)=y[x++]-0x08;*(z++)=y[x++]+0x03;*(z++)=y[x++]-0x06;
      *(z++)=y[x++]-0x08;*(z++)=y[x++]-0x43;*(z++)=y[x]-0x21;
      x=*(--z);while(y[x]!=NULL)putchar(y[x++]);
    }
</pre>
<p><strong>hello3.c</strong></p>
<p></p>
<pre data-enlighter-language="c" class="EnlighterJSRAW">    #include&lt;stdio.h&gt;
    #define __(a) goto a;
    #define ___(a) putchar(a);
    #define _(a,b) ___(a) __(b);
    main()
    { _:__(t)a:_('r',g)b:_('$',p)
      c:_('l',f)d:_(' ',s)e:_('a',s)
      f:_('o',q)g:_('l',h)h:_('d',n)
      i:_('e',w)j:_('e',x)k:_('\n',z)
      l:_('H',l)m:_('X',i)n:_('!',k)
      o:_('z',q)p:_('q',b)q:_(',',d)
      r:_('i',l)s:_('w',v)t:_('H',j)
      u:_('a',a)v:_('o',a)w:_(')',k)
      x:_('l',c)y:_('\t',g)z:___(0x0)}
</pre>
<p><strong>hello4.c</strong></p>
<p></p>
<pre data-enlighter-language="c" class="EnlighterJSRAW">    int n[]={0x48,
    0x65,0x6C,0x6C,
    0x6F,0x2C,0x20,
    0x77,0x6F,0x72,
    0x6C,0x64,0x21,
    0x0A,0x00},*m=n;
    main(n){putchar
    (*m)!='\0'?main
    (m++):exit(n++);}
</pre>
<p><strong>hello5.c</strong></p>
<p></p>
<pre data-enlighter-language="c" class="EnlighterJSRAW">    main(){int i,n[]={(((1&lt;&lt;1)&lt;&lt;(1&lt;&lt;1)&lt;&lt;(1&lt;&lt;
    1)&lt;&lt;(1&lt;&lt;(1&gt;&gt;1)))+((1&lt;&lt;1)&lt;&lt;(1&lt;&lt;1))), (((1
    &lt;&lt;1)&lt;&lt;(1&lt;&lt;1)&lt;&lt;(1&lt;&lt;1)&lt;&lt;(1&lt;&lt;1))-((1&lt;&lt;1)&lt;&lt;(
    1&lt;&lt;1)&lt;&lt;(1&lt;&lt;1))+((1&lt;&lt;1)&lt;&lt;(1&lt;&lt;(1&gt;&gt;1)))+ (1
    &lt;&lt;(1&gt;&gt;1))),(((1&lt;&lt;1)&lt;&lt;(1&lt;&lt;1)&lt;&lt;(1&lt;&lt;1)&lt;&lt; (1
    &lt;&lt;1))-((1&lt;&lt;1)&lt;&lt;(1&lt;&lt;1)&lt;&lt;(1&lt;&lt;(1&gt;&gt;1)))- ((1
    &lt;&lt;1)&lt;&lt;(1&lt;&lt;(1&gt;&gt;1)))),(((1&lt;&lt;1)&lt;&lt;(1&lt;&lt;1)&lt;&lt;(1
    &lt;&lt;1)&lt;&lt;(1&lt;&lt;1))-((1&lt;&lt;1)&lt;&lt;(1&lt;&lt;1)&lt;&lt;(1&lt;&lt;(1&gt;&gt;1
    )))-((1&lt;&lt;1)&lt;&lt;(1&lt;&lt;(1&gt;&gt;1)))),(((1&lt;&lt;1)&lt;&lt; (1
    &lt;&lt;1)&lt;&lt;(1&lt;&lt;1)&lt;&lt;(1&lt;&lt;1))-((1&lt;&lt;1)&lt;&lt;(1&lt;&lt;1)&lt;&lt;(
    1&lt;&lt;(1&gt;&gt;1)))-(1&lt;&lt;(1&gt;&gt;1))),(((1&lt;&lt;1)&lt;&lt;(1&lt;&lt;1
    )&lt;&lt;(1&lt;&lt;1))+((1&lt;&lt;1)&lt;&lt;(1&lt;&lt;1)&lt;&lt;(1&lt;&lt;(1&gt;&gt;1)))
    -((1&lt;&lt;1)&lt;&lt;(1&lt;&lt;(1&gt;&gt;1)))),((1&lt;&lt;1)&lt;&lt; (1&lt;&lt;1)
    &lt;&lt;(1&lt;&lt;1)),(((1&lt;&lt;1)&lt;&lt;(1&lt;&lt;1)&lt;&lt;(1&lt;&lt;1)&lt;&lt;(1&lt;&lt;
    1))-((1&lt;&lt;1)&lt;&lt;(1&lt;&lt;1))-(1&lt;&lt;(1&gt;&gt;1))),(((1&lt;&lt;
    1)&lt;&lt;(1&lt;&lt;1)&lt;&lt;(1&lt;&lt;1)&lt;&lt;(1&lt;&lt;1))-((1&lt;&lt;1)&lt;&lt; (1
    &lt;&lt;1)&lt;&lt;(1&lt;&lt;(1&gt;&gt;1)))-(1&lt;&lt;(1&gt;&gt;1))), (((1&lt;&lt;1
    )&lt;&lt;(1&lt;&lt;1)&lt;&lt;(1&lt;&lt;1)&lt;&lt;(1&lt;&lt;1))- ((1&lt;&lt;1)&lt;&lt; (1
    &lt;&lt;1)&lt;&lt;(1&lt;&lt;(1&gt;&gt;1)))+(1&lt;&lt;1)), (((1&lt;&lt;1)&lt;&lt; (
    1&lt;&lt;1)&lt;&lt;(1&lt;&lt;1)&lt;&lt; (1&lt;&lt;1))-((1&lt;&lt;1)&lt;&lt; (1&lt;&lt;1)
    &lt;&lt;(1&lt;&lt;(1&gt;&gt;1)))-((1&lt;&lt;1) &lt;&lt;(1&lt;&lt; (1&gt;&gt;1)))),
    (((1&lt;&lt;1)&lt;&lt; (1&lt;&lt;1)&lt;&lt;(1&lt;&lt;1)&lt;&lt; (1&lt;&lt;1))- ((1
    &lt;&lt;1)&lt;&lt;(1&lt;&lt;1)&lt;&lt;(1&lt;&lt;1))+((1&lt;&lt;1)&lt;&lt; (1&lt;&lt;(1&gt;&gt;
    1)))), (((1&lt;&lt;1)&lt;&lt;(1&lt;&lt;1) &lt;&lt;(1&lt;&lt;1))+(1&lt;&lt;(1
    &gt;&gt;1))),(((1&lt;&lt;1)&lt;&lt;(1&lt;&lt;1))+((1&lt;&lt;1)&lt;&lt; (1&lt;&lt;(
    1&gt;&gt;1))) + (1&lt;&lt; (1&gt;&gt;1)))}; for(i=(1&gt;&gt;1);i
    &lt;(((1&lt;&lt;1) &lt;&lt;(1&lt;&lt;1))+((1 &lt;&lt;1)&lt;&lt; (1&lt;&lt;(1&gt;&gt;1
    ))) + (1&lt;&lt;1)); i++) printf("%c",n[i]); }
</pre>
<p><strong>hello6.cpp</strong></p>
<p>下面的程序只能由C++的编译器编译（比如：g++）</p>
<p></p>
<pre data-enlighter-language="c" class="EnlighterJSRAW">    #include &lt;stdio.h&gt;
    #define _(_) putchar(_);
    int main(void){int i = 0;_(
    ++++++++++++++++++++++++++++
    ++++++++++++++++++++++++++++
    ++++++++++++++++++++++++++++
    ++++++++++++++++++++++++++++
    ++++++++++++++++++++++++++++
    ++++i)_(++++++++++++++++++++
    ++++++++++++++++++++++++++++
    ++++++++++i)_(++++++++++++++
    i)_(--++i)_(++++++i)_(------
    ----------------------------
    ----------------------------
    ----------------------------
    ----------------------------
    ----------------i)_(--------
    ----------------i)_(++++++++
    ++++++++++++++++++++++++++++
    ++++++++++++++++++++++++++++
    ++++++++++++++++++++++++++++
    ++++++++++++++++++++++++++++
    ++++++++++++++++++++++++++++
    ++++++++++++++++++++++++++i)
    _(----------------i)_(++++++
    i)_(------------i)_(--------
    --------i)_(----------------
    ----------------------------
    ----------------------------
    ----------------------------
    ----------------------------
    ------i)_(------------------
    ----------------------------
    i)return i;}
</pre>
<br>
（全文完）
<p align="center"><img alt="image placeholder" >
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/20845.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/18360.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/18024.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/12052.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/12012.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/11466.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
</ul>
</div></div>
<div id="post-ratings-914" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="0dc7ca2323">
<img alt="image placeholder" >
<meta itemprop="headline" content="6个变态的C语言Hello World程序">
<meta itemprop="description" content="下面的六个程序片段主要完成这些事情：

	输出Hello, World
	混乱C语言的源代码

下面的所有程序都可以在GCC下编译通过，只有最后一个需要动用C++的编译器g++才能编程通过。

hello1.c

[c]
    #define _________ }
    #define ________ putchar
    #define _______ main...">
<meta itemprop="datePublished" content="2009-05-25T19:21:24+08:00">
<meta itemprop="dateModified" content="2009-05-25T19:21:24+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/914.html">
<meta itemprop="author" content="陈皓">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/914.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="4.69">
<meta itemprop="ratingCount" content="144">
</div>
</div>
<div id="post-ratings-914-loading" class="post-ratings-loading">
<img alt="image placeholder" >
 ]]></content>
<pubDate>2009-05-25T19:21:24+08:00</pubDate>
<guid>https://coolshell.cn/articles/914.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ 20个优秀的Javascript导航技术 ]]></title>
<link>https://coolshell.cn/articles/918.html</link>
<content><![CDATA[ 
<p>以前向大家介绍过 《<a href="https://coolshell.cn/articles/562.html" target="_blank">30种时尚的CSS网站导航条</a>》。这里，我们将向大家介绍一下使用Javascript设计的WEB页面的导航条。</p>
<p>因为Javascript可以处理和用户的交互，所以使用Javascript会有更好的用户体验。在这篇文章里，你可以看到一些<strong>令人恐怖和独一无二的Javascript制作的导航条</strong>。</p>
<h3>1. <a href="http://greengeckodesign.com/projects/menumatic.aspx" target="_blank">MenuMatic</a>
</h3>
<p>这个示例主要是展示了一个排序的纵向或横向的下拉式菜单导航条。</p>
<p><a href="http://greengeckodesign.com/projects/menumatic/examples/vertical/"><img alt="image placeholder" >
<p><a href="http://greengeckodesign.com/projects/menumatic/examples/vertical/">演示页面</a></p>
<p><span id="more-918"></span></p>
<h3>2. <a href="http://www.shopdev.co.uk/blog/animated-menus-using-jquery/">JQuery制作的动画按钮菜单</a>
</h3>
<p>当鼠标经过的时候，按钮会有下压的感觉。</p>
<p><a href="http://www.shopdev.co.uk/blog/menuDemo.html"><img alt="image placeholder" >
<p><a href="http://www.shopdev.co.uk/blog/menuDemo.html">演示页面</a></p>
<h3>3. <a href="http://www.gayadesign.com/diy/jquery-convertion-garagedoor-effect-using-javascript/" target="blank">jQuery 卷帘门特效导航条</a>
</h3>
<p><a href="http://www.gayadesign.com/about/" target="_blank">Gaya Kessler</a> 设计了这样一种卷帘门式导航条，相当的酷。</p>
<p><a href="http://www.gayadesign.com/scripts/jquerygaragedoor/"><img alt="image placeholder" >
<p><a href="http://www.gayadesign.com/scripts/jquerygaragedoor/" target="_blank">演示页面</a></p>
<h3>4. <a href="http://sonicradish.com/labs/jGlideMenu/current/?src=ASL_LAB" target="_blank">JGlide 菜单</a>
</h3>
<p>一个独特的平面式菜单，整个菜单可以被随意拖动。</p>
<p><a href="http://sonicradish.com/labs/jGlideMenu/current/static_demo.html"><img alt="image placeholder" >
<p><a href="http://sonicradish.com/labs/jGlideMenu/current/static_demo.html" target="_blank">演示页面</a></p>
<h3>5. <a href="http://hv-designs.co.uk/2009/02/17/sliding-jquery-menu/" target="_blank">jQuery 纵向滑动式菜单</a>
</h3>
<p><a href="http://hv-designs.co.uk/" target="_blank">HVDesigns</a> 设计这个下拉式滑动式菜单。</p>
<p><a href="http://www.hv-designs.co.uk/tutorials/sliding_menu/sliding_menu.html"><img alt="image placeholder" >
<p><a href="http://www.hv-designs.co.uk/tutorials/sliding_menu/sliding_menu.html" target="_blank">演示页面</a></p>
<h3>6. <a href="http://www.mattweltman.com/sliding_tabs.html">Perspective Tabs</a>
</h3>
<p>这个技术很酷了，有点类似于iPhone，通过鼠标可以滚动导航条。</p>
<p><a href="http://www.mattweltman.com/sliding_tabs.html"><img alt="image placeholder" >
<p><a href="http://www.mattweltman.com/sliding_tabs.html">演示页面</a></p>
<h3>7. <a href="https://woork.blogspot.com/2008/01/simple-css-vertical-menu-digg-like.html">Digg.com式的下拉菜单</a>
</h3>
<p>这个digg.com式的下拉菜单只使用了非常小的Javascript代码。</p>
<p><a href="https://woork.blogspot.com/2008/01/simple-css-vertical-menu-digg-like.html"><img alt="image placeholder" >
<h3>8. <a href="http://www.gmarwaha.com/blog/2007/08/23/lavalamp-for-jquery-lovers/">LavaLamp</a>
</h3>
<p>当鼠标经过的时候，菜单项上会有一个小阴影尾随着。以前，这样的技术基本上通过Flash完成的。</p>
<p><a href="http://www.gmarwaha.com/blog/2007/08/23/lavalamp-for-jquery-lovers/"><img alt="image placeholder" >
<h3>9. <a href="http://marcgrabanski.com/pages/code/fisheye-menu" target="_blank">鱼眼菜单</a>
</h3>
<p>鼠标经过的时候，图标会变得大起来。这个技术相当不错。</p>
<p><a href="http://marcgrabanski.com/pages/code/fisheye-menu"><img alt="image placeholder" >
<h3>10. <a href="http://www.dezinerfolio.com/2007/07/19/simple-javascript-accordions/" target="_blank">简单的JavaScript折叠式菜单</a>
</h3>
<p>相当不错的一相折叠式菜单。</p>
<p><a href="http://www.dezinerfolio.com/wp-content/uploads/accordemo/01.html"><img alt="image placeholder" >
<p><a href="http://www.dezinerfolio.com/wp-content/uploads/accordemo/01.html" target="_blank">演示页面</a></p>
<h3>11. <a href="http://www.leigeber.com/2008/05/sliding-javascript-menu-highlight-1kb/">高亮滑动式菜单</a>
</h3>
<p>这个特效和第8个很类似。</p>
<p><a href="http://www.leigeber.com/2008/05/sliding-javascript-menu-highlight-1kb/"><img alt="image placeholder" >
<h3>12. <a href="https://css-tricks.com/learning-jquery-fading-menu-replacing-content/" target="_blank">高亮式菜单</a>
</h3>
<p>鼠标经过的时候，菜单项会高亮起来。而没有鼠标的经过的时候，其是暗淡的。</p>
<p><a href="https://css-tricks.com/examples/MenuFader/"><img alt="image placeholder" >
<p><span style="text-decoration: underline;"><span style="color: #0000ff;"> <a href="https://css-tricks.com/examples/MenuFader/" target="_blank">演示页面</a></span></span></p>
<h3>13. <a href="http://javascript-array.com/scripts/simple_drop_down_menu/" target="_blank">简单的多级下拉菜单</a>
</h3>
<p>这是一个教程，教你怎么做这个菜单。</p>
<p><a href="http://javascript-array.com/scripts/simple_drop_down_menu/"><img alt="image placeholder" >
<h3>14. <a href="http://snook.ca/archives/javascript/jquery-bg-image-animations/" target="_blank">jQuery 制作的背景图动画菜单</a>
</h3>
<p><a href="http://snook.ca/technical/jquery-bg/"><img alt="image placeholder" >
<p><span style="text-decoration: underline;"><span style="color: #0000ff;"> <a href="http://snook.ca/technical/jquery-bg/">演示页面</a></span></span></p>
<h3>15. <a href="http://www.chromasynthetic.com/blog/mootools-demo-redux/57/">Mootools Redux</a>
</h3>
<p>使用MooTools 制作的一个“鱼眼”式的导航条。</p>
<p><a href="http://www.chromasynthetic.com/blog/uploads/mootools_nav_example.html"><img alt="image placeholder" >
<p><span style="text-decoration: underline;"><span style="color: #0000ff;"> <a href="http://www.chromasynthetic.com/blog/uploads/mootools_nav_example.html" target="_blank">演示页面</a></span></span></p>
<h3>16. <a href="http://berndmatzner.de/jquery/hoveraccordion/">折叠式边栏菜单</a>
</h3>
<p><a href="http://berndmatzner.de/jquery/hoveraccordion/"><img alt="image placeholder" >
<h3>17. <a href="http://tools.uvumi.com/dropdown.html">UvumiTools 式的下拉菜单</a>
</h3>
<p>另一个基于MooTools 制作的下拉菜单。</p>
<p><a href="http://tools.uvumi.com/dropdown.html"><img alt="image placeholder" >
<h3>18. <a href="http://stilbuero.de/jquery/tabs_3/" target="_blank">jQuery UI Tabs</a>
</h3>
<p>使用jQuery制作的Tab页.</p>
<p><a href="http://stilbuero.de/jquery/tabs_3/"><img alt="image placeholder" >
<p><span style="text-decoration: underline;"><span style="color: #0000ff;"> <a href="http://stilbuero.de/jquery/tabs_3/" target="_blank">演示页面</a></span></span></p>
<h3>19. <a href="http://yura.thinkweb2.com/scripting/contextMenu/" target="_blank">右键菜单Proto.Menu </a>
</h3>
<p>使用Prototype 框架制作的右键菜单。</p>
<p><a href="http://yura.thinkweb2.com/scripting/contextMenu/"><img alt="image placeholder" >
<h3>20. <a href="http://www.456bereastreet.com/archive/200705/accessible_expanding_and_collapsing_menu/" target="_blank">展开/收起式菜单</a>
</h3>
<p>一个支持两层的有点类似于树形的菜单。</p>
<p><a href="http://www.456bereastreet.com/lab/accessible-expanding-collapsing-menu/"><img alt="image placeholder" >
<p><a href="http://www.456bereastreet.com/lab/accessible-expanding-collapsing-menu/" target="_blank">演示页面</a></p>
<p>文章：<a href="http://sixrevisions.com/javascript/20-excellent-javascript-navigation-techniques-and-examples/" target="_blank">来源</a></p>
<p align="center"><img alt="image placeholder" >
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/18360.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/17634.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/17524.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/10822.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/10739.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/10337.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
</ul>
</div></div>
<div id="post-ratings-918" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="fdfbbd833e">
<img alt="image placeholder" >
<meta itemprop="headline" content="20个优秀的Javascript导航技术">
<meta itemprop="description" content="以前向大家介绍过 《30种时尚的CSS网站导航条》。这里，我们将向大家介绍一下使用Javascript设计的WEB页面的导航条。

因为Javascript可以处理和用户的交互，所以使用Javascript会有更好的用户体验。在这篇文章里，你可以看到一些令人恐怖和独一无二的Javascript制作的导航条。
1. MenuMatic
这个示例主要是展示了一个排序的纵向或横向的下拉式菜单导航...">
<meta itemprop="datePublished" content="2009-05-26T11:33:01+08:00">
<meta itemprop="dateModified" content="2009-05-29T20:41:23+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/918.html">
<meta itemprop="author" content="陈皓">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/918.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="3.2">
<meta itemprop="ratingCount" content="5">
</div>
</div>
<div id="post-ratings-918-loading" class="post-ratings-loading">
<img alt="image placeholder" >
 ]]></content>
<pubDate>2009-05-26T11:33:01+08:00</pubDate>
<guid>https://coolshell.cn/articles/918.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ 如何比较两个数据表 ]]></title>
<link>https://coolshell.cn/articles/925.html</link>
<content><![CDATA[ 
<p>有些时候，我们可能想要比较一下两个数据表，以找到其中不同的数据。比如，在进行数据移植的时候，或是在合并数据的时候，或是在比对验证数据的时候。当然比较两个表，需要这两个表结构是一样的。</p>
<p>我们先假设一下有如下表结构：</p>
<p></p>
<pre data-enlighter-language="sql" class="EnlighterJSRAW">CREATE TABLE jajal
(
    user_id integer NOT NULL,
    first_name character varying(255),
    last_name character varying(255),
    grade character(1),
    CONSTRAINT jajal_pkey PRIMARY KEY (user_id)
)
</pre>
<p><span id="more-925"></span><br>
然后，我们有两张表——jajal和jajal_copy，其内容如下：</p>
<div id="ez-toc-container" class="ez-toc-v2_0_17 counter-hierarchy counter-decimal ez-toc-grey">
<div class="ez-toc-title-container">
<p class="ez-toc-title">目录</p>
<span class="ez-toc-title-toggle"></span>
</div>
<nav><ul class="ez-toc-list ez-toc-list-level-1">
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-1" href="#_jajal" title=" jajal"> jajal</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-2" href="#jajal_copy" title="jajal_copy">jajal_copy</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-3" href="#%E4%BD%BF%E7%94%A8FULL_OUTER_JOIN" title="使用FULL OUTER JOIN">使用FULL OUTER JOIN</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-4" href="#%E4%BD%BF%E7%94%A8NATURAL_FULL_OUTER_JOIN" title="使用NATURAL FULL OUTER JOIN">使用NATURAL FULL OUTER JOIN</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-5" href="#MySQL_SQL_%E4%BB%A3%E7%A0%81" title="MySQL SQL 代码">MySQL SQL 代码</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-6" href="#PostgreSQL_%E4%B8%8B%E7%9A%84SQL%E8%AF%AD%E5%8F%A5" title="PostgreSQL 下的SQL语句">PostgreSQL 下的SQL语句</a></li>
</ul></nav>
</div>
<h4>
<span class="ez-toc-section" id="_jajal"></span> jajal<span class="ez-toc-section-end"></span>
</h4>
<table id="wptable-7" class="wptable rowstyle-alt" border="0" cellspacing="1">
<thead>
<tr>
<th class="sortable" style="width: 30px;" align="center">user_id</th>
<th class="sortable" style="width: 30px;" align="center">first_name</th>
<th class="sortable" style="width: 30px;" align="center">last_name</th>
<th class="sortable" style="width: 30px;" align="center">grade</th>
</tr>
</thead>
<tbody>
<tr>
<td style="width: 30px;" align="center">1</td>
<td style="width: 30px;" align="center">Some</td>
<td style="width: 30px;" align="center">Dude</td>
<td style="width: 30px;" align="center">A</td>
</tr>
<tr class="alt">
<td style="width: 30px;" align="center">2</td>
<td style="width: 30px;" align="center">Other</td>
<td style="width: 30px;" align="center">Guy</td>
<td style="width: 30px;" align="center">B</td>
</tr>
<tr>
<td style="width: 30px;" align="center">3</td>
<td style="width: 30px;" align="center">You are</td>
<td style="width: 30px;" align="center">Welcome</td>
<td style="width: 30px;" align="center">B</td>
</tr>
<tr class="alt">
<td style="width: 30px;" align="center">4</td>
<td style="width: 30px;" align="center">What</td>
<td style="width: 30px;" align="center">Other</td>
<td style="width: 30px;" align="center">A</td>
</tr>
<tr>
<td style="width: 30px;" align="center">5</td>
<td style="width: 30px;" align="center">INeed</td>
<td style="width: 30px;" align="center">You</td>
<td style="width: 30px;" align="center">C</td>
</tr>
<tr class="alt">
<td style="width: 30px;" align="center">6</td>
<td style="width: 30px;" align="center">Mixed</td>
<td style="width: 30px;" align="center">Nuts</td>
<td style="width: 30px;" align="center">Z</td>
</tr>
<tr>
<td style="width: 30px;" align="center">7</td>
<td style="width: 30px;" align="center">Kirk</td>
<td style="width: 30px;" align="center">Land</td>
<td style="width: 30px;" align="center">B</td>
</tr>
<tr class="alt">
<td style="width: 30px;" align="center">8</td>
<td style="width: 30px;" align="center">Bit</td>
<td style="width: 30px;" align="center">Shooter</td>
<td style="width: 30px;" align="center">A</td>
</tr>
<tr>
<td style="width: 30px;" align="center">9</td>
<td style="width: 30px;" align="center">Sun</td>
<td style="width: 30px;" align="center">Microsystem</td>
<td style="width: 30px;" align="center">C</td>
</tr>
<tr class="alt">
<td style="width: 30px;" align="center">10</td>
<td style="width: 30px;" align="center">Extra</td>
<td style="width: 30px;" align="center">Fancy</td>
<td style="width: 30px;" align="center">B</td>
</tr>
</tbody>
</table>
<h4>
<span class="ez-toc-section" id="jajal_copy"></span>jajal_copy<span class="ez-toc-section-end"></span>
</h4>
<table id="wptable-8" class="wptable rowstyle-alt" border="0" cellspacing="1">
<thead>
<tr>
<th class="sortable" style="width: 30px;" align="center">user_id</th>
<th class="sortable" style="width: 30px;" align="center">first_name</th>
<th class="sortable" style="width: 30px;" align="center">last_name</th>
<th class="sortable" style="width: 30px;" align="center">grade</th>
</tr>
</thead>
<tbody>
<tr>
<td style="width: 30px;" align="center">1</td>
<td style="width: 30px;" align="center">Some</td>
<td style="width: 30px;" align="center">Dude</td>
<td style="width: 30px;" align="center">A</td>
</tr>
<tr class="alt">
<td style="width: 30px;" align="center">2</td>
<td style="width: 30px;" align="center">Other</td>
<td style="width: 30px;" align="center">Guy</td>
<td style="width: 30px;" align="center">B</td>
</tr>
<tr>
<td style="width: 30px;" align="center">3</td>
<td style="width: 30px;" align="center">You are</td>
<td style="width: 30px;" align="center">Welcome</td>
<td style="width: 30px;" align="center">B</td>
</tr>
<tr class="alt">
<td style="width: 30px;" align="center">4</td>
<td style="width: 30px;" align="center">What</td>
<td style="width: 30px;" align="center">Other</td>
<td style="width: 30px;" align="center">A</td>
</tr>
<tr>
<td style="width: 30px;" align="center">5</td>
<td style="width: 30px;" align="center">INeed</td>
<td style="width: 30px;" align="center">You</td>
<td style="width: 30px;" align="center">C</td>
</tr>
<tr class="alt">
<td style="width: 30px;" align="center">6</td>
<td style="width: 30px;" align="center">Mixed</td>
<td style="width: 30px;" align="center">Nuts</td>
<td style="width: 30px;" align="center">C</td>
</tr>
<tr>
<td style="width: 30px;" align="center">7</td>
<td style="width: 30px;" align="center">Kirk</td>
<td style="width: 30px;" align="center">Land</td>
<td style="width: 30px;" align="center">B</td>
</tr>
<tr class="alt">
<td style="width: 30px;" align="center">8</td>
<td style="width: 30px;" align="center">Bit</td>
<td style="width: 30px;" align="center">Shooter</td>
<td style="width: 30px;" align="center">A</td>
</tr>
<tr>
<td style="width: 30px;" align="center">9</td>
<td style="width: 30px;" align="center">Sun</td>
<td style="width: 30px;" align="center">Microsystem</td>
<td style="width: 30px;" align="center">C</td>
</tr>
<tr class="alt">
<td style="width: 30px;" align="center">10</td>
<td style="width: 30px;" align="center">Extra</td>
<td style="width: 30px;" align="center">Fancy</td>
<td style="width: 30px;" align="center">B</td>
</tr>
</tbody>
</table>
<p> </p>
<p>要比较这两张表的数据，找出不一样的数据行。我们可以使用<a href="https://en.wikipedia.org/wiki/Join_(SQL)#Outer_joins"><span style="color: #967001;">outer join</span></a> 技术。我给outer join做了一个链接，是Wikipedia的，如果你对这个技术不是很清楚，还请你行看看其技术细节。</p>
<p>下面是具体的SQL语句：</p>
<h4>
<span class="ez-toc-section" id="%E4%BD%BF%E7%94%A8FULL_OUTER_JOIN"></span><span style="text-decoration: underline;">使用FULL OUTER JOIN</span><span class="ez-toc-section-end"></span>
</h4>
<p></p>
<pre data-enlighter-language="sql" class="EnlighterJSRAW">SELECT
     *
FROM
     jajal j
     FULL OUTER JOIN jajal_copy jc ON jc.first_name = j.first_name
     AND jc.last_name = j.last_name
     AND jc.grade = j.grade
     AND jc.user_id = j.user_id
WHERE
     j.user_id IS NULL
     OR jc.user_id IS NULL
</pre>
<p>运行结果如下：</p>
<table id="wptable-9" class="wptable rowstyle-alt" border="0" cellspacing="1">
<thead>
<tr>
<th class="sortable" style="width: 30px;" align="center">user_id</th>
<th class="sortable" style="width: 30px;" align="center">first_name</th>
<th class="sortable" style="width: 30px;" align="center">last_name</th>
<th class="sortable" style="width: 30px;" align="center">grade</th>
<th class="sortable" style="width: 30px;" align="center">user_id</th>
<th class="sortable" style="width: 30px;" align="center">first_name</th>
<th class="sortable" style="width: 30px;" align="center">last_name</th>
<th class="sortable" style="width: 30px;" align="center">grade</th>
</tr>
</thead>
<tbody>
<tr>
<td style="width: 30px;" align="center">[NULL]</td>
<td style="width: 30px;" align="center">[NULL]</td>
<td style="width: 30px;" align="center">[NULL]</td>
<td style="width: 30px;" align="center">[NULL]</td>
<td style="width: 30px;" align="center">6</td>
<td style="width: 30px;" align="center">Mixed</td>
<td style="width: 30px;" align="center">Nuts</td>
<td style="width: 30px;" align="center">C</td>
</tr>
<tr class="alt">
<td style="width: 30px;" align="center">6</td>
<td style="width: 30px;" align="center">Mixed</td>
<td style="width: 30px;" align="center">Nuts</td>
<td style="width: 30px;" align="center">Z</td>
<td style="width: 30px;" align="center">[NULL]</td>
<td style="width: 30px;" align="center">[NULL]</td>
<td style="width: 30px;" align="center">[NULL]</td>
<td style="width: 30px;" align="center">[NULL]</td>
</tr>
</tbody>
</table>
<p> </p>
<h4>
<span class="ez-toc-section" id="%E4%BD%BF%E7%94%A8NATURAL_FULL_OUTER_JOIN"></span><span style="text-decoration: underline;">使用NATURAL FULL OUTER JOIN</span><span class="ez-toc-section-end"></span>
</h4>
<p>关于<a href="https://en.wikipedia.org/wiki/Join_(SQL)#Natural_join"><span style="color: #967001;">natural join</span></a>，你可以看看Wikipedia是怎么说的。</p>
<p></p>
<pre data-enlighter-language="sql" class="EnlighterJSRAW">SELECT
       *
FROM
       jajal j
       NATURAL FULL OUTER JOIN jajal_copy jc
WHERE
       j.user_id IS NULL
       OR jc.user_id IS NULL
</pre>
<p>运行结果如下：</p>
<table id="wptable-10" class="wptable rowstyle-alt" border="0" cellspacing="1">
<thead>
<tr>
<th class="sortable" style="width: 30px;" align="center">user_id</th>
<th class="sortable" style="width: 30px;" align="center">first_name</th>
<th class="sortable" style="width: 30px;" align="center">last_name</th>
<th class="sortable" style="width: 30px;" align="center">grade</th>
</tr>
</thead>
<tbody>
<tr>
<td style="width: 30px;" align="center">6</td>
<td style="width: 30px;" align="center">Mixed</td>
<td style="width: 30px;" align="center">Nuts</td>
<td style="width: 30px;" align="center">C</td>
</tr>
<tr class="alt">
<td style="width: 30px;" align="center">6</td>
<td style="width: 30px;" align="center">Mixed</td>
<td style="width: 30px;" align="center">Nuts</td>
<td style="width: 30px;" align="center">Z</td>
</tr>
</tbody>
</table>
<p> </p>
<h4>
<span class="ez-toc-section" id="MySQL_SQL_%E4%BB%A3%E7%A0%81"></span><span style="text-decoration: underline;">MySQL SQL 代码</span><span class="ez-toc-section-end"></span>
</h4>
<pre>MySQL 并不支持 FULL OUTER JOIN，但是我们可以使用LEFT JOIN 和 RIGHT JOIN 来实现这一功能。如下所示。</pre>
<p></p>
<pre data-enlighter-language="sql" class="EnlighterJSRAW">SELECT
*
FROM
jajal j
LEFT JOIN jajal_copy jc ON jc.first_name = j.first_name
AND jc.last_name = j.last_name
AND jc.grade = j.grade
AND jc.user_id = j.user_id
WHERE
jc.user_id IS NULL
UNION ALL
SELECT
*
FROM
jajal j
RIGHT JOIN jajal_copy jc ON jc.first_name = j.first_name
AND jc.last_name = j.last_name
AND jc.grade = j.grade
AND jc.user_id = j.user_id
WHERE
j.user_id IS NULL
</pre>
<p>或者你更喜欢NATURAL JOIN 版本</p>
<p></p>
<pre data-enlighter-language="sql" class="EnlighterJSRAW">SELECT
*
FROM
jajal j
NATURAL LEFT JOIN jajal_copy jc
WHERE
jc.user_id IS NULL
UNION ALL
SELECT
*
FROM
jajal j
NATURAL RIGHT JOIN jajal_copy jc
WHERE
j.user_id IS NULL
</pre>
<p>当然，如果你需要一个MySQL的存储过程的话，下面是一个示例：</p>
<p></p>
<pre data-enlighter-language="sql" class="EnlighterJSRAW">DELIMITER $$

CREATE PROCEDURE `db_schema`.`tablediff`
    (schema_name VARCHAR(64), table1 VARCHAR(64), table2 VARCHAR(64))
BEGIN
    DECLARE done INT DEFAULT 0;
    DECLARE sql_statement TEXT DEFAULT '';
    DECLARE sql_statement_where TEXT DEFAULT '';
    DECLARE sql_statement_pk TEXT DEFAULT '';
    DECLARE col_name VARCHAR(64);
    DECLARE col_name_cur CURSOR FOR
        SELECT
            COLUMN_NAME
        FROM
            information_schema.COLUMNS
        WHERE
            TABLE_SCHEMA = schema_name
            AND TABLE_NAME = table1
    ;
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = 1;

    OPEN col_name_cur;
    traverse_columns: LOOP
        FETCH col_name_cur INTO col_name;

        IF done THEN
            CLOSE col_name_cur;
            LEAVE traverse_columns;
        END IF;

        SET sql_statement_where = CONCAT(sql_statement_where,
            ' AND a.', col_name, ' = b.', col_name);
        SET sql_statement_pk = CONCAT(sql_statement_pk,
            'AND b.', col_name, ' IS NULL');
    END LOOP;

    SELECT
        COLUMN_NAME INTO col_name
    FROM
        information_schema.KEY_COLUMN_USAGE
    WHERE
        CONSTRAINT_SCHEMA = schema_name
        AND CONSTRAINT_NAME = 'PRIMARY'
        AND TABLE_NAME = table1
    LIMIT 1
    ;
    IF col_name IS NOT NULL THEN
        SET sql_statement_pk = CONCAT('AND b.', col_name, ' IS NULL');
    END IF;

    SET sql_statement = CONCAT('SELECT * FROM ', schema_name, '.', table1, ' a LEFT JOIN ', schema_name, '.', table2, ' b ON TRUE');
    SET sql_statement = CONCAT(sql_statement, sql_statement_where, ' WHERE TRUE ', sql_statement_pk);
    SET sql_statement = CONCAT(sql_statement, ' UNION ALL SELECT * FROM ', schema_name, '.', table1, ' b RIGHT JOIN ', schema_name, '.', table2, ' a ON TRUE');
    SET sql_statement = CONCAT(sql_statement, sql_statement_where, ' WHERE TRUE ', sql_statement_pk);

    SET @s = sql_statement;
    PREPARE stmt1 FROM @s;
    EXECUTE stmt1;
    DEALLOCATE PREPARE stmt1;

END$$
DELIMITER ;
</pre>
<p> </p>
<p> </p>
<h4>
<span class="ez-toc-section" id="PostgreSQL_%E4%B8%8B%E7%9A%84SQL%E8%AF%AD%E5%8F%A5"></span><span style="text-decoration: underline;">PostgreSQL 下的SQL语句</span><span class="ez-toc-section-end"></span>
</h4>
<p>下面是PostgreSQL的一个存储过程：</p>
<p></p>
<pre data-enlighter-language="sql" class="EnlighterJSRAW">CREATE OR REPLACE FUNCTION tablediff (
    IN schema_name VARCHAR(64),
    IN table1 VARCHAR(64),
    IN table2 VARCHAR(64)
) RETURNS BIGINT AS
$BODY$
DECLARE
    the_result BIGINT DEFAULT 0;
    sql_statement TEXT DEFAULT '';
    sql_statement_where TEXT DEFAULT '';
    sql_statement_pk TEXT DEFAULT '';
    col_name VARCHAR(64);
    col_name_cur CURSOR FOR
        SELECT
            column_name
        FROM
            information_schema.columns
        WHERE
            table_catalog = schema_name
            AND table_schema = 'public'
            AND table_name = table1
    ;
BEGIN
    OPEN col_name_cur;

    LOOP
        FETCH col_name_cur INTO col_name;
        IF NOT FOUND THEN
            EXIT;
        END IF;

        sql_statement_where := sql_statement_where || ' AND a.' || col_name || ' = b.' || col_name;
    END LOOP;

    SELECT
        column_name INTO col_name
    FROM
        information_schema.table_constraints tc
        JOIN information_schema.constraint_column_usage ccu ON
            ccu.constraint_name = tc.constraint_name
    WHERE
        tc.table_catalog = schema_name
        AND tc.table_schema = 'public'
        AND tc.table_name = table1
    LIMIT 1
    ;

    IF col_name IS NOT NULL THEN
        sql_statement_pk := ' a.' || col_name || ' IS NULL';
        sql_statement_pk := sql_statement_pk || ' OR b.' || col_name || ' IS NULL';
    END IF;

    sql_statement := 'SELECT COUNT(*) FROM ' || schema_name || '.public.' || table1 || ' a FULL OUTER JOIN ' || schema_name || '.public.' || table2 || ' b ON TRUE';
    sql_statement := sql_statement || sql_statement_where || ' WHERE ' || sql_statement_pk;

    EXECUTE sql_statement INTO the_result;

    RETURN the_result;
END;$BODY$
LANGUAGE 'plpgsql' STABLE;
</pre>
<p> </p>
<p>文章：<a href="http://www.microshell.com/database/sql/comparing-data-from-2-database-tables/" target="_blank">来源</a></p>
<p align="center"><img alt="image placeholder" >
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/7490.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/3433.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/8711.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/7270.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/6639.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/4939.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
</ul>
</div></div>
<div id="post-ratings-925" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="710aea2871">
<img alt="image placeholder" >
<meta itemprop="headline" content="如何比较两个数据表">
<meta itemprop="description" content="有些时候，我们可能想要比较一下两个数据表，以找到其中不同的数据。比如，在进行数据移植的时候，或是在合并数据的时候，或是在比对验证数据的时候。当然比较两个表，需要这两个表结构是一样的。

我们先假设一下有如下表结构：

[sql]
CREATE TABLE jajal
(
    user_id integer NOT NULL,
    first_name character v...">
<meta itemprop="datePublished" content="2009-05-27T23:02:14+08:00">
<meta itemprop="dateModified" content="2009-05-27T23:02:14+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/925.html">
<meta itemprop="author" content="陈皓">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/925.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="3.67">
<meta itemprop="ratingCount" content="6">
</div>
</div>
<div id="post-ratings-925-loading" class="post-ratings-loading">
<img alt="image placeholder" >
 ]]></content>
<pubDate>2009-05-27T23:02:14+08:00</pubDate>
<guid>https://coolshell.cn/articles/925.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ 如何加密/混乱C源代码 ]]></title>
<link>https://coolshell.cn/articles/933.html</link>
<content><![CDATA[ 
<p>之前发表了《<strong>6个变态的C语言Hello World程序</strong>》[<a href="https://coolshell.cn/articles/914.html" target="_blank">酷壳链接</a>] [<a href="http://blog.csdn.net/haoel/archive/2009/05/26/4217565.aspx" target="_blank">CSDN链接</a>]，主要是是像大家展示了一些C语言的变态玩法。也向大家展示了一下程序是可以写得让人看不懂的，在那篇文章中，可以看到很多人的留言，很多人都觉得很好玩，是的，那本来是用来<span style="color: #000000;">供朋友们“消遣作乐”，供娱乐娱东而已，不必太过认真。</span></p>
<p>不过，通过这种极端的写法，大家可以看到源代码都可以写得那么复杂难懂的。大家也许在赞叹之余一笑了之，而我则希望，大家能够在娱乐以后认真思考一下，你不要以为咱们自己不会把代码搞得那么复杂，只不过没有像那6个Hello World一样那么极端，不过，说句老实话，<strong>咱们每个程序都有把清晰的程序搞得一团混乱的潜能，只不过程度不一样罢了，我并不是在这里危言耸听，大家好自为之</strong>。</p>
<p>下面是一个Step by Step的教程，教你如何把一个清晰的代码变得复杂难懂的。当然，这只是一个“简明教程”了。还是那句话——“<span style="color: #800000;">本文仅供朋友们“消遣作乐”，如果你要觉得有意思的话，顶个贴。如果你觉得没什么意思的话，一笑了之。仅供娱乐而已，不必太过认真。</span>”</p>
<p><span id="more-933"></span></p>
<div id="ez-toc-container" class="ez-toc-v2_0_17 counter-hierarchy counter-decimal ez-toc-grey">
<div class="ez-toc-title-container">
<p class="ez-toc-title">目录</p>
<span class="ez-toc-title-toggle"></span>
</div>
<nav><ul class="ez-toc-list ez-toc-list-level-1">
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-1" href="#%E5%BC%80%E5%A7%8B%E7%A8%8B%E5%BA%8F" title="开始程序">开始程序</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-2" href="#%E7%AC%AC%E4%B8%80%E6%AD%A5%E3%80%81%E6%8A%8Afor%E5%8F%98%E6%88%90while" title="第一步、把for变成while">第一步、把for变成while</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-3" href="#%E7%AC%AC%E4%BA%8C%E6%AD%A5%EF%BC%8C%E6%8A%8A%E5%BE%AA%E5%9D%8F%E5%8F%98%E6%88%90%E9%80%92%E5%BD%92" title="第二步，把循坏变成递归">第二步，把循坏变成递归</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-4" href="#%E7%AC%AC%E4%B8%89%E6%AD%A5%EF%BC%8C%E5%BC%84%E4%B9%B1%E4%BB%A3%E7%A0%81%E7%BB%93%E6%9E%84%E4%BD%BF%E7%94%A8%E6%B2%A1%E6%9C%89%E5%90%AB%E4%B9%89%E7%9A%84%E5%8F%98%E9%87%8F%E5%90%8D" title="第三步，弄乱代码结构/使用没有含义的变量名">第三步，弄乱代码结构/使用没有含义的变量名</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-5" href="#%E7%AC%AC%E5%9B%9B%E6%AD%A5%EF%BC%8C%E5%8F%96%E6%B6%88%E4%B8%B4%E6%97%B6%E5%8F%98%E9%87%8F" title="第四步，取消临时变量">第四步，取消临时变量</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-6" href="#%E7%AC%AC%E4%BA%94%E6%AD%A5%EF%BC%8C%E7%BB%A7%E7%BB%AD%E5%BC%84%E4%B9%B1%E5%8F%98%E9%87%8F%E5%90%8D" title="第五步，继续弄乱变量名">第五步，继续弄乱变量名</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-7" href="#%E7%AC%AC%E5%85%AD%E6%AD%A5%EF%BC%8C%E7%A7%BB%E9%99%A4%E5%B8%B8%E9%87%8F" title="第六步，移除常量">第六步，移除常量</a></li>
</ul></nav>
</div>
<h4>
<span class="ez-toc-section" id="%E5%BC%80%E5%A7%8B%E7%A8%8B%E5%BA%8F"></span>开始程序<span class="ez-toc-section-end"></span>
</h4>
<p>下面是一个找出素数的程序：</p>
<p></p>
<pre data-enlighter-language="c" class="EnlighterJSRAW">void primes(int cap)
{
    int i, j, composite;

    for(i = 2; i &lt; cap; ++i) {
        composite = 0;
        for(j = 2; j * j &lt; i; ++j) {
            composite += !(i % j);
        }
        if(!composite){
            printf("%dt", i);
        }
    }
}

int main()
{
    primes(100);
}
</pre>
<p>下面我们来看看如何把上面这段代码搞得复杂难懂。</p>
<h4>
<span class="ez-toc-section" id="%E7%AC%AC%E4%B8%80%E6%AD%A5%E3%80%81%E6%8A%8Afor%E5%8F%98%E6%88%90while"></span>第一步、把for变成while<span class="ez-toc-section-end"></span>
</h4>
<p>通常来说，for循坏要以while循坏简单一些，上面的程序有二重for循环，我们不但要把其变成while循环，而且还要把二重循环的变成一重的循环，然后使用大量的if-else语句来判断。</p>
<p></p>
<pre data-enlighter-language="c" class="EnlighterJSRAW">void primes(int cap)
{
    int i, j, composite, t = 0;

    while(t &lt; cap * cap) {
        i = t / cap;
        j = t++ % cap;
        if(i &lt;= 1);
        else if(!j)
            composite = j;
        else if(j == i &amp;&amp; !composite)
            printf("%dt",i);
        else if(j &gt; 1 &amp;&amp; j &lt; i)
            composite += !(i % j);
    }
}

int main()
{
    primes(100);
}
</pre>
<h4>
<span class="ez-toc-section" id="%E7%AC%AC%E4%BA%8C%E6%AD%A5%EF%BC%8C%E6%8A%8A%E5%BE%AA%E5%9D%8F%E5%8F%98%E6%88%90%E9%80%92%E5%BD%92"></span>第二步，把循坏变成递归<span class="ez-toc-section-end"></span>
</h4>
<p>递归在某些时候是可以把代码变得简单，但大多数的情况下是把代码变得复杂，而且很没有效率。下面是把上面的while循环变成了递归。变成了递归后，函数的参数都变成3个了。</p>
<p></p>
<pre data-enlighter-language="c" class="EnlighterJSRAW">void primes(int cap, int t, int composite)
{
    int i,j;
    i = t / cap;
    j = t % cap;
    if(i &lt;= 1)
        primes(cap,t+1,composite);
    else if(!j)
        primes(cap,t+1,j);
    else if(j == i &amp;&amp; !composite)
        (printf("%dt",i), primes(cap,t+1,composite));
    else if(j &gt; 1 &amp;&amp; j &lt; i)
        primes(cap,t+1, composite + !(i % j));
    else if(t &lt; cap * cap)
        primes(cap,t+1,composite);
}

int main()
{
    primes(100,0,0);
}
</pre>
<h4>
<span class="ez-toc-section" id="%E7%AC%AC%E4%B8%89%E6%AD%A5%EF%BC%8C%E5%BC%84%E4%B9%B1%E4%BB%A3%E7%A0%81%E7%BB%93%E6%9E%84%E4%BD%BF%E7%94%A8%E6%B2%A1%E6%9C%89%E5%90%AB%E4%B9%89%E7%9A%84%E5%8F%98%E9%87%8F%E5%90%8D"></span>第三步，弄乱代码结构/使用没有含义的变量名<span class="ez-toc-section-end"></span>
</h4>
<p>关于如何弄乱代码结构，其中一个小技巧是，使用“？”表达式代替if-else语句。</p>
<p></p>
<pre data-enlighter-language="c" class="EnlighterJSRAW">void primes(int m, int t, int c)
{
    int i,j;
    i = t / m;
    j = t % m;
    (i &lt;= 1) ? primes(m,t+1,c) : (!j) ? primes(m,t+1,j) : (j == i &amp;&amp; !c) ?
    (printf("%dt",i), primes(m,t+1,c)) : (j &gt; 1 &amp;&amp; j &lt; i) ?
    primes(m,t+1,c + !(i % j)) : (t &lt; m * m) ? primes(m,t+1,c) : 0;
}

int main()
{
    primes(100,0,0);
}
</pre>
<h4>
<span class="ez-toc-section" id="%E7%AC%AC%E5%9B%9B%E6%AD%A5%EF%BC%8C%E5%8F%96%E6%B6%88%E4%B8%B4%E6%97%B6%E5%8F%98%E9%87%8F"></span>第四步，取消临时变量<span class="ez-toc-section-end"></span>
</h4>
<p>临时变量一般用来保存反复使用的一个表达式的值。使用大量重复的表达式来取消这些临时变量的也可以让代码复杂起来。</p>
<p></p>
<pre data-enlighter-language="c" class="EnlighterJSRAW">void primes(int m, int t, int c)
{
  ((t / m) &lt;= 1) ? primes(m,t+1,c) : !(t % m) ? primes(m,t+1, t % m) :
  ((t % m)==(t / m) &amp;&amp; !c) ? (printf("%dt",(t / m)), primes(m,t+1,c)) :
  ((t % m)&gt; 1 &amp;&amp; (t % m) &lt; (t / m)) ? primes(m,t+1,c + !((t / m) % (t % m))) :
  (t &lt; m * m) ? primes(m,t+1,c) : 0;
}

int main()
{
    primes(100,0,0);
}
</pre>
<h4>
<span class="ez-toc-section" id="%E7%AC%AC%E4%BA%94%E6%AD%A5%EF%BC%8C%E7%BB%A7%E7%BB%AD%E5%BC%84%E4%B9%B1%E5%8F%98%E9%87%8F%E5%90%8D"></span>第五步，继续弄乱变量名<span class="ez-toc-section-end"></span>
</h4>
<p>我们知道，下划线是合法的变量名，所以，我们不妨用__，___，____来代替m，t，c。函数名也可以使用下划线来代替。让我们来看看求素数的函数能变成什么。</p>
<p></p>
<pre data-enlighter-language="c" class="EnlighterJSRAW">void _(int __, int ___, int ____)
{
    ((___ / __) &lt;= 1) ? _(__,___+1,____) : !(___ % __) ? _(__,___+1,___ % __) :
    ((___ % __)==(___ / __) &amp;&amp; !____) ? (printf("%dt",(___ / __)),
    _(__,___+1,____)) : ((___ % __) &gt; 1 &amp;&amp; (___ % __) &lt; (___ / __)) ?
    _(__,___+1,____ + !((___ / __) % (___ % __))) : (___ &lt; __ * __) ?
    _(__,___+1,____) : 0;
}

int main()
{
    _(100,0,0);
}
</pre>
<h4>
<span class="ez-toc-section" id="%E7%AC%AC%E5%85%AD%E6%AD%A5%EF%BC%8C%E7%A7%BB%E9%99%A4%E5%B8%B8%E9%87%8F"></span>第六步，移除常量<span class="ez-toc-section-end"></span>
</h4>
<p>在上面的程序中，还有一些常量，你可以通过增加一个宏定义，或是增加一个函数的形参来取代这一常量。</p>
<p></p>
<pre data-enlighter-language="c" class="EnlighterJSRAW">void _(int __, int ___, int ____, int _____)
{
    ((___ / __) &lt;= _____) ? _(__,___+_____,____,_____) : !(___ % __) ? _(__,___+_____,___ % __, _____) :
    ((___ % __)==(___ / __) &amp;&amp; !____) ? (printf("%dt",(___ / __)),
    _(__,___+_____,____,_____)) : ((___ % __) &gt; _____ &amp;&amp; (___ % __) &lt; (___ / __)) ?
    _(__,___+_____,____,_____ + !((___ / __) % (___ % __))) : (___ &lt; __ * __) ?
    _(__,___+_____,____,_____) : 0;
}

int main() {
    _(100,0,0,1);
}
</pre>
<p>程序到这里应该差不多了。还是那句话——“<strong>每一个程序员都有把源代码弄复杂的潜质</strong>”，大家好自为之。</p>
<p align="center"><img alt="image placeholder" >
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/20845.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/18360.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/18024.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/12052.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/12012.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/11466.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
</ul>
</div></div>
<div id="post-ratings-933" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="db55a8a0b3">
<img alt="image placeholder" >
<meta itemprop="headline" content="如何加密/混乱C源代码">
<meta itemprop="description" content="之前发表了《6个变态的C语言Hello World程序》[酷壳链接] [CSDN链接]，主要是是像大家展示了一些C语言的变态玩法。也向大家展示了一下程序是可以写得让人看不懂的，在那篇文章中，可以看到很多人的留言，很多人都觉得很好玩，是的，那本来是用来供朋友们“消遣作乐”，供娱乐娱东而已，不必太过认真。

不过，通过这种极端的写法，大家可以看到源代码都可以写得那么复杂难懂的。大家也许在赞叹之余一...">
<meta itemprop="datePublished" content="2009-05-30T15:30:05+08:00">
<meta itemprop="dateModified" content="2009-12-24T14:36:48+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/933.html">
<meta itemprop="author" content="陈皓">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/933.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="4.66">
<meta itemprop="ratingCount" content="70">
</div>
</div>
<div id="post-ratings-933-loading" class="post-ratings-loading">
<img alt="image placeholder" >
 ]]></content>
<pubDate>2009-05-30T15:30:05+08:00</pubDate>
<guid>https://coolshell.cn/articles/933.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ 最完美的Linux桌面软件 ]]></title>
<link>https://coolshell.cn/articles/936.html</link>
<content><![CDATA[ 
<p><strong><a href="http://lunduke.com/wp-content/uploads/2009/05/ubuntu-logo1.jpg"><img alt="image placeholder" >
下面是关于Linux桌面环境下，目前为止最完美的部分。之所以说他们完美，是因为他们不但很养眼，而且也使用最好的多媒体技术，有最好的可用性。在某些方面，他们甚至超过了Windows和Mac-OS。</p>
<p> <br>
<a href="http://lunduke.com/wp-content/uploads/2009/05/ubuntu-logo1.jpg"></a></p>
<h2><strong>基础</strong></h2>
<p><a href="https://www.debian.org/"><span style="color: #000000;">Debian</span></a> 或是 <a href="https://www.ubuntu.com/"><span style="color: #000000;">Ubuntu</span></a>。这两个分发包是目前使用最广泛的Linux桌面操作系统的分发包了。</p>
<p><span id="more-936"></span></p>
<h2><strong>软件包管理器</strong></h2>
<p>因为我们使用debian……所以<a href="https://en.wikipedia.org/wiki/Advanced_Packaging_Tool"><span style="color: #000000;">apt</span></a> 必然是软件包管理器中最不错的一个。</p>
<h2><strong><a href="http://lunduke.com/wp-content/uploads/2009/05/gnome2.png"><img alt="image placeholder" >
<p>这可能是最难的一个了。</p>
<p><a href="https://www.kde.org/"><span style="color: #000000;">KDE4</span></a> 是出色的，相当的出色。</p>
<p><a href="http://www.qtsoftware.com/products/"><span style="color: #000000;">QT</span></a>, 基于Gnome建造，也非常出色。</p>
<p>而在稳重方面， <a href="https://www.gnome.org/"><span style="color: #000000;">Gnome</span></a> 桌面则是桌面中更为出色的。</p>
<p>而且，许多的应用基本上来说都是基于 <a href="https://www.gtk.org/"><span style="color: #000000;">GTK</span></a> 开发的，而GTK则是基于GNOME桌面环境的。</p>
<p>所以，我们在这里选择 Gnome 作为最完美的图形桌面。对于KDE，只能非常抱歉了。</p>
<p> </p>
<h2><strong>快捷任务条（Dock）</strong></h2>
<p>也许你并不喜欢docks，不过其的确可以帮你更方便地使用图形界面。</p>
<p><a href="http://www.cairo-dock.org/index.php"><span style="color: #000000;">CairoDock</span></a>吗？ 当然，非常不错。那么  <a href="http://wiki.awn-project.org/"><span style="color: #000000;">AWN</span></a> 呢？  也不错。它们都有不同的很不错的功能。</p>
<p>但是，因为我们选择了Gnome桌面，所以<a href="http://do.davebsd.com/"><span style="color: #000000;">Gnome-Do</span></a> 在这其中则是最完美的。</p>
<p><a href="http://lunduke.com/wp-content/uploads/2009/05/docky1.jpg"><img alt="image placeholder" >
<h2><strong>字体</strong></h2>
<p>Linux默认的字体必需要被改变。你可以从 <a href="https://www.blambot.com/"><span style="color: #000000;">Blambot</span></a>获得一些相当不错的字体。</p>
<p> </p>
<p> </p>
<p><a href="http://lunduke.com/wp-content/uploads/2009/05/jupiteroneioss3.png"><img alt="image placeholder" >
<p>这里有一些 <a href="https://www.gnome-look.org/"><span style="color: #000000;">怪异的但令人惊叹</span></a> 的风格和图标可以装典你的桌面。你可以挑选几个来美化你的桌面，的确很不错哦。</p>
<p>在这样漂亮的桌面和背景下工作，你的心情都会变得轻松起来。</p>
<p> </p>
<h2><strong>应用商店（Application Store）</strong></h2>
<p>你是不是早已听说过这个东西啦？</p>
<p>我们需要重要Linux发行包可以被简单的拼装起来，并且包含一个“应用商店”（一个不错的桌面应用，用户可以容易地购买商业的软件和服务）。</p>
<p>看看这个吧  <a href="http://www.cnr.com/"><span style="color: #000000;">Click N Run</span></a>。的确存在，基于Ubuntu。</p>
<p> </p>
<h2><strong>Office 套件</strong></h2>
<p>这可能是最难的一个了。新面世的<a href="http://www.koffice.org/wordpress/"><span style="color: #000000;">KOffice</span></a> 的确是非常不错的。但是 <a href="https://www.openoffice.org/"><span style="color: #000000;">OpenOffice</span></a> 可能更好一些，必竟年头也最长，Bug和性能各方面应该都比较好。</p>
<h2>音频/ 视频框架</h2>
<p>让我们站在高山之上大喊这句话：  <a href="http://www.gstreamer.net/"><span style="color: #000000;">GStreamer</span></a> 是王中之王。</p>
<p> <br>
<a href="http://lunduke.com/wp-content/uploads/2009/05/screenshot-miro.png"><img alt="image placeholder" >
<h2><strong>视频播放器</strong></h2>
<p>有一个令人惊讶的播放器叫 <a href="http://www.getmiro.com/"><span style="color: #000000;">Miro</span></a> （原来叫做 Democracy Player）</p>
<p>如果你的Linux安装了它，那么你的Linux就会变成一个最Cool的桌面系统，你可以相当轻松地找到并查看在线的视频。</p>
<p> </p>
<p> </p>
<h2><strong>多媒体中心</strong></h2>
<p>Windows 有一个<a href="https://en.wikipedia.org/wiki/Windows_Media_Center"><span style="color: #000000;">Windows Media Center</span></a>.  OS X 有<a href="https://en.wikipedia.org/wiki/Front_Row_(software)"><span style="color: #000000;">Front Row</span></a>.</p>
<p>那么Linux下有什么？目前来说…… 几乎所有的Linux发行版没有包含这类应用。</p>
<p>不过，我们依然有一些选择。</p>
<p>我的选择是 <a href="http://www.moovida.com/"><span style="color: #000000;">Moovida</span></a> （正式的：Elisa）  它是有商业资助的，使用GStreamer。它比Apple的 Front Row更为强大。而且，其看上去很不错。</p>
<p> <br>
<a href="http://lunduke.com/wp-content/uploads/2009/05/banshee-slide-dap.png"><img alt="image placeholder" >
<h2>音频播放器</h2>
<p><a href="http://banshee-project.org/"><span style="color: #000000;">Banshee</span></a>，看看它到底有多简单。</p>
<p>是的，是的，我知道。  <a href="https://amarok.kde.org/"><span style="color: #000000;">Amarok</span></a> 相当的不错。而且 <a href="https://projects.gnome.org/rhythmbox/"><span style="color: #000000;">Rhythmbox</span></a> 也很不错.</p>
<p>不过 Banshee 更好一些，因为它被设计成为让用户有更多的选择可以去管理他们的音乐库。因为，当你的音频文件多起来时，你会发现，你是多么需要这样一个强大的管理功能的播放器啊。</p>
<p> </p>
<h2><strong>音频编辑器</strong></h2>
<p>目前看下来，在音频编辑方面，Linux并不是很优秀，不过我们依然可以看到<a href="https://ardour.org/"><span style="color: #000000;">Ardour</span></a> 这样令人惊叹的软件，即使其功能还不是那么的强大。</p>
<p>不过你可以试试<a href="http://www.jokosher.org/"><span style="color: #000000;">Jokosher</span></a>。这是一个很简单的但比较平常的音频编辑器。</p>
<p> <br>
<img alt="image placeholder" >
<h2><strong>视频编辑器</strong></h2>
<p><a href="http://www.pitivi.org/wiki/Main_Page"><span style="color: #000000;">Pitivi</span></a>. 商业资助的。一个绝对超前的。可以用于Gstreamer 的。如果让其和 <a href="https://en.wikipedia.org/wiki/IMovie"><span style="color: #000000;">iMovie</span></a>来比较的话，Pitivi依然是超前的… 不过，如果我们关注于其它关键应用，那么，这两个编辑器就难分高下了。</p>
<h2><strong>图片管理器</strong></h2>
<p><a href="http://f-spot.org/Main_Page"><span style="color: #000000;">F-Spot</span></a>. 不多说了，你试试就知道了。</p>
<p> </p>
<p> <br>
<a href="http://lunduke.com/wp-content/uploads/2009/05/yofrankie10.jpg"><img alt="image placeholder" >
<h2>游戏</h2>
<p>几乎所有的Linux发行版都会带有一堆游戏，当然这些游戏几乎没人去玩。</p>
<p>下面是几个非常不错的游戏，值得你去试试。</p>
<p>第一个是 <a href="http://www.yofrankie.org/"><span style="color: #000000;">Yo Frankie!</span></a> 这个游戏可以展示你的Linux在游戏方面比起别的操作系统来说也是非常有能力的。</p>
<p>而<a href="http://www.hedgewars.org/"><span style="color: #000000;">Hedgewars</span></a> 游戏则相当搞笑的。如果你和几个有一些联网的话，这个游戏也是非常搞笑的。</p>
<p> <a href="http://www.frozen-bubble.org/"><span style="color: #000000;">Frozen Bubble</span></a> 可能是另一个有些意思的游戏。你可以去试试。</p>
<p> <br>
<a href="http://lunduke.com/wp-content/uploads/2009/05/empathy-chat-theme.png"><img alt="image placeholder" >
<h2><strong>聊天</strong></h2>
<p>这个领域绝对不是 <a href="https://www.pidgin.im/"><span style="color: #000000;">Pidgin</span></a>.  Pidgin 已经出局了。</p>
<p>如果是 <a href="https://live.gnome.org/Empathy"><span style="color: #000000;">Empathy</span></a>，它有更好一些的设计。</p>
<p>那么，音频和视频聊天呢？</p>
<p><a href="http://www.gnomemeeting.org/"><span style="color: #000000;">Ekiga</span></a>吗？  不是.</p>
<p><a href="https://www.skype.com/"><span style="color: #000000;">Skype</span></a>吗？</p>
<p>你说什么？Skype没有开源啊。是的，我们知道，不过Skype是其中表现最为出色的。而且，其用户群是非常大的。包括和电话互联，以及便宜的国际长途。</p>
<h2><strong>浏览器</strong></h2>
<p><a href="https://www.mozilla.com/firefox/"><span style="color: #000000;">Firefox</span></a>，不是吗？不用多解释了吧。</p>
<p> </p>
<h2><strong>电子邮件</strong></h2>
<p><a href="https://projects.gnome.org/evolution/"><span style="color: #000000;">Evolution</span></a> 并不仅仅是漂亮。它也可以和Gnome桌面集成。</p>
<h2><strong>开发环境</strong></h2>
<p>Windows 程序员有 <a href="https://en.wikipedia.org/wiki/Microsoft_Visual_Studio"><span style="color: #000000;">Visual Studio</span></a>.  Mac 程序员有 <a href="https://en.wikipedia.org/wiki/Xcode"><span style="color: #000000;">XCode</span></a>.</p>
<p>当然，Linux下也有很多。挑选一个很不错的开发环境，我们当然需要有一些标准的规则。有一个“标准”是，开发工具应该是和操作系统紧密结合的，而且需要有一堆可用的工具，这样可以避免程序员再重新发明轮子。</p>
<p><a href="http://lunduke.com/wp-content/uploads/2009/05/ss-stetic.png"><img alt="image placeholder" >
<p>那么，最容易得到和有丰富功能的IDE又是什么呢？</p>
<p><a href="http://monodevelop.com/"><span style="color: #000000;">MonoDevelop</span></a>.</p>
<p>是的， 我知道有人说过 “Mono is bad cuz of teh Microsoft.” 不过，如果你确实地相信这句话，那么你自然也就不是一个专业的程序员，而且，你可能在很多地方都在焦虑着一些事情。</p>
<p>MonoDevelop 是一个很不错的IDE开发工具。希望你能试试。</p>
<p>文章：<a href="http://lunduke.com/?p=616" target="_blank">来源</a></p>
<p align="center"><img alt="image placeholder" >
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/19219.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/18654.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/18360.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/17998.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/17416.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/17200.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
</ul>
</div></div>
<div id="post-ratings-936" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="c37b76ecba">
<img alt="image placeholder" >
<meta itemprop="headline" content="最完美的Linux桌面软件">
<meta itemprop="description" content="
下面是关于Linux桌面环境下，目前为止最完美的部分。之所以说他们完美，是因为他们不但很养眼，而且也使用最好的多媒体技术，有最好的可用性。在某些方面，他们甚至超过了Windows和Mac-OS。

 

基础
Debian 或是 Ubuntu。这两个分发包是目前使用最广泛的Linux桌面操作系统的分发包了。


软件包管理器
因为我们使用debian……所以apt 必然是软件...">
<meta itemprop="datePublished" content="2009-05-31T12:12:44+08:00">
<meta itemprop="dateModified" content="2009-05-31T13:36:55+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/936.html">
<meta itemprop="author" content="陈皓">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/936.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="3.7">
<meta itemprop="ratingCount" content="10">
</div>
</div>
<div id="post-ratings-936-loading" class="post-ratings-loading">
<img alt="image placeholder" >
 ]]></content>
<pubDate>2009-05-31T12:12:44+08:00</pubDate>
<guid>https://coolshell.cn/articles/936.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ C语言的谜题 ]]></title>
<link>https://coolshell.cn/articles/945.html</link>
<content><![CDATA[ 
<p>这几天，本站推出了几篇关于C语言的很多文章如下所示：</p>
<ul>
<li>
<strong>语言的歧义</strong> [<a href="https://coolshell.cn/articles/830.html" target="_blank">酷壳链接</a>] [<a href="http://blog.csdn.net/haoel/archive/2009/05/18/4197010.aspx" target="_blank">CSDN链接</a>]</li>
<li>
<strong>谁说C语言很简单？</strong> [<a href="https://coolshell.cn/articles/873.html" target="_blank">酷壳链接</a>] [<a href="http://blog.csdn.net/haoel/archive/2009/05/26/4217950.aspx" target="_blank">CSDN链接</a>]</li>
<li>
<strong>6个变态的C语言Hello World程序</strong> [<a href="https://coolshell.cn/articles/914.html" target="_blank">酷壳链接</a>] [<a href="http://blog.csdn.net/haoel/archive/2009/05/26/4217565.aspx" target="_blank">CSDN链接</a>]</li>
<li>
<strong>如何加密/弄乱C源代码</strong> [<a href="https://coolshell.cn/articles/933.html" target="_blank">酷壳链接</a>] [<a href="http://blog.csdn.net/haoel/archive/2009/05/30/4225974.aspx" target="_blank">CSDN链接</a>]</li>
<li>
<strong>C语言的谜题</strong> [<a href="https://coolshell.cn/articles/945.html" target="_blank">酷壳链接</a>] [<a href="http://blog.csdn.net/haoel/archive/2009/06/01/4231029.aspx" target="_blank">CSDN链接</a>]</li>
</ul>
<p>我们可以看到很多C语言相关的一些东西。比如《语言的歧义》主要告诉了大家C语言中你意想不到的错误以及一些歧义上的东西。而《谁说C语言很简单》则通过一些看似你从来不可能写出的代码来告诉大家C语言并不是一件容易事情。《6个变态的hello world》和《如何弄乱C的源代码》则以一种极端的方式告诉大家，不要以为咱们自己写不出混乱的代码，每个程序员其实都有把代码搞得一团乱的潜质。通过这些文章，相信你对编程或是你觉得很简单的C语言有了一些了解。是的，很不容易吧，以前是不是低估了编程和C语言？今天是否我们又在低估C++和Java呢？</p>
<p>本篇文章《C语言的谜题》展示了14个C语言的迷题以及答案，代码应该是足够清楚的，而且我也相信有相当的一些例子可能是我们日常工作可能会见得到的。通过这些迷题，希望你能更了解C语言。如果你不看答案，不知道是否有把握回答各个谜题？让我们来试试。</p>
<p><span id="more-945"></span></p>
<p><strong>1、下面的程序并不见得会输出 hello-std-out，你知道为什么吗？</strong><br>
</p>
<pre data-enlighter-language="c" class="EnlighterJSRAW">#include &lt;stdio.h&gt;
#include &lt;unistd.h&gt;
int main()  
{
    while(1)
    {
        fprintf(stdout,"hello-std-out");
        fprintf(stderr,"hello-std-err");
        sleep(1);
    }
    return 0;
}
</pre>
<p><strong>参考答案</strong>：stdout和stderr是不是同设备描述符。stdout是块设备，stderr则不是。对于块设备，只有当下面几种情况下才会被输入，1）遇到回车，2）缓冲区满，3）flush被调用。而stderr则不会。</p>
<p><strong>2、下面的程序看起来是正常的，使用了一个逗号表达式来做初始化。</strong>可惜这段程序是有问题的。你知道为什么呢？<br>
</p>
<pre data-enlighter-language="c" class="EnlighterJSRAW">#include &lt;stdio.h&gt;

int main()
{
    int a = 1,2;
    printf("a : %d\n",a);
    return 0;
}
</pre>
<p><strong>参考答案</strong>：这个程序会得到编译出错（语法出错），逗号表达式是没错，可是在初始化和变量声明时，逗号并不是逗号表达式的意义。这点要区分，要修改上面这个程序，你需要加上括号： int a = (1,2);</p>
<p><strong>3、下面的程序会有什么样的输出呢？</strong></p>
<p></p>
<pre data-enlighter-language="c" class="EnlighterJSRAW">#include &lt;stdio.h&gt;
int main()
{
    int i=43;
    printf("%d\n",printf("%d",printf("%d",i)));
    return 0;
}
</pre>
<p><strong>参考答案</strong>：程序会输出4321，你知道为什么吗？要知道为什么，你需要知道printf的返回值是什么。printf返回值是输出的字符个数。</p>
<p><strong>4、下面的程序会输出什么？</strong></p>
<p></p>
<pre data-enlighter-language="c" class="EnlighterJSRAW">#include &lt;stdio.h&gt;
int main()  
{
    float a = 12.5;
    printf("%d\n", a);
    printf("%d\n", (int)a);
    printf("%d\n", *(int *)&amp;a);
    return 0;  
}
</pre>
<p><strong>参考答案</strong>：<br>
该项程序输出如下所示，<br>
0<br>
12<br>
1095237632<br>
原因是：浮点数是4个字节，12.5f 转成二进制是：01000001010010000000000000000000，十六进制是：0x41480000，十进制是：1095237632。所以，第二和第三个输出相信大家也知道是为什么了。而对于第一个，为什么会输出0，我们需要了解一下float和double的内存布局，如下：</p>
<ul>
<li>
<strong>float</strong>: 1位符号位(s)、8位指数(e)，23位尾数(m,共32位) </li>
<li>
<strong>double</strong>: 1位符号位(s)、11位指数(e)，52位尾数(m,共64位)</li>
</ul>
<p>然后，我们还需要了解一下printf由于类型不匹配，所以，会把float直接转成double，注意，12.5的float和double的内存二进制完全不一样。别忘了在x86芯片下使用是的反字节序，高位字节和低位字位要反过来。所以：</p>
<ul>
<li>
<strong>float版</strong>：0x41480000 (在内存中是：00 00 48 41)</li>
<li>
<strong>double版</strong>：0x4029000000000000 (在内存中是：00 00 00 00 00 00 29 40)</li>
</ul>
<p>而我们的%d要求是一个4字节的int，对于double的内存布局，我们可以看到前四个字节是00，所以输出自然是0了。</p>
<p>这个示例向我们说明printf并不是类型安全的，这就是为什么C++要引如cout的原因了。</p>
<p><strong>5、下面，我们再来看一个交叉编译的事情，下面的两个文件可以编译通过吗？如果可以通过，结果是什么？</strong></p>
<p>file1.c<br>
</p>
<pre data-enlighter-language="c" class="EnlighterJSRAW">  int arr[80];
</pre>
<p>file2.c<br>
</p>
<pre data-enlighter-language="c" class="EnlighterJSRAW">extern int *arr;
int main()  
{      
    arr[1] = 100;
    printf("%d\n", arr[1]);
    return 0;  
}
</pre>
<p><strong>参考答案</strong>：该程序可以编译通过，但运行时会出错。为什么呢？原因是，在另一个文件中用 extern int *arr来外部声明一个数组并不能得到实际的期望值，因为他们的类型并不匹配。所以导致指针实际并没有指向那个数组。注意：一个指向数组的指针，并不等于一个数组。修改：extern int arr[]。（参考：ISO C语言 6.5.4.2 节）</p>
<p><strong>6、请说出下面的程序输出是多少？并解释为什么？</strong>（注意，该程序并不会输出 “b is 20″）</p>
<p></p>
<pre data-enlighter-language="c" class="EnlighterJSRAW">#include &lt;stdio.h&gt;
int main()  
{      
    int a=1;      
    switch(a)      
    {   
        int b=20;          
        case 1: 
            printf("b is %d\n",b);
            break;
        default:
            printf("b is %d\n",b);
            break;
    }
    return 0;
}
</pre>
<p><strong>参考答案</strong>：该程序在编译时，可能会出现一条warning: unreachable code at beginning of switch statement。我们以为进入switch后，变量b会被初始化，其实并不然，因为switch-case语句会把变量b的初始化直接就跳过了。所以，程序会输出一个随机的内存值。</p>
<p><strong>7、请问下面的程序会有什么潜在的危险？</strong></p>
<p></p>
<pre data-enlighter-language="c" class="EnlighterJSRAW">#include &lt;stdio.h&gt;
int main()  
{      
    char str[80];
    printf("Enter the string:");
    scanf("%s",str);
    printf("You entered:%s\n",str);
    return 0;
}
</pre>
<p><strong>参考答案</strong>：本题很简单了。这个程序的潜在问题是，如果用户输入了超过80个长度的字符，那么就会有数组越界的问题了，你的程序很有可以及会crash了。</p>
<p><strong>8、请问下面的程序输出什么？</strong></p>
<p></p>
<pre data-enlighter-language="c" class="EnlighterJSRAW">#include &lt;stdio.h&gt;
int main()  
{
    int i;
    i = 10;
    printf("i : %d\n",i);
    printf("sizeof(i++) is: %d\n",sizeof(i++));
    printf("i : %d\n",i);
    return 0;
}
</pre>
<p><strong>参考答案</strong>：如果你觉得输出分别是，10，4，11，那么你就错了，错在了第三个，第一个是10没有什么问题，第二个是4，也没有什么问题，因为是32位机上一个int有4个字节。但是第三个为什么输出的不是11呢？居然还是10？原因是，sizeof不是一个函数，是一个操作符，其求i++的类型的size，这是一件可以在程序运行前（编译时）完全的事情，所以，sizeof(i++)直接就被4给取代了，在运行时也就不会有了i++这个表达式。</p>
<p><strong>9、请问下面的程序的输出值是什么？</strong></p>
<p></p>
<pre data-enlighter-language="c" class="EnlighterJSRAW">#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;

#define SIZEOF(arr) (sizeof(arr)/sizeof(arr[0]))
#define PrintInt(expr) printf("%s:%d\n",#expr,(expr))

int main()
{
    /* The powers of 10 */
    int pot[] = {
                    0001,
                    0010,
                    0100,
                    1000
                };

    int i;
    for(i=0;i&lt;SIZEOF(pot);i++)
        PrintInt(pot[i]);
        
    return 0;
}
</pre>
<p><strong>参考答案</strong>：好吧，如果你对于PrintInt这个宏有问题的话，你可以去看一看《<a href="https://coolshell.cn/articles/830.html">语言的歧义</a>》中的第四个示例。不过，本例的问题不在这里，本例的输出会是：1，8，64，1000，其实很简单了，以C/C++中，以0开头的数字都是八进制的。</p>
<p><strong>10、请问下面的程序输出是什么？（绝对不是10）</strong></p>
<pre>#include <stdio.h>
#define PrintInt(expr) printf("%s : %dn",#expr,(expr))

int main()  
{
    int y = 100;
    int *p;
    p = malloc(sizeof(int));
    *p = 10;
    y = y/*p; /*dividing y by *p */;
    PrintInt(y);
    return 0;
}
</stdio.h></pre>
<p><strong>参考答案</strong>：本题输出的是100。为什么呢？问题就出在 y = y/*p;上了，我们本来想的是 y / (*p) ，然而，我们没有加入空格和括号，结果y/*p中的 /*被解释成了注释的开始。于是，这也是整个恶梦的开始。</p>
<p><strong>11、下面的输出是什么？</strong></p>
<p></p>
<pre data-enlighter-language="c" class="EnlighterJSRAW">#include &lt;stdio.h&gt;
int main()  
{
    int i = 6;
    if( ((++i &lt; 7) &amp;&amp; ( i++/6)) || (++i &lt;= 9))
        ;

    printf("%d\n",i);
    return 0;
}
</pre>
<p><strong>参考答案</strong>：本题并不简单的是考前缀++或反缀++，本题主要考的是&amp;&amp;和||的短路求值的问题。所为短路求值：对于（条件1 &amp;&amp; 条件2），如果“条件1”是false，那“条件2”的表达式会被忽略了。对于（条件1 || 条件2），如果“条件1”为true，而“条件2”的表达式则被忽略了。所以，我相信你会知道本题的答案是什么了。</p>
<p><strong>12、下面的C程序是合法的吗？如果是，那么输出是什么？</strong><br>
</p>
<pre data-enlighter-language="c" class="EnlighterJSRAW">#include &lt;stdio.h&gt;
int main()  
{ 
    int a=3, b = 5;

    printf(&amp;a["Ya!Hello! how is this? %s\n"], &amp;b["junk/super"]);
    
    printf(&amp;a["WHAT%c%c%c  %c%c  %c !\n"], 1["this"],
        2["beauty"],0["tool"],0["is"],3["sensitive"],4["CCCCCC"]);
        
    return 0;  
}
</pre>
<p><strong>参考答案</strong>：<br>
本例是合法的，输出如下：</p>
<blockquote><p> Hello! how is this? super<br>
That is C !</p></blockquote>
<p>本例主要展示了一种另类的用法。下面的两种用法是相同的：</p>
<blockquote><p> “hello”[2]<br>
2[“hello”]</p></blockquote>
<p>如果你知道：a[i] 其实就是 *(a+i)也就是 *(i+a)，所以如果写成 i[a] 应该也不难理解了。</p>
<p><strong>13、请问下面的程序输出什么？</strong>（假设：输入 Hello, World）</p>
<p></p>
<pre data-enlighter-language="c" class="EnlighterJSRAW">#include &lt;stdio.h&gt;
int main()  
{ 
    char dummy[80];
    printf("Enter a string:\n");
    scanf("%[^r]",dummy);
    printf("%s\n",dummy);
    return 0;
}
</pre>
<p><strong>参考答案</strong>：本例的输出是“Hello, Wo”，scanf中的”%[^r]”是从中作梗的东西。意思是遇到字符r就结束了。</p>
<p><strong>14、下面的程序试图使用“位操作”来完成“乘5”的操作，不过这个程序中有个BUG，你知道是什么吗？</strong></p>
<p></p>
<pre data-enlighter-language="c" class="EnlighterJSRAW">#include &lt;stdio.h&gt;
#define PrintInt(expr) printf("%s : %d\n",#expr,(expr))
int FiveTimes(int a)  
{
    int t;
    t = a&lt;&lt;2 + a;
    return t;
}

int main()  
{
    int a = 1, b = 2,c = 3;
    PrintInt(FiveTimes(a));
    PrintInt(FiveTimes(b));
    PrintInt(FiveTimes(c));
    return 0;
}
</pre>
<p><strong>参考答案</strong>：本题的问题在于函数FiveTimes中的表达式“t = a&lt;&lt;2 + a;”，对于a&lt;&lt;2这个位操作，优先级要比加法要低，所以这个表达式就成了“t = a &lt;&lt; (2+a)”，于是我们就得不到我们想要的值。该程序修正如下：
</p>
<pre data-enlighter-language="c" class="EnlighterJSRAW">int FiveTimes(int a)  
{
    int t;
    t = (a&lt;&lt;2) + a;
    return t;
}
</pre>
（全文完）
<footer class="entry-footer">
<hr>
<div class="row">
<div class="col-md-6 cattegories"><span class="cat-links"><i class="fa fa-folder-open"></i>
<a href="https://coolshell.cn/category/proglanguage/cplusplus" rel="category tag">C/C++语言</a>, <a href="https://coolshell.cn/category/proglanguage" rel="category tag">编程语言</a></span></div>
<div class="col-md-6 tags"><span class="tags-links"><i class="fa fa-tags"></i> <a href="https://coolshell.cn/tag/c" rel="tag">C++</a></span></div>
</div> </footer>


<div id="related_posts">
<div class="wp_rp_wrap  wp_rp_vertical_m"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/20845.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/18360.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/18024.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/12052.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/12012.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/11466.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
</ul>
</div></div>
</div>
<div class="fixed"></div> 

<div class="post-navigation">
<nav class="navigation" role="navigation">
<h2 class="screen-reader-text">Post navigation</h2>
<div class="nav-links">
<div class="row">

<div class="col-md-6 next-post">
<a class="" href="https://coolshell.cn/articles/956.html"><span class="next-prev-text"><i class="fa fa-angle-left"></i>
上一篇</span><br>《Vim Recipes》免费的Vim Cookbook</a>
</div>

<div class="col-md-6 prev-post">
<a class="" href="https://coolshell.cn/articles/936.html"><span class="next-prev-text">下一篇 <i class="fa fa-angle-right"></i>
</span><br>最完美的Linux桌面软件</a>
</div>
</div>
</div>
</nav>
</div>
<div class="post-comments">
<div id="comments" class="comments-area">
<h2 class="comments-title">
《<span>C语言的谜题</span>》的相关评论 </h2>
<ol class="comment-list">
<li id="comment-1840535" class="comment even thread-even depth-1">
<article id="div-comment-1840535" class="comment-body">
<footer class="comment-meta">
<div class="comment-author vcard">
<img alt="image placeholder" >
<div class="comment-metadata">
<a href="https://coolshell.cn/articles/945.html/comment-page-4#comment-1840535"><time datetime="2016-06-01T09:11:56+08:00">2016年06月01日 09:11</time></a> </div>
</footer>
<div class="comment-content">
<p>第6题，为何我这输出b is 20 windows gcc</p>
</div>
<div class="reply"><a rel="nofollow" class="comment-reply-link" href="https://coolshell.cn/articles/945.html/comment-page-4?replytocom=1840535#respond" data-commentid="1840535" data-postid="945" data-belowelement="div-comment-1840535" data-respondelement="respond" data-replyto="回复给我哎程序员" aria-label="回复给我哎程序员">回复</a></div> </article>
</li>
<li id="comment-1868974" class="pingback odd alt thread-odd thread-alt depth-1">
<div class="comment-body">
Pingback： <a href="http://www.178linux.com/2141" rel="external nofollow ugc" class="url">如何学好C语言 – linux运维部落</a> </div>
</li>
<li id="comment-1910110" class="pingback even thread-even depth-1">
<div class="comment-body">
Pingback： <a href="http://yang.lol/2017/01/06/c-%e8%af%ad%e8%a8%80%e7%bb%93%e6%9e%84%e4%bd%93%e9%87%8c%e7%9a%84%e6%88%90%e5%91%98%e6%95%b0%e7%bb%84%e5%92%8c%e6%8c%87%e9%92%88/" rel="external nofollow ugc" class="url">C 语言结构体里的成员数组和指针 – lol</a> </div>
</li>
<li id="comment-1914129" class="pingback odd alt thread-odd thread-alt depth-1">
<div class="comment-body">
Pingback： <a href="https://blog-scottwang.rhcloud.com/post/2017/05/21/how-to-study-c-well.html" rel="external nofollow ugc" class="url">如何学好C语言 | Scott-Blog</a> </div>
</li>
<li id="comment-1914837" class="pingback even thread-even depth-1">
<div class="comment-body">
Pingback： <a href="http://www.iszhou.com/2017/07/03/%e5%a6%82%e4%bd%95%e5%ad%a6%e5%a5%bdc%e8%af%ad%e8%a8%80/" rel="external nofollow ugc" class="url">如何学好C语言-iszhou</a> </div>
</li>
<li id="comment-1919527" class="comment odd alt thread-odd thread-alt depth-1 parent">
<article id="div-comment-1919527" class="comment-body">
<footer class="comment-meta">
<div class="comment-author vcard">
<img alt="image placeholder" >
<div class="comment-metadata">
<a href="https://coolshell.cn/articles/945.html/comment-page-4#comment-1919527"><time datetime="2017-10-23T09:45:39+08:00">2017年10月23日 09:45</time></a> </div>
</footer>
<div class="comment-content">
<p>12有错误<br>
printf(&amp;a[“WHAT%c%c%c %c%c %c !\n”], 1[“this”],<br>
第一个参数不支持这种形式了。</p>
</div>
<div class="reply"><a rel="nofollow" class="comment-reply-link" href="https://coolshell.cn/articles/945.html/comment-page-4?replytocom=1919527#respond" data-commentid="1919527" data-postid="945" data-belowelement="div-comment-1919527" data-respondelement="respond" data-replyto="回复给wuduer" aria-label="回复给wuduer">回复</a></div> </article>
<ol class="children">
<li id="comment-1919528" class="comment even depth-2">
<article id="div-comment-1919528" class="comment-body">
<footer class="comment-meta">
<div class="comment-author vcard">
<img alt="image placeholder" >
<div class="comment-metadata">
<a href="https://coolshell.cn/articles/945.html/comment-page-4#comment-1919528"><time datetime="2017-10-23T09:54:42+08:00">2017年10月23日 09:54</time></a> </div>
</footer>
<div class="comment-content">
<p>不好意思 看错了 这个没问题</p>
</div>
<div class="reply"><a rel="nofollow" class="comment-reply-link" href="https://coolshell.cn/articles/945.html/comment-page-4?replytocom=1919528#respond" data-commentid="1919528" data-postid="945" data-belowelement="div-comment-1919528" data-respondelement="respond" data-replyto="回复给wuduer" aria-label="回复给wuduer">回复</a></div> </article>
</li>
</ol>
</li>
<li id="comment-1940131" class="pingback odd alt thread-even depth-1">
<div class="comment-body">
Pingback： <a href="https://coolshell.cn/articles/7965.html" rel="external nofollow ugc" class="url">一个fork的面试题 | | 酷 壳 - CoolShell</a> </div>
</li>
<li id="comment-1949193" class="comment even thread-odd thread-alt depth-1">
<article id="div-comment-1949193" class="comment-body">
<footer class="comment-meta">
<div class="comment-author vcard">
<img alt="image placeholder" >
<div class="comment-metadata">
<a href="https://coolshell.cn/articles/945.html/comment-page-4#comment-1949193"><time datetime="2018-12-25T15:36:08+08:00">2018年12月25日 15:36</time></a> </div>
</footer>
<div class="comment-content">
<p>这些谜题, 其实都不算什么, 也算不上谜题, 有的是c语言本身语法有缺陷, 比如 y/*p , 这个就是注释的语法有缺陷,放到ide里看就很清楚了. 有的是linux操作系统的问题,比如块设备和字符设备的缓冲,不是c语言的问题.<br>
还有的题目有点谭浩强的意思 ++i++, 这本身就是不应该出现再代码里的.还有的是运算符优先级的问题,总之我感觉这些问题本身只能说明c语言有缺陷,而不能说明c语言有多强.</p>
</div>
<div class="reply"><a rel="nofollow" class="comment-reply-link" href="https://coolshell.cn/articles/945.html/comment-page-4?replytocom=1949193#respond" data-commentid="1949193" data-postid="945" data-belowelement="div-comment-1949193" data-respondelement="respond" data-replyto="回复给wenshangzhongdu@163.com" aria-label="回复给wenshangzhongdu@163.com">回复</a></div> </article>
</li>
<li id="comment-1998853" class="pingback odd alt thread-even depth-1">
<div class="comment-body">
Pingback： <a href="http://pintouge.online/?p=616" rel="external nofollow ugc" class="url">当printf(“-“)遇上fork() —某公司招聘笔试题目 – 平头哥个人博客</a> </div>
</li>
<li id="comment-2219746" class="comment even thread-odd thread-alt depth-1">
<article id="div-comment-2219746" class="comment-body">
<footer class="comment-meta">
<div class="comment-author vcard">
<img alt="image placeholder" >
<div class="comment-metadata">
<a href="https://coolshell.cn/articles/945.html/comment-page-4#comment-2219746"><time datetime="2021-03-18T19:37:30+08:00">2021年03月18日 19:37</time></a> </div>
</footer>
<div class="comment-content">
<p>我记得APUE里面说块设备只有缓冲区满或者fflush时才会执行IO吧。</p>
</div>
<div class="reply"><a rel="nofollow" class="comment-reply-link" href="https://coolshell.cn/articles/945.html/comment-page-4?replytocom=2219746#respond" data-commentid="2219746" data-postid="945" data-belowelement="div-comment-2219746" data-respondelement="respond" data-replyto="回复给Kyle" aria-label="回复给Kyle">回复</a></div> </article>
</li>
</ol>
<nav class="navigation comment-navigation" role="navigation">
<h2 class="screen-reader-text">Comment navigation</h2>
<div class="nav-links">
<div id="commentnavi">
<span class="pages"><i class="fa fa-comments"></i> 评论分页</span>
<div id="commentpager">
<a class="prev page-numbers" href="https://coolshell.cn/articles/945.html/comment-page-3#comments">« 上一页</a>
<a class="page-numbers" href="https://coolshell.cn/articles/945.html/comment-page-1#comments">1</a>
<a class="page-numbers" href="https://coolshell.cn/articles/945.html/comment-page-2#comments">2</a>
<a class="page-numbers" href="https://coolshell.cn/articles/945.html/comment-page-3#comments">3</a>
<span aria-current="page" class="page-numbers current">4</span> <span id="cp_post_id">945</span>
</div>
<div class="fixed"></div>
</div>
</div>
</nav>
<div id="respond" class="comment-respond">
<h3 id="reply-title" class="comment-reply-title">发表评论 <small><a rel="nofollow" id="cancel-comment-reply-link" href="/articles/945.html#respond" style="display:none;">取消回复</a></small>
</h3>
<form action="https://coolshell.cn/wp-comments-post.php" method="post" id="commentform" class="comment-form" novalidate>
<p class="comment-notes"><span id="email-notes">您的电子邮箱地址不会被公开。</span> 必填项已用<span class="required">*</span>标注</p>
<p class="comment-form-comment"><label for="comment">评论</label> <textarea id="comment" name="comment" cols="45" rows="8" maxlength="65525" required="required"></textarea></p>
<p class="comment-form-author"><label for="author">显示名称 <span class="required">*</span></label> <input id="author" name="author" type="text" value="" size="30" maxlength="245" required="required"></p>
<p class="comment-form-email"><label for="email">电子邮箱地址 <span class="required">*</span></label> <input id="email" name="email" type="email" value="" size="30" maxlength="100" aria-describedby="email-notes" required="required"></p>
<p class="comment-form-url"><label for="url">网站地址</label> <input id="url" name="url" type="url" value="" size="30" maxlength="200"></p>
<p class="form-submit wp-block-button"><input name="submit" type="submit" id="submit" class="submit wp-block-button__link" value="发表评论"> <input type="hidden" name="comment_post_ID" value="945" id="comment_post_ID">
<input type="hidden" name="comment_parent" id="comment_parent" value="0">
</p>
<p style="display: none;"><input type="hidden" id="akismet_comment_nonce" name="akismet_comment_nonce" value="9108630048"></p>
<p style="display: none !important;"><label>Δ<textarea name="ak_hp_textarea" cols="45" rows="8" maxlength="100"></textarea></label><input type="hidden" id="ak_js" name="ak_js" value="0"><script data-cfasync="false" src="/cdn-cgi/scripts/5c5dd728/cloudflare-static/email-decode.min.js"></script><script>document.getElementById( "ak_js" ).setAttribute( "value", ( new Date() ).getTime() );</script></p>
</form> </div>
</div>
</div>
 ]]></content>
<pubDate>2009-05-31T17:39:58+08:00</pubDate>
<guid>https://coolshell.cn/articles/945.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ 《Vim Recipes》免费的Vim Cookbook ]]></title>
<link>https://coolshell.cn/articles/956.html</link>
<content><![CDATA[ 
<p>当今最流行的文本编辑器是什么，如果我的回答是vim应该不算过份吧。</p>
<p>在<a title="http://vim.runpaint.org/ " href="http://vim.runpaint.org/" target="_blank"> http://vim.runpaint.org/ </a>你可以获得一本关于vim的cookbook 《Vim Recipes》</p>
<p>如果你非常喜欢vim编辑器，千万不要错过这本书，使用这本书，你将会发现你在vim遇到问题都可以迎刃而解。</p>
<p>此书还在更新过程中，更多内容请关注<a title="http://vim.runpaint.org/ " href="http://vim.runpaint.org/" target="_blank">http://vim.runpaint.org/</a></p>
<p align="center"><img alt="image placeholder" >
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/11312.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/8883.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/7829.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/7166.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/5224.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/5479.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
</ul>
</div></div>
<div id="post-ratings-956" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="de52b395fa">
<img alt="image placeholder" >
<meta itemprop="headline" content="《Vim Recipes》免费的Vim Cookbook">
<meta itemprop="description" content="当今最流行的文本编辑器是什么，如果我的回答是vim应该不算过份吧。

在 http://vim.runpaint.org/ 你可以获得一本关于vim的cookbook 《Vim Recipes》

如果你非常喜欢vim编辑器，千万不要错过这本书，使用这本书，你将会发现你在vim遇到问题都可以迎刃而解。

此书还在更新过程中，更多内容请关注http://vim.runpaint.org/">
<meta itemprop="datePublished" content="2009-06-01T15:45:54+08:00">
<meta itemprop="dateModified" content="2009-06-01T16:19:28+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/956.html">
<meta itemprop="author" content="Neo">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/956.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="3.89">
<meta itemprop="ratingCount" content="9">
</div>
</div>
<div id="post-ratings-956-loading" class="post-ratings-loading">
<img alt="image placeholder" >
 ]]></content>
<pubDate>2009-06-01T15:45:54+08:00</pubDate>
<guid>https://coolshell.cn/articles/956.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ 18个Web开发的IDE ]]></title>
<link>https://coolshell.cn/articles/968.html</link>
<content><![CDATA[ 
<h3>Windows 下的IDE</h3>
<div id="ez-toc-container" class="ez-toc-v2_0_17 counter-hierarchy counter-decimal ez-toc-grey">
<div class="ez-toc-title-container">
<p class="ez-toc-title">目录</p>
<span class="ez-toc-title-toggle"></span>
</div>
<nav><ul class="ez-toc-list ez-toc-list-level-1">
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-1" href="#Visual_Web_Developer" title="Visual Web Developer">Visual Web Developer</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-2" href="#phpDesigner" title="phpDesigner">phpDesigner</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-3" href="#PHPEdit" title="PHPEdit">PHPEdit</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-4" href="#Visual_Studio_2008" title="Visual Studio 2008">Visual Studio 2008</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-5" href="#Expression_Web" title="Expression Web">Expression Web</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-6" href="#PhpEd" title="PhpEd">PhpEd</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-7" href="#BlueFish" title="BlueFish">BlueFish</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-8" href="#Dreamweaver_CS4" title="Dreamweaver CS4">Dreamweaver CS4</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-9" href="#Eclipse" title="Eclipse">Eclipse</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-10" href="#Aptana_Studio" title="Aptana Studio">Aptana Studio</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-11" href="#Netbeans" title="Netbeans">Netbeans</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-12" href="#Nvu" title="Nvu">Nvu</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-13" href="#Spket_IDE" title="Spket IDE">Spket IDE</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-14" href="#IntlliJ_IDEA" title="IntlliJ IDEA">IntlliJ IDEA</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-15" href="#Komodo_IDE" title="Komodo IDE">Komodo IDE</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-16" href="#Zend_Studio" title="Zend Studio">Zend Studio</a></li>
</ul></nav>
</div>
<h4>
<span class="ez-toc-section" id="Visual_Web_Developer"></span><a href="https://www.microsoft.com/express/vwd/"><span style="color: #468175;">Visual Web Developer</span></a><span class="ez-toc-section-end"></span>
</h4>
<div class="tutorial_image"><span style="color: #468175;"><img alt="image placeholder" >
<ul>
<li>免费</li>
</ul>
<p>Visual Web Developer 是一个简单来说是Visual Studio的一个剥离版本，只有web 开发。和VS一样它有一个很不错的project 管理和数据库工具。这个IDE面对的是初学者。</p>
<p><span id="more-968"></span></p>
<h4>
<span class="ez-toc-section" id="phpDesigner"></span><a href="http://www.mpsoftware.dk/phpdesigner.php"><span style="color: #468175;">phpDesigner</span></a><span class="ez-toc-section-end"></span>
</h4>
<div class="tutorial_image"><span style="color: #468175;"><img alt="image placeholder" >
<ul>
<li>75€ (~$105)</li>
</ul>
<p><a href="http://www.phpeditors.com/"><span style="color: #468175;">www.phpeditors.com</span></a> 开发的 phpDesigner 是一个五星级的产品。他是一个超级快速的拥有强大功能的PHP的IDE。phpDesigner 提供一PHP调试器和性能分析器。它还支持所有WEB标准的语言。并提供了 TortoiseSVN 支持，并且支持PHP，HTML和CSS的实时的错误检测。还有一个代码片段程序库可以让你容易地获得简单的程序。</p>
<h4>
<span class="ez-toc-section" id="PHPEdit"></span><a href="http://www.phpedit.com/"><span style="color: #468175;">PHPEdit</span></a><span class="ez-toc-section-end"></span>
</h4>
<div class="tutorial_image"><span style="color: #468175;"><img alt="image placeholder" >
<ul>
<li>179€ (~$248)</li>
</ul>
<p>PHPEdit 是另一个漂亮的PHP IDE。它提供了调试器 (甚至有一个 Firefox 调试插件) 和数据库支持 (容易查询和创建数据表) ，还有一个非常不错的keyboard templates 可以让你很快地创建PHP的代码结构。使用PHPEdit可以非常容易地连接到服务器上。而且还有自动提示，自动完成的功能。</p>
<h4>
<span class="ez-toc-section" id="Visual_Studio_2008"></span><a href="https://www.microsoft.com/visualstudio/en-us/products/standard/default.mspx"><span style="color: #468175;">Visual Studio 2008</span></a><span class="ez-toc-section-end"></span>
</h4>
<div class="tutorial_image"><span style="color: #468175;"><img alt="image placeholder" >
<ul>
<li>$299 (标准版)</li>
</ul>
<p>Visual Studio is 简单的说来是为了.NET 项目而设计的。对于这个IDE，相信大家都很熟悉，我就不多说了。（有谣言说VS 2010要支持PHP，呵呵）</p>
<h4>
<span class="ez-toc-section" id="Expression_Web"></span><a href="https://www.microsoft.com/expression/products/overview.aspx?key=web"><span style="color: #468175;">Expression Web</span></a><span class="ez-toc-section-end"></span>
</h4>
<div class="tutorial_image"><span style="color: #468175;"><img alt="image placeholder" >
<ul>
<li>$299</li>
</ul>
<p>Expression Web 也是一个非常不错的整洁的WEB开发工具。其提供了一大堆CSS 支持。用其开发WEB程序相当方便，只要你愿意，其不但支持ASP.NET，也支持PHP 。而且，其有实时的 (X)HTML 检验。</p>
<p>最近，Microsoft 放出了<a href="https://www.microsoft.com/Expression/features/default.aspx?key=webpreview"><span style="color: #468175;">Expression Web SuperPreview</span></a>，这是一个可以预览你所开发的网页是否支持IE6, IE7 或是IE8 。</p>
<h4>
<span class="ez-toc-section" id="PhpEd"></span><a href="http://www.nusphere.com/products/phped.htm"><span style="color: #468175;">PhpEd</span></a><span class="ez-toc-section-end"></span>
</h4>
<div class="tutorial_image"><span style="color: #468175;"><img alt="image placeholder" >
<ul>
<li>$299</li>
</ul>
<p>PhpEd 内建了PHP, HTML, 和CSS 校验器。并提供了代码自动完成的功能。当然，也有PHP代码调试和性能profiling功能。PhpEd 有一个最有创造性的功能是动态的语法高亮。我们想像一下，如果我们有一个文件中有多种语言，这个功能会把你光标所在位置的语言高亮，而其它地方则是一般的文本。</p>
<h3>Linux 下的 IDE</h3>
<h4>
<span class="ez-toc-section" id="BlueFish"></span><a href="http://bluefish.openoffice.nl/"><span style="color: #468175;">BlueFish</span></a><span class="ez-toc-section-end"></span>
</h4>
<div class="tutorial_image"><span style="color: #468175;"><img alt="image placeholder" >
<ul>
<li>免费</li>
</ul>
<p>Bluefish 面对的是一个轻量级的干净的IDE。它提供了项目支持，支持远程管理服务器上的文件。有代码自动完成，并且支持 PHP, CSS, Python, 和HTML.</p>
<h3>Windows 和Mac 的IDE</h3>
<h4>
<span class="ez-toc-section" id="Dreamweaver_CS4"></span><a href="https://www.adobe.com/products/dreamweaver/"><span style="color: #468175;">Dreamweaver CS4</span></a><span class="ez-toc-section-end"></span>
</h4>
<div class="tutorial_image"><span style="color: #468175;"><img alt="image placeholder" >
<ul>
<li>$399</li>
</ul>
<p>这个IDE就不多说了，超级强大和超级有名的IDE!</p>
<h3>Windows, Mac, 和Linux IDEs</h3>
<h4>
<span class="ez-toc-section" id="Eclipse"></span><a href="https://www.eclipse.org/"><span style="color: #468175;">Eclipse</span></a><span class="ez-toc-section-end"></span>
</h4>
<div class="tutorial_image"><span style="color: #468175;"><img alt="image placeholder" >
<ul>
<li>免费</li>
</ul>
<p>Eclipse 是一个史上最强大的IDE，它几乎可以做所有的事情，并有一堆插件支持。总之一句话，相当强大，无论是Java，PHP，无论是调试还是语法高亮以及其它功能，总之，相当不错。</p>
<h4>
<span class="ez-toc-section" id="Aptana_Studio"></span><a href="http://aptana.com/"><span style="color: #468175;">Aptana Studio</span></a><span class="ez-toc-section-end"></span>
</h4>
<div class="tutorial_image"><span style="color: #468175;"><img alt="image placeholder" >
<ul>
<li>免费</li>
</ul>
<p>Aptana Studio 可以独立运行，也可以成为Eclipse 的一个插件。它主张的是——<q>“The Leading IDE for Web App Development.”</q> ，使用其插件，你可以让这个IDE支持PHP, Ruby on Rails, Java, 等等。并也支持很多LIB，如：jQuery, Prototype, YUI, 等等。还有一个SQL 数据库工具，JavaScript 调试。总之，功能太强大了。强大到有些受不了。</p>
<h4>
<span class="ez-toc-section" id="Netbeans"></span><a href="https://netbeans.org/"><span style="color: #468175;">Netbeans</span></a><span class="ez-toc-section-end"></span>
</h4>
<div class="tutorial_image"><span style="color: #468175;"><img alt="image placeholder" >
<ul>
<li>免费</li>
</ul>
<p>这是一个开源的IDE，支持：PHP, Ruby on Rails, JavaScript, 等等。支持FTP 和MySQL。对于PHP，它提供了一个不错的调试器，以及错误警告。Netbeans 也是一个很不错的代码导航器，并整合了，很多framework及其文档，如jQuery 或Mootools.</p>
<h4>
<span class="ez-toc-section" id="Nvu"></span><a href="http://net2.com/nvu/"><span style="color: #468175;">Nvu</span></a><span class="ez-toc-section-end"></span>
</h4>
<div class="tutorial_image"><span style="color: #468175;"><img alt="image placeholder" >
<ul>
<li>免费</li>
</ul>
<p>Nvu 提供一个强大的“所见及所得”功能，其和Dreamweaver 和Expression Web相似，都是强调于编辑功能。</p>
<h4>
<span class="ez-toc-section" id="Spket_IDE"></span><a href="http://spket.com/"><span style="color: #468175;">Spket IDE</span></a><span class="ez-toc-section-end"></span>
</h4>
<div class="tutorial_image"><span style="color: #468175;"><img alt="image placeholder" >
<ul>
<li>$29.90 (免费的非商业使用)</li>
</ul>
<p>Spket 主要面对的是RIA 开发。其主要支持Javascript 和Flex,。</p>
<h4>
<span class="ez-toc-section" id="IntlliJ_IDEA"></span><a href="http://www.jetbrains.com/idea/features/index.html"><span style="color: #468175;">IntlliJ IDEA</span></a><span class="ez-toc-section-end"></span>
</h4>
<div class="tutorial_image"><span style="color: #468175;"><img alt="image placeholder" >
<ul>
<li>$249 (个人版)</li>
</ul>
<p>虽然IntelliJ IDEA 量个原生态的 Java 开发IDE，不过其支持一大堆的WEB技术，如HTML ，JavaScript，Flex，和SQL。提供了JavaScript 高度和重构，同样也有代码自动完成。IntelliJ IDEA 还有一个代码检查功能可以提供一些浏览器兼容性检查。</p>
<h4>
<span class="ez-toc-section" id="Komodo_IDE"></span><a href="https://www.activestate.com/komodo/"><span style="color: #468175;">Komodo IDE</span></a><span class="ez-toc-section-end"></span>
</h4>
<div class="tutorial_image"><span style="color: #468175;"><img alt="image placeholder" >
<ul>
<li>$295</li>
</ul>
<p>Komodo IDE 面对的是”dynamic languages and open technologies.” 其支持的是标准的WEB语言—HTML, CSS, JavaScript, PHP, 等等。同样也支持Ruby, python, Tcl, 等。这是一个坚固的编辑器。</p>
<h4>
<span class="ez-toc-section" id="Zend_Studio"></span><a href="http://www.zend.com/en/products/studio/"><span style="color: #468175;">Zend Studio</span></a><span class="ez-toc-section-end"></span>
</h4>
<div class="tutorial_image"><span style="color: #468175;"><img alt="image placeholder" >
<ul>
<li>$399</li>
</ul>
<p>Zend Studio 是Eclipse 的插件，当然，它也可以独立成为一个IDE。它主要面对的是PHP开发者。并有一个Zend Framework提供了一堆功能。是个非常成熟的PHP开发的IDE，相当的强大。</p>
<p>文章：<a href="http://net.tutsplus.com/articles/web-roundups/18-ides-for-windows-mac-linux/" target="_blank">来源</a></p>
<p align="center"><img alt="image placeholder" >
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/3684.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/17634.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/9666.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/6840.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/5224.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/4795.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
</ul>
</div></div>
<div id="post-ratings-968" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="d64e962f0f">
<img alt="image placeholder" >
<meta itemprop="headline" content="18个Web开发的IDE">
<meta itemprop="description" content="Windows 下的IDE
Visual Web Developer


	免费

Visual Web Developer 是一个简单来说是Visual Studio的一个剥离版本，只有web 开发。和VS一样它有一个很不错的project 管理和数据库工具。这个IDE面对的是初学者。


phpDesigner


	75€ (~$105)

www.phpedit...">
<meta itemprop="datePublished" content="2009-06-04T23:24:17+08:00">
<meta itemprop="dateModified" content="2009-06-04T23:24:17+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/968.html">
<meta itemprop="author" content="陈皓">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/968.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="3.2">
<meta itemprop="ratingCount" content="5">
</div>
</div>
<div id="post-ratings-968-loading" class="post-ratings-loading">
<img alt="image placeholder" >
 ]]></content>
<pubDate>2009-06-04T23:24:17+08:00</pubDate>
<guid>https://coolshell.cn/articles/968.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ 【原创】SQL栏目树的代码 ]]></title>
<link>https://coolshell.cn/articles/962.html</link>
<content><![CDATA[ 
<p>本文由网友whl供稿，特此感谢！<br>
/**<br>
  * Desc: 取栏目树 ,过滤用户权限和无效栏目<br>
  * Author: WHL<br>
  * Date: 2009-05-31 15:17<br>
  */<br>
<span id="more-962"></span><br>
 <br>
/** 1. 取某用户有权限（np_cms_column_security表有记录且t.action_1 = ‘1’）的栏目的树 **/<br>
</p>
<pre data-enlighter-language="sql" class="EnlighterJSRAW">create or replace view V_NP_CTREE_BS as
select B.* from (
select A.*, lag(A.column_id) over(partition by A.column_id order by 0 ) RK
  from (select /*+choose */
         t.*
          from np_cms_column t
         where t.is_active = '1'
        connect by prior t.column_id = t.parent_id
         start with t.column_id in (select t.column_id
                                      from np_cms_column_security t
                                     where t.subject_id = 'mazj'
                                          /*这里添加角色过滤*/
                                       and t.action_1 = '1'))A) B
 where not exists
 (select 0
          from (select distinct d.column_id
                  from np_cms_column d
                connect by prior d.column_id = d.parent_id
                 start with d.column_id in
                    (select t.column_id
                       from np_cms_column_security t
                      where t.subject_id = 'mazj'
                           /* 这里添加角色过滤*/
                        and t.action_1 = '0'
                           /* 排除有权限树下的非授权ID,既 Action_1=0的*/
                        and exists
                      (select 0
                               from (select distinct d.column_id
                                       from np_cms_column d
                                     connect by prior d.column_id =
                                                 d.parent_id
                                      start with d.column_id in
                                                 (select t.column_id
                                                    from np_cms_column_security t
                                                   where t.subject_id =
                                                         'mazj'
                                                        /*这里添加角色过滤*/
                                                     and t.action_1 = '1')) C1
                              where C1.column_id = t.column_id))
                        and d.is_active = '1') C
         where C.column_id = B.column_id and B.RK is null) and B.RK is null
union all
select c.*, 0 RK from np_cms_column c where c.parent_id = 0;
</pre>
<br>
————————————————————————<br>
/** 2.得到栏目的虚拟父亲ID（考虑到把断层的节点接起来）**/<br>
<pre data-enlighter-language="sql" class="EnlighterJSRAW">create or replace view V_NP_CTREE_PA as
select B.*,
       (case B.column_id
         when 1 then 0 else nvl(B.father, 1) end) VFA
  from (select v.*,
               (select vv.column_id
                  from V_NP_CTREE_BS vv
                 where vv.column_id = v.parent_id) FATHER
          from V_NP_CTREE_BS v) B;
</pre>
<br>
————————————————————————<br>
/** 3. 取出门户需要的栏目树 **/
<p></p>
<pre data-enlighter-language="sql" class="EnlighterJSRAW">--create or replace view V_NP_CTREE_RS as
select
 D.*, LPAD(' ', 2 * level - 1) || SYS_CONNECT_BY_PATH(D.COLUMN_NAME, '/') &amp;quot;Path&amp;quot;
  from (select c.*
          from V_NP_CTREE_PA c
         order by c.VFA, c.disorder desc, c.column_id desc) D
connect by prior D.column_id = D.VFA
 start with D.column_id = 1;
 
</pre>
<p>————————————————————————<br>
（<strong>本文版权由whl所，转载时请注明作者和出处</strong>）</p>
<p align="center"><img alt="image placeholder" >
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/8711.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/7490.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/7270.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/6639.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/3463.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/3433.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
</ul>
</div></div>
<div id="post-ratings-962" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="70adc98be8">
<img alt="image placeholder" >
<meta itemprop="headline" content="【原创】SQL栏目树的代码">
<meta itemprop="description" content="本文由网友whl供稿，特此感谢！
/**
  * Desc: 取栏目树 ,过滤用户权限和无效栏目
  * Author: WHL
  * Date: 2009-05-31 15:17
  */

 
/** 1. 取某用户有权限（np_cms_column_security表有记录且t.action_1 = '1'）的栏目的树 **/
[sql]create or replace...">
<meta itemprop="datePublished" content="2009-06-05T00:03:13+08:00">
<meta itemprop="dateModified" content="2009-06-08T00:12:54+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/962.html">
<meta itemprop="author" content="whl">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/962.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="3">
<meta itemprop="ratingCount" content="4">
</div>
</div>
<div id="post-ratings-962-loading" class="post-ratings-loading">
<img alt="image placeholder" >
 ]]></content>
<pubDate>2009-06-05T00:03:13+08:00</pubDate>
<guid>https://coolshell.cn/articles/962.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ 质量管理经中的八个法则 ]]></title>
<link>https://coolshell.cn/articles/971.html</link>
<content><![CDATA[ 
<p><span><span>质量管理在软件工程中是非常非常重要的一个环节，无论你有多么精妙的算法，或是使用了多么先进的技术，还是拥有了多少强的设计，在质量控制或质量管理面前，这些都可能什么都不是。这里，有一些质量管理的法则，可以让软件的用户从中受益。如果对质量管理一言以蔽之：面对一个长期不断需要改善的软件，当其用户或是管理者们来说，他们对某个组织所提供的标准有一种完全和最基本的信任。</span></span><a href="http://choosyinfo.com/blogs/wp-content/uploads/2009/06/qualitymangement.jpg"></a></p>
<p>下面，我们给出8个质量管理的法则：</p>
<p><strong>1. 始终从用户角度出发:</strong> “无论何时何地，我们都需要明白用户当前的或未来的需求，并能够达到用户的需求，甚至超出用户的期望。”</p>
<p>这是整个软件工程的重中之重。质量管理从某种意义上来说，就是实现用户需求的质量的管理。这需要我们的质量管理管理和用户的关系，以及把用户的需求和整个团队（开发组，测试组，产品组，项目组等等）进行有些的沟通管理。</p>
<p><span id="more-971"></span></p>
<p><strong>2. 领导能力: </strong>“领导者需要建立一个团结统一的有明确方向的团队。这个团队可以创造并维护一种良好的内部气氛，这种氛围可以使得所有的人都能参与进来，从而达到整个团队的目标。”</p>
<p>对此，我们需要有一个有前瞻性的领导能为整个团队创建一种相互信任的环境。提倡诚实，并积极引导团队成员。从而可以激励每个人，并创建一种策略（比如奖罚机制）来达到这这些目标。</p>
<p><strong>3. 团队成员主动参与性:</strong><span> “团队成员总是有不同分工和不同职责的，只有所有的团队成员都参与进来，那么整个项目或是整个软件的各个部分，各个方面才会得到完美的发挥。”</span></p>
<p><span>对此，让团队成员有主人翁精神，让他们觉得自己是工作或任务的所有者，是是否能让所有成员主动参与的关键。这里，我们还需要让每个被参与者都要从关注于用户的角度出发，并且帮助和支持团队成员，以及为他们营造一个比较满意的工作环境。</span></p>
<p><strong>4. 流程方法:</strong> “我们需要一个非常有效率的流程或方法来把所有的资源和日常工作活动整合在一起，形成一种生产线式的生产模式”</p>
<p>对此，定义一个合适的流程（注意这里是合适的流程，好的流程并不一定就是合适的）。这个流程需要有确定整个日常生产活动的输入，输出以及其功能。风险管理，分配责任，以及管理外部和内部的用户。</p>
<p><strong>5. 系统方法管理:</strong> “确定，理解，并管理一个系统相关的流程，以使得整个团队能够有效并快速地自我改善。”</p>
<p>对此，定义一个系统的组织架构，这个组织架构是高效和有效的。这里我们需要了解到团队的需求（硬件的，软件的，人员的，等等），并了解一些可能会发生的限制。这样我们才能有效地管理整个团队系统。</p>
<p><strong>6. 连续的改进:</strong> “不断地改进是一个团队需要给自己设制的永久目标”</p>
<p>对此，工作效率上的改进是整个改进的重中之重。工作效率方面，有大程度上取决于工作流程的改进，所以，流程改进是非常重要的，也是需要长期不断去努力改进的。要达到这一目标，一般来说，我们可以使用“计划——执行——检查——总结”这样的循环。</p>
<p><strong>7. 决策中的事实说话:</strong> “只有基于对实际数据和信息的分析后，我们才能制定出有效的决策和行动”</p>
<p>对此，我们需要注意日常数据和信息的收集，并且我们需要对采集到的数据和信息的精确性进行测量。这样才能让我们在进行决策和行动能基于正确的数据。</p>
<p><strong>8. 互惠互利:</strong> “一个团队中的各个部门或各个子团队虽然是在功能上是独立的，但是，一个互惠互利的局面可以增强整个团队或公司的整体能力并创建更大的价值。”</p>
<p><span>对此，我们需要一个健康的团队之间的关系。好的沟通只能让团队获益一时，而只有建立一个长期互惠互利关系或局面，才是长期。</span></p>
<p><span>（全文完）</span></p>
<p align="center"><img alt="image placeholder" >
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/76.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/3277.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/2941.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/1808.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/595.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/2497.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
</ul>
</div></div>
<div id="post-ratings-971" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="ecf83e04b4">
<img alt="image placeholder" >
<meta itemprop="headline" content="质量管理经中的八个法则">
<meta itemprop="description" content="质量管理在软件工程中是非常非常重要的一个环节，无论你有多么精妙的算法，或是使用了多么先进的技术，还是拥有了多少强的设计，在质量控制或质量管理面前，这些都可能什么都不是。这里，有一些质量管理的法则，可以让软件的用户从中受益。如果对质量管理一言以蔽之：面对一个长期不断需要改善的软件，当其用户或是管理者们来说，他们对某个组织所提供的标准有一种完全和最基本的信任。

下面，我们给出8个质量管理的法则：...">
<meta itemprop="datePublished" content="2009-06-06T21:41:59+08:00">
<meta itemprop="dateModified" content="2009-06-06T21:41:59+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/971.html">
<meta itemprop="author" content="陈皓">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/971.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="2.75">
<meta itemprop="ratingCount" content="4">
</div>
</div>
<div id="post-ratings-971-loading" class="post-ratings-loading">
<img alt="image placeholder" >
 ]]></content>
<pubDate>2009-06-06T21:41:59+08:00</pubDate>
<guid>https://coolshell.cn/articles/971.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ 编程语言的评测 ]]></title>
<link>https://coolshell.cn/articles/973.html</link>
<content><![CDATA[ 
<p><strong>摘要</strong>：这篇文章的原文出处在<a href="http://gmarceau.qc.ca/blog/2009/05/speed-size-and-dependability-of.html">这里</a> 我意译了整篇文章。结合<a href="http://shootout.alioth.debian.org/">计算机语言评测基准</a>这个网站来读此文还是比较有意思。当然也不能以这个评测结果就贸然断定什么语言最好，什么语言不好。没有好不好的语言，只有适不适用于你解决问题域的语言。就文章而言请大家还是不必太过认真，就当从另一个方面来了解一下这33种编程语言吧。</p>
<p><a href="http://shootout.alioth.debian.org/">计算机语言评测基准</a>是一个由429个程序组成的集合，它评测了33个程序语言的13的重复实现的基准程序。如果你想量化的比较不同语言，那么这个是一个非常不错的资源。</p>
<p>在计算机评测基准中，评测者为了尽量让评测准确，非常谨慎的选择了13个基准程序，这13个基准程序并不针对某以特定语言有特殊的优化。对于评测选择33中语言都实现了13个基准程序。当然，除了速度这个指标外，程序基准评测同时也为每一个基准测试程序发布一个编码大小指标。非常感谢基准评测让我们看到程序设计中非常重要的一个方面：程序语言的性能和程序语言灵活性之间的矛盾。正是这个矛盾给所谓“高级编程语言”带上一个含蓄的轻蔑的意思。即，当你在使用这些高级语言编码时，你也许可以编写出漂亮的代码，但是你是如此的远离了硬件，你不可能获得更好的性能，是这样的吗？</p>
<p><span id="more-973"></span></p>
<p><a rel="attachment wp-att-976" href="https://coolshell.cn/?attachment_id=976"><img alt="image placeholder" >
如果我们将基准测试程序的结果放在一张XY的图表上，那么我们就可以为这张表的4个角命名。快速而复杂的语言应积聚在图表的左上角。我们把这类语言称为系统语言。简洁但慢速的语言应该聚集在右下角，我们称之为脚本语言。在右上角，应该是过时的语言。除非这些语言具有非常吸引人的特性，否则语言已经被新出现的语言所淘汰。最后在左下角，基本上找不到对应的语言，因为在这一区域的语言是理想状态的语言。在这个区域的语言是又快又短又利于使用的语言。</p>
<p>图中每一个小点就代表一种语言的一个基准程序实现，因此这图里面共有429个点，每个点的XY轴分别代表了其和最好的语言实现差距的倍数(从语言的复杂性和语言执行性能来说)，其中一些点比较分散，我们就没有在图中画出。从上面这个图我们可以看到这些粉红色点沿着Y轴(复杂性)比X轴(执行性能)分布更统一，这是不是意味着，人类在提升语言表达的灵活性上还在稳步的不断进步，而在提升语言性能方面却遇到了很多的麻烦呢：）</p>
<p>针对每一个种语言，比如说scala语言，我们用下面的图来描述：图的中心点，是这个语言测试结果的平均值，然后做每一个评测结果的具体值到这个均值的连线就够成了一个星型图。这个图说明了scala一些特性，在X轴性能上来说，大部分点都分布在靠近左边，说明scala的性能是不错的，如果优化JVM的话，scala可以大部分提高性能，但是scala性能分布并不一致，其中的一个点甚至到了最右边。就语言复杂性(Y轴)来说，scala的表现也不错，不过有时候为了获得高性能，也会导致语言复杂提高，比如scala的其中一个点就在最顶端。</p>
<p><a rel="attachment wp-att-974" href="https://coolshell.cn/?attachment_id=974"><img alt="image placeholder" >
<p>通过为每一种语言形成如上的一个图，我们最后可以为这33种语言评的测结果形成了如下的一个图，这是一个6*6的图。其中每一个小图具有同样的轴和同样的精度。这张图的目的是为了方便的比较每一个语言的星型。这些图按语言的平均性能来组织列，最左边的语言的性能最好，最右边的语言性能最差，在每一列中的语言又按照平均的语言代码量(复杂程度)进行排列，代码量最小的语言在最低端，代码量最大的在最顶端。</p>
<figure id="attachment_975" aria-describedby="caption-attachment-975" style="width: 275px" class="wp-caption aligncenter"><a title="点击看大图" href="https://coolshell.cn/wp-content/uploads/2009/06/size-vs-speed-vs-depandability-2009.png"><img alt="image placeholder" >
<p>在图的最左边的性能是最好的，又高又瘦的星型，我们可以看到，除了GCC和G++外，其他的性能都显示了惊人的一致性(每一个基准测试程序的性能都非常接近)。而JAVA也非常骄傲的出现在一组中，这说明经过了10年的优化后，Java运行时的性能已经得到长足的提高(要用Java做大系统的人是否还会犹豫呢：）)。<br>
在图的右边，我们看到了一些又胖又矮的星型，这些是一些脚本语言，从图中可以看出，这些脚本语言社区的人们当他们在不断改善他们语言的表达性的同时并没有花大力气在性能的改善上。然而也有例外，Lua这门脚本语言就有很好的执行性能。</p>
<p align="center"><img alt="image placeholder" >
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/6639.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/4626.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/3385.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/3100.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/2724.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/2598.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
</ul>
</div></div>
<div id="post-ratings-973" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="20f933e69f">
<img alt="image placeholder" >
<meta itemprop="headline" content="编程语言的评测">
<meta itemprop="description" content="摘要：这篇文章的原文出处在这里 我意译了整篇文章。结合计算机语言评测基准这个网站来读此文还是比较有意思。当然也不能以这个评测结果就贸然断定什么语言最好，什么语言不好。没有好不好的语言，只有适不适用于你解决问题域的语言。就文章而言请大家还是不必太过认真，就当从另一个方面来了解一下这33种编程语言吧。

计算机语言评测基准是一个由429个程序组成的集合，它评测了33个程序语言的13的重复实现的基准...">
<meta itemprop="datePublished" content="2009-06-06T22:50:49+08:00">
<meta itemprop="dateModified" content="2009-06-07T23:59:13+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/973.html">
<meta itemprop="author" content="Neo">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/973.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="3.43">
<meta itemprop="ratingCount" content="7">
</div>
</div>
<div id="post-ratings-973-loading" class="post-ratings-loading">
<img alt="image placeholder" >
 ]]></content>
<pubDate>2009-06-06T22:50:49+08:00</pubDate>
<guid>https://coolshell.cn/articles/973.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ 编程中的命名设计那点事 ]]></title>
<link>https://coolshell.cn/articles/990.html</link>
<content><![CDATA[ 
<p>在我开始设计系统的时候，我会花去很多时间去设计命名，因为好的命名和好的设计是分不开的。</p>
<blockquote><p>In the beginning was the <strong>Word</strong>, and the Word was with God, and the Word was God<br>
太初有道。道与神同在，道就是神。 (约翰福音第一章，第一节)</p></blockquote>
<p>在设计过程中给类，方法和函数好的命名会带来好的设计，虽然这不是一定成立，但是如果坏的命名那一定不会给你带来好的设计。在设计过程，如果你发现你很难命名某一个模块，某个方法时，可能你真正遇到的问题不是难命名的问题，而是这个设计是否真的合理，你或许应该花更多的时间来重新设计一下你的模块。</p>
<p>好的命名不仅会带来好的设计，好的命名还提高了程序的可读性，降低代码维护的成本。另一方面，如果糟糕的命名会给代码带来一堵无形的墙，让你必须深入代码去研究代码具有的行为，增加你理解代码的时间。</p>
<p>为此我总结了几条关于命名的指导原则，希望这几条原则能为你的命名设计带来帮助，我使用的是C++的语法，当然这些原则也很容易扩展到其他语言中去。</p>
<h3><span style="color: #339966;">类型命名(类，接口，和结构)</span></h3>
<p><span style="color: #339966;"><br>
</span></p>
<p><span style="color: #0000ff;"><strong>名字应该尽量采用名词</strong></span><br>
<code>Bad:           Happy<br>
Good:          Happiness</code></p>
<p><span id="more-990"></span></p>
<p><span style="color: #0000ff;"><strong>不要使用类似名字空间的前缀</strong></span><br>
<code>Bad:           SystemOnlineMessage<br>
Good:          System::Online:Message<br>
</code></p>
<p><span style="color: #0000ff;"><strong>形容词不要用太多，能描述清楚就行</strong></span><br>
<code>Bad:           IAbstractFactoryPatternBase<br>
Good:          IFactory<br>
</code></p>
<p><span style="color: #0000ff;"><strong>在类型中不要使用Manager 或则 Helper 或则其他没意义的单词</strong></span><br>
如果你一定要在一个类型上加上Manager或Helper，那么这个类型要么就是命名的非常糟糕，要么就是设计的非常糟糕，如果是后则，那么这个类型就应该管理manage和帮助help一下自己了。<br>
<code>Bad:           ConnectionManager<br>
               XmlHelper<br>
Good:          Connection<br>
               XmlDocument, XmlNode, etc.<br>
</code></p>
<p><span style="color: #0000ff;"><strong>如果某个类不能通过简单的命名来描述它具有的功能，可以考虑用类比的方式来命名</strong></span><code><br>
Bad:           IncomingMessageQueue<br>
               CharacterArray<br>
               SpatialOrganizer<br>
Good:          Mailbox<br>
               String<br>
               Map<br>
</code></p>
<p><span style="color: #0000ff;"><strong>如果你使用类比，你就应该一致的使用它们</strong></span><br>
<code>Bad:           Mailbox,DestinationID<br>
Good:          Mailbox,Address<br>
</code></p>
<h3><span style="color: #339966;">函数(方法和过程)</span></h3>
<p><span style="color: #339966;"><br>
</span></p>
<p><span style="color: #0000ff;"><strong>简洁</strong></span><br>
<code>Bad:           list.GetNumberOfItems()<br>
Good:          list.Count()<br>
</code></p>
<p><span style="color: #0000ff;"><strong>不要太简洁</strong></span><br>
<code>Bad:           list.Verify()<br>
Good:          list.ContainsNull()<br>
</code></p>
<p><span style="color: #0000ff;"><strong>避免缩写</strong></span><br>
<code>Bad:           list.Srt()<br>
Good:          list.Sort()<br>
</code></p>
<p><span style="color: #0000ff;"><strong>对于完成某件事情的函数使用动词</strong></span><br>
<code>Bad:           obj.RefCount();<br>
Good:          list.Clear();<br>
               list.Sort();<br>
               obj.AddReference();<br>
</code></p>
<p><span style="color: #0000ff;"><strong>对于返回布尔型的函数，使用类似提问的方式</strong></span><br>
<code>Bad:           list.Empty();<br>
Good:          list.IsEmpty();<br>
               list.Contains(item);<br>
</code></p>
<p><span style="color: #0000ff;"><strong>对于只是返回属性，而不改变状态的函数则使用名词</strong></span><br>
<code>Bad:           list.GetCount();<br>
Good:          list.Count();<br>
</code></p>
<p><span style="color: #0000ff;"><strong>不要在函数名字中重复参数的名称</strong></span><br>
<code>Bad:           list.AddItem(item);<br>
               handler.ReceiveMessage(msg);<br>
Good:          list.Add(item);<br>
               handler.Receive(msg);<br>
</code></p>
<p><span style="color: #0000ff;"><strong>不要方法的名字中重复此方法的类的名称</strong></span><br>
<code>Bad:           list.AddToList(item);<br>
Good:          list.Add(item);<br>
</code></p>
<p><span style="color: #0000ff;"><strong>不要在函数的名字中加入返回类型，除非函数名必须以返回类型进行区别</strong></span><br>
<code>Bad:           list.GetCountInt();<br>
Good:          list.GetCount();<br>
               message.GetIntValue();<br>
               message.GetFloatValue();<br>
</code></p>
<p><span style="color: #0000ff;"><strong>不要名字中使用And 或则 Or</strong></span><br>
如果你使用一个连接词来连接函数名，那么这个函数肯定是做了太多的事情，更好的做法是将其分成更小的函数来处理(类似面向对象设计准则中的责任单一原则)。<br>
如果你想确保是这是一个原子的操作，那么你应该用一个名字来描述这个操作或一个类来封装他<br>
<code>Bad:           mail.VerifyAddressAndSendStatus();<br>
Good:          mail.VerifyAddress();<br>
               mail.SendStatus();<br>
</code></p>
<p>这是一篇非常优秀的文章，我用我的语言在组织了一下，如果喜欢英文的读者可以点击<a href="http://journal.stuffwithstuff.com/2009/06/05/naming-things-in-code/">这里</a>阅读原文</p>
<p align="center"><img alt="image placeholder" >
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/18024.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/8990.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/8745.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/7886.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/5444.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/5201.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
</ul>
</div></div>
<div id="post-ratings-990" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="ae8ae2facd">
<img alt="image placeholder" >
<meta itemprop="headline" content="编程中的命名设计那点事">
<meta itemprop="description" content="在我开始设计系统的时候，我会花去很多时间去设计命名，因为好的命名和好的设计是分不开的。
In the beginning was the Word, and the Word was with God, and the Word was God
太初有道。道与神同在，道就是神。 (约翰福音第一章，第一节)
在设计过程中给类，方法和函数好的命名会带来好的设计，虽然这不是一定成立，但是如果坏的命...">
<meta itemprop="datePublished" content="2009-06-07T16:36:49+08:00">
<meta itemprop="dateModified" content="2009-06-07T23:59:57+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/990.html">
<meta itemprop="author" content="Neo">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/990.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="4.19">
<meta itemprop="ratingCount" content="26">
</div>
</div>
<div id="post-ratings-990-loading" class="post-ratings-loading">
<img alt="image placeholder" >
 ]]></content>
<pubDate>2009-06-07T16:36:49+08:00</pubDate>
<guid>https://coolshell.cn/articles/990.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ 优质代码的十诫 ]]></title>
<link>https://coolshell.cn/articles/1007.html</link>
<content><![CDATA[ 
<h2>1.- DRY: Don’t repeat yourself.</h2>
<p><a href="https://coolshell.cn/wp-content/uploads/2009/06/10commandements.jpg"><img alt="image placeholder" >
<p><a href="https://en.wikipedia.org/wiki/Don%27t_repeat_yourself" target="_blank">DRY</a> 这一法则可能是编程届中最通用的法则了，目前为止，应该没有哪个程序员对这一法则存有异议。但是，我们却能发现，一些程序在编写单元测试（unit testing）时忘记了这一法则：让我们相像一下，当你改变一个类的若干接口，如果你没有使用DRY，那么，那些通过调用一系例类的接口的unit test的程序，都需要被手动的更改。比如：如果你的unit test的诸多test cases中没有使用一个标准共有的构造类的方法，而是每个test case自己去构造类的实例，那么，当类的构造函数被改变时，你需要修改多少个test cases啊。这就是不使用DRY法则所带来的恶果。</p>
<p><span id="more-1007"></span></p>
<h2>2.- 短小的方法.</h2>
<p>至少，我们有下面三个不错的理由要求程序员们写下短小的方法。</p>
<ol>
<li>代码会变得更容易阅读。</li>
<li>代码会变得更容易重用（短方法可以减少代码间的耦合程度）</li>
<li>代码会变得更容易测试。</li>
</ol>
<h2>3.- 良好的命名规范</h2>
<p>使用不错的统一的命名规范可以让你的程序变得更容易阅读和维护，当一个类，一个函数，一个变量的名字达到了那种可以“望文生义”的境界话，我们就可以少一些文档，少一些沟通。文章《<a href="https://coolshell.cn/articles/990.html"><span style="color: #2970a6;">编程中的命名设计那点事 </span></a>》可以给你一些提示。</p>
<h2>4.- 赋予每个类正确的职责</h2>
<p>一个类，一个职责，这类规则可以参考一下类的<a href="http://butunclebob.com/ArticleS.UncleBob.PrinciplesOfOod" target="_blank"><strong>S</strong>OLID </a>法则。但我们这里强调的不是一种单一的职责，而是一个正确的职责。如果你有一个类叫Customer，我们就不应该让这个类有sales 的方法，我们只能让这个类有和Customer有最直接关系的方法。</p>
<h2>5.- 把代码组织起来</h2>
<p>把代码组织起来有两具层次。</p>
<ul>
<li>
<strong>物理层组织</strong>：无论你使用什么样的目录，包(package)或名字空间(namespace)等的结构，你需要把你的类用一种标准的方法组织起来，这样可以方便查找。这是一种物理性质的代码组织。</li>
<li>
<strong>逻辑层组织</strong>： 所谓逻辑层，主要是说，我们如果把两个不同功能的类或方法通过某种规范联系和组织起来。这里主要关注的是程序模块间的接口。这就是我们经常见到的程序模块的架构。</li>
</ul>
<h2>6.- 创建大量的单元测试</h2>
<p>单元测试是最接近BUG的地方，也是修改BUG成本最低的地方，同样也是决定整个软件质量好坏的成败的地方。所以，只要有可能，你就应该写更多的，更好的单元测试案例，这样当你未来有相应代码改变的时候，你可以很简单知道你代码的改变是否影响了其它单元。</p>
<h2>7.- 经常重构你的代码</h2>
<p>软件开发是一种持续的发现的过程，从而让你的代码可以跟上最新的实际需求的变化。所以，我们要经常重构自己的代码来跟上这样的变化。当然，重构是有风险的，并不是所有的重构都是成功的，也不是我们随时都可以重构代码。下面是两个重构代码的先要条件，以避免让你引入更多的BUG，或是把本来就烂的代码变得更烂。</p>
<ol>
<li>有大量的单元测试来测试。正如前面所说，重构需要用大量的单元测试来做保障和测试。</li>
<li>每次重构都不要大，用点点滴滴的小的重构来代替那种大型的重构。有太多的时候，当我们一开始计划重构2000行代码，而在3个小时后，我们就放弃这个计划并把代码恢复到原始的版本。所以，我们推荐的是，重构最好是从点点滴滴积累起来的。</li>
</ol>
<h2>8.- 程序注释是邪恶的</h2>
<p>这一条一定是充满争议的，大多数程序员都认为程序注释是非常好的，是的，没错，程序注释在理论上是非常不错的。但是，在实际过程序当中，程序员们写出来的注释却是很糟糕的（程序员的表达能力很有问题），从而导致了程序注释成为了一切邪恶的化身，也导致了我们在阅读程序的时，大多数时候，我们都不读注释而直接读代码。所以，在这里，我们并不是鼓励不写注释，而是——如果你的注释写得不够好的话，那么，你还不如把更重要的时间花在重构一下你的代码，让你的代码更加易读，更加清楚，这比会比注释更好。</p>
<h2>9.- 注重接口，而不是实现</h2>
<p>这是一个最经典的规则了。接口注重的是——“What”是抽象，实现注重的是——“How”是细节。接口相当于一种合同契约，而实际的细节相当于对这种合同契约的一种运作和实现。运作是可以很灵活的，而合同契约则需要是相对需要稳定和不变的。如果，一个接口没有设计好而需要经常性的变化的话，那我们可以试想一下，这代来的后果，这绝对会是一件成本很大的事情。所以，在软件开发和调设中，接口是重中之重，而不是实现。然而我们的程序员总是注重于实现细节，所以他们局部的代码写的非常不错，但软件整体却设计得相对较差。这点需要我们多多注意。</p>
<h2>10.- 代码审查机制</h2>
<p>所有人都会出错，一个人出错的概率是很大的，两个人出错的概率就会小一些，人多一些，出错的概率就会越来越小。因为，人多了，就能够从不同的角度看待一个事情，虽然这样可能导致无效率的争论，但比起软件产品release后出现问题的维护成本，这点成本算是相当值得的。所以，这就是我们需要让不同的人来reivew代码，代码审查机制不但是一种发现问题的最有效的机制，同时也是一种可以知识共享的机制。当然，对于Code Review来说，下面有几个基本原则：</p>
<ul>
<li>审查者的能力一定要大于或等于代码作者的能力，不然，代码审查就成了一种对新手的training。</li>
<li>而且，为了让审查者真正负责起来，而不是在敷衍审查工作，我们需要让审查者对审查过的代码负主要责任，而不是代码的作者。 </li>
<li>另外，好的代码审查应该不是当代码完成的时候，而是在代码编写的过程中，不断地迭代代码审查。好的实践的，无论代码是否完成，代码审核需要几天一次地不断地进行。</li>
</ul>
<p>（<strong>我以我个人的语言叙述本文，并加入了我个人的经历，所以，请你在转载时请注意作者和出处，并且，请勿用于商业用途</strong>）</p>
<p>文章：<a href="http://makinggoodsoftware.com/2009/06/04/10-commandments-for-creating-good-code/" target="_blank">来源</a></p>
<p align="center"><img alt="image placeholder" >
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/18024.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/8990.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/8745.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/7886.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/5444.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/5201.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
</ul>
</div></div>
<div id="post-ratings-1007" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="188eea1b76">
<img alt="image placeholder" >
<meta itemprop="headline" content="优质代码的十诫">
<meta itemprop="description" content="1.- DRY: Don’t repeat yourself.
DRY 是一个最简单的法则，也是最容易被理解的。但它也可能是最难被应用的（因为要做到这样，我们需要在泛型设计上做相当的努力，这并不是一件容易的事）。它意味着，当我们在两个或多个地方的时候发现一些相似的代码的时候，我们需要把他们的共性抽象出来形一个唯一的新方法，并且改变现有的地方的代码让他们以一些合适的参数调用这个新的方法。

D...">
<meta itemprop="datePublished" content="2009-06-07T19:20:56+08:00">
<meta itemprop="dateModified" content="2009-06-07T23:57:28+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/1007.html">
<meta itemprop="author" content="陈皓">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/1007.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="4.47">
<meta itemprop="ratingCount" content="19">
</div>
</div>
<div id="post-ratings-1007-loading" class="post-ratings-loading">
<img alt="image placeholder" >
 ]]></content>
<pubDate>2009-06-07T19:20:56+08:00</pubDate>
<guid>https://coolshell.cn/articles/1007.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ Unix 40年：昨天，今天和明天 ]]></title>
<link>https://coolshell.cn/articles/1023.html</link>
<content><![CDATA[ 
<p><span style="font-size: small;"><strong>经历了四个十年，操作系统的未来充满了变数，但传奇将会是永久的</strong></span></p>
<p style="MARGIN: 0in 0in 0pt"> <strong style="mso-bidi-font-weight: normal">原文</strong>：<a href="https://www.computerworld.com/action/article.do?command=viewArticleBasic&amp;taxonomyName=Operating+Systems&amp;articleId=9133570&amp;taxonomyId=89&amp;pageNumber=1">链接</a>—<a href="https://www.computerworld.com/">Computerworld</a></p>
<p>　</p>
<h4>译者前言</h4>
<p style="MARGIN: 0in 0in 0pt"> 今年是Unix40岁的生日。很早就看到这篇文章了，一直想转到中文社区。但一直没有时间，今天看到了CSDN首页的一篇《<a href="http://news.csdn.net/a/20090610/211863.html">昨天,今天,明天! Unix系统的40年</a>》号称是转载于<a href="http://www.cnbeta.com/articles/86179.htm">cnBeta</a>。这篇文章翻译的要有多烂有多烂，简直就是对Unix 40的历史和原文作者的一种不敬。所以，在这里给出全部译文。</p>
<p style="MARGIN: 0in 0in 0pt"> </p>
<p style="MARGIN: 0in 0in 0pt"><strong style="mso-bidi-font-weight: normal">关于更为详细的历史，可以参考我的《Unix</strong><strong style="mso-bidi-font-weight: normal">传奇》<a href="http://blog.csdn.net/haoel/archive/2007/03/27/1542340.aspx">上篇</a></strong><strong style="mso-bidi-font-weight: normal">，<a href="http://blog.csdn.net/haoel/archive/2007/03/27/1542353.aspx">下篇</a></strong></p>
<p style="MARGIN: 0in 0in 0pt"><strong style="mso-bidi-font-weight: normal">以及一篇CSDN</strong><strong style="mso-bidi-font-weight: normal">对我的采访《<a href="http://blog.csdn.net/haoel/archive/2007/07/13/1688006.aspx">Unix的现状与未来</a></strong><strong style="mso-bidi-font-weight: normal">》</strong></p>
<p>　</p>
<h4>正文</h4>
<p>40年前的一个夏天，一个程序员只用了一个月的时间就创造出了这个世界上迄今为止最重要一个软件的原型。</p>
<p><span id="more-1023"></span></p>
<p>在1969年8月，Ken Thompson，AT&amp;T公司Bell实验室的一个程序员，因为妻儿不在身边，所以有机会把他的一些关于新的操作系统的想法付诸实现。他用汇编语言在DEC（Digital Equipment Corp.）的PDP-7微机上写了第一个版本Unix，他只用了一周的时间就完成了一个简单的操作系统，包括一个shell，一个编译器还有一个汇编编译器。</p>
<p>Thompson和他的一个同事Dennis Ritchie当时在开发一个叫“<a href="http://www.multicians.org/multics.html" target="new">Multics</a>（Multiplexed Information and Computing Service复杂指令和计算服务）”的分时(Time-Sharing)操作系统)，因为这个项目当时遇上了很多麻烦，所以Thompson和Dennis当时感到很没劲，他们即不想去做当时主流的“批处理（Batch）操作系统”，也不想去做那个看上去怪异和笨拙的Multics。</p>
<p>所以，在他们来来回回讨论经了一些关于新系统的想法后，Thompson写下了第一个版本的Unix，然后，这两位老搭档在以后的几年里继续开发着这个操作系统，当然，后面有更多的同事（Doug McIlroy, Joe Ossanna 和 Rudd Canaday）加入了进来。一些当时Multics的理念也被带入到这个新的操作系统中来，不过，更为漂亮的Unix则带来了–“更少则为更多（less-is-more）”的哲学。</p>
<p>（<strong style="mso-bidi-font-weight: normal">陈皓注：</strong>在我们所认识的历史中，这两位程序员当时是在Multics下开发一个叫”太空旅行”的游戏，后来Multics项目解体了，这两位哥们觉得自己的游戏白弄了，所以就为了这个游戏开发了一个新的操作系统Unix，Unix的取名和Multics是相反的，Multics有”复杂的”的意思，而Unix则是”小巧的”意思。后来他们觉得这个操作系统非常不错，所以在后来发表了一篇论文向全世界宣布了这一操作系统，从此开启了计算机世界崭新的文化，详情可参看我的《<strong style="mso-bidi-font-weight: normal">Unix</strong><strong style="mso-bidi-font-weight: normal">传奇</strong>》<a href="http://blog.csdn.net/haoel/archive/2007/03/27/1542340.aspx">上篇</a>，<a href="http://blog.csdn.net/haoel/archive/2007/03/27/1542353.aspx">下篇</a>）</p>
<p>“一个强大的用于交互式的操作系统不应该在价格成本和人力成本上都是昂贵的” Ritchie 和 Thompson在开发这个操作系统5年后，他们在”计算机协会（ACM- Association for Computing Machinery）杂志”上发表了一篇文章《<em>Communications of the ACM</em> (CACM)》，文中说，”我们希望Unix的用户会找到那些非常重要的系统特性就是它是’简单的’，’一流的’和’易用的'”。</p>
<p>显然，他们做到了，Unix的确成为了IT领域中的一块基石，被广泛地部署到了大学，政府和企业的服务器和工作站上。并且，Unix的影响力开发迅速地传播开来，这恐怕超出了所有人的估计，正如ACM在1983年给Thompson 和 Ritchie颁发最具价值的图灵奖（计算机领域的诺贝尔奖）所记录的那样–“Unix系统的模式已经在以一种全新的编程思想领导着新一代的软件开发”。</p>
<h2 style="MARGIN: auto 0in">
<a name="early"></a>Unix早期</h2>
<p style="TEXT-ALIGN: center"> <img alt="image placeholder" >
<p style="TEXT-ALIGN: center">Thompson 和 Ritchie.</p>
<p>当然，Unix的成功不是一蹴而就的。 在1971年，它首先被移植到了PDP-11微机（一个比PDP-7更强的微机）。文本格式和文本编译程序在这时被加入进了Unix。并且，当时的实验室专利部门已经开始用这些文本编译器，这也是Unix系统除开发团队之外的第一个用户。</p>
<p>在1972年，Ritchie引入了一个更高级的语言–C语言（基于Thompson的B语言），此后，Thompson用C语言重写了Unix，这极大地增加了Unix的可移植跨平台性。然后，他们为这个操作系统命名Unics(Uniplexed Information and Computing Service)，这是和Multics玩的一个文字游戏。但最后，Unix成了最终的名字。（<strong style="mso-bidi-font-weight: normal">陈皓注</strong>：Unix下的经常出现缩写，如usr 是 user, ed是edit，gp是group，这也是Unix的文化。Unix的更名可能也是因为这个吧）</p>
<p>是时候向全世界宣布这个系统系统了。Ritchie 和 Thompson于1974年7月在 <em>CACM</em> 上发表了一篇论文– “<a href="http://cm.bell-labs.com/cm/cs/who/dmr/cacm.html">The UNIX Time-Sharing System</a>“《Unix分时操作系统》，这篇论文就像一个风暴一样席卷了都个IT界。直到有一天，Unix被限制在了只能由Bell实验室中的少数人使用。但是，因为有计算机协会的支持，当时的Unix处于一个引爆点。</p>
<p>” <em>CACM</em> 的那篇论文产生了一个戏剧化的影响”， IT 历史学家 Peter Salus 在他的书《<em>The Daemon, the Gnu and the Penguin</em>》中写到， “很快，Ken 被铺天盖地的Unix的请求所淹没”</p>
<p> </p>
<h2 style="MARGIN: auto 0in">
<a name="hackers"></a>黑客的天堂</h2>
<p> Thompson 和 Ritchie 算得上是史上最名副其实的”黑客”，当时”黑客hacker”一词指的是那些把非同寻常的创意组合起来， 以一种超常智力，并以废寝忘食的态度解决了某个鲜为人知的软件问题的人。</p>
<p>Thompson 和 Ritchie他们的所使用的开发方法，他们所写下的代码，极大地吸引了大学里的程序员，并在以后，这些大学中其中的一些程序员因为Unix开创了自己的公司，他们都是在Unix发展过程中的黑客，就像，加利福尼亚州大学的Bill Joy，卡内基梅隆大学的<a href="https://www.computerworld.com/action/article.do?command=viewArticleBasic&amp;articleId=9133574#rashid">Rick Rashid</a> ，以及Bell实验室<a href="https://www.computerworld.com/action/article.do?command=viewArticleBasic&amp;articleId=9133574#korn">David Korn</a>。当然，他们开创的这些公司都没有IBM，HP和Microsoft的资助。</p>
<p>“几乎从一开始，Unix就能够，也确实是开始了自我进化”，Thompson和Ritchie在<em>CACM</em> 论文中说到，”因为所有的源代码总可以容易被人在线地更改，所以，当有一个新的想法被发明，发现或是被建议出来的时候，大家都非常自愿地修订或重写Unix系统和上面的软件”。</p>
<p>Korn，一个今天还在AT&amp;T工作的员工，上世纪70年代曾是Bell 实验室的一个程序员。”Unix的一个特点是，一个小工具刚被完成，就被另一个更好的工具所代替”，他回忆起来说，”如果你觉得不好的话，你完全可以开完一个更好的版本”。Korn当时为Unix开发了一个很具影响力的<a href="https://www.computerworld.com/action/article.do?command=viewArticleBasic&amp;articleId=9133574#korn">Korn shell</a>，本质上来说，当年的Unix就像今天的开源软件。</p>
<p>Salus，作为一个作家和技术历史家，回忆起，他上世纪70年代在多伦多大学时当教授时，在IBM System/360大机上使用APL编程语言工作时的情景–那并不很好用，但是自从1978年圣诞节以后，一个哥伦比亚大学的朋友给我演示了一下在微机上运行的Unix，”我说，’我的上帝啊’，我彻底被你征服了”。</p>
<p>他说，Unix最关键的优势是他有一个”管道”特性（1973年引入），这么我们可以把上一个程序的输出轻松地传给下一个程序。”管道”的概念，由Bell实验室的McIlroy发明，随后”管道”这个东西被其它几乎所有的操作系统复制，包括所有的Unix， Linux，DOS和Windows。</p>
<p style="TEXT-ALIGN: center"><img alt="image placeholder" >
<p style="TEXT-ALIGN: center">位于新泽西Murray Hill 的Bell 实验室总部</p>
<p style="TEXT-ALIGN: center"><em>Credit: Alcatel-Lucent/Bell Labs</em></p>
<p> </p>
<p>Unix还有一个不错的地方。 “哇”，正如Salus所惊叹的，这个操作系统并不需要一个需要一百万美金的大型机才能运行的操作系统。它在极其原始的小型的DEC PDP-7微机上开发出来，因为这是当是Thompson 和 Ritchie可以找到用来写这个操作系统最好的机器（<strong style="mso-bidi-font-weight: normal">陈皓注：</strong>当时这个机器像垃圾一样被扔在实验室角落里）</p>
<p>很多很多的大学研究者们使用Unix就是因为这是一个简单和容易修改的操作系统，而且对硬件资源要求的很少，代码也是开源和免费的。就像Sun Microsystems公司，或是一些用于特定的科学计算的主机公司，例如Multiflow Computer，他们在选择Unix作为操作系统时都和那些大学研究者们有相同的原因。</p>
<h2 style="MARGIN: auto 0in">Unix家谱</h2>
<p>Unix成长为一个非私有的操作系统，是因为1956年的AT&amp;T公司受命于联邦去经营电报电话服务。当然也可以开发软件，甚至那个软件可以有”合理”收费的许可证，但是这个公司却被禁止从事任何和计算机有并的商业活动。</p>
<p>Unix，在开发的过程中，没有任何的奖励制度和管理，从一开始在AT&amp;T公司出现时，其是一种近似于好奇或兴趣的东西。</p>
<p>然而，20世纪70年代，AT&amp;T公司开始意到Unix所带来的商业价值。公司的律师开始寻找一些手段来保护Unix，并让其成为一种商业机秘。从1979年Unix的版本V7开始，Unix的许可证开始禁止大学使用Unix的源码，包括在授课中学习。</p>
<p>没问题！一个荷兰阿姆斯特朗Vrije大学使用版本V6的计算机科学系的教授Andrew Tanenbaum说。在1987年，他为教学目的克隆了一个Unix，创建一个叫Minix的开源的操作系统，并可以在80286的Intel芯片上运行。</p>
<p>“Minix使用了所有和Unix一样的想法，并且这是一个非常灿烂的事物”，Salus说，”只有一个专门是程序员的并且非常了解操作系统内部的人才成干出这件事来”。Minix从此变成了另一个起点–Linus Torvalids 在1991年使用Minix创造了Linux –这并不是一个简单的Unix克隆版本，只不过它长得像Unix。</p>
<p>让我们再回到Linux出现的十年以前，Bill Joy，毕业于加利福尼亚州大学伯克利分校，当年，他在学校的时候拷贝了Bell 实验室的Unix版本，并且所到了这是一个很不错的可以使用Pascal编译器和文本编译器的操作系统平台。</p>
<p>于是，他更改变扩展了Unix，形成了Unix的第二个最主要的分枝–BSD（Berkeley Software Distribution）Unix。在1978年3月，Joy卖出了第一个BSD的拷贝：50美金。</p>
<p>到了1980年，有两个最主要的Unix的版本线，一个是Berkeley的BSD，另一个是AT&amp;T的Unix，在这个时候，很显然，竞争最终引发了Unix的战争。在这场战争中，好的是，软件开发人员还是能够得到Unix的源码并对其按照自己的需要和兴致进行裁剪。而不好的是，Unix开始一发不可收拾地开发不停地出现各种各样的变种。</p>
<p>1982年，Joy创建了Sun Microsystems公司并提供了工作站–Sun-1，运行在当一个BSD的版本，叫SunOS（Solaris以之后的十年出现）。而AT&amp;T则在随后的几年中发布了Unix System V的第一版，一个具有强大影响力的操作系统，最终造就了IBM的AIX和HP的HP-UX。</p>
<p style="MARGIN: 0in 0in 0pt"><a href="https://www.computerworld.com/action/article.do?command=viewArticleBasic&amp;articleId=9133696"></a></p>
<p style="MARGIN: 0in 0in 0pt"> </p>
<p style="MARGIN: 0in 0in 0pt; TEXT-ALIGN: center"><img alt="image placeholder" >
<p style="MARGIN: 0in 0in 0pt; TEXT-ALIGN: center">Unix 家谱. <em>Credit: Eraserhead1 (<a href="https://creativecommons.org/licenses/by-sa/3.0/" target="new">cc-by-sa-3.0</a>, <a href="https://en.wikipedia.org/wiki/GNU_Free_Documentation_License" target="new">GFDL</a>)</em><br>
<a href="https://www.computerworld.com/action/article.do?command=viewArticleBasic&amp;articleId=9133696">点击这里下载大图</a></p>
<p style="MARGIN: 0in 0in 0pt"> </p>
<h2 style="MARGIN: auto 0in">Unix战争</h2>
<p> 在上世纪80年代中期，大量的用户包括联邦政府，开始抱怨”Unix是一个理论上单一的可移植的操作系统”，但事实上应该如此却并不是这样。Unix软件供应商们，一方面为这些抱怨而为 其买单（”空头人情”），而另一方面，他们却在没日没夜地给用户们定制Unix的各种功能和APIs，旨在为了留下用户。 </p>
<p> 而其它的Unix产商害怕At&amp;T和Sun的联盟，所以，有各种各样的派别组织开始在”标准”上竞争，这些组织大多在X或Open命名，开放软件基金会（Open Software Foundation），Unix开放系统国际和公司（Unix International and Corporation for Open Systems）等等，在这些组织中形成的各种各样的争论，辩论，抗辩和观点可以写一本厚厚的书，但他们无一例外地以肆意相互评击来主张一个统一的Unix局面。</p>
<p> 刚形成的<a href="https://en.wikipedia.org/wiki/Open_Software_Foundation" target="new">开放软件基金会</a>，其包括了IBM，HP，DEC和其它公司共同来反抗AT&amp;T和Sun的联盟。在一个1988年未出版的文件中，DAPRA（Defense Advanced Research Projects Agency）一个著名的小型机先驱<a href="https://www.computerworld.com/action/article.do?command=viewArticleBasic&amp;articleId=9133574&amp;pageNumber=2#bell">Gordon Bell</a>说， “开放软件基金会OSF是一条’Unix穷人’进入正在发展的市场的一条路，他们以此来供养那个的高利润代码博物馆”。</p>
<p> Unix战争在解决差异和设定一个操作系统标准中以失败告终。但在1993年，Unix社区听到了一个”警钟”–Microsoft发布了Windows NT，一个企业级的，32位的，支持多处理的操作系统。而Windows NT的所有者瞄准了Unix领域，并企图扩展Microsoft的桌面系统霸权到各种数据中心以及被Sun服务器所占领的地方。</p>
<p> Microsoft的用户欢呼雀跃，Unix的产商开始惊慌。所有的主流的Unix竞争者们开始主动地联合起来形成了一个<a href="https://en.wikipedia.org/wiki/COSE" target="new">通用开放式软件环境（Common Open Software Environment）</a>，并在随后的几年中放下了他们的武器并开始着手把AT&amp;T和Sun联盟为背景的”Unix International Group”并入开放软件基金会OSF。这个合并在今天叫做–<a href="https://www.opengroup.org/" target="new">The Open Group</a>，而证明Unix系统和所有者的是<a href="http://www.unix.org/what_is_unix/single_unix_specification.html" target="new">Single Unix Specification</a>，现在官方叫法是–“Unix”。</p>
<p> </p>
<p>但在实践过程中，所有关于Unix的开发的确需要一个尽可能”标准化的”Unix，但是由于这些产商热衷于竞争的习惯，在Unix下并没有做到，但这一”标准化”被随后如潮水一样涌来的一个叫Linux的操作系统给完成了，这是一个开源的系统系统，则我们的Tanenbaum教授开发的Minix发展而来。</p>
<h3 style="MARGIN: 12pt 0in 3pt">
<a name="whatis"></a>什么是”Unix”?</h3>
<p>Unix，许多人会说，是一个几十年前在Bell实验室写的操作系统，Unix包括其所有的派生版本。今天，最主要的Unix版本是从两个主干上分出来的：一个当然是从AT&amp;T出来的，另一个则是通过加利福尼亚伯克利分校产生的。今天，最顽强的分枝是IBM的AIX和HP的HP-UX以及Sun的Solaris。</p>
<p>然而，只有”The Open Group”拥有Unix的注册商标，<a href="http://www.unix.org/what_is_unix.html" target="new">定义一个Unix</a>需要遵从<a href="http://www.unix.org/what_is_unix/single_unix_specification.html" target="new">Single Unix Specification</a> (SUS)。这包含了那些从来没有Unix思想的操作系统，比如Mac OS X Leopard（这是从BSD和Mach那边发展来）以及IBM的z/OS（这是从大型机操作系统MVS发展来的），因为它们遵从了SUS的API规范。基本上来说，只要那看起来像是一个Unix，那他就是一个Unix，而不管它是由什么代码写的。</p>
<p>当然，一个比较宽松的Unix定包含了Unix-Like的操作系统，有些时候，也叫做Unix-Clones或Look-Alikes，这些都是复制了Unix的东西但他们却并不直接使用Unix的代码。在这堆操作系统中，领头羊是Linux。</p>
<p>最后，我们可以把Unix叫做一种”操作系统”因为这是已成了实际习惯。另外，对于一个操作系统的内核，Unix实现了很多典型的工具比如命令行编辑器，应用程序接口，开发环境，开发库和文档–<em>Gary Anthes</em></p>
<h2 style="MARGIN: auto 0in">Unix的未来</h2>
<p>由于这些长期竞争的各种版本的Unix缺乏可移值性，以及在价格方面没有优势，在x86芯片上占据主导地位的Linux和Windows将会快速地让所有的IT机构把Unix替换掉。调查机构<a href="https://www.gartner.com/DisplayDocument?ref=g_search&amp;id=878016" target="new">Gartner Group</a>最近公布了这项调查结果。</p>
<p>“在主机服务器方面，调查结果继续显示公众对Linux的热情，而Windows也有相应的增长，而Unix系统还会长期存在，但是其逐渐地下滑”，这个调查报告由2009年2月发布。</p>
<p>“Unix还会像以前那样长期存在，但它已不如从前，而这种局面只会愈演愈烈” Gartner分析师George Weiss说，”Linux将会是Unix的另一选择”，虽然Linux并没有像Unix那样经过了这么长的开发、性能调整和压力测试的过程，但很明显他很快就要达到像Unix那样的性能，可靠和扩展性”。</p>
<p>但是，最近一个由Computerworld发起一个<a href="https://www.computerworld.com/action/article.do?command=viewArticleBasic&amp;articleId=9133777">民意调查</a>，暗示了所有一切把Unix踢开的举动不会很快地发生。在一个由130个Unix用户和211个IT经理的问卷调查中显示，其90%的人说他们的公司”非常极端地信任Unix”。不到半数的被访者说，”Unix是一个非常基本的平台，但我们并不确定其未来是否会被保留”，而只有12%的受访者说，”我们期望在未来把Unix迁走”。节省成本，是诸多原因中最主要是一个原因。</p>
<p>Weiss说，移值到x86处理器上会越来越快，因为这些硬件的价值实在是太便宜了。”水平扩展架构，集群技术，云计算，虚拟化技术，你只需要把这些技术合并一下，通过这些技术应用的趋势，我们可以看到操作系统的选择基本上就是Linux和Windows”，他说。</p>
<p>“例如”，Weiss说，”在最近Cisco宣布的<a href="http://newsroom.cisco.com/dlls/2009/prod_031609.html" target="new">Unified Computing 架构</a>，你可以拥有网络，存储，计算，内存，光纤连接，但你不需要Unix。你可以安装Linux或Windows并使用x86平台。所以Intel赢得了Linux取代Unix的那半壁江山”。</p>
<p>The Open Group，目前Single Unix Specification和Unix系统认证的所有者，开始有点退步并有点承认Linux也是一个Unix系统的选择，因为Unix是”高端性能，可扩展性和性能可以用于很多相当重要的应用”，而Linux则是一个更为小的，注重于并不太注重的应用。</p>
<p>AT&amp;T的Korn是其中一个对Unix仍然看到的人。Korn说，Unix的长处是它的历史，自从1973年来引入”管道”技术，它就可以被分成几个部分来部署。这会把Unix带向前方，他说，”这个哲学体系可以运用在云计算中，在那里，你只需要创建一些小的可重用的碎片而不是一个巨大的应用”。</p>
<h2 style="MARGIN: auto 0in">
<a name="legacy"></a>Unix传奇</h2>
<p> </p>
<p>无论最后的Unix命运会怎么样，这个从Bell实验室出生的40岁的家伙，已经书写了一段传奇，而且这个传奇可能还会继续几十年。它影响并产生了一个相当相当长的流行软件列表，包括给IBM，HP和Sun提供的Unix，以及Apple的Mac OS X和Linux。它同样影响了Microsoft的Windows NT以及IBM和Microsoft弄出来的DOS。</p>
<h2 style="MARGIN: auto 0in">请你来说</h2>
<h3 style="MARGIN: 12pt 0in 3pt"><a href="https://www.computerworld.com/comments/node/9133570">分享你的Unix记忆！</a></h3>
<p> </p>
<p>因为Unix，产生了许多公司，并走向了成功，因为当时Unix给了一个低成本的平台。在Internet上的服务器，Unix是核心的建筑区，今天它也是所有通讯系统的心脏。由它孕育了许多架构上的创意，比如管道，并且，Unix引出的Mach为科学作出了巨大的贡献，同时也为多处理器计算作出了贡献。</p>
<p>ACM在1983年因为Unix授予Thompson和Ritchie图灵奖时说过：”Unix系统最天才的部分是它的framework，它激发了程序员们沿着这一方向工作”。</p>
<p> </p>
<p style="MARGIN: 0in 0in 0pt"><strong style="mso-bidi-font-weight: normal">作者</strong>：Gary Anthes<br>
<strong style="mso-bidi-font-weight: normal">时间</strong>：2009年6月4日美国东部时间凌晨12:01</p>
<p style="MARGIN: 0in 0in 0pt"> </p>
<p style="MARGIN: 0in 0in 0pt"><strong style="mso-bidi-font-weight: normal">译者</strong>：陈皓（haoel(at)hotmail.com）<br>
<strong style="mso-bidi-font-weight: normal">时间</strong>：2009年6月11日北京时间晚上10:22</p>
<p style="MARGIN: 0in 0in 0pt"><strong style="mso-bidi-font-weight: normal"> </strong></p>
<p style="MARGIN: 0in 0in 0pt"><strong style="mso-bidi-font-weight: normal">关于更为详细的历史，可以参考我的《Unix</strong><strong style="mso-bidi-font-weight: normal">传奇》<a href="http://blog.csdn.net/haoel/archive/2007/03/27/1542340.aspx">上篇</a></strong><strong style="mso-bidi-font-weight: normal">，<a href="http://blog.csdn.net/haoel/archive/2007/03/27/1542353.aspx">下篇</a></strong></p>
<p style="MARGIN: 0in 0in 0pt"><strong style="mso-bidi-font-weight: normal">以及一篇CSDN</strong><strong style="mso-bidi-font-weight: normal">对我的采访《<a href="http://blog.csdn.net/haoel/archive/2007/07/13/1688006.aspx">Unix的现状与未来</a></strong><strong style="mso-bidi-font-weight: normal">》</strong></p>
<p><strong style="mso-bidi-font-weight: normal">（本文由陈皓翻译，在转载时请注明作者和出处）</strong></p>
<p align="center"><img alt="image placeholder" >
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/18360.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/17998.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/12103.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/11847.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/9104.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/9070.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
</ul>
</div></div>
<div id="post-ratings-1023" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="3190210a9f">
<img alt="image placeholder" >
<meta itemprop="headline" content="Unix 40年：昨天，今天和明天">
<meta itemprop="description" content="经历了四个十年，操作系统的未来充满了变数，但传奇将会是永久的
 原文：链接--Computerworld

　
译者前言
 今年是Unix40岁的生日。很早就看到这篇文章了，一直想转到中文社区。但一直没有时间，今天看到了CSDN首页的一篇《昨天,今天,明天! Unix系统的40年》号称是转载于cnBeta。这篇文章翻译的要有多烂有多烂，简直就是对Unix 40的历史和原文作者的一种不敬。...">
<meta itemprop="datePublished" content="2009-06-11T23:01:39+08:00">
<meta itemprop="dateModified" content="2009-06-12T11:06:10+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/1023.html">
<meta itemprop="author" content="陈皓">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/1023.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="4.1">
<meta itemprop="ratingCount" content="10">
</div>
</div>
<div id="post-ratings-1023-loading" class="post-ratings-loading">
<img alt="image placeholder" >
 ]]></content>
<pubDate>2009-06-11T23:01:39+08:00</pubDate>
<guid>https://coolshell.cn/articles/1023.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ Unix 40年：Unix年鉴 ]]></title>
<link>https://coolshell.cn/articles/1032.html</link>
<content><![CDATA[ 
<p>今年是Unix 40年的生日，这篇文章，主要是一个Unix的年鉴，其记录了40年来所有和Unix有关的里程碑事件。</p>
<p>如果你想知道Unix的一些故事，你可以查看下面这些文章：</p>
<ul>
<li>《<strong><a href="https://coolshell.cn/articles/1023.html">Unix40年：昨天，今天和明天</a></strong>》</li>
<li>《<strong>Unix</strong><strong>传奇</strong>》<strong><a href="http://blog.csdn.net/haoel/archive/2007/03/27/1542340.aspx" target="_blank">上篇</a></strong><strong>，</strong><strong><a href="http://blog.csdn.net/haoel/archive/2007/03/27/1542353.aspx">下篇</a></strong>
</li>
<li>《<strong><a href="http://blog.csdn.net/haoel/archive/2007/07/13/1688006.aspx" target="_blank">Unix的现状与未来</a></strong>》</li>
</ul>
<div id="ez-toc-container" class="ez-toc-v2_0_17 counter-hierarchy counter-decimal ez-toc-grey">
<div class="ez-toc-title-container">
<p class="ez-toc-title">目录</p>
<span class="ez-toc-title-toggle"></span>
</div>
<nav><ul class="ez-toc-list ez-toc-list-level-1">
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-1" href="#1956" title="1956">1956</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-2" href="#1969" title="1969">1969</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-3" href="#1970" title="1970">1970</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-4" href="#1971" title="1971">1971</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-5" href="#1972" title="1972">1972</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-6" href="#1973" title="1973">1973</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-7" href="#1974" title="1974">1974</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-8" href="#1976" title="1976">1976</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-9" href="#1977" title="1977">1977</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-10" href="#1978" title="1978">1978</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-11" href="#1980" title="1980">1980</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-12" href="#1982" title="1982">1982</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-13" href="#1983" title="1983">1983</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-14" href="#1984" title="1984">1984</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-15" href="#1985" title="1985">1985</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-16" href="#1986" title="1986">1986</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-17" href="#1987" title="1987">1987</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-18" href="#1988" title="1988">1988</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-19" href="#1989" title="1989">1989</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-20" href="#1990" title="1990">1990</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-21" href="#1991" title="1991">1991</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-22" href="#1992" title="1992">1992</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-23" href="#1993" title="1993">1993</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-24" href="#1994" title="1994">1994</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-25" href="#1996" title="1996">1996</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-26" href="#1999" title="1999">1999</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-27" href="#2001" title="2001">2001</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-28" href="#2002" title="2002">2002</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-29" href="#%E5%8F%82%E8%80%83" title="参考">参考</a></li>
</ul></nav>
</div>
<h4>
<span class="ez-toc-section" id="1956"></span>1956<span class="ez-toc-section-end"></span>
</h4>
<p>美国司法部颁布法令责成AT&amp;T公司不得从事除了公共承运人提供的通信服务以外的一切商业活动。</p>
<h4>
<span class="ez-toc-section" id="1969"></span>1969<span class="ez-toc-section-end"></span>
</h4>
<p><strong>三月 — </strong>AT&amp;T旗下的 Bell 实验室从操作系统项目Multics (Multiplexed Information and Computing Service)研发中撤出，这是一个前沿但很复杂的分时操作系统。一些重要的Multics理念以后来被用于Unix操作操作系统中。</p>
<p><span id="more-1032"></span></p>
<p><img alt="image placeholder" >
Unix 从 PDP-7 小型机上开始了它的历程<br>
Credit: Toresbe (<a href="https://creativecommons.org/licenses/sa/1.0/" target="new">cc-by-sa 1.0</a>)</p>
<p><strong>八月 – </strong>Bell实验室的Ken Thompson 写了第一个版本的操作系统，这时，这个操作系统还没有名字，这个操作系统是用DEC PDP-7 小型机的汇编语言写成。</p>
<h4>
<span class="ez-toc-section" id="1970"></span>1970<span class="ez-toc-section-end"></span>
</h4>
<p>Thompson的操作系统命名为 Unics，全称是Uniplexed Information and Computing Service 这是一个 “被阉割了的微型的 Multics”。 （后来，这个名字被神秘地改成了Unix）</p>
<h4>
<span class="ez-toc-section" id="1971"></span>1971<span class="ez-toc-section-end"></span>
</h4>
<p><strong>二月. — </strong>Unix 移植到DEC PDP-11 小型机上。</p>
<p><strong>十一月. – </strong>写一版本的 “Unix Programmer’s Manual”（Unix程序员手册） 由Ken Thompson 和 Dennis Ritchie完成并出版。</p>
<h4>
<span class="ez-toc-section" id="1972"></span>1972<img alt="image placeholder" >
</h4>
<p>Dennis Ritchie 开发了C 编程语言。</p>
<h4>
<span class="ez-toc-section" id="1973"></span>1973<span class="ez-toc-section-end"></span>
</h4>
<p>Unix 成熟期。“管道”，一个可以在两个程序中共享信息的机制问世，这项技术影响了操作系统几十年。这个技术被加入到了Unix中。同年，Unix被用C语言重写。</p>
<h4>
<span class="ez-toc-section" id="1974"></span>1974<span class="ez-toc-section-end"></span>
</h4>
<p><strong>一月 – </strong>加利福尼亚大学伯克利分校收到了一份Unix的源码拷贝。</p>
<p><strong>七月 – </strong>Dennis Ritchie 和 Ken Thompson发表论文《”The UNIX Timesharing System”》，这篇论文发表于计算机协会（Association for Computing Machinery）的月刊杂志上。作者称，这是一个“多用途的，多用户，的交互式的操作系统”。这篇论文导制了社会上对Unix大量的需求。</p>
<h4>
<span class="ez-toc-section" id="1976"></span>1976<span class="ez-toc-section-end"></span>
</h4>
<p>Bell 实验室程序员Mike Lesk 开发了 UUCP (Unix-to-Unix Copy Program) ，这个程序主要是用于网络上的文件传输，电子邮件和世界性新闻网络系统Usenet。</p>
<h4>
<span class="ez-toc-section" id="1977"></span>1977<span class="ez-toc-section-end"></span>
</h4>
<p>Unix 被移植到了一个非DEC的硬件上： Interdata 8/32 和 IBM 360.</p>
<h4>
<span class="ez-toc-section" id="1978"></span>1978<span class="ez-toc-section-end"></span>
</h4>
<p>Bill Joy一个伯克利的毕业生，发布了第一个Unix伯克利发行版——1BSD（the first Berkeley Software Distribution ），本质上来说，这只是 Bell 实验室 Unix V6 加上了一些附加软件。BSD 一下就成为了一个有竞争力的Unix 分枝，从此和 AT&amp;T的 Unix分庭抗礼。而且，BSD以以后派生出了 FreeBSD，NetBSD， OpenBSD， DEC Ultrix，SunOS，NeXTstep/OpenStep 和 Mac OS X。</p>
<h4>
<span class="ez-toc-section" id="1980"></span>1980<span class="ez-toc-section-end"></span>
</h4>
<p>4BSD，由美国国防部高级计划研究署 DARPA 资助，成为了世界上第一个支持TCP/IP的Unix。</p>
<p><img alt="image placeholder" >
Bill Joy 发起了Unix的 BSD 分枝 并成立了Sun公司<br>
Credit: SqueakBox (<a href="https://creativecommons.org/licenses/by/2.0/" target="new">cc-by-sa 2.0</a>)</p>
<h4>
<span class="ez-toc-section" id="1982"></span>1982<span class="ez-toc-section-end"></span>
</h4>
<p>Bill Joy 成立了 Sun Microsystems 公司生产基于 Unix的 Sun 工作站。</p>
<h4>
<span class="ez-toc-section" id="1983"></span>1983<span class="ez-toc-section-end"></span>
</h4>
<p>AT&amp;T 发布了 Unix System V的第一个版本，这是最具影响力的一个版本，后来，从这个版本派生出了IBM的 AIX 和 Hewlett Packard的 HP-UX。</p>
<p>Ken Thompson 和 Dennis Ritchie因为Unix 获得了 计算机协会 ACM授于的图灵奖（ Turing Award）—— “for their development of generic operating systems theory and specifically for the implementation of the UNIX operating system”</p>
<p>Richard Stallman announces plans for the GNU (GNU’s not Unix) operating system, a Unix look-alike composed of free software.</p>
<h4>
<span class="ez-toc-section" id="1984"></span>1984<span class="ez-toc-section-end"></span>
</h4>
<p>冬季， 在USENIX/UniForum 大会上，AT&amp;T 阐述了他们的Unix的政策：“不打广告，不作support，不发布补丁，除非先付费”</p>
<p>X/Open 公司，一个欧洲计算机制造协会，形成了一个Unix的标准——X/Open可移植性指南。它采用了若干特定标准，填补了其他标准缺失功能的空白。这些指南的目的是改善应用程序的可移植性。</p>
<h4>
<span class="ez-toc-section" id="1985"></span>1985<span class="ez-toc-section-end"></span>
</h4>
<p>AT&amp;T 发行System V Interface Definition (SVID)，其尝试去设定一个Unix如何运行的标准。</p>
<h4>
<span class="ez-toc-section" id="1986"></span>1986<span class="ez-toc-section-end"></span>
</h4>
<p>Rick Rashid 及其同事 于 Carnegie Mellon 大学创造了 Mach操作系统的第一个版本，其用于取代BSD Unix内核，从而可以让操作系统有更好的可移植性，以及更强的安全性，并可用于多处理器的应用。</p>
<h4>
<span class="ez-toc-section" id="1987"></span>1987<span class="ez-toc-section-end"></span>
</h4>
<p><img alt="image placeholder" >
Andrew Tanenbaum 写了 Minix, 一个 Unix 的克隆仅用于教学目的。<br>
Credit: GerardM (<a href="https://en.wikipedia.org/wiki/GNU_Free_Documentation_License" target="new">GNU FDL</a>)</p>
<p>AT&amp;T Bell 实验室和Sun Microsystems 宣布计划一同开发一个操作系统以便统一两个主要的Unix分枝。</p>
<p>Andrew Tanenbaum 写下了 Minix，这是一个开源的Unix克隆操作系统，仅用于计算机科学的教室。</p>
<h4>
<span class="ez-toc-section" id="1988"></span>1988<span class="ez-toc-section-end"></span>
</h4>
<p>Unix战争爆发。为了对付AT&amp;T/Sun 联盟，其它 Unix 产商包括DEC，HP 和 IBM 组成了“开放软件基金会 Open Software Foundation (OSF) ”以开发一个开放的Unix标准。AT&amp;T 和它的盟友也组织了一个他们自己的标准组织： Unix International.</p>
<p>同年，IEEE 发布了 Posix (Portable Operating System Interface for Unix)，这是一系列关于Unix接口的标准。</p>
<h4>
<span class="ez-toc-section" id="1989"></span>1989<span class="ez-toc-section-end"></span>
</h4>
<p>Unix System Labs，AT&amp;T Bell 实验室所属，发布了System V Release 4 (SVR4)，这是和Sun公司合作的产物，其整合了System V， BSD， SunOS 和 Xenix.</p>
<h4>
<span class="ez-toc-section" id="1990"></span>1990<span class="ez-toc-section-end"></span>
</h4>
<p>开放软件基金会 OSF 针对SVR4发布了 OSF/1，这是一个基于 Mach 和 BSD的版本。</p>
<h4>
<span class="ez-toc-section" id="1991"></span>1991<span class="ez-toc-section-end"></span>
</h4>
<p>Sun Microsystems 宣布了 Solaris，一个基于 SVR4的操作系统。</p>
<p>同年Linux Torvalds 写了 Linux，解一个开源的操作系统内核（由Minix产生的灵感）</p>
<p><img alt="image placeholder" >
Linus Torvalds</p>
<h4>
<span class="ez-toc-section" id="1992"></span>1992<span class="ez-toc-section-end"></span>
</h4>
<p>Linux 内核被整合到了 GNU，并开创了免费的GNU/Linux 操作系统，大家习惯于把这个操作系统简单的叫作“Linux”。</p>
<h4>
<span class="ez-toc-section" id="1993"></span>1993<span class="ez-toc-section-end"></span>
</h4>
<p>AT&amp;T 卖掉了他的 Unix System Laboratories 以及所有的Unix权利，Novell成了买主。之后Novell 又把Unix 注册商标转给了X/Open group.</p>
<p>Microsoft 开发了 Windows NT，一个强大的32们多处理器的操作系统。Windows NT 所引发的恐慌情绪促成了Unix的标准。</p>
<h4>
<span class="ez-toc-section" id="1994"></span>1994<span class="ez-toc-section-end"></span>
</h4>
<p>NASA 发明了 <a href="http://www.beowulf.org/overview/history.html" target="new">Beowulf computing</a> ，其使用了一些低成本的PC机并使用Unix或Linux作为操作系统，以及TCP/IP为网络组成了一个廉价的集群技术。</p>
<h4>
<span class="ez-toc-section" id="1996"></span>1996<span class="ez-toc-section-end"></span>
</h4>
<p>X/Open 和 Open Software Foundation 合并形成了 The Open Group.</p>
<p><img alt="image placeholder" >
Clinton 总统授予Thompson 和 Ritchie国家科技勋章</p>
<h4>
<span class="ez-toc-section" id="1999"></span>1999<span class="ez-toc-section-end"></span>
</h4>
<p>美国总统克林顿授予Ken Thompson 和 Dennis Ritchie国家科技勋章，以表彰他们在Bell实验室的成就。</p>
<h4>
<span class="ez-toc-section" id="2001"></span>2001<span class="ez-toc-section-end"></span>
</h4>
<p>Apple 发布 Mac OS X，这是一个基于Mach内核和BSD开发的桌面操作系统 。</p>
<h4>
<span class="ez-toc-section" id="2002"></span>2002<span class="ez-toc-section-end"></span>
</h4>
<p>The Open Group 宣布了Single UNIX Specification （以前叫 Spec 1170）的第三个版本。  </p>
<p> </p>
<h4>
<span class="ez-toc-section" id="%E5%8F%82%E8%80%83"></span>参考<span class="ez-toc-section-end"></span>
</h4>
<ul>
<li>
<em>Peter H. Salus</em>所著《A Quarter Century of Unix》<em></em>
</li>
<li><em>Microsoft</em></li>
<li><em>AT&amp;T</em></li>
<li><em>The Open Grou</em></li>
<li><em>Wikipedia </em></li>
<li><em>其它</em></li>
</ul>
<p>原文：<a href="https://www.computerworld.com/action/article.do?command=viewArticleBasic&amp;taxonomyName=Operating+Systems&amp;articleId=9133628&amp;taxonomyId=89&amp;pageNumber=1" target="_blank">链接</a></p>
<p align="center"><img alt="image placeholder" >
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/18360.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/17998.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/12103.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/11847.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/9104.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/9070.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
</ul>
</div></div>
<div id="post-ratings-1032" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="f635e6cfa1">
<img alt="image placeholder" >
<meta itemprop="headline" content="Unix 40年：Unix年鉴">
<meta itemprop="description" content="今年是Unix 40年的生日，这篇文章，主要是一个Unix的年鉴，其记录了40年来所有和Unix有关的里程碑事件。

如果你想知道Unix的一些故事，你可以查看下面这些文章：

	《Unix40年：昨天，今天和明天》
	《Unix传奇》上篇，下篇
	《Unix的现状与未来》

1956
美国司法部颁布法令责成AT&amp;T公司不得从事除了公共承运人提供的通信服务以外的一切商业活动。
...">
<meta itemprop="datePublished" content="2009-06-12T15:32:54+08:00">
<meta itemprop="dateModified" content="2009-06-12T15:32:54+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/1032.html">
<meta itemprop="author" content="陈皓">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/1032.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="4.1">
<meta itemprop="ratingCount" content="10">
</div>
</div>
<div id="post-ratings-1032-loading" class="post-ratings-loading">
<img alt="image placeholder" >
 ]]></content>
<pubDate>2009-06-12T15:32:54+08:00</pubDate>
<guid>https://coolshell.cn/articles/1032.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ 16个简单实用的.htaccess小贴示 ]]></title>
<link>https://coolshell.cn/articles/1035.html</link>
<content><![CDATA[ 
<p>.htaccess 文件 (Hypertext Access file) 是Apache Web服务器的一个非常强大的配置文件，对于这个文件，Apache有一堆参数可以让你配置出几乎随心所欲的功能。.htaccess 配置文件坚持了Unix的一个文化——使用一个ASCII 的纯文本文件来配置你的网站的访问策略。</p>
<p>这篇文章包括了16个非常有用的小技巧。另外，因为.htaccess 是一个相当强大的配置文件，所以，一个轻微的语法错误会造成你整个网站的故障，所以，在你修改或是替换原有的文件时，一定要备份旧的文件，以便出现问题的时候可以方便的恢复。</p>
<p><strong>1. 使用.htaccess 创建自定义的出错页面。</strong>对于Linux Apache来说这是一项极其简单的事情。使用下面的.htaccess语法你可以轻松的完成这一功能。（把.htaccess放在你的网站根目录下）</p>
<p><span style="COLOR: #ff6600">ErrorDocument 401 /error/401.php<br>
ErrorDocument 403 /error/403.php<br>
ErrorDocument 404 /error/404.php<br>
ErrorDocument 500 /error/500.php</span></p>
<p><span style="COLOR: #ff6600"><span id="more-1035"></span></span></p>
<p><strong>2. 设置网站的时区</strong></p>
<p><span style="COLOR: #ff6600">SetEnv TZ America/Houston</span></p>
<p><strong>3. 阻止IP列表</strong><br>
有些时候，你需要以IP地址的方式阻止一些访问。无论是对于一个IP地址还是一个网段，这都是一件非常简单的事情，如下所示：</p>
<p><span style="COLOR: #ff6600">allow from all<br>
deny from 145.186.14.122<br>
deny from 124.15</span></p>
<p>Apache对于被拒绝的IP会返回403错误。</p>
<p><strong>4. 把一些老的链接转到新的链接上——搜索引擎优化SEO </strong></p>
<p><span style="COLOR: #ff6600">Redirect 301 /d/file.html </span><a href="http://www.htaccesselite.com/r/file.html"><span style="COLOR: #ff6600">http://www.htaccesselite.com/r/file.html</span></a></p>
<p><strong>5. 为服务器管理员设置电子邮件。</strong></p>
<p><span style="COLOR: #ff6600">ServerSignature EMail<br>
SetEnv SERVER_ADMIN </span><a href="/cdn-cgi/l/email-protection#690d0c0f081c051d290d0604080007470a0604"><span style="COLOR: #ff6600"><span class="__cf_email__" data-cfemail="caaeafacabbfa6be8aaea5a7aba3a4e4a9a5a7">[email protected]</span></span></a></p>
<p><strong>6. 使用.htaccess 访止盗链。</strong>如果你网站上的一个图片被别的N多的网站引用了，那么，这很有可能会导致你服务器的性能下降，使用下面的代码可以保护某些热门的链接不被过多的引用。</p>
<p><span style="COLOR: #ff6600">Options +FollowSymlinks<br>
# Protect Hotlinking<br>
RewriteEngine On<br>
RewriteCond %{HTTP_REFERER} !^$<br>
RewriteCond %{HTTP_REFERER} !^http://(</span><a href="http://www.%29/?domainname.com/"><span style="COLOR: #ff6600">www.)?domainname.com/</span></a><span style="COLOR: #ff6600"> [nc]<br>
RewriteRule .*.(gif|jpg|png)$ </span><a href="http://domainname.com/img/hotlink_f_o.png"><span style="COLOR: #ff6600">http://domainname.com/img/hotlink_f_o.png</span></a><span style="COLOR: #ff6600"> [nc]</span></p>
<p><strong>7. 阻止 User Agent 的所有请求</strong></p>
<p><span style="COLOR: #ff6600">## .htaccess Code :: BEGIN<br>
## Block Bad Bots by user-Agent<br>
SetEnvIfNoCase user-Agent ^FrontPage [NC,OR]<br>
SetEnvIfNoCase user-Agent ^Java.* [NC,OR]<br>
SetEnvIfNoCase user-Agent ^Microsoft.URL [NC,OR]<br>
SetEnvIfNoCase user-Agent ^MSFrontPage [NC,OR]<br>
SetEnvIfNoCase user-Agent ^Offline.Explorer [NC,OR]<br>
SetEnvIfNoCase user-Agent ^[Ww]eb[Bb]andit [NC,OR]<br>
SetEnvIfNoCase user-Agent ^Zeus [NC]</span></p>
<p><span style="COLOR: #ff6600">Order Allow,Deny<br>
Allow from all<br>
Deny from env=bad_bot</span></p>
<p><span style="COLOR: #ff6600">## .htaccess Code :: END</span></p>
<p><strong>8. 把某些特殊的IP地址的请求重定向到别的站点</strong></p>
<p><span style="COLOR: #ff6600">ErrorDocument 403 </span><a href="http://www.youdomain.com/"><span style="COLOR: #ff6600">http://www.youdomain.com</span></a><br>
<span style="COLOR: #ff6600">Order deny,allow<br>
Deny from all<br>
Allow from 124.34.48.165<br>
Allow from 102.54.68.123</span></p>
<p><strong>9. 直接找开文件而不是下载</strong> – 通常，我们打开网上文件的时候总是会出现一个对话框问我们是下载还是直接打开，使用下面的设置就不会出现这个问题了，直接打开。</p>
<p><span style="COLOR: #ff6600">AddType application/octet-stream .pdf<br>
AddType application/octet-stream .zip<br>
AddType application/octet-stream .mov</span></p>
<p><strong>10. 修改文件类型</strong> – 下面的示例可以让任何的文件都成为PHP那么被服务器解释。比如：myphp, cgi，phtml等。</p>
<p><span style="COLOR: #ff6600">ForceType application/x-httpd-php<br>
SetHandler application/x-httpd-php</span></p>
<p><strong>11. 阻止存取.htaccess 文件</strong></p>
<p><span style="COLOR: #ff6600"># secure htaccess file</span></p>
<p><span style="COLOR: #ff6600"> order allow,deny<br>
 deny from all</span><br>
<strong>12. 保护服务器上的文件被存取</strong></p>
<p><span style="COLOR: #ff6600"># prevent access of a certain file</span><span style="COLOR: #ff6600"> order allow,deny<br>
 deny from all</span><br>
<strong>13. 阻止目录浏览</strong></p>
<p><span style="COLOR: #ff6600"># disable directory browsing<br>
Options All -Indexes</span></p>
<p><strong>14. 设置默认主页</strong></p>
<p><span style="COLOR: #ff6600"># serve alternate default index page<br>
DirectoryIndex about.html</span></p>
<p><strong>15. 口令认证</strong> – 你可以创建一个文件用于认证。下面是一个示例：</p>
<p><span style="COLOR: #ff6600"># to protect a file</span></p>
<p><span style="COLOR: #ff6600">AuthType Basic<br>
AuthName “Prompt”<br>
AuthUserFile /home/path/.htpasswd<br>
Require valid-user</span></p>
<p><span style="COLOR: #ff6600"># password-protect a directory<br>
resides<br>
AuthType basic<br>
AuthName “This directory is protected”<br>
AuthUserFile /home/path/.htpasswd<br>
AuthGroupFile /dev/null<br>
Require valid-user</span></p>
<p><strong>16. 把老的域名转像新的域名</strong></p>
<p><span style="COLOR: #ff6600"># redirect from old domain to new domain<br>
RewriteEngine On<br>
RewriteRule ^(.*)$ </span><a href="http://www.yourdomain.com/%241"><span style="COLOR: #ff6600">http://www.yourdomain.com/$1</span></a><span style="COLOR: #ff6600"> [R=301,L]</span></p>
<p><span style="color: #000000;">文章：<a href="https://rafeekphp.wordpress.com/2009/06/06/16-great-htaccess-tricks-and-hacks/" target="_blank">来源</a></span></p>
<p align="center"><img alt="image placeholder" >
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/3684.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/17680.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/551.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/1525.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/11973.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/2276.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
</ul>
</div></div>
<div id="post-ratings-1035" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="0f977cea91">
<img alt="image placeholder" >
<meta itemprop="headline" content="16个简单实用的.htaccess小贴示">
<meta itemprop="description" content=".htaccess 文件 (Hypertext Access file) 是Apache Web服务器的一个非常强大的配置文件，对于这个文件，Apache有一堆参数可以让你配置出几乎随心所欲的功能。.htaccess 配置文件坚持了Unix的一个文化——使用一个ASCII 的纯文本文件来配置你的网站的访问策略。

这篇文章包括了16个非常有用的小技巧。另外，因为.htaccess 是一个相当强...">
<meta itemprop="datePublished" content="2009-06-14T12:27:09+08:00">
<meta itemprop="dateModified" content="2009-06-14T12:27:09+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/1035.html">
<meta itemprop="author" content="陈皓">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/1035.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="3.71">
<meta itemprop="ratingCount" content="7">
</div>
</div>
<div id="post-ratings-1035-loading" class="post-ratings-loading">
<img alt="image placeholder" >
 ]]></content>
<pubDate>2009-06-14T12:27:09+08:00</pubDate>
<guid>https://coolshell.cn/articles/1035.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ 编程命名中的7+1个提示 ]]></title>
<link>https://coolshell.cn/articles/1038.html</link>
<content><![CDATA[ 
<p>前几天Neo写过《<a title="编程中的命名设计那点事" href="https://coolshell.cn/articles/990.html">编程中的命名设计那点事</a>》，这里也有另外一篇和程序命名的文章，可以从另一个角度看看。</p>
<p><strong>1.- 变量应该是尽可能的望文知意。千万不要使用教材中的命名方式。</strong></p>
<ul>
<li>
<strong>好的变量</strong>：<strong> </strong>daysDateRange, flightNumber, carColor.</li>
<li>
<strong>坏的变量</strong>： days, dRange, temp, data, aux…</li>
</ul>
<p>在我们的日常工作中，有很大数量的开发人员喜欢使用短的变量名，而不是有含义的变量名。这主要是因为我们大学教科书的那些示例所造成的，人都是先入为主，所以，教科书中的那些很抽象，带着演示的变量命名影响了我们一代又一代的程序员，并影响了他们很多年。虽然那些短的，教材式的变量名，可能会让你少打一些字，但其实，这是非常非常不好的。因为软件的维护成本远远大于了软件的开发成本，如果你不取一个好的一点的变量名，那么当进行代码评审时，当进行bug fixing时，当进行代码重构时，当进行代码维护时，你的某个变量名可能会让你一头雾水，不知道所措，还可以会让你走入陷阱，造成更大的时间成本。所以，一个可阅读的代码必然和那些不错的变量名分不开，而这也能让你的软件间接上有更好的质量。</p>
<p><span id="more-1038"></span></p>
<p><strong>2.- 变量名不要太长，尽可能地简短</strong></p>
<p>只有简单和简短的变量名才是容易阅读的。因为你的变量名一定会用于程序语句中，所以，为了让你的程序语句看起来的简短，你的变量名也应该短一点，不然写出来的一个表达式就会显得很复杂。</p>
<p>当然，在有些时候，一个有含义的变量名和一个简短的变量名可能存在一些冲突。这相当锻炼我们的语言能力——如果有最精炼的词语来表达最丰富的含义。如果实在做不到，那么，取一个有含义的变量名要比取一个简短的变量名更好一些。不管怎么样，我们希望即简短又有丰富的含义，但如果不能两全，那有含义优先级更高一些。</p>
<ul>
<li>
<strong>坏的变量</strong>：howLonDoesItTakeToOpenTheDoor， howBigIsTheMaterial…</li>
<li>
<strong>好的变量</strong>：timeToOpenTheDoor， MaterialSize.</li>
</ul>
<p><strong>3.- 可以使用缩写，但需要有一些注释</strong></p>
<p>有一些时候，我们需要使用一些缩写来命名变量，比如：用usr来表示user，用gp来表示group，用conf来表示configuration，用cwd来表示current working directory，用ptr来代码point to reference，等等，等等。缩写一般要用在大家可以看得懂的，而不是为了缩写而缩短一个单词，当然，如果你把缩写后的变量名加上注释，那就更加稳妥了。关于一些约定俗成的缩写，可参看本文的<strong>附录一</strong>。</p>
<p><strong>4.- 使用合适的匈牙利命名规则</strong></p>
<p>这里有一篇非常不错的英文文章告诉你 《<a onclick="pageTracker._trackPageview('/outgoing/www.joelonsoftware.com/articles/Wrong.html');" href="http://www.joelonsoftware.com/articles/Wrong.html" target="_blank">什么是合适的匈牙利命名</a> 》，这篇文章同时还告诉你如何去用他。基本上来说，匈牙利命名法主要是为变量加上某种前缀以标识这个变量的类型，或是一种方法的功能。其基本原则是：变量名＝属性＋类型＋对象描述。</p>
<p>比如：在描述类型方面：指针p，函数fn，长整型 l，布尔b，浮点型（有时也指文件）f，双字 dw，字符串 sz，短整型 n，双精度浮点 d，无符号 u……等等。关于更多的命名规范，请参见<strong>附录二</strong>。</p>
<p>注意，匈牙利命名也是有不好的地方的，比如你要把一个整形改成一个浮点型，你除了要改变这个变量的类型，你还要改变这个变量的名字。这是相当麻烦的。而且，在某些时候，这种前缀式的命名可以反而让你不知所措。另外，在C++中，有了类以后，这种命名方法就显得不容易去实施了。所以，合适地使用匈牙利命名方式背后的思想是很关键的。</p>
<p><strong>5.- 不要使用反逻辑来命名</strong></p>
<ul>
<li>
<strong>好的命名</strong>：  IsEnabled.</li>
<li>
<strong>坏的命名：</strong> IsNotEnabled.</li>
</ul>
<p>在阅读的时候，我们更喜欢正向的逻辑，而不是反向逻辑。这一规则不单单的命名，在条件语句中，我们也是要尽量不要使用这种反面的逻辑。如：if (! (isAdmin || isUser))，这样的语句很不符合人读代码的习惯，写成这样会更好一些——if (!isAdmin &amp;&amp; !isUser)。</p>
<p><strong>6.- 保持一致性</strong></p>
<p>保持所有代码的一致性。使用相同的命名规则。这外世界上没有最好的命名规范。但有一点是可以确认的，那就是在一个代码库中，应该使用一致的命名规则，即使这个规则不那么好，但整个团队使用一致的就是好的。</p>
<p><strong>7.- 附和应用程序的领域术语</strong></p>
<p>在不同的领域中，不同的观念会有非常特别和不同的意思。例如：单词“order”并不总是意味着“次顺”，有些时候，其意味着“订单”，有些时候，意味着“命令”，有些时候，意为着“规则”。所以，在某个领域中，某些单词会有不同的含义，所以，这需要我们的命令去附和这些领域。</p>
<p> </p>
<p><strong>黄金法则- 花一些时间去思考去权衡一下你的变量名</strong></p>
<p>当你设计好一个的变量名一个函数名的时候，别着急去使用他，停下来，想一想，这个变量名是否合适，是否还有更好的？也许你正在使用的是一个很不好的变量名。有些时候，需要我们权衡利弊一下，可能还要去和同事讨论一下。</p>
<p>总之，变量名是编程的第一步，第一步走好了，后面才走得好。试想，无论是你或你的同事在使用一些好的变量名编程是一件多么轻松的事啊。</p>
<p> </p>
<h4>附录：部分的缩写规范</h4>
<table border="0" align="center">
<tbody>
<tr>
<td>完整单词</td>
<td>缩写</td>
</tr>
<tr>
<td>A</td>
<td> </td>
</tr>
<tr>
<td>average</td>
<td>avg</td>
</tr>
<tr>
<td>B</td>
<td> </td>
</tr>
<tr>
<td>back</td>
<td>bk</td>
</tr>
<tr>
<td>background</td>
<td>bg</td>
</tr>
<tr>
<td>break</td>
<td>brk</td>
</tr>
<tr>
<td>buffer</td>
<td>buf</td>
</tr>
<tr>
<td>C</td>
<td> </td>
</tr>
<tr>
<td>color</td>
<td>cr,clr</td>
</tr>
<tr>
<td>control</td>
<td>ctrl</td>
</tr>
<tr>
<td>D</td>
<td> </td>
</tr>
<tr>
<td>data</td>
<td>dat</td>
</tr>
<tr>
<td>delete</td>
<td>del</td>
</tr>
<tr>
<td>document</td>
<td>doc</td>
</tr>
<tr>
<td>E</td>
<td> </td>
</tr>
<tr>
<td>edit</td>
<td>edt</td>
</tr>
<tr>
<td>error</td>
<td>err</td>
</tr>
<tr>
<td>escape</td>
<td>esc</td>
</tr>
<tr>
<td>F</td>
<td> </td>
</tr>
<tr>
<td>flag</td>
<td>flg</td>
</tr>
<tr>
<td>form</td>
<td>frm</td>
</tr>
<tr>
<td>G</td>
<td> </td>
</tr>
<tr>
<td>grid</td>
<td>grd</td>
</tr>
<tr>
<td>I</td>
<td> </td>
</tr>
<tr>
<td>increment</td>
<td>inc</td>
</tr>
<tr>
<td>information</td>
<td>info</td>
</tr>
<tr>
<td>initial</td>
<td>init</td>
</tr>
<tr>
<td>insert</td>
<td>ins</td>
</tr>
<tr>
<td>image</td>
<td>img</td>
</tr>
<tr>
<td>L</td>
<td> </td>
</tr>
<tr>
<td>lable</td>
<td>lab</td>
</tr>
<tr>
<td>length</td>
<td>len</td>
</tr>
<tr>
<td>list</td>
<td>lst</td>
</tr>
<tr>
<td>library</td>
<td>lib</td>
</tr>
<tr>
<td>M</td>
<td> </td>
</tr>
<tr>
<td>manager</td>
<td>mgr,mngr</td>
</tr>
<tr>
<td>message</td>
<td>msg</td>
</tr>
<tr>
<td>O</td>
<td> </td>
</tr>
<tr>
<td>Oracle</td>
<td>Ora</td>
</tr>
<tr>
<td>P</td>
<td> </td>
</tr>
<tr>
<td>panorama</td>
<td>pano</td>
</tr>
<tr>
<td>password</td>
<td>pwd</td>
</tr>
<tr>
<td>picture</td>
<td>pic</td>
</tr>
<tr>
<td>point</td>
<td>pt</td>
</tr>
<tr>
<td>position</td>
<td>pos</td>
</tr>
<tr>
<td>print</td>
<td>prn</td>
</tr>
<tr>
<td>program</td>
<td>prg</td>
</tr>
<tr>
<td>S</td>
<td> </td>
</tr>
<tr>
<td>server</td>
<td>srv</td>
</tr>
<tr>
<td>source</td>
<td>src</td>
</tr>
<tr>
<td>statistic</td>
<td>stat</td>
</tr>
<tr>
<td>string</td>
<td>str</td>
</tr>
<tr>
<td>Sybase</td>
<td>Syb</td>
</tr>
<tr>
<td>T</td>
<td> </td>
</tr>
<tr>
<td>temp</td>
<td>tmp</td>
</tr>
<tr>
<td>text</td>
<td>txt</td>
</tr>
<tr>
<td>U</td>
<td> </td>
</tr>
<tr>
<td>user</td>
<td>usr</td>
</tr>
<tr>
<td>W</td>
<td> </td>
</tr>
<tr>
<td>window</td>
<td>win,wnd</td>
</tr>
</tbody>
</table>
<p> </p>
<h4>附录二、匈牙利命名法</h4>
<pre>  a       Array                       数组
  b       BOOL (int)                  布尔(整数)
  by      Unsigned Char (Byte)        无符号字符(字节)
  c       Char                        字符(字节)
  cb      Count of bytes              字节数
  cr      Color reference value       颜色(参考)值
  cx      Count of x (Short)          x的集合(短整数)
  dw      DWORD   (unsigned long)     双字(无符号长整数)
  f       Flags                       标志(一般是有多位的数值)
  fn      Function                    函数
  g_      global                      全局的
  h       Handle                      句柄
  i       Integer                     整数
  l       Long                        长整数
  lp      Long pointer                长指针
  m_      Data member of a class      一个类的数据成员
  n       Short int                   短整数
  p       Pointer                     指针
  s       String                      字符串
  sz      Zero terminated String      以0结尾的字符串
  tm      Text metric                 文本规则
  u       Unsigned int                无符号整数
  ul      Unsigned long (ULONG)       无符号长整数
  w       WORD (unsigned short)       无符号短整数
  x,y     x, y coordinates (short)    坐标值/短整数
  v       void                        空</pre>
<p>有关项目的全局变量用g_开始，类成员变量用m_，局部变量若函数较大则可考虑用l_用以显示说明其是局部变量。</p>
<pre>前缀       类型        例子
g_      全局变量       g_Servers
C       类或者结构体   CDocument，CPrintInfo
m_      成员变量       m_pDoc，m_nCustomers</pre>
<p><strong>VC常用前缀列表：</strong></p>
<pre>前缀   类型   描述                      例子
ch     char    8位字符                   chGrade
ch     TCHAR   16位UNICODE类型字符       chName
b      BOOL    布尔变量                  bEnabled
n      int     整型                      nLength
n      UINT    无符号整型                nLength
w      WORD    16位无符号整型            wPos
l      LONG    32位有符号整型            lOffset
dw     DWORD   32位无符号整型            dwRange
p      *       内存模块指针，指针变量   pDoc
lp     FAR*    长指针                    lpDoc
lpsz   LPSTR   32位字符串指针           lpszName
lpsz   LPCSTR  32位常量字符串指针       lpszName
lpsz   LPCTSTR 32位UNICODE类型常量指针  lpszName
h      handle  Windows对象句柄           hWnd
lpfn   (*fn)() 回调函数指针              lpfnAbort</pre>
<p><strong>Windows对象名称缩写：</strong></p>
<pre>Windows对象 例子变量  MFC类       例子对象
HWND        hWnd;      CWnd*       pWnd;
HDLG        hDlg;      CDialog*    pDlg;
HDC         hDC;       CDC*        pDC;
HGDIOBJ     hGdiObj;   CGdiObject* pGdiObj;
HPEN        hPen;      CPen*       pPen;
HBRUSH      hBrush;    CBrush*     pBrush;
HFONT       hFont;     CFont*      pFont;
HBITMAP     hBitmap;   CBitmap*    pBitmap;
HPALETTE    hPalette;  CPalette*   pPalette;
HRGN        hRgn;      CRgn*       pRgn;
HMENU       hMenu;     CMenu*      pMenu;
HWND        hCtl;      CStatic*    pStatic;
HWND        hCtl;      CButton*    pBtn;
HWND        hCtl;      CEdit*      pEdit;
HWND        hCtl;      CListBox*   pListBox;
HWND        hCtl;      CComboBox*  pComboBox;

（全文完）</pre>
<p></p>
<p align="center"><img alt="image placeholder" >
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/18024.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/8990.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/8745.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/7886.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/5444.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/5201.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
</ul>
</div></div>
<div id="post-ratings-1038" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="32691fb459">
<img alt="image placeholder" >
<meta itemprop="headline" content="编程命名中的7+1个提示">
<meta itemprop="description" content="前几天Neo写过《编程中的命名设计那点事》，这里也有另外一篇和程序命名的文章，可以从另一个角度看看。

1.- 变量应该是尽可能的望文知意。千万不要使用教材中的命名方式。

	好的变量： daysDateRange, flightNumber, carColor.
	坏的变量： days, dRange, temp, data, aux…

在我们的日常工作中，有很大数量的开发人员喜...">
<meta itemprop="datePublished" content="2009-06-15T22:36:17+08:00">
<meta itemprop="dateModified" content="2009-07-05T21:32:20+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/1038.html">
<meta itemprop="author" content="陈皓">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/1038.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="3.91">
<meta itemprop="ratingCount" content="11">
</div>
</div>
<div id="post-ratings-1038-loading" class="post-ratings-loading">
<img alt="image placeholder" >
 ]]></content>
<pubDate>2009-06-15T22:36:17+08:00</pubDate>
<guid>https://coolshell.cn/articles/1038.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ 高级Unix命令 ]]></title>
<link>https://coolshell.cn/articles/1044.html</link>
<content><![CDATA[ 
<p>在Unix操作中有太多太多的命令，这些命令的强大之处就是一个命令只干一件事，并把这件事干好。Do one thing， do it well。这是unix的哲学。而且Unix首创的管道可以把这些命令任意地组合，以完成一个更为强大功能。这些哲学到今天都在深深地影响着整个计算机产业。比如今天最流行的“云计算”——把一个软件以碎片方式部署，然后这些功能可以任意组合。</p>
<p>这篇文章罗列了很多Unix下比较高级的命令，当然，Unix/Linux下还有更多更多的命令，我们相信你可能见过其中的某些命令，也有可能有一些命令没有见过。不管怎么说，我们希望这些命令一方面可以让你知道怎么使用Unix/Linux操作系统，另一方面，我们也希望你能从中感到Unix的那种软件开发的哲学思想。</p>
<p><span id="more-1044"></span></p>
<table border="0" cellspacing="0" cellpadding="4">
<tbody>
<tr bgcolor="#ccccff">
<td><span style="font-size: xx-small;">ACCTCOM</span></td>
<td>::</td>
</tr>
<tr>
<td>查看所有用户执行过的进程（命令）</td>
<td><span style="color: #333399;">acctcom | tail -20</span></td>
</tr>
<tr>
<td>查看指定用户执行过的进程（命令）</td>
<td><span style="color: #333399;">acctcom -u &lt;username&gt; | tail -20</span></td>
</tr>
<tr>
<td>使用一个正则表达式查找相关进程</td>
<td><span style="color: #333399;">acctcom -n &lt;pattern&gt; | tail -20</span></td>
</tr>
<tr>
<td>查找所有以l开头的被用户执行过的命令</td>
<td><span style="color: #333399;">acctcom -n ‘^l’ | tail -30</span></td>
</tr>
<tr>
<td>以反向顺序显示</td>
<td><span style="color: #333399;">acctom -b | more</span></td>
</tr>
<tr bgcolor="#ccccff">
<td><span style="font-size: xx-small;">AGREP</span></td>
<td>::</td>
</tr>
<tr>
<td>在文件中查找一个可能拼写错的单词</td>
<td><span style="color: #333399;">agrep -2 ‘macropperswan’ &lt;file&gt;</span></td>
</tr>
<tr bgcolor="#ccccff">
<td><span style="font-size: xx-small;">AT</span></td>
<td>::</td>
</tr>
<tr>
<td>在未来某个时间执行某个命令</td>
<td><span style="color: #333399;">at now + 5 days &lt; scriptfile</span></td>
</tr>
<tr bgcolor="#ccccff">
<td><span style="font-size: xx-small;">AWK</span></td>
<td>::</td>
</tr>
<tr>
<td>显示文件的第一列</td>
<td><span style="color: #333399;">awk ‘{print $1}’ &lt;file&gt;</span></td>
</tr>
<tr>
<td>反序显示文件的前两列</td>
<td><span style="color: #333399;">awk ‘{print $2,”\t”,$1}’ &lt;file&gt;</span></td>
</tr>
<tr>
<td>输出前两列的总和</td>
<td><span style="color: #333399;">awk ‘{print $1 + $2}’ &lt;file&gt;</span></td>
</tr>
<tr>
<td>查找所有包括”money” 行并输出最后一列</td>
<td><span style="color: #333399;">awk ‘/money/ {print $NF}’ &lt;file&gt;</span></td>
</tr>
<tr>
<td>查找第二列中包含 “money”</td>
<td><span style="color: #333399;">awk ‘$2 ~ /money/ {print $0}’ &lt;file&gt;</span></td>
</tr>
<tr>
<td>查找第三列中不包括”A”</td>
<td><span style="color: #333399;">awk ‘$3 !~ /A$/ {print $0}’ &lt;file&gt;</span></td>
</tr>
<tr bgcolor="#ccccff">
<td><span style="font-size: xx-small;">BC</span></td>
<td>::</td>
</tr>
<tr>
<td>计算sin(5)的值</td>
<td><span style="color: #333399;">echo ‘s(5)’ | bc -l</span></td>
</tr>
<tr bgcolor="#ccccff">
<td><span style="font-size: xx-small;">CANCEL</span></td>
<td>::</td>
</tr>
<tr>
<td>取消一个刚开始启动的打印的作业</td>
<td>
<span style="color: #333399;">cancel &lt;jobid&gt; </span>( jobid可以由lpstat -o输出)</td>
</tr>
<tr bgcolor="#ccccff">
<td><span style="font-size: xx-small;">CASE in ESAC </span></td>
<td>::</td>
</tr>
<tr>
<td>sh/bash/ksh中的case语句</td>
<td> </td>
</tr>
<tr bgcolor="#ccccff">
<td><span style="font-size: xx-small;">CC</span></td>
<td>::</td>
</tr>
<tr>
<td>编译一个C文件file.c</td>
<td><span style="color: #333399;">cc -o &lt;outfile&gt; &lt;infile&gt;</span></td>
</tr>
<tr bgcolor="#ccccff">
<td><span style="font-size: xx-small;">CHGRP</span></td>
<td>::</td>
</tr>
<tr>
<td>修改文件的组所属</td>
<td><span style="color: #333399;">chgrp &lt;newgroupname&gt; &lt;file&gt;</span></td>
</tr>
<tr bgcolor="#ccccff">
<td><span style="font-size: xx-small;">CHOWN</span></td>
<td>::</td>
</tr>
<tr>
<td>修改文件的所属人</td>
<td><span style="color: #333399;">chown &lt;newowner&gt; &lt;file&gt;</span></td>
</tr>
<tr bgcolor="#ccccff">
<td><span style="font-size: xx-small;">CMP</span></td>
<td>::</td>
</tr>
<tr>
<td>比较两个文件</td>
<td><span style="color: #333399;">cmp &lt;file1&gt; &lt;file2&gt; || &lt;command&gt;</span></td>
</tr>
<tr bgcolor="#ccccff">
<td><span style="font-size: xx-small;">COL</span></td>
<td>::</td>
</tr>
<tr>
<td>打印man pages，去除其中 “^H”</td>
<td><span style="color: #333399;">man &lt;command&gt; | col -b | &lt;printcommand&gt;</span></td>
</tr>
<tr bgcolor="#ccccff">
<td><span style="font-size: xx-small;">CRONTAB</span></td>
<td>::</td>
</tr>
<tr>
<td>查看你的crontab 文件</td>
<td><span style="color: #333399;">crontab -l</span></td>
</tr>
<tr>
<td>编译 crontab 文件</td>
<td><span style="color: #333399;">crontab -e</span></td>
</tr>
<tr>
<td>第周一的05:10 执行/home/fred/foo.ksh</td>
<td><span style="color: #333399;">10 5 * * 1 /home/fred/foo.ksh</span></td>
</tr>
<tr bgcolor="#ccccff">
<td><span style="font-size: xx-small;">CRYPT</span></td>
<td>::</td>
</tr>
<tr>
<td>使用一个口令加密一个文件</td>
<td><span style="color: #333399;">crypt password &lt; infile &gt; cryptfile</span></td>
</tr>
<tr>
<td>解密一个被上面命令加密了的文件</td>
<td><span style="color: #333399;">crypt password &lt; cryptfile &gt; cleanfile</span></td>
</tr>
<tr bgcolor="#ccccff">
<td><span style="font-size: xx-small;">CSH </span></td>
<td>::</td>
</tr>
<tr>
<td>最好的Berkley shell</td>
<td> </td>
</tr>
<tr bgcolor="#ccccff">
<td><span style="font-size: xx-small;">CUT</span></td>
<td>::</td>
</tr>
<tr>
<td>从last 命令的输出中得到hostname字段</td>
<td><span style="color: #333399;">last | cut -c11-40</span></td>
</tr>
<tr bgcolor="#ccccff">
<td><span style="font-size: xx-small;">DATE</span></td>
<td>::</td>
</tr>
<tr>
<td>设置时间(只能由root 执行)</td>
<td><span style="color: #333399;">date &lt;mmddhhmm&gt;</span></td>
</tr>
<tr>
<td>输出指定日期格式 (如：月份)</td>
<td><span style="color: #333399;">date +%m</span></td>
</tr>
<tr bgcolor="#ccccff">
<td><span style="font-size: xx-small;">DF</span></td>
<td>::</td>
</tr>
<tr>
<td>以kB单位查看磁盘空间</td>
<td><span style="color: #333399;">df -k</span></td>
</tr>
<tr bgcolor="#ccccff">
<td><span style="font-size: xx-small;">DIRCMP</span></td>
<td>::</td>
</tr>
<tr>
<td>比较两个目录</td>
<td><span style="color: #333399;">dircmp &lt;dir1&gt; &lt;dir2&gt;</span></td>
</tr>
<tr bgcolor="#ccccff">
<td><span style="font-size: xx-small;">DTKSH</span></td>
<td>::</td>
</tr>
<tr>
<td>dtksh 是一个 X11 图形的ksh93</td>
<td><span style="color: #333399;">dtksh</span></td>
</tr>
<tr bgcolor="#ccccff">
<td><span style="font-size: xx-small;">DU</span></td>
<td>::</td>
</tr>
<tr>
<td>磁盘使用情况</td>
<td><span style="color: #333399;">du -ks</span></td>
</tr>
<tr bgcolor="#ccccff">
<td><span style="font-size: xx-small;">ED </span></td>
<td>::</td>
</tr>
<tr>
<td>命令行编译器。</td>
<td><span style="color: #333399;">ed &lt;file&gt;</span></td>
</tr>
<tr bgcolor="#ccccff">
<td><span style="font-size: xx-small;">EGREP</span></td>
<td>::</td>
</tr>
<tr>
<td>使用“或”条件Grep 文件</td>
<td><span style="color: #333399;">egrep ‘(A|B)’ &lt;file&gt;</span></td>
</tr>
<tr>
<td>grep文件中即不包括A也不包括B</td>
<td><span style="color: #333399;">egrep -v ‘(A|B)’ &lt;file&gt;</span></td>
</tr>
<tr bgcolor="#ccccff">
<td><span style="font-size: xx-small;">EX</span></td>
<td>::</td>
</tr>
<tr>
<td>使用一个shell脚来来编辑一个文件</td>
<td><span style="color: #333399;">ex -s file &lt;&lt;EOF<br>
g/money/s//cash/<br>
EOF</span></td>
</tr>
<tr>
<td>以一个脚本文件来编辑一个文件</td>
<td><span style="color: #333399;">ex -s file &lt; scriptfile</span></td>
</tr>
<tr bgcolor="#ccccff">
<td><span style="font-size: xx-small;">EXPR</span></td>
<td>::</td>
</tr>
<tr>
<td>求模</td>
<td><span style="color: #333399;">expr 10 % 7</span></td>
</tr>
<tr>
<td>查看字串是否在变量$var中</td>
<td><span style="color: #333399;">expr $var : ‘string’</span></td>
</tr>
<tr>
<td>显示第一个数字组成的字串</td>
<td><span style="color: #333399;">expr $var : ‘[^0-9]*\([a-z]*\)’</span></td>
</tr>
<tr bgcolor="#ccccff">
<td><span style="font-size: xx-small;">FGREP</span></td>
<td>::</td>
</tr>
<tr>
<td>查找不匹配于某正规表达式的文件行</td>
<td><span style="color: #333399;">fgrep ‘*,/.()’ &lt;file&gt;</span></td>
</tr>
<tr bgcolor="#ccccff">
<td><span style="font-size: xx-small;">FILE</span></td>
<td>::</td>
</tr>
<tr>
<td>查看文件类型(如： ascii)</td>
<td><span style="color: #333399;">file &lt;file&gt;</span></td>
</tr>
<tr bgcolor="#ccccff">
<td><span style="font-size: xx-small;">FIND</span></td>
<td>::</td>
</tr>
<tr>
<td>在整个文件系统中查的一个文件</td>
<td><span style="color: #333399;">find / -type f -name &lt;file&gt; -print</span></td>
</tr>
<tr>
<td>查找所有匹配于模式的文件</td>
<td><span style="color: #333399;">find . -type f -name “*&lt;foo&gt;*” -print</span></td>
</tr>
<tr>
<td>删除系统中所有的core文件</td>
<td><span style="color: #333399;">find / -type f -name core -exec /bin/rm -f {} \;</span></td>
</tr>
<tr>
<td>查找所有包含某单词的文件</td>
<td><span style="color: #333399;">find . -type f -exec grep -l &lt;word&gt; {} \;</span></td>
</tr>
<tr>
<td>查找所有修改日期在30天以前的文件</td>
<td><span style="color: #333399;">find . -type f -ctime +30 -print</span></td>
</tr>
<tr>
<td>使用xargs来备份所有的.c文件（加上.bak后缀）</td>
<td><span style="color: #333399;">find . -name “*.c” -print | xargs -i cp {} {}.bak</span></td>
</tr>
<tr>
<td>只搜索本地文件系统（不搜索nfs文件系统）</td>
<td><span style="color: #333399;">find . -local …</span></td>
</tr>
<tr>
<td>在搜索的过程中，跟随link文件的实际位置</td>
<td><span style="color: #333399;">find . -follow …</span></td>
</tr>
<tr>
<td>查找大于1M的文件</td>
<td><span style="color: #333399;">find /path -size 1000000c -print</span></td>
</tr>
<tr>
<td>运行find命令但忽略”permission denied”</td>
<td>
<span style="color: #333399;">find … 2&gt;/dev/null </span>( 只能在sh/bash/ksh )</td>
</tr>
<tr>
<td>查找所有的man目录</td>
<td><span style="color: #333399;">find / -type d -print | egrep ‘.*/(catman|man)$’</span></td>
</tr>
<tr>
<td>查找所有有写权限的目录</td>
<td><span style="color: #333399;">find / -type d -perm -002 -print</span></td>
</tr>
<tr bgcolor="#ccccff">
<td><span style="font-size: xx-small;">GAWK </span></td>
<td>::</td>
</tr>
<tr>
<td>GNU版本的nawk</td>
<td> </td>
</tr>
<tr bgcolor="#ccccff">
<td><span style="font-size: xx-small;">GREP</span></td>
<td>::</td>
</tr>
<tr>
<td>以某个正规表达式查找包含其的文件行</td>
<td><span style="color: #333399;">grep ‘[a-z][0-9]’ &lt;file&gt;</span></td>
</tr>
<tr>
<td>查找不包含指定正则表达式的文件行</td>
<td><span style="color: #333399;">grep -v ‘^From’ &lt;file&gt;</span></td>
</tr>
<tr>
<td>查找一组文件</td>
<td><span style="color: #333399;">grep -l ‘^[cC]’ *.f</span></td>
</tr>
<tr>
<td>计算包括某正则表达式文件行的数目</td>
<td><span style="color: #333399;">grep -c ‘[Ss]uccess’ &lt;file&gt;</span></td>
</tr>
<tr>
<td>不区分大小写的查找</td>
<td><span style="color: #333399;">grep -i ‘lAbEgF’ &lt;file&gt;</span></td>
</tr>
<tr>
<td>在匹配到的文件内容前输出文件的行号</td>
<td><span style="color: #333399;">grep -n ‘mo.*y’ &lt;file&gt;</span></td>
</tr>
<tr bgcolor="#ccccff">
<td><span style="font-size: xx-small;">HINV </span></td>
<td>::</td>
</tr>
<tr>
<td>命令显示系统硬件的详细列表，包括：CPU类型、内存大小、所有的磁盘设备。</td>
<td><span style="color: #333399;">hinv -v</span></td>
</tr>
<tr bgcolor="#ccccff">
<td><span style="font-size: xx-small;">IF then else ENDIF </span></td>
<td>::</td>
</tr>
<tr>
<td>csh/tcsh中的if 语句</td>
<td> </td>
</tr>
<tr bgcolor="#ccccff">
<td><span style="font-size: xx-small;">IF then else FI </span></td>
<td>::</td>
</tr>
<tr>
<td>sh/bash/ksh 中的if 语句</td>
<td>if [[ condition ]];then commands;fi</td>
</tr>
<tr bgcolor="#ccccff">
<td><span style="font-size: xx-small;">KSH</span></td>
<td>::</td>
</tr>
<tr>
<td>Korn shell. (ksh88)</td>
<td> </td>
</tr>
<tr bgcolor="#ccccff">
<td><span style="font-size: xx-small;">LN</span></td>
<td>::</td>
</tr>
<tr>
<td>创建一个硬链接文件a链接到文件A</td>
<td><span style="color: #333399;">ln a B</span></td>
</tr>
<tr>
<td>创建一个符号链接文件a链接到文件A</td>
<td><span style="color: #333399;">ln -s a B</span></td>
</tr>
<tr>
<td>删除链接文件B</td>
<td><span style="color: #333399;">rm B</span></td>
</tr>
<tr bgcolor="#ccccff">
<td><span style="font-size: xx-small;">LP</span></td>
<td>::</td>
</tr>
<tr>
<td>在默认打印机上打印文件</td>
<td><span style="color: #333399;">lp &lt;file&gt;</span></td>
</tr>
<tr>
<td>在指定打印机上打印文件</td>
<td><span style="color: #333399;">lp -d &lt;destination&gt; &lt;file&gt;</span></td>
</tr>
<tr bgcolor="#ccccff">
<td><span style="font-size: xx-small;">LPSTAT</span></td>
<td>::</td>
</tr>
<tr>
<td>显示所有的打印机</td>
<td><span style="color: #333399;">lpstat -a</span></td>
</tr>
<tr>
<td>查看打印机任务队列</td>
<td><span style="color: #333399;">lpstat -o</span></td>
</tr>
<tr>
<td>查看默认打印机</td>
<td><span style="color: #333399;">lpstat -d</span></td>
</tr>
<tr>
<td>查看打印机状态</td>
<td><span style="color: #333399;">lpstat -p</span></td>
</tr>
<tr>
<td>查看计划任何状态</td>
<td><span style="color: #333399;">lpstat -r</span></td>
</tr>
<tr bgcolor="#ccccff">
<td><span style="font-size: xx-small;">MAKE</span></td>
<td>::</td>
</tr>
<tr>
<td>执行一个 makefile中的第一个目标</td>
<td><span style="color: #333399;">make</span></td>
</tr>
<tr>
<td>执行一个 makefile中的指点目标</td>
<td><span style="color: #333399;">make &lt;target&gt;</span></td>
</tr>
<tr>
<td>指定一个特定的makefile文件名</td>
<td><span style="color: #333399;">make -f &lt;mymakefile&gt;</span></td>
</tr>
<tr>
<td>显示要做什么，但其实什么也没做</td>
<td><span style="color: #333399;">make -n &lt;target&gt;</span></td>
</tr>
<tr bgcolor="#ccccff">
<td><span style="font-size: xx-small;">MKDIR</span></td>
<td>::</td>
</tr>
<tr>
<td>一次创键目录和子目录</td>
<td><span style="color: #333399;">mkdir -p &lt;path&gt;/&lt;path&gt;/&lt;path&gt;</span></td>
</tr>
<tr bgcolor="#ccccff">
<td><span style="font-size: xx-small;">MOUNT </span></td>
<td>::</td>
</tr>
<tr>
<td>查看挂载的文件卷</td>
<td><span style="color: #333399;">mount</span></td>
</tr>
<tr>
<td>查看挂载的文件卷（有格式的）</td>
<td><span style="color: #333399;">mount -p</span></td>
</tr>
<tr>
<td>挂载一个光驱到目录/cdrom</td>
<td><span style="color: #333399;">mount /dev/cdrom /cdrom</span></td>
</tr>
<tr>
<td>挂载一个磁盘分区到目录 /usr</td>
<td><span style="color: #333399;">mount /dev/dsk/c0t3d0s5 /usr</span></td>
</tr>
<tr bgcolor="#ccccff">
<td><span style="font-size: xx-small;">NAWK</span></td>
<td>::</td>
</tr>
<tr>
<td>增强版的 awk</td>
<td> </td>
</tr>
<tr bgcolor="#ccccff">
<td><span style="font-size: xx-small;">NL</span></td>
<td>::</td>
</tr>
<tr>
<td>以带行号的方式输出文件</td>
<td><span style="color: #333399;">nl -bt -nln &lt;file&gt;</span></td>
</tr>
<tr bgcolor="#ccccff">
<td><span style="font-size: xx-small;">NOHUP</span></td>
<td>::</td>
</tr>
<tr>
<td>启动一个命令马上退出</td>
<td><span style="color: #333399;">nohup &lt;command&gt; &amp;</span></td>
</tr>
<tr bgcolor="#ccccff">
<td><span style="font-size: xx-small;">PACK</span></td>
<td>::</td>
</tr>
<tr>
<td>一个很老的文件打包程序，现在被gzip代替了。</td>
<td><span style="color: #333399;">pack &lt;file&gt;</span></td>
</tr>
<tr bgcolor="#ccccff">
<td><span style="font-size: xx-small;">PASSWD</span></td>
<td>::</td>
</tr>
<tr>
<td>修改你的帐号口令</td>
<td><span style="color: #333399;">passwd</span></td>
</tr>
<tr>
<td>删除一个用户的口令(root使用)</td>
<td><span style="color: #333399;">passwd -d &lt;username&gt;</span></td>
</tr>
<tr>
<td>改变一个用户的口令 (root使用)</td>
<td><span style="color: #333399;">passwd &lt;username&gt;</span></td>
</tr>
<tr bgcolor="#ccccff">
<td><span style="font-size: xx-small;">PASTE</span></td>
<td>::</td>
</tr>
<tr>
<td>以列的方式把多个文件组合起来</td>
<td><span style="color: #333399;">paste &lt;file1&gt; &lt;file2&gt; &gt; &lt;newfile&gt;</span></td>
</tr>
<tr bgcolor="#ccccff">
<td><span style="font-size: xx-small;">PERL</span></td>
<td>::</td>
</tr>
<tr>
<td>Perl脚本语言的解释器</td>
</tr>
<tr bgcolor="#ccccff">
<td><span style="font-size: xx-small;">PR</span></td>
<td>::</td>
</tr>
<tr>
<td>把一个文件做成可打印的格式（76行一页）</td>
<td><span style="color: #333399;">pr -l76 -h”title” &lt;filename&gt;</span></td>
</tr>
<tr>
<td> </td>
<td> </td>
</tr>
<tr bgcolor="#ccccff">
<td><span style="font-size: xx-small;">REGCMP</span></td>
<td>::</td>
</tr>
<tr>
<td>从一个文件中编译正则表达式</td>
<td><span style="color: #333399;">regcmp &lt;file&gt;</span></td>
</tr>
<tr>
<td style="text-align: right;">文件内容示例</td>
<td><span style="color: #333399;">varname “^[a-z].*[0-9.*$”</span></td>
</tr>
<tr bgcolor="#ccccff">
<td><span style="font-size: xx-small;">RESET</span></td>
<td>::</td>
</tr>
<tr>
<td>重置终端设备</td>
<td><span style="color: #333399;">reset</span></td>
</tr>
<tr bgcolor="#ccccff">
<td align="left"><span style="font-size: xx-small;">RPCINFO</span></td>
<td>::</td>
</tr>
<tr>
<td>取得某主机的TCP端口信息</td>
<td><span style="color: #333399;">rpcinfo -p &lt;host&gt;</span></td>
</tr>
<tr bgcolor="#ccccff">
<td><span style="font-size: xx-small;">RSH</span></td>
<td>::</td>
</tr>
<tr>
<td>执行一个远程服务器上的命令</td>
<td><span style="color: #333399;">rsh &lt;host&gt; &lt;comand&gt;</span></td>
</tr>
<tr bgcolor="#ccccff">
<td><span style="font-size: xx-small;">SCRIPT</span></td>
<td>::</td>
</tr>
<tr>
<td>用来捕捉当前的终端会话中的所有输入输出结果到一个指定的文件</td>
<td><span style="color: #333399;">script &lt;logfile&gt;</span></td>
</tr>
<tr bgcolor="#ccccff">
<td><span style="font-size: xx-small;">SED</span></td>
<td>::</td>
</tr>
<tr>
<td>把某文件中的fred替换成john</td>
<td><span style="color: #333399;">sed -e ‘s/fred/john/g’ &lt;file&gt;</span></td>
</tr>
<tr>
<td>替换文件中匹配正则表达式的字符串</td>
<td><span style="color: #333399;">sed -e ‘s/[0-9]+/number/g’ &lt;file&gt;</span></td>
</tr>
<tr>
<td>把HTML文件中的 “X” 变成红色</td>
<td><span style="color: #333399;">sed -e ‘s!X!&lt;font color=”#FF0000″&gt;X&lt;/font&gt;!g;</span></td>
</tr>
<tr>
<td>把所有后缀为.suf1 改名成.suf2</td>
<td><span style="color: #333399;">ls -1 | grep ‘\.suf1$’ | sed -e ‘s/\(.*\.\)suf1/mv &amp; \1suf2/’ | sh</span></td>
</tr>
<tr>
<td>把文件中包含c的行中的a 替换成b</td>
<td><span style="color: #333399;">sed -e ‘/C/s/A/B/’ &lt;infile&gt; &gt;&lt;outfile&gt;</span></td>
</tr>
<tr>
<td>删除所有包含 “you owe me”的文件行</td>
<td><span style="color: #333399;">sed -e ‘/you owe me/d’ &lt;infile&gt; &gt; &lt;outfile&gt;</span></td>
</tr>
<tr>
<td>使用commandfile中的命令来编译infile文件，并输出到outfile中。其中的commandfile中包含了一系列的vi命令</td>
<td><span style="color: #333399;">sed -f &lt;commandfile&gt; &lt;infile&gt; &gt; &lt;outfile&gt;</span></td>
</tr>
<tr bgcolor="#ccccff">
<td><span style="font-size: xx-small;">SH</span></td>
<td>::</td>
</tr>
<tr>
<td>最老的 AT&amp;T shell程序，也是使用最广泛的标准确shell。</td>
</tr>
<tr bgcolor="#ccccff">
<td><span style="font-size: xx-small;">SHUTDOWN</span></td>
<td>::</td>
</tr>
<tr>
<td>关机</td>
<td><span style="color: #333399;">shutdown -h now</span></td>
</tr>
<tr bgcolor="#ccccff">
<td><span style="font-size: xx-small;">SLEEP</span></td>
<td>::</td>
</tr>
<tr>
<td>sleep 10秒钟</td>
<td><span style="color: #333399;">sleep 10</span></td>
</tr>
<tr bgcolor="#ccccff">
<td><span style="font-size: xx-small;">SORT</span></td>
<td>::</td>
</tr>
<tr>
<td>以字符顺序把文件的每一行排序</td>
<td><span style="color: #333399;">sort &lt;file&gt;</span></td>
</tr>
<tr>
<td>以数字顺序把文件的每一行排序</td>
<td><span style="color: #333399;">sort -n &lt;file&gt;</span></td>
</tr>
<tr>
<td>反向排序</td>
<td><span style="color: #333399;">sort -r &lt;file&gt;</span></td>
</tr>
<tr>
<td>排序时对于重复项只保留一个</td>
<td><span style="color: #333399;">sort -u &lt;file&gt;</span></td>
</tr>
<tr>
<td> </td>
<td> </td>
</tr>
<tr bgcolor="#ccccff">
<td><span style="font-size: xx-small;">SPELL</span></td>
<td>::</td>
</tr>
<tr>
<td>检查拼写错误</td>
<td><span style="color: #333399;">spell &lt;file&gt;</span></td>
</tr>
<tr>
<td>检查拼写错误，但是忽略okfile中包含的单词</td>
<td><span style="color: #333399;">spell +&lt;okfile&gt; &lt;file&gt;</span></td>
</tr>
<tr bgcolor="#ccccff">
<td><span style="font-size: xx-small;">SPLIT</span></td>
<td>::</td>
</tr>
<tr>
<td>拆分一个大文件，每个文件1m</td>
<td><span style="color: #333399;">split -b1m &lt;file&gt;</span></td>
</tr>
<tr>
<td>把拆分后的文件合并起来</td>
<td><span style="color: #333399;">cat x* &gt; &lt;newfile&gt;</span></td>
</tr>
<tr bgcolor="#ccccff">
<td><span style="font-size: xx-small;">STRINGS</span></td>
<td>::</td>
</tr>
<tr>
<td>从二进制文件中读取ascii 字符串</td>
<td><span style="color: #333399;">strings &lt;file&gt;</span></td>
</tr>
<tr bgcolor="#ccccff">
<td><span style="font-size: xx-small;">STTY</span></td>
<td>::</td>
</tr>
<tr>
<td>显示终端设置</td>
<td><span style="color: #333399;">stty -a</span></td>
</tr>
<tr>
<td>设置 Ctrl+”H”为删除键</td>
<td><span style="color: #333399;">stty erase “^H”</span></td>
</tr>
<tr>
<td>对于用户的输入不回显</td>
<td><span style="color: #333399;">stty -echo</span></td>
</tr>
<tr>
<td>回显用户的输入</td>
<td><span style="color: #333399;">stty echo</span></td>
</tr>
<tr bgcolor="#ccccff">
<td><span style="font-size: xx-small;">SU</span></td>
<td>::</td>
</tr>
<tr>
<td>切换到root用户</td>
<td><span style="color: #333399;">su</span></td>
</tr>
<tr>
<td>切换到root用户并使用其环境</td>
<td><span style="color: #333399;">su –</span></td>
</tr>
<tr>
<td>切换到另一用户</td>
<td><span style="color: #333399;">su &lt;username&gt;</span></td>
</tr>
<tr bgcolor="#ccccff">
<td><span style="font-size: xx-small;">TAIL</span></td>
<td>::</td>
</tr>
<tr>
<td>显示某文件中的文件尾中包含pattern的文件行</td>
<td><span style="color: #333399;">tail -f &lt;file&gt; | grep &lt;pattern&gt;</span></td>
</tr>
<tr bgcolor="#ccccff">
<td><span style="font-size: xx-small;">TAR</span></td>
<td>::</td>
</tr>
<tr>
<td>把整个目录打包（没有压缩）</td>
<td><span style="color: #333399;">tar cvf &lt;outfile&gt;.tar &lt;dir&gt;</span></td>
</tr>
<tr>
<td>解包某个tar文件</td>
<td><span style="color: #333399;">tar xvf &lt;file&gt;.tar</span></td>
</tr>
<tr>
<td>先解压缩再解包</td>
<td><span style="color: #333399;">gzip -dc &lt;file&gt;.tar.gz | tar xvf –</span></td>
</tr>
<tr>
<td>打包成一个压缩包</td>
<td><span style="color: #333399;">tar xzvf &lt;file&gt;tar.gz</span></td>
</tr>
<tr>
<td>在.cshrc中设置 tar命令的tape 变量</td>
<td><span style="color: #333399;">tape=/dev/rmt/0mbn</span></td>
</tr>
<tr>
<td>把一个目录打包到tape变量所指的目录中</td>
<td><span style="color: #333399;">tar cv &lt;dir&gt;</span></td>
</tr>
<tr>
<td>从tape中解包</td>
<td><span style="color: #333399;">tar xv</span></td>
</tr>
<tr>
<td>从tape中解出一个文件</td>
<td><span style="color: #333399;">tar xv &lt;file&gt;</span></td>
</tr>
<tr>
<td>从 tape中得到一个内容表</td>
<td><span style="color: #333399;">tar t</span></td>
</tr>
<tr>
<td>以合适的权限和链接拷贝一个目录</td>
<td><span style="color: #333399;">(cd fromdir &amp;&amp; tar -cBf – . ) | ( cd todir &amp;&amp; tar -xBf – )</span></td>
</tr>
<tr bgcolor="#ccccff">
<td><span style="font-size: xx-small;">TCSH</span></td>
<td>::</td>
</tr>
<tr>
<td>Berkly的另一个非常不错的shell</td>
</tr>
<tr bgcolor="#ccccff">
<td><span style="font-size: xx-small;">TEE</span></td>
<td>::</td>
</tr>
<tr>
<td>把标准输入重定向到标准输出</td>
<td><span style="color: #333399;">who | tee -a &gt; &lt;file&gt;</span></td>
</tr>
<tr bgcolor="#ccccff">
<td><span style="font-size: xx-small;">TEST</span></td>
<td>::</td>
</tr>
<tr>
<td>检查是否是一个文件</td>
<td><span style="color: #333399;">test -a &lt;file&gt;</span></td>
</tr>
<tr>
<td>检查是否某文件是否是root属性</td>
<td><span style="color: #333399;">test -O /usr/bin/su</span></td>
</tr>
<tr>
<td>检查某变量是否为 null</td>
<td><span style="color: #333399;">test -n “$foo”</span></td>
</tr>
<tr>
<td>以数字的方式比较两个数字字符串</td>
<td><span style="color: #333399;">test $var1 -gt $var2</span></td>
</tr>
<tr>
<td>在ksh 脚本中间接地使用”test”</td>
<td><span style="color: #333399;">if [[ -a &lt;file&gt; ]];then …;fi</span></td>
</tr>
<tr bgcolor="#ccccff">
<td><span style="font-size: xx-small;">TIME</span></td>
<td>::</td>
</tr>
<tr>
<td>查看运行一个命令需要多少时间</td>
<td><span style="color: #333399;">time &lt;command&gt;</span></td>
</tr>
<tr bgcolor="#ccccff">
<td><span style="font-size: xx-small;">TOUCH</span></td>
<td>::</td>
</tr>
<tr>
<td>更新文件的修改时间为当前时间，文件不存在则创建文件</td>
<td><span style="color: #333399;">touch &lt;file&gt;</span></td>
</tr>
<tr bgcolor="#ccccff">
<td><span style="font-size: xx-small;">TR</span></td>
<td>::</td>
</tr>
<tr>
<td>使用x替换a，y替换b，c替换z</td>
<td><span style="color: #333399;">tr ‘[a-c]’ ‘[x-z]’ &lt; infile &gt; outfile</span></td>
</tr>
<tr bgcolor="#ccccff">
<td><span style="font-size: xx-small;">TRAP</span></td>
<td>::</td>
</tr>
<tr>
<td>捕捉”^C” 并执行子程序</td>
<td><span style="color: #333399;">trap “mysub;exit” 0 1 2 15</span></td>
</tr>
<tr bgcolor="#ccccff">
<td><span style="font-size: xx-small;">TRUE</span></td>
<td>::</td>
</tr>
<tr>
<td>让个不存在的命令返回0</td>
<td><span style="color: #333399;">ln -s /usr/bin/true ranlib</span></td>
</tr>
<tr bgcolor="#ccccff">
<td><span style="font-size: xx-small;">TRUSS</span></td>
<td>::</td>
</tr>
<tr>
<td>查看一个命令运行时的系统调用</td>
<td><span style="color: #333399;">truss &lt;command&gt; &gt; /dev/null</span></td>
</tr>
<tr bgcolor="#ccccff">
<td><span style="font-size: xx-small;">TYPSET</span></td>
<td>::</td>
</tr>
<tr>
<td>查看被激活的功能</td>
<td><span style="color: #333399;">typset</span></td>
</tr>
<tr bgcolor="#ccccff">
<td><span style="font-size: xx-small;">TTY</span></td>
<td>::</td>
</tr>
<tr>
<td>查看终端所在的设备文件</td>
<td><span style="color: #333399;">tty</span></td>
</tr>
<tr bgcolor="#ccccff">
<td><span style="font-size: xx-small;">ULIMIT</span></td>
<td>::</td>
</tr>
<tr>
<td>查看系统所支持的最大文件长度</td>
<td><span style="color: #333399;">ulimit</span></td>
</tr>
<tr bgcolor="#ccccff">
<td><span style="font-size: xx-small;">UMASK</span></td>
<td>::</td>
</tr>
<tr>
<td>查看目前的umask</td>
<td><span style="color: #333399;">umask</span></td>
</tr>
<tr>
<td>设置一个umask</td>
<td><span style="color: #333399;">umask 077</span></td>
</tr>
<tr bgcolor="#ccccff">
<td><span style="font-size: xx-small;">UNIQ</span></td>
<td>::</td>
</tr>
<tr>
<td>查看一个文件中有多少行是一样的</td>
<td><span style="color: #333399;">sort &lt;file&gt; | uniq -c</span></td>
</tr>
<tr>
<td>仅输出唯一的没有重复的行</td>
<td><span style="color: #333399;">sort &lt;file&gt; | uniq -u</span></td>
</tr>
<tr bgcolor="#ccccff">
<td><span style="font-size: xx-small;">UPTIME</span></td>
<td>::</td>
</tr>
<tr>
<td>查看你的电脑开机多少时间了</td>
<td><span style="color: #333399;">uptime</span></td>
</tr>
<tr bgcolor="#ccccff">
<td><span style="font-size: xx-small;">UUENCODE</span></td>
<td>::</td>
</tr>
<tr>
<td>Encode一个文件以便发送电子邮件</td>
<td><span style="color: #333399;">uuencode decodedname namenow &gt; codedname</span></td>
</tr>
<tr bgcolor="#ccccff">
<td><span style="font-size: xx-small;">UUDECODE</span></td>
<td>::</td>
</tr>
<tr>
<td>Decode 一个 uuencoded 文件</td>
<td><span style="color: #333399;">uudecode &lt;file&gt;</span></td>
</tr>
<tr bgcolor="#ccccff">
<td><span style="font-size: xx-small;">WAIT</span></td>
<td>::</td>
</tr>
<tr>
<td>等一个后进和运行结束</td>
<td><span style="color: #333399;">wait $jobid</span></td>
</tr>
<tr bgcolor="#ccccff">
<td><span style="font-size: xx-small;">VI</span></td>
<td>::</td>
</tr>
<tr>
<td>最主要的unix编译器</td>
<td><span style="color: #333399;">vi &lt;file&gt;</span></td>
</tr>
<tr bgcolor="#ccccff">
<td><span style="font-size: xx-small;">WC</span></td>
<td>::</td>
</tr>
<tr>
<td>计算一个文件的行号</td>
<td><span style="color: #333399;">wc -l &lt;file&gt;</span></td>
</tr>
<tr bgcolor="#ccccff">
<td><span style="font-size: xx-small;">XARGS</span></td>
<td>::</td>
</tr>
<tr>
<td>把标准输出作为参数来执行一条命令</td>
<td><span style="color: #333399;">&lt;command&gt; | xargs -i grep ‘pattern’ {}</span></td>
</tr>
<tr bgcolor="#ccccff">
<td><span style="font-size: xx-small;">XON</span></td>
<td>::</td>
</tr>
<tr>
<td>从另一台电脑上得到一个xterm</td>
<td><span style="color: #333399;">xon &lt;host&gt;</span></td>
</tr>
<tr>
<td>从另一台电脑上得到所有的东西</td>
<td><span style="color: #333399;">xon &lt;host&gt; &lt;X-client&gt;</span></td>
</tr>
</tbody>
</table>
<p>(全文完)</p>
<p align="center"><img alt="image placeholder" >
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/18360.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/17998.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/12103.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/11847.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/9104.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/9070.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
</ul>
</div></div>
<div id="post-ratings-1044" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="97266a582a">
<img alt="image placeholder" >
<meta itemprop="headline" content="高级Unix命令">
<meta itemprop="description" content="在Unix操作中有太多太多的命令，这些命令的强大之处就是一个命令只干一件事，并把这件事干好。Do one thing， do it well。这是unix的哲学。而且Unix首创的管道可以把这些命令任意地组合，以完成一个更为强大功能。这些哲学到今天都在深深地影响着整个计算机产业。比如今天最流行的“云计算”——把一个软件以碎片方式部署，然后这些功能可以任意组合。

这篇文章罗列了很多Unix下比...">
<meta itemprop="datePublished" content="2009-06-16T10:42:39+08:00">
<meta itemprop="dateModified" content="2009-06-17T21:10:19+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/1044.html">
<meta itemprop="author" content="陈皓">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/1044.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="3">
<meta itemprop="ratingCount" content="4">
</div>
</div>
<div id="post-ratings-1044-loading" class="post-ratings-loading">
<img alt="image placeholder" >
 ]]></content>
<pubDate>2009-06-16T10:42:39+08:00</pubDate>
<guid>https://coolshell.cn/articles/1044.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ 如何在Java中避免equals方法的隐藏陷阱 ]]></title>
<link>https://coolshell.cn/articles/1051.html</link>
<content><![CDATA[ 
<p><strong>译者注</strong> :你可能会觉得Java很简单，Object的equals实现也会非常简单，但是事实并不是你想象的这样，耐心的读完本文，你会发现你对Java了解的是如此的少。如果这篇文章是一份Java程序员的入职笔试，那么不知道有多少人会掉落到这样的陷阱中。原文转自<a href="http://www.artima.com/lejava/articles/equality.html">http://www.artima.com/lejava/articles/equality.html</a> 三位作者都是不同领域的大拿，有兴趣的读者可以从上面这个连接直接去阅读原文。</p>
<p><strong>摘要</strong><br>
本文描述重载equals方法的技术，这种技术即使是具现类的子类增加了字段也能保证equal语义的正确性。<br>
在《Effective Java》的第8项中，Josh Bloch描述了当继承类作为面向对象语言中的等价关系的基础问题，要保证派生类的equal正确性语义所会面对的困难。Bloch这样写到：</p>
<blockquote><p><strong>除非你忘记了面向对象抽象的好处，否则在当你继承一个新类或在类中增加了一个值组件时你无法同时保证equal的语义依然正确</strong></p></blockquote>
<p><span id="more-1051"></span></p>
<p>在《Programming in Scala》中的第28章演示了一种方法，这种方法允许即使继承了新类，增加了新的值组件，equal的语义仍然能得到保证。虽然在这本书中这项技术是在使用Scala类环境中，但是这项技术同样可以应用于Java定义的类中。在本文中的描述来自于Programming in Scala中的文字描述，但是代码被我从scala翻译成了Java</p>
<p>　</p>
<div id="ez-toc-container" class="ez-toc-v2_0_17 counter-hierarchy counter-decimal ez-toc-grey">
<div class="ez-toc-title-container">
<p class="ez-toc-title">目录</p>
<span class="ez-toc-title-toggle"></span>
</div>
<nav><ul class="ez-toc-list ez-toc-list-level-1">
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-1" href="#%E5%B8%B8%E8%A7%81%E7%9A%84%E7%AD%89%E4%BB%B7%E6%96%B9%E6%B3%95%E9%99%B7%E9%98%B1" title="常见的等价方法陷阱">常见的等价方法陷阱</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-2" href="#%E9%99%B7%E9%98%B11%EF%BC%9A%E5%AE%9A%E4%B9%89%E9%94%99%E8%AF%AFequals%E6%96%B9%E6%B3%95%E7%AD%BE%E5%90%8Dsignature" title="陷阱1：定义错误equals方法签名(signature)">陷阱1：定义错误equals方法签名(signature)</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-3" href="#%E9%99%B7%E9%98%B12%EF%BC%9A%E9%87%8D%E8%BD%BD%E4%BA%86equals%E7%9A%84%E4%BD%86%E6%B2%A1%E6%9C%89%E5%90%8C%E6%97%B6%E9%87%8D%E8%BD%BDhashCode%E7%9A%84%E6%96%B9%E6%B3%95" title="陷阱2：重载了equals的但没有同时重载hashCode的方法">陷阱2：重载了equals的但没有同时重载hashCode的方法</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-4" href="#%E9%99%B7%E9%98%B13%EF%BC%9A%E5%BB%BA%E7%AB%8B%E5%9C%A8%E4%BC%9A%E5%8F%98%E5%8C%96%E5%AD%97%E6%AE%B5%E4%B8%8A%E7%9A%84equals%E5%AE%9A%E4%B9%89" title="陷阱3：建立在会变化字段上的equals定义">陷阱3：建立在会变化字段上的equals定义</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-5" href="#%E9%99%B7%E9%98%B14%EF%BC%9A%E4%B8%8D%E6%BB%A1%E8%B6%B3%E7%AD%89%E4%BB%B7%E5%85%B3%E7%B3%BB%E7%9A%84equals%E9%94%99%E8%AF%AF%E5%AE%9A%E4%B9%89" title="陷阱4：不满足等价关系的equals错误定义">陷阱4：不满足等价关系的equals错误定义</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-6" href="#canEqual_%E6%96%B9%E6%B3%95" title="canEqual 方法">canEqual 方法</a></li>
</ul></nav>
</div>
<h4>
<span class="ez-toc-section" id="%E5%B8%B8%E8%A7%81%E7%9A%84%E7%AD%89%E4%BB%B7%E6%96%B9%E6%B3%95%E9%99%B7%E9%98%B1"></span>常见的等价方法陷阱<span class="ez-toc-section-end"></span>
</h4>
<p>java.lang.Object 类定义了equals这个方法，它的子类可以通过重载来覆盖它。不幸的是，在面向对象中写出正确的equals方法是非常困难的。事实上，在研究了大量的Java代码后，2007 paper的作者得出了如下的一个结论：</p>
<blockquote><p>几乎所有的equals方法的实现都是错误的！</p></blockquote>
<p>这个问题是因为等价是和很多其他的事物相关联。例如其中之一，一个的类型C的错误等价方法可能意味着你无法将这个类型C的对象可信赖的放入到容器中。比如说，你有两个元素elem1和elem2他们都是类型C的对象，并且他们是相等，即elem1.equals(elm2)返回ture。但是，只要这个equals方法是错误的实现，那么你就有可能会看见如下的一些行为：</p>
<pre class="brush: java">Set hashSet&lt;C&gt; = new java.util.HashSet&lt;C&gt;();
hashSet.add(elem1);
hashSet.contains(elem2);    // returns false!</pre>
<p>当equals重载时，这里有4个会引发equals行为不一致的常见陷阱：</p>
<ol>
<li>定义了错误的equals方法签名(signature) Defining equals with the wrong signature.</li>
<li>重载了equals的但没有同时重载hashCode的方法。 Changing equals without also changing hashCode.</li>
<li>建立在会变化字域上的equals定义。 Defining equals in terms of mutable fields.</li>
<li>不满足等价关系的equals错误定义 Failing to define equals as an equivalence relation.</li>
</ol>
<p>在剩下的章节中我们将依次讨论这4中陷阱。</p>
<p>　</p>
<h4>
<span class="ez-toc-section" id="%E9%99%B7%E9%98%B11%EF%BC%9A%E5%AE%9A%E4%B9%89%E9%94%99%E8%AF%AFequals%E6%96%B9%E6%B3%95%E7%AD%BE%E5%90%8Dsignature"></span>陷阱1：定义错误equals方法签名(signature)<span class="ez-toc-section-end"></span>
</h4>
<p>考虑为下面这个简单类Point增加一个等价性方法：</p>
<pre class="brush: java">public class Point {

    private final int x;
    private final int y;

    public Point(int x, int y) {
        this.x = x;
        this.y = y;
    }

    public int getX() {
        return x;
    }

    public int getY() {
        return y;
    }

    // ...
}</pre>
<p>看上去非常明显，但是按照这种方式来定义equals就是错误的。</p>
<pre class="brush: java">// An utterly wrong definition of equals
public boolean equals(Point other) {
  return (this.getX() == other.getX() &amp;&amp; this.getY() == other.getY());
}</pre>
<p>这个方法有什么问题呢？初看起来，它工作的非常完美：</p>
<pre class="brush: java">Point p1 = new Point(1, 2);
Point p2 = new Point(1, 2);

Point q = new Point(2, 3);

System.out.println(p1.equals(p2)); // prints true

System.out.println(p1.equals(q)); // prints false</pre>
<p>然而，当我们一旦把这个Point类的实例放入到一个容器中问题就出现了：</p>
<pre class="brush: java">import java.util.HashSet;

HashSet&lt;Point&gt; coll = new HashSet&lt;Point&gt;();
coll.add(p1);

System.out.println(coll.contains(p2)); // prints false</pre>
<p>为什么coll中没有包含p2呢？甚至是p1也被加到集合里面，p1和p2是是等价的对象吗？在下面的程序中，我们可以找到其中的一些原因，定义p2a是一个指向p2的对象，但是p2a的类型是Object而非Point类型：</p>
<pre class="brush: java">Object p2a = p2;</pre>
<p>现在我们重复第一个比较，但是不再使用p2而是p2a,我们将会得到如下的结果：</p>
<pre class="brush: java">System.out.println(p1.equals(p2a)); // prints false</pre>
<p>到底是那里出了了问题？事实上，之前所给出的equals版本并没有覆盖Object类的equals方法，因为他的类型不同。下面是Object的equals方法的定义</p>
<pre class="brush: java">public boolean equals(Object other)</pre>
<p>因为Point类中的equals方法使用的是以Point类而非Object类做为参数，因此它并没有覆盖Object中的equals方法。而是一种变化了的重载。在Java中重载被解析为静态的参数类型而非运行期的类型，因此当静态参数类型是Point,Point的equals方法就被调用。然而当静态参数类型是Object时，Object类的equals就被调用。因为这个方法并没有被覆盖，因此它仍然是实现成比较对象标示。这就是为什么虽然p1和p2a具有同样的x,y值，”p1.equals(p2a)”仍然返回了false。这也是会什么HasSet的contains方法返回false的原因，因为这个方法操作的是泛型，他调用的是一般化的Object上equals方法而非Point类上变化了的重载方法equals</p>
<p>一个更好但不完美的equals方法定义如下：</p>
<pre class="brush: java">// A better definition, but still not perfect
@Override public boolean equals(Object other) {
    boolean result = false;
    if (other instanceof Point) {
        Point that = (Point) other;
        result = (this.getX() == that.getX() &amp;&amp; this.getY() == that.getY());
    }
    return result;
}</pre>
<p>现在equals有了正确的类型，它使用了一个Object类型的参数和一个返回布尔型的结果。这个方法的实现使用instanceof操作和做了一个造型。它首先检查这个对象是否是一个Point类，如果是，他就比较两个点的坐标并返回结果，否则返回false。</p>
<p>　</p>
<h4>
<span class="ez-toc-section" id="%E9%99%B7%E9%98%B12%EF%BC%9A%E9%87%8D%E8%BD%BD%E4%BA%86equals%E7%9A%84%E4%BD%86%E6%B2%A1%E6%9C%89%E5%90%8C%E6%97%B6%E9%87%8D%E8%BD%BDhashCode%E7%9A%84%E6%96%B9%E6%B3%95"></span>陷阱2：重载了equals的但没有同时重载hashCode的方法<span class="ez-toc-section-end"></span>
</h4>
<p>如果你使用上一个定义的Point类进行p1和p2a的反复比较，你都会得到你预期的true的结果。但是如果你将这个类对象放入到HashSet.contains()方法中测试，你就有可能仍然得到false的结果：</p>
<pre class="brush: java">Point p1 = new Point(1, 2);
Point p2 = new Point(1, 2);

HashSet&lt;Point&gt; coll = new HashSet&lt;Point&gt;();
coll.add(p1);

System.out.println(coll.contains(p2)); // 打印 false (有可能)</pre>
<p>事实上，这个个结果不是100%的false，你也可能有返回ture的经历。如果你得到的结果是true的话，那么你试试其他的坐标值，最终你一定会得到一个在集合中不包含的结果。导致这个结果的原因是Point重载了equals却没有重载hashCode。<br>
注意上面例子的的容器是一个HashSet，这就意味着容器中的元素根据他们的哈希码被被放入到”哈希桶 hash buckets”中。contains方法首先根据哈希码在哈希桶中查找，然后让桶中的所有元素和所给的参数进行比较。现在，虽然最后一个Point类的版本重定义了equals方法，但是它并没有同时重定义hashCode。因此，hashCode仍然是Object类的那个版本，即：所分配对象的一个地址的变换。所以p1和p2的哈希码理所当然的不同了，甚至是即时这两个点的坐标完全相同。不同的哈希码导致他们具有极高的可能性被放入到集合中不同的哈希桶中。contains方法将会去找p2的哈希码对应哈希桶中的匹配元素。但是大多数情况下，p1一定是在另外一个桶中，因此，p2永远找不到p1进行匹配。当然p2和p2也可能偶尔会被放入到一个桶中，在这种情况下，contains的结果就为true了。</p>
<p>最新一个Point类实现的问题是，它的实现违背了作为Object类的定义的hashCode的语义。</p>
<blockquote><p><strong><br>
如果两个对象根据equals(Object)方法是相等的，那么在这两个对象上调用hashCode方法应该产生同样的值<br>
</strong></p></blockquote>
<p>事实上，在Java中，hashCode和equals需要一起被重定义是众所周知的。此外，hashCode只可以依赖于equals依赖的域来产生值。对于Point这个类来说，下面的的hashCode定义是一个非常合适的定义。</p>
<pre class="brush: java">public class Point {

    private final int x;
    private final int y;

    public Point(int x, int y) {
        this.x = x;
        this.y = y;
    }

    public int getX() {
        return x;
    }

    public int getY() {
        return y;
    }

    @Override public boolean equals(Object other) {
        boolean result = false;
        if (other instanceof Point) {
            Point that = (Point) other;
            result = (this.getX() == that.getX() &amp;&amp; this.getY() == that.getY());
        }
        return result;
    }
<span style="color: #339966;">
    @Override public int hashCode() {
        return (41 * (41 + getX()) + getY());
    }
</span>
}</pre>
<p>这只是hashCode一个可能的实现。x域加上常量41后的结果再乘与41并将结果在加上y域的值。这样做就可以以低成本的运行时间和低成本代码大小得到一个哈希码的合理的分布(<strong>译者注：</strong>性价比相对较高的做法)。<br>
增加hashCode方法重载修正了定义类似Point类等价性的问题。然而，关于类的等价性仍然有其他的问题点待发现。</p>
<p>　</p>
<h4>
<span class="ez-toc-section" id="%E9%99%B7%E9%98%B13%EF%BC%9A%E5%BB%BA%E7%AB%8B%E5%9C%A8%E4%BC%9A%E5%8F%98%E5%8C%96%E5%AD%97%E6%AE%B5%E4%B8%8A%E7%9A%84equals%E5%AE%9A%E4%B9%89"></span>陷阱3：建立在会变化字段上的equals定义<span class="ez-toc-section-end"></span>
</h4>
<p>让我们在Point类做一个非常微小的变化</p>
<pre class="brush: java">public class Point {
<span style="color: #339966;">
    private int x;
    private int y;
</span>
    public Point(int x, int y) {
        this.x = x;
        this.y = y;
    }

    public int getX() {
        return x;
    }

    public int getY() {
        return y;
    }
<span style="color: #339966;">
    public void setX(int x) { // Problematic
        this.x = x;
    }

    public void setY(int y) {
        this.y = y;
    }
</span>
    @Override public boolean equals(Object other) {
        boolean result = false;
        if (other instanceof Point) {
            Point that = (Point) other;
            result = (this.getX() == that.getX() &amp;&amp; this.getY() == that.getY());
        }
        return result;
    }

    @Override public int hashCode() {
        return (41 * (41 + getX()) + getY());
    }
}</pre>
<p>唯一的不同是x和y域不再是final，并且两个set方法被增加到类中来，并允许客户改变x和y的值。equals和hashCode这个方法的定义现在是基于在这两个会发生变化的域上，因此当他们的域的值改变时，结果也就跟着改变。因此一旦你将这个point对象放入到集合中你将会看到非常神奇的效果。</p>
<pre class="brush: java">Point p = new Point(1, 2);

HashSet&lt;Point&gt; coll = new HashSet&lt;Point&gt;();
coll.add(p);

System.out.println(coll.contains(p)); // 打印 true</pre>
<p>现在如果你改变p中的一个域，这个集合中还会包含point吗，我们将拭目以待。</p>
<pre class="brush: java">p.setX(p.getX() + 1);

System.out.println(coll.contains(p)); // (有可能)打印 false</pre>
<p>看起来非常的奇怪。p去那里去了？如果你通过集合的迭代器来检查p是否包含，你将会得到更奇怪的结果。</p>
<pre class="brush: java">Iterator&lt;Point&gt; it = coll.iterator();
boolean containedP = false;
while (it.hasNext()) {
    Point nextP = it.next();
    if (nextP.equals(p)) {
        containedP = true;
        break;
    }
}

System.out.println(containedP); // 打印 true</pre>
<p>结果是，集合中不包含p，但是p在集合的元素中！到底发生了什么！当然，所有的这一切都是在x域的修改后才发生的，p最终的的hashCode是在集合coll错误的哈希桶中。即，原始哈希桶不再有其新值对应的哈希码。换句话说，p已经在集合coll的是视野范围之外，虽然他仍然属于coll的元素。</p>
<p>从这个例子所得到的教训是，当equals和hashCode依赖于会变化的状态时，那么就会给用户带来问题。如果这样的对象被放入到集合中，用户必须小心，不要修改这些这些对象所依赖的状态，这是一个小陷阱。如果你需要根据对象当前的状态进行比较的话，你应该不要再重定义equals，应该起其他的方法名字而不是equals。对于我们的Point类的最后的定义，我们最好省略掉hashCode的重载，并将比较的方法名命名为equalsContents，或其他不同于equals的名字。那么Point将会继承原来默认的equals和hashCode的实现，因此当我们修改了x域后p依然会呆在其原来在容器中应该在位置。</p>
<p>　</p>
<h4>
<span class="ez-toc-section" id="%E9%99%B7%E9%98%B14%EF%BC%9A%E4%B8%8D%E6%BB%A1%E8%B6%B3%E7%AD%89%E4%BB%B7%E5%85%B3%E7%B3%BB%E7%9A%84equals%E9%94%99%E8%AF%AF%E5%AE%9A%E4%B9%89"></span>陷阱4：不满足等价关系的equals错误定义<span class="ez-toc-section-end"></span>
</h4>
<p>Object中的equals的规范阐述了equals方法必须实现在非null对象上的等价关系：</p>
<ul>
<li>自反原则：对于任何非null值X,表达式x.equals(x)总返回true。</li>
<li>等价性：对于任何非空值x和y，那么当且仅当y.equals(x)返回真时，x.equals(y)返回真。</li>
<li>传递性：对于任何非空值x,y,和z，如果x.equals(y)返回真，且y.equals(z)也返回真，那么x.equals(z)也应该返回真。</li>
<li>一致性：对于非空x,y，多次调用x.equals(y)应该一致的返回真或假。提供给equals方法比较使用的信息不应该包含改过的信息。</li>
<li>对于任何非空值x,x.equals(null)应该总返回false.</li>
</ul>
<p>Point类的equals定义已经被开发成了足够满足equals规范的定义。然而，当考虑到继承的时候，事情就开始变得非常复杂起来。比如说有一个Point的子类ColoredPoint，它比Point多增加了一个类型是Color的color域。假设Color被定义为一个枚举类型：</p>
<pre class="brush: java">public enum Color {
    RED, ORANGE, YELLOW, GREEN, BLUE, INDIGO, VIOLET;
}</pre>
<p>ColoredPoint重载了equals方法，并考虑到新加入color域，代码如下：</p>
<pre class="brush: java">public class ColoredPoint extends Point { // Problem: equals not symmetric

    private final Color color;

    public ColoredPoint(int x, int y, Color color) {
        super(x, y);
        this.color = color;
    }

    @Override public boolean equals(Object other) {
        boolean result = false;
        if (other instanceof ColoredPoint) {
            ColoredPoint that = (ColoredPoint) other;
            result = (this.color.equals(that.color) &amp;&amp; super.equals(that));
        }
        return result;
    }
}</pre>
<p>这是很多程序员都有可能写成的代码。注意在本例中，类ColoredPointed不需要重载hashCode，因为新的ColoredPoint类上的equals定义，严格的重载了Point上equals的定义。hashCode的规范仍然是有效，如果两个着色点(colored point)相等，其坐标必定相等，因此它的hashCode也保证了具有同样的值。</p>
<p>对于ColoredPoint类自身对象的比较是没有问题的，但是如果使用ColoredPoint和Point混合进行比较就要出现问题。</p>
<pre class="brush: java">Point p = new Point(1, 2);

ColoredPoint cp = new ColoredPoint(1, 2, Color.RED);

System.out.println(p.equals(cp)); // 打印真 true

System.out.println(cp.equals(p)); // 打印假 false</pre>
<p>“p等价于cp”的比较这个调用的是定义在Point类上的equals方法。这个方法只考虑两个点的坐标。因此比较返回真。在另外一方面，“cp等价于p”的比较这个调用的是定义在ColoredPoint类上的equals方法，返回的结果却是false，这是因为p不是ColoredPoint，所以equals这个定义违背了对称性。</p>
<p>违背对称性对于集合来说将导致不可以预期的后果，例如：</p>
<pre class="brush: java">Set&lt;Point&gt; hashSet1 = new java.util.HashSet&lt;Point&gt;();
hashSet1.add(p);
System.out.println(hashSet1.contains(cp));    // 打印 false

Set&lt;Point&gt; hashSet2 = new java.util.HashSet&lt;Point&gt;();
hashSet2.add(cp);
System.out.println(hashSet2.contains(p));    // 打印 true</pre>
<p>因此虽然p和cp是等价的，但是contains测试中一个返回成功，另外一个却返回失败。<br>
你如何修改equals的定义，才能使得这个方法满足对称性？本质上说有两种方法，你可以使得这种关系变得更一般化或更严格。更一般化的意思是这一对对象，a和b，被用于进行对比，无论是a比b还是b比a 都返回true，下面是代码：</p>
<pre class="brush: java">public class ColoredPoint extends Point { // Problem: equals not transitive

    private final Color color;

    public ColoredPoint(int x, int y, Color color) {
        super(x, y);
        this.color = color;
    }

    @Override public boolean equals(Object other) {
        boolean result = false;
        if (other instanceof ColoredPoint) {
            ColoredPoint that = (ColoredPoint) other;
            result = (this.color.equals(that.color) &amp;&amp; super.equals(that));
        }
        else if (other instanceof Point) {
            Point that = (Point) other;
            result = that.equals(this);
        }
        return result;
    }
}</pre>
<p>在ColoredPoint中的equals的新定义比老定义中检查了更多的情况:如果对象是一个Point对象而不是ColoredPoint，方法就转变为Point类的equals方法调用。这个所希望达到的效果就是equals的对称性，不管”cp.equals(p)”还是”p.equals(cp)”的结果都是true。然而这种方法，equals的规范还是被破坏了，现在的问题是这个新等价性不满足传递性。考虑下面的一段代码实例，定义了一个点和这个点上上两种不同颜色点：</p>
<pre class="brush: java">ColoredPoint redP = new ColoredPoint(1, 2, Color.RED);
ColoredPoint blueP = new ColoredPoint(1, 2, Color.BLUE);</pre>
<p>redP等价于p，p等价于blueP</p>
<pre class="brush: java">System.out.println(redP.equals(p)); // prints true

System.out.println(p.equals(blueP)); // prints true</pre>
<p>然而，对比redP和blueP的结果是false:</p>
<pre class="brush: java">System.out.println(redP.equals(blueP)); // 打印 false</pre>
<p>因此，equals的传递性就被违背了。<br>
使equals的关系更一般化似乎会将我们带入到死胡同。我们应该采用更严格化的方法。一种更严格化的equals方法是认为不同类的对象是不同的。这个可以通过修改Point类和ColoredPoint类的equals方法来达到。你能增加额外的比较来检查是否运行态的这个Point类和那个Point类是同一个类，就像如下所示的代码一样：</p>
<pre class="brush: java">// A technically valid, but unsatisfying, equals method
public class Point {

    private final int x;
    private final int y;

    public Point(int x, int y) {
        this.x = x;
        this.y = y;
    }

    public int getX() {
        return x;
    }

    public int getY() {
        return y;
    }

    @Override public boolean equals(Object other) {
        boolean result = false;
        if (other instanceof Point) {
            Point that = (Point) other;
            result = (this.getX() == that.getX() &amp;&amp; this.getY() == that.getY()
                    <span style="color: #339966;">&amp;&amp; this.getClass().equals(that.getClass())</span>);
        }
        return result;
    }

    @Override public int hashCode() {
        return (41 * (41 + getX()) + getY());
    }
}</pre>
<p>你现在可以将ColoredPoint类的equals实现用回刚才那个不满足对称性要的equals实现了。</p>
<pre class="brush: java">public class ColoredPoint extends Point { // 不再违反对称性需求

    private final Color color;

    public ColoredPoint(int x, int y, Color color) {
        super(x, y);
        this.color = color;
    }

    @Override public boolean equals(Object other) {
        boolean result = false;
        if (other instanceof ColoredPoint) {
            ColoredPoint that = (ColoredPoint) other;
            result = (this.color.equals(that.color) &amp;&amp; super.equals(that));
        }
        return result;
    }
}</pre>
<p>这里，Point类的实例只有当和另外一个对象是同样类，并且有同样的坐标时候，他们才被认为是相等的，即意味着 .getClass()返回的是同样的值。这个新定义的等价关系满足了对称性和传递性因为对于比较对象是不同的类时结果总是false。所以着色点(colored point)永远不会等于点(point)。通常这看起来非常合理，但是这里也存在着另外一种争论——这样的比较过于严格了。</p>
<p>考虑我们如下这种稍微的迂回的方式来定义我们的坐标点(1,2)</p>
<pre class="brush: java">Point pAnon = new Point(1, 1) {
    @Override public int getY() {
        return 2;
    }
};</pre>
<p>pAnon等于p吗？答案是假，因为p和pAnon的java.lang.Class对象不同。p是Point，而pAnon是Point的一个匿名派生类。但是，非常清晰的是pAnon的确是在坐标1，2上的另外一个点。所以将他们认为是不同的点是没有理由的。</p>
<p>　</p>
<h4>
<span class="ez-toc-section" id="canEqual_%E6%96%B9%E6%B3%95"></span>canEqual 方法<span class="ez-toc-section-end"></span>
</h4>
<p>到此，我们看其来似乎是遇到阻碍了，存在着一种正常的方式不仅可以在不同类继承层次上定义等价性，并且保证其等价的规范性吗？事实上，的确存在这样的一种方法，但是这就要求除了重定义equals和hashCode外还要另外的定义一个方法。基本思路就是在重载equals(和hashCode)的同时，它应该也要要明确的声明这个类的对象永远不等价于其他的实现了不同等价方法的超类的对象。为了达到这个目标，我们对每一个重载了equals的类新增一个方法canEqual方法。这个方法的方法签名是：</p>
<pre class="brush: java">public boolean canEqual(Object other)</pre>
<p>如果other 对象是canEquals(重)定义那个类的实例时，那么这个方法应该返回真，否则返回false。这个方法由equals方法调用，并保证了两个对象是可以相互比较的。下面Point类的新的也是最终的实现：</p>
<pre class="brush: java">public class Point {

    private final int x;
    private final int y;

    public Point(int x, int y) {
        this.x = x;
        this.y = y;
    }

    public int getX() {
        return x;
    }

    public int getY() {
        return y;
    }

    @Override public boolean equals(Object other) {
        boolean result = false;
        if (other instanceof Point) {
            Point that = (Point) other;
            result =<span style="color: #339966;">(that.canEqual(this) &amp;&amp; </span>this.getX() == that.getX() &amp;&amp; this.getY() == that.getY());
        }
        return result;
    }

    @Override public int hashCode() {
        return (41 * (41 + getX()) + getY());
    }
<span style="color: #339966;">
    public boolean canEqual(Object other) {
        return (other instanceof Point);
    }
</span>
}</pre>
<p>这个版本的Point类的equals方法中包含了一个额外的需求，通过canEquals方法来决定另外一个对象是否是是满足可以比较的对象。在Point中的canEqual宣称了所有的Point类实例都能被比较。</p>
<p>下面是ColoredPoint相应的实现</p>
<pre class="brush: java">public class ColoredPoint extends Point { // 不再违背对称性

    private final Color color;

    public ColoredPoint(int x, int y, Color color) {
        super(x, y);
        this.color = color;
    }

    @Override public boolean equals(Object other) {
        boolean result = false;
        if (other instanceof ColoredPoint) {
            ColoredPoint that = (ColoredPoint) other;
            result = <span style="color: #339966;">(that.canEqual(this) &amp;&amp; </span>this.color.equals(that.color) &amp;&amp; super.equals(that));
        }
        return result;
    }

    @Override public int hashCode() {
        return (41 * super.hashCode() + color.hashCode());
    }
<span style="color: #339966;">
    @Override public boolean canEqual(Object other) {
        return (other instanceof ColoredPoint);
    }
</span>}</pre>
<p>在上显示的新版本的Point类和ColoredPoint类定义保证了等价的规范。等价是对称和可传递的。比较一个Point和ColoredPoint类总是返回false。因为点p和着色点cp,“p.equals(cp)返回的是假。并且，因为cp.canEqual(p)总返回false。相反的比较，cp.equals(p)同样也返回false，由于p不是一个ColoredPoint，所以在ColoredPoint的equals方法体内的第一个instanceof检查就失败了。</p>
<p>另外一个方面，不同的Point子类的实例却是可以比较的，同样没有重定义等价性方法的类也是可以比较的。对于这个新类的定义，p和pAnon的比较将总返回true。下面是一些例子：</p>
<pre class="brush: java">Point p = new Point(1, 2);

ColoredPoint cp = new ColoredPoint(1, 2, Color.INDIGO);

Point pAnon = new Point(1, 1) {
    @Override public int getY() {
        return 2;
    }
};

Set&lt;Point&gt; coll = new java.util.HashSet&lt;Point&gt;();
coll.add(p);

System.out.println(coll.contains(p)); // 打印 true

System.out.println(coll.contains(cp)); // 打印 false

System.out.println(coll.contains(pAnon)); // 打印 true</pre>
<p>这些例子显示了如果父类在equals的实现定义并调用了canEquals，那么开发人员实现的子类就能决定这个子类是否可以和它父类的实例进行比较。例如ColoredPoint，因为它以”一个着色点永远不可以等于普通不带颜色的点重载了” canEqual，所以他们就不能比较。但是因为pAnon引用的匿名子类没有重载canEqual,因此它的实例就可以和Point的实例进行对比。</p>
<p>canEqual方法的一个潜在的争论是它是否违背了Liskov替换准则(LSP)。例如，通过比较运行态的类来实现的比较技术(<strong>译者注：</strong> canEqual的前一版本，使用.getClass()的那个版本)，将导致不能定义出一个子类，这个子类的实例可以和其父类进行比较，因此就违背了LSP。这是因为，LSP原则是这样的，在任何你能使用父类的地方你都可以使用子类去替换它。在之前例子中，虽然cp的x,y坐标匹配那些在集合中的点，然而”coll.contains(cp)”仍然返回false，这看起来似乎违背得了LSP准则，因为你不能这里能使用Point的地方使用一个ColoredPointed。但是我们认为这种解释是错误的，因为LSP原则并没有要求子类和父类的行为一致，而仅要求其行为能一种方式满足父类的规范。</p>
<p>通过比较运行态的类来编写equals方法(<strong>译者注：</strong> canEqual的前一版本，使用.getClass()的那个版本)的问题并不是违背LSP准则的问题，但是它也没有为你指明一种创建派生类的实例能和父类实例进行对比的的方法。例如，我们使用这种运行态比较的技术在之前的”coll.contains(pAnon)”将会返回false，并且这并不是我们希望的。相反我们希望“coll.contains(cp)”返回false，因为通过在ColoredPoint中重载的equals，我基本上可以说，一个在坐标1，2上着色点和一个坐标1，2上的普通点并不是一回事。然而，在最后的例子中，我们能传递Point两种不同的子类实例到集合中contains方法，并且我们能得到两个不同的答案，并且这两个答案都正确。</p>
<p><strong>–全文完–</strong></p>
<p align="center"><img alt="image placeholder" >
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/20845.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/18360.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/11541.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/11454.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/11175.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/9703.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
</ul>
</div></div>
<div id="post-ratings-1051" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="2950860970">
<img alt="image placeholder" >
<meta itemprop="headline" content="如何在Java中避免equals方法的隐藏陷阱">
<meta itemprop="description" content="译者注 :你可能会觉得Java很简单，Object的equals实现也会非常简单，但是事实并不是你想象的这样，耐心的读完本文，你会发现你对Java了解的是如此的少。如果这篇文章是一份Java程序员的入职笔试，那么不知道有多少人会掉落到这样的陷阱中。原文转自http://www.artima.com/lejava/articles/equality.html 三位作者都是不同领域的大拿，有兴趣的读者...">
<meta itemprop="datePublished" content="2009-06-18T11:14:41+08:00">
<meta itemprop="dateModified" content="2009-06-18T12:03:18+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/1051.html">
<meta itemprop="author" content="Neo">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/1051.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="4.09">
<meta itemprop="ratingCount" content="11">
</div>
</div>
<div id="post-ratings-1051-loading" class="post-ratings-loading">
<img alt="image placeholder" >
 ]]></content>
<pubDate>2009-06-18T11:14:41+08:00</pubDate>
<guid>https://coolshell.cn/articles/1051.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ Linux/Unix 新手和专家教程 ]]></title>
<link>https://coolshell.cn/articles/1042.html</link>
<content><![CDATA[ 
<p><em><img alt="image placeholder" >
<p>需要大家注意的是，他们都是英文的，也许有一些也经被翻译到了中文社区，你可以搜索一下。但不管怎么样，我的建议是应该尽可能的去阅读英文。</p>
<p> <span id="more-1042"></span></p>
<h2 id="section--LinuxAndUNIXTrainingForBeginners">Linux 和UNIX 的新手培训教程</h2>
<p> </p>
<h3 id="section--FreeLinuxTutorialsForBeginners">免费的新手Linux教程</h3>
<p> </p>
<ul>
<li>
<a href="https://www.ibm.com/developerworks/linux/newto/">Introduction to Linux</a> – 这是来自IBM的教程，用于给那些想学习Linux的人。</li>
<li>
<a href="http://linux.about.com/c/ec/1.htm">Linux Desktop 101</a> – 这是一个 14周 课时的教程，主要用于学校里教学生如何在一个PC上运行一个Linux操作系统。</li>
<li>
<a href="http://tldp.org/LDP/intro-linux/html/index.html">Hands-On Introduction to Linux</a> – Machtelt Garrels 的一个格式相当不错的教程。</li>
<li>
<a href="http://www.isd.mel.nist.gov/projects/rtlinux/rtutorial-2.0/doc/tutorial.htm">Real Time Linux Introduction</a> – 一系列的介绍Linux的教程，来自National Institute of Standards and Technology.</li>
<li>
<a href="http://www.linux.org/lessons/beginner/index.html">Getting Started with Linux</a> – 来自Linux Online 的20课时的用于新手的教程。</li>
<li>
<a href="http://learnlinux.tsf.org.za/courses/web-fundamentals.html">Linux Fundamentals Course</a> – 一个相当不错的基础教程，大约使用18个小时，让你知道Linux操作系统的最基础的知识。</li>
<li>
<a href="http://www.beginlinux.org/course/view.php?id=15">The 35-Command Tutorial</a> – 来自BeginLinux.org 的一个最简单的教程，教你使用 35 个Linux用户必需了解的命令。</li>
<li>
<a href="http://ocw.novell.com/novell-linux-desktop/getting-started-with-novell-linux-desktop">Getting Started with Linux Desktop</a> – Novell的自学教程。</li>
</ul>
<p> </p>
<h3 id="section--FreeUNIXTutorialsForBeginners">免费的UNIX 新手教程</h3>
<p> </p>
<ul>
<li>
<a href="http://www.ee.surrey.ac.uk/Teaching/Unix/">UNIX Tutorial for Beginners</a> – 来自The University of Surrey的新手指南，告诉你Unix系统最基本的特性。</li>
<li>
<a href="http://snap.nlc.dcccd.edu/learn/idaho/unixindex.html">A Basic UNIX Tutorial</a> – 这是来自 Idaho State University 教程，主要用于Unix计算的基础，其中有一些很不错的示例和练习。</li>
<li>
<a href="http://www.devdaily.com/unix/unix-dnld.shtml">UNIX Training Manual</a> – 这是一个 88页 的培训手册，主要用一些示例来教一个Unix文件系统的相关的命令。严格说来，这并不是一个教程，但也很有用。</li>
<li>
<a href="http://www.mcsr.olemiss.edu/unixhelp/commanz/index.html">UNIX Command Tutorial</a> – 来自University of Mississippi 的教学生如果使用Unix命令和操作系统交互的课程。</li>
<li>
<a href="http://www.softlookup.com/tutorial/Unix/index.asp">Learn UNIX Tutorial</a> – Soft Lookup 的一个全面的 UNIX 教程，完全可以让你从一个新手变成一个高手。</li>
<li>
<a href="http://heather.cs.ucdavis.edu/~matloff/UnixAndC/Unix/UnixBareMn.pdf">UNIX – The Bare Minimum</a> – 来自 UC Davis 教授，提供了一个简单的UNIX介绍。</li>
<li>
<a href="http://www.upscale.utoronto.ca/GeneralInterest/Harrison/LearnLinux/">Learning About UNIX</a> – 来自University of Toronto，提供了一些UNIX 和Linux 课程笔记。这个课程关注于UNIX 和Linux 工具。</li>
<li>
<a href="http://www.unix-manuals.com/tutorials/unix/unix.html">What is UNIX?</a> – 这个教程提供了一个简单的Unix介绍，以及一个初学者的论坛。</li>
</ul>
<p> </p>
<h2 id="section--LinuxAndUNIXTrainingForExperts">Linux 和 UNIX 专家培训教程</h2>
<p> </p>
<h3 id="section--FreeLinuxTutorialsForExperts">免费的Linux高手教程</h3>
<p> </p>
<ul>
<li>
<a href="http://www.linux.org/lessons/advanced/index.html">Linux Online’s Course for Advanced Users</a> – 这是一个来自Linux Online的高级教程，提供了一系Linux最流行的How-To文档。主要是给那些想了解更多关于Linux安装，配置和维护的人。</li>
<li>
<a href="http://www.linuxtraining.co.uk/download/new_linux_course_modules.pdf">Linux System Administration Course</a> – 通过28个课程为Linux系统管理员提供了一个全面的教程。</li>
<li>
<a href="https://www.howtoforge.com/howtos/linux/kernel">Kernel Tutorials</a> – 这是在HowToForge上的一个内核级的教程，这个教程相当不错，如果你要了解Linux的内核，你不能错过这个教程。</li>
<li>
<a href="http://lartc.org/lartc.html">Advanced Routing and Traffic Control Tutorial</a> – 一个关于Linux网络路由，过滤和传输的教程。</li>
<li>
<a href="http://ocw.novell.com/suse-linux-enterprise">Linux Enterprise Server Courses</a> – Novell Training Services 提供给高级用户的培训教程。</li>
<li>
<a href="http://learnlinux.tsf.org.za/courses/web-net-admin.html">Linux Network Administration Course</a> – 来自Shuttleworth Foundation的 Linux 网络管理员的基础课程。</li>
<li>
<a href="http://www.advancedlinuxprogramming.com/">Advanced Linux Programming</a> – 这是一本电子书可以免费下载。这本书主要教程序员们怎么在Linux下做软件和编程序。</li>
<li>
<a href="https://www.ibm.com/developerworks/views/linux/libraryview.jsp?type_by=Tutorials">IBM’s Technical Library</a> – IBM’s Technical Library 提供的一组给高级Linux用户的教程。</li>
</ul>
<p> </p>
<h3 id="section--FreeUNIXTutorialsForExperts">免费的UNIX高手教程</h3>
<p> </p>
<ul>
<li>
<a href="http://www.ussg.iu.edu/UAU/uau.html">UNIX for Advanced Users</a> – Indiana University的 UNIX Workstation Support Group 提供的一个相当不错的面对UNIX 高级用户的教程。</li>
<li>
<a href="http://people.ischool.berkeley.edu/~kevin/unix-tutorial/">Kevin Heard’s UNIX Tutorial</a> – Kevin Heard (UC Berkeley) 的一个相当相当不错的三部教程，从Unix的基础开始，以高级话题结束。</li>
<li>
<a href="http://members.unine.ch/philippe.renard/unix2.html">Advanced UNIX Commands</a> – 虽然这是一个命令例表，但他是一个相当不错的索引的速查手册。</li>
<li>
<a href="http://users.actcom.co.il/~choo/lupg/tutorials/parallel-programming-theory/parallel-programming-theory.html">Parallel Programming Tutorial</a> – 这个UNIX 教程面对的是Unix下的并行编程 Parallel Programming。</li>
<li>
<a href="http://tldp.org/LDP/abs/html/">Advanced Bash Scripting Guide</a> – 来自于Linux Document Project 的教程，一个shell编程由浅入深的教程。</li>
<li>
<a href="http://www.vtc.com/products/Unix-Shell-Scripting-Advanced-tutorials.htm">UNIX Shell Scripting Advanced</a> – VTC 有一组视频的 UNIX 的教程。而这一个是指导高级用户如何进行脚本编程。</li>
<li>
<a href="http://heather.cs.ucdavis.edu/~matloff/UnixAndC/Unix/CShellII.pdf">Advanced C Shell Programming</a> – 这是UC Davis 的教程，主要教使用如何使用C shell 和tcsh 进行脚本编程。</li>
</ul>
<p>文章：<a href="http://educhoices.org/articles/Useful_Tutorials_on_Linux_and_UNIX_for_Beginners_and_Experts_Alike.html" target="_blank">来源</a></p>
<p align="center"><img alt="image placeholder" >
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/18360.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/17998.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/12103.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/11847.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/9104.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/9070.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
</ul>
</div></div>
<div id="post-ratings-1042" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="e3528e90cc">
<img alt="image placeholder" >
<meta itemprop="headline" content="Linux/Unix 新手和专家教程">
<meta itemprop="description" content="你正在找一些高质量的Linux 和 UNIX 的教程吗？如果是，这篇文章会告诉你到哪去找到这些教程。这里我们将给出超过30个相当的不错的 Linux 和 UNIX 在线的教程。

需要大家注意的是，他们都是英文的，也许有一些也经被翻译到了中文社区，你可以搜索一下。但不管怎么样，我的建议是应该尽可能的去阅读英文。

 
Linux 和UNIX 的新手培训教程
 
免费的新手Linux教...">
<meta itemprop="datePublished" content="2009-06-21T10:37:53+08:00">
<meta itemprop="dateModified" content="2009-06-21T11:02:50+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/1042.html">
<meta itemprop="author" content="陈皓">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/1042.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="4.5">
<meta itemprop="ratingCount" content="18">
</div>
</div>
<div id="post-ratings-1042-loading" class="post-ratings-loading">
<img alt="image placeholder" >
 ]]></content>
<pubDate>2009-06-21T10:37:53+08:00</pubDate>
<guid>https://coolshell.cn/articles/1042.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ 十个让你变成糟糕的程序员的行为 ]]></title>
<link>https://coolshell.cn/articles/1081.html</link>
<content><![CDATA[ 
<p>之前本站发表过《<a href="https://coolshell.cn/articles/222.html" target="_blank">优秀程序员的十个习惯</a>》以及《<a rel="bookmark" href="https://coolshell.cn/articles/428.html">程序员需要具备的基本技能</a>》，那是我们需要去学习和培养的。这里，我们主要讨论十个糟糕程序员的特征，主要是需要让我们去避免和小心的。</p>
<p><strong>1) 情绪化的思维</strong></p>
<p>如果你开始使用不同颜色的眼光来看待这个世界的话，那么你可能会成为一个很糟糕的程序员。情绪化的思维或态度很有可能会把自己变成一个怪物。相信你经常可以看到很多很糟糕的程序会使用下面的这些语句：</p>
<ul>
<li>我的程序不可能有这种问题。</li>
<li>Java就是shit。</li>
<li>我最恨的就是使用UML做设计。</li>
<li>需求怎么老在变，没办干了。</li>
<li>受不了这些人，他们到底懂不懂啊。</li>
<li>…… ……</li>
</ul>
<p>这些带着情绪化的思维和态度，不但可以让你成为一个很糟糕的程序员，甚至可以影响你的前途。因为，情绪化通常都是魔鬼，会让你做出错误的判断和决定，错误码率的判断和决定直接决定了你的人生。</p>
<p><span id="more-1081"></span></p>
<p><strong>2) 怀疑别人</strong></p>
<p>糟糕的程序总是说：“我的代码一定是正确的，我怀疑编译器有问题”，“我这应该没有问题吧，STL库怎么这么难用啊”。我曾经见过有程序员这样使用STL类：map&lt;char*, char*&gt;，当他发现这样放入字符串后却取不出来，觉得那是STL库的BUG，然后自己写了一个map！我的天啊！</p>
<p>某些时候，过早的下结论是一个很不好的习惯，任何事情都有其原因，只有知道了原因，你才能知道是谁的问题。一般来说，总是自己出的问题。</p>
<p><strong>3) 过多关注实现，陷入问题细节</strong></p>
<p>有些时候，当我们面对一个问题或是一个需求的时候，糟糕的程序员总是会马上去找一个解决方案或是实现，这是一个很不好的习惯。设计模式告诉我们，“喜欢接口，而不是实现”就是告诉我们，认清问题的本质和特性要比如何实现更重要。</p>
<ul>
<li>对于一个客户的问题来说，首先应该想到的是如何先让用户正常工作，如何恢复正在“流血”的系统，而不是把用户放在一边而去分析问题的原因和解决方案。</li>
<li>对于解决一个bug来说，重现bug，了解原来程序的意图是首先重要的事，而不是马上去修改代码，否则必然会引入更多的BUG。</li>
<li>对于一个需求来说，我们需要了解的需求后面的商业背景，use case和真实意图，而不是去讨论如何实现。只有了解了用户的真实意图，实际使用的方式和案例，你才能真正如果去做设计。</li>
</ul>
<p>糟糕的程序总是容易陷入细节，争论于如何实现和实现难题，以及问题的根本原因，而忽略了比这些更重要的东西。只有看懂了整个地图，我们才知道要怎么去走。</p>
<p><strong>4) 使用并不熟悉的代码</strong></p>
<p>糟糕的程序员最好的朋友是 Ctrl-C 和 Ctrl-V ，有些时候，他们并不知道代码的确切含义，就开始使用它，有证据表明，由拷贝粘贴引发的bug占了绝大多数。因为，代码总是只能在特定的环境下才能正常地工作，如果代码的上下文改变了，很有可能使得代码产生很多你不知道的行为，当你连代码都控制不住了，你还能编出什么好的程序呢？</p>
<p><strong>5) 拼命工作而不是聪明的工作</strong></p>
<p>对于糟糕的程序员，我们总是能看到他们拼命地修正他们的bug，总是花非常多时间并重复地完成某一工作。而好的程序可能会花双倍的时间来准备一个有效的开发环境，工具，以及在开发的时候花双倍甚至10倍的时间来避免一些错误。好的程序员总是会利用一切工具或手段来让自己的工作变得更有效率，总是为在开发的时候尽可能得不出错。后期出错的成本将会是巨大的，而且那时改正错误的压力也是巨大的。所以，糟糕的程序通常会让自己进入一种恶性循环，他们看上去总是疲惫的，总是很辛苦的，所以更没有时间来改善，越没有时间来改善，就有越多的问题。所以，拼命工作有些时候可能表明你不是一个好的程序员。</p>
<p><strong>6) 总是在等待、找借口以及抱怨</strong></p>
<p>当需求不明确的时候，当环境不是很满意的时候，他们总是在等待别人的改善。出现问题的时候，总是在找借口，或是抱怨这也不好，那也不好，所以自己当然就没有做好。糟糕的程序员总是希望自己的所处的环境是最好的，有明确的需求，有非常不错的开发环境，有足够的时间，有不错的QA，还有很强的team leader，以及体贴自己的经理，有足够的培训，有良好的讨论，有别人强有力的支持……，这是一种“饭来张口，衣来伸手”的态度，这个世界本来就不完美，一个团队需要所有人去奋斗，况且，如果什么都变得完美了，那么，你的价值何在吗？driving instead of waiting, leading instead of following.</p>
<p><strong>7) 滋生办公室政治</strong></p>
<p>有句话叫“丑女多作怪”，意思是说如果一个自己没有真实的能力的话，那么他一定会在其它方面作文章。糟糕的程序员也是这样，如果他们程序编不好的话，比不过别人的话，他们通常会去靠指责别人，推脱责任，或是排挤有能力的人，等等不正常的手段来保全自己。所以，糟糕的程序通常伴随着办公室政治。</p>
<p><strong>8 ) 说得多做得少</strong></p>
<p>糟糕的程序员总是觉得自己什么都懂，他们并不会觉得自己的认识和知识都是有限的。这就是所谓的夸夸其谈，是的，什么都做不好的程序员能靠什么混日子呢？就是吹啊吹啊。</p>
<p>另一个表现方式是他们在评论起别人的程序或是设计，总是能挑出一堆毛病，但自己的程序写得也很烂。总是批评抱怨，而没有任何有建设性的意见，或是提出可行的解决方案。</p>
<p>这些糟糕的程序员，总是喜欢以批评别人的程序而达到显示自己的优秀。</p>
<p><strong>9) 顽固</strong></p>
<p>当你给出一打证据说明那里有一个更好的方案，那里有一个更好的方向的时候，他们总是会倔强的认为他们自己的做法才是最好的。一个我亲身经历的事例就是，当我看到一个新来的程序员在解决一个问题的时候走到了错误的方向上时，我提醒他，你可能走错了，应该是另外那边，并且我证明了给他看还有一个更为简单的方法，有。然而，这位程序员却告诉我，“那是我的方法，我一定要把之走下去，不然我会非常难受”，于是，在三天后的代码评审中，在经过顽固地解释以及一片质疑声中，他不得不采用了我最先告诉他的那个方法。</p>
<p>这些程序员，从来不会去想，也不会去找人讨论还有没有更好的方法，而是坚持自己的想法，那怕是条死路都一往直前，不撞南墙永不回头。</p>
<p><strong>10) 写“聪明”的代码</strong></p>
<p>他们写出来的代码需要别的同事查看程序语言参考手册，或是其程序的逻辑或是风格看上去相当时髦，但却非常难读。代码本应该简洁和易读，而他们喜欢在代码中表现自己，并尝试另类的东西，以显示自己的才气。是的，只有能力有问题的程序员才需要借助这样的显示。</p>
<p>记得以前的一个经历，一位英语很不错的程序员加入公司，本来对我们这些英语二把刀来说，我们喜欢看到的是简单和易读的英文文档，然后，那位老兄为了展示他的英语如何牛，使用了很多GRE中比较生僻的短语和词汇。让大家阅读得很艰苦。最有讽刺意味的是，有一位native的美国人后来在其邮件中询问他某个单词的意思。呵呵。</p>
<p>你是一个糟糕的程序员吗？欢迎你分享你的经历。</p>
<p>（全文完）</p>
<p align="center"><img alt="image placeholder" >
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/21589.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/20977.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/20765.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/20276.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/19612.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/19464.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
</ul>
</div></div>
<div id="post-ratings-1081" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="1dc8be7ca8">
<img alt="image placeholder" >
<meta itemprop="headline" content="十个让你变成糟糕的程序员的行为">
<meta itemprop="description" content="之前本站发表过《优秀程序员的十个习惯》以及《程序员需要具备的基本技能》，那是我们需要去学习和培养的。这里，我们主要讨论十个糟糕程序员的特征，主要是需要让我们去避免和小心的。

1) 情绪化的思维

如果你开始使用不同颜色的眼光来看待这个世界的话，那么你可能会成为一个很糟糕的程序员。情绪化的思维或态度很有可能会把自己变成一个怪物。相信你经常可以看到很多很糟糕的程序会使用下面的这些语句：
...">
<meta itemprop="datePublished" content="2009-06-24T23:02:36+08:00">
<meta itemprop="dateModified" content="2009-06-26T16:04:30+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/1081.html">
<meta itemprop="author" content="陈皓">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/1081.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="4.33">
<meta itemprop="ratingCount" content="39">
</div>
</div>
<div id="post-ratings-1081-loading" class="post-ratings-loading">
<img alt="image placeholder" >
 ]]></content>
<pubDate>2009-06-24T23:02:36+08:00</pubDate>
<guid>https://coolshell.cn/articles/1081.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ 22个开源的PHP框架 ]]></title>
<link>https://coolshell.cn/articles/1086.html</link>
<content><![CDATA[ 
<p>PHP 是一个被广泛使用的来进行Web开发的脚本语言。虽然有很多其它可供选择的Web开发语言，像：ASP 和Ruby，但是PHP是目前为止世界上最为流行的。</p>
<p>那么，是什么让PHP如此流行？PHP 如此之流行是因为比起别的语言来，它更容易学习，网上有一大堆相当相当不错的PHP教程可以让你快速地马上就可以进行Web程序的开发。虽然PHP是是简单的，而且是容易上手的，但用它编程还是有点麻烦，尤其是一些反复在用的功能。不过，幸运的是，很多开发团队早就注意到了这点，现在在网上，PHP有许多的可以信任的PHP Framework 可以缩短我们的开发时间。这些框架被一个巨大的社区所支持，因些，如果你有什么问题的话，一定会有人乐意帮你去解决。</p>
<p>废话少说，让我们来看看这22个PHP的框架。</p>
<p><span id="more-1086"></span></p>
<h2>迄今最有前途的框架</h2>
<h3>1. <a title="Zend Framework" href="http://framework.zend.com/" target="_blank">Zend Framework</a>
</h3>
<p><img alt="image placeholder" >
Zend Framework 是一个面向对象的，由PHP5写成的框架。其基于一个简洁和友好的许可证协议，并基于了一个经过了相当严酷测试的代码库开发而来。这是一个松散的几乎没有耦合架构设计，你可以方便地把其和其它框架混合使用。</p>
<h3>2. <a title="Symfony" href="http://www.symfony-project.org/" target="_blank">Symfony</a>
</h3>
<p><img alt="image placeholder" >
Symfony 是一个基于PHP 5 的框架，其提供了一个架构，组件和工具集，可以让你更快地创造你的应用。在其官网上提供了一些入门教程。</p>
<p><span id="more-575"> </span></p>
<h3>3. <a title="CodeIgniter" href="https://codeigniter.com/" target="_blank">CodeIgniter</a>
</h3>
<p><img alt="image placeholder" >
CodeIgniter 这个框架有一个wiki可以让你容易的查找相关的文档。其支持的是PHP4。</p>
<h3>4. <a title="CakePHP" href="http://cakephp.org/" target="_blank">CakePHP</a>
</h3>
<p><img alt="image placeholder" >
这个框架使用了一些流行的设计模式比如： MVC  和ORM  ， CakePHP 可以有效地减少开发成本和帮助开发人员少写代码。</p>
<h3>5. <a title="Prado PHP Framework" href="http://www.xisc.com/" target="_blank">Prado</a>
</h3>
<p><img alt="image placeholder" >
<p>Prado 需要PHP5 及以上版本才能运行，这是基于组件和事件驱动编程的一个程序框架。</p>
<h3>6. <a title="Kohana" href="http://www.kohanaphp.com/" target="_blank">Kohana</a>
</h3>
<p><img alt="image placeholder" >
Kohana 是一个基于 PHP 5 的框架，其也是使用MVC—— Model View Controller 架构模式。其面对的是安全，轻量级，和易用性。由于Kohana 原来基于 CodeIgniter开发，因为其限制了PHP5 的OOP能力，所以这个框架更合适用在一些中小型的应用。</p>
<h3>7. <a title="Solar Framework" href="http://solarphp.com/" target="_blank">Solar Framework</a>
</h3>
<p><img alt="image placeholder" >
Solar 是一个 PHP 5 的框架，其可以用做企业级的应用，而且有内建的语言集和配置。</p>
<h3>8. <a title="Fuse" href="http://www.phpfuse.net/" target="_blank">Fuse</a>
</h3>
<p><img alt="image placeholder" >
FUSE 也是一个MVC的PHP框架。其注是要受到了Ruby on Rails 和CakePHP的影响，其有定制和直接的设计。FUSE 是一个功能完整，相当稳定的使用面向对像开发的MVC框架。</p>
<h3>9. <a title="Yii PHP Framework" href="http://www.yiiframework.com/" target="_blank">Yii PHP Framework</a>
</h3>
<p><img alt="image placeholder" >
Yii 是一个高性能的组件式的PHP框架，对于那些大型的Web应用来说，这是最好的框架，全面的功能。但需要PHP5及以上版的支持。</p>
<h3>10. <a title="Akelos PHP Framework" href="http://www.akelos.org/" target="_blank">Akelos PHP Framework</a>
</h3>
<p><img alt="image placeholder" >
Akelos PHP 框架也是基于 MVC (Model View Controller) 设计模式的框架。</p>
<h2>其它可选的 PHP 框架</h2>
<p>11. <a title="Recess" href="http://www.recessframework.org/" target="_blank">Recess</a><br>
12. <a title="Agavi" href="http://www.agavi.org/" target="_blank">Agavi</a><br>
13. <a title="Qcodo" href="http://www.qcodo.com/" target="_blank">Qcodo</a><br>
14. <a title="Zoop" href="http://zoopframework.com/" target="_blank">Zoop</a><br>
15. <a title="QPHP" href="http://qphp.net/" target="_blank">QPHP</a><br>
16. <a title="Seagull" href="http://seagullproject.org/" target="_blank">Seagull PHP</a><br>
17. <a title="PHPDevShell" href="http://www.phpdevshell.org/" target="_blank">PHPDevShell<br>
</a>18. <a title="PHPOpenBiz" href="http://www.phpopenbiz.org/" target="_blank">PHPOpenBiz</a><br>
19. <a title="WASP" href="http://wasp.sourceforge.net/content/" target="_blank">WASP</a><br>
20. <a title="evoCore" href="http://evocore.net/" target="_blank">evoCore</a><br>
21. <a title="Lion" href="http://www.lionframework.org/" target="_blank">Lion</a><br>
22. <a title="Flow3" href="http://flow3.typo3.org/" target="_blank">Flow3</a></p>
<p>文章：<a href="http://www.webdesignbooth.com/22-open-source-php-frameworks-to-shorten-your-development-time/" target="_blank">来源</a></p>
<p align="center"><img alt="image placeholder" >
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/7886.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/5224.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/5160.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/4795.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/3684.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/2394.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
</ul>
</div></div>
<div id="post-ratings-1086" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="e7681c7388">
<img alt="image placeholder" >
<meta itemprop="headline" content="22个开源的PHP框架">
<meta itemprop="description" content="PHP 是一个被广泛使用的来进行Web开发的脚本语言。虽然有很多其它可供选择的Web开发语言，像：ASP 和Ruby，但是PHP是目前为止世界上最为流行的。

那么，是什么让PHP如此流行？PHP 如此之流行是因为比起别的语言来，它更容易学习，网上有一大堆相当相当不错的PHP教程可以让你快速地马上就可以进行Web程序的开发。虽然PHP是是简单的，而且是容易上手的，但用它编程还是有点麻烦，尤其是...">
<meta itemprop="datePublished" content="2009-06-25T11:57:39+08:00">
<meta itemprop="dateModified" content="2009-06-30T16:54:00+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/1086.html">
<meta itemprop="author" content="陈皓">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/1086.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="2.33">
<meta itemprop="ratingCount" content="3">
</div>
</div>
<div id="post-ratings-1086-loading" class="post-ratings-loading">
<img alt="image placeholder" >
 ]]></content>
<pubDate>2009-06-25T11:57:39+08:00</pubDate>
<guid>https://coolshell.cn/articles/1086.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ Top 200的全球开发者BLOG ]]></title>
<link>https://coolshell.cn/articles/1092.html</link>
<content><![CDATA[ 
<p>本文源自<a href="http://www.noop.nl/2009/06/top-200-blogs-for-developers-q2-2009.html" target="_blank">这里</a>，文中列出了全球前200名的开发者的BLOG。有的可能你很熟悉，有的你可能还不知道。这些BLOG的排名通过查看，<em>Google PageRank</em>, <em>Technorati Authority</em>, <em>Alexa Rank</em>, <em>Google links</em>, <em>Twitter Grader Rank</em>等等，形成的综合排名。如果你对此感兴趣的话，你可以看看这篇文章——《<a href="http://www.noop.nl/how-to-make-a-top-blog-list.html" target="_blank">如何制作一个Blog排名</a>》</p>
<p>下面是前200名的排名。希望对那些有日常浏览Blog习惯的人有帮助。大家可以下载更为详细的<a href="http://nooperation.typepad.com/files/top200developmentblogsq22009.xls" target="_blank">Excel表格</a>。</p>
<p>本排名截止至：2009年第二季度</p>
<p><span id="more-1092"></span></p>
<p><strong>其中：</strong><br>
<strong>TT</strong> = This Time 本次名次<br>
<strong>LT</strong> = Last Time 上次名次</p>
<table border="0" cellspacing="0" cellpadding="3">
<tbody>
<tr>
<td align="center" valign="top"><strong>TT</strong></td>
<td align="center" valign="top"><strong>LT</strong></td>
<td valign="top"><strong>Blog</strong></td>
<td valign="top"><strong>Author</strong></td>
<td valign="top"><strong>Twitter</strong></td>
</tr>
<tr>
<td align="center" valign="top"><strong>1</strong></td>
<td align="center" valign="top">6</td>
<td valign="top"><a href="https://www.hanselman.com/blog/">Scott Hanselman’s Computer Zen</a></td>
<td valign="top">Scott Hanselman</td>
<td valign="top"><a href="https://twitter.com/shanselman">shanselman</a></td>
</tr>
<tr>
<td align="center" valign="top"><strong>2</strong></td>
<td align="center" valign="top">2</td>
<td valign="top"><a href="http://www.codinghorror.com/">Coding Horror</a></td>
<td valign="top">Jeff Atwood</td>
<td valign="top"><a href="https://twitter.com/codinghorror">codinghorror</a></td>
</tr>
<tr>
<td align="center" valign="top"><strong>3</strong></td>
<td align="center" valign="top">19</td>
<td valign="top"><a href="http://highscalability.com/">High Scalability</a></td>
<td valign="top">(various)</td>
<td valign="top"> </td>
</tr>
<tr>
<td align="center" valign="top"><strong>4</strong></td>
<td align="center" valign="top">12</td>
<td valign="top"><a href="http://lambda-the-ultimate.org/">Lambda the Ultimate</a></td>
<td valign="top">(various)</td>
<td valign="top"> </td>
</tr>
<tr>
<td align="center" valign="top"><strong>5</strong></td>
<td align="center" valign="top">16</td>
<td valign="top"><a href="https://www.uie.com/brainsparks/">UIE Brain Sparks</a></td>
<td valign="top">Jared Spool</td>
<td valign="top"><a href="https://twitter.com/jmspool">jmspool</a></td>
</tr>
<tr>
<td align="center" valign="top"><strong>6</strong></td>
<td align="center" valign="top">13</td>
<td valign="top"><a href="http://raibledesigns.com/">Raible Designs</a></td>
<td valign="top">Matt Raible</td>
<td valign="top"><a href="https://twitter.com/mraible">mraible</a></td>
</tr>
<tr>
<td align="center" valign="top"><strong>7</strong></td>
<td align="center" valign="top">59</td>
<td valign="top"><a href="http://dobbscodetalk.com/">Dr. Dobb’s CodeTalk</a></td>
<td valign="top">(various)</td>
<td valign="top"> </td>
</tr>
<tr>
<td align="center" valign="top"><strong>8</strong></td>
<td align="center" valign="top">14</td>
<td valign="top"><a href="http://www.25hoursaday.com/weblog/">Dare Obasanjo aka Carnage4Life</a></td>
<td valign="top">Dare Obasanjo</td>
<td valign="top"><a href="https://twitter.com/carnage4life">carnage4life</a></td>
</tr>
<tr>
<td align="center" valign="top"><strong>9</strong></td>
<td align="center" valign="top">3</td>
<td valign="top"><a href="http://martinfowler.com/bliki/">Martin Fowler’s Bliki</a></td>
<td valign="top">Martin Fowler</td>
<td valign="top"><a href="https://twitter.com/martinfowler">martinfowler</a></td>
</tr>
<tr>
<td align="center" valign="top"><strong>10</strong></td>
<td align="center" valign="top">1</td>
<td valign="top"><a href="http://www.joelonsoftware.com/">Joel on Software</a></td>
<td valign="top">Joel Spolsky</td>
<td valign="top"><a href="https://twitter.com/spolsky">spolsky</a></td>
</tr>
<tr>
<td align="center" valign="top"><strong>11</strong></td>
<td align="center" valign="top">8</td>
<td valign="top"><a href="http://bokardo.com/">Bokardo: Social Design</a></td>
<td valign="top">Joshua Porter</td>
<td valign="top"><a href="https://twitter.com/bokardo">bokardo</a></td>
</tr>
<tr>
<td align="center" valign="top"><strong>12</strong></td>
<td align="center" valign="top">25</td>
<td valign="top"><a href="http://www.scottberkun.com/blog/">The Berkun Blog</a></td>
<td valign="top">Scott Berkun</td>
<td valign="top"><a href="https://twitter.com/berkun">berkun</a></td>
</tr>
<tr>
<td align="center" valign="top"><strong>13</strong></td>
<td align="center" valign="top">18</td>
<td valign="top"><a href="http://codebetter.com/">CodeBetter.Com</a></td>
<td valign="top">(various)</td>
<td valign="top"><a href="https://twitter.com/codebetter">codebetter</a></td>
</tr>
<tr>
<td align="center" valign="top"><strong>14</strong></td>
<td align="center" valign="top">7</td>
<td valign="top"><a href="http://www.randsinrepose.com/">Rands in Repose</a></td>
<td valign="top">Michael Lopp</td>
<td valign="top"><a href="https://twitter.com/rands">rands</a></td>
</tr>
<tr>
<td align="center" valign="top"><strong>15</strong></td>
<td align="center" valign="top">10</td>
<td valign="top"><a href="https://blog.stackoverflow.com/">Stack Overflow</a></td>
<td valign="top">Jeff Atwood</td>
<td valign="top"> </td>
</tr>
<tr>
<td align="center" valign="top"><strong>16</strong></td>
<td align="center" valign="top">15</td>
<td valign="top"><a href="http://blog.jonudell.net/">Jon Udell</a></td>
<td valign="top">Jon Udell</td>
<td valign="top"><a href="https://twitter.com/judell">judell</a></td>
</tr>
<tr>
<td align="center" valign="top"><strong>17</strong></td>
<td align="center" valign="top">20</td>
<td valign="top"><a href="http://blog.objectmentor.com/">Object Mentor Blog</a></td>
<td valign="top">(various)</td>
<td valign="top"> </td>
</tr>
<tr>
<td align="center" valign="top"><strong>18</strong></td>
<td align="center" valign="top">37</td>
<td valign="top"><a href="http://blog.softwareprojects.org/">Project Shrink</a></td>
<td valign="top">Bas de Baar</td>
<td valign="top"><a href="https://twitter.com/projectshrink">projectshrink</a></td>
</tr>
<tr>
<td align="center" valign="top"><strong>19</strong></td>
<td align="center" valign="top">4</td>
<td valign="top"><a href="http://thedailywtf.com/">The Daily WTF</a></td>
<td valign="top">(various)</td>
<td valign="top"><a href="https://twitter.com/dailywtf">dailywtf</a></td>
</tr>
<tr>
<td align="center" valign="top"><strong>20</strong></td>
<td align="center" valign="top">30</td>
<td valign="top"><a href="https://blogs.msdn.com/jmeier/">J.D. Meier’s Blog</a></td>
<td valign="top">J.D. Meier</td>
<td valign="top"> </td>
</tr>
<tr>
<td align="center" valign="top"><strong>21</strong></td>
<td align="center" valign="top">28</td>
<td valign="top"><a href="http://www.artima.com/weblogs/">Artima Weblogs</a></td>
<td valign="top">(various)</td>
<td valign="top"> </td>
</tr>
<tr>
<td align="center" valign="top"><strong>22</strong></td>
<td align="center" valign="top">21</td>
<td valign="top"><a href="http://regulargeek.com/">Regular Geek</a></td>
<td valign="top">Rob Diana</td>
<td valign="top"><a href="https://twitter.com/robdiana">robdiana</a></td>
</tr>
<tr>
<td align="center" valign="top"><strong>23</strong></td>
<td align="center" valign="top">24</td>
<td valign="top"><a href="http://www.noop.nl/">NOOP.NL</a></td>
<td valign="top">Jurgen Appelo</td>
<td valign="top"><a href="https://twitter.com/jurgenappelo">jurgenappelo</a></td>
</tr>
<tr>
<td align="center" valign="top"><strong>24</strong></td>
<td align="center" valign="top">81</td>
<td valign="top"><a href="http://jeffreypalermo.com/">Jeffrey Palermo (.com)</a></td>
<td valign="top">Jeffrey Palermo</td>
<td valign="top"><a href="https://twitter.com/jeffreypalermo">jeffreypalermo</a></td>
</tr>
<tr>
<td align="center" valign="top"><strong>25</strong></td>
<td align="center" valign="top">46</td>
<td valign="top"><a href="http://tech.puredanger.com/">Pure Danger Tech</a></td>
<td valign="top">Alex Miller</td>
<td valign="top"><a href="https://twitter.com/puredanger">puredanger</a></td>
</tr>
<tr>
<td align="center" valign="top"><strong>26</strong></td>
<td align="center" valign="top">45</td>
<td valign="top"><a href="http://blogs.tedneward.com/">Interoperability Happens</a></td>
<td valign="top">Ted Neward</td>
<td valign="top"><a href="https://twitter.com/tedneward">tedneward</a></td>
</tr>
<tr>
<td align="center" valign="top"><strong>27</strong></td>
<td align="center" valign="top">124</td>
<td valign="top"><a href="http://xprogramming.com/blog/">Hot Needle of Inquiry</a></td>
<td valign="top">Ron Jeffries</td>
<td valign="top"><a href="https://twitter.com/ronjeffries">ronjeffries</a></td>
</tr>
<tr>
<td align="center" valign="top"><strong>28</strong></td>
<td align="center" valign="top">60</td>
<td valign="top"><a href="http://www.betterprojects.net/">Better Projects</a></td>
<td valign="top">Craig Brown</td>
<td valign="top"> </td>
</tr>
<tr>
<td align="center" valign="top"><strong>29</strong></td>
<td align="center" valign="top">73</td>
<td valign="top"><a href="http://blog.softwareinsider.org/">A Software Insiders Point of View</a></td>
<td valign="top">R “Ray” Wang</td>
<td valign="top"><a href="https://twitter.com/rwang0">rwang0</a></td>
</tr>
<tr>
<td align="center" valign="top"><strong>30</strong></td>
<td align="center" valign="top">50</td>
<td valign="top"><a href="http://www.sauria.com/blog/">Ted Leung on the Air</a></td>
<td valign="top">Ted Leung</td>
<td valign="top"><a href="https://twitter.com/twleung">twleung</a></td>
</tr>
<tr>
<td align="center" valign="top"><strong>31</strong></td>
<td align="center" valign="top">69</td>
<td valign="top"><a href="http://www.agilemanagement.net/Articles/Weblog/blog.html">Agile Management Blog</a></td>
<td valign="top">David Anderson</td>
<td valign="top"><a href="https://twitter.com/agilemanager">agilemanager</a></td>
</tr>
<tr>
<td align="center" valign="top"><strong>32</strong></td>
<td align="center" valign="top">33</td>
<td valign="top"><a href="http://secretgeek.net/">secretGeek</a></td>
<td valign="top">Leon Bambrick</td>
<td valign="top"><a href="https://twitter.com/secretgeek">secretgeek</a></td>
</tr>
<tr>
<td align="center" valign="top"><strong>33</strong></td>
<td align="center" valign="top">36</td>
<td valign="top"><a href="https://duckdown.blogspot.com/">Enterprise Architecture: From Incite comes Insight…</a></td>
<td valign="top">James McGovern</td>
<td valign="top"> </td>
</tr>
<tr>
<td align="center" valign="top"><strong>34</strong></td>
<td align="center" valign="top">—</td>
<td valign="top"><a href="http://devlicio.us/">Devlicio.us</a></td>
<td valign="top">(various)</td>
<td valign="top"><a href="https://twitter.com/devlicious">devlicious</a></td>
</tr>
<tr>
<td align="center" valign="top"><strong>35</strong></td>
<td align="center" valign="top">9</td>
<td valign="top"><a href="https://steve-yegge.blogspot.com/">Stevey’s Blog Rants</a></td>
<td valign="top">Steve Yegge</td>
<td valign="top"> </td>
</tr>
<tr>
<td align="center" valign="top"><strong>36</strong></td>
<td align="center" valign="top">31</td>
<td valign="top"><a href="http://al3x.net/">Alex Payne</a></td>
<td valign="top">Alex Payne</td>
<td valign="top"><a href="https://twitter.com/al3x">al3x</a></td>
</tr>
<tr>
<td align="center" valign="top"><strong>37</strong></td>
<td align="center" valign="top">58</td>
<td valign="top"><a href="http://stuffthathappens.com/blog/">It’s Just a Bunch of Stuff That Happens</a></td>
<td valign="top">Eric Burke</td>
<td valign="top"><a href="https://twitter.com/burke_eric">burke_eric</a></td>
</tr>
<tr>
<td align="center" valign="top"><strong>38</strong></td>
<td align="center" valign="top">29</td>
<td valign="top"><a href="https://googletesting.blogspot.com/">Google Testing Blog</a></td>
<td valign="top">(various)</td>
<td valign="top"> </td>
</tr>
<tr>
<td align="center" valign="top"><strong>39</strong></td>
<td align="center" valign="top">48</td>
<td valign="top"><a href="http://elegantcode.com/">Elegant Code</a></td>
<td valign="top">(various)</td>
<td valign="top"><a href="https://twitter.com/elegantcode">elegantcode</a></td>
</tr>
<tr>
<td align="center" valign="top"><strong>40</strong></td>
<td align="center" valign="top">5</td>
<td valign="top"><a href="http://blogcabin.37signals.com/">Signal vs. Noise</a></td>
<td valign="top">(various)</td>
<td valign="top"><a href="https://twitter.com/37signals">37signals</a></td>
</tr>
<tr>
<td align="center" valign="top"><strong>41</strong></td>
<td align="center" valign="top">66</td>
<td valign="top"><a href="http://www.exampler.com/blog/">Exploration Through Example</a></td>
<td valign="top">Brian Marick</td>
<td valign="top"><a href="https://twitter.com/marick">marick</a></td>
</tr>
<tr>
<td align="center" valign="top"><strong>42</strong></td>
<td align="center" valign="top">57</td>
<td valign="top"><a href="http://ericbrown.com/">Aligning Technology, Strategy, People &amp; Projects</a></td>
<td valign="top">Eric Brown</td>
<td valign="top"><a href="https://twitter.com/ericdbrown">ericdbrown</a></td>
</tr>
<tr>
<td align="center" valign="top"><strong>43</strong></td>
<td align="center" valign="top">—</td>
<td valign="top"><a href="http://www.codethinked.com/">CodeThinked</a></td>
<td valign="top">Justin Etheredge</td>
<td valign="top"><a href="https://twitter.com/justinetheredge">justinetheredge</a></td>
</tr>
<tr>
<td align="center" valign="top"><strong>44</strong></td>
<td align="center" valign="top">35</td>
<td valign="top"><a href="http://www.contrast.ie/blog/">Contrast | The Blog</a></td>
<td valign="top">(various)</td>
<td valign="top"> </td>
</tr>
<tr>
<td align="center" valign="top"><strong>45</strong></td>
<td align="center" valign="top">114</td>
<td valign="top"><a href="http://pyre.third-bit.com/blog/">The Third Bit</a></td>
<td valign="top">Greg Wilson</td>
<td valign="top"> </td>
</tr>
<tr>
<td align="center" valign="top"><strong>46</strong></td>
<td align="center" valign="top">22</td>
<td valign="top"><a href="http://beust.com/weblog/">Otaku, Cedric’s Weblog</a></td>
<td valign="top">Cedric</td>
<td valign="top"><a href="https://twitter.com/cbeust">cbeust</a></td>
</tr>
<tr>
<td align="center" valign="top"><strong>47</strong></td>
<td align="center" valign="top">39</td>
<td valign="top"><a href="http://www.shahine.com/omar/">Shanine.com / omar /</a></td>
<td valign="top">Omar Shahine</td>
<td valign="top"><a href="https://twitter.com/omarshahine">omarshahine</a></td>
</tr>
<tr>
<td align="center" valign="top"><strong>48</strong></td>
<td align="center" valign="top">11</td>
<td valign="top"><a href="http://www.ericsink.com/">Eric.Weblog()</a></td>
<td valign="top">Eric Sink</td>
<td valign="top"> </td>
</tr>
<tr>
<td align="center" valign="top"><strong>49</strong></td>
<td align="center" valign="top">108</td>
<td valign="top"><a href="http://www.pmthink.com/">PMThink!</a></td>
<td valign="top">(various)</td>
<td valign="top"> </td>
</tr>
<tr>
<td align="center" valign="top"><strong>50</strong></td>
<td align="center" valign="top">52</td>
<td valign="top"><a href="http://www.reformingprojectmanagement.com/">Reforming Project Management</a></td>
<td valign="top">Hal Macomber</td>
<td valign="top"><a href="https://twitter.com/HalMacomber">HalMacomber</a></td>
</tr>
<tr>
<td align="center" valign="top"><strong>51</strong></td>
<td align="center" valign="top">62</td>
<td valign="top"><a href="http://www.codesqueeze.com/">{Codesqueeze}</a></td>
<td valign="top">Max Pool</td>
<td valign="top"><a href="https://twitter.com/mpool">mpool</a></td>
</tr>
<tr>
<td align="center" valign="top"><strong>52</strong></td>
<td align="center" valign="top">47</td>
<td valign="top"><a href="http://jrothman.com/blog/mpd/">Managing Product Development</a></td>
<td valign="top">Johanna Rothman</td>
<td valign="top"><a href="https://twitter.com/johannarothman">johannarothman</a></td>
</tr>
<tr>
<td align="center" valign="top"><strong>53</strong></td>
<td align="center" valign="top">27</td>
<td valign="top"><a href="http://www.satisfice.com/blog/">James Bach’s Blog</a></td>
<td valign="top">James Bach</td>
<td valign="top"><a href="https://twitter.com/jamesmarcusbach">jamesmarcusbach</a></td>
</tr>
<tr>
<td align="center" valign="top"><strong>54</strong></td>
<td align="center" valign="top">34</td>
<td valign="top"><a href="http://blog.businessofsoftware.org/">Business of Software Blog</a></td>
<td valign="top">Neil Davidson</td>
<td valign="top"><a href="https://twitter.com/neildavidson">neildavidson</a></td>
</tr>
<tr>
<td align="center" valign="top"><strong>55</strong></td>
<td align="center" valign="top">—</td>
<td valign="top"><a href="http://graysmatter.codivation.com/">Gray’s Matter</a></td>
<td valign="top">Justice Gray</td>
<td valign="top"> </td>
</tr>
<tr>
<td align="center" valign="top"><strong>56</strong></td>
<td align="center" valign="top">105</td>
<td valign="top"><a href="http://www.leadingagile.com/">Leading Agile</a></td>
<td valign="top">Mike Cottmeyer</td>
<td valign="top"><a href="https://twitter.com/mcottmeyer">mcottmeyer</a></td>
</tr>
<tr>
<td align="center" valign="top"><strong>57</strong></td>
<td align="center" valign="top">55</td>
<td valign="top"><a href="http://jeffblankenburg.com/default.aspx">Blankenthoughts</a></td>
<td valign="top">Jeff Blankenburg</td>
<td valign="top"><a href="https://twitter.com/jblankenburg">jblankenburg</a></td>
</tr>
<tr>
<td align="center" valign="top"><strong>58</strong></td>
<td align="center" valign="top">—</td>
<td valign="top"><a href="http://www.threeriversinstitute.org/blog/">JUnit Max</a></td>
<td valign="top">Kent Beck</td>
<td valign="top"><a href="https://twitter.com/kentbeck">kentbeck</a></td>
</tr>
<tr>
<td align="center" valign="top"><strong>59</strong></td>
<td align="center" valign="top">43</td>
<td valign="top"><a href="http://agilesoftwaredevelopment.com/">Agile Software Development</a></td>
<td valign="top">(various)</td>
<td valign="top"><a href="https://twitter.com/agileartem">agileartem</a></td>
</tr>
<tr>
<td align="center" valign="top"><strong>60</strong></td>
<td align="center" valign="top">32</td>
<td valign="top"><a href="http://forums.construx.com/blogs/stevemcc/default.aspx">10x Software Development</a></td>
<td valign="top">Steve McConnell</td>
<td valign="top"> </td>
</tr>
<tr>
<td align="center" valign="top"><strong>61</strong></td>
<td align="center" valign="top">51</td>
<td valign="top"><a href="http://blog.thinkrelevance.com/">Relevance Blog</a></td>
<td valign="top">(various)</td>
<td valign="top"> </td>
</tr>
<tr>
<td align="center" valign="top"><strong>62</strong></td>
<td align="center" valign="top">113</td>
<td valign="top"><a href="http://www.markhneedham.com/blog/">Mark Needham</a></td>
<td valign="top">Mark Needham</td>
<td valign="top"><a href="https://twitter.com/markhneedham">markhneedham</a></td>
</tr>
<tr>
<td align="center" valign="top"><strong>63</strong></td>
<td align="center" valign="top">78</td>
<td valign="top"><a href="https://blogs.msdn.com/micahel/">The Braidy Tester</a></td>
<td valign="top">Micahel</td>
<td valign="top"> </td>
</tr>
<tr>
<td align="center" valign="top"><strong>64</strong></td>
<td align="center" valign="top">65</td>
<td valign="top"><a href="http://herdingcats.typepad.com/">Herding Cats</a></td>
<td valign="top">Glen Alleman</td>
<td valign="top"> </td>
</tr>
<tr>
<td align="center" valign="top"><strong>65</strong></td>
<td align="center" valign="top">76</td>
<td valign="top"><a href="http://www.chrisspagnuolo.com/">Chris Spagnuolo’s EdgeHopper</a></td>
<td valign="top">Chris Spagnuolo</td>
<td valign="top"><a href="https://twitter.com/chrisspagnuolo">chrisspagnuolo</a></td>
</tr>
<tr>
<td align="center" valign="top"><strong>66</strong></td>
<td align="center" valign="top">63</td>
<td valign="top"><a href="http://blog.toolshed.com/">/\ndy</a></td>
<td valign="top">Andy Hunt</td>
<td valign="top"><a href="https://twitter.com/pragmaticandy">pragmaticandy</a></td>
</tr>
<tr>
<td align="center" valign="top"><strong>67</strong></td>
<td align="center" valign="top">61</td>
<td valign="top"><a href="http://leansoftwareengineering.com/">Lean Software Engineering</a></td>
<td valign="top">Corey Ladas</td>
<td valign="top"><a href="https://twitter.com/corey_ladas">corey_ladas</a></td>
</tr>
<tr>
<td align="center" valign="top"><strong>68</strong></td>
<td align="center" valign="top">83</td>
<td valign="top"><a href="http://infozerk.com/averyblog/">averyBlog</a></td>
<td valign="top">James Avery</td>
<td valign="top"><a href="https://twitter.com/averyj">averyj</a></td>
</tr>
<tr>
<td align="center" valign="top"><strong>69</strong></td>
<td align="center" valign="top">89</td>
<td valign="top"><a href="https://xndev.blogspot.com/">Creative Chaos</a></td>
<td valign="top">Matthew Heusser</td>
<td valign="top"><a href="https://twitter.com/mheusser">mheusser</a></td>
</tr>
<tr>
<td align="center" valign="top"><strong>70</strong></td>
<td align="center" valign="top">41</td>
<td valign="top"><a href="https://agiletesting.blogspot.com/">Agile Testing</a></td>
<td valign="top">Grig Gheorghiu</td>
<td valign="top"> </td>
</tr>
<tr>
<td align="center" valign="top"><strong>71</strong></td>
<td align="center" valign="top">53</td>
<td valign="top"><a href="http://jamesshore.com/Blog/">James Shore: The Art of Agile</a></td>
<td valign="top">James Shore</td>
<td valign="top"><a href="https://twitter.com/jamesshore">jamesshore</a></td>
</tr>
<tr>
<td align="center" valign="top"><strong>72</strong></td>
<td align="center" valign="top">125</td>
<td valign="top"><a href="http://www.rallydev.com/agileblog/">Agile Blog</a></td>
<td valign="top">(various)</td>
<td valign="top"> </td>
</tr>
<tr>
<td align="center" valign="top"><strong>73</strong></td>
<td align="center" valign="top">110</td>
<td valign="top"><a href="http://www.agileadvice.com/">Agile Advice</a></td>
<td valign="top">(various)</td>
<td valign="top"> </td>
</tr>
<tr>
<td align="center" valign="top"><strong>74</strong></td>
<td align="center" valign="top">23</td>
<td valign="top"><a href="http://blog.mountaingoatsoftware.com/">Mike Cohn’s Blog: Succeeding with Agile</a></td>
<td valign="top">Mike Cohn</td>
<td valign="top"> </td>
</tr>
<tr>
<td align="center" valign="top"><strong>75</strong></td>
<td align="center" valign="top">88</td>
<td valign="top"><a href="http://www.agiledeveloper.com/blog/">Agile Developer Venkat’s Blog</a></td>
<td valign="top">Venkat Subramaniam</td>
<td valign="top"><a href="https://twitter.com/venkat_s">venkat_s</a></td>
</tr>
<tr>
<td align="center" valign="top"><strong>76</strong></td>
<td align="center" valign="top">74</td>
<td valign="top"><a href="https://memeagora.blogspot.com/">Meme Agora</a></td>
<td valign="top">Neal Ford</td>
<td valign="top"><a href="https://twitter.com/neal4d">neal4d</a></td>
</tr>
<tr>
<td align="center" valign="top"><strong>77</strong></td>
<td align="center" valign="top">67</td>
<td valign="top"><a href="http://jeffsutherland.com/">Object Technology</a></td>
<td valign="top">Jeff Sutherland</td>
<td valign="top"><a href="https://twitter.com/jeffsutherland">jeffsutherland</a></td>
</tr>
<tr>
<td align="center" valign="top"><strong>78</strong></td>
<td align="center" valign="top">38</td>
<td valign="top"><a href="http://stevenharman.net/blog/">StevenHarman.net</a></td>
<td valign="top">Steven Harman</td>
<td valign="top"><a href="https://twitter.com/stevenharman">stevenharman</a></td>
</tr>
<tr>
<td align="center" valign="top"><strong>79</strong></td>
<td align="center" valign="top">68</td>
<td valign="top"><a href="http://www.implementingscrum.com/">Implementing Scrum</a></td>
<td valign="top">Mike Vizdos</td>
<td valign="top"><a href="https://twitter.com/mvizdos">mvizdos</a></td>
</tr>
<tr>
<td align="center" valign="top"><strong>80</strong></td>
<td align="center" valign="top">100</td>
<td valign="top"><a href="http://www.ravensbrain.com/">Raven’s Brain</a></td>
<td valign="top">Raven Young</td>
<td valign="top"><a href="https://twitter.com/ravenyoung">ravenyoung</a></td>
</tr>
<tr>
<td align="center" valign="top"><strong>81</strong></td>
<td align="center" valign="top">121</td>
<td valign="top"><a href="http://community.zdnet.co.uk/blog/0,1000000567,2000458459b,00.htm">Software application development</a></td>
<td valign="top">Adrian Bridgwater</td>
<td valign="top"><a href="https://twitter.com/abridgwater">abridgwater</a></td>
</tr>
<tr>
<td align="center" valign="top"><strong>82</strong></td>
<td align="center" valign="top">145</td>
<td valign="top"><a href="http://www.codeodor.com/">My Secret Life as a Spaghetti Coder</a></td>
<td valign="top">Sammy Larbi</td>
<td valign="top"><a href="https://twitter.com/codeodor">codeodor</a></td>
</tr>
<tr>
<td align="center" valign="top"><strong>83</strong></td>
<td align="center" valign="top">70</td>
<td valign="top"><a href="http://bit-player.org/">Bit-Player</a></td>
<td valign="top">Brian Hayes</td>
<td valign="top"> </td>
</tr>
<tr>
<td align="center" valign="top"><strong>84</strong></td>
<td align="center" valign="top">77</td>
<td valign="top"><a href="http://ourfounder.typepad.com/">Evolving Web</a></td>
<td valign="top">Jim Benson</td>
<td valign="top"><a href="https://twitter.com/ourfounder">ourfounder</a></td>
</tr>
<tr>
<td align="center" valign="top"><strong>85</strong></td>
<td align="center" valign="top">71</td>
<td valign="top"><a href="http://mendicantbug.com/">The Mendicant Bug</a></td>
<td valign="top">Jason Adams</td>
<td valign="top"><a href="https://twitter.com/ealdent">ealdent</a></td>
</tr>
<tr>
<td align="center" valign="top"><strong>86</strong></td>
<td align="center" valign="top">94</td>
<td valign="top"><a href="http://management.curiouscatblog.net/">Curious Cat</a></td>
<td valign="top">John Hunter</td>
<td valign="top"><a href="https://twitter.com/curiouscat_com">curiouscat_com</a></td>
</tr>
<tr>
<td align="center" valign="top"><strong>87</strong></td>
<td align="center" valign="top">49</td>
<td valign="top"><a href="http://www.codingthearchitecture.com/">Coding the Architecture</a></td>
<td valign="top">(various)</td>
<td valign="top"> </td>
</tr>
<tr>
<td align="center" valign="top"><strong>88</strong></td>
<td align="center" valign="top">40</td>
<td valign="top"><a href="http://www.softwarebyrob.com/">Software by Rob</a></td>
<td valign="top">Rob Walling</td>
<td valign="top"> </td>
</tr>
<tr>
<td align="center" valign="top"><strong>89</strong></td>
<td align="center" valign="top">44</td>
<td valign="top"><a href="http://tynerblain.com/blog/">Tyner Blain</a></td>
<td valign="top">Scott Sehlhorst</td>
<td valign="top"><a href="https://twitter.com/sehlhorst">sehlhorst</a></td>
</tr>
<tr>
<td align="center" valign="top"><strong>90</strong></td>
<td align="center" valign="top">64</td>
<td valign="top"><a href="http://www.agile-software-development.com/">All About Agile</a></td>
<td valign="top">Kelly Waters</td>
<td valign="top"><a href="https://twitter.com/allaboutagile">allaboutagile</a></td>
</tr>
<tr>
<td align="center" valign="top"><strong>91</strong></td>
<td align="center" valign="top">42</td>
<td valign="top"><a href="http://alistair.cockburn.us/Blog">Alistair Cockburn</a></td>
<td valign="top">Alistair Cockburn</td>
<td valign="top"><a href="https://twitter.com/theotheralistai">theotheralistai</a></td>
</tr>
<tr>
<td align="center" valign="top"><strong>92</strong></td>
<td align="center" valign="top">115</td>
<td valign="top"><a href="http://www.estherderby.com/weblog/blogger.html">Insights You Can Use</a></td>
<td valign="top">Esther Derby</td>
<td valign="top"><a href="https://twitter.com/estherderby">estherderby</a></td>
</tr>
<tr>
<td align="center" valign="top"><strong>93</strong></td>
<td align="center" valign="top">99</td>
<td valign="top"><a href="http://www.clarkeching.com/">Clarke Ching – More Chilli Please</a></td>
<td valign="top">Clarke Ching</td>
<td valign="top"><a href="https://twitter.com/clarkeching">clarkeching</a></td>
</tr>
<tr>
<td align="center" valign="top"><strong>94</strong></td>
<td align="center" valign="top">80</td>
<td valign="top"><a href="http://blog.cutter.com/">The Cutter Blog</a></td>
<td valign="top">(various)</td>
<td valign="top"><a href="https://twitter.com/cuttertweets">cuttertweets</a></td>
</tr>
<tr>
<td align="center" valign="top"><strong>95</strong></td>
<td align="center" valign="top">102</td>
<td valign="top"><a href="http://www.io.com/~wazmo/blog/">Testing Hotlist Update</a></td>
<td valign="top">Bret Pettichord</td>
<td valign="top"><a href="https://twitter.com/bpettichord">bpettichord</a></td>
</tr>
<tr>
<td align="center" valign="top"><strong>96</strong></td>
<td align="center" valign="top">82</td>
<td valign="top"><a href="http://testobsessed.com/">Test Obsessed</a></td>
<td valign="top">Elisabeth Hendrickson</td>
<td valign="top"><a href="https://twitter.com/testobsessed">testobsessed</a></td>
</tr>
<tr>
<td align="center" valign="top"><strong>97</strong></td>
<td align="center" valign="top">—</td>
<td valign="top"><a href="http://www.satisfice.com/kaner/">Cem Kaner’s Blog</a></td>
<td valign="top">Cem Kaner</td>
<td valign="top"> </td>
</tr>
<tr>
<td align="center" valign="top"><strong>98</strong></td>
<td align="center" valign="top">143</td>
<td valign="top"><a href="http://www.targetprocess.com/blog/">Edge of Chaos</a></td>
<td valign="top">Michael Dubakov</td>
<td valign="top"><a href="https://twitter.com/mdubakov">mdubakov</a></td>
</tr>
<tr>
<td align="center" valign="top"><strong>99</strong></td>
<td align="center" valign="top">87</td>
<td valign="top"><a href="http://www.charlespetzold.com/blog/blog.xml">Petzold Book Blog</a></td>
<td valign="top">Charles Petzold</td>
<td valign="top"> </td>
</tr>
<tr>
<td align="center" valign="top"><strong>100</strong></td>
<td align="center" valign="top">104</td>
<td valign="top"><a href="https://www.ibm.com/developerworks/blogs/page/ambler"><span class="__cf_email__" data-cfemail="f7b6909e9b9e838eb7a494969b92">[email protected]</span></a></td>
<td valign="top">Scott W. Ambler</td>
<td valign="top"> </td>
</tr>
<tr>
<td align="center" valign="top"><strong>101</strong></td>
<td align="center" valign="top">175</td>
<td valign="top"><a href="http://theworkinggeek.com/">The Working Geek</a></td>
<td valign="top">Andy Lester</td>
<td valign="top"><a href="https://twitter.com/petdance">petdance</a></td>
</tr>
<tr>
<td align="center" valign="top"><strong>102</strong></td>
<td align="center" valign="top">98</td>
<td valign="top"><a href="http://www.lazycoder.com/weblog/">Lazycoder</a></td>
<td valign="top">Scott Koon</td>
<td valign="top"><a href="https://twitter.com/lazycoder">lazycoder</a></td>
</tr>
<tr>
<td align="center" valign="top"><strong>103</strong></td>
<td align="center" valign="top">119</td>
<td valign="top"><a href="https://jchyip.blogspot.com/">You’d think with all my video game experience…</a></td>
<td valign="top">Jason Yip</td>
<td valign="top"><a href="https://twitter.com/jchyip">jchyip</a></td>
</tr>
<tr>
<td align="center" valign="top"><strong>104</strong></td>
<td align="center" valign="top">168</td>
<td valign="top"><a href="http://parlezuml.com/blog/">Agile Software Process Improvement</a></td>
<td valign="top">Jason Gorman</td>
<td valign="top"><a href="https://twitter.com/jasongorman">jasongorman</a></td>
</tr>
<tr>
<td align="center" valign="top"><strong>105</strong></td>
<td align="center" valign="top">101</td>
<td valign="top"><a href="https://debasishg.blogspot.com/">Ruminations of a Programmer</a></td>
<td valign="top">Debasish Ghosh</td>
<td valign="top"><a href="https://twitter.com/debasishg">debasishg</a></td>
</tr>
<tr>
<td align="center" valign="top"><strong>106</strong></td>
<td align="center" valign="top">132</td>
<td valign="top"><a href="http://blog.martinig.ch/">From the Editor of Methods &amp; Tools</a></td>
<td valign="top">Martinig</td>
<td valign="top"> </td>
</tr>
<tr>
<td align="center" valign="top"><strong>107</strong></td>
<td align="center" valign="top">72</td>
<td valign="top"><a href="http://blog.brodzinski.com/">Software Project Management</a></td>
<td valign="top">Pawel Brodzinski</td>
<td valign="top"><a href="https://twitter.com/pawelbrodzinski">pawelbrodzinski</a></td>
</tr>
<tr>
<td align="center" valign="top"><strong>108</strong></td>
<td align="center" valign="top">90</td>
<td valign="top"><a href="http://www.moserware.com/">Moserware</a></td>
<td valign="top">Jeff Moser</td>
<td valign="top"><a href="https://twitter.com/jeffmoser">jeffmoser</a></td>
</tr>
<tr>
<td align="center" valign="top"><strong>109</strong></td>
<td align="center" valign="top">109</td>
<td valign="top"><a href="http://www.developsense.com/blog.html">DevelopSense Blog</a></td>
<td valign="top">Michael Bolton</td>
<td valign="top"><a href="https://twitter.com/michaelbolton">michaelbolton</a></td>
</tr>
<tr>
<td align="center" valign="top"><strong>110</strong></td>
<td align="center" valign="top">92</td>
<td valign="top"><a href="http://www.kohl.ca/blog/">Collaborative Software Testing</a></td>
<td valign="top">Jonathan Kohl</td>
<td valign="top"> </td>
</tr>
<tr>
<td align="center" valign="top"><strong>111</strong></td>
<td align="center" valign="top">130</td>
<td valign="top"><a href="http://adam.goucher.ca/">Quality through Innovation</a></td>
<td valign="top">Adam Goucher</td>
<td valign="top"><a href="https://twitter.com/adamgoucher">adamgoucher</a></td>
</tr>
<tr>
<td align="center" valign="top"><strong>112</strong></td>
<td align="center" valign="top">107</td>
<td valign="top"><a href="http://crazeegeekchick.com/">Crazeegeekchick.com</a></td>
<td valign="top">Dana Coffey</td>
<td valign="top"><a href="https://twitter.com/crazeegeekchick">crazeegeekchick</a></td>
</tr>
<tr>
<td align="center" valign="top"><strong>113</strong></td>
<td align="center" valign="top">160</td>
<td valign="top"><a href="https://faler.wordpress.com/">Wille Faler’s Buzzword Bingo</a></td>
<td valign="top">Wille Faler</td>
<td valign="top"><a href="https://twitter.com/wfaler">wfaler</a></td>
</tr>
<tr>
<td align="center" valign="top"><strong>114</strong></td>
<td align="center" valign="top">126</td>
<td valign="top"><a href="http://blog.davidyack.com/">MrDave’s (David Yack) Blog!</a></td>
<td valign="top">David Yack</td>
<td valign="top"><a href="https://twitter.com/davidyack">davidyack</a></td>
</tr>
<tr>
<td align="center" valign="top"><strong>115</strong></td>
<td align="center" valign="top">118</td>
<td valign="top"><a href="https://scalingsoftwareagility.wordpress.com/">Scaling Software Agility</a></td>
<td valign="top">Dean Leffingwell</td>
<td valign="top"> </td>
</tr>
<tr>
<td align="center" valign="top"><strong>116</strong></td>
<td align="center" valign="top">96</td>
<td valign="top"><a href="http://leadinganswers.typepad.com/">LeadingAnswers</a></td>
<td valign="top">Mike Griffiths</td>
<td valign="top"> </td>
</tr>
<tr>
<td align="center" valign="top"><strong>117</strong></td>
<td align="center" valign="top">166</td>
<td valign="top"><a href="http://www.testingreflections.com/blog/2">Antony Marcano’s Blog</a></td>
<td valign="top">Antony Marcano</td>
<td valign="top"> </td>
</tr>
<tr>
<td align="center" valign="top"><strong>118</strong></td>
<td align="center" valign="top">85</td>
<td valign="top"><a href="http://www.michaelnygard.com/blog/">Wide Awake Developers</a></td>
<td valign="top">Michael Nygard</td>
<td valign="top"><a href="https://twitter.com/mtnygard">mtnygard</a></td>
</tr>
<tr>
<td align="center" valign="top"><strong>119</strong></td>
<td align="center" valign="top">137</td>
<td valign="top"><a href="http://dnicolet1.tripod.com/agile/">Effective Software Development</a></td>
<td valign="top">Dave Nicolette</td>
<td valign="top"><a href="https://twitter.com/davenicolette">davenicolette</a></td>
</tr>
<tr>
<td align="center" valign="top"><strong>120</strong></td>
<td align="center" valign="top">95</td>
<td valign="top"><a href="http://www.yourdonreport.com/">Yourdon Report</a></td>
<td valign="top">Ed Yourdon</td>
<td valign="top"><a href="https://twitter.com/yourdon">yourdon</a></td>
</tr>
<tr>
<td align="center" valign="top"><strong>121</strong></td>
<td align="center" valign="top">26</td>
<td valign="top"><a href="http://www.catonmat.net/">Good coders code, great reuse</a></td>
<td valign="top">Peteris Krumins</td>
<td valign="top"><a href="https://twitter.com/pkrumins">pkrumins</a></td>
</tr>
<tr>
<td align="center" valign="top"><strong>122</strong></td>
<td align="center" valign="top">171</td>
<td valign="top"><a href="http://www.jbrains.ca/blog">Jbrains.ca</a></td>
<td valign="top">J.B. Rainsberger</td>
<td valign="top"><a href="https://twitter.com/jbrains">jbrains</a></td>
</tr>
<tr>
<td align="center" valign="top"><strong>123</strong></td>
<td align="center" valign="top">79</td>
<td valign="top"><a href="https://testertested.blogspot.com/">Tester Tested!</a></td>
<td colspan="2" valign="top">Pradeep Soundararajan</td>
</tr>
<tr>
<td align="center" valign="top"><strong>124</strong></td>
<td align="center" valign="top">91</td>
<td valign="top"><a href="http://www.codemonkeyism.com/">Codemonkeyism</a></td>
<td valign="top">Stephan Schmidt</td>
<td valign="top"><a href="https://twitter.com/codemonkeyism">codemonkeyism</a></td>
</tr>
<tr>
<td align="center" valign="top"><strong>125</strong></td>
<td align="center" valign="top">—</td>
<td valign="top"><a href="http://www.cornetdesign.com/">Corey Foy</a></td>
<td valign="top">Corey Foy</td>
<td valign="top"><a href="https://twitter.com/cory_foy">cory_foy</a></td>
</tr>
<tr>
<td align="center" valign="top"><strong>126</strong></td>
<td align="center" valign="top">146</td>
<td valign="top"><a href="http://www.wrike.com/projectmanagement.htm">Project Management 2.0</a></td>
<td valign="top">Andrew Filev</td>
<td valign="top"><a href="https://twitter.com/andrewsthoughts">andrewsthoughts</a></td>
</tr>
<tr>
<td align="center" valign="top"><strong>127</strong></td>
<td align="center" valign="top">149</td>
<td valign="top"><a href="http://www.thoughtclusters.com/">Thought Clusters</a></td>
<td valign="top">Krishna Kumar</td>
<td valign="top"><a href="https://twitter.com/krishami">krishami</a></td>
</tr>
<tr>
<td align="center" valign="top"><strong>128</strong></td>
<td align="center" valign="top">111</td>
<td valign="top"><a href="http://www.focusedperformance.com/blogger.html">Focused Performance</a></td>
<td valign="top">Frank Patrick</td>
<td valign="top"><a href="https://twitter.com/fpatrick">fpatrick</a></td>
</tr>
<tr>
<td align="center" valign="top"><strong>129</strong></td>
<td align="center" valign="top">182</td>
<td valign="top"><a href="https://availagility.wordpress.com/">AvailAgility</a></td>
<td valign="top">Karl Scotland</td>
<td valign="top"><a href="https://twitter.com/kjscotland">kjscotland</a></td>
</tr>
<tr>
<td align="center" valign="top"><strong>130</strong></td>
<td align="center" valign="top">75</td>
<td valign="top"><a href="http://wordaligned.org/">Word Aligned</a></td>
<td valign="top">Thomas Guest</td>
<td valign="top"><a href="https://twitter.com/thomasguest">thomasguest</a></td>
</tr>
<tr>
<td align="center" valign="top"><strong>131</strong></td>
<td align="center" valign="top">86</td>
<td valign="top"><a href="http://www.notesfromatooluser.com/">Notes from a Tool User</a></td>
<td valign="top">Mark Levison</td>
<td valign="top"><a href="https://twitter.com/mlevison">mlevison</a></td>
</tr>
<tr>
<td align="center" valign="top"><strong>132</strong></td>
<td align="center" valign="top">140</td>
<td valign="top"><a href="http://www.techdarkside.com/">Information Technology Dark Side</a></td>
<td valign="top">David Christiansen</td>
<td valign="top"><a href="https://twitter.com/aldos">aldos</a></td>
</tr>
<tr>
<td align="center" valign="top"><strong>133</strong></td>
<td align="center" valign="top">135</td>
<td valign="top"><a href="http://blog.versionone.net/">Agile Chronicles</a></td>
<td valign="top">(various)</td>
<td valign="top"> </td>
</tr>
<tr>
<td align="center" valign="top"><strong>134</strong></td>
<td align="center" valign="top">93</td>
<td valign="top"><a href="http://agileproductdesign.com/blog/">Jeff Patton’s Holistic Product Design &amp; Development</a></td>
<td valign="top">Jeff Patton</td>
<td valign="top"><a href="https://twitter.com/jeffpatton">jeffpatton</a></td>
</tr>
<tr>
<td align="center" valign="top"><strong>135</strong></td>
<td align="center" valign="top">128</td>
<td valign="top"><a href="https://blogs.msdn.com/eric_brechner/">I.M. Wright’s “Hard Code”</a></td>
<td valign="top">Eric Brechner</td>
<td valign="top"> </td>
</tr>
<tr>
<td align="center" valign="top"><strong>136</strong></td>
<td align="center" valign="top">173</td>
<td valign="top"><a href="http://shapingsoftware.com/">Shaping Software</a></td>
<td valign="top">J.D. Meier</td>
<td valign="top"> </td>
</tr>
<tr>
<td align="center" valign="top"><strong>137</strong></td>
<td align="center" valign="top">139</td>
<td valign="top"><a href="https://it.toolbox.com/blogs/madgreek/">Enterprise Architecture &amp; Other Enterprise Topics</a></td>
<td valign="top">Mike Kavis</td>
<td valign="top"><a href="https://twitter.com/madgreek65">madgreek65</a></td>
</tr>
<tr>
<td align="center" valign="top"><strong>138</strong></td>
<td align="center" valign="top">56</td>
<td valign="top"><a href="http://blog.davidchelimsky.net/">David Chelimsky</a></td>
<td valign="top">David Chelimsky</td>
<td valign="top"><a href="https://twitter.com/dchelimsky">dchelimsky</a></td>
</tr>
<tr>
<td align="center" valign="top"><strong>139</strong></td>
<td align="center" valign="top">144</td>
<td valign="top"><a href="http://blog.dhananjaynene.com/">/var/log/mind</a></td>
<td valign="top">Dhananjay Nene</td>
<td valign="top"><a href="https://twitter.com/dnene">dnene</a></td>
</tr>
<tr>
<td align="center" valign="top"><strong>140</strong></td>
<td align="center" valign="top">158</td>
<td valign="top"><a href="http://blog.scottbellware.com/">Scott Bellware</a></td>
<td valign="top">Scott Bellware</td>
<td valign="top"><a href="https://twitter.com/bellware">bellware</a></td>
</tr>
<tr>
<td align="center" valign="top"><strong>141</strong></td>
<td align="center" valign="top">—</td>
<td valign="top"><a href="https://peripateticaxiom.blogspot.com/">Peripatetic Axiom</a></td>
<td valign="top">Keith Braithwaite</td>
<td valign="top"><a href="https://twitter.com/keithb_b">keithb_b</a></td>
</tr>
<tr>
<td align="center" valign="top"><strong>142</strong></td>
<td align="center" valign="top">161</td>
<td valign="top"><a href="http://www.netobjectives.com/blog">NetObjectives</a></td>
<td valign="top">(various)</td>
<td valign="top"> </td>
</tr>
<tr>
<td align="center" valign="top"><strong>143</strong></td>
<td align="center" valign="top">—</td>
<td valign="top"><a href="http://techdistrict.kirkk.com/">@Kirkk.com</a></td>
<td valign="top">Kirk Knoernschild</td>
<td valign="top"><a href="https://www.twitter.com/pragkirk">pragkirk</a></td>
</tr>
<tr>
<td align="center" valign="top"><strong>144</strong></td>
<td align="center" valign="top">155</td>
<td valign="top"><a href="http://blog.8thlight.com/">8th Light Blog</a></td>
<td valign="top">(various)</td>
<td valign="top"> </td>
</tr>
<tr>
<td align="center" valign="top"><strong>145</strong></td>
<td align="center" valign="top">153</td>
<td valign="top"><a href="https://blogs.msdn.com/steverowe/">Steve Rowe’s Blog</a></td>
<td valign="top">Steve Rowe</td>
<td valign="top"><a href="https://twitter.com/steve_rowe">steve_rowe</a></td>
</tr>
<tr>
<td align="center" valign="top"><strong>146</strong></td>
<td align="center" valign="top">97</td>
<td valign="top"><a href="http://silkandspinach.net/">Silk and Spinach</a></td>
<td valign="top">Kevin Rutherford</td>
<td valign="top"><a href="https://twitter.com/kevinrutherford">kevinrutherford</a></td>
</tr>
<tr>
<td align="center" valign="top"><strong>147</strong></td>
<td align="center" valign="top">138</td>
<td valign="top"><a href="https://pierg.wordpress.com/">PierG</a></td>
<td valign="top">Piergiorgio Grossi</td>
<td valign="top"><a href="https://twitter.com/pierg">pierg</a></td>
</tr>
<tr>
<td align="center" valign="top"><strong>148</strong></td>
<td align="center" valign="top">151</td>
<td valign="top"><a href="http://swizec.com/">Cthulhu and Other Crazies</a></td>
<td valign="top">Swizec</td>
<td valign="top"><a href="https://twitter.com/swizec">swizec</a></td>
</tr>
<tr>
<td align="center" valign="top"><strong>149</strong></td>
<td align="center" valign="top">152</td>
<td valign="top"><a href="http://www.m3p.co.uk/blog">Steve Freeman</a></td>
<td valign="top">Steve Freeman</td>
<td valign="top"> </td>
</tr>
<tr>
<td align="center" valign="top"><strong>150</strong></td>
<td align="center" valign="top">176</td>
<td valign="top"><a href="http://me.andering.com/">Me.Andering</a></td>
<td valign="top">Willem van den Ende</td>
<td valign="top"><a href="https://twitter.com/most_alive">most_alive</a></td>
</tr>
<tr>
<td align="center" valign="top"><strong>151</strong></td>
<td align="center" valign="top">159</td>
<td valign="top"><a href="http://blog.fedecarg.com/">fede.carg ( blog )</a></td>
<td valign="top">Federico Cargnelutti</td>
<td valign="top"><a href="https://twitter.com/fedecarg">fedecarg</a></td>
</tr>
<tr>
<td align="center" valign="top"><strong>152</strong></td>
<td align="center" valign="top">174</td>
<td valign="top"><a href="http://edgibbs.com/">Musings of a Software Development Manager</a></td>
<td valign="top">Ed Gibbs</td>
<td valign="top"> </td>
</tr>
<tr>
<td align="center" valign="top"><strong>153</strong></td>
<td align="center" valign="top">147</td>
<td valign="top"><a href="http://requirements.seilevel.com/blog/">Requirements Defined</a></td>
<td valign="top">(various)</td>
<td valign="top"><a href="https://twitter.com/seilevel">seilevel</a></td>
</tr>
<tr>
<td align="center" valign="top"><strong>154</strong></td>
<td align="center" valign="top">112</td>
<td valign="top"><a href="http://agilethinking.net/blog/">Agile Thoughts</a></td>
<td valign="top">Tobias Mayer</td>
<td valign="top"><a href="https://twitter.com/tobiasgmayer">tobiasgmayer</a></td>
</tr>
<tr>
<td align="center" valign="top"><strong>155</strong></td>
<td align="center" valign="top">163</td>
<td valign="top"><a href="http://chrissterling.gettingagile.com/">Chris Sterling’s Blog</a></td>
<td valign="top">Chris Sterling</td>
<td valign="top"><a href="https://twitter.com/csterwa">csterwa</a></td>
</tr>
<tr>
<td align="center" valign="top"><strong>156</strong></td>
<td align="center" valign="top">190</td>
<td valign="top"><a href="http://www.agileinaction.com/">Agile in Action</a></td>
<td valign="top">Simon Baker</td>
<td valign="top"><a href="https://twitter.com/energizr">energizr</a></td>
</tr>
<tr>
<td align="center" valign="top"><strong>157</strong></td>
<td align="center" valign="top">103</td>
<td valign="top"><a href="http://www.sunpig.com/martin/">Legends of the Sun Pig</a></td>
<td valign="top">Martin Sutherland</td>
<td valign="top"><a href="https://twitter.com/sunpig">sunpig</a></td>
</tr>
<tr>
<td align="center" valign="top"><strong>158</strong></td>
<td align="center" valign="top">134</td>
<td valign="top"><a href="http://blog.gdinwiddie.com/">George Dinwiddie’s Blog</a></td>
<td valign="top">George Dinwiddie</td>
<td valign="top"><a href="https://twitter.com/gdinwiddie">gdinwiddie</a></td>
</tr>
<tr>
<td align="center" valign="top"><strong>159</strong></td>
<td align="center" valign="top">—</td>
<td valign="top"><a href="http://manicprogrammer.com/cs/blogs/willeke/">Rediscovering the Obvious</a></td>
<td valign="top">Willeke</td>
<td valign="top"><a href="https://twitter.com/erwilleke">erwilleke</a></td>
</tr>
<tr>
<td align="center" valign="top"><strong>160</strong></td>
<td align="center" valign="top">141</td>
<td valign="top"><a href="http://agileartisans.com/">Agile Artisans</a></td>
<td valign="top">Jared Richardson</td>
<td valign="top"><a href="https://twitter.com/jaredrichardson">jaredrichardson</a></td>
</tr>
<tr>
<td align="center" valign="top"><strong>161</strong></td>
<td align="center" valign="top">—</td>
<td valign="top"><a href="https://lithespeed.blogspot.com/">LitheSpeed’s LitheBlog</a></td>
<td valign="top">(various)</td>
<td valign="top"> </td>
</tr>
<tr>
<td align="center" valign="top"><strong>162</strong></td>
<td align="center" valign="top">177</td>
<td valign="top"><a href="http://www.intergen.co.nz/Blog/">Intergen Blog</a></td>
<td valign="top">(various)</td>
<td valign="top"><a href="https://www.twitter.com/teamintergen">teamintergen</a></td>
</tr>
<tr>
<td align="center" valign="top"><strong>163</strong></td>
<td align="center" valign="top">123</td>
<td valign="top"><a href="https://shrinik.blogspot.com/">Thinking Tester</a></td>
<td valign="top">Shrini Kulkarni</td>
<td valign="top"><a href="https://twitter.com/shrinik">shrinik</a></td>
</tr>
<tr>
<td align="center" valign="top"><strong>164</strong></td>
<td align="center" valign="top">—</td>
<td valign="top"><a href="http://www.futureworksconsulting.com/blog/">Partnership &amp; Possibilities</a></td>
<td valign="top">Diana Larsen</td>
<td valign="top"><a href="https://twitter.com/dianaofportland">dianaofportland</a></td>
</tr>
<tr>
<td align="center" valign="top"><strong>165</strong></td>
<td align="center" valign="top">—</td>
<td valign="top"><a href="https://agileconsortium.blogspot.com/">Agile &amp; Business</a></td>
<td valign="top">Joe Little</td>
<td valign="top"><a href="https://twitter.com/jhlittle">jhlittle</a></td>
</tr>
<tr>
<td align="center" valign="top"><strong>166</strong></td>
<td align="center" valign="top">191</td>
<td valign="top"><a href="https://ctotodevelopers.blogspot.com/">On Software Development, Agile, Startups, and Social Networking</a></td>
<td valign="top">Isaac Sacolick</td>
<td valign="top"><a href="https://twitter.com/nyike">nyike</a></td>
</tr>
<tr>
<td align="center" valign="top"><strong>167</strong></td>
<td align="center" valign="top">127</td>
<td valign="top"><a href="http://jonathanbabcock.com/">Jonathan Babcock</a></td>
<td valign="top">Jonathan Babcock</td>
<td valign="top"><a href="https://twitter.com/jonbab1">jonbab1</a></td>
</tr>
<tr>
<td align="center" valign="top"><strong>168</strong></td>
<td align="center" valign="top">154</td>
<td valign="top"><a href="http://www.agilegamedevelopment.com/blog.html">Agile Game Development</a></td>
<td valign="top">Clinton Keith</td>
<td valign="top"> </td>
</tr>
<tr>
<td align="center" valign="top"><strong>169</strong></td>
<td align="center" valign="top">—</td>
<td valign="top"><a href="http://blog.robbowley.net/">Rob Bowley</a></td>
<td valign="top">Rob Bowley</td>
<td valign="top"><a href="https://twitter.com/robbowley">robbowley</a></td>
</tr>
<tr>
<td align="center" valign="top"><strong>170</strong></td>
<td align="center" valign="top">131</td>
<td valign="top"><a href="https://cauvin.blogspot.com/">Cauvin</a></td>
<td valign="top">Roger L. Cauvin</td>
<td valign="top"><a href="https://twitter.com/rcauvin">rcauvin</a></td>
</tr>
<tr>
<td align="center" valign="top"><strong>171</strong></td>
<td align="center" valign="top">193</td>
<td valign="top"><a href="https://weblogs.asp.net/wallen/">Wayne Allen’s Weblog</a></td>
<td valign="top">Wayne Allen</td>
<td valign="top"> </td>
</tr>
<tr>
<td align="center" valign="top"><strong>172</strong></td>
<td align="center" valign="top">180</td>
<td valign="top"><a href="https://chrismcmahonsblog.blogspot.com/">Chris McMahon’s Blog</a></td>
<td valign="top">Chris McMahon</td>
<td valign="top"><a href="https://twitter.com/cmcmahon">cmcmahon</a></td>
</tr>
<tr>
<td align="center" valign="top"><strong>173</strong></td>
<td align="center" valign="top">181</td>
<td valign="top"><a href="https://itscommonsensestupid.blogspot.com/">It’s Common Sense, Stupid</a></td>
<td valign="top">Soon Hui Ngu</td>
<td valign="top"> </td>
</tr>
<tr>
<td align="center" valign="top"><strong>174</strong></td>
<td align="center" valign="top">—</td>
<td valign="top"><a href="http://www.sanderhoogendoorn.com/">Sander Hoogendoorn</a></td>
<td valign="top">Sander Hoogendoorn</td>
<td valign="top"><a href="https://twitter.com/aahoogendoorn">aahoogendoorn</a></td>
</tr>
<tr>
<td align="center" valign="top"><strong>175</strong></td>
<td align="center" valign="top">136</td>
<td valign="top"><a href="http://www.jcooney.net/">Jcooney.NET</a></td>
<td valign="top">Joseph Cooney</td>
<td valign="top"><a href="https://twitter.com/josephcooney">josephcooney</a></td>
</tr>
<tr>
<td align="center" valign="top"><strong>176</strong></td>
<td align="center" valign="top">—</td>
<td valign="top"><a href="http://blog.mattwynne.net/">Tea-Driven Development</a></td>
<td valign="top">Matt Wynne</td>
<td valign="top"> </td>
</tr>
<tr>
<td align="center" valign="top"><strong>177</strong></td>
<td align="center" valign="top">120</td>
<td valign="top"><a href="http://www.ytechie.com/">Ytechie</a></td>
<td valign="top">Jason Young</td>
<td valign="top"><a href="https://twitter.com/ytechie">ytechie</a></td>
</tr>
<tr>
<td align="center" valign="top"><strong>178</strong></td>
<td align="center" valign="top">162</td>
<td valign="top"><a href="http://jimmynilsson.com/blog/">Jimmy Nilsson’s Blog</a></td>
<td valign="top">Jimmy Nilsson</td>
<td valign="top"><a href="https://twitter.com/jimmynilsson">jimmynilsson</a></td>
</tr>
<tr>
<td align="center" valign="top"><strong>179</strong></td>
<td align="center" valign="top">106</td>
<td valign="top"><a href="http://www.agilecmmi.com/">Agile CMMI Blog</a></td>
<td valign="top">Hillel Glazer</td>
<td valign="top"><a href="https://twitter.com/hi11e1">hi11e1</a></td>
</tr>
<tr>
<td align="center" valign="top"><strong>180</strong></td>
<td align="center" valign="top">183</td>
<td valign="top"><a href="http://www.renaissancesoftware.net/blog/">James Grenning’s Blog</a></td>
<td valign="top">James Grenning</td>
<td valign="top"><a href="https://twitter.com/jwgrenning">jwgrenning</a></td>
</tr>
<tr>
<td align="center" valign="top"><strong>181</strong></td>
<td align="center" valign="top">186</td>
<td valign="top"><a href="http://runningagile.com/">Running Agile</a></td>
<td valign="top">Christophe Louvion</td>
<td valign="top"> </td>
</tr>
<tr>
<td align="center" valign="top"><strong>182</strong></td>
<td align="center" valign="top">170</td>
<td valign="top"><a href="http://www.wirfs-brock.com/rebeccasblog.html">Rebecca’s Blog</a></td>
<td valign="top">Rebecca Wirfs-Brock</td>
<td valign="top"> </td>
</tr>
<tr>
<td align="center" valign="top"><strong>183</strong></td>
<td align="center" valign="top">169</td>
<td valign="top"><a href="http://www.spreetree.net/blog/">Engineering Game Development</a></td>
<td valign="top">Lee Winder</td>
<td valign="top"><a href="https://twitter.com/spreetree">spreetree</a></td>
</tr>
<tr>
<td align="center" valign="top"><strong>184</strong></td>
<td align="center" valign="top">198</td>
<td valign="top"><a href="https://simplearchitectures.blogspot.com/">Simple Architectures for Complex Enterprises</a></td>
<td valign="top">Roger Sessions</td>
<td valign="top"><a href="https://twitter.com/rsessions">rsessions</a></td>
</tr>
<tr>
<td align="center" valign="top"><strong>185</strong></td>
<td align="center" valign="top">133</td>
<td valign="top"><a href="https://bartoszmilewski.wordpress.com/">Bartosz Milewski’s Programming Cafe</a></td>
<td valign="top">Bartosz Milewski</td>
<td valign="top"><a href="https://twitter.com/BartoszMilewski">BartoszMilewski</a></td>
</tr>
<tr>
<td align="center" valign="top"><strong>186</strong></td>
<td align="center" valign="top">—</td>
<td valign="top"><a href="https://ivarjacobson.wordpress.com/">Ivar Jacobson’s Blog</a></td>
<td valign="top">Ivar Jacobson</td>
<td valign="top"><a href="https://twitter.com/ivarjacobson">ivarjacobson</a></td>
</tr>
<tr>
<td align="center" valign="top"><strong>187</strong></td>
<td align="center" valign="top">165</td>
<td valign="top"><a href="http://enterprisearchitect.typepad.com/ea/">Technology Architecture &amp; Projects</a></td>
<td valign="top">Robert McIlree</td>
<td valign="top"><a href="https://twitter.com/rmcilree">rmcilree</a></td>
</tr>
<tr>
<td align="center" valign="top"><strong>188</strong></td>
<td align="center" valign="top">—</td>
<td valign="top"><a href="https://drunkenpm.blogspot.com/">DrunkenPM</a></td>
<td valign="top">Dave Prior</td>
<td valign="top"><a href="https://twitter.com/mrsungo">mrsungo</a></td>
</tr>
<tr>
<td align="center" valign="top"><strong>189</strong></td>
<td align="center" valign="top">—</td>
<td valign="top"><a href="http://www.softwaresweatshop.com/">Software Sweatshop</a></td>
<td valign="top">Raza Imam</td>
<td valign="top"> </td>
</tr>
<tr>
<td align="center" valign="top"><strong>190</strong></td>
<td align="center" valign="top">—</td>
<td valign="top"><a href="https://falkayn.blogspot.com/">Falkayn’s Nest</a></td>
<td valign="top">Angus McDonald</td>
<td valign="top"><a href="https://twitter.com/falkayn">falkayn</a></td>
</tr>
<tr>
<td align="center" valign="top"><strong>191</strong></td>
<td align="center" valign="top">84</td>
<td valign="top"><a href="http://grok-code.com/">GrokCode</a></td>
<td valign="top">Jess</td>
<td valign="top"><a href="https://twitter.com/grokcode">grokcode</a></td>
</tr>
<tr>
<td align="center" valign="top"><strong>192</strong></td>
<td align="center" valign="top">122</td>
<td valign="top"><a href="http://hicks-wright.net/">Hicks-Wright.net</a></td>
<td valign="top">Tyler Griffin Hicks-Wright</td>
<td valign="top"> </td>
</tr>
<tr>
<td align="center" valign="top"><strong>193</strong></td>
<td align="center" valign="top">167</td>
<td valign="top"><a href="http://andrewtokeley.net/">Andrew Tokeley</a></td>
<td valign="top">Andrew Tokeley</td>
<td valign="top"> </td>
</tr>
<tr>
<td align="center" valign="top"><strong>194</strong></td>
<td align="center" valign="top">157</td>
<td valign="top"><a href="https://damonpoole.blogspot.com/">Agile Development Thoughts</a></td>
<td valign="top">Damon Poole</td>
<td valign="top"><a href="https://twitter.com/damonpoole">damonpoole</a></td>
</tr>
<tr>
<td align="center" valign="top"><strong>195</strong></td>
<td align="center" valign="top">179</td>
<td valign="top"><a href="http://mult.ifario.us/a">Mult.ifario.us</a></td>
<td valign="top">Paul R. Brown</td>
<td valign="top"><a href="https://twitter.com/paulrbrown">paulrbrown</a></td>
</tr>
<tr>
<td align="center" valign="top"><strong>196</strong></td>
<td align="center" valign="top">—</td>
<td valign="top"><a href="http://mattorama.net/blog/">Matt O’ Rama</a></td>
<td valign="top">Matt Grommes</td>
<td valign="top"><a href="https://twitter.com/mattgrommes">mattgrommes</a></td>
</tr>
<tr>
<td align="center" valign="top"><strong>197</strong></td>
<td align="center" valign="top">194</td>
<td valign="top"><a href="http://www.daveliebreich.com/blog/">A Test Guy</a></td>
<td valign="top">Dave Liebreich</td>
<td valign="top"><a href="https://twitter.com/atestguy">atestguy</a></td>
</tr>
<tr>
<td align="center" valign="top"><strong>198</strong></td>
<td align="center" valign="top">150</td>
<td valign="top"><a href="http://www.richarddurnall.com/">Richard Durnall</a></td>
<td valign="top">Richard Durnall</td>
<td valign="top"> </td>
</tr>
<tr>
<td align="center" valign="top"><strong>199</strong></td>
<td align="center" valign="top">—</td>
<td valign="top"><a href="http://www.pols.co.uk/blog/">Pols Consulting</a></td>
<td valign="top">Andy Pols</td>
<td valign="top"><a href="https://twitter.com/andy_pols">andy_pols</a></td>
</tr>
<tr>
<td align="center" valign="top"><strong>200</strong></td>
<td align="center" valign="top">—</td>
<td valign="top"><a href="https://agileleadership.blogspot.com/">On Agile Leadership</a></td>
<td valign="top">Manfred Lange</td>
<td valign="top"> </td>
</tr>
</tbody>
</table>
<p></p>
<p align="center"><img alt="image placeholder" >
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/17391.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/8031.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/556.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/3684.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/12192.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/2936.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
</ul>
</div></div>
<div id="post-ratings-1092" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="ba90d3eb5c">
<img alt="image placeholder" >
<meta itemprop="headline" content="Top 200的全球开发者BLOG">
<meta itemprop="description" content="本文源自这里，文中列出了全球前200名的开发者的BLOG。有的可能你很熟悉，有的你可能还不知道。这些BLOG的排名通过查看，Google PageRank, Technorati Authority, Alexa Rank, Google links, Twitter Grader Rank等等，形成的综合排名。如果你对此感兴趣的话，你可以看看这篇文章——《如何制作一个Blog排名》

下面是...">
<meta itemprop="datePublished" content="2009-06-30T10:39:49+08:00">
<meta itemprop="dateModified" content="2009-06-30T10:39:49+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/1092.html">
<meta itemprop="author" content="陈皓">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/1092.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="3">
<meta itemprop="ratingCount" content="5">
</div>
</div>
<div id="post-ratings-1092-loading" class="post-ratings-loading">
<img alt="image placeholder" >
 ]]></content>
<pubDate>2009-06-30T10:39:49+08:00</pubDate>
<guid>https://coolshell.cn/articles/1092.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ Ksplice Uptrack — Ubuntu更新不用重启 ]]></title>
<link>https://coolshell.cn/articles/1097.html</link>
<content><![CDATA[ 
<p>Ksplice是马萨诸塞州坎布里奇的一家新兴厂商，它开发的软件可以帮助计算机用户保持其操作系统的安全性而且不需要经常麻烦的重新启动就可升级操作系统，Ksplice被评为麻省理工10万美元创业竞赛的6个入围项目之一。</p>
<p>Ksplice是Web/IT类冠军，它将与其他5个类别的入围者争夺总奖金。该公司是去年由四个麻省理工学院校友成立的，</p>
<p>Ksplice目前支持Linux内核的更新，但它声称其免重启更新技术工作在目标代码层，可以适用于任何操作系统或者用户空间应用。该公司说，其技术对安全更新来说特别有益，可以解决因不方便重启而使安全更新不能及时生效的问题。</p>
<p>昨日他们在剑桥发布了Ksplice解决方案，运用这种技术将实现无缝更新，从企业软件、系统补丁乃至Linux内核的更新都不需要重启就可以直接完成，改变了数十年来计算机运行最新代码需要重启的麻烦问题。</p>
<p>相关链接：</p>
<ul>
<li>Ksplice Uptrack 主页在这里：<a href="https://www.ksplice.com/uptrack/">http://www.ksplice.com/uptrack/</a>
</li>
<li>安装指南在这里：<a href="https://www.ksplice.com/uptrack/download">http://www.ksplice.com/uptrack/download</a>
</li>
</ul>
<p></p>
<p align="center"><img alt="image placeholder" >
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/4826.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/501.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/19219.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/18654.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/18360.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/17998.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
</ul>
</div></div>
<div id="post-ratings-1097" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="664902c327">
<img alt="image placeholder" >
<meta itemprop="headline" content="Ksplice Uptrack — Ubuntu更新不用重启">
<meta itemprop="description" content="Ksplice是马萨诸塞州坎布里奇的一家新兴厂商，它开发的软件可以帮助计算机用户保持其操作系统的安全性而且不需要经常麻烦的重新启动就可升级操作系统，Ksplice被评为麻省理工10万美元创业竞赛的6个入围项目之一。

Ksplice是Web/IT类冠军，它将与其他5个类别的入围者争夺总奖金。该公司是去年由四个麻省理工学院校友成立的，

Ksplice目前支持Linux内核的更新，但它声称其...">
<meta itemprop="datePublished" content="2009-06-30T10:53:44+08:00">
<meta itemprop="dateModified" content="2009-06-30T10:54:07+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/1097.html">
<meta itemprop="author" content="陈皓">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/1097.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="3">
<meta itemprop="ratingCount" content="4">
</div>
</div>
<div id="post-ratings-1097-loading" class="post-ratings-loading">
<img alt="image placeholder" >
 ]]></content>
<pubDate>2009-06-30T10:53:44+08:00</pubDate>
<guid>https://coolshell.cn/articles/1097.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ 漫画：程序员的一生 ]]></title>
<link>https://coolshell.cn/articles/1103.html</link>
<content><![CDATA[ 
<p><a href="https://coolshell.cn/wp-content/uploads/2009/06/programmer-life.jpg"></a> <a href="https://coolshell.cn/wp-content/uploads/2009/06/programmer-life.jpg"><img alt="image placeholder" >
<p align="center"><img alt="image placeholder" >
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/21589.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/20977.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/20765.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/20276.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/19612.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/19464.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
</ul>
</div></div>
<div id="post-ratings-1103" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="59d43bea92">
<img alt="image placeholder" >
<meta itemprop="headline" content="漫画：程序员的一生">
<meta itemprop="description" content=" ">
<meta itemprop="datePublished" content="2009-06-30T16:57:30+08:00">
<meta itemprop="dateModified" content="2009-06-30T16:57:30+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/1103.html">
<meta itemprop="author" content="陈皓">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/1103.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="4.59">
<meta itemprop="ratingCount" content="34">
</div>
</div>
<div id="post-ratings-1103-loading" class="post-ratings-loading">
<img alt="image placeholder" >
 ]]></content>
<pubDate>2009-06-30T16:57:30+08:00</pubDate>
<guid>https://coolshell.cn/articles/1103.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ Java构造时成员初始化的陷阱 ]]></title>
<link>https://coolshell.cn/articles/1106.html</link>
<content><![CDATA[ 
<p>让我们先来看两个类：Base和Derived类。注意其中的whenAmISet成员变量，和方法preProcess()</p>
<p></p>
<pre data-enlighter-language="java" class="EnlighterJSRAW">public class Base
{
    Base() {
        preProcess();
    }

    void preProcess() {}
}</pre>
<p></p>
<pre data-enlighter-language="java" class="EnlighterJSRAW">public class Derived extends Base
{
    public String whenAmISet = "set when declared";

    @Override void preProcess()
    {
        whenAmISet = "set in preProcess()";
    }
}
</pre>
<p>如果我们构造一个子类实例，那么，whenAmISet 的值会是什么呢？</p>
<p><span id="more-1106"></span></p>
<p></p>
<pre data-enlighter-language="java" class="EnlighterJSRAW">public class Main
{
    public static void main(String[] args)
    {
        Derived d = new Derived();
        System.out.println( d.whenAmISet );
    }
}
</pre>
<p>再续继往下阅读之前，请先给自己一些时间想一下上面的这段程序的输出是什么？是的，这看起来的确相当简单，甚至不需要编译和运行上面的代码，我们也应该知道其答案，那么，你觉得你知道答案吗？你确定你的答案正确吗？</p>
<p>很多人都会觉得那段程序的输出应该是“set in preProcess()”，这是因为当子类Derived 的构造函数被调用时，其会隐晦地调用其基类Base的构造函数（通过super()函数），于是基类Base的构造函数会调用preProcess() 函数，因为这个类的实例是Derived的，而且在子类Derived中对这个函数使用了override关键字，所以，实际上调用到的是：Derived.preProcess()，而这个方法设置了whenAmISet 成员变量的值为：“set in preProcess()”。</p>
<p>当然，上面的结论是错误的。如果你编译并运行这个程序，你会发现，程序实际输出的是“set when declared ”。怎么为这样呢？难道是基类Base 的preProcess() 方法被调用啦？也不是！你可以在基类的preProcess中输出点什么看看，你会发现程序运行时，Base.preProcess()并没有被调用到（不然这对于Java所有的应用程序将会是一个极具灾难性的Bug）。</p>
<p>虽然上面的结论是错误的，但推导过程是合理的，只是不完整，下面是整个运行的流程：</p>
<ol>
<li>进入Derived 构造函数。</li>
<li>Derived 成员变量的内存被分配。</li>
<li>Base 构造函数被隐含调用。</li>
<li>Base 构造函数调用preProcess()。</li>
<li>Derived 的preProcess 设置whenAmISet 值为 “set in preProcess()”。</li>
<li>Derived 的成员变量初始化被调用。</li>
<li>执行Derived 构造函数体。</li>
</ol>
<p>等一等，这怎么可能？在第6步，Derived 成员的初始化居然在 preProcess() 调用之后？是的，正是这样，我们不能让成员变量的声明和初始化变成一个原子操作，虽然在Java中我们可以把其写在一起，让其看上去像是声明和初始化一体。但这只是假象，<strong><span style="color: #800000;">我们的错误就在于我们把Java中的声明和初始化看成了一体</span></strong>。<strong>在C++的世界中，C++并不支持成员变量在声明的时候进行初始化，其需要你在构造函数中显式的初始化其成员变量的值，看起来很土，但其实C++用心良苦。</strong></p>
<p>在面向对象的世界中，因为程序以对象的形式出现，导致了我们对程序执行的顺序雾里看花。所以，<strong>在面向对象的世界中，程序执行的顺序相当的重要</strong>。</p>
<p>下面是对上面各个步骤的逐条解释。</p>
<ol>
<li>进入构造函数。</li>
<li>为成员变量分配内存。</li>
<li>除非你显式地调用super()，否则Java 会在子类的构造函数最前面偷偷地插入super() 。</li>
<li>调用父类构造函数。</li>
<li>调用preProcess，因为被子类override，所以调用的是子类的。</li>
<li>于是，初始化发生在了preProcess()之后。这是因为，Java需要保证父类的初始化早于子类的成员初始化，否则，在子类中使用父类的成员变量就会出现问题。</li>
<li>正式执行子类的构造函数（当然这是一个空函数，虽然我们没有声明）。</li>
</ol>
<p>你可以查看《Java语言的规格说明书》中的 <a href="http://java.sun.com/docs/books/jls/third_edition/html/execution.html#12.5">相关章节</a> 来了解更多的Java创建对象时的细节。</p>
<p>C++的程序员应该都知道，在C++的世界中在“构造函数中调用虚函数”是不行的，Effective C++ 条款9：Never call virtual functions during construction or destruction，Scott Meyers已经解释得很详细了。</p>
<p>在语言设计的时候，“<strong>在构造函数中调用虚函数</strong>”是个两难的问题。</p>
<ol>
<li>如果调用的是父类的函数的话，这个有点违反虚函数的定义。</li>
<li>如果调用的是子类的函数的话，这可能产生问题的：因为在构造子类对象的时候，首先调用父类的构造函数，而这时候如果去调用子类的函数，由于子类还没有构造完成，子类的成员尚未初始化，这么做显然是不安全的。</li>
</ol>
<p>C++选择了第一种，而Java选择了第二种。</p>
<ul>
<li>C++类的设计相对比较简陋，通过虚函数表来实现，缺少类的元信息。</li>
<li>而Java类的则显得比较完整，有super指针来导航到父类。</li>
</ul>
<p>最后，需要向大家推荐一本书，Joshua Bloch 和 Neal Gafter 写的 <a href="https://www.amazon.com/gp/product/032133678X?ie=UTF8&amp;tag=billthelizard-20&amp;linkCode=as2&amp;camp=1789&amp;creative=9325&amp;creativeASIN=032133678X">Java Puzzlers: Traps, Pitfalls, and Corner Cases</a>，中文版《<a href="http://www.china-pub.com/28310&amp;ref=ps" target="_blank"><span>JAVA</span>解惑</a>》。</p>
<p>（全文完）</p>
<p align="center"><img alt="image placeholder" >
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/20845.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/18360.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/11541.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/11454.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/11175.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/9703.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
</ul>
</div></div>
<div id="post-ratings-1106" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="c2123bdbad">
<img alt="image placeholder" >
<meta itemprop="headline" content="Java构造时成员初始化的陷阱">
<meta itemprop="description" content="让我们先来看两个类：Base和Derived类。注意其中的whenAmISet成员变量，和方法preProcess()

[java]
public class Base
{
    Base() {
        preProcess();
    }

    void preProcess() {}
}[/java]

[java]
public class De...">
<meta itemprop="datePublished" content="2009-07-03T14:31:49+08:00">
<meta itemprop="dateModified" content="2009-07-06T07:36:36+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/1106.html">
<meta itemprop="author" content="陈皓">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/1106.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="4.07">
<meta itemprop="ratingCount" content="14">
</div>
</div>
<div id="post-ratings-1106-loading" class="post-ratings-loading">
<img alt="image placeholder" >
 ]]></content>
<pubDate>2009-07-03T14:31:49+08:00</pubDate>
<guid>https://coolshell.cn/articles/1106.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ 与Martin Fowler关于敏捷方法的问答 ]]></title>
<link>https://coolshell.cn/articles/1113.html</link>
<content><![CDATA[ 
<p>2009年6月23日，Martin Fowler到公司访问，与我们开了一个小型座谈会并顺便拜访了他在ThoughtWorks的同事们。</p>
<p style="text-align: center;"><img alt="image placeholder" >
<p>以下是座谈的内容：</p>
<p><span id="more-1113"></span></p>
<p><strong>1、如何在常规业务中应用敏捷方法？ </strong></p>
<p>常规业务（Business As Usual）是指使公司业务正常运营而进行的一些日常业务活动，对于IT部门而言则包括系统维护、技术支持以及应用更改。这些工作相对于独立的软件项目而言即琐碎又零散，但又是不可或缺的。“如何在常规业务中应用敏捷方法？”，这是我们向Martin提出的第一个问题。Martin阐述道，首先需要澄清一下对项目的定义，传统的项目运作方式是集中一批业务人员、开发人员和管理人员进行产品开发，开发完成后将产品交付系统运行和支持部门，项目也就随之结束了。在敏捷方法中，项目是一个持续性的过程，系统随着业务的需要不断地更改和重构，参与项目的人员也相应地在不断地增加或者减少。笔者的理解是只要系统仍在支持业务运营，项目就不会结束，因为业务几乎不可能不变更，并且必要的重构也不可避免，对于ThoughtWorks的顾问们来说这意味着他们和客户的业务关系也不会结束，呵呵，双赢的策略！</p>
<p><strong>2、集中式办公和分布式办公 </strong></p>
<p>Martin强烈反对项目成员分散式办公，甚至觉得如果你需要业务人员每天到你的办公室来访问你，那简直是不可接受的，至少你应该每天都去拜访他们。“It is a shame if the business stakeholders need to come to your office every day”大意如此。但是现实却是，对于很多公司而言，将业务经理、项目经理、业务分析人员、开发人员和测试人员都集中在一个办公室简直就是一件不可能完成的任务。笔者目前所在的项目有三个团队，一个在悉尼，两个在墨尔本，每周进行四次远程视频会议，同时通过使用电话、即时消息系统、电子邮件、项目WiKi系统等手段来解决分布办公带来的沟通不及时和信息不透明等问题。Martin最后也不得不承认，很多时候如果实在不能够做到集中式办公，那只有准备好为此付出一定的成本。笔者认为要做到完全的集中式办公可能不太现实，不过可以尽可能在异地团队之间保持相关业务的对等沟通，比如在各个团队中都尽可能安排项目相关的各类角色，如：业务经理、项目经理、开发人员等，让这些人员与在异地的相同职能的人员沟通，然后再将信息在各自的团队内消化和共享，这样的效果也许会好于纯粹的按照职能来分布团队。</p>
<p><strong>3、交叉技能（Cross Skills）</strong></p>
<p>这里主要讲的是BA（Business Analyst 业务分析人员）和QA（Quality Assurance 质量保证人员或测试人员），Martin说在理想的情况下，BA和QA的角色可以合并，开发人员和QA的角色也可以互换。因为BA和QA都需要对系统功能有很清晰全面的了解，他们也是系统测试的主要参与者和鉴定者，他们用来定义系统功能的主要文档是用户故事（Story），而用来测试系统功能的则是功能测试代码，测试人员和开发人员有责任将功能测试代码写得易于阅读，特别是对于BA，如果他们能够象阅读用户故事一样阅读功能测试代码，将会提高他们测试系统的效率和兴趣。这也是在功能测试中使用领域特定语言（Domain Specific Language）的目的，如果BA和QA都能够阅读和使用DSL编写测试代码，那该多好啊！（憧憬中…） 通过让开发人员轮换地担任QA的角色，可以帮助提高测试代码的质量，也可以让开发人员真正从用户的角度来考虑系统功能的设计，还可以建立相互信任、相互尊重（appreciate each others work）的良好氛围。</p>
<p><strong>4、设计和编码 </strong></p>
<p>一位同事谈到对业务模型缺乏了解会导致代码难于理解，有时候即使代码的质量过关并且系统功能都在正常工作，但是系统的设计却和业务模型出现很大的偏差。“ 在实现设计之前，开发人员需要正确理解整个业务模型（The big picture）”，这是被经常提及的解决方法之一。Martin对此却不置可否，当然能够理解整个业务模型是最理想的情况，但是往往很少有人能够做到这一点，即便能够做到，业务模型也会随着时间和具体情况而变更。Martin首先认为设计和编码不是两个分离的过程，开发人员在设计过程中编码，也在编码过程中设计。开发人员在编码的过程中实现自己当前对业务模型的了解，首先让功能模块工作起来（Get it working），同时考虑如何让代码更便于日后的必要的重构，随着时间的推移，开发人员对业务模型的了解会不断清晰和全面，只要代码易于重构，整个系统的设计和实现将会不断地、最终地符合业务模型。</p>
<p><strong>5、公司内部的开源项目，鼓励用户参与产品开发 </strong></p>
<p>很多公司里不同的IT部门可能会重复开发相同功能的产品，这样会导致很大的资源浪费，用户也会面临选择的难题。再者，Martin发现很多IT部门对用户提出的功能需求缺乏足够快的响应速度，主要原因是开发人员资源有限，即使再玩命地工作也不可能在用户的预期时间内处理完本来就很长的功能需求队列。典型的例子是：公司有两个IT部门A和B，A部门需要B部门对邮政编码的Web Service做一个功能更改，而B部门的开发人员正忙于处理n个之前提交的功能需求，所以A部门的需求只能在队列中耐心等待直到B部门有开发人员空闲。如何缩短用户的等待时间？Martin建议如果A部门有开发人员熟悉Web Services，他可以从B部门的源代码库中提取邮政编码Web Service的代码，并且编码实现他需要的功能，完成之后生成代码包提交给B部门审核和测试，通过后就可以将代码合并到代码库中。这样做的优点是：1. 将功能需求由开发部门驱动转变为用户驱动，因为用户是真正了解并需要这个功能的人，所以用户会更为迫切地运用各种手段实现该功能，同时保证功能如其预期的那样运行。 2. 缩短开发周期，如果用户不愿意等待的话他可以立即着手开始功能的实现，而不必等待B部门的人员。3. 有利于公司内部的知识共享和交流，即便A部门的开发人员不熟悉Web Services但是愿意学习，B部门的开发人员可以通过结对编程（Pair Programming）的方法指导对方，待对方上手之后即可返回自己的工作，相对于B部门开发人员由始至终开发整个功能而言，这仍然可以大大缩短整个开发周期。当然，公司内部的开源策略需要一些前提，首先是部门之间应该有共同的知识领域，代码和文档需要版本控制的支持，部门人员能够理解和运用结对编程。</p>
<p><strong>6、选择和运用框架 </strong></p>
<p>“It is like you buying a new PC every 2 years” 当Martin被问道“这么多的应用框架层出不穷，我们该如何选择？”的时候如是回答。每几年我们都会换一台新电脑，是因为新的电脑内存更大，处理速度更快，应用软件也更复杂，要求的系统资源也更多。我们使用框架的目的也是解决业务相关的问题，只要是对业务有利的框架，都值得花一点时间去关注。 Martin鼓励公司允许开发人员占用一定的工作时间来实验新的框架，因为不这样如何能够知道它是否对提升业务价值有帮助。当然框架在生产环境（Production Environment）中的表现是衡量的一个重要标准，因为不经过生产环境中各种复杂情况的检验，很难最终确定框架是否适用。</p>
<p><strong>（<strong>本文系作者原创，请勿用于商业用途</strong>，如转载请注明出自酷壳www.cocre.com）</strong></p>
<p align="center"><img alt="image placeholder" >
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/2622.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/2507.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/4220.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/85.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/343.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/12199.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
</ul>
</div></div>
<div id="post-ratings-1113" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="c97723af94">
<img alt="image placeholder" >
<meta itemprop="headline" content="与Martin Fowler关于敏捷方法的问答">
<meta itemprop="description" content="2009年6月23日，Martin Fowler到公司访问，与我们开了一个小型座谈会并顺便拜访了他在ThoughtWorks的同事们。

以下是座谈的内容：



1、如何在常规业务中应用敏捷方法？ 

常规业务（Business As Usual）是指使公司业务正常运营而进行的一些日常业务活动，对于IT部门而言则包括系统维护、技术支持以及应用更改。这些工作相对于独立的软件项目而言...">
<meta itemprop="datePublished" content="2009-07-05T10:15:01+08:00">
<meta itemprop="dateModified" content="2009-07-06T09:48:02+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/1113.html">
<meta itemprop="author" content="jnj">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/1113.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="3.67">
<meta itemprop="ratingCount" content="6">
</div>
</div>
<div id="post-ratings-1113-loading" class="post-ratings-loading">
<img alt="image placeholder" >
 ]]></content>
<pubDate>2009-07-05T10:15:01+08:00</pubDate>
<guid>https://coolshell.cn/articles/1113.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ 整洁代码的4个提示 ]]></title>
<link>https://coolshell.cn/articles/1095.html</link>
<content><![CDATA[ 
<p>虽然这样的文章非常的多，并且，就算是对于编程新手来说，也是非常的简单和显而见，但是，在我们进行Code Review过程中，我们还是能够看到那些非常混乱的代码，所以，有些时候，你会在想，是不是这样的规则太多了，导致我们的程序员记不住。虽然我们在以前的文章中一遍又一遍的说过（比如：《<a rel="bookmark" href="https://coolshell.cn/articles/1007.html">优质代码的十诫</a>》），千言万语总结一下，无论你用什么样的语言，最最基本的编程原则就是下面这四条。</p>
<p><span id="more-1095"></span></p>
<p><strong>1 – 简短的方法</strong></p>
<p>简单才会易读，简单才会容易，简单才能重用，简单才能保证质量。把一件事搞复杂，是一件简单的事；而把一件事变简单，这则是一件复杂的事。KISS-Keep it Simple Stupid是一种哲学，Do one thing, Do it best也是一种哲学。这些都是在告诉我们，做设计，做产品，不要把所有的东西一下子都考虑进来，否则将会让你的事情变成一团糟，剪不断理还乱，就是这样道理。把复杂的事情，困难的事情，逐步细化，分解成一个一个简单而单一的事情，然后再把他们拼装起来完成一个复杂的事情，是我们如何完成一个巨大并复杂的项目的通用方法。</p>
<p>编程也是这个道理，维护代码的成本会比你创造代码的成本要大得多，所以，一个简短的方法不但可以有利于阅读，维护，重用，同样在进行排错调试测试的时候也能起到巨大的帮助。比如，对于一个简单的方法或函数，单元测试，功能测试，性能测试、代码覆盖，质量保证都能变得相当简单，而这些众多的质量优良的方法最终组成了那质量过硬的最终产品，并让我们在以后的代码不断改进中继续充当重要的作用。</p>
<p><strong>2 – 选择望文知意的直观的变量名和函数名</strong></p>
<p>无论是变量名还是方法名，都不能太长或是太短。一个好的命名，应该是“自解释的”，直观的，望文知意的。通常来说，一个好的命名应该是知道这个变量/方法要干什么事情，比如GetComputerName()，isAdmin等等，对于变量名来说，通过其名字，我们可以知道这个变量的类型（整型，浮点，指针，……），种类（全局，成员，局部，静态，……）。关于命名的事情，可以查看《<a rel="bookmark" href="https://coolshell.cn/articles/1038.html">编程命名中的7+1个提示</a>》和《<a rel="bookmark" href="https://coolshell.cn/articles/990.html">编程中的命名设计那点事</a>》查看更多的内容。</p>
<p><strong>3 – 只写有意义的注释</strong></p>
<p>代码写得好的话，是不需要注释的。与其花费大量的时候去写注释，还不如把这些时间花在代码重构上，简洁/易读的代码比详细的注释更有意义。另外，如果你需要使用你的注释来生成文档，那么也不需要太过复杂，这通常用来做API的文档，这个时候，关键不在于你是如何实现的，而是在于告诉别人完成什么样的事并如何使用之。总之，一句话，<strong>如果你的代码足够的简单和清楚，你是不需要写注释的</strong>。<br>
<strong>4 – 让你的代码可读</strong></p>
<p>你的代码并不只是让编译器去阅读的，你的代码更应该是让你的同事和其它人阅读的。所以，一定要遵守团队内部的那些最中规中矩的编程规范或代码风格，千万不要在代码中使你的小聪明或是偷懒或是hack代码，那样做的结果只会有两个，一个是你的代码会被后人骂得一无是处，另一个就是当你在以后维护你的代码时无异于搬起石头砸了自己的脚。编码坚持最基本的两个原则—— <a href="https://en.wikipedia.org/wiki/Keep_it_simple_stupid"><span style="color: #5588aa;">KISS</span></a> 和<a href="https://en.wikipedia.org/wiki/Don%27t_repeat_yourself"><span style="color: #5588aa;">DRY</span></a>，剩下的就是顺从于自然。</p>
<p>（全文完）<a href="https://tiagofernandez.blogspot.com/2009/06/4-tips-for-clean-code.html" target="_blank"></a></p>
<p align="center"><img alt="image placeholder" >
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/18024.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/8990.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/8745.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/7886.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/5444.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/5201.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
</ul>
</div></div>
<div id="post-ratings-1095" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="9cb0365708">
<img alt="image placeholder" >
<meta itemprop="headline" content="整洁代码的4个提示">
<meta itemprop="description" content="虽然这样的文章非常的多，并且，就算是对于编程新手来说，也是非常的简单和显而见，但是，在我们进行Code Review过程中，我们还是能够看到那些非常混乱的代码，所以，有些时候，你会在想，是不是这样的规则太多了，导致我们的程序员记不住。虽然我们在以前的文章中一遍又一遍的说过（比如：《优质代码的十诫》），千言万语总结一下，无论你用什么样的语言，最最基本的编程原则就是下面这四条。



1 - ...">
<meta itemprop="datePublished" content="2009-07-05T22:09:01+08:00">
<meta itemprop="dateModified" content="2009-07-05T22:12:10+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/1095.html">
<meta itemprop="author" content="陈皓">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/1095.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="3.5">
<meta itemprop="ratingCount" content="6">
</div>
</div>
<div id="post-ratings-1095-loading" class="post-ratings-loading">
<img alt="image placeholder" >
 ]]></content>
<pubDate>2009-07-05T22:09:01+08:00</pubDate>
<guid>https://coolshell.cn/articles/1095.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ BT雷人的程序语言 ]]></title>
<link>https://coolshell.cn/articles/1142.html</link>
<content><![CDATA[ 
<p>这个世界从来都不会缺少另类的东西，人类自然世界如此，计算机世界也一样。编程语言方面，看过本站《<a title="6个变态的C语言Hello World程序 - 661次点击" href="../?p=914">6个变态的C语言Hello World程序</a>》的朋友们一定对BT和另类不会陌生，但那都是些小儿科，真正的BT和另类要是从语言级上来完成。让我们来看看其中一个比较另类的语言BrainFuck。看到这个程序语言的名字，请不要以为这是一个搞笑的语言，这是一个“严肃事情”，请大家用“最虔诚的态度”来阅读本文。</p>
<div id="ez-toc-container" class="ez-toc-v2_0_17 counter-hierarchy counter-decimal ez-toc-grey">
<div class="ez-toc-title-container">
<p class="ez-toc-title">目录</p>
<span class="ez-toc-title-toggle"></span>
</div>
<nav><ul class="ez-toc-list ez-toc-list-level-1">
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-1" href="#BF%E8%AF%AD%E8%A8%80%E4%BB%8B%E7%BB%8D" title="BF语言介绍">BF语言介绍</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-2" href="#BF%E8%A7%A3%E9%87%8A%E5%99%A8" title="BF解释器">BF解释器</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-3" href="#Hello_World" title="Hello World">Hello World</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-4" href="#%E5%85%B6%E5%AE%83%E5%8F%A6%E7%B1%BB%E8%AF%AD%E8%A8%80" title="其它另类语言">其它另类语言</a></li>
</ul></nav>
</div>
<h4>
<span class="ez-toc-section" id="BF%E8%AF%AD%E8%A8%80%E4%BB%8B%E7%BB%8D"></span>BF语言介绍<span class="ez-toc-section-end"></span>
</h4>
<p><strong>Brainfuck</strong>，是一种极小化的计算机语言，它是由Urban Müller在1993年创建的。由于“绿王八”的原因，这种语言有时被称为<strong>brainf**k</strong>或<strong>brainf***</strong>，甚至被简称为<strong>BF</strong>。这种 语言，是一种按照“Turing complete（完整图灵机）”思想设计的语言，它的主要设计思路是：用最小的概念实现一种“简单”的语言，BrainF**k 语言只有八种符号，所有的操作都由这八种符号的组合来完成。</p>
<p>BF基于一个简单的机器模型，除了八个指令，这个机器还包括：一个以字节为单位、被初始化为零的数组、一个指向该数组的指针(初始时指向数组的第一个字节)、以及用于输入输出的两个字节流。</p>
<p>下面是这八种指令的描述，其中每个指令由一个字符标识：</p>
<p><span id="more-1142"></span></p>
<table border="0">
<tbody>
<tr>
<th>字符</th>
<th>含义</th>
</tr>
<tr>
<td><code>&gt;</code></td>
<td>指针加一</td>
</tr>
<tr>
<td><code>&lt;</code></td>
<td>指针减一</td>
</tr>
<tr>
<td><code>+</code></td>
<td>指针指向的字节的值加一</td>
</tr>
<tr>
<td><code>-</code></td>
<td>指针指向的字节的值减一</td>
</tr>
<tr>
<td><code>.</code></td>
<td>输出指针指向的单元内容（ASCII码）</td>
</tr>
<tr>
<td><code>,</code></td>
<td>输入内容到指针指向的单元（ASCII码）</td>
</tr>
<tr>
<td><code>[</code></td>
<td>如果指针指向的单元值为零，向后跳转到对应的<code>]</code>指令的次一指令处</td>
</tr>
<tr>
<td><code>]</code></td>
<td>如果指针指向的单元值不为零，向前跳转到对应的<code>[</code>指令的次一指令处</td>
</tr>
</tbody>
</table>
<p>（按照更节省时间的简单说法，<code>]</code>也可以说成“向后跳转到对应的<code>[</code>状态”。这两解释是一样的。）</p>
<p>（第三种同价的说法，<code>[</code>意思是”向前跳转到对应的<code>]</code>“，<code>]</code>意思是”向后跳转到对应的<code>[</code>指令的次一指令处，如果指针指向的字节非零。”）</p>
<p>Brainfuck程序可以用下面的替换方法翻译成C语言（假设<code>ptr</code>是<code>char*</code>类型）：</p>
<table border="0">
<tbody>
<tr>
<th>Brainfuck</th>
<th>C</th>
</tr>
<tr>
<td align="center"><code>&gt;</code></td>
<td><code>++ptr;</code></td>
</tr>
<tr>
<td align="center"><code>&lt;</code></td>
<td><code>--ptr;</code></td>
</tr>
<tr>
<td align="center"><code>+</code></td>
<td><code>++*ptr;</code></td>
</tr>
<tr>
<td align="center"><code>-</code></td>
<td><code>--*ptr;</code></td>
</tr>
<tr>
<td align="center"><code>.</code></td>
<td><code>putchar(*ptr);</code></td>
</tr>
<tr>
<td align="center"><code>,</code></td>
<td><code>*ptr =getchar();</code></td>
</tr>
<tr>
<td align="center"><code>[</code></td>
<td><code>while (*ptr) {</code></td>
</tr>
<tr>
<td align="center"><code>]</code></td>
<td><code>}</code></td>
</tr>
</tbody>
</table>
<h4>
<span class="ez-toc-section" id="BF%E8%A7%A3%E9%87%8A%E5%99%A8"></span>BF解释器<span class="ez-toc-section-end"></span>
</h4>
<p>因为 BrainFuck 只有八种指令，并且没有关键字，也不允许自定义标识符，因此它的编译器实现起来非常简单，初学 C 语言不久的人都可以自己编出来，尽管在座的各位每人都可以自己编一个，不过为了引起大家的兴趣，我这里还是给出大家一个官方发布的版本。这个程序只有短短 50 多行，并且完全由 ANSI C 写成，因此你随便找个 C 语言编译器，把它编译一下。</p>
<p></p>
<pre data-enlighter-language="c" class="EnlighterJSRAW">#include &lt;stdio.h&gt;;

int  p, r, q;
char a[5000], f[5000], b, o, *s=f;

void interpret(char *c)
{
    char *d;

    r++;
    while( *c ) {
        //if(strchr("&lt;&gt;;+-,.[]\n",*c))printf("%c",*c);
        switch(o=1,*c++) {
            case '&lt;': p--;        break;
            case '&gt;;': p++;       break;
            case '+': a[p]++;     break;
            case '-': a[p]--;     break;
            case '.': putchar(a[p]); fflush(stdout); break;
            case ',': a[p]=getchar();fflush(stdout); break;
            case '[':
                for( b=1,d=c; b &amp;&amp; *c; c++ )
                b+=*c=='[', b-=*c==']';
                if(!b) {
                    c[-1]=0;
                    while( a[p] )
                    interpret(d);
                    c[-1]=']';
                    break;
                }
            case ']':
                puts("UNBALANCED BRACKETS"), exit(0);
            case '#':
                if(q&gt;;2)
                printf("%2d %2d %2d %2d %2d %2d %2d %2d %2d %2d\n%*s\n",
                *a,a[1],a[2],a[3],a[4],a[5],a[6],a[7],a[8],a[9],3*p+2,"^");
                break;
            default: o=0;
        }
        if( p&lt;0 || p&gt;;100)
            puts("RANGE ERROR"), exit(0);
    }
    r--;
    //        chkabort();
}

main(int argc,char *argv[])
{
    FILE *z;

    q=argc;

    if(z=fopen(argv[1],"r")) {
        while( (b=getc(z))&gt;;0 )
            *s++=b;
        *s=0;
        interpret(f);
    }
}
</pre>
<p>当然，如果你觉得用C语言来实现BrainFuck语言的解释器是对BrainFuck这种语言的一种侮辱的话，我们的BrainFuck社区是绝对不能容忍你有这种想法的。因为我们有一个使用100%纯brainfuck写成的一个编译器<strong>awib</strong>：<a href="https://code.google.com/p/awib/" target="_blank">http://code.google.com/p/awib/ </a></p>
<h4>
<span class="ez-toc-section" id="Hello_World"></span>Hello World<span class="ez-toc-section-end"></span>
</h4>
<pre>++++++++++[&gt;+++++++&gt;++++++++++&gt;+++&gt;+&lt;&lt;&lt;&lt;-]
&gt;++.&gt;+.+++++++..+++.&gt;++.&lt;&lt;+++++++++++++++.
&gt;.+++.------.--------.&gt;+.&gt;.</pre>
<p>怎么？看不懂吗？下面是解释：</p>
<pre>+++ +++ +++ +           initialize counter (cell #0) to 10
[                       use loop to set the next four cells to 70/100/30/10
    &gt; +++ +++ +             add  7 to cell #1
    &gt; +++ +++ +++ +         add 10 to cell #2
    &gt; +++                   add  3 to cell #3
    &gt; +                     add  1 to cell #4
    &lt;&lt;&lt; &lt; -                 decrement counter (cell #0)
]
&gt;++ .                   print 'H'
&gt;+.                     print 'e'
+++ +++ +.              print 'l'
.                       print 'l'
+++ .                   print 'o'
&gt;++ .                   print ' '
&lt;&lt;+ +++ +++ +++ +++ ++. print 'W'
&gt;.                      print 'o'
+++ .                   print 'r'
--- --- .               print 'l'
--- --- --.             print 'd'
&gt;+.                     print '!'
&gt;.                      print '\n'</pre>
<p><strong>相关链接</strong>：</p>
<ul>
<li>BF的官网：<a href="http://www.muppetlabs.com/~breadbox/bf/">http://www.muppetlabs.com/~breadbox/bf/</a>。</li>
<li>BF的Wikipedia：<a href="https://en.wikipedia.org/wiki/Brainfuck">http://en.wikipedia.org/wiki/Brainfuck</a>。</li>
</ul>
<h4>
<span class="ez-toc-section" id="%E5%85%B6%E5%AE%83%E5%8F%A6%E7%B1%BB%E8%AF%AD%E8%A8%80"></span>其它另类语言<span class="ez-toc-section-end"></span>
</h4>
<p>如果你要觉得BF已经很BT了，那么你就错了，下面这些程序语言更BT。</p>
<p><strong>WhiteSpace语言</strong></p>
<p style="padding-left: 30px;">这是一种只用空白字符（空格，TAB和回车）编程的语言，而其它可见字符统统为注释。下面是它的一个示例：</p>
<p style="padding-left: 30px;"> </p>
<pre style="padding-left: 60px;">  		 	
	
  	
  
	
</pre>
<p style="padding-left: 30px;">什么？你什么也没有看见，这就对了，因为这正是这门语言的独特之处。访问下面这个链接查看<a href="http://compsoc.dur.ac.uk/whitespace/hworld.ws" target="_blank">Hello,World示例</a>。记得按Ctrl+A来查看程序。</p>
<p style="padding-left: 30px;">官网：<a href="http://compsoc.dur.ac.uk/whitespace/index.php">http://compsoc.dur.ac.uk/whitespace/index.php</a>。</p>
<p><strong>LOLCODE语言</strong></p>
<p style="padding-left: 30px;">LOLCODE是一种建立在高度缩写的网络英语之上的编程语言，一般来说如果一个人能理解这种网络英语就能在未经训练的情况下读懂LOLCODE程序源代码。下面是其Hello,World例程：</p>
<pre style="padding-left: 60px;">HAI
CAN HAS STDIO?
VISIBLE "HAI WORLD!"
KTHXBYE</pre>
<p style="padding-left: 30px;">翻译成中文就是：</p>
<pre style="padding-left: 60px;">嗨
我可以用 STDIO 么？
显示一下 “HAI WORLD!”
谢谢啊，再见</pre>
<p style="padding-left: 30px;"> </p>
<p style="padding-left: 30px;">官网：<a href="http://lolcode.com/">http://lolcode.com/</a></p>
<p><strong>中文编程语言</strong></p>
<p style="padding-left: 30px;">不要以为只有老外才那么BT，咱们中国也有自己的BT编程语言。</p>
<p style="padding-left: 30px;"><strong>中文Basic</strong></p>
<table border="0">
<tbody>
<tr>
<td>中文指令</td>
<td></td>
<td>对应于的Applesoft BASIC</td>
</tr>
<tr>
<td><tt>10 卜=0</tt></td>
<td></td>
<td><tt>10 Y=0</tt></td>
</tr>
<tr>
<td><tt>20 <span>入</span> 水, 火</tt></td>
<td></td>
<td><tt>20 INPUT E, F</tt></td>
</tr>
<tr>
<td><tt>30 <span>從</span> 日 = 水 <span>到</span> 火</tt></td>
<td></td>
<td><tt>30 FOR A = E TO F</tt></td>
</tr>
<tr>
<td><tt>40 卜 = 卜+<span>對數</span>(日)</tt></td>
<td></td>
<td><tt>40 Y = Y + LOG (A)</tt></td>
</tr>
<tr>
<td><tt>50 <span>下一</span> 日</tt></td>
<td></td>
<td><tt>50 NEXT A</tt></td>
</tr>
<tr>
<td><tt>60 <span>印</span> 卜</tt></td>
<td></td>
<td><tt>60 PRINT Y</tt></td>
</tr>
</tbody>
</table>
<p style="padding-left: 60px;">官网无法访问了，只能看看Wikipedia了：<a href="https://en.wikipedia.org/wiki/Chinese_BASIC">http://en.wikipedia.org/wiki/Chinese_BASIC</a></p>
<p style="padding-left: 30px;"><strong>中蟒语言（中文Python）</strong></p>
<p style="padding-left: 60px;">下面的程序是不是很Cool？</p>
<pre style="padding-left: 60px;">#!/usr/local/bin/cpython
回答 = 读入('你认为中文程式语言有存在价值吗 ? (有/没有)')
如 回答 == '有':
写 '好吧, 让我们一起努力!'
不然 回答 == '没有':
写 '好吧,中文并没有作为程式语言的价值.'
否则:
写 '请认真考虑后再回答.'</pre>
<p style="padding-left: 60px;">官网：<a href="http://www.chinesepython.org/cgi_bin/cgb.cgi/home.html">http://www.chinesepython.org/</a></p>
<p>差不多了，该结束了，再次说明，这是一篇很严肃的文章。</p>
<p>(<strong>全文完</strong>)</p>
<p align="center"><img alt="image placeholder" >
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/6639.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/4626.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/4458.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/3385.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/3100.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/2724.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
</ul>
</div></div>
<div id="post-ratings-1142" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="7e44d9295e">
<img alt="image placeholder" >
<meta itemprop="headline" content="BT雷人的程序语言">
<meta itemprop="description" content="这个世界从来都不会缺少另类的东西，人类自然世界如此，计算机世界也一样。编程语言方面，看过本站《6个变态的C语言Hello World程序》的朋友们一定对BT和另类不会陌生，但那都是些小儿科，真正的BT和另类要是从语言级上来完成。让我们来看看其中一个比较另类的语言BrainFuck。看到这个程序语言的名字，请不要以为这是一个搞笑的语言，这是一个“严肃事情”，请大家用“最虔诚的态度”来阅读本文。
B...">
<meta itemprop="datePublished" content="2009-07-12T11:07:03+08:00">
<meta itemprop="dateModified" content="2011-04-12T15:15:31+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/1142.html">
<meta itemprop="author" content="陈皓">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/1142.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="4.76">
<meta itemprop="ratingCount" content="34">
</div>
</div>
<div id="post-ratings-1142-loading" class="post-ratings-loading">
<img alt="image placeholder" >
 ]]></content>
<pubDate>2009-07-12T11:07:03+08:00</pubDate>
<guid>https://coolshell.cn/articles/1142.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ 关于 Chrome OS 的一些推论 ]]></title>
<link>https://coolshell.cn/articles/1152.html</link>
<content><![CDATA[ 
<p>最近Chrome OS被炒作得火热。</p>
<p>为什么还有一年后才发布的产品这么早会公布于众？其实不难想象，一个系统级别的产品的推行必须要跟很多OEM厂家谈合作。而你几乎不可能只是秘密地跟一个大公司的2-3个工程总监就能把这种合作谈定，而大多数的OEM公司，例如 DELL， Asus， Acer等这样的公司都不是技术为主导的，商业人士会很早参与意见和项目的计划，一旦知道的人多了，其实也没什么能保密的了。虽然，这样荒腔走板的发布很可能像伤害Android一样伤害Chrome OS。</p>
<p>为什么Chrome OS和Android是如此独立的两个东西，看似又是在解决一个方向上的问题呢？其实也不难推测。<a href="http://www.businessweek.com/technology/content/aug2005/tc20050817_0949_tc024.htm">Android是Google买下来的公司</a>，其带队的Andy Rubin肯定是个对移动设备的能力有远见的大佬，而Chrome浏览器的领袖 Linus Upson是做V8 Engine的，一定对云和未来的Web Apps有着更坚定的远景。当两个这样强势的团队在公司各自划定地盘以后，融合的可能性就相对小了。</p>
<p><span id="more-1152"></span><br>
另，人们对netbook的遐想自然会把所有可能的技术都考虑一遍，尤其是Android这样先进而开源的东西，自然会有把自己定位为先驱的生产商拿来尽早发布netbook产品占领口碑上的“技术制高点”，但是这是不是一定意味着Android在netbook上有一席之地，由市场决定。</p>
<ul>
<li>Android是为了更强大的移动设备：有耳朵，有眼睛，知道自己的方位和姿态，方便社交和更好的跟Google产品的融合。</li>
<li>Chrome是为了更好的云端体验：手上的netbook设备启动几秒就能用，操作系统版本永远最新（<a href="http://www.techzoom.net/publications/silent-updates/">安静地后台自动更新更安全</a>）换台机器登陆后，无需配置升级，所有的东西看起来都还一样，所有的东西为Web Apps加速，使人们不在感觉到操作系统的存在。</li>
</ul>
<p>总而言之，以下几个推论：</p>
<ol>
<li>Chrome OS上能不能用Android的Apps （store）？很可能，干嘛不？</li>
<li>Chrome OS上能不能装浏览器？估计可以，但是有啥必要呢？</li>
<li>Android上的浏览器会不会是Chrome?不太值得讨论，他们都基于webkit， 而且共用插件应该不困难，留给社区开发可能更合适</li>
<li>Chrome OS会不会和Android合并?短时间不会，就像地线电话和手机一样，但是又有多大差别呢？</li>
</ol>
<p>两个可能赢的赛马，两个都赌的话……</p>
<p align="center"><img alt="image placeholder" >
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/12136.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/3549.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/2608.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/17066.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/12225.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/9508.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
</ul>
</div></div>
<div id="post-ratings-1152" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="0c7b29d68e">
<img alt="image placeholder" >
<meta itemprop="headline" content="关于 Chrome OS 的一些推论">
<meta itemprop="description" content="最近Chrome OS被炒作得火热。

为什么还有一年后才发布的产品这么早会公布于众？其实不难想象，一个系统级别的产品的推行必须要跟很多OEM厂家谈合作。而你几乎不可能只是秘密地跟一个大公司的2-3个工程总监就能把这种合作谈定，而大多数的OEM公司，例如 DELL， Asus， Acer等这样的公司都不是技术为主导的，商业人士会很早参与意见和项目的计划，一旦知道的人多了，其实也没什么能保密的了...">
<meta itemprop="datePublished" content="2009-07-13T01:04:14+08:00">
<meta itemprop="dateModified" content="2009-07-13T08:20:54+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/1152.html">
<meta itemprop="author" content="mailper">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/1152.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="3.92">
<meta itemprop="ratingCount" content="12">
</div>
</div>
<div id="post-ratings-1152-loading" class="post-ratings-loading">
<img alt="image placeholder" >
 ]]></content>
<pubDate>2009-07-13T01:04:14+08:00</pubDate>
<guid>https://coolshell.cn/articles/1152.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ Python 自然语言处理 ]]></title>
<link>https://coolshell.cn/articles/1157.html</link>
<content><![CDATA[ 
<p>推荐一本免费的在线电子书，《用Python进行自然语言处理》， 用<a href="https://www.google.com/search?hl=en&amp;q=nlp+toolkit+python">NLP 工具包</a>（开源免费，Python）来进行文本分析。特别适合初学计算语言学的学生。好像没有好的中文切词。当然，免不了需要提一下 Dan Jurafsky 教授，大家可以搜索一下，找找他的讲义。</p>
<p>简要翻译一下提纲：</p>
<p><span id="more-1157"></span></p>
<p>（书的主站点：<a href="http://www.nltk.org/">http://www.nltk.org/</a>）</p>
<ul>
<li>序言</li>
<li>用Python进行语言处理</li>
<li>使用文本语料库和辞典资源</li>
<li>处理原始文本</li>
<li>结构化变成</li>
<li>词语的分类和标签</li>
<li>学习文本分类</li>
<li>从文本中信息抽取</li>
<li>分析句法结构</li>
<li>创建基于特征的语法</li>
<li>分析句子的意思</li>
<li>管理语言学数据</li>
<li>后记：直面语言带来的挑战</li>
</ul>
<p>Natural Language Processing with Python<span style="font-size: x-small;"><br>
— Analyzing Text with the Natural Language Toolkit</span></p>
<p><span style="font-size: x-small;">Steven Bird, Ewan Klein, and Edward Loper</span></p>
<dl>
<dd>0. <a style="color: navy !important; outline-style: none; outline-width: initial; outline-color: initial;" href="https://nltk.googlecode.com/svn/trunk/doc/book/ch00.html">Preface</a> (<a style="color: navy !important; outline-style: none; outline-width: initial; outline-color: initial;" href="https://nltk.googlecode.com/svn/trunk/doc/book/ch00-extras.html">extras</a>) </dd>
<dd>1. <a style="color: navy !important; outline-style: none; outline-width: initial; outline-color: initial;" href="https://nltk.googlecode.com/svn/trunk/doc/book/ch01.html">Language Processing and Python</a> (<a style="color: navy !important; outline-style: none; outline-width: initial; outline-color: initial;" href="https://nltk.googlecode.com/svn/trunk/doc/book/ch01-extras.html">extras</a>) </dd>
<dd>
<span style="font-size: 10px;"><span style="font-size: 12px;">2. <a style="color: navy !important; outline-style: none; outline-width: initial; outline-color: initial;" href="https://nltk.googlecode.com/svn/trunk/doc/book/ch02.html">Accessing Text Corpora and Lexical Resources</a></span></span> (<a style="color: navy !important; outline-style: none; outline-width: initial; outline-color: initial;" href="https://nltk.googlecode.com/svn/trunk/doc/book/ch02-extras.html">extras</a>) </dd>
<dd><span style="font-size: 10px;"><span style="font-size: 12px;">3. <a style="color: navy !important; outline-style: none; outline-width: initial; outline-color: initial;" href="https://nltk.googlecode.com/svn/trunk/doc/book/ch03.html">Processing Raw Text</a></span></span></dd>
<dd>
<span style="font-size: 10px;"><span style="font-size: 12px;">4. </span></span><a style="color: navy !important; outline-style: none; outline-width: initial; outline-color: initial;" href="https://nltk.googlecode.com/svn/trunk/doc/book/ch04.html"><span style="font-size: 10px;"><span style="font-size: 12px;">Writing Structured Programs</span></span></a> (<a style="color: navy !important; outline-style: none; outline-width: initial; outline-color: initial;" href="https://nltk.googlecode.com/svn/trunk/doc/book/ch04-extras.html">extras</a>) </dd>
<dd>
<span style="font-size: 10px;"><span style="font-size: 12px;">5. </span></span><a style="color: navy !important; outline-style: none; outline-width: initial; outline-color: initial;" href="https://nltk.googlecode.com/svn/trunk/doc/book/ch05.html"><span style="font-size: 10px;"><span style="font-size: 12px;">Categorizing and Tagging Words</span></span></a>
</dd>
<dd>
<span style="font-size: 10px;"><span style="font-size: 12px;">6. </span></span><a style="color: navy !important; outline-style: none; outline-width: initial; outline-color: initial;" href="https://nltk.googlecode.com/svn/trunk/doc/book/ch06.html"><span style="font-size: 10px;"><span style="font-size: 12px;">Learning to Classify Text</span></span></a> (<a style="color: navy !important; outline-style: none; outline-width: initial; outline-color: initial;" href="https://nltk.googlecode.com/svn/trunk/doc/book/ch06-extras.html">extras</a>) </dd>
<dd><span style="font-size: 10px;"><span style="font-size: 12px;">7. <a style="color: navy !important; outline-style: none; outline-width: initial; outline-color: initial;" href="https://nltk.googlecode.com/svn/trunk/doc/book/ch07.html">Extracting Information from Text</a></span></span></dd>
<dd>
<span style="font-size: 10px;"><span style="font-size: 12px;">8. <a style="color: navy !important; outline-style: none; outline-width: initial; outline-color: initial;" href="https://nltk.googlecode.com/svn/trunk/doc/book/ch08.html">Analyzing Sentence Structure</a></span></span> (<a style="color: navy !important; outline-style: none; outline-width: initial; outline-color: initial;" href="https://nltk.googlecode.com/svn/trunk/doc/book/ch08-extras.html">extras</a>) </dd>
<dd><span style="font-size: 10px;"><span style="font-size: 12px;">9. <a style="color: navy !important; outline-style: none; outline-width: initial; outline-color: initial;" href="https://nltk.googlecode.com/svn/trunk/doc/book/ch09.html">Building Feature Based Grammars</a></span></span></dd>
<dd>
<span style="font-size: 10px;"><span style="font-size: 12px;">10. <a style="color: navy !important; outline-style: none; outline-width: initial; outline-color: initial;" href="https://nltk.googlecode.com/svn/trunk/doc/book/ch10.html">Analyzing the Meaning of Sentences</a></span></span> (<a style="color: navy !important; outline-style: none; outline-width: initial; outline-color: initial;" href="https://nltk.googlecode.com/svn/trunk/doc/book/ch10-extras.html">extras</a>) </dd>
<dd><span style="font-size: 10px;"><span style="font-size: 12px;">11. <a style="color: navy !important; outline-style: none; outline-width: initial; outline-color: initial;" href="https://nltk.googlecode.com/svn/trunk/doc/book/ch11.html">Managing Linguistic Data</a></span></span></dd>
<dd><span style="font-size: 10px;"><span style="font-size: 12px;">12. <a style="color: navy !important; outline-style: none; outline-width: initial; outline-color: initial;" href="https://nltk.googlecode.com/svn/trunk/doc/book/ch12.html">Afterword: Facing the Language Challenge</a></span></span></dd>
</dl>
<p></p>
<p align="center"><img alt="image placeholder" >
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/4710.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/4220.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/3270.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/18360.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/11265.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/10822.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
</ul>
</div></div>
<div id="post-ratings-1157" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="fb6a15b3b4">
<img alt="image placeholder" >
<meta itemprop="headline" content="Python 自然语言处理">
<meta itemprop="description" content="推荐一本免费的在线电子书，《用Python进行自然语言处理》， 用NLP 工具包（开源免费，Python）来进行文本分析。特别适合初学计算语言学的学生。好像没有好的中文切词。当然，免不了需要提一下 Dan Jurafsky 教授，大家可以搜索一下，找找他的讲义。

简要翻译一下提纲：



（书的主站点：http://www.nltk.org/）

	序言
	用Python进行语...">
<meta itemprop="datePublished" content="2009-07-15T22:41:56+08:00">
<meta itemprop="dateModified" content="2009-07-15T23:01:35+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/1157.html">
<meta itemprop="author" content="mailper">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/1157.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="3.67">
<meta itemprop="ratingCount" content="6">
</div>
</div>
<div id="post-ratings-1157-loading" class="post-ratings-loading">
<img alt="image placeholder" >
 ]]></content>
<pubDate>2009-07-15T22:41:56+08:00</pubDate>
<guid>https://coolshell.cn/articles/1157.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ （免费在线）新书推荐：搜索的用户界面 ]]></title>
<link>https://coolshell.cn/articles/1163.html</link>
<content><![CDATA[ 
<p>题外话：剑桥大学出版社很有意思，允许作者把书的全部内容放在网上，例如：<a href="http://nlp.stanford.edu/~manning/">Christopher D. Manning</a>, <a href="http://theory.stanford.edu/people/raghavan/">Prabhakar Raghavan</a> and <a href="http://www-csli.stanford.edu/~hinrich">Hinrich Schütze</a>,<a href="http://www-csli.stanford.edu/~hinrich/information-retrieval-book.html"> </a><em><a href="http://www-csli.stanford.edu/~hinrich/information-retrieval-book.html">Introduction to Information Retrieval</a></em>, Cambridge University Press. 2008.</p>
<p>《<a href="http://searchuserinterfaces.com/book/">搜索的用户界面</a>》的作者<a href="http://people.ischool.berkeley.edu/~hearst/">Marti Hearst</a>是加州大学伯克利分校研究信息可视化的一位大儒，她有很多带有认知心理学加设计的尝试，在信息检索这门学科里的信息可视化领域很有地位。我斗胆把她的新书的梗概在这里描述一下，习惯看英文的朋友们可以点击链接去看英文原文，不喜欢看英文的朋友们可以有选择的看看我这里的总结，然后硬硬头皮，跳进去啃一些具体章节吧。本书可能收益的人有：对搜索有兴趣的学生，工业界做设计和评估的专业人士，对技术中的人本主义感兴趣的人，书痴。</p>
<p><span id="more-1163"></span></p>
<blockquote>
<p>译文：<a href="http://searchuserinterfaces.com/book/sui_ch0_preface.html">本书综述</a></p>
<p>本书概括了信息寻找过程中人的方面，并专注于其中被用户界面可以支持的方面。本书描述一些用户界面的一般方法论，尤其是搜索的用户界面以及如何评估好的搜索界面。本书讨论了以下几个领域的研究成果和工业实践： 查询的界定，搜索结果的显示，搜索结果分组，信息内的浏览导航，用户重新界定查询，个人化的搜索，以及更广义上的信息使用和文本分析。大多数的讨论还是和网页搜索引擎相关，但是本书也照顾到了其他类型的搜索。如下章节：</p>
<ol>
<li>搜索界面的设计</li>
<li>评估搜索界面</li>
<li>信息搜寻的模型</li>
<li>界定查询</li>
<li>搜索结果的呈现</li>
<li>用户重新界定搜索</li>
<li>支持搜索过程的一些手段：搜索历史，在搜索结果中再搜索，帮助用户理解如何更好搜索</li>
<li>整合浏览导航和搜索</li>
<li>搜索过程中的个人化</li>
<li>搜索界面的可视化（如何呈现搜索结果）</li>
<li>文本分析中的可视化</li>
<li>搜索界面中的一些新趋势</li>
</ol>
<div id="_mcePaste" style="overflow: hidden; position: absolute; left: -10000px; top: 108px; width: 1px; height: 1px;">本书是以前98年一个经典书的扩充和更新：Modern Information Retrieval, Baeza-Yates and Ribeiro-Neto (Eds.), Addison Wesley</div>
</blockquote>
<p>本书是以前98年一个经典书的扩充和更新：<em>Modern Information Retrieval</em>, Baeza-Yates and Ribeiro-Neto (Eds.), Addison Wesley</p>
<p align="center"><img alt="image placeholder" >
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/3013.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/4220.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/4710.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/3903.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/3877.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/3723.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
</ul>
</div></div>
<div id="post-ratings-1163" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="2cc93b75f4">
<img alt="image placeholder" >
<meta itemprop="headline" content="（免费在线）新书推荐：搜索的用户界面">
<meta itemprop="description" content="题外话：剑桥大学出版社很有意思，允许作者把书的全部内容放在网上，例如：Christopher D. Manning, Prabhakar Raghavan and Hinrich Schütze, Introduction to Information Retrieval, Cambridge University Press. 2008.

《搜索的用户界面》的作者Marti Hearst是...">
<meta itemprop="datePublished" content="2009-07-16T21:23:39+08:00">
<meta itemprop="dateModified" content="2009-07-17T14:26:55+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/1163.html">
<meta itemprop="author" content="mailper">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/1163.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="3.67">
<meta itemprop="ratingCount" content="6">
</div>
</div>
<div id="post-ratings-1163-loading" class="post-ratings-loading">
<img alt="image placeholder" >
 ]]></content>
<pubDate>2009-07-16T21:23:39+08:00</pubDate>
<guid>https://coolshell.cn/articles/1163.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ 程序员犯的非技术错误(Top 5) ]]></title>
<link>https://coolshell.cn/articles/1145.html</link>
<content><![CDATA[ 
<div>
<p>对于程序开发者来说，有两种技术需要我们掌握，一个是技术上的能力，另一个是非技术上的能力。不幸的是，许多程序员过多地关注了技术上的能力，而忽略了非技术上的能力的培养，因此，我们的程序员们经常会有一些很不好的习惯，这里我们例举了程序员们最常犯的5个非技术的错误，与大家共勉。</p>
<div id="ez-toc-container" class="ez-toc-v2_0_17 counter-hierarchy counter-decimal ez-toc-grey">
<div class="ez-toc-title-container">
<p class="ez-toc-title">目录</p>
<span class="ez-toc-title-toggle"></span>
</div>
<nav><ul class="ez-toc-list ez-toc-list-level-1">
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-1" href="#1-_%E7%BC%BA%E4%B9%8F%E5%9B%A2%E9%98%9F%E7%BA%AA%E5%BE%8B" title="1.- 缺乏团队纪律">1.- 缺乏团队纪律</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-2" href="#2-_%E8%BF%87%E5%BA%A6%E8%87%AA%E8%B4%9F" title="2.- 过度自负">2.- 过度自负</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-3" href="#3-_%E6%B2%9F%E9%80%9A%E4%B8%8D%E7%95%85" title="3.- 沟通不畅">3.- 沟通不畅</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-4" href="#4-_%E5%BF%98%E4%BA%86%E7%94%A8%E6%88%B7" title="4.- 忘了用户">4.- 忘了用户</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-5" href="#5-_%E4%B8%8D%E6%87%82%E5%B7%A5%E4%BD%9C%E7%9A%84%E8%BD%BB%E9%87%8D%E7%BC%93%E6%80%A5" title="5.- 不懂工作的轻重缓急">5.- 不懂工作的轻重缓急</a></li>
</ul></nav>
</div>
<h4>
<span class="ez-toc-section" id="1-_%E7%BC%BA%E4%B9%8F%E5%9B%A2%E9%98%9F%E7%BA%AA%E5%BE%8B"></span>1.- 缺乏团队纪律<span class="ez-toc-section-end"></span>
</h4>
<p><a onclick="pageTracker._trackPageview('/outgoing/thinkexist.com/quotation/discipline_is_the_bridge_between_goals_and/210477.html');" href="http://thinkexist.com/quotation/discipline_is_the_bridge_between_goals_and/210477.html" target="_blank">“Discipline is the bridge between goals and accomplishment.”</a> Jim Rohn.</p>
<p>纪律是一个最有价值的技能，不仅仅只是在软件开发领域，同样在其它领域也是一样的。但对于现实来说，我们很难找到即有才华又有纪律的人。这正如足球队一样，非洲的球员们才华相当的出众，可惜他们总是独自为阵，团队纪律性不足，所以可以有好的成绩，但却无法赢得最后的胜利；而德国队的队员个人技能平平，但其有很强大的团队纪律性，所以，总是能打入最后的决赛并获得冠军。有人说过，个人英雄并不可怕，而有强大纪律性的团队才让人可怕。这正是日本这个民族的可怕之处。况且，软件开发从来都不是一个人可以完成的事情，所以团队工作中的纪律性会是非常重要的。</p>
<p><a onclick="pageTracker._trackPageview('/outgoing/www.stevepavlina.com');" href="http://www.stevepavlina.com/">Steve Pavlina</a> 强调了自律中5个因素：“<strong>承担</strong>, <strong>毅力</strong>, <strong>努力</strong>, <strong>勤奋</strong>, 和<strong>坚持</strong><em>。</em>” 这里，我们强烈推荐你读一读Steve的 <a onclick="pageTracker._trackPageview('/outgoing/www.stevepavlina.com/blog/2005/06/self-discipline/');" href="http://www.stevepavlina.com/blog/2005/06/self-discipline/" target="_blank">关于自律的文章</a>。</p>
<p><span id="more-1145"></span></p>
<p>下面是我们觉得程序应该有的比较良好的习惯。</p>
<ul>
<li>每天都有自己的to do list</li>
<li>在一个时间内只做一个事</li>
<li>把事情做对了</li>
<li>事情没有完全完成时不要轻易结束</li>
<li>慢点总比道歉好，道歉总比不做好</li>
</ul>
<h4>
<span class="ez-toc-section" id="2-_%E8%BF%87%E5%BA%A6%E8%87%AA%E8%B4%9F"></span>2.- 过度自负<span class="ez-toc-section-end"></span>
</h4>
<p>我们的经验告诉我们，过度的自负的人一般是意识不到自己的自负，下面是一些过度自负的特征，希望你可以从中检测一下自己是否过度自负了。</p>
<ul>
<li>觉得自己是最牛的程序员</li>
<li>总是打断谈话</li>
<li>你要求Code Reivew不是要检查代码，而是向大家炫耀你的代码</li>
</ul>
<p>在网上有太多的文章关于程序员的自负的问题，这里有两篇，你可以看看：一篇是Mike Bernat的 <a onclick="pageTracker._trackPageview('/outgoing/mikebernat.com/blog/Egoless_Programming_-_Developing_Without_the_Attitude');" href="http://mikebernat.com/blog/Egoless_Programming_-_Developing_Without_the_Attitude" target="_blank">Egoless programming（无自负编程）</a> 还有一个是stackoverflow.com 上的一个<a onclick="pageTracker._trackPageview('/outgoing/stackoverflow.com/questions/229393/how-do-you-control-your-programmer-ego');" href="https://stackoverflow.com/questions/229393/how-do-you-control-your-programmer-ego" target="_blank">贴子</a>。</p>
<h4>
<span class="ez-toc-section" id="3-_%E6%B2%9F%E9%80%9A%E4%B8%8D%E7%95%85"></span>3.- 沟通不畅<span class="ez-toc-section-end"></span>
</h4>
<p><a onclick="pageTracker._trackPageview('/outgoing/www.wisdomquotes.com/000747.html');" href="http://www.wisdomquotes.com/000747.html" target="_blank">“如果我要说十分钟，我需要一周做准备；如果说15分钟，我需要3天做准备；半个小时，我需要两天；如果说一个小时，我现在就准备好了。</a>” Woodrow Wilson</p>
<p>人类的沟通是我们最主要的活动。成为一个好的沟通者是一件很难的事情，我们不断地和别人交换关于设计，编码，文章的意见，并且我们每天都在试图说服别人我们自己的设计和想法会更好，更有道理……</p>
<p>然后，好的沟通者是那些当他们正在解释一些事情的时候，他们的解释是下面这个样子的：</p>
<ul>
<li>
<strong>专注。</strong>不跑题，没有废话。</li>
<li>
<strong>清晰</strong>. 很容易听懂。</li>
<li>
<strong>简明</strong>. 加一点就觉得多，少一点都觉得不够。</li>
</ul>
<p>要有一个好的沟通技巧，我们的建议如下：</p>
<ul>
<li>如果你觉得你沟通方面不够好的话，请事先准备你要表达的东西，努力做到专注，清晰和简明。</li>
<li>在交谈中，先听，后想，最后再说。</li>
<li>永远从对方的角度思考问题。</li>
</ul>
<h4>
<span class="ez-toc-section" id="4-_%E5%BF%98%E4%BA%86%E7%94%A8%E6%88%B7"></span>4.- 忘了用户<span class="ez-toc-section-end"></span>
</h4>
<p><em><a onclick="pageTracker._trackPageview('/outgoing/thinkexist.com/quotation/if_we_don-t_take_care_of_the_customer-somebody/335078.html');" href="http://thinkexist.com/quotation/if_we_don-t_take_care_of_the_customer-somebody/335078.html" target="_blank">“如果我们不关心我们的用户……那么别人会”</a></em></p>
<p>你的存在，你工作的意思只有一个原因——你的用户。我们在很多时间都会忘了这个事情。经常，我们在工作当中，技术会取代用户而占据了主要的位置，我们可以花费数月的时间来创建一个程序框架，但一个程序框架不会给用户代来任何的价值，我们不是说程序框架不重要，而是说，对于用户的需求来说，这是其次重要的东西。如果离开了用户的需求，我们所有的技术，算法或是精妙的设计将会变得什么也不是。</p>
<h4>
<span class="ez-toc-section" id="5-_%E4%B8%8D%E6%87%82%E5%B7%A5%E4%BD%9C%E7%9A%84%E8%BD%BB%E9%87%8D%E7%BC%93%E6%80%A5"></span>5.- 不懂工作的轻重缓急<span class="ez-toc-section-end"></span>
</h4>
<p>程序员总是喜欢去研究一些新的或自己感兴趣的东西，但对于软件工程来说，我们更需要知道所有事情的轻重缓急，要学会如何了解事情的优先级，这样才会让我们的工作事半功倍，而我们的工作也会更有效。比如，当用户的站点出现问题的时候，有些时候，我们的程序员过试地关注于问题的重现和原因，而忘记了用户的站点正在流血，无法进行生产。所以，一般来说，最重要的事情首先是恢复用户站点，然后才是去重现和调查问题。在我们的日常工作中，我们要处理很多事情，只有了解到了所有事情的轻重缓急，处理最重要最紧急的事情，我们才能够更好的安排自己的工作，才能够更好的完成我们的事情。不要以为这是一件很简单的事情，这需要我们不断地和别人沟通来了解事情的轻重缓急，事实证明，如果我们不懂工作中的轻重缓急，本来只有一件紧急的事情，如果处理不当，最后可能会演变成多件紧急事情，其它本来不紧急的事，后来也会变得很紧急，最终程序员们顾此失彼，苦不堪言。希望大家切记。</p>
<p>（全文完）</p>
</div>
<p></p>
<p align="center"><img alt="image placeholder" >
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/21589.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/20977.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/20765.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/20276.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/19612.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/19464.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
</ul>
</div></div>
<div id="post-ratings-1145" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="b831ce3b18">
<img alt="image placeholder" >
<meta itemprop="headline" content="程序员犯的非技术错误(Top 5)">
<meta itemprop="description" content="

对于程序开发者来说，有两种技术需要我们掌握，一个是技术上的能力，另一个是非技术上的能力。不幸的是，许多程序员过多地关注了技术上的能力，而忽略了非技术上的能力的培养，因此，我们的程序员们经常会有一些很不好的习惯，这里我们例举了程序员们最常犯的5个非技术的错误，与大家共勉。
1.- 缺乏团队纪律
“Discipline is the bridge between goals and acc...">
<meta itemprop="datePublished" content="2009-07-21T22:24:23+08:00">
<meta itemprop="dateModified" content="2009-07-21T22:26:15+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/1145.html">
<meta itemprop="author" content="陈皓">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/1145.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="3.92">
<meta itemprop="ratingCount" content="13">
</div>
</div>
<div id="post-ratings-1145-loading" class="post-ratings-loading">
<img alt="image placeholder" >
 ]]></content>
<pubDate>2009-07-21T22:24:23+08:00</pubDate>
<guid>https://coolshell.cn/articles/1145.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ 程序员惯用的解释(Top 25) ]]></title>
<link>https://coolshell.cn/articles/1174.html</link>
<content><![CDATA[ 
<p> 下面是程序员日常工作当中惯用的解释，或是口头禅。我们可以从这一个侧面来看看的程序员的特征和性格，相信你我都说过很多这样的话。不要太认真哦，呵呵。</p>
<ol>
<li>在我这边的电脑上可以工作啊……</li>
<li>我重来没有听过这样的事</li>
<li>昨天还能正常工作呢</li>
<li>好吧，这算一个BUG</li>
<li>这怎么可能？</li>
<li>这应该是机器或是环境的问题<br>
<span id="more-1174"></span>
</li>
<li>操作系统更新了吗？</li>
<li>一定又是用户那边的错</li>
<li>你的测试数据一定有问题</li>
<li>我从来没有碰过那边的代码！</li>
<li>是的，是的，我会准备完成</li>
<li>一定是你搞错了</li>
<li>哦，这正是我们开发的功能</li>
<li>我就快准备好了</li>
<li>
<div id="result_box" style="TEXT-ALIGN: left" dir="ltr">当然，还需要做的就只剩修改这些小Bug了。</div>
</li>
<li>
<div style="TEXT-ALIGN: left" dir="ltr">我会马上做完的</div>
</li>
<li>最近太不顺了</li>
<li>我不可能测试所有的case!</li>
<li>那根本不可能做到</li>
<li>我记得我已经改了这个bug了</li>
<li>我做完了，只不过还没有测试过</li>
<li>程序应该可以工作，只不过还没有测试过</li>
<li>一定是有人改了我的代码</li>
<li>你的机器上一定中了什么病毒或木马</li>
<li>就算是程序有问题，那又怎么样？</li>
</ol>
<p>呵呵，是这样的吗？希望你能分享你所经历的程序员的解释。</p>
<p align="center"><img alt="image placeholder" >
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/21589.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/20977.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/20765.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/20276.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/19612.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/19464.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
</ul>
</div></div>
<div id="post-ratings-1174" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="3e0e7616f3">
<img alt="image placeholder" >
<meta itemprop="headline" content="程序员惯用的解释(Top 25)">
<meta itemprop="description" content=" 下面是程序员日常工作当中惯用的解释，或是口头禅。我们可以从这一个侧面来看看的程序员的特征和性格，相信你我都说过很多这样的话。不要太认真哦，呵呵。

	在我这边的电脑上可以工作啊……
	我重来没有听过这样的事
	昨天还能正常工作呢
	好吧，这算一个BUG
	这怎么可能？
	这应该是机器或是环境的问题

	操作系统更新了吗？
	一定又是用户那边的错
	你的测试数据一定有问题
...">
<meta itemprop="datePublished" content="2009-07-24T11:32:35+08:00">
<meta itemprop="dateModified" content="2009-07-24T11:52:11+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/1174.html">
<meta itemprop="author" content="陈皓">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/1174.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="3.53">
<meta itemprop="ratingCount" content="17">
</div>
</div>
<div id="post-ratings-1174-loading" class="post-ratings-loading">
<img alt="image placeholder" >
 ]]></content>
<pubDate>2009-07-24T11:32:35+08:00</pubDate>
<guid>https://coolshell.cn/articles/1174.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ Internet 技术演变图 ]]></title>
<link>https://coolshell.cn/articles/1178.html</link>
<content><![CDATA[ 
<p>点击图片看大图</p>
<p style="text-align: center;"><a href="https://coolshell.cn/wp-content/uploads/2009/07/Internet.jpg"><img alt="image placeholder" >
<p><a href="https://coolshell.cn/wp-content/uploads/2009/07/Internet.jpg"></a></p>
<p align="center"><img alt="image placeholder" >
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/373.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/1839.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/12103.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/1218.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/428.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/11112.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
</ul>
</div></div>
<div id="post-ratings-1178" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="6e22801ba4">
<img alt="image placeholder" >
<meta itemprop="headline" content="Internet 技术演变图">
<meta itemprop="description" content="点击图片看大图

">
<meta itemprop="datePublished" content="2009-07-24T11:51:32+08:00">
<meta itemprop="dateModified" content="2009-07-24T11:51:32+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/1178.html">
<meta itemprop="author" content="陈皓">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/1178.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="2">
<meta itemprop="ratingCount" content="4">
</div>
</div>
<div id="post-ratings-1178-loading" class="post-ratings-loading">
<img alt="image placeholder" >
 ]]></content>
<pubDate>2009-07-24T11:51:32+08:00</pubDate>
<guid>https://coolshell.cn/articles/1178.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ 15个Web在线WYSIWYG编辑器 ]]></title>
<link>https://coolshell.cn/articles/1183.html</link>
<content><![CDATA[ 
<p>基于WEB的HTML 编辑器，WYSIWYG所见即所得的编辑器，或是一个富文本的编辑器，是我们在开发WEB应用时接收用户输入时必需要考虑的问题。下面是一些开源的WEB在线的WYSWIG编辑器。</p>
<h3>1. <a title="FCKeditor" href="http://www.fckeditor.net/" target="_blank">FCKeditor</a>
</h3>
<p>FCKeditor 这些在线编辑器中最著名的一个，其功能相当的强大，很像一个Web的Word软件。它可以方便地和ASP, ASP.NET, PHP, Java, Perl, Phyton 等Web开发语言所集成。并支持皮肤，拼写检查。其还可以配置成一个轻量级的编辑器。而且，它还有很多相当酷的功能。<br>
<img alt="image placeholder" >
<p><span id="more-1183"></span></p>
<h3>2. <a title="NicEdit" href="http://nicedit.com/" target="_blank">NicEdit</a>
</h3>
<p>NicEdit 是一个基于Javascript 编辑器，它可以很容易地被集成到任意的网页中。它还可以把网页上任何的element/div 转成可以编辑的标准的控件。<img alt="image placeholder" >
<p><span id="more-967"> </span></p>
<h3>3. <a title="TinyMCE" href="http://tinymce.moxiecode.com/" target="_blank">TinyMCE</a>
</h3>
<p>TinyMCE 是另一个很有名的所见即所得的编辑器，其受LGPL license控制。Wordpress的编辑器用的就是TinyMCE的。<br>
<img alt="image placeholder" >
<h3>4. <a title="jwysiwyg" href="https://code.google.com/p/jwysiwyg/" target="_blank">jwysiwyg</a>
</h3>
<p>jwysiwyg 是一个基于 jQuery 的WYSIWYG 插件，相当小，只有7kb的大小，而且相当的简单易用。但功能不多。<br>
<img alt="image placeholder" >
<h3>5. <a title="Yahoo! UI Library: Rich Text Editor" href="https://developer.yahoo.com/yui/editor/" target="_blank">Yahoo! UI Library: Rich Text Editor</a>
</h3>
<p>这个富文本编辑器是 Yahoo YUI 库中的一部分，用户或以非常简单的扩展它。这对于那些对YUI库很熟悉的人来说是最好的了。<br>
<img alt="image placeholder" >
<h3>6. <a title="Xinha" href="http://xinha.webfactional.com/" target="_blank">Xinha</a>
</h3>
<p>Xinha 也是一个相当强大的WYSIWYG HTML 编辑器，它可以兼容于所有的浏览器，并被开源社区所支持。<img alt="image placeholder" >
<h3>7. <a title="Openwysiwyg" href="http://www.openwebware.com/" target="_blank">Openwysiwyg</a>
</h3>
<p>Openwysiwyg 也是另一个开源的跨浏览器的 WYSIWYG 编辑器，别看他外表长得不怎么样，但他有很多的功能，特别是表格编辑的功能。<br>
<img alt="image placeholder" >
<h3>8. <a title="Free Rich Text Editor" href="http://freerichtexteditor.com/" target="_blank">Free Rich Text Editor</a>
</h3>
<p>Free Rich Text Editor 是一个超级简单并且是免费的WYSIWYG 编辑器，它非常容易用来实现和管理基于XHTML的文本。<br>
<img alt="image placeholder" >
<h3>9. <a title="WMD: The Wysiwym Markdown Editor" href="http://wmd-editor.com/" target="_blank">WMD: The Wysiwym Markdown Editor</a>
</h3>
<p>WMD 是一个简单和轻量级的编辑器，它主要用于Blog的评论系统或是论坛回贴系统。<br>
<img alt="image placeholder" >
<h3>10. <a title="TTW HTML Editor" href="http://koivi.com/WYSIWYG-Editor/" target="_blank">TTW HTML Editor</a>
</h3>
<p>TTW HTML Editor 也是一个很简单轻量级的WYSIWYG编辑器，其主要由Javascripts编写，其拼写检查由SpellerPages编写。这是一个很容易被调用的编辑器。</p>
<p><img alt="image placeholder" >
<h3>11. <a title="Free Text Box" href="http://freetextbox.com/" target="_blank">Free Text Box</a>
</h3>
<p>FreeTextBox 也是一个很常用的HTML editor，只不过它只支持ASP.NET。它可以兼容于所有的IE，Mozilla和Firefox。<br>
<img alt="image placeholder" >
<h3>12. <a title="WYMeditor" href="http://www.wymeditor.org/" target="_blank">WYMeditor</a>
</h3>
<p>WYMeditor 是一个 XHTML 的编辑器。WYMeditor 可以创建并生成非常完美的XHTML 结构的源码，并完全严格遵守W3C XHTML 规范。<br>
<img alt="image placeholder" >
<h3>13. <a title="BlueShoes Wysiwyg Editor" href="http://www.blueshoes.org/en/javascript/editor/" target="_blank">BlueShoes Wysiwyg Editor</a>
</h3>
<p>这是一个DHTML 和Javascript 开发的编辑器，它有很多非常酷的功能。例如：用户可以动态的改变编辑器的大小，选取特殊字符，以及选取颜色的功能。<br>
<img alt="image placeholder" >
<h3>14. <a title="markItUp" href="http://markitup.jaysalvat.com/home/" target="_blank">markItUp</a>
</h3>
<p>markItUp! 是一个jQuery 的JavaScript 插件。它非常的轻量，可以非常容易的定制。你甚至可以定义你最喜欢的键盘热键，以及添加额外的功能。<br>
<img alt="image placeholder" >
<h3>15. <a title="SPAW Editor" href="http://spaweditor.com/en/disp.php/en_products/en_spaw/en_spaw_intro" target="_blank">SPAW Editor</a>
</h3>
<p>这个WYSIWYG 编辑器是一个多页的编辑器，浮动式的工具条和很酷的用户接口，目前只有PHP 和.NET 版本。<br>
<img alt="image placeholder" >
<p>文章：<a href="http://www.webdesignbooth.com/15-really-useful-web-based-html-editors/" target="_blank">来源</a></p>
<p align="center"><img alt="image placeholder" >
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/1265.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/1837.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/5035.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/309.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/3301.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/19.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
</ul>
</div></div>
<div id="post-ratings-1183" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="eb2e260c97">
<img alt="image placeholder" >
<meta itemprop="headline" content="15个Web在线WYSIWYG编辑器">
<meta itemprop="description" content="基于WEB的HTML 编辑器，WYSIWYG所见即所得的编辑器，或是一个富文本的编辑器，是我们在开发WEB应用时接收用户输入时必需要考虑的问题。下面是一些开源的WEB在线的WYSWIG编辑器。
1. FCKeditor
FCKeditor 这些在线编辑器中最著名的一个，其功能相当的强大，很像一个Web的Word软件。它可以方便地和ASP, ASP.NET, PHP, Java, Perl, P...">
<meta itemprop="datePublished" content="2009-07-24T14:32:09+08:00">
<meta itemprop="dateModified" content="2009-07-24T14:32:09+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/1183.html">
<meta itemprop="author" content="陈皓">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/1183.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="2.33">
<meta itemprop="ratingCount" content="6">
</div>
</div>
<div id="post-ratings-1183-loading" class="post-ratings-loading">
<img alt="image placeholder" >
 ]]></content>
<pubDate>2009-07-24T14:32:09+08:00</pubDate>
<guid>https://coolshell.cn/articles/1183.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ 如何检测浏览器是否支持CSS3 ]]></title>
<link>https://coolshell.cn/articles/1186.html</link>
<content><![CDATA[ 
<p>如何检测用户的浏览器是否支持CSS3，我们需要使用HTML，CSS和JavaScript来完成这件事情。下面是步骤。</p>
<p><strong>1）先制作下面的HTML</strong></p>
<p></p>
<pre data-enlighter-language="html" class="EnlighterJSRAW">&lt;span id="check" rel="Detect"&gt;&lt;/span&gt;
</pre>
<p><strong>2）然后书写下面的CSS</strong></p>
<p></p>
<pre data-enlighter-language="html" class="EnlighterJSRAW">#check {
  display: none;
  width: 0;
  height: 0;
}
#check[rel^="D"] {
  display: block;
  width: 0;
  height: 0;
}
</pre>
<br>
<span id="more-1186"></span><br>
<strong>3）下面是JavaScripts的检测脚本</strong>
<p>请确保下面的代码放在HTML文件头。</p>
<p>[javascript]<br>
&lt;script type="text/javascript"&gt;<br>
var obj = document.getElementById("check");<br>
var file="special.css";<br>
if (window.getComputedStyle)<br>
    var stat = window.getComputedStyle(obj,null).getPropertyValue("display");<br>
else if (obj.currentStyle)<br>
    var stat = obj.currentStyle.display;<br>
var css3 = (stat == "block");<br>
if (css3) alert("CSS3 Supported.");<br>
else alert("CSS3 not supported.");<br>
&lt;/script&gt;</p>
<p>[/javascript]</p>
<p>文章：<a href="http://www.geocities.com/seanmhall2003/css3/detect.html" target="_self">来源</a></p>
<p align="center"><img alt="image placeholder" >
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/3903.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/17634.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/9666.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/6913.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/6840.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/6043.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
</ul>
</div></div>
<div id="post-ratings-1186" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="2794035748">
<img alt="image placeholder" >
<meta itemprop="headline" content="如何检测浏览器是否支持CSS3">
<meta itemprop="description" content='如何检测用户的浏览器是否支持CSS3，我们需要使用HTML，CSS和JavaScript来完成这件事情。下面是步骤。

1）先制作下面的HTML

[html]
&lt;span id="check" rel="Detect"&gt;&lt;/span&gt;
[/html]

2）然后书写下面的CSS

[html]
#check {
  display: none;
  width: 0;...'>
<meta itemprop="datePublished" content="2009-07-24T15:00:02+08:00">
<meta itemprop="dateModified" content="2009-07-24T15:00:35+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/1186.html">
<meta itemprop="author" content="陈皓">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/1186.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="1.5">
<meta itemprop="ratingCount" content="4">
</div>
</div>
<div id="post-ratings-1186-loading" class="post-ratings-loading">
<img alt="image placeholder" >
 ]]></content>
<pubDate>2009-07-24T15:00:02+08:00</pubDate>
<guid>https://coolshell.cn/articles/1186.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ 一些单元测试的Guideline ]]></title>
<link>https://coolshell.cn/articles/1192.html</link>
<content><![CDATA[ 
<p>Jimmy Bogard 曾经写过一篇文章： 《<a href="http://www.lostechies.com/blogs/jimmy_bogard/archive/2008/12/18/getting-value-out-of-your-unit-tests.aspx">从单元测试中获益</a>》，这这篇文章中给出了下面三条规则：</p>
<ol>
<li>“<strong>测试名应该从用户的角度描述是什么和为什么</strong>” – 这样一来，程序员可以从名字就可以知道用户需要什么样的软件行为。</li>
<li>“<strong>测试也是代码，同样也需要我们更多的爱</strong>” – 真实运行在生产环境下的代码不仅仅只是我们需要去关心和花心思的代码。对于单元测试中的代码同样也需要易读易维护，以及可重用的特性。“<em>我非常痛恨那些又长又复杂的测试代码，如果一个测试需要30行的单元测试代码，请把其放在一个方法中。一个长的测试步骤只会激怒程序员。如果你在正式的代码中都没有这么长的代码，那么为什么我们需要在测试代码中容忍这样的情形呢？</em>”</li>
<li>“<strong>不要只用一种固定的模式或组织风格</strong>”<em> – </em>有些时候，对于一些特殊的测试案例，标准的类设计模式，或一个固有的测试装置可能并不能有效的工作。</li>
</ol>
<p><span id="more-1192"></span></p>
<p><a href="http://tech.groups.yahoo.com/group/testdrivendevelopment/message/31412">Lior Friedman</a> 加上： “第0条 – 测试应该只测试单元其外部的行为，而不是内部的结构”。或者说，只测试对一个单元的期望，而不是这个单元的构成。</p>
<p><a href="https://groups.google.com/group/nunit-discuss/msg/56c9d75647731502?hl=en">Ravichandran Jv</a> 也加上了他的条例：</p>
<ol>
<li>一个测试一个断言（如果可能）。 </li>
<li>如果在测试中有“if else” 的语句，请把if和else两个分支拆分成两个测试案例。 </li>
<li>如果一个测试案例中也有if else 分枝，那么这个测试案例也需要被重构。</li>
<li>测试案例的命名代表了这种测试的类型。例如：TestMakeReservation() 和TestMakeNoReservation()是不一样的类型。</li>
</ol>
<p><a href="https://groups.google.com/group/nunit-discuss/msg/fb335c19a8a44821?hl=en">Charlie Poole</a>，NUnit的作者，重述了“一个测试一个断言”成“一个逻辑断言Logical Assert” – 他说， “有时候，因为我们测试API的表现不足，你需要写多个物理的Assert才能达到一个完整的结果。许多使用NUnit框架API进行单元测试的开发，很不可能只使用一个Assert就完成了一个测试”。</p>
<p><a href="http://www.bryancook.net/2008/06/test-naming-conventions-guidelines.html">Bryan Cook</a> 也提供了一个不错的可供考虑的列表：</p>
<ol>
<li>做到：对Fixture一致地命名</li>
<li>做到：使用namespace</li>
<li>做到：测试方法的命名和Setup/TearDown 一致</li>
<li>考虑：分离你的测试和开发代码</li>
<li>做到：测试的命令和被测试的功能一致</li>
<li>考虑：使用”Cannot” 前缀命名期望的异常</li>
</ol>
<p>Bryan 有超过 <a href="http://www.bryancook.net/2008/06/test-naming-conventions-guidelines.html">一打的建议</a>。</p>
<p>最后，有些人建议大家读一下 Gerard Meszaros的书： “<a href="https://www.amazon.com/xUnit-Test-Patterns-Refactoring-Addison-Wesley/dp/0131495054/ref=sr_1_1?ie=UTF8&amp;s=books&amp;qid=1248380993&amp;sr=8-1">xUnit Test Patterns: Refactoring Test Code</a>”</p>
<p>文章：<a href="http://www.infoq.com/news/2009/07/Better-Unit-Tests" target="_blank">链接</a></p>
<p align="center"><img alt="image placeholder" >
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/8593.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/8209.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/3281.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/21128.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/2593.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/1751.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
</ul>
</div></div>
<div id="post-ratings-1192" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="452c3bb389">
<img alt="image placeholder" >
<meta itemprop="headline" content="一些单元测试的Guideline">
<meta itemprop="description" content="Jimmy Bogard 曾经写过一篇文章： 《从单元测试中获益》，这这篇文章中给出了下面三条规则：

	“测试名应该从用户的角度描述是什么和为什么” – 这样一来，程序员可以从名字就可以知道用户需要什么样的软件行为。
	“测试也是代码，同样也需要我们更多的爱” – 真实运行在生产环境下的代码不仅仅只是我们需要去关心和花心思的代码。对于单元测试中的代码同样也需要易读易维护，以及可重用的特性。...">
<meta itemprop="datePublished" content="2009-07-27T16:24:57+08:00">
<meta itemprop="dateModified" content="2009-07-27T16:24:57+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/1192.html">
<meta itemprop="author" content="陈皓">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/1192.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="2.5">
<meta itemprop="ratingCount" content="6">
</div>
</div>
<div id="post-ratings-1192-loading" class="post-ratings-loading">
<img alt="image placeholder" >
 ]]></content>
<pubDate>2009-07-27T16:24:57+08:00</pubDate>
<guid>https://coolshell.cn/articles/1192.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ JRuby核心成员投奔Engine Yard ]]></title>
<link>https://coolshell.cn/articles/1194.html</link>
<content><![CDATA[ 
<p>新闻来源：<a href="https://www.computerworld.com/s/article/9135958/Sun_s_JRuby_team_jumps_ship_to_Engine_Yard?taxonomyId=57&amp;pageNumber=1">Computer World</a></p>
<p><img alt="image placeholder" >
<p>在两年半前，Sun招募了Charles Nutter 和Thomas Enebo，这两人叫“the JRuby Guys”，他们主要实现在Java虚似机上运行Ruby，后来Sun又招了一个叫Nick Sieger的人。今天，这三个核心开发人员会在下周一的时候到新公司上班。他们认为Oracle可能会不支持他们继续在JVM上运行Ruby这个事情，而JRuby又是他们的未来。</p>
<p><a href="https://www.engineyard.com/">Engine Yard</a>。成立仅两年、总部设在旧金山的Engine Yard，主要业务是为使用开放原始码开发环境Ruby on Rails的开发者处理系统布署和作业等事项。该公司协助开发者透过所谓的云计算，或第三方数据中心，执行应用软件。Engine Yard曾经从New Enterprise Associates和Amazon.com两家公司募得投资1500万美元。该公司正在进行云计算平台上的Rails计划。</p>
<p><span id="more-1194"></span></p>
<p>EngineYard公司的市场部副总裁Michael Mullany说，他们这所以招募了他们，是因为他们觉得JRuby的用户数量在增加，而他们公司并没有这方面的专业知识。并且，展示了JRuby在过去一年有40%的增涨态势。这个副总裁还说，JRuby的下一个阶段会是一个专业的开源的JRuby，但技术支持将是收费的。</p>
<p>Nick Sieger在Sun公司是 <a href="https://kenai.com/">Kenai</a> 项目的leader，他说下一代的JRuby将会允许开发人员以云的方式host他们的应用，就像SourceForge一样。</p>
<p>JRuby 的第四个核心开发者 Ola Bini，自从去年被ThoughtWorks招募后，还在那里工作。</p>
<p>Nutter说，JRuby的下一个版本是1.4，会在今年9月份发布，在这个版本，他们会让JRuby成为JVM上的一等公民，并让其成为JVM上最好的语言。当然，也会处理一些和Engine Yard相关的东西。</p>
<p>（全文完）</p>
<p align="center"><img alt="image placeholder" >
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/2631.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/3218.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/4891.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/6976.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/2746.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/17757.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
</ul>
</div></div>
<div id="post-ratings-1194" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="9cc8f04b05">
<img alt="image placeholder" >
<meta itemprop="headline" content="JRuby核心成员投奔Engine Yard">
<meta itemprop="description" content="新闻来源：Computer World

Sun公司的JRuby团队正在离开他们的老东家Sun，投奔Engine Yard公司。他们声称这是因为Oracle并购Sun后的前途不明朗的原因。Sun的新闻发言人已确定了这一消息的真实性。

在两年半前，Sun招募了Charles Nutter 和Thomas Enebo，这两人叫“the JRuby Guys”，他们主要实现在Java虚似机上运...">
<meta itemprop="datePublished" content="2009-07-28T16:46:36+08:00">
<meta itemprop="dateModified" content="2009-07-28T17:49:10+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/1194.html">
<meta itemprop="author" content="陈皓">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/1194.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="1">
<meta itemprop="ratingCount" content="3">
</div>
</div>
<div id="post-ratings-1194-loading" class="post-ratings-loading">
<img alt="image placeholder" >
 ]]></content>
<pubDate>2009-07-28T16:46:36+08:00</pubDate>
<guid>https://coolshell.cn/articles/1194.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ GPLv3的在开源社区中的占有量 ]]></title>
<link>https://coolshell.cn/articles/1197.html</link>
<content><![CDATA[ 
<p><img alt="image placeholder" >
<p>对于今天有 225,000 项目的 Google Code，这四分之一的 GPLv3 也是一个不小的数目了。如果我们假设Sourceforge.net 和 Codehaus 也有和Google Code相似的 GPLv3 比率的话，那么，今天使用 GPLv3 的项目将是一个很大的数量。</p>
<p><span id="more-1197"></span></p>
<p>这个数据是有意义的，尤其对于那些还在激活的项目，因为Google Code上的活跃的项目比Sourceforge要高得多，在Sourceforge上，估计只有12%的项目还处理激活状态（剩下的88%都是处理长期没有更新，当然也就一直在使用老版本的协议）。虽然和GPLv2比起，GPLv3还很少，但数量已经很大了。</p>
<p>以前写过一篇关于GPLv3的文章《<a href="http://blog.csdn.net/haoel/archive/2007/07/17/1696333.aspx">GPLv3：大教堂和集市的新一轮对抗</a>》，有兴趣的读者不妨一读。</p>
<p>下面是开源license的一个比例（时间：2009年7月），仅供参考：</p>
<p><a href="https://coolshell.cn/wp-content/uploads/2009/07/GPL.png"><img alt="image placeholder" >
<p>（全文完）</p>
<p align="center"><img alt="image placeholder" >
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/17497.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/8489.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/1863.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/1204.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/1608.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/1824.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
</ul>
</div></div>
<div id="post-ratings-1197" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="7209fb22ca">
<img alt="image placeholder" >
<meta itemprop="headline" content="GPLv3的在开源社区中的占有量">
<meta itemprop="description" content="2007年7月，GPLv3 发布，当时有164个项目加入，一年后，有大约两千个项目使用GPLv3协议，今天，Google开源programs office manager Chris DiBona向大家 宣布 在Google 开源项目中，使用GPLv3的项目至少有 56,000个。当然，这只是计算了在 Google Code 中的项目。

对于今天有 225,000 项目的 Google Co...">
<meta itemprop="datePublished" content="2009-07-28T17:46:21+08:00">
<meta itemprop="dateModified" content="2009-07-28T17:46:21+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/1197.html">
<meta itemprop="author" content="陈皓">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/1197.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="2">
<meta itemprop="ratingCount" content="6">
</div>
</div>
<div id="post-ratings-1197-loading" class="post-ratings-loading">
<img alt="image placeholder" >
 ]]></content>
<pubDate>2009-07-28T17:46:21+08:00</pubDate>
<guid>https://coolshell.cn/articles/1197.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ Python也Spring了 ]]></title>
<link>https://coolshell.cn/articles/1204.html</link>
<content><![CDATA[ 
<p><img alt="image placeholder" >
<p><span id="more-1204"></span></p>
<p>从这个项目的主页可以看到有下面这些Key features：</p>
<ul>
<li>
<a href="https://coolshell.cn/wp-admin/reference/html/objects.html">反转控制IoC</a> </li>
<li>
<a href="https://coolshell.cn/wp-admin/reference/html/aop.html">面向方面的编程(AOPAspect-oriented Programming)</a> </li>
<li>
<a href="https://coolshell.cn/wp-admin/reference/html/dao.html">数据库访问 (Data Access)</a> </li>
<li>
<a href="https://coolshell.cn/wp-admin/reference/html/transaction.html">事务管理 (Transaction Management)</a> </li>
<li>
<a href="https://coolshell.cn/wp-admin/reference/html/security.html">安全性 (Security)</a> </li>
<li>
<a href="https://coolshell.cn/wp-admin/reference/html/remoting.html">远程分布式 (Remoting)</a> </li>
<li>
<a href="https://coolshell.cn/wp-admin/reference/html/plugins.html">插件/命令行工具 (Plug-ins/command-line tool)</a> </li>
<li>
<a href="https://coolshell.cn/wp-admin/reference/html/samples.html">演示示例</a> 
<ul>
<li>
<a href="https://coolshell.cn/wp-admin/reference/html/samples.html#samples-petclinic">PetClinic</a> – 一个怎样使用框架的例子.</li>
<li>
<a href="https://coolshell.cn/wp-admin/reference/html/samples.html#samples-springwiki">Spring Wiki</a> – Wikis是存储和管理内容的有效方式!</li>
<li>
<a href="https://coolshell.cn/wp-admin/reference/html/samples.html#samples-springbot">Spring Bot</a> – 使用框架建立管理IRC通道的例子。</li>
</ul>
</li>
</ul>
<p>看上去好像不错，不过细想一下，是不是有点多余，有点画蛇添足啊？反正我有一种比较怪怪的感觉。不过10年前有人问我搜索引擎怎么样？我当时也觉得那个东西很无聊，呵呵。让我们看看未来这个东西是否真的能够进入企业级的解决方案。不过目前我们的Python社区好像几乎没有什么反应。</p>
<p>欢迎你留下你的看法。</p>
<p align="center"><img alt="image placeholder" >
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/18360.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/11265.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/10822.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/10169.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/7886.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/4939.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
</ul>
</div></div>
<div id="post-ratings-1204" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="51f3fc2f93">
<img alt="image placeholder" >
<meta itemprop="headline" content="Python也Spring了">
<meta itemprop="description" content="没想到啊，Python也有Spring的框架了，看看SpringPython项目主页（http://springpython.webfactional.com/）。这个项目的Leader是这样说的：Spring Python是基于Java的Spring框架（Spring Framework）和Spring安全（Spring Security）的一个分支，它以Python语言为目标。Spring提供...">
<meta itemprop="datePublished" content="2009-07-30T20:43:12+08:00">
<meta itemprop="dateModified" content="2009-07-30T20:43:12+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/1204.html">
<meta itemprop="author" content="陈皓">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/1204.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="1.6">
<meta itemprop="ratingCount" content="5">
</div>
</div>
<div id="post-ratings-1204-loading" class="post-ratings-loading">
<img alt="image placeholder" >
 ]]></content>
<pubDate>2009-07-30T20:43:12+08:00</pubDate>
<guid>https://coolshell.cn/articles/1204.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ 面试题：赛马问题 ]]></title>
<link>https://coolshell.cn/articles/1202.html</link>
<content><![CDATA[ 
<p><a href="https://coolshell.cn/wp-content/uploads/2009/07/Question.jpg"></a>据说，这是Google的面试题。面试题目如下：</p>
<p style="padding-left: 30px; text-align: left;"><span style="color: #008000;"><strong><a href="https://coolshell.cn/wp-content/uploads/2009/07/Question.jpg"><img alt="image placeholder" >
<p>很明显这是一个算法题，网上有很多贴子在讨论这个问题，不过都没有给出一个明确的答案。我想了想，想到下面的一个算法：</p>
<p style="padding-left: 30px;">1）分成5组A，B，C，D，E，比五场。然后根据每场结果分别给这五组内的五匹马排序（从快到慢）。<br>
2）每组的头名再赛一场，取走第一名，然后该组第二名顶上。<br>
3）重复第二步，直到选出前5名。</p>
<p>这个算法是比较笨的算法，总计需要<strong>赛10次，</strong>这个算法应该是万无一失的。现在的问题的就，如何优化这个算法，想了想，的确是有优化的空间的。也就是说，是可以少于10次的。</p>
<p><span id="more-1202"></span></p>
<p>想了一想，上面的那个算法自从第6次开始就使用5个排序数组的头名做“冒泡法”，总是挑一个最优秀的出来，其实，<strong><span style="color: #800000;">在第6次以后除了挑出最优秀的，我们还可以在每次比赛后淘汰一些速度不行的</span></strong>，淘汰的马匹数自然会比选出的更多，所以，一方面在找，另一方面在淘汰，找出前5名的速度应该会更快。</p>
<p>比如：我们假设比赛完第六场后，我们得到下面的排序：（每组排序是——快马从左到右，各组头名的排序是——快马从上到下）</p>
<p style="padding-left: 30px;">A组 A1 A2 A3 A4 A5<br>
B组 B1 B2 B3 B4 B5<br>
C组 C1 C2 C3 C4 C5<br>
D组 D1 D2 D3 D4 D5<br>
E组 E1 E2 E3 E4 E5</p>
<p>这样，我们不但知道，A1是25匹马里最快的马，而且我们可以淘汰近一半的马，比如E2，E3，E4，E5就可以全部淘汰了，为什么呢，因为比E2快的马有A1,B1,C1,D1,E1这五匹马，所以，E2后面的马是无法进入前五名了；同理，D3和其后面的也进入不了前5；同理，C4，C5，B5都可以淘汰。</p>
<p>于是，在第六轮后我们可以得知，除了A1外的Top 4必然在下面这些马中：</p>
<p>A组  A2 A3 A4 A5<br>
B组 B1 B2 B3 B4 <br>
C组 C1 C2 C3 <br>
D组 D1 D2 <br>
E组 E1</p>
<p>接下来的过程应该不必我多说了。重复前面的方法，尽可能淘汰无法进前N名的马，于是后面的马就越来越少，你所需要的比赛也会越来越少。</p>
<p>那么，对于这个题，聪明的你知道最少要比赛几场了吗？</p>
<p>举一反三，如果有64匹马，8个赛道呢？不失一般性，如果有N匹马，M个赛道呢？N = M*M，那么公式是什么呢？</p>
<p>期待你的答案！</p>
<p align="center"><img alt="image placeholder" >
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/7965.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/4429.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/4162.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/3961.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/3738.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/3445.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
</ul>
</div></div>
<div id="post-ratings-1202" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="2c20dff37d">
<img alt="image placeholder" >
<meta itemprop="headline" content="面试题：赛马问题">
<meta itemprop="description" content="据说，这是Google的面试题。面试题目如下：
一共有25匹马，有一个赛场，赛场有5个赛道，就是说最多同时可以有5匹马一起比赛。假设每匹马都跑的很稳定，不用任何其他工具，只通过马与马之间的比赛，试问，最少得比多少场才能知道跑得最快的5匹马？（不能使用撞大运的算法）
很明显这是一个算法题，网上有很多贴子在讨论这个问题，不过都没有给出一个明确的答案。我想了想，想到下面的一个算法：

1）分成5...">
<meta itemprop="datePublished" content="2009-07-30T22:35:35+08:00">
<meta itemprop="dateModified" content="2011-04-11T08:06:22+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/1202.html">
<meta itemprop="author" content="陈皓">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/1202.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="4.05">
<meta itemprop="ratingCount" content="21">
</div>
</div>
<div id="post-ratings-1202-loading" class="post-ratings-loading">
<img alt="image placeholder" >
 ]]></content>
<pubDate>2009-07-30T22:35:35+08:00</pubDate>
<guid>https://coolshell.cn/articles/1202.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ 编程引言补充 ]]></title>
<link>https://coolshell.cn/articles/1212.html</link>
<content><![CDATA[ 
<p>之前收集过《<a title="22条经典的编程引言 - 1,565 次浏览" href="https://coolshell.cn/articles/808.html">22条经典的编程引言</a>》，发现还有一些未收录的，下面这些引言也很有意思的，希望你喜欢。</p>
<p>“The first 90% of the code accounts for the first 90% of the development time. The remaining 10% of the code accounts for the other 90% of the development time.” – Tom Cargill <br>
 “最开始的90%的代码使用了程序员90%的时间，剩下的10%的代码也需要90%的开发时间”——Tom Cargill（这不就是中国谚语——“行百步半九十”）</p>
<p>　</p>
<p>“In order to understand recursion, one must first understand recursion.” – Author Unknown <br>
 “要知道什么是‘递归’，你首先需要知道‘递归’”——无名氏</p>
<p><span id="more-1212"></span></p>
<p>　</p>
<p>“I have always wished for my computer to be as easy to use as my telephone; my wish has come true because I can no longer figure out how to use my telephone.” – Bjarne Stroustrup <br>
“我总是希望电脑能和电话一样好用，现在我的这个愿望成真了，因为我已经不知道怎么使用我的电话了”– Bjarne Stroustrup</p>
<p>　</p>
<p> “There are two ways of constructing a software design: One way is to make it so simple that there are obviously no deficiencies, and the other way is to make it so complicated that there are no obvious deficiencies. The first method is far more difficult.” -C.A.R. Hoare<br>
“我们有两个方法来进行软件设计：一个是让其足够的简单以至于让BUG无法藏身；另一个就是让其足够的复杂，让人找不到BUG。前者更难一些” — C.A.R. Hoare</p>
<p>　</p>
<p>  “If builders built buildings the way programmers wrote programs, then the first woodpecker that came along would destroy civilization.” – Gerald Weinberg<br>
“如果建筑工人盖房子就像程序员写程序一样，那么只需要一只啄木鸟就可以摧毁人类文明”– Gerald Weinberg</p>
<p>　</p>
<p>“Nine people can’t make a baby in a month.” – Fred Brooks <br>
“九个人不能只用一个月就能生出孩子来”– Fred Brooks （这是对人月计算法的一个讽刺）</p>
<p> 　</p>
<p>“Before software can be reusable it first has to be usable.” – Ralph Johnson<br>
“在软件可被重用前，它必需要可以被用”– Ralph Johnson</p>
<p> 　</p>
<p>程序员之歌<br>
99 little bugs in the code,<br>
99 bugs in the code,<br>
fix one bug, compile it again,<br>
101 little bugs in the code.<br>
101 little bugs in the code….<br>
(Repeat until BUGS = 0)</p>
<p>　</p>
<p>Any fool can write code that a computer can understand. Good programmers write code that humans can understand. <em>–Martin Fowler<br>
</em>任何一个傻子都能写出让电脑能懂的代码，而只有好的程序员可以写出让人能看懂的代码 — Martin Fowler</p>
<p>　</p>
<p><strong>Wirth’s law:</strong> Software gets slower faster than hardware gets faster. —<a href="https://en.wikipedia.org/wiki/Niklaus_Wirth" target="_blank"><em>Niklaus Wirth</em></a><br>
Wirth定律，软件把性能变慢的速度要快于硬件把性期变快的速度。– Niklaus Wirth</p>
<p>　</p>
<p> Better train people and risk they leave – than do nothing and risk they stay.<br>
—<em>Anonymous<br>
</em>就算是培训的员工会离开，这也好过他们什么也不做却不会离开。——无名氏</p>
<p>　</p>
<p>Good judgment comes from experience, and experience comes from bad judgment. —<a href="https://en.wikipedia.org/wiki/Fred_Brooks">Frederick P. Brooks</a><br>
“好的判断来自于经验，而经验则来自于坏的判断”</p>
<p>　</p>
<p>UNIX is simple. It just takes a genius to understand its simplicity <em>–Dennis Ritchie<br>
</em>UNIX 简单的，但只有天才才能知道他的简单 — Dennis Rithie</p>
<p>　</p>
<p>Unix was not designed to stop people from doing stupid things, because that would also stop them from doing clever things. 　<em>–Doug Gwyn<br>
</em>Unix 并不是设计成——阻止人们做那些愚蠢的事，因为那同样会阻止人们做聪明的事。——Doug Gwyn</p>
<p>　</p>
<p>如果你想看更多这样的引言，你可以浏览下面这个网页：<br>
<a href="http://www.comp.nus.edu.sg/~damithch/pages/SE-quotes.htm">http://www.comp.nus.edu.sg/~damithch/pages/SE-quotes.htm</a></p>
<p align="center"><img alt="image placeholder" >
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/19612.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/3335.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/3672.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/20276.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/21649.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/8619.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
</ul>
</div></div>
<div id="post-ratings-1212" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="0a20012792">
<img alt="image placeholder" >
<meta itemprop="headline" content="编程引言补充">
<meta itemprop="description" content="之前收集过《22条经典的编程引言》，发现还有一些未收录的，下面这些引言也很有意思的，希望你喜欢。

“The first 90% of the code accounts for the first 90% of the development time. The remaining 10% of the code accounts for the other 90% of the devel...">
<meta itemprop="datePublished" content="2009-07-31T18:27:55+08:00">
<meta itemprop="dateModified" content="2009-07-31T23:57:20+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/1212.html">
<meta itemprop="author" content="陈皓">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/1212.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="3.86">
<meta itemprop="ratingCount" content="7">
</div>
</div>
<div id="post-ratings-1212-loading" class="post-ratings-loading">
<img alt="image placeholder" >
 ]]></content>
<pubDate>2009-07-31T18:27:55+08:00</pubDate>
<guid>https://coolshell.cn/articles/1212.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ 简单实用的Code Review工具 ]]></title>
<link>https://coolshell.cn/articles/1218.html</link>
<content><![CDATA[ 
<p><img alt="image placeholder" >
<p>长时间以来，Code Review需要有一些有效的工具来支持，这样我们就可以更容易，更有效率地来进行代码审查工作。下面是5个开源的代码审查工具，他们可以帮助你更容易地进行这项活动。</p>
<p><strong>1. <a href="http://www.review-board.org/" target="_blank">Review board</a>:</strong><br>
<a href="http://www.review-board.org/" target="_blank">Review board</a> 是一个 基于web 的工具，是由 <a href="https://www.djangoproject.com/" target="_blank">django</a> 和<a href="https://www.python.org/" target="_blank">python</a>设计的。 <a href="http://www.review-board.org/" target="_blank">Review board</a> 可以帮助我们追踪待决代码的改动，并可以让Code-Review更为容易和简练。尽管<a href="http://www.review-board.org/" target="_blank">Review board</a> 最初被设计在<a href="https://www.vmware.com/" target="_blank">VMware</a>项目中使用，但现在其足够地通用。当前，其支持这些代码版本管理软件： <a href="http://subversion.tigris.org/" target="_blank">SVN</a>, CVS, <a href="http://www.perforce.com/" target="_blank">Perforce</a>, <a href="https://git-scm.com/" target="_blank">Git</a>, <a href="http://bazaar-vcs.org/" target="_blank">Bazaar</a>, 和<a href="http://www.selenic.com/mercurial/wiki/" target="_blank">Mercurial</a>.</p>
<p><span id="more-1218"></span></p>
<p>Yahoo 是<a href="http://www.review-board.org/" target="_blank">review-board</a>的其中一个用户。</p>
<p style="padding-left: 30px;">“<a href="http://www.review-board.org/" target="_blank">Review board</a> 已经改变了代码评审的方式，其可以强迫高质量的代码标准和风格，并可以成为程序员编程的指导者。每一次，当你访问search.yahoo.com 时，其代码都是使用 <a href="http://www.review-board.org/" target="_blank">Review board</a>工具Review过的。 We’re great fans of your work!” – Yahoo! Web Search</p>
<h3><a href="http://www.review-board.org/media/screenshots/2009/02/02/review-requests.png"><img alt="image placeholder" >
<div><a href="http://www.review-board.org/media/screenshots/2009/02/02/diffviewer.png"><img alt="image placeholder" >
<p><strong>2. <a href="http://codestriker.sourceforge.net/" target="_blank">Codestriker</a>:</strong><br>
<a href="http://codestriker.sourceforge.net/" target="_blank">Codestriker</a> 也是一个基于Web的应用，其主要使用 GCI-Perl 脚本支持在线的代码审查。<a href="http://codestriker.sourceforge.net/" target="_blank">Codestriker</a> 可以集成于CVS, <a href="http://subversion.tigris.org/" target="_blank">Subversion</a>, <a href="https://www-01.ibm.com/software/awdtools/clearcase/" target="_blank">ClearCase</a>, <a href="http://www.perforce.com/" target="_blank">Perforce</a> 和Visual SourceSafe。并有一些插件可以提供支持其它的源码管理工具。</p>
<p>David Sitsky 是 <a href="http://codestriker.sourceforge.net/" target="_blank">Codestriker</a> 的作者，并也是最活跃的开发人员之一。 Jason Remillard 是另一个活路的开发者，并给这个项目提供了最深远最有意义的贡献。大量的程序员贡献他们的代码给 <a href="http://codestriker.sourceforge.net/" target="_blank">Codestriker</a> 项目，导致了这个项目空前的繁荣。</p>
<p><img alt="image placeholder" >
<p><strong>3. <a href="http://groogle.sourceforge.net/" target="_blank">Groogle</a>:</strong><br>
<a href="http://groogle.sourceforge.net/" target="_blank">Groogle</a> 是一个基于WEB的代码评审工具。 <a href="http://groogle.sourceforge.net/" target="_blank">Groogle</a> 支持和 <a href="http://subversion.tigris.org/" target="_blank">Subversion</a> 集成。它主要提供如下的功能：</p>
<ul>
<li>各式各样语言的语法高亮。</li>
<li>支持整个版本树的比较。</li>
<li>支持当个文件不同版本的diff功能，并有一个图形的版本树。</li>
<li>邮件通知所有的Reivew的人当前的状态。</li>
<li>认证机制。</li>
</ul>
<p><img alt="image placeholder" >
<p><strong>4. <a href="https://code.google.com/p/rietveld/" target="_blank">Rietveld</a>:</strong><br>
<a href="https://code.google.com/p/rietveld/" target="_blank">Rietveld</a> 由Guido van Rossum 开发（他是Python的创造者，现在是Google的员工），这个工具是基于Mondrian 工具，作者一开始是为了Google 开发的，并且，它在很多方面和<a href="http://www.review-board.org/" target="_blank">Review board</a> 很像。它也是一个基于Web的应用，并在<a href="https://code.google.com/appengine/" target="_blank">Google App Engine</a> 上。它使用了目前最流行的Web开发框架 <a href="https://www.djangoproject.com/" target="_blank">django</a> 并支持 <a href="http://subversion.tigris.org/" target="_blank">Subversion</a> 。当前，任何一个使用 Google Code 的项目都可以使用 <a href="https://code.google.com/p/rietveld/" target="_blank">Rietveld</a> 并且使用 <a href="https://www.python.org/" target="_blank">python</a> <a href="http://subversion.tigris.org/" target="_blank">Subversion</a> 服务器。当然，它同样支持其它的Subversion服务器。</p>
<p><span style="position: relative;"><a href="javascript:dyn.onClickNextTbn()"><img alt="image placeholder" >
<p><span style="position: relative;"> </span></p>
<p><strong>5.<a href="http://jcodereview.sourceforge.net/" target="_blank"> JCR</a></strong><br>
<a href="http://jcodereview.sourceforge.net/" target="_blank">JCR</a> 或者叫做 JCodeReview 也是一个基于WEB界面的最初设计给Reivew Java 语言的一个工具。当然，现在，它可以被用于其它的非Java的代码。</p>
<p><a href="http://jcodereview.sourceforge.net/" target="_blank">JCR</a> 主要想协助：</p>
<ul>
<li>
<strong>审查者</strong>。所有的代码更改都会被高亮，以及大多数语言的语法高亮。Code extracts 可以显示代码评审意见。如果你正在Review Java的代码，你可以点击代码中的类名来查看相关的类的声明。</li>
<li>
<strong>项目所有者</strong>。可以 轻松创建并配置需要Review的项目，并不需要集成任何的软件配置管理系统（SCM）。</li>
<li>
<strong>流程信仰者</strong>。 所有的评语都会被记录在数据库中，并且会有状态报告，以及各种各样的统计。</li>
<li>
<strong>架构师和开发者</strong>。 这个系统也可以让我们查看属于单个文件的评语，这样有利于我们重构代码。</li>
</ul>
<p><a href="http://jcodereview.sourceforge.net/" target="_blank">JCR</a> 主要面对的是大型的项目，或是非常正式的代码评审，从这方面看来，他并不像上面的那些工具。</p>
<p><img alt="image placeholder" >
<p><strong><a href="https://code.google.com/p/jupiter-eclipse-plugin/" target="_blank">Jupiter</a></strong>：最后我们要提一下<a href="https://code.google.com/p/jupiter-eclipse-plugin/" target="_blank">Jupiter</a>，这是另一个代码review的工具你可以去考虑使用的，它是一个Eclipse IDE 的插件。</p>
<p>文章：<a href="http://open-tube.com/easy-code-review-tools/" target="_blank">来源</a></p>
<p align="center"><img alt="image placeholder" >
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/4875.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/18024.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/17757.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/11432.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/8990.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/8745.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
</ul>
</div></div>
<div id="post-ratings-1218" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="5c443b0c9c">
<img alt="image placeholder" >
<meta itemprop="headline" content="简单实用的Code Review工具">
<meta itemprop="description" content="Code Review中文应该译作“代码审查”或是“代码评审”，这是一个流程，当开发人员写好代码后，需要让别人来review一下他的代码，这是一种有效发现BUG的方法。由此，我们可以审查代码的风格、逻辑、思路……，找出问题，以及改进代码。因为这是代码刚刚出炉的时候，所以，这也是代码重构，代码调整，代码修改的最佳时候。所以，Code Review是编码实现中最最重要的一个环节。

长时间以来，C...">
<meta itemprop="datePublished" content="2009-08-04T17:09:13+08:00">
<meta itemprop="dateModified" content="2012-09-21T10:29:19+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/1218.html">
<meta itemprop="author" content="陈皓">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/1218.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="3.67">
<meta itemprop="ratingCount" content="6">
</div>
</div>
<div id="post-ratings-1218-loading" class="post-ratings-loading">
<img alt="image placeholder" >
 ]]></content>
<pubDate>2009-08-04T17:09:13+08:00</pubDate>
<guid>https://coolshell.cn/articles/1218.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ Javascripts加密库 ]]></title>
<link>https://coolshell.cn/articles/1231.html</link>
<content><![CDATA[ 
<p>一般说来，使用HTTP协议是不加密的，所有的数据都是以纯文本方式提交的，就算是你提交数据时，也是使用纯文本的方式发送。只有HTTPS协议会有SSL加密数据，但一般来说，HTTPS需要服务器端进行SSL设置，并有些麻烦。而jCryption这个jQuery插件能够加密由Forms提交的POST/GET数据。jCryption使用RSA公钥密码算法加密，另外，该项目还提供一个PHP文件来处理数据的解密。</p>
<p><a href="http://www.jcryption.org/"><img alt="image placeholder" >
<p><span id="more-1231"></span></p>
<p>这个库是一个开源库，也是一个同时使用MIT和GPL协议的项目。</p>
<p>你需要注意的是，这个库无法取代SSL，使用这个库，你依然可能受到<a href="https://en.wikipedia.org/wiki/Man-in-the-middle_attack" target="_blank">MITM攻击</a><a href="http://www.jcryption.org/"></a>（中间人攻击 Man-in-the-middle-attacks）</p>
<p>主页：<a href="http://www.jcryption.org/">http://www.jcryption.org/</a><br>
下载：<a href="https://code.google.com/p/jcryption/downloads/list">http://code.google.com/p/jcryption/downloads/list</a><br>
示例：<a href="http://www.jcryption.org/demo/">http://www.jcryption.org/demo/</a></p>
<p align="center"><img alt="image placeholder" >
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/2507.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/8593.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/830.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/664.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/20765.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/5651.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
</ul>
</div></div>
<div id="post-ratings-1231" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="7c0bf02838">
<img alt="image placeholder" >
<meta itemprop="headline" content="Javascripts加密库">
<meta itemprop="description" content="一般说来，使用HTTP协议是不加密的，所有的数据都是以纯文本方式提交的，就算是你提交数据时，也是使用纯文本的方式发送。只有HTTPS协议会有SSL加密数据，但一般来说，HTTPS需要服务器端进行SSL设置，并有些麻烦。而jCryption这个jQuery插件能够加密由Forms提交的POST/GET数据。jCryption使用RSA公钥密码算法加密，另外，该项目还提供一个PHP文件来处理数据的解密...">
<meta itemprop="datePublished" content="2009-08-10T18:16:29+08:00">
<meta itemprop="dateModified" content="2009-08-10T18:16:29+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/1231.html">
<meta itemprop="author" content="陈皓">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/1231.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="2.33">
<meta itemprop="ratingCount" content="3">
</div>
</div>
<div id="post-ratings-1231-loading" class="post-ratings-loading">
<img alt="image placeholder" >
 ]]></content>
<pubDate>2009-08-10T18:16:29+08:00</pubDate>
<guid>https://coolshell.cn/articles/1231.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ 几个有趣的漫画 ]]></title>
<link>https://coolshell.cn/articles/1234.html</link>
<content><![CDATA[ 
<p style="text-align: left;">下面的图片告诉你——行销，广告，公关，品牌有什么差别。</p>
<p style="text-align: center;"><img alt="image placeholder" >
<strong>市场营销</strong></p>
<p style="text-align: left;"><span id="more-1234"></span></p>
<p style="text-align: center;"><img alt="image placeholder" >
<strong>公共关系(软文)</strong></p>
<p style="text-align: center;"><img alt="image placeholder" >
<strong>广告</strong></p>
<p style="text-align: center;"><img alt="image placeholder" >
<strong>品牌</strong></p>
<p style="text-align: left;">那么，Apple，Google和你的公司的差别是什么呢？</p>
<p style="text-align: center;"><img alt="image placeholder" >
<p style="text-align: left;"> </p>
<p style="text-align: left;">最后，让我们来看一个“真人版”的眼神跟着鼠标走的FLASH吧，单击下面的图片访问网站：<a href="http://cubo.cc/" target="_blank">http://cubo.cc/</a></p>
<p style="text-align: center;"><a href="http://cubo.cc/" target="_blank"><img alt="image placeholder" >
<p> </p>
<p>（全文完）</p>
<p align="center"><img alt="image placeholder" >
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/1310.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/7965.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/340.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/2424.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/5651.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/10739.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
</ul>
</div></div>
<div id="post-ratings-1234" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="144b0ea9ba">
<img alt="image placeholder" >
<meta itemprop="headline" content="几个有趣的漫画">
<meta itemprop="description" content="下面的图片告诉你——行销，广告，公关，品牌有什么差别。


市场营销



公共关系(软文)


广告


品牌
那么，Apple，Google和你的公司的差别是什么呢？

 
最后，让我们来看一个“真人版”的眼神跟着鼠标走的FLASH吧，单击下面的图片访问网站：http://cubo.cc/

 

（全文完）">
<meta itemprop="datePublished" content="2009-08-10T18:44:10+08:00">
<meta itemprop="dateModified" content="2009-08-10T18:44:10+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/1234.html">
<meta itemprop="author" content="陈皓">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/1234.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="4.33">
<meta itemprop="ratingCount" content="6">
</div>
</div>
<div id="post-ratings-1234-loading" class="post-ratings-loading">
<img alt="image placeholder" >
 ]]></content>
<pubDate>2009-08-10T18:44:10+08:00</pubDate>
<guid>https://coolshell.cn/articles/1234.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ 23,148,855,308,184,500 ]]></title>
<link>https://coolshell.cn/articles/1242.html</link>
<content><![CDATA[ 
<p> 上个月VISA信用卡出事了，某个美国人在加油站买了一包香烟，于是他的信用卡里就有了标题那个数字的钱“$23,148,855,308,184,500”，注意这可以美刀啊，相当于美国整个国家国债的N倍。</p>
<p>程序员们开始疯狂了，他们在stackoverflow.com上开始人肉debug这个问题（<a href="https://stackoverflow.com/questions/1133581/is-23-148-855-308-184-500-a-magic-number-or-sheer-chance" target="_blank">贴子</a>）。排名第一的回答（564 votes）说，这个数字转成十六进制是：0x2020 2020 2020 1250，很明显，前面的若干个0X20表示的是空格，也就是说，程序错误地处理了空格。于是本回答后的跟贴把这个回答推举成了本年度最牛的debug——”best debug of the year”，后面还有人说这个人应该在NASA工作，继而有人跟贴，应该是VISA而不是NASA……</p>
<p>当然，也有人有不同的意见……</p>
<p><span id="more-1242"></span></p>
<p>排名第二个贴子(仅有排名第一的零头 67 votes)发表了不同的意见，贴主说，VISA报道说当时全球在那个星期内发生了大约13000起这样的事情，而且，全世界在报道相似的事情（<a rel="nofollow" href="http://www.credit.com/news/personal-finance/2009-07-18/customers-see-erroneous-credit-card-charges-of-23-quadrillion.html">报道一</a>，<a href="http://www.1010wins.com/Visa-Accidentally-Bills-New-York-Teen--23-Quadrill/4867372" target="_self">报道二</a>），但所有的报道都是相同的数字——23,148,855,308,184,500。如果前面是空格，那么最后的一个字节是，0x1250怎么可能会是一样的呢？所以，他并不认为空格被解释了，他觉得一定是某个地方出错了，并不像一楼所说的那么简单。</p>
<p><img alt="image placeholder" >
<p><img alt="image placeholder" >
<p><img alt="image placeholder" >
<p><img alt="image placeholder" >
<img alt="image placeholder" >
<p>为什么说这个事呢？主要有两个目的：</p>
<ul>
<li>其一、软件总是会有很多Bug要我们去debug，bug的症状并不代表着那就是Bug的原因，但通过Bug的症状推理出Bug的原因，有时候真是很像一个侦探要做的事情，从上面的这个故事中，我们可以看出这样的能力的重要性。要有这样的推理能力，需要有很强的基础知识，以及丰富的经验。</li>
<li>其二、<a href="https://stackoverflow.com/" target="_blank">StackOverflow.com</a>是一个很不错的类似于“百度知道”但要比其好N倍的与编程相关的站点，相当的不错，你会经常光顾这个站点吗？</li>
</ul>
<p>最后，大家可以看看这个贴子后面的一些人的相法，各种说法都有，包括一个灌水的，来轻松一下：</p>
<p style="padding-left: 30px;">That’s the exact amount I intend leaving to my children after I’m dead.</p>
<p>呵呵。（全文完）</p>
<p align="center"><img alt="image placeholder" >
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/5075.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/3721.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/2529.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/1719.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/1525.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/1502.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
</ul>
</div></div>
<div id="post-ratings-1242" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="12695bc133">
<img alt="image placeholder" >
<meta itemprop="headline" content="23,148,855,308,184,500">
<meta itemprop="description" content=" 上个月VISA信用卡出事了，某个美国人在加油站买了一包香烟，于是他的信用卡里就有了标题那个数字的钱“$23,148,855,308,184,500”，注意这可以美刀啊，相当于美国整个国家国债的N倍。

程序员们开始疯狂了，他们在stackoverflow.com上开始人肉debug这个问题（贴子）。排名第一的回答（564 votes）说，这个数字转成十六进制是：0x2020 2020 202...">
<meta itemprop="datePublished" content="2009-08-11T17:22:10+08:00">
<meta itemprop="dateModified" content="2009-08-11T17:22:10+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/1242.html">
<meta itemprop="author" content="陈皓">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/1242.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="4.5">
<meta itemprop="ratingCount" content="8">
</div>
</div>
<div id="post-ratings-1242-loading" class="post-ratings-loading">
<img alt="image placeholder" >
 ]]></content>
<pubDate>2009-08-11T17:22:10+08:00</pubDate>
<guid>https://coolshell.cn/articles/1242.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ IE的CSS相关的BUG ]]></title>
<link>https://coolshell.cn/articles/1245.html</link>
<content><![CDATA[ 
<p><img alt="image placeholder" >
<p>目前，这个网站上包含了 <strong>28 个“普通的Bug”</strong> ， <strong>4 个“布局方面的Bug”</strong> ， <strong>6 个“可以绕开的Bug”</strong> 以及 <strong>1 个“IE崩溃的Bug”</strong>，所有的这些Bug有39个指南和48个解决方法。这个列表目前更新到 <strong>2009年8月11日，19:50:22 </strong></p>
<p>下面是所有的bug列表，你可以点击每个BUG名的链接查看更详细的说明。</p>
<div id="ez-toc-container" class="ez-toc-v2_0_17 counter-hierarchy counter-decimal ez-toc-grey">
<div class="ez-toc-title-container">
<p class="ez-toc-title">目录</p>
<span class="ez-toc-title-toggle"></span>
</div>
<nav><ul class="ez-toc-list ez-toc-list-level-1">
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-1" href="#%E6%99%AE%E9%80%9ABug" title="普通Bug">普通Bug</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-2" href="#%E5%B8%83%E5%B1%80%E7%B1%BB_Bug" title="布局类 Bug">布局类 Bug</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-3" href="#%E4%B8%8D%E6%94%AF%E6%8C%81%E7%9A%84%E5%8A%9F%E8%83%BD" title="不支持的功能">不支持的功能</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-4" href="#%E7%A8%8B%E5%BA%8F%E5%B4%A9%E6%BA%83_Bug" title="程序崩溃 Bug">程序崩溃 Bug</a></li>
</ul></nav>
</div>
<h4>
<span class="ez-toc-section" id="%E6%99%AE%E9%80%9ABug"></span>普通Bug<span class="ez-toc-section-end"></span>
</h4>
<p>这部分 <abbr title="Internet Explorer">IE</abbr> 的 bug 是比较普通的无法归到其它种类，或是同时属于多个种类的Bug。</p>
<p><span id="more-1245"></span></p>
<table border="0">
<thead>
<tr>
<th>名称</th>
<th>IE的版本</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><a title="'Hover White Background Ignore Bug' tutorial" href="http://haslayout.net/css/view?tut=Hover-White-Background-Ignore-Bug">Hover White Background Ignore Bug</a></td>
<td>IE7</td>
<td>background 不会因为 :hover而改变</td>
</tr>
<tr>
<td><a title="'IE7 Child Selector Comment Bug' tutorial" href="http://haslayout.net/css/view?tut=IE7-Child-Selector-Comment-Bug">IE7 Child Selector Comment Bug</a></td>
<td>IE7</td>
<td>一个 selector 包含了一个子的selector，如果后面跟着一个注释，则会被完全忽略。</td>
</tr>
<tr>
<td><a title="'Star HTML Bug' tutorial" href="http://haslayout.net/css/view?tut=Star-HTML-Bug">Star HTML Bug</a></td>
<td>IE6</td>
<td>* html selector 在 IE6 中没有被忽略</td>
</tr>
<tr>
<td><a title="'IE6 !important Ignore Bug' tutorial" href="http://haslayout.net/css/view?tut=IE6--important-Ignore-Bug">IE6 !important Ignore Bug</a></td>
<td>IE6</td>
<td>!important 关键字会忽略，如果有相同的属性被设置了</td>
</tr>
<tr>
<td><a title="'PNG Image and Background Color Mismatch' tutorial" href="http://haslayout.net/css/view?tut=PNG-Image-and-Background-Color-Mismatch">PNG Image and Background Color Mismatch</a></td>
<td>IE8 及以下版本</td>
<td>背景颜色和指定的图片的颜色不一致。而他们本来是一致的。IE认为这是他一个Feature。太可笑了。</td>
</tr>
<tr>
<td><a title="'No Auto Margin Center Pseudo-Bug' tutorial" href="http://haslayout.net/css/view?tut=No-Auto-Margin-Center-Pseudo-Bug">No Auto Margin Center Pseudo-Bug</a></td>
<td>IE8 及以下版本</td>
<td>如果把margins 设置成 `auto` ，IE不会把组件放置在中间的位置。所有的浏览器都会，只有IE不会。</td>
</tr>
<tr>
<td><a title="':first-line !important Rule Ignore Bug' tutorial" href="http://haslayout.net/css/view?tut=-first-line--important-Rule-Ignore-Bug">:first-line !important Rule Ignore Bug</a></td>
<td>IE8</td>
<td>如果在伪class :first-line 内使用!important，那么其所有定义会被忽略。</td>
</tr>
<tr>
<td><a title="':first-letter Ignore Bug' tutorial" href="http://haslayout.net/css/view?tut=-first-letter-Ignore-Bug">:first-letter Ignore Bug</a></td>
<td>IE6</td>
<td>整个:first-letter 的属性定义会被除数完全忽略。</td>
</tr>
<tr>
<td><a title="':first-letter !important Rule Ignore Bug' tutorial" href="http://haslayout.net/css/view?tut=-first-letter--important-Rule-Ignore-Bug">:first-letter !important Rule Ignore Bug</a></td>
<td>IE8</td>
<td>如果在伪class :first-letter内使用!important，那么其所有定义会被忽略。</td>
</tr>
<tr>
<td><a title="'Partial Click Bug v2' tutorial" href="http://haslayout.net/css/view?tut=Partial-Click-Bug-v2">Partial Click Bug v2</a></td>
<td>IE8以</td>
<td>设置了整个区域是可以点击的，但在IE中只有文本可以点击。</td>
</tr>
<tr>
<td><a title="'Staircase Bug' tutorial" href="http://haslayout.net/css/view?tut=Staircase-Bug">Staircase Bug</a></td>
<td>below IE8</td>
<td>浮动的元素排序起来就像一个楼梯。</td>
</tr>
<tr>
<td><a title="'Disappearing List Background Bug' tutorial" href="http://haslayout.net/css/view?tut=Disappearing-List-Background-Bug">Disappearing List Background Bug</a></td>
<td>IE6</td>
<td>B &lt;li&gt;, &lt;dt&gt;, &lt;dd&gt; 没有背景。</td>
</tr>
<tr>
<td><a title="'noscript Ghost Bug' tutorial" href="http://haslayout.net/css/view?tut=noscript-Ghost-Bug">noscript Ghost Bug</a></td>
<td>IE8 and below</td>
<td>&lt;noscript&gt; 标识中只有 borders/background 才有用。</td>
</tr>
<tr>
<td><a title="'No Transparency Click Bug' tutorial" href="http://haslayout.net/css/view?tut=No-Transparency-Click-Bug">No Transparency Click Bug</a></td>
<td>IE8 and below</td>
<td>背景透明的图片在作为链接时，并且其“filter”被设置成了PNG透明，但其背景还是不可点击。</td>
</tr>
<tr>
<td><a title="'List Drop Shift Bug' tutorial" href="http://haslayout.net/css/view?tut=List-Drop-Shift-Bug">List Drop Shift Bug</a></td>
<td>IE8</td>
<td>在&lt;li&gt;中的内容被换行了。</td>
</tr>
<tr>
<td><a title="'No Increase on &lt;ol&gt; Numbers Bug' tutorial" href="http://haslayout.net/css/view?tut=No-Increase-on--ol--Numbers-Bug">No Increase on &lt;ol&gt; Numbers Bug</a></td>
<td>below IE8</td>
<td>&lt;ol&gt; 中的 &lt;li&gt; 列表序号不会增加。</td>
</tr>
<tr>
<td><a title="'No Bullets on &lt;ul&gt; and &lt;ol&gt; Bug' tutorial" href="http://haslayout.net/css/view?tut=No-Bullets-on--ul--and--ol--Bug">No Bullets on &lt;ul&gt; and &lt;ol&gt; Bug</a></td>
<td>below IE8</td>
<td>在&lt;ul&gt; 和 &lt;ol&gt; 中看不到列表序号/数字了。</td>
</tr>
<tr>
<td><a title="'No line-height Vertical Center on Images Bug' tutorial" href="http://haslayout.net/css/view?tut=No-line-height-Vertical-Center-on-Images-Bug">No line-height Vertical Center on Images Bug</a></td>
<td>IE8以下版</td>
<td>图片使用line-height 方法不能垂直居中</td>
</tr>
<tr>
<td><a title="'No Background Image Bug' tutorial" href="http://haslayout.net/css/view?tut=No-Background-Image-Bug">No Background Image Bug</a></td>
<td>IE8及以下版</td>
<td>在IE中使用background无法定义背景图</td>
</tr>
<tr>
<td><a title="'Custom Cursor Bug' tutorial" href="http://haslayout.net/css/view?tut=Custom-Cursor-Bug">Custom Cursor Bug</a></td>
<td>IE8及以下版</td>
<td>自定义鼠标不工作</td>
</tr>
<tr>
<td><a title="'Leaking Background Bug' tutorial" href="http://haslayout.net/css/view?tut=Leaking-Background-Bug">Leaking Background Bug</a></td>
<td>IE6</td>
<td>背景从一个元件的内部溢出到外部</td>
</tr>
<tr>
<td><a title="'Expanding Height Bug' tutorial" href="http://haslayout.net/css/view?tut=Expanding-Height-Bug">Expanding Height Bug</a></td>
<td>IE6</td>
<td>元件的高度比指定的要长得多。</td>
</tr>
<tr>
<td><a title="'Expanding Width Bug' tutorial" href="http://haslayout.net/css/view?tut=Expanding-Width-Bug">Expanding Width Bug</a></td>
<td>IE6</td>
<td>元件的宽度比指定的要长得多。</td>
</tr>
<tr>
<td><a title="'Double Margin Bug' tutorial" href="http://haslayout.net/css/view?tut=Double-Margin-Bug">Double Margin Bug</a></td>
<td>IE6</td>
<td>float元件的左和右的空白（margins）被加倍了。</td>
</tr>
<tr>
<td><a title="'Negative Margin Bug' tutorial" href="http://haslayout.net/css/view?tut=Negative-Margin-Bug">Negative Margin Bug</a></td>
<td>IE8以下版</td>
<td>如果使用负数来指定页白（margins）里面的元件会被外面的元件所遮挡。</td>
</tr>
<tr>
<td><a title="'Italics Float Bug' tutorial" href="http://haslayout.net/css/view?tut=Italics-Float-Bug">Italics Float Bug</a></td>
<td>IE6</td>
<td>float的元件中的字体会被设置成倾斜。</td>
</tr>
<tr>
<td><a title="'3px Gap Bug aka Text Jog Bug' tutorial" href="http://haslayout.net/css/view?tut=3px-Gap-Bug-aka-Text-Jog-Bug">3px Gap Bug aka Text Jog Bug</a></td>
<td>IE6</td>
<td>下一个float的元件不是有一个3px的空隙，就是被换行了。</td>
</tr>
<tr>
<td><a title="'Text-Align Bug' tutorial" href="http://haslayout.net/css/view?tut=Text-Align-Bug">Text-Align Bug</a></td>
<td>IE8以下版</td>
<td>text-align属性会影响整个元件内的所有内容。</td>
</tr>
</tbody>
</table>
<h4>
<span class="ez-toc-section" id="%E5%B8%83%E5%B1%80%E7%B1%BB_Bug"></span>布局类 Bug<span class="ez-toc-section-end"></span>
</h4>
<table border="0">
<caption>
</caption>
<thead>
<tr>
<th>名称</th>
<th>IE的版本</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><a title="'Border Chaos Bug' tutorial" href="http://haslayout.net/css/view?tut=Border-Chaos-Bug">Border Chaos Bug</a></td>
<td>IE6</td>
<td>连框显示是混乱的</td>
</tr>
<tr>
<td><a title="'Sub-Hover Bug' tutorial" href="http://haslayout.net/css/view?tut=Sub-Hover-Bug">Sub-Hover Bug</a></td>
<td>IE6</td>
<td>一些selectors 如 a:hover foo{} 无法正常工作</td>
</tr>
<tr>
<td><a title="'Partial Click Bug' tutorial" href="http://haslayout.net/css/view?tut=Partial-Click-Bug">Partial Click Bug</a></td>
<td>IE6</td>
<td>在定义了display: block的链接中(&lt;a&gt;) 只有文本是可以点的。</td>
</tr>
<tr>
<td><a title="'Disappearing Content Bug' tutorial" href="http://haslayout.net/css/view?tut=Disappearing-Content-Bug">Disappearing Content Bug</a></td>
<td>IE6</td>
<td>当我们滚动窗口的时候，或是最大化最小化窗品的时候，有一些内容会重复显示。</td>
</tr>
</tbody>
</table>
<h4>
<span class="ez-toc-section" id="%E4%B8%8D%E6%94%AF%E6%8C%81%E7%9A%84%E5%8A%9F%E8%83%BD"></span>不支持的功能<span class="ez-toc-section-end"></span>
</h4>
<table border="0">
<thead>
<tr>
<th>名称</th>
<th>IE的版本</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><a title="'No Child Selector Support Workaround' tutorial" href="http://haslayout.net/css/view?tut=No-Child-Selector-Support-Workaround">No Child Selector Support Workaround</a></td>
<td>IE6</td>
<td>子 selector 无效</td>
</tr>
<tr>
<td><a title="'Max-Height Workaround' tutorial" href="http://haslayout.net/css/view?tut=Max-Height-Workaround">Max-Height Workaround</a></td>
<td>IE6</td>
<td>max-height 无效</td>
</tr>
<tr>
<td><a title="'Max-Width Workaround' tutorial" href="http://haslayout.net/css/view?tut=Max-Width-Workaround">Max-Width Workaround</a></td>
<td>IE6</td>
<td>max-width 无效</td>
</tr>
<tr>
<td><a title="'Opacity' tutorial" href="http://haslayout.net/css/view?tut=Opacity">Opacity</a></td>
<td>IE8及以下版</td>
<td>opacity 属性无效</td>
</tr>
<tr>
<td><a title="'Min-Width Workaround' tutorial" href="http://haslayout.net/css/view?tut=Min-Width-Workaround">Min-Width Workaround</a></td>
<td>IE6</td>
<td>min-width 属性无效</td>
</tr>
<tr>
<td><a title="'Min-Height Workaround' tutorial" href="http://haslayout.net/css/view?tut=Min-Height-Workaround">Min-Height Workaround</a></td>
<td>IE6</td>
<td>min-height 属性无效</td>
</tr>
</tbody>
</table>
<h4>
<span class="ez-toc-section" id="%E7%A8%8B%E5%BA%8F%E5%B4%A9%E6%BA%83_Bug"></span>程序崩溃 Bug<span class="ez-toc-section-end"></span>
</h4>
<p>这个BUG可以导致整个 <abbr title="Internet Explorer">IE</abbr> 崩溃。</p>
<table border="0">
<thead>
<tr>
<th>名称</th>
<th>IE的版本</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><a title="'Hover Crash Bug' tutorial" href="http://haslayout.net/css/view?tut=Hover-Crash-Bug">Hover Crash Bug</a></td>
<td>IE6</td>
<td>当你把鼠标移上 :hover 的链接时，浏览器会崩溃</td>
</tr>
</tbody>
</table>
<p>(全文完)</p>
<p align="center"><img alt="image placeholder" >
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/3013.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/17634.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/9666.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/8170.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/7186.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/6913.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
</ul>
</div></div>
<div id="post-ratings-1245" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="915ba30b44">
<img alt="image placeholder" >
<meta itemprop="headline" content="IE的CSS相关的BUG">
<meta itemprop="description" content="这个网页（http://haslayout.net/css/index）上例举了所有的IE和CSS相关的BUG。如果你在开发网页的时候，你需要看看。

目前，这个网站上包含了 28 个“普通的Bug” ， 4 个“布局方面的Bug” ， 6 个“可以绕开的Bug” 以及 1 个“IE崩溃的Bug”，所有的这些Bug有39个指南和48个解决方法。这个列表目前更新到 2009年8月11日，19:5...">
<meta itemprop="datePublished" content="2009-08-12T18:47:43+08:00">
<meta itemprop="dateModified" content="2009-08-12T18:56:29+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/1245.html">
<meta itemprop="author" content="陈皓">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/1245.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="2.75">
<meta itemprop="ratingCount" content="4">
</div>
</div>
<div id="post-ratings-1245-loading" class="post-ratings-loading">
<img alt="image placeholder" >
 ]]></content>
<pubDate>2009-08-12T18:47:43+08:00</pubDate>
<guid>https://coolshell.cn/articles/1245.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ G1新型垃圾回收器一瞥 ]]></title>
<link>https://coolshell.cn/articles/1252.html</link>
<content><![CDATA[ 
<div id="ez-toc-container" class="ez-toc-v2_0_17 counter-hierarchy counter-decimal ez-toc-grey">
<div class="ez-toc-title-container">
<p class="ez-toc-title">目录</p>
<span class="ez-toc-title-toggle"></span>
</div>
<nav><ul class="ez-toc-list ez-toc-list-level-1">
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-1" href="#G1%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8" title="G1垃圾回收器">G1垃圾回收器</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-2" href="#%E5%B1%9E%E6%80%A7" title="属性">属性</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-3" href="#%E6%8F%8F%E8%BF%B0" title="描述">描述</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-4" href="#%E4%BD%BF%E7%94%A8_G1" title="使用 G1">使用 G1</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-5" href="#%E7%8A%B6%E6%80%81" title="状态">状态</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-6" href="#%E7%9B%B8%E5%85%B3%E8%B5%84%E6%BA%90" title="相关资源">相关资源</a></li>
</ul></nav>
</div>
<h4>
<span class="ez-toc-section" id="G1%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8"></span>G1垃圾回收器<span class="ez-toc-section-end"></span>
</h4>
<p>“G1垃圾回收”的英文全称是 <em>Garbage-First Garbage Collector</em> （又被称作G1 GC），这是一个新型的垃圾回收器，由JDK 7中的Java HotSpot VM 引入。这个技术曾经在Java SE 6 Update 14版本中出现过一个试验性的，然后 G1 被 HotSpot的 反应快速（low-latency）的 <em>Concurrent Mark-Sweep</em> GC （简称 <em>CMS</em>）长期取代。</p>
<h4>
<span class="ez-toc-section" id="%E5%B1%9E%E6%80%A7"></span>属性<span class="ez-toc-section-end"></span>
</h4>
<p>G1 是一个“服务器风格（server-style）”的垃圾回收器，它主要有下面的这些属性：</p>
<p><span id="more-1252"></span></p>
<ul>
<li>
<strong>并行和并发。</strong> G1 可以从今天最新的硬件中获得并行的能力。它能够使用所有可用的CPU（CPU多核，硬件多线程，等）来加速它的 “stop-the-world” 机制（这个机制简称STW，即，在执行垃圾收集算法时，Java应用程序的其他所有除了垃圾收集帮助器线程之外的线程都被挂起）。</li>
<li>
<strong>分代处理。</strong> 就像其它的HotSpot 垃圾回收器，G1 是分代的，也就是说，它在处理新分配的对象（年轻代）和已经生存了一段时间的对象（年老代）时会不同，它会更多地考虑一些新创建的对象实例，因为越新创建的就越有最大的可能性被回收，老对象只是偶尔访问一下。对于大多数的Java应用来说，这个机制可以极大地提高回收效率。</li>
<li>
<strong>紧凑内存（碎片整理）。</strong> 不像CMS，G1 会对堆进行内存整理。压缩可以消除潜在的内存碎片的问题，这样程序就可以更长时间的平滑运行。</li>
<li>
<strong>预见性的。</strong> G1 比起 CMS 来有更多的预见性。这个主要还是用来消除内存碎片的问题。内存的碎片少了，Stop-the-World的暂停时间也会被减少。</li>
</ul>
<h4>
<span class="ez-toc-section" id="%E6%8F%8F%E8%BF%B0"></span>描述<span class="ez-toc-section-end"></span>
</h4>
<p>比起其它的HotSpot 垃圾回收器来说，G1 使用了一种非常不同寻常的方法来管理堆内存的布局。在G1中，在对象新生代和老一代上没有在物理上把他们分隔开来。取而代之的是，它把一个连续的堆内存拆分成了几个相同大小的区域。新产生的对象和老的对象都会被放在一系列可能不会连续的区域中。之所以这样做，就是为了让G1可以更灵活地移动老对象所占用的资源给新的对象。</p>
<p>G1中的内存收集会发生 “疏散暂停”，当内存从一系例区域开始回收时，这些区域所引用的 <em>collection set</em> 会被疏散到另一些区域中，这样，我们会有一整块的内存来重新被申请。疏散会发生整个程序的暂停，但“疏散”这些内存可以被并行运行，当然，你要有多核或多线程技术来支持。绝大多数的“疏散暂停”会去收集那些可用的比较新的内存区域，因此，这和其它的 HotSpot 垃圾回收器是相同的。偶而才会去查看一下老区域中的内存是否可以回收。</p>
<p>在 CMS中，其周期性的执行一个 <em>concurrent marking phase</em>。 这个phase中最主要的事情是，识别哪些老的区域中充满了可以回收的对象，因为这是最有效率和最合适的回收。但在G1中，G1不会执行那个所谓的 <em>concurrent sweeping phase</em>， 取而代之的是，去识别那些的最合适的老的区域是在并发的“疏散暂停”中进行的（后面会做介绍）。</p>
<h4>
<span class="ez-toc-section" id="%E4%BD%BF%E7%94%A8_G1"></span>使用 G1<span class="ez-toc-section-end"></span>
</h4>
<p>G1 目前仍然还在试验阶段，使用下面两个参数可以打开G1机制：</p>
<p><code>-XX:+UnlockExperimentalVMOptions -XX:+UseG1GC</code></p>
<p>下面是设置垃圾回收器的暂停时间：</p>
<p><code>-XX:MaxGCPauseMillis =50</code> (设置暂停时间为 50ms)</p>
<p>在G1中，你还可以给垃圾回收器的暂停设置一个时间间隔：</p>
<p><code>-XX:GCPauseIntervalMillis =200</code> (设置暂停时间间隔 200ms)</p>
<p>注意，上面的两个参数只是代表目标，回收器并不保证。他们可能在某些情况下工作地很好，也可能在其它情况下不行，所以，垃圾回收器并不总是服从这两个参数设置。</p>
<p>另外，新生代的内存大小可以被设置，这个参数同样会影响“疏散暂停”的时间：</p>
<p><code>-XX:+G1YoungGenSize=512m</code> (设置新生代内存为 512兆字节)</p>
<p>G1 同样可以使用survivor 空间，是的，这就是多少个区域。大小可以由通用的参数所指定(如： <code>-XX:SurvivorRatio=6</code>).</p>
<p>最后，如果你要发挥G1的所有潜能，你可以尝试设置下面两个参数，它们默认上是关闭的，因为在一些很稀有的情况下，这两个参数会发生race condition（竞争条件）:</p>
<p><code>-XX:+G1ParallelRSetUpdatingEnabled<br>
-XX:+G1ParallelRSetScanningEnabled</code></p>
<p>还有一件事是G1能够报告比其它垃圾回收站更详细的信息，当然，你需要设置下面这个参数：</p>
<p> <code>-XX:+PrintGCDetails</code></p>
<p>这个参数会输出很多有用的信息供你查看性能与以 trouble-shooting。如果你想要简单的日志，你可以把这个开关设置到 <code>-verbosegc</code> 。</p>
<h4>
<span class="ez-toc-section" id="%E7%8A%B6%E6%80%81"></span>状态<span class="ez-toc-section-end"></span>
</h4>
<p>G1 开发目前主要关注于解决一些残留的稳定性的问题，以及提高性能，并且去除下面的限制：</p>
<ul>
<li>G1 并不完全支持 JVM Tool Interface (JVM TI) 或 Java Management Extensions (JMX)，所以，这些监控和管理工具无法正确地作用于G1。</li>
<li>G1 不支持增量的永生代collection。如果一个应用在卸载很多的类，因些需要很多的永生代Collection，目前的G1还不支持，不过最终版会支持。</li>
<li>关于垃圾回收器的暂停时间，G1的表现比起CMS来说是时好时坏。所以，还有很多工作需要让G1的表现更加稳定，绝不能比CMS还差，不然G1还有什么意思呢？</li>
</ul>
<h4>
<span class="ez-toc-section" id="%E7%9B%B8%E5%85%B3%E8%B5%84%E6%BA%90"></span>相关资源<span class="ez-toc-section-end"></span>
</h4>
<ul>
<li>Description of HotSpot GCs: Memory Management in the Java HotSpot Virtual Machine White Paper: <a href="https://coolshell.cn/j2se/reference/whitepapers/memorymanagement_whitepaper.pdf">http://java.sun.com/j2se/reference/whitepapers/memorymanagement_whitepaper.pdf</a>
</li>
<li>The original CMS paper: Printezis, T. and Detlefs, D. 2000. A generational mostly-concurrent garbage collector. In <em>Proceedings of the 2nd international Symposium on Memory Management</em> (Minneapolis, Minnesota, United States, October 15 – 16, 2000). <a href="https://portal.acm.org/citation.cfm?id=362422.362480" target="_blank">http://portal.acm.org/citation.cfm?id=362422.362480</a> (requires access to ACM’s portal)</li>
<li>The original G1 paper: Detlefs, D., Flood, C., Heller, S., and Printezis, T. 2004. Garbage-first garbage collection. In Proceedings of the 4th international Symposium on Memory Management (Vancouver, BC, Canada, October 24 – 25, 2004). <a href="https://portal.acm.org/citation.cfm?id=1029879" target="_blank">http://portal.acm.org/citation.cfm?id=1029879</a> (requires access to ACM’s portal)</li>
<li>G1 talk from JavaOne 2008: <a href="http://developers.sun.com/learning/javaoneonline/j1sessn.jsp?sessn=TS-5419&amp;yr=2008">http://developers.sun.com/learning/javaoneonline/j1sessn.jsp?sessn=TS-5419&amp;yr=2008</a>
</li>
</ul>
<p>文章：<a href="http://java.sun.com/javase/technologies/hotspot/gc/g1_intro.jsp" target="_blank">来源</a></p>
<p></p>
<p align="center"><img alt="image placeholder" >
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/11541.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/20845.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/18360.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/11454.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/11175.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/9703.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
</ul>
</div></div>
<div id="post-ratings-1252" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="6e2da3a72c">
<img alt="image placeholder" >
<meta itemprop="headline" content="G1新型垃圾回收器一瞥">
<meta itemprop="description" content="G1垃圾回收器
“G1垃圾回收”的英文全称是 Garbage-First Garbage Collector （又被称作G1 GC），这是一个新型的垃圾回收器，由JDK 7中的Java HotSpot VM 引入。这个技术曾经在Java SE 6 Update 14版本中出现过一个试验性的，然后 G1 被 HotSpot的 反应快速（low-latency）的 Concurrent Mark-S...">
<meta itemprop="datePublished" content="2009-08-13T21:54:26+08:00">
<meta itemprop="dateModified" content="2009-08-13T21:54:26+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/1252.html">
<meta itemprop="author" content="陈皓">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/1252.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="3.33">
<meta itemprop="ratingCount" content="6">
</div>
</div>
<div id="post-ratings-1252-loading" class="post-ratings-loading">
<img alt="image placeholder" >
 ]]></content>
<pubDate>2009-08-13T21:54:26+08:00</pubDate>
<guid>https://coolshell.cn/articles/1252.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ 你用Linux命令行吗？ ]]></title>
<link>https://coolshell.cn/articles/1256.html</link>
<content><![CDATA[ 
<p><a href="https://coolshell.cn/wp-content/uploads/2009/08/photo_gimp.png"></a><a href="https://coolshell.cn/wp-content/uploads/2009/08/photo_gimp.png"></a>想一想，如果你要把一个图片的尺寸改小一点，你会怎么办？当然，我一定会启动一个图形编辑软件，然后，打开图片文件，从菜单上选择相关的工具选项，更改大小，然后保存文件。就算是在Linux下，我可能也是这么干的，比如Ubuntu下也是这样，如下图：</p>
<p style="text-align: center;"><a href="https://coolshell.cn/wp-content/uploads/2009/08/photo_gimp.png"><img alt="image placeholder" >
<p>但其实，如果你用命令行来更改图片大小的话，一条语句就可以搞定了。如：</p>
<pre style="padding-left: 30px; text-align: left;"><strong>convert -resize 300 profile.jpg profile_small.jpg</strong></pre>
<p>当然，如果你要使用这样的命令，你需要安装<a href="https://www.imagemagick.org/script/index.php">Imagemagick</a>，你可通过apt-get install imagemagick来安装一下。</p>
<p><span id="more-1256"></span></p>
<p>不管怎么说，很简单吧，下面还有几个：</p>
<p><strong>1）给图片加阴影</strong></p>
<p>给图片加阴影可以使用下面的这个命令：</p>
<pre style="padding-left: 30px; text-align: left;"><strong>convert screenshot.jpg
\( +clone -background black -shadow 60×5+0+5 \)
+swap -background white -layers merge +repage shadow.jpg</strong></pre>
<p>效果如下：</p>
<p><a href="https://coolshell.cn/wp-content/uploads/2009/08/photo_gimp.png"></a><a href="https://coolshell.cn/wp-content/uploads/2009/08/photo_gimp.png"></a><a href="https://coolshell.cn/wp-content/uploads/2009/08/screenshot-suse.jpg"><img alt="image placeholder" >
<p><strong>2）把两个MP3拼起来</strong></p>
<pre style="padding-left: 30px; text-align: left;"><strong>cat 1.mp3 2.mp3 &gt; combined.mp3</strong></pre>
<p><strong>3）克隆一个硬盘设备</strong></p>
<pre style="padding-left: 30px; text-align: left;"><strong>dd if=/dev/hda of=/dev/hdb</strong></pre>
<p><strong>4）把ISO文件刻录光盘</strong></p>
<pre style="padding-left: 30px; text-align: left;"><strong>cdrecord -v speed=8 dev=0,0,0 name_of_iso_file.iso</strong></pre>
<p><strong>5）视频格式转换</strong></p>
<p>AVI和Mpeg转换</p>
<pre style="padding-left: 30px; text-align: left;"><strong>ffmpeg -i video_origine.avi video_finale.mpg
ffmpeg -i video_origine.mpg video_finale.avi</strong></pre>
<p>查看这个<a href="http://www.catswhocode.com/blog/19-ffmpeg-commands-for-all-needs" target="_blank">链接</a>，你可以看看ffmpeg可以干得更多。</p>
<p><strong>6）替换文件中的文本</strong></p>
<pre style="padding-left: 30px; text-align: left;"><strong>sed ’s/#FF0000/#0000FF/g’ main.css</strong></pre>
<p>把main.css中的#FF0000(红色)替换成#0000FF（蓝色）</p>
<p> </p>
<p>如果你非常喜欢命令行的话，那么你一定要看一下下面这本书（免费在线）</p>
<p>GNU/Linux命令行介绍：<a href="https://flossmanuals.net/gnulinux">http://en.flossmanuals.net/gnulinux</a></p>
<p>（全文完）</p>
<p align="center"><img alt="image placeholder" >
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/7829.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/19219.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/18654.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/18360.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/17998.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/17416.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
</ul>
</div></div>
<div id="post-ratings-1256" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="fd1c7d6c55">
<img alt="image placeholder" >
<meta itemprop="headline" content="你用Linux命令行吗？">
<meta itemprop="description" content="想一想，如果你要把一个图片的尺寸改小一点，你会怎么办？当然，我一定会启动一个图形编辑软件，然后，打开图片文件，从菜单上选择相关的工具选项，更改大小，然后保存文件。就算是在Linux下，我可能也是这么干的，比如Ubuntu下也是这样，如下图：

但其实，如果你用命令行来更改图片大小的话，一条语句就可以搞定了。如：
convert -resize 300 profile.jpg profile_...">
<meta itemprop="datePublished" content="2009-08-14T00:19:58+08:00">
<meta itemprop="dateModified" content="2009-08-14T00:19:58+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/1256.html">
<meta itemprop="author" content="陈皓">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/1256.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="3.5">
<meta itemprop="ratingCount" content="6">
</div>
</div>
<div id="post-ratings-1256-loading" class="post-ratings-loading">
<img alt="image placeholder" >
 ]]></content>
<pubDate>2009-08-14T00:19:58+08:00</pubDate>
<guid>https://coolshell.cn/articles/1256.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ 恢复Ext3下被删除的文件 ]]></title>
<link>https://coolshell.cn/articles/1265.html</link>
<content><![CDATA[ 
<p> 下面是这个教程将教你如何在Ext3的文件系统中恢复被rm掉的文件。</p>
<p>假设我们有一个文件名叫 ‘test.txt’</p>
<div style="margin-left: 40px;">
<span style="font-style: italic;"> </span><span style="font-weight: bold;"><span style="font-style: italic;">$ls -il test.txt</span></span><br style="font-style: italic;"><span style="font-weight: bold;"><span style="font-style: italic;"> 15 -rw-rw-r– 2 root root 20 Apr 17 12:08 test.txt</span></span><br style="font-style: italic;"><span style="font-weight: bold;"> </span>
</div>
<p>注意：: “-il” 选项表示显示文件的i-node号（15），如果你不知道Unix/Linux文件系统的“I结点”的话，你有必要先补充一下相关的知识。简单说来，i结点就是操作管理文件的一个标识号。</p>
<p><span id="more-1265"></span></p>
<p>我们再看一下其内容：</p>
<div style="margin-left: 40px;">
<span style="font-weight: bold;"><span style="font-style: italic;">$ cat test.txt</span></span><br style="font-style: italic;"><span style="font-weight: bold;"><span style="font-style: italic;">this is test file</span></span><br style="font-style: italic;">
</div>
<p>好，现在我们开始删除文件：.</p>
<div style="margin-left: 40px;">
<span style="font-weight: bold;"><span style="font-style: italic;">$rm test.txt</span></span><br style="font-style: italic;"><span style="font-weight: bold;"><span style="font-style: italic;">rm: remove write-protected regular file `test.txt’? y</span></span>
</div>
<p> </p>
<h4>使用 Journal 和 Inode 号恢复</h4>
<p>注意，如果你删除文件后重启了系统，那么，相关的文件 journal 会丢失，我们也就无法恢复文件了。所以，恢复文件的前提是，Journal不能丢失，即，系统不能重启。</p>
<p>因为我们已经知道 test.txt 文件的 inode 号是 15，所以我们可以使用 debugfs 命令来查看：</p>
<div style="margin-left: 40px;">
<span style="font-weight: bold;"><span style="font-style: italic;">debugfs: logdump -i &lt;15&gt;</span></span><br>
<span style="font-weight: bold;"><span style="font-style: italic;">FS block 1006 logged at sequence 404351, journal block 7241</span></span><br style="font-style: italic;"><span style="font-weight: bold;"><span style="font-style: italic;">(inode block for inode 15):</span></span><br style="font-style: italic;"><span style="font-weight: bold;"><span style="font-style: italic;">Inode: 15 Type: regular Mode: 0664 Flags: 0x0 Generation: 0</span></span><br style="font-style: italic;"><span style="font-weight: bold;"><span style="font-style: italic;">User: 0 Group: 0 Size: 20</span></span><br style="font-style: italic;"><span style="font-weight: bold;"><span style="font-style: italic;">File ACL: 0 Directory ACL: 0</span></span><br style="font-style: italic;"><span style="font-weight: bold;"><span style="font-style: italic;">Links: 1 Blockcount: 8</span></span><br style="font-style: italic;"><span style="font-weight: bold;"><span style="font-style: italic;">Fragment: Address: 0 Number: 0 Size: 0</span></span><br style="font-style: italic;"><span style="font-weight: bold;"><span style="font-style: italic;">ctime: 0x48159f2d — Mon Apr 28 15:25:57 2008</span></span><br style="font-style: italic;"><span style="font-weight: bold;"><span style="font-style: italic;">atime: 0x48159f27 — Mon Apr 28 15:25:51 2008</span></span><br style="font-style: italic;"><span style="font-weight: bold;"><span style="font-style: italic;">mtime: 0x4806f070 — Thu Apr 17 12:08:40 2008</span></span><br style="font-style: italic;"><span style="font-weight: bold;"><span style="font-style: italic;">Blocks: (0+1): 10234</span></span><br style="font-style: italic;"><span style="font-weight: bold;"><span style="font-style: italic;">No magic number at block 7247: end of journal.</span></span><br style="font-style: italic;">
</div>
<p><span style="font-weight: bold;"><br>
</span>请注意上面信息中的这一行：</p>
<div style="margin-left: 40px;"><span style="font-weight: bold;"><span style="font-style: italic;">Blocks: (0+1): 10234</span></span></div>
<p>这就是inode 15存放文件的地址（数据块）。然后，我们知道了这个地址，我们就可以使用 dd 命令，把这个地址上的数据给取出来。</p>
<div style="margin-left: 40px;">
<span style="font-weight: bold;"><span style="font-style: italic;">#dd if=/dev/sda5 of=/tmp/test.txt bs=4096 count=1 skip= 10234</span></span><br style="font-style: italic;"><span style="font-weight: bold;"><span style="font-style: italic;">1+0 records in</span></span><br style="font-style: italic;"><span style="font-weight: bold;"><span style="font-style: italic;">1+0 records out</span></span><br style="font-style: italic;">
</div>
<ul>
<li>if 是输入的设备</li>
<li>of 是输出的设备.</li>
<li>bs 指定一个block的大小</li>
<li>count 说明有多少个block需要dump</li>
<li>skip 说明从开始的地方跳过 10234 个block，并从取下一个block的数据</li>
</ul>
<p>下面让我们看一下被恢复的文件：</p>
<div style="margin-left: 40px;">
<span style="font-weight: bold;"><span style="font-style: italic;">$cat /tmp/test.txt </span></span><br style="font-style: italic;"><span style="font-weight: bold;"><span style="font-style: italic;">this is test file</span></span><br style="font-style: italic;">
</div>
<p><span style="font-weight: bold;"><br>
</span>当然，上面的文件恢复是基于我们知道文件的inode，可在现实中，我们并不知道这个信息，如果我们不知道inode，我们还可能恢复吗？是的，这是可能的，让我们来看一下如何恢复。</p>
<h4>使用 Journal 和 文件名恢复</h4>
<p>如果我们不知道文件的inode我们可能恢复吗？我可以告诉你，这是不可能的事情。不过我们有办法知道文件的inode号。下面让我们来看看怎么做到：</p>
<div style="margin-left: 40px;">
<span style="font-weight: bold; font-style: italic;">$rm mytest.txt</span><br style="font-weight: bold; font-style: italic;"><span style="font-weight: bold; font-style: italic;">rm: remove write-protected regular file `mytest.txt’? y</span><br style="font-weight: bold; font-style: italic;">
</div>
<p>注意，我们并不知道其inode号，但我们可以使用 debugfs 命令来查看（使用其 ls -d 选项）。</p>
<div style="margin-left: 40px;">
<span style="font-weight: bold; font-style: italic;">debugfs:  ls -d</span><br style="font-weight: bold; font-style: italic;"><span style="font-weight: bold; font-style: italic;"> 2  (12) .    2  (12) ..    11  (20) lost+found    2347777  (20) oss</span><br style="font-weight: bold; font-style: italic;"><span style="font-weight: bold; font-style: italic;">&lt;2121567&gt; (20) mytest.txt</span><br style="font-weight: bold; font-style: italic;">
</div>
<p>你看文件名了吧，它的inode号是 &lt;2121567&gt; ，注意，被删除了的文件的inode都是用尖括号包起来的。</p>
<p>即然知道了inode号，那么我们就很容易恢复了（使用 logdump选项）：</p>
<div style="margin-left: 40px;">
<span style="font-weight: bold; font-style: italic;">debugfs:  logdump -i &lt;2121567&gt;</span><br style="font-weight: bold; font-style: italic;"><span style="font-weight: bold; font-style: italic;">Inode 2121567 is at group 65, block 2129985, offset 3840</span><br style="font-weight: bold; font-style: italic;"><span style="font-weight: bold; font-style: italic;">Journal starts at block 1, transaction 405642</span><br style="font-weight: bold; font-style: italic;"><span style="font-weight: bold; font-style: italic;">  FS block 2129985 logged at sequence 405644, journal block 9</span><br style="font-weight: bold; font-style: italic;"><span style="font-weight: bold; font-style: italic;">    (inode block for inode 2121567):</span><br style="font-weight: bold; font-style: italic;"><span style="font-weight: bold; font-style: italic;">    Inode: 2121567   Type: bad type        Mode:  0000   Flags: 0x0   Generation: 0</span><br style="font-weight: bold; font-style: italic;"><span style="font-weight: bold; font-style: italic;">    User:     0   Group:     0   Size: 0</span><br style="font-weight: bold; font-style: italic;"><span style="font-weight: bold; font-style: italic;">    File ACL: 0    Directory ACL: 0</span><br style="font-weight: bold; font-style: italic;"><span style="font-weight: bold; font-style: italic;">    Links: 0   Blockcount: 0</span><br style="font-weight: bold; font-style: italic;"><span style="font-weight: bold; font-style: italic;">    Fragment:  Address: 0    Number: 0    Size: 0</span><br style="font-weight: bold; font-style: italic;"><span style="font-weight: bold; font-style: italic;">    ctime: 0x00000000 — Thu Jan  1 05:30:00 1970</span><br style="font-weight: bold; font-style: italic;"><span style="font-weight: bold; font-style: italic;">    atime: 0x00000000 — Thu Jan  1 05:30:00 1970</span><br style="font-weight: bold; font-style: italic;"><span style="font-weight: bold; font-style: italic;">    mtime: 0x00000000 — Thu Jan  1 05:30:00 1970</span><br style="font-weight: bold; font-style: italic;"><span style="font-weight: bold; font-style: italic;">    Blocks:</span><br style="font-weight: bold; font-style: italic;"><span style="font-weight: bold; font-style: italic;">  FS block 2129985 logged at sequence 405648, journal block 64</span><br style="font-weight: bold; font-style: italic;"><span style="font-weight: bold; font-style: italic;">    (inode block for inode 2121567):</span><br style="font-weight: bold; font-style: italic;"><span style="font-weight: bold; font-style: italic;">    Inode: 2121567   Type: regular        Mode:  0664   Flags: 0x0   Generation: 913772093</span><br style="font-weight: bold; font-style: italic;"><span style="font-weight: bold; font-style: italic;">    User:   100   Group:     0   Size: 31</span><br style="font-weight: bold; font-style: italic;"><span style="font-weight: bold; font-style: italic;">    File ACL: 2130943    Directory ACL: 0</span><br style="font-weight: bold; font-style: italic;"><span style="font-weight: bold; font-style: italic;">    Links: 1   Blockcount: 16</span><br style="font-weight: bold; font-style: italic;"><span style="font-weight: bold; font-style: italic;">    Fragment:  Address: 0    Number: 0    Size: 0</span><br style="font-weight: bold; font-style: italic;"><span style="font-weight: bold; font-style: italic;">    ctime: 0x4821d5d0 — Wed May  7 21:46:16 2008</span><br style="font-weight: bold; font-style: italic;"><span style="font-weight: bold; font-style: italic;">    atime: 0x4821d8be — Wed May  7 21:58:46 2008</span><br style="font-weight: bold; font-style: italic;"><span style="font-weight: bold; font-style: italic;">    mtime: 0x4821d5d0 — Wed May  7 21:46:16 2008</span><br style="font-weight: bold; font-style: italic;"><span style="font-weight: bold; font-style: italic;">    Blocks:  (0+1): 2142216</span><br style="font-weight: bold; font-style: italic;">
</div>
<p>上面有很多信息，让我们仔细地查看，你可以看到下面一行信息：</p>
<div style="margin-left: 40px;">
<span style="font-weight: bold; font-style: italic;"> FS block 2129985 logged at sequence 405644, journal block 9</span><br style="font-weight: bold; font-style: italic;">
</div>
<p>并且，其类型是：</p>
<div style="margin-left: 40px;">
<span style="font-weight: bold; font-style: italic;"> Type: bad type </span><br style="font-weight: bold; font-style: italic;">
</div>
<p>再仔细看一下文件的时间戳下面的<span style="font-weight: bold; font-style: italic;">Blocks:</span> 什么也没有。那么，让我们看一下下一个block：</p>
<div style="margin-left: 40px;">
<span style="font-weight: bold; font-style: italic;">FS block 2129985 logged at sequence 405648, journal block 64</span><br style="font-weight: bold; font-style: italic;"><span style="font-weight: bold; font-style: italic;">    (inode block for inode 2121567):</span><br style="font-weight: bold; font-style: italic;">
</div>
<p>这一条Journal就有block信息了：</p>
<div style="margin-left: 40px;"><span style="font-weight: bold; font-style: italic;">Blocks:  (0+1): 2142216</span></div>
<p>这就是被删除文件的地址，让我们再次运行恢复命令：</p>
<div style="margin-left: 40px;">
<span style="font-weight: bold; font-style: italic;">$sudo dd if=/dev/sda5 of=/home/hchen/mytest_recovered.txt bs=4096 skip=2142216 count=1</span><br style="font-weight: bold; font-style: italic;">
</div>
<p>再让我们来检查一下文件内容：</p>
<div style="margin-left: 40px;">
<span style="font-weight: bold; font-style: italic;">$ cat mytest_recovered.txt</span><br style="font-weight: bold; font-style: italic;"><span style="font-weight: bold; font-style: italic;">this is my test file </span><br style="font-weight: bold; font-style: italic;">
</div>
<h4>小结</h4>
<p>好了，下面是我们的一些总结：<br>
<span style="font-weight: bold;">1)使用 debugfs: ls -d 找到被删除文件的inode号。</span><br style="font-weight: bold;"><span style="font-weight: bold;">2)使用 debugfs:logdump找到文件的数据块地址。</span><br style="font-weight: bold;"><span style="font-weight: bold;">3)使用dd 命令把数据取出来存成文件。</span></p>
<p>网上有很其它不同的方法来恢复文件，基本上也是使用debugfs这个命令，有的还使用到了lsdel，其实大同小异，这个教程是我在网上看到的，虽然他说只是针对Ext3文件系统的，但我总感觉应该可以用于Ext2文件系统，不过我没有试过。也许Ext2和Ext3被debugfs输出的信息不一样吧。大家可以去试试。</p>
<p>（全文完）</p>
<p align="center"><img alt="image placeholder" >
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/2539.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/378.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/10192.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/889.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/8275.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/648.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
</ul>
</div></div>
<div id="post-ratings-1265" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="bb08ad6ee8">
<img alt="image placeholder" >
<meta itemprop="headline" content="恢复Ext3下被删除的文件">
<meta itemprop="description" content=" 下面是这个教程将教你如何在Ext3的文件系统中恢复被rm掉的文件。

假设我们有一个文件名叫 'test.txt'
 $ls -il test.txt 15 -rw-rw-r-- 2 root root 20 Apr 17 12:08 test.txt 
注意：: &quot;-il&quot; 选项表示显示文件的i-node号（15），如果你不知道Unix/Linux文件系统的“I结点”的话，你有必要先补...">
<meta itemprop="datePublished" content="2009-08-14T10:31:48+08:00">
<meta itemprop="dateModified" content="2009-08-14T10:34:42+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/1265.html">
<meta itemprop="author" content="陈皓">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/1265.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="3.33">
<meta itemprop="ratingCount" content="6">
</div>
</div>
<div id="post-ratings-1265-loading" class="post-ratings-loading">
<img alt="image placeholder" >
 ]]></content>
<pubDate>2009-08-14T10:31:48+08:00</pubDate>
<guid>https://coolshell.cn/articles/1265.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ 操作系统航空公司 ]]></title>
<link>https://coolshell.cn/articles/1272.html</link>
<content><![CDATA[ 
<p><img alt="image placeholder" >
<p><strong>UNIX Airways</strong></p>
<p>Unix航空公司需要每一个人在乘机的时候带上一个飞机零件，他们会在飞机跑道上把飞机的这些零件一片一片地组装起来，然后，在不停地争论着倒底是要建造什么样的飞机。是AIX，还是Solaris？是FreeBSD还是HP-UX？……</p>
<p><strong>Air DOS</strong></p>
<p>DOS 航空公司的飞机需要每一位乘客在后面推飞机直到飞机开始滑行，然后他们跳上飞机并且跟着飞机一起沿着海岸滑行直至飞机再次掉到地面，然后乘客们再次推动飞机，然后跳上飞，如此循环不止……</p>
<p><span id="more-1272"></span></p>
<p><strong>Mac Airlines</strong></p>
<p>Mac航空公司中，所有的乘务员，机长，行李搬运工，和机票代理无论是看上去还是行为上都是完全一致的。每次当你询问细节的时候，他们都会很绅士地但很坚定地告诉你，你不需要知道那么多的细节，也没有必要知道，所有一切的事情都已经在你不需要知道的情况下完成了，所以，你只需要shut up。</p>
<p><strong>Windows Air</strong></p>
<p>Windows航空公司的航站楼是那么的漂亮和多彩，并且有非常友好的乘务员，相当简单的行李和乘机手续，同样平滑的离站程序。但是，当飞机起飞10分钟后，通常飞机会在没有任何警告的情况下就爆炸了。</p>
<p><strong>Windows NT Air</strong></p>
<p>Windows NT航空公司和Windows航空公司一样，但是他的成本更高，使用更大型的飞机，并且当其爆炸的时候，你可以换乘在40英里半径内的其它飞行器。</p>
<p><strong>Windows XP Air</strong></p>
<div id="result_box" style="TEXT-ALIGN: left" dir="ltr">您所在的这个机场，根据合同，只允许乘坐XP的航空飞机。所有的飞机是相同的，明亮的色彩，以及比原来的需要大3倍。XP航空公司的标志是巨大的，并都指向相同的方向。无论你走哪一条路，有些身穿斗篷和戴着尖角帽子的人会坚持地跟着你走。你的行李和衣物都会被拿走并被XP航空套装和相同的XP手提箱所取代，你周围的人都和你有一样套装和手提箱，当然，这些东西的成本都会包含在机票中。如果你不签合，飞机不会起飞。飞机途中的娱乐表演承诺和实际是一样的，那就是米老鼠动画片会一遍一遍地播放。在你需要吃东西喝饮料的前，你不得不先打电话给你的旅行社。在整个航行过程中你都被会搜索。如果你去厕所两次以上，你得再补一张票。无论你所预订的目的地是哪里，你永远都会最终被迫降在加拿大的惠斯勒（Whistler）。</div>
<p><strong> OS X Air</strong></p>
<p>你进入了一个白色的航站楼，你所能看到的是一个坐在角落白桌子后面的一位女士，你走上去取你的机票。她微笑地对你说，“欢迎乘座OS X航空公司，请您允许我给您照张相”，她一边指向了在墙上你没注意到的已经给你拍了照的照相机，一边对你说，“谢谢，这是您的机票”。一张最少上面有你照片的机票被递到了你的手上，上面已经有了你所有的信息。你右边的一扇门打开了，你走了进去，你看到了一个很宽敞的空间，只有一个座位在中间，你坐下，听着音乐，看着电影，直到飞行结束。你自始至终都不会看到其它的乘客。当你登陆下机的时候，你对你自己说：“哇，这确实相当的好啊，但感觉好像少了些什么”。</p>
<p><strong>Windows Vista Airlines</strong></p>
<p>你进入了一个非常漂亮的航站楼，旁边停着一架你从未见过的超级大的飞机。每隔10英尺，都会有一个安全人员出现，并问你是否“确认”你想要继续向前乘坐飞机，或者你可以取消这个飞行，当然，我们并不知道取消会意味着什么。你继续前行到一个桌子前询问为什么这架飞机那么大？在安全人员向你确认过你需要问问题并且你确实要听到回答后，工作人员告诉你，这是世界上最大的飞机，是因为它可以让乘客们感觉更好，但是因飞机的需求需要把飞机被设计成要比正常飞行速度慢两倍，所以他们只好加大尺寸，这样才能达到让他速度变慢的目标。</p>
<p>一旦上了飞机，每一个乘客都会被乘务员单独地询问是否真的想要乘坐本次航班，因为这是公司的制度规定。同样，机场还会再向大家再次询问同样的问题。当你回答了若干次“是”以后，你却被一些陌生人（黑客）在你的脸上打了一拳，因为那些陌生人问你：“你真确定我可以打你的脸吗？‘确定’或是‘取消’”，而你却条件反射地回答了“确定”。</p>
<p>在起飞的以后，飞行员意识到飞机的起落架驱动没有被更新，不能和新型的飞机在一些工作。所以，在整个飞机过程中，起落架都在处于降落的状态。这样一来，整个飞机飞行得更慢，但是飞行员继续飞行这样飞机，他们希望起落架的生产产商会尽快地给一个最新版本符合Vista航空公司标准的起落架驱动程序更新。</p>
<p>终于，你到达了你的目的地，你却得到的是Windows XP航空公司的奖励里程而不是尝试新型的飞机的奖励。你的一个亲密的朋友在听过你的故事以后，告诉你Linux航空公司会好得多。</p>
<p><strong>Linux Air</strong></p>
<p>对其它所有航空公司都不满的员工决定离开他们自己的航空公司。他们开始自己建造飞机，机票柜台，以及自己铺设飞机跑道。他们只用很少的费用给你提供可打印的机票，但你完全可以自己下载下来打印机票。</p>
<p>当你登机的时候，会有人递给你一个座位，四个螺栓，一个扳手和一本“安装座位-HOWTO.html”手册。一但安装好了，可随意调整或更改的座位可能让你相当地舒服，从飞机离开到目的地，其几乎不会发生一个错误，而且，飞机过程中的飞行餐非常不错。你会想去告诉选乘别的航空公司的乘客你那完美的经历，但你所能得到的回答是一句反问，“乘座飞机还要自己去安装自己的座位？”。</p>
<p>（全文完）</p>
<p>文章：<a href="http://www.linuxscrew.com/2007/10/07/fun-linux-unix-windows-os-x-and-dos-airlines/" target="_blank">来源</a></p>
<p align="center"><img alt="image placeholder" >
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/4102.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/4077.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/18360.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/17998.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/12103.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/11847.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
</ul>
</div></div>
<div id="post-ratings-1272" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="79f3ff9dfa">
<img alt="image placeholder" >
<meta itemprop="headline" content="操作系统航空公司">
<meta itemprop="description" content=" 我们知道，不同的操作系统有不同的系统，不同的风格，那么，如果操作系统和航空公司，会是怎么样的一种情况？让我们尝试地来做这样一个幽默的类比，把操作系统的特点带到航空公司，让我们看看会是怎么样的一个情况。

UNIX Airways

Unix航空公司需要每一个人在乘机的时候带上一个飞机零件，他们会在飞机跑道上把飞机的这些零件一片一片地组装起来，然后，在不停地争论着倒底是要建造什么样的飞机。...">
<meta itemprop="datePublished" content="2009-08-16T12:54:24+08:00">
<meta itemprop="dateModified" content="2009-08-21T12:29:48+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/1272.html">
<meta itemprop="author" content="陈皓">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/1272.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="4.17">
<meta itemprop="ratingCount" content="18">
</div>
</div>
<div id="post-ratings-1272-loading" class="post-ratings-loading">
<img alt="image placeholder" >
 ]]></content>
<pubDate>2009-08-16T12:54:24+08:00</pubDate>
<guid>https://coolshell.cn/articles/1272.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ Linux基金会的广告 ]]></title>
<link>https://coolshell.cn/articles/1283.html</link>
<content><![CDATA[ 
<p><strong>今年早些时候，Linux基金会发起了一项面向制作人和一般Linux爱好者的活动，创造60秒创意的广告并评奖。</strong></p>
<p>Linux基金会并没有苹果和微软这样大的投入来聘请大腕，但这次评选出来的好广告却一点也不输于他们，Linux社团的参与力和灵感可见一斑。<strong>本次活动获胜的奖品是免费前往东京参与Linux专题研讨会，评奖结果是：</strong></p>
<p>第一：“<a title="What does it mean to be free?" href="http://video.linuxfoundation.org/video/1106" target="_blank">What does it mean to be free?</a>”<br>
第二：“<a title="The Origin" href="http://video.linuxfoundation.org/video/1262" target="_blank">The Origin,</a>”<br>
第三：“<a title="Linux pub" href="http://video.linuxfoundation.org/video/1154" target="_blank">Linux pub</a>”</p>
<p> 下面是广告片的视频</p>
<p><span id="more-1283"></span></p>
<h4>What does it mean to be free?</h4>
<p><object classid="clsid:d27cdb6e-ae6d-11cf-96b8-444553540000" width="420" height="363" codebase="http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=6,0,40,0"><param name="allowFullScreen" value="true">
<param name="allowscriptaccess" value="always">
<param name="wmode" value="opaque">
<param name="src" value="http://www.tudou.com/v/6ftVf_bMxg0">
<param name="allowfullscreen" value="true">
<embed type="application/x-shockwave-flash" width="420" height="363" src="http://www.tudou.com/v/6ftVf_bMxg0" allowfullscreen="true" allowscriptaccess="always" wmode="opaque"></embed></object><br>
 </p>
<h4>The Origin (起源)</h4>
<p><object classid="clsid:d27cdb6e-ae6d-11cf-96b8-444553540000" width="480" height="400" codebase="http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=6,0,40,0"><param name="align" value="middle">
<param name="src" value="http://player.youku.com/player.php/sid/XODQ3NjM5ODQ=/v.swf">
<param name="quality" value="high">
<embed type="application/x-shockwave-flash" width="480" height="400" src="http://player.youku.com/player.php/sid/XODQ3NjM5ODQ=/v.swf" quality="high" align="middle"></embed></object></p>
<h4>Linux Pub</h4>
<p>下面的视频需要你能够访问YouTube（你可以上Google搜索如何访问YouTube的方法）<br>
<object width="425" height="344"><param name="movie" value="http://www.youtube.com/v/xceiMJSunIg&amp;hl=en&amp;fs=1&amp;">
<param name="allowFullScreen" value="true">
<param name="allowscriptaccess" value="always">
<embed src="https://www.youtube.com/v/xceiMJSunIg&amp;hl=en&amp;fs=1&amp;" type="application/x-shockwave-flash" allowscriptaccess="always" allowfullscreen="true" width="425" height="344"></embed></object></p>
<p>还有很多很不错的作品，比如：</p>
<ul>
<li><a href="http://video.linuxfoundation.org/video/1271" target="_blank">The Future is Open</a></li>
<li><a href="http://video.linuxfoundation.org/video/1261">Challenges at the Office</a></li>
</ul>
<p>更多的视频，你可以上Linux基金会的网站上看看，也一样地非常地有创意。</p>
<p><a href="http://video.linuxfoundation.org/category/video-category/-linux-foundation-video-contest" target="_blank">http://video.linuxfoundation.org/category/video-category/-linux-foundation-video-contest</a></p>
<p>（全文完）</p>
<p align="center"><img alt="image placeholder" >
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/19219.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/18654.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/18360.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/17998.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/17416.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/17200.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
</ul>
</div></div>
<div id="post-ratings-1283" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="82a8a91b42">
<img alt="image placeholder" >
<meta itemprop="headline" content="Linux基金会的广告">
<meta itemprop="description" content="今年早些时候，Linux基金会发起了一项面向制作人和一般Linux爱好者的活动，创造60秒创意的广告并评奖。

Linux基金会并没有苹果和微软这样大的投入来聘请大腕，但这次评选出来的好广告却一点也不输于他们，Linux社团的参与力和灵感可见一斑。本次活动获胜的奖品是免费前往东京参与Linux专题研讨会，评奖结果是：

第一：“What does it mean to be free?”...">
<meta itemprop="datePublished" content="2009-08-16T14:00:48+08:00">
<meta itemprop="dateModified" content="2009-08-17T15:31:50+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/1283.html">
<meta itemprop="author" content="陈皓">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/1283.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="2.75">
<meta itemprop="ratingCount" content="4">
</div>
</div>
<div id="post-ratings-1283-loading" class="post-ratings-loading">
<img alt="image placeholder" >
 ]]></content>
<pubDate>2009-08-16T14:00:48+08:00</pubDate>
<guid>https://coolshell.cn/articles/1283.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ Linus Torvalds 语录 Top 10 ]]></title>
<link>https://coolshell.cn/articles/1278.html</link>
<content><![CDATA[ 
<p><img alt="image placeholder" >
<blockquote><p>“Really, I’m not out to destroy Microsoft. That will just be a completely unintentional side effect ” （真的，我并不是想要干掉Microsoft，如果真是那样了，那完全是一个无意的副作用）——”The Way We Live Now: Questions for Linus Torvalds”, 接受《New York Times》的采访， 2003-09-28.</p></blockquote>
<blockquote><p>“Only wimps use tape backup: _real_ men just upload their important stuff on ftp, and let the rest of the world mirror it”（只有愚昧的人才会用磁带来做备份，真正聪明的人会上传他们最重要的东西到FTP服务器上，而剩下事情是，让世界各地的人来镜像这些东西）——(1996-07-20). <a title="http://groups.google.com/groups?selm=Pine.LNX.3.91.960720095713.20645F-100000%40linux.cs.Helsinki.FI" rel="nofollow" href="https://groups.google.com/groups?selm=Pine.LNX.3.91.960720095713.20645F-100000%40linux.cs.Helsinki.FI">在linux.dev.kernel 新闻组上的一个贴子</a></p></blockquote>
<p><span id="more-1278"></span></p>
<blockquote><p>“Software is like sex; it’s better when it’s free.” （软件就像是性一样，仅当是自由的时候才会更好）—— 1996 的FSF 大会， <a title="http://www.argentilinux.com.ar/doku.php/linux_videos_documentales:the_code_linux" rel="nofollow" href="http://www.argentilinux.com.ar/doku.php/linux_videos_documentales:the_code_linux">相关视频</a>。</p></blockquote>
<blockquote><p>“Is “I hope you all die a painful death” too strong?”（“我希望你们所有人在痛苦中死去”这句话是不是太强硬啦？）——这句话是，Linus是在拒绝某些硬件产商想在Linux的内核中植入特定的硬件处理程序，对那些硬件产商说的。</p></blockquote>
<blockquote><p>“Most days I wake up thinking I’m the luckiest bastard alive.”（很多天当我醒来的时候，我想到我是世界上最幸运的还活着的混蛋）—— <cite id="CITEREFTorvalds.2C_Linus_and_David_Diamond2001" style="font-style: normal;">Linus  <cite id="CITEREFTorvalds.2C_Linus_and_David_Diamond2001" style="font-style: normal;">Torvalds </cite>和David Diamond (2001). <em>Just for Fun: The Story of an Accidental Revolutionary.</em></cite></p></blockquote>
<blockquote><p>“An infinite number of monkeys typing into GNU emacs would never make a good program.” （即使是无穷多个猴子在GNU的emacs中输入东西，那也不会写出一段好的程序）—— 出自 <a title="http://www.linuxhq.com/kernel/v1.3/53/Documentation/CodingStyle" rel="nofollow" href="http://www.linuxhq.com/kernel/v1.3/53/Documentation/CodingStyle">Linux 1.3.53 编程风格</a></p></blockquote>
<blockquote><p>“Talk is cheap. Show me the code.”（能说算不上什么，有本事就把你的代码给我看看）—— 2000-08-25， <a title="http://lkml.org/lkml/2000/8/25/132" rel="nofollow" href="https://lkml.org/lkml/2000/8/25/132">给linux-kernel 邮件列表的一封邮件</a></p></blockquote>
<blockquote><p>“I’m a bastard. I have absolutely no clue why people can ever think otherwise. Yet they do. People think I’m a nice guy, and the fact is that I’m a scheming, conniving bastard who doesn’t care for any hurt feelings or lost hours of work, if it just results in what I consider to be a better system. And I’m not just saying that. I’m really not a very nice person. I can say “I don’t care” with a straight face, and really mean it.” （我是一个混蛋。我完全不知道人们为什么会从另外一个角度来看我，但是他们确实是（那么做的）。人们认为我是个好人，但事实上我是个诡计多端的混蛋，只要最终能得到我所认为的更好的系统，那么我对任何感情的伤害或工作时间的损失都不在乎。我并不只是（在口头上）说说而已，我真的不是一个很好的人。我能面无表情地说“我不在乎”，而且我确实不在乎。）—— 2000-09-06，<a title="http://lkml.org/lkml/2000/9/6/65" rel="nofollow" href="https://lkml.org/lkml/2000/9/6/65">给 linux-kernel 邮件列表的邮件</a></p></blockquote>
<blockquote><p>“Those that can, do. Those that can’t, complain.”（那些能做的人就做，不能做的人就只会抱怨）——2003-09-23， <a title="http://kerneltrap.org/node/901" rel="nofollow" href="http://kerneltrap.org/node/901">给Linux Kernel 邮件列表</a> （注意：Linus只是借用了一下这个句型，这个引言的原创在<a href="https://shlomif.livejournal.com/39215.html" target="_blank">这里</a>）</p></blockquote>
<blockquote><p>“You see. I don’t think any new thoughts. I think thoughts that other people have thought, and I rearrange them. But Sara, she thinks thoughts that never were before.”（您看，我没有任何新的想法。我的想法都是别人已经想过的，而我只是去重新组织一下别人的想法。但是莎拉不一样，她的想法是从来没有人想过的）—— 这是Linus给和他的母亲说起他的姐姐Sara。</p></blockquote>
<p>维基百科上的“<a href="https://en.wikiquote.org/wiki/Linus_Torvalds" target="_blank">Linus Torvald 词条</a>”上有很多他的语录，你不妨去看看，你喜欢哪些呢？</p>
<p align="center"><img alt="image placeholder" >
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/9917.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/8990.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/2322.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/19219.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/18654.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/18360.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
</ul>
</div></div>
<div id="post-ratings-1278" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="8a56253a17">
<img alt="image placeholder" >
<meta itemprop="headline" content="Linus Torvalds 语录 Top 10">
<meta itemprop="description" content="下面是Linux的创始人Linus Torvalds的一些言论，这是我个人认为最有意思的10句。如果你想看更多的Linus Torvalds说过的话，你可以看看他在维基百科上的词条：Linux Torvalds。我们在下面给出中英文对照，希望你能喜欢。
“Really, I’m not out to destroy Microsoft. That will just be a completel...">
<meta itemprop="datePublished" content="2009-08-16T14:56:25+08:00">
<meta itemprop="dateModified" content="2010-04-09T01:27:09+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/1278.html">
<meta itemprop="author" content="陈皓">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/1278.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="4.27">
<meta itemprop="ratingCount" content="11">
</div>
</div>
<div id="post-ratings-1278-loading" class="post-ratings-loading">
<img alt="image placeholder" >
 ]]></content>
<pubDate>2009-08-16T14:56:25+08:00</pubDate>
<guid>https://coolshell.cn/articles/1278.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ 科技公司十大最愚蠢的错误 ]]></title>
<link>https://coolshell.cn/articles/1295.html</link>
<content><![CDATA[ 
<p><span><img alt="image placeholder" >
<p>如果事情还能再来一次，也许今天我们就不会看到Apple和Microsoft了，而且，Yahoo可能会成为世界上最大的搜索引擎，Google只能成为后者。你也许只能从施乐电脑上读这篇文章，从RealPod上听你最喜欢的频道。</p>
<p>人们都说“事后诸葛亮”（ hindsight is 20-20，20/20是最好的视力），如果真是这样的话，那么，我们的分析就是最精确的。下面是我们挑选的历史上十大科技类公司丢失机会的案例。</p>
<h2>1. Yahoo 错过 Facebook</h2>
<p>2006年，当时只有2年的Facebook还在只服务于一些学校内的社交网络。那个时候的MySpace就拥有了1亿用户，完全超过了Facebook的8百万用户。所以，当 <a href="https://www.wired.com/techbiz/startups/news/2007/09/ff_facebook" target="_blank">Yahoo 提出使用10亿美金购买 Mark Zuckerberg 的孩子</a> 时（其将近 <a href="http://www.newscorp.com/news/news_251.html" target="_blank">2005年 Rupert Murdoch 收购 MySpace 金额的两倍</a>）人们都对说Fackbook的老大说，“Take the money and run, Mark。”，事实上，时年23岁的扎克伯格也的确于2006年6月与雅虎达成了协议。</p>
<p><span id="more-1295"></span></p>
<p>然后，Yahoo发布了一些其糟糕的财政报告后，它的股价在一晚上就下跌了22%，当时Yahoo的CEO， Terry Semel，把购买价格下调到了8亿美金来购买Facebook，但被Mark Zuckerberg 拒绝，两个月后，Terry Semel 把收购价格提高到10亿美金，但那时已经太晚了。</p>
<p>今天，Facebook已经扩大到了2亿5千万的注册用户，并且，它目前 <a href="https://coolshell.cn/article/165524/update_facebook_gets_200_million_in_cash.html">值大约从 50亿美金 到100亿美金间的一个价格</a> （主要看谁来计算） 。而我们的Yahoo三年过去了，换了两个CEO，今天还在生存线上挣扎。</p>
<p> </p>
<h2>2. Real Networks 丢弃 iPod</h2>
<p><img alt="image placeholder" >
<p>虽然 MP3 播放器已经出现很多看了，但是 <a href="https://coolshell.cn/article/167123-4/fathers_of_technology_10_unsung_heroes.html">Fadell 的理念</a> 有一些小小的不同，他注重的是：更小，更精巧，并且专注于一个音乐的内容系统，这样，能够让音乐爱好者们很容易的填满他们的播放器——“pods” （Steve Jobs 则是最著名的驱动 iPod设计的人）</p>
<p>今天，那个专注于音乐内容的系统叫iTunes，并且，Apple公司控制了80%的数字音乐的市场。 Fadell 在Apple的 iPod 事业部工作，不过最终于2008年11月离开了那里。Real Networks 今天还在继续他的流媒体，但它的利润已被被iTunes冲得肢离破碎了。（照片是Tony Fadell)</p>
<h2>3. 索尼和东芝HD 的纷争</h2>
<p><span><img alt="image placeholder" >
<p>自从2002 开始，双方就开始争夺不休，各自的所签署的联盟阵营也只支持自己的互不兼容的格式。在2008 年，Sony 的刀刃插入了Toshiba的胸膛，让Toshiba停止了HD DVD的生产，2009年8月12日宣布正式加入蓝光阵营，Toshiba 反而成了蓝光这边最大的一个支持者之一， <a href="http://blogs.pcworld.com/staffblog/archives/006159.html">华纳兄弟也花费了4亿美金宣布放弃HD DVD并加入蓝光阵营</a>。</p>
<p>有趣的是，在上世纪90年代中期，这对冤家同样为电影的HR格式争斗，那个时候，当时双方搁置争议，把两边的最好的东西整合起来，成为了一个叫做 Digital Versatile Disc的东西，被人们简称DVD。</p>
<p>这样一个事情，让多年参与HD格式之争的公司门损失惨重。如果在2002年，两边联手，HD光盘可能会在今天的电影和电视节目光盘中占有统治地位，然而，双方的争斗导致了成本的上升，和在市场上错失良机，今天，DVD卖得比蓝光还要多，基本上是10:1的样子，但是未来将会属于流媒体的视频点播。</p>
<h2>4. Digital Research：另一个Microsoft</h2>
<p><span><img alt="image placeholder" >
<p>传说，Kildall甩了IBM要单飞。但实际上是kildall接了另一个客户的订单去做另一个产品，仅让他自己的妻子和IBM谈判。 <a href="http://www.cadigital.com/kildall.htm" target="_blank">Dorothy Kildall ——他的妻子并不喜欢IBM的一些条款</a>，所以和IBM的合作也流产了。</p>
<p>蓝色巨人只好回头找了Bill Gates和他的搭档Paul Allen，他们开发了MS-DOS，这是基于 Tim Paterson 的 QDOS （全称是the Quick and Dirty Operating System）, QDOS则是基于Gary Kildall的CP/M操作系统。 最后IBM提供了 Microsoft 的 DOS (售价$60) 和某版本的CP/M (售价$240) 给IBM PC的买家做选择，最后，便宜的产品获得了胜利。</p>
<p>在DOS以前，Microsoft 最大的产品是 BASIC 编程工具。而在 DOS以后，是的，你知道这个公司干了什么。Microsoft 今天的成就是否和IBM的那个合同有关？我们永远也无法知道。也许，像Bill这样的人始终都能把握住这样的机会，而Gary则不能。</p>
<h2>5. Xerox 错失 Alto 良机</h2>
<p><span><img alt="image placeholder" >
<p>但是1973 年的“个人电脑”市场并不存在，所以 Xerox 并不知道Alto的潜力，也不知道如何处理它。这个公司制造了几千个这要电脑并把它们分发到了各个大学中。江湖上传闻，1979年的时候，当 Steve Jobs 参观Xerox PARC的时候，看到了Alto，回去后，把那些 <a href="https://coolshell.cn/article/114418/the_mac_turns_20.html">许许多多的 Alto 的特性</a> 集成到了 Apple 的 Lisa 和Mac 电脑上。从那以后， Xerox 终于意识到了它的错误，然后把开始了 Xerox Star 的市场营销，Xerox Star是一个图形工作站，其基于Alto的技术。但是已经太晚了，太晚了。</p>
<p> </p>
<h2>6. 唱片业的一错再错</h2>
<p><span><img alt="image placeholder" >
<p>在1999年，Shawn Fanning 的 Napster 创造了一个难以置信的一个让大容易共享音乐的在线平台。然后， <a href="https://coolshell.cn/article/17839/judge_in_napster_case_finds_in_favor_of_music_companies.html">唱片公司们开始集体控诉Napster</a> ，侵害了他们的版权。然后，Napster 的 CEO Hank Barry 提倡音乐产业 <a href="http://iml.jou.ufl.edu/projects/Spring01/Burkhalter/hank's%20statement.html" target="_blank">采用那种电台广播的许可证协议</a> ，对通过网络传播音乐的人征收版税，可是他的这个倡议遇到了聋子的耳朵——无人响应。</p>
<p>于是，Napster 的粉丝们非常快地跑到了其它的P2P的文件共享网络，如Gnutella 和Grokster，于是盗版音乐也成了RIAA（<span>美国唱片业协会</span>）的头号敌人。</p>
<p>在2000年，MP3.com 启动了一个服务可以允许会员们上传歌曲到自己的私有的CD收集中，并且可以以流的方式传播到每一个PC上。再次， <a href="https://coolshell.cn/article/35165/mp3com_faces_new_litigation_days_after_settlement.html">唱片行业控告 MP3.com 侵权</a>， 最终导致了 MP3.com 被迫出售，并被迫更改了其商业模式。</p>
<p>再加上 <a href="https://coolshell.cn/article/64546/filesharing_services_sued.html">RIAA 对 Grokster, Morpheus,</a> Kazaa, 和其它30,000 盗版单曲的指控，其它唱片行业损失了很多商业机会。</p>
<p>当然，今天的音乐订阅业务和流媒体服务，诸如 Pandora 支配了数字音乐界，唱片公司也开始和网络公司签了协议。试想一样，如果唱片公司们和 Napster， MP3.com，或是其它一些网络共享者合作，而不是去指控他们，也许，这些唱片公司今天将会控制着数字音乐——而且不会有任何盗版的问题。</p>
<h2>7. Compuserve 错过了主宰网络的机会</h2>
<p><span><img alt="image placeholder" >
<p>在上世纪90年代初， Compuserve Information Service 有着“令人难以置信的优势：一个坚定的客户基础，难以置信的对客户的使用模式分析的数据，一个难以复制的知识仓库，几乎没有竞争的环境”， Kip Gregory，一个管理顾问， <a href="http://www.winningclients.com/" target="_blank">Winning Clients in a Wired World</a> 一书的作者，说，“可能缺少的是……把这些优势都转变成可持续的领先的投入”。</p>
<p>于是，AOL 来了，提供了一种“不限时的”统一费用，而 CompuServe 则是按小时充值，AOL提供了一个简单的界面，以及大规模，地毯式轰炸营销活动——为每位用户提供一张免费的CD。在CompuServe论坛上早期出现的组织纷纷转到了AOL的Web上，而CompuServe论坛对Web支持的不是很好。1997年，<a href="https://coolshell.cn/article/4512/aol_buying_compuserve_users_voice_opinions_about_possible_takeover.html">AOL 获得了 CompuServe</a>, 并且，<a href="https://coolshell.cn/businesscenter/article/167903/farewell_compuserve_rip.html">“CompuServe classic” 服务最终在同年6月安息了</a> 。</p>
<p>CompuServe 失败不是错过了一个机会，而是错过了一堆， Gregory说，“我真的相信 CompuServe是一个非常重要的示例，这也是一个非常重要的教训——永远不要因为优势就裹足不前”。</p>
<h2>8. 报业错过网络分类广告业务–Craigslist</h2>
<p><span><img alt="image placeholder" >
<p>2005年，全美报业分类广告的年收入总额为173亿美元。。从那以后，像Craigslist 这样使用分类广告的网站（如：Amazon, eBay, 和Google）几乎番了一番，根据 <a href="http://pewinternet.org/Reports/2009/7--Online-Classifieds.aspx?r=1" target="_blank">Pew研究中心</a>的报告，报业的分类广告的利润却减少了一半。</p>
<p>如果回到2005年，那段报业分类广告利润很高的时候，如果某个报业集团收买了Craigslist，那么今天可能会非常地不一样。当然，首先他们将不得不说服Craigslist的创始人Craig Newmark出售。</p>
<p>在<a href="https://coolshell.cn/article/141991/craigslist_founder_talks_about_open_source_banner_ads.html">2008 年1月InfoWorld的采访中</a>，Newmark 说他的公司的角色在报纸行业瓦解中被报纸行业大大地夸大了，“我认为报纸最大的问题是需要去检查他们自己”他注解道。</p>
<h2>9. Google 之前的 Google</h2>
<p><span><img alt="image placeholder" >
<p>但是其和Yahoo合作两看后， Open Text 放弃了搜索而转移到企业级的内容管理方向上。一年以后，<a href="https://www.google.com/corporate/history.html" target="_blank">Google 才初次登场</a>。Open Text又是和机遇错过了，没有意识到搜索会变得有多大。</p>
<p>“如果 Open Text 有什么事是比较特殊的，那就是他们比任何人都有和Google很相近的技术”， Steve Parker（一个帮助Yahoo启动Open Text搜索技术的通讯顾问）说， “它比Google早三年进入市场，所以Google不得不为了以更快的速度发展而使劲烧钱，并且，Google也不一定有足够的时间去成为市场的领导者。如果当初不是那样，也许，今天的山大王将会是Open Text ”。</p>
<h2>10. Microsoft 拯救正在腐烂的苹果</h2>
<p><span><img alt="image placeholder" >
<p>后来，Apple 收到了一大笔急需的现金注入——1亿5千万美金——从一个看上去不可能的源头： <a href="https://coolshell.cn/article/5156/microsoft_to_invest_in_apple_jobs_ellison_on_board.html">Microsoft，还承诺继续开发Mac Office 套件</a>。这个交易由Apple的顾问Steve Jobs 和Microsoft商议而成，这一宣布曾经在Macworld Expo 博览会上被苹果的铁杆粉丝们暴以嘘声。这后，Steve Jobs成为了Apple的实习CEO。后面，我们都知道发生了什么。</p>
<p>如果Microsoft 当时没有 <a href="https://coolshell.cn/businesscenter/article/169752/1997_steve_jobs_was_wrong_and_microsoft_saved_apple.html">错过让苹果凋谢的这个机会</a>？我们可能会要在WinPhones上使用WinTunes而苦苦挣扎。在线的音乐和视频可能会停滞，或是更坏，被好莱坞控制着。而且，我们会因为没有Windows的另一个选择而长期地失望下去。这恐怕是唯一一个大家受益的“失误”了。</p>
<p style="TEXT-ALIGN: center"><img alt="image placeholder" >
年青的Steve Jobs</p>
<p>文章：<a href="https://www.pcworld.com/article/170337/the_10_stupidest_tech_company_blunders.html" target="_blank">来源</a>（PCWorld）</p>
<p align="center"><img alt="image placeholder" >
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/6950.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/506.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/7166.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/1174.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/6112.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/1142.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
</ul>
</div></div>
<div id="post-ratings-1295" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="c4655be8b7">
<img alt="image placeholder" >
<meta itemprop="headline" content="科技公司十大最愚蠢的错误">
<meta itemprop="description" content="有一些史上最大的高科技公司的交易没有发生。有一些最有前途的产品和服务也没出现。为什么？因为这其中的人和公司当时都没有意识到是什么样的东西滑过了他们的手指，或者，他们只是简单地不能预知未来会发生什么。

如果事情还能再来一次，也许今天我们就不会看到Apple和Microsoft了，而且，Yahoo可能会成为世界上最大的搜索引擎，Google只能成为后者。你也许只能从施乐电脑上读这篇文章，从Rea...">
<meta itemprop="datePublished" content="2009-08-19T23:17:20+08:00">
<meta itemprop="dateModified" content="2009-08-21T13:44:18+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/1295.html">
<meta itemprop="author" content="陈皓">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/1295.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="4">
<meta itemprop="ratingCount" content="8">
</div>
</div>
<div id="post-ratings-1295-loading" class="post-ratings-loading">
<img alt="image placeholder" >
 ]]></content>
<pubDate>2009-08-19T23:17:20+08:00</pubDate>
<guid>https://coolshell.cn/articles/1295.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ Code Review中的几个提示 ]]></title>
<link>https://coolshell.cn/articles/1302.html</link>
<content><![CDATA[ 
<p><img alt="image placeholder" >
<p>首先，我们先来看看Code Reivew的用处：</p>
<ol>
<li>Code reviews 中，可以通过大家的建议增进代码的质量。</li>
<li>Code reviews  是一个传递知识的手段，可以让其它并不熟悉代码的人知道作者的意图和想法，从而可以在以后轻松维护代码。</li>
<li>Code reviews 也鼓励程序员们相互学习对方的长处和优点。</li>
<li>Code reviews 也可以被用来确认自己的设计和实现是一个清楚和简单的。</li>
</ol>
<p>你也许注意到了在上面的Code Reivew中的诸多用处中，我们没有提到可以帮助找到程序的bug和保证代码风格和编码标准。这是因为我们认为：</p>
<p><span id="more-1302"></span></p>
<ol>
<li>
<strong>Code reviews <span style="color: #993300;">不应该</span>承担发现代码错误的职责</strong>。Code Review主要是审核代码的质量，如可读性，可维护性，以及程序的逻辑和对需求和设计的实现。代码中的bug和错误应该由单元测试，功能测试，性能测试，回归测试来保证的（其中主要是单元测试，因为那是最接近Bug，也是Bug没有扩散的地方）</li>
<li>
<strong>Code reviews <span style="color: #993300;">不应该</span>成为保证代码风格和编码标准的手段</strong>。编码风格和代码规范都属于死的东西，每个程序员在把自己的代码提交团队Review的时候，代码就应该是符合规范的，这是默认值，属于每个人自己的事情，不应该交由团队来完成，否则只会浪费大家本来就不够的时间。我个人认为“meeting”是奢侈的，因为那需要大家在同一时刻都挤出时间，所以应该用在最需要的地方。代码规范比起程序的逻辑和对需求设计的实现来说，太不值得让大家都来了。</li>
</ol>
<p>10年前，上面这两件事会是理所当然的（10年前的中国的软件开发还没有Code Reivew呢），今天，在中国的很多公司上面这两件事依然被认为是Code Reivew最重要的事，所以，我能够看到很多开发Team抱怨Code Review就是一个形式，费时费力不说，发现的问题还不如测试，而评审者们除了在代码风格上有些见术，别的也就没什么用了，长而久之，大家都会开始厌烦这个事了。</p>
<p>所以，在今天，请不要把上面的那两件事分散了Code Review的注意力，取而代之的是，对于Bug，程序的作者要在Review前提交自己的单元测试报告（如：XUnit的测试结果），对于代码规范，这是程序作者自己需要保证的，而且，有一些工具是可以帮你来检查代码规范的。</p>
<p><strong>当然，上述这些言论并不是说，你不能在Code Review中报告一个程序的bug或是一个代码规范的问题。我只是说，那并不是Code Review的意图。</strong></p>
<p>下面是我们认为的几个小提示可以让你更好进行Code Review这项最有价值的活动。</p>
<div id="ez-toc-container" class="ez-toc-v2_0_17 counter-hierarchy counter-decimal ez-toc-grey">
<div class="ez-toc-title-container">
<p class="ez-toc-title">目录</p>
<span class="ez-toc-title-toggle"></span>
</div>
<nav><ul class="ez-toc-list ez-toc-list-level-1">
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-1" href="#1-_%E7%BB%8F%E5%B8%B8%E8%BF%9B%E8%A1%8CCode_Review" title="1.- 经常进行Code Review">1.- 经常进行Code Review</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-2" href="#2-_Code_Review%E4%B8%8D%E8%A6%81%E5%A4%AA%E6%AD%A3%E5%BC%8F%EF%BC%8C%E8%80%8C%E4%B8%94%E8%A6%81%E7%9F%AD" title="2.- Code Review不要太正式，而且要短">2.- Code Review不要太正式，而且要短</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-3" href="#3-_%E5%B0%BD%E5%8F%AF%E8%83%BD%E7%9A%84%E8%AE%A9%E4%B8%8D%E5%90%8C%E7%9A%84%E4%BA%BAReivew%E4%BD%A0%E7%9A%84%E4%BB%A3%E7%A0%81" title="3.- 尽可能的让不同的人Reivew你的代码">3.- 尽可能的让不同的人Reivew你的代码</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-4" href="#4-_%E4%BF%9D%E6%8C%81%E7%A7%AF%E6%9E%81%E7%9A%84%E6%AD%A3%E9%9D%A2%E7%9A%84%E6%80%81%E5%BA%A6" title="4.- 保持积极的正面的态度">4.- 保持积极的正面的态度</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-5" href="#5-_%E5%AD%A6%E4%BC%9A%E4%BA%AB%E5%8F%97Code_Reivew" title="5.- 学会享受Code Reivew">5.- 学会享受Code Reivew</a></li>
</ul></nav>
</div>
<h4>
<span class="ez-toc-section" id="1-_%E7%BB%8F%E5%B8%B8%E8%BF%9B%E8%A1%8CCode_Review"></span>1.- 经常进行Code Review<span class="ez-toc-section-end"></span>
</h4>
<p>以前经历过几个相当痛苦的Code Review，那几次Code Review都是在程序完成的时候进行的，当你面对那近万行的代码，以前N多掺和在一起的功能，你会发现，整个Code Review变得非常地艰难，用不了一会儿，你就会发现大家都在拼命地打着哈欠，但还是要坚持，有时候，这样的Review会持续3个小时以上，相当的夸张。而且，会议上会出现相当多的问题和争论，因为，这就好像，人家都把整个房子盖好了，大家Review时这挑一点那挑一点，有时候触动地基或是承重墙体，需要大动手术，让人返工，这当然会让盖房的人一下就跳起来极力地维护自己的代码，最后还伤了团队成员的感情。</p>
<p>所以，千万不要等大厦都盖好了再去Reivew，而且当有了地基，有了框架，有了房顶，有了门窗，有了装修，的各个时候循序渐进地进行Review，这样反而会更有效率，也更有帮助。</p>
<p>下面是一些观点，千万要铭记：</p>
<ul>
<li><strong>要Review的代码越多，那么要重构，重写的代码就会越多。而越不被程序作者接受的建议也会越多，唾沫口水战也会越多。<br>
</strong></li>
<li>
<strong>程序员代码写得时候越长，程序员就会在代码中加入越来越多的个人的东西。</strong> 程序员最大的问题就是“自负”，无论什么时候，什么情况下，有太多的机会会让这种“自负”澎涨开来，并开始影响团队影响整个项目，以至于听不见别人的建议，从而让Code Review变成了口水战。</li>
<li><strong>越接近软件发布的最终期限，代码也就不能改得太多。</strong></li>
</ul>
<p>我个人的习惯，并且也是对团队成员的要求是——先Review设计实现思路，然后Review设计模式，接着Review成形的骨干代码，最后Review完成的代码，如果程序复杂的话，需要拆成几个单元或模块分别Review。当然，最佳的practice是，每次Review的代码应该在1000行以内，时间不能超过一部电影的时间——1.5小时（因为据说那个一个正常人的膀胱可以容纳尿液的最长限度）</p>
<p>当然，在敏捷开发中，他们不需要Code Reivew，其实，敏捷开发中使用更为极端的“结对编程”（Pair-Programming）的方法 —— 一种时时刻刻都在进行Code Review的方法，个人感觉在实际过程中，这种方法有点过了。另外，大家可以看看本站的另一篇文章《<a href="https://coolshell.cn/articles/16.html" rel="bookmark">结对编程的利与弊</a>》来了解一下这种方法的问题。</p>
<h4>
<span class="ez-toc-section" id="2-_Code_Review%E4%B8%8D%E8%A6%81%E5%A4%AA%E6%AD%A3%E5%BC%8F%EF%BC%8C%E8%80%8C%E4%B8%94%E8%A6%81%E7%9F%AD"></span>2.- Code Review不要太正式，而且要短<span class="ez-toc-section-end"></span>
</h4>
<p>忘了那个代码评审的Checklist吧，走到你的同事座位跟前，像请师父一样请他坐到你的电脑面前，然后，花5分钟给他讲讲你的代码，给他另外一个5分钟让他给你的代码提提意见，这比什么都好。而如果你用了一个Checklist，让这个事情表现得很正式的话，下面两件事中必有一件事会发生：</p>
<ol>
<li>只有在Checklist上存在的东西才会被Review。</li>
<li>Code Reviews 变成了一种礼节性的东西，你的同事会装做很关心你的代码，但其实他心里想着尽快地离开你。</li>
</ol>
<p>只有不正式的Code Review才会让你和评审者放轻松，人只有放松了，才会表现得很真实，很真诚。记住Review只不过是一种形式，而只有在相互信任中通过相互的讨论得到了有意义和有建设性的建议和意见，那才是最实在的。不然，作者和评审者的关系就会变成小偷和警察的关系。</p>
<h4>
<span class="ez-toc-section" id="3-_%E5%B0%BD%E5%8F%AF%E8%83%BD%E7%9A%84%E8%AE%A9%E4%B8%8D%E5%90%8C%E7%9A%84%E4%BA%BAReivew%E4%BD%A0%E7%9A%84%E4%BB%A3%E7%A0%81"></span>3.- 尽可能的让不同的人Reivew你的代码<span class="ez-toc-section-end"></span>
</h4>
<p>这是一个好主意，如果可能的话，不要总是只找一个人来Review你的代码，不同的人有不同的思考方式，有不同的见解，所以，不同的人可以全面的从各个方面评论你的代码，有的从实现的角度，有的从需求的角度，有的从用户使用的角度，有的从算法的角度，有的从性能效率的角度，有的从易读的角度，有的从扩展性的角度……，啊，好多啊，还让不让人活了。不管怎么说，多找一些不同的人会对你很有好处。当然，不要太多了，人多嘴杂反而适得其反，基本上来说，不要超过3个人，这是因为，这是一个可以围在一起讨论的最大人员尺寸。</p>
<p>下面是几个优点：</p>
<ol>
<li>从不同的方向评审代码总是好的。</li>
<li>会有更多的人帮你在日后维护你的代码。</li>
<li>这也是一个增加团队凝聚力的方法。</li>
</ol>
<h4>
<span class="ez-toc-section" id="4-_%E4%BF%9D%E6%8C%81%E7%A7%AF%E6%9E%81%E7%9A%84%E6%AD%A3%E9%9D%A2%E7%9A%84%E6%80%81%E5%BA%A6"></span>4.- 保持积极的正面的态度<span class="ez-toc-section-end"></span>
</h4>
<p>再说一次，程序最大的问题就是“自负”，尤其当我们Reivew别人的代码的时候，我已经见过无数的场面，程序员在Code Review的时候，开始抨击别人的代码，质疑别人的能力。太可笑了，我分析了一下，这类的程序员其实并没有什么本事，因为他们指责对方的目的是想告诉大家自己有多么的牛，靠这种手段来表现自己的程序员，其实是就是传说中所说的“半瓶水”。</p>
<p>所以，无论是代码作者，还是评审者，都需要一种积极向上的正面的态度，作者需要能够虚心接受别人的建议，因为别人的建议是为了让你做得更好；评审者也需要以一种积极的正面的态度向作者提意见，因为那是和你在一个战壕里的战友。记住，你不是一段代码，你是一个人！</p>
<h4>
<span class="ez-toc-section" id="5-_%E5%AD%A6%E4%BC%9A%E4%BA%AB%E5%8F%97Code_Reivew"></span>5.- 学会享受Code Reivew<span class="ez-toc-section-end"></span>
</h4>
<p>这可能是最重要的一个提示了，如果你到了一个人人都喜欢Code Reivew的团阿，那么，你会进入到一个生机勃勃的地方，在那里，每个人都能写出质量非常好的代码，在那里，你不需要经理的管理，团队会自适应一切变化，他们相互学习，相互帮助，不仅仅是写出好的代码，而且团队和其中的每个人都会自动进化，最关键的是，这个是一个团队。</p>
<p>（全文完）</p>
<p align="center"><img alt="image placeholder" >
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/17757.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/11432.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/4875.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/1719.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/1218.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/962.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
</ul>
</div></div>
<div id="post-ratings-1302" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="04c068688b">
<img alt="image placeholder" >
<meta itemprop="headline" content="Code Review中的几个提示">
<meta itemprop="description" content="Code Review应该是软件工程最最有价值的一个活动，之前，本站发表过《简单实用的Code Review工具》，那些工具主要是用来帮助更有效地进行这个活动，这里的这篇文章，我们主要想和大家分享一下Code Review代码审查的一些心得。

首先，我们先来看看Code Reivew的用处：

	Code reviews 中，可以通过大家的建议增进代码的质量。
	Code review...">
<meta itemprop="datePublished" content="2009-08-20T23:49:49+08:00">
<meta itemprop="dateModified" content="2014-04-12T11:51:45+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/1302.html">
<meta itemprop="author" content="陈皓">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/1302.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="4.53">
<meta itemprop="ratingCount" content="19">
</div>
</div>
<div id="post-ratings-1302-loading" class="post-ratings-loading">
<img alt="image placeholder" >
 ]]></content>
<pubDate>2009-08-20T23:49:49+08:00</pubDate>
<guid>https://coolshell.cn/articles/1302.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ 在线代码编译服务Codepad.org ]]></title>
<link>https://coolshell.cn/articles/1310.html</link>
<content><![CDATA[ 
<p>Codepad.org是一个很有意思的网站，它的主页很简单，左边是可以编译并执行的程序语言，右边则是让你输入程序的输入框，输入框的下面是一个“Run Code”的复选钮和一个“Submit”的提交按钮。</p>
<p>其操作起来也非常简单，先选中你要编译并运行的程序语言，然后在输入框中粘贴或输入程序的原代码，然后，点击提交，你就可以看么你程序编译出错的提示，或是执行的结果。</p>
<p>也许，你会觉得很无聊天，但我觉得这在某些时候会非常有用，尤其是你找不到编译器而又想验证一段代码的时候，这种时候还是比较多的。特别是我们很难有一台可以运行所有语言的电脑，如果有的话，那一定是你自己的个人电脑，当你不使用你自己的电脑时，你就会着急了。而且，我觉得这项服务非常地有意思，因为，这样一来，你甚至可以在你的手机上写任何语言的程序了。</p>
<p><span id="more-1310"></span></p>
<p>目前这个网站支持下面这样语言——C，C++，D，Haskell，Lua，OCaml，PHP，Perl，Plain Text，Python，Ruby，Scheme，Tcl。（没有Java）</p>
<p>当我打开这个网页的时候，我立马想到了《<a title="作者：耗子  --  521 次点击" href="https://coolshell.cn/articles/914.html">6个变态的C语言Hello World程序</a>》，然后就取了其中一个上去试了一下，果然方便啊。的确是相当的省事啊，不需要打开编译器或IDE，不需要建工程，不需要存成文件，太方便了。</p>
<p style="text-align: center;"><a href="https://coolshell.cn/wp-content/uploads/2009/08/codepad2.jpg"><img alt="image placeholder" >
<p>。</p>
<p>(全文完)</p>
<p align="center"><img alt="image placeholder" >
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/18024.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/8990.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/8745.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/7886.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/5444.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/5201.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
</ul>
</div></div>
<div id="post-ratings-1310" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="0640323d83">
<img alt="image placeholder" >
<meta itemprop="headline" content="在线代码编译服务Codepad.org">
<meta itemprop="description" content="Codepad.org是一个很有意思的网站，它的主页很简单，左边是可以编译并执行的程序语言，右边则是让你输入程序的输入框，输入框的下面是一个“Run Code”的复选钮和一个“Submit”的提交按钮。

其操作起来也非常简单，先选中你要编译并运行的程序语言，然后在输入框中粘贴或输入程序的原代码，然后，点击提交，你就可以看么你程序编译出错的提示，或是执行的结果。

也许，你会觉得很无聊天，...">
<meta itemprop="datePublished" content="2009-08-23T20:14:44+08:00">
<meta itemprop="dateModified" content="2012-09-18T10:57:55+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/1310.html">
<meta itemprop="author" content="陈皓">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/1310.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="4.29">
<meta itemprop="ratingCount" content="7">
</div>
</div>
<div id="post-ratings-1310-loading" class="post-ratings-loading">
<img alt="image placeholder" >
 ]]></content>
<pubDate>2009-08-23T20:14:44+08:00</pubDate>
<guid>https://coolshell.cn/articles/1310.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ Erlang和Python互通 ]]></title>
<link>https://coolshell.cn/articles/1313.html</link>
<content><![CDATA[ 
<p>最近开发 Erlang ,对其字符串处理能力无言至极,于是决定把它和python联合起来,打造一个强力的分布式系统,等将来需要系统级开发时,我再把 C++/C组合进来.</p>
<p>首先参考了 Erlang 官方文档和 <a href="https://www.zend2.com/DoIt.php?u=Oi8vd3d3LmJsb2dnZXIuY29tL2Jsb2cuZGV2ZWxvcGVycy5hcGkuc2luYS5jb20uY24vP3RhZz1lcmxhbmc%3D&amp;b=5">http://<cite>blog.developers.api.sina.com.cn/?tag=<strong>erlang</strong></cite></a> 以及<a href="https://www.zend2.com/DoIt.php?u=Oi8va2F6bWllci5uZXQvY29tcHV0ZXIvcG9ydC1ob3d0by8%3D&amp;b=5"> http://kazmier.net/computer/port-howto/</a> .</p>
<p>研读了将近24个小时, 才终于完全把问题解决.  起名为town，town在英文里表示集市，也就是代表各种语言在这里的交流与互动。) )<br>
<span id="more-1313"></span><br>
[erl]-module(town).<br>
-behaviour(gen_server).</p>
<p>%% API<br>
-export([start/0,combine/1]).</p>
<p>%% gen_server callbacks<br>
-export([init/1, handle_call/3, handle_cast/2, handle_info/2,<br>
terminate/2, code_change/3]).<br>
-record(state, {port}).</p>
<p>start() -&amp;gt;<br>
gen_server:start_link({global, ?MODULE}, ?MODULE, [], []).<br>
stop() -&amp;gt;<br>
gen_server:cast(?SERVER, stop).<br>
init([]) -&amp;gt;<br>
process_flag(trap_exit, true),<br>
Port = open_port({spawn, "python -u /home/freefis/Desktop/town.py"},[stream,{line, 1024}]),<br>
{ok, #state{port = Port}}.</p>
<p>handle_call({combine,String}, _From, #state{port = Port} = State) -&amp;gt;<br>
port_command(Port,String),<br>
receive<br>
{Port,{data,{_Flag,Data}}} -&amp;gt;<br>
io:format("receiving:~p~n",[Data]),<br>
sleep(2000),<br>
{reply, Data, Port}<br>
end.<br>
handle_cast(stop, State) -&amp;gt;<br>
{stop, normal, State};<br>
handle_cast(_Msg, State) -&amp;gt;<br>
{noreply, State}.</p>
<p>handle_info(Info, State) -&amp;gt;<br>
{noreply,State}.</p>
<p>terminate(_Reason, Port) -&amp;gt;<br>
ok.</p>
<p>code_change(_OldVsn, State, _Extra) -&amp;gt;<br>
{ok, State}.</p>
<p>%%——————————————————————–<br>
%%% Internal ———————————————————<br>
combine(_String) -&amp;gt;<br>
start(),<br>
String = list_to_binary("combine|"++_String++"\n"),<br>
gen_server:call(?SERVER,{combine,String},infinity),<br>
stop().[/erl]<br>
这段是Python的脚本 当erlang中town:combine(“sentence1+sentence2”)执行时，会在后台启动python的脚本，处理完毕后返回给Erlang结果:sentence1sentence2，然后退出。 </p>
<p></p>
<pre data-enlighter-language="python" class="EnlighterJSRAW">import sys
def handle(_string):
    if _string.startswith("combine|"):
        string = "".join( _string[8:].split(","))
        return string

"""waiting for input """
while 1:
    # Recv. Binary Stream as Standard IN
    _stream = sys.stdin.readline()

if not _stream: break
    # Scheme, Turn into  Formal String
    inString  = _stream.strip("\r\n")
    # handle String
    outString = handle(inString)
    # send to port as Standart OUT
    sys.stdout.write("%s\n" % (outString,))
    sys.exit(0)</pre>
<p align="center"><img alt="image placeholder" >
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/1839.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/18360.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/11265.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/10822.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/10169.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/7886.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
</ul>
</div></div>
<div id="post-ratings-1313" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="31be5211ec">
<img alt="image placeholder" >
<meta itemprop="headline" content="Erlang和Python互通">
<meta itemprop="description" content="最近开发 Erlang ,对其字符串处理能力无言至极,于是决定把它和python联合起来,打造一个强力的分布式系统,等将来需要系统级开发时,我再把 C++/C组合进来.

首先参考了 Erlang 官方文档和 http://blog.developers.api.sina.com.cn/?tag=erlang 以及 http://kazmier.net/computer/port-howto/...">
<meta itemprop="datePublished" content="2009-08-24T22:30:49+08:00">
<meta itemprop="dateModified" content="2009-11-11T00:36:05+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/1313.html">
<meta itemprop="author" content="free.wang">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/1313.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="3.29">
<meta itemprop="ratingCount" content="7">
</div>
</div>
<div id="post-ratings-1313-loading" class="post-ratings-loading">
<img alt="image placeholder" >
 ]]></content>
<pubDate>2009-08-24T22:30:49+08:00</pubDate>
<guid>https://coolshell.cn/articles/1313.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ Unicode字符预览表 ]]></title>
<link>https://coolshell.cn/articles/1331.html</link>
<content><![CDATA[ 
<p>关于Unicode的字符表，你可以在这里下载：</p>
<p style="padding-left: 30px;"><a href="https://www.unicode.org/Public/5.1.0/ucd/UnicodeData.txt" target="_blank">http://www.unicode.org/Public/5.1.0/ucd/UnicodeData.txt</a></p>
<p>而有热心人通过上面个表格，使用JavaScript制作了下面这个网页，其穷举并可以显示上述定义的所有的Unicode字符。</p>
<p style="PADDING-LEFT: 30px; TEXT-ALIGN: left"><a href="http://www.ftrain.com/unicode/" target="_blank">http://www.ftrain.com/unicode/</a></p>
<p style="TEXT-ALIGN: left">打开这个网页，左边的那个大表格是一个10×10的列表，每个小单元格上面是这个字符的样子，下面是这个字符的HTML输入格式。这个表格下面是一个预览格，因为有些这符太细腻了。</p>
<p style="TEXT-ALIGN: left"><span id="more-1331"></span></p>
<p style="TEXT-ALIGN: left">当然，所有的字符不肯定不止100个，所以，网页右上角有三个进度条，一个是100个字符的往后移动，第二个是1000个字符，第三个是10000个。</p>
<p style="TEXT-ALIGN: left">随便找了一下，找到下面这些各式各样的箭头，如下所示：</p>
<style type="text/css">
td,td {width:50px;height:50px;text-align:center;vertical-align:center;font-size:2.5em;border:1px solid #ccc;}
.exp {font:8pt sans-serif;color:#aaa;height:1em;}
</style>
<table border="1">
<tbody>
<tr>
<td>← <span class="exp">&amp;#8592;</span>
</td>
<td>↑ <span class="exp">&amp;#8593;</span>
</td>
<td>→ <span class="exp">&amp;#8594;</span>
</td>
<td>↓ <span class="exp">&amp;#8595;</span>
</td>
<td>↔ <span class="exp">&amp;#8596;</span>
</td>
<td>↕ <span class="exp">&amp;#8597;</span>
</td>
<td>↖ <span class="exp">&amp;#8598;</span>
</td>
<td>↗ <span class="exp">&amp;#8599;</span>
</td>
</tr>
<tr>
<td>↘ <span class="exp">&amp;#8600;</span>
</td>
<td>↙ <span class="exp">&amp;#8601;</span>
</td>
<td>↚ <span class="exp">&amp;#8602;</span>
</td>
<td>↛ <span class="exp">&amp;#8603;</span>
</td>
<td>↜ <span class="exp">&amp;#8604;</span>
</td>
<td>↝ <span class="exp">&amp;#8605;</span>
</td>
<td>↞ <span class="exp">&amp;#8606;</span>
</td>
<td>↟ <span class="exp">&amp;#8607;</span>
</td>
</tr>
<tr>
<td>⇞ <span class="exp">&amp;#8670;</span>
</td>
<td>⇟ <span class="exp">&amp;#8671;</span>
</td>
<td>⇠ <span class="exp">&amp;#8672;</span>
</td>
<td>⇡ <span class="exp">&amp;#8673;</span>
</td>
<td>⇢ <span class="exp">&amp;#8674;</span>
</td>
<td>⇣ <span class="exp">&amp;#8675;</span>
</td>
<td>⇤ <span class="exp">&amp;#8676;</span>
</td>
<td>⇥ <span class="exp">&amp;#8677;</span>
</td>
</tr>
</tbody>
</table>
<p>还有很多更奇怪的字符，你可以上去看看。如果你访问不了了，你可以通过本站下载这个文件：《<a href="https://coolshell.cn/wp-content/uploads/2009/08/Unicode-table.htm" target="_blank">Unicode 字符集预览表</a>》</p>
<p></p>
<p align="center"><img alt="image placeholder" >
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/21649.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/3684.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/1957.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/10688.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/3236.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/3433.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
</ul>
</div></div>
<div id="post-ratings-1331" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="be2546d8d3">
<img alt="image placeholder" >
<meta itemprop="headline" content="Unicode字符预览表">
<meta itemprop="description" content="关于Unicode的字符表，你可以在这里下载：
http://www.unicode.org/Public/5.1.0/ucd/UnicodeData.txt
而有热心人通过上面个表格，使用JavaScript制作了下面这个网页，其穷举并可以显示上述定义的所有的Unicode字符。
http://www.ftrain.com/unicode/
打开这个网页，左边的那个大表格是一个10x10...">
<meta itemprop="datePublished" content="2009-08-24T23:45:36+08:00">
<meta itemprop="dateModified" content="2009-08-24T23:45:36+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/1331.html">
<meta itemprop="author" content="陈皓">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/1331.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="3.71">
<meta itemprop="ratingCount" content="7">
</div>
</div>
<div id="post-ratings-1331-loading" class="post-ratings-loading">
<img alt="image placeholder" >
 ]]></content>
<pubDate>2009-08-24T23:45:36+08:00</pubDate>
<guid>https://coolshell.cn/articles/1331.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ Unix Pipes 管道原稿 ]]></title>
<link>https://coolshell.cn/articles/1351.html</link>
<content><![CDATA[ 
<p><img alt="image placeholder" >
<p>40年前，Unix操作系统横空出世，Unix不仅仅带来了一个操作系统，还创造C语言，Socket，开源，黑客等等文化，这些文化影响着整个计算机世界的文明，直到今天。</p>
<p>如果说Unix是计算机文明中最伟大的发明，那么，Unix下的Pipe管道就是跟随Unix所带来的另一个伟大的发明。管道的出现，解决的就是让不同功能的程序可以互相连通通讯，从而可以让软件开发，程序开发更加的“高内聚，低耦合”，从而可以让程序“Do one thing, Do it well”，从而可以让程序“Keep it Simple Stupid”等等，这一哲学引影了一代又一代的软件架构，直到今天的云计算。</p>
<p>管道的发名者叫，<a href="https://en.wikipedia.org/wiki/Douglas_McIlroy" target="_blank"><strong>Malcolm Douglas McIlroy</strong></a>，他也是Unix的创建者，是Unix文化的缔造者之一。他归纳的Unix哲学如下：</p>
<blockquote><p>程序应该只关注一个目标，并尽可能把它做好。让程序能够互相协同工作。应该让程序处理文本数据流，因为这是一个通用的接口。</p></blockquote>
<p><span id="more-1351"></span></p>
<p>下面是管道在1964年10月11日，出现的第一个打印稿，下面是扫描件。</p>
<p><a href="https://coolshell.cn/wp-content/uploads/2009/08/pipe.png"></a></p>
<p><img alt="image placeholder" >
<p>全文如下：</p>
<pre><code>                        - 10 -
            Summary--what's most important.
    To put my strongest concerns into a nutshell:
1. We should have some ways of connecting programs like
garden hose--screw in another segment when it becomes when
it becomes necessary to massage data in another way.
This is the way of IO also.
2. Our loader should be able to do link-loading and
controlled establishment.
3. Our library filing scheme should allow for rather
general indexing, responsibility, generations, data path
switching.
4. It should be possible to get private system components
(all routines are system components) for buggering around with.

                                                M. D. McIlroy
                                                October 11, 1964
</code></pre>
<p>我就不翻译了，因为这段文字足够的简单，就像连接花园中浇花用的软管一样，相信你不但能够读懂它，还能从中收益。</p>
<p>（全文完）</p>
<p align="center"><img alt="image placeholder" >
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/19996.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/18360.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/17998.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/12103.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/11847.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/9410.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
</ul>
</div></div>
<div id="post-ratings-1351" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="5c62af55d0">
<img alt="image placeholder" >
<meta itemprop="headline" content="Unix Pipes 管道原稿">
<meta itemprop="description" content="

40年前，Unix操作系统横空出世，Unix不仅仅带来了一个操作系统，还创造C语言，Socket，开源，黑客等等文化，这些文化影响着整个计算机世界的文明，直到今天。

如果说Unix是计算机文明中最伟大的发明，那么，Unix下的Pipe管道就是跟随Unix所带来的另一个伟大的发明。管道的出现，解决的就是让不同功能的程序可以互相连通通讯，从而可以让软件开发，程序开发更加的“高内聚，低耦合...">
<meta itemprop="datePublished" content="2009-08-25T00:17:11+08:00">
<meta itemprop="dateModified" content="2009-08-25T00:17:11+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/1351.html">
<meta itemprop="author" content="陈皓">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/1351.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="4.11">
<meta itemprop="ratingCount" content="9">
</div>
</div>
<div id="post-ratings-1351-loading" class="post-ratings-loading">
<img alt="image placeholder" >
 ]]></content>
<pubDate>2009-08-25T00:17:11+08:00</pubDate>
<guid>https://coolshell.cn/articles/1351.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ 谁写了Linux ]]></title>
<link>https://coolshell.cn/articles/1360.html</link>
<content><![CDATA[ 
<p><a href="https://www.linuxfoundation.org/sites/www.linuxfoundation.org/themes/opensourcery/images/linux-foundation.png" target="_blank"><img alt="image placeholder" >
<p>下面是一个导读，希望每一个看到这篇文章的朋友都能看看原文的报告：《<a href="https://www.linuxfoundation.org/publications/whowriteslinux.pdf" target="_blank">Who Writes Linux and Who Supports It</a>》(PDF)</p>
<p>这份报告的一开始就对Linux的开发进行了总结：</p>
<ul>
<li>每2-3个月一个release</li>
<li>最近的每一次release都超过10000个补丁</li>
<li>有超过1000个开发人员进行开发，他们来自200个公司或组织。</li>
<li>自2005年以来，超过5000个来自500个不同公司的开发人员为Linux内核做过贡献。</li>
<li>自2008年以来，每次release，都大约增加了10%左右的开发人员，而且，代码码达到了2.7百万行。</li>
</ul>
<p>是的，这样的生产率真是太疯狂了。下面是这份文档中所涉及的一些介绍和一些具体的统计数据。</p>
<p><span id="more-1360"></span></p>
<h4>Linux开发模式</h4>
<p>Linux的开发采用的是一种宽松的，基于时间的开发模式。每一个新的主要版本的release基本上会发生在2-3个月之内。这个开发模式是在2005年形成的，因为任何人都可以修改其内核的代码，所以，很多补丁进入内核的时间非常的快。</p>
<p>其中一个有意义的事是，他们有一个叫Linux-Next的服务器，这个服务器一般来说会是下一个版本的staging，比如，如果目前的稳定版本是2.6.31，那么Linux-Next上就会运行2.6.32。这样，所有的developer都能看到下一个版本总体的样子，而且，这更容易发现一些集成性的问题。</p>
<p>在2.6的mainline代码库上（mailline是代码库的主线），有一个叫做“stable team”的团队，他们会做短期的维护工作，他们确保所有的重要的补丁或更改都会被放入mailline中，这样就能滚入下一个release。</p>
<p>然后，这份文档中给出了大量的开发编译数据。</p>
<h4>统计数据</h4>
<p>下面的统计数据是从版本2.6.11开始的，我把源文件中的表格合并成一个大表，如下所示。</p>
<p style="text-align: center;"><img alt="image placeholder" >
<p style="text-align: left;">从上图我们可以看到下面这些东西：</p>
<ul>
<li>
<div style="text-align: left;">Linux Kernel开发的速度越来越快，看看每个release的补丁数，每天文件增、删、改就可以知道。</div>
</li>
<li>
<div style="text-align: left;">Linux Kernel开发的团队是越来越大，包括人员和参与的公司。</div>
</li>
</ul>
<p style="text-align: left;">下面是几个统计图表：</p>
<p style="text-align: center;"><img alt="image placeholder" >
平均每天的修改</p>
<p style="text-align: center;"><img alt="image placeholder" >
代码修改统计</p>
<p style="text-align: center;"><img alt="image placeholder" >
开发人员</p>
<h4 style="text-align: left;">谁写了Linux</h4>
<p style="text-align: left;">最后我们进入主题——谁写了Linux，首先，我们先来看一下进入代码修改的Top 30的开发人员列表：</p>
<p><img alt="image placeholder" >
<p>我们可以看到，Linus Torvalds （729 总修改，自2.6.24版来254 修改）无法进入前30名。当然，对Linux的贡献绝对不能通过代码行来表示，Linus对Linux就算是在今天也是至关紧要的。</p>
<p>好，让我们再来看看那些公司对Linux的贡献。根据这份报告所说，知道每个developer所在的公司，主要是通过了下面的几种方法：</p>
<ul>
<li>使用的邮件地址有公司的名字。</li>
<li>由赞助者提交的代码。</li>
<li>直接询问得到的。</li>
</ul>
<p>所以，这些数据只能算得上的近似，不过也能看到一个总体的样子了。下图中“None”代表没有职业无业游民，“Unknown”代表无名氏或是英雄不知出处。</p>
<p style="text-align: center;"><img alt="image placeholder" >
<p>我们可以看到，Top 10公司，为Linux贡献了近70%的代码。包括了None和Unknown，而且，那些是拿着公司报酬给Linux作开发的程序员。</p>
<p>那么，为什么这些公司要支持Linux的内核开发呢？</p>
<ul>
<li>我们可以看到像IBM, Intel, SGI, MIPS, Freescale, HP, Fujitsu这样的大公司，他们的目的当然是为了确保Linux能够在他们的硬件上工作得更好。</li>
<li>我们也可以看到像Red Hat, Novell, 和MontaVista这些Linux的Distribution公司，他们是Linux的主力，主要是为了提供给他们的客户更好的服务。</li>
<li>同样，我们还能看到像Sony, Nokia, 和Samsung这样的公司，这些公司主要是用Linux来开发数码产品，如摄像机、手机或是电视，他们使用Linux做一些嵌入式开发，以保证他们的产品工作得更好。</li>
<li>还有一些和IT都没有关系的，例如：Volkswagen公司在v21.6.25中为Linux加入了PF_CAN网络实现的协议。Quantum Controls BV公司在2.6.30时加入了一个航海导航的补丁，这些公司都会使用Linux来完善他们的产品。</li>
</ul>
<p>看来，Linux的势头是越来越无法阻挡了，你也想加入这个阵营吗？点下面的链接吧：<a href="https://ldn.linuxfoundation.org/book/how-participate-linux-community">http://ldn.linuxfoundation.org/book/how-participate-linux-community</a></p>
<p>（全文完）</p>
<p align="center"><img alt="image placeholder" >
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/19219.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/18654.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/18360.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/17998.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/17416.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/17200.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
</ul>
</div></div>
<div id="post-ratings-1360" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="093df7a672">
<img alt="image placeholder" >
<meta itemprop="headline" content="谁写了Linux">
<meta itemprop="description" content="2009年8月，Linux软件基金会发布了一份叫《Who Writes Linux and Who Supports It》(PDF)的报告。这份报告主要对Linux 2.6.x的开发进行了全方位的统计。看了以后才知道，原来Linux的开发的生产率竟是这样的惊人，而且相当的的令人振奋，所以，在第一时间转过来给大家看看。让人不得不惊叹，这不可思议的具有非凡活力的社区。（注意，我们这里说的是Linux...">
<meta itemprop="datePublished" content="2009-08-25T19:36:19+08:00">
<meta itemprop="dateModified" content="2012-11-21T22:59:17+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/1360.html">
<meta itemprop="author" content="陈皓">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/1360.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="4.25">
<meta itemprop="ratingCount" content="16">
</div>
</div>
<div id="post-ratings-1360-loading" class="post-ratings-loading">
<img alt="image placeholder" >
 ]]></content>
<pubDate>2009-08-25T19:36:19+08:00</pubDate>
<guid>https://coolshell.cn/articles/1360.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ 初学C#编程的注意事项 ]]></title>
<link>https://coolshell.cn/articles/1375.html</link>
<content><![CDATA[ 
<p>下面是8个C#编程时的注意事项是给初学者的，可能你知道，也可能你不知道，不过这些都是一些可能会让人疏忽的地方，还是要注意一下。</p>
<p><strong>1.使用String变量:</strong></p>
<p>考虑有下面的一个程序想判断一下字符串是否有内容。</p>
<p></p>
<pre data-enlighter-language="csharp" class="EnlighterJSRAW">if (someString.Length &gt; 0)
{
    // …
}
</pre>
<p>但是，这个字符串对象很可能是个空对象，所以，最好先判断一下null</p>
<p></p>
<pre data-enlighter-language="csharp" class="EnlighterJSRAW">if  (!String.IsNullOrEmpty(someString))
{
    // 是不是更好一些？
}
</pre>
<p><span id="more-1375"></span></p>
<p><strong>2.字符器连接</strong></p>
<p></p>
<pre data-enlighter-language="csharp" class="EnlighterJSRAW">string s = “dev”;
s += “-”;
s += “the”;
s += “-”;
s += “web”;
s += “.”;
s += “com”;
</pre>
<p>这样做没什么问题，只不过性能不高，因为+=操作符其实调用的是String类的Append访问，所以，+=会有两次函数调用，下面的则会好一些。</p>
<p></p>
<pre data-enlighter-language="csharp" class="EnlighterJSRAW">StringBuilder s = new StringBuilder();
s.Append(”dev”);
s.Append(”-”);
s.Append(”the”);
s.Append(”-”);
s.Append(”web”);
s.Append(”.”);
s.Append(”com”);
</pre>
<p><strong>3.使用Console</strong></p>
<p></p>
<pre data-enlighter-language="csharp" class="EnlighterJSRAW">Console.WriteLine("A= " + 1 + " B=" + 2 + " C= " + someValue);
</pre>
<p>和第二点说的一样，这并没有效率，使用下面的语句，会更有效率。</p>
<p></p>
<pre data-enlighter-language="csharp" class="EnlighterJSRAW">Console.WriteLine(”A: {0}\nB: {1}\nC: {2}”, 1, 2, someValue);
</pre>
<p><strong>4.字符串转整型</strong></p>
<p></p>
<pre data-enlighter-language="csharp" class="EnlighterJSRAW">int i = int.Parse(Request.QueryString["id"]);
</pre>
<p>这样做的问题是，如果有人这样请求你的页面：yourpage.aspx?id=A6，那么A6将会导致你的程序抛出一个异常。因为A6不是一个整数字符串。使用TryParse会好一点。</p>
<p></p>
<pre data-enlighter-language="csharp" class="EnlighterJSRAW">int i;
if (!int.TryParse(Request.QueryString["id"] , out i))
{
    //…
}
</pre>
<p><strong>5. 调用IDbConnection 的 Close 方法</strong></p>
<p></p>
<pre data-enlighter-language="csharp" class="EnlighterJSRAW">IDbConnection dbConn = null;

try
{
    dbConn = new SqlConnection(”some Connection String”);
    dbConn.Open();
}
finally
{
    dbConn.Close();
}
</pre>
<p>调用SqlConnection的构造函数可能会出现一个异常，如果是这样的话，我们还需要调用Close方法吗？</p>
<p></p>
<pre data-enlighter-language="csharp" class="EnlighterJSRAW">IDbConnection dbConn = null;

try
{
    dbConn = new SqlConnection(”Some Connection String”);
    dbConn.Open();
}
finally
{
    if (dbConn != null)
    {
        dbConn.Close();
    }
}
</pre>
<p><strong>6.使用List类</strong></p>
<p></p>
<pre data-enlighter-language="csharp" class="EnlighterJSRAW">public void SomeMethod(List&lt;SomeItem&gt; items)
{
    foreach(var item in items)
    {
        // do something with the item…
    }
}
</pre>
<p>如果我们只是遍历List容器中的所有内容的话，那么，使用IEnumerable接口会更好一些。因为函数参数传递一个List对象要比一个IEnumerable接口要花费更多的开销。</p>
<p></p>
<pre data-enlighter-language="csharp" class="EnlighterJSRAW">public void SomeMethod(IEnumerable&lt;SomeItem&gt; items)
{
    foreach(var item in items)
    {
        // do something with the item…
    }
}
</pre>
<p><strong>7.直接使用数字</strong></p>
<p></p>
<pre data-enlighter-language="csharp" class="EnlighterJSRAW">if(mode == 1) { … }
else if(mode == 2) { … }
else if(mode == 3) { … }
</pre>
<p>为什么不给你的这些数字取个名字呢？比如使用Enumerations。</p>
<p></p>
<pre data-enlighter-language="csharp" class="EnlighterJSRAW">public enum SomeEnumerator
{
    DefaultMode = 1,
    SafeMode = 2,
    NormalMode = 3
}

if(mode == SomeEnumerator.DefaultMode) { … }
else if(mode == SomeEnumerator.SafeMode) { … }
else if(mode == SomeEnumerator.NormalMode) { … }
</pre>
<p><strong>8.字符串替换</strong></p>
<p></p>
<pre data-enlighter-language="csharp" class="EnlighterJSRAW">string s = "www.coolshell.cn is a amazing site";
s.Replace("amazing", "awful");
</pre>
<p>字符串s的内容什么也不会改变，因为string返回的是替换过的字串。这点很多初学者经常忘了。下面就没有问题了。</p>
<p></p>
<pre data-enlighter-language="csharp" class="EnlighterJSRAW">s = s.Replace("amazing", "awful");
</pre>
<p>文章：<a href="http://dev-the-web.com/blog/2009/08/27/top-csharp-programming-mistakes/" target="_blank">来源</a></p>
<p align="center"><img alt="image placeholder" >
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/20845.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/18360.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/18024.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/12052.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/12012.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/11466.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
</ul>
</div></div>
<div id="post-ratings-1375" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="526a1499bf">
<img alt="image placeholder" >
<meta itemprop="headline" content="初学C#编程的注意事项">
<meta itemprop="description" content="下面是8个C#编程时的注意事项是给初学者的，可能你知道，也可能你不知道，不过这些都是一些可能会让人疏忽的地方，还是要注意一下。

1.使用String变量:

考虑有下面的一个程序想判断一下字符串是否有内容。

[csharp]
if (someString.Length &gt; 0)
{
    // …
}
[/csharp]

但是，这个字符串对象很可能是个空对象，所以...">
<meta itemprop="datePublished" content="2009-08-31T12:15:05+08:00">
<meta itemprop="dateModified" content="2009-08-31T15:59:11+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/1375.html">
<meta itemprop="author" content="陈皓">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/1375.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="3.93">
<meta itemprop="ratingCount" content="15">
</div>
</div>
<div id="post-ratings-1375-loading" class="post-ratings-loading">
<img alt="image placeholder" >
 ]]></content>
<pubDate>2009-08-31T12:15:05+08:00</pubDate>
<guid>https://coolshell.cn/articles/1375.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ 如何调试bash脚本 ]]></title>
<link>https://coolshell.cn/articles/1379.html</link>
<content><![CDATA[ 
<p><a href="https://en.wikipedia.org/wiki/Bash"><img alt="image placeholder" >
<h4 id="Tracing_script_execution">跟踪脚本的执行</h4>
<p>你可以让bash打印出你脚本执行的过程中的所有语句。这很简单，只需要使用bash的-x选项就可以做到，下面让我们来看一下。</p>
<p><span id="more-1379"></span></p>
<p>下面的这段脚本，先是输出一个问候语句，然后输出当前的时间：</p>
<p></p>
<pre data-enlighter-language="shell" class="EnlighterJSRAW">#!/bin/bash
echo "Hello $USER,"
echo "Today is $(date +'%Y-%m-%d')"
</pre>
<p>下面让我们使用-x选项来运行这段脚本：</p>
<p></p>
<pre data-enlighter-language="shell" class="EnlighterJSRAW">$ bash -x example_script.sh
+ echo 'Hello chenhao,'
Hello chenhao,
++ date +%Y-%m-%d
+ echo 'Today is 2009-08-31'
Today is 2009-08-31
</pre>
<p>这时，我们可以看到，bash在运行前打印出了每一行命令。而且每行前面的+号表明了嵌套。这样的输出可以让你看到命令执行的顺序并可以让你知道整个脚本的行为。<br>
<strong>在跟踪里输出行号</strong></p>
<p>在一个很大的脚本中，你会看到很多很多的执行跟踪的输出，阅读起来非常费劲，所以，你可以在每一行前加上文件的行号，这会非常有用。要做到这样，你只需要设置下面的环境变量：</p>
<p></p>
<pre data-enlighter-language="shell" class="EnlighterJSRAW"> 
export PS4='+${BASH_SOURCE}:${LINENO}:${FUNCNAME[0]}: '
</pre>
<p>让我们看看设置上了PS4这个环境变量后会是什么样的输出。</p>
<p> </p>
<p></p>
<pre data-enlighter-language="shell" class="EnlighterJSRAW">$ bash -x example_script.sh
+example_script.sh:2:: echo 'Hello chenhao,'
Hello chenhao,
++example_script.sh:3:: date +%Y-%m-%d
+example_script.sh:3:: echo 'Today is 2009-08-31'
Today is 2009-08-31
</pre>
<p> <br>
<strong>调试部份的脚本</strong></p>
<p>有些时候，你并不想调试整个脚本，你只要调试其中的一部份，那么，你可以在你想要调试的脚本之前，调用“set -x”，结束的时候调用“set +x”就可以了。如下面的脚本所示：</p>
<p> </p>
<p></p>
<pre data-enlighter-language="shell" class="EnlighterJSRAW">#!/bin/bash
echo "Hello $USER,"
set -x
echo "Today is $(date %Y-%m-%d)"
set +x
</pre>
<p> </p>
<p>让我们看看运行起来是啥样？</p>
<p> </p>
<p></p>
<pre data-enlighter-language="shell" class="EnlighterJSRAW">$ ./example_script.sh
Hello chenhao,
++example_script.sh:4:: date +%Y-%m-%d
+example_script.sh:4:: echo 'Today is 2009-08-31'
Today is 2009-08-31
+example_script.sh:5:: set +x
</pre>
<p> </p>
<p>注意：我们在运行脚本的时候，不需要使用<span>bash -x了。</span></p>
<p><span> </span></p>
<h4 id="Logging">日志输出</h4>
<p>跟踪日志有时候太多了，多得都受不了，而且，输出的内容很难阅读。一般来说，我们很多时候只关心于条件表达式，变量值，或是函数调用，或是循环等。。在这种情况下，log一些感兴趣的特定的信息，可能会更好。</p>
<p>使用log前，我们先写一个函数：</p>
<p></p>
<pre data-enlighter-language="shell" class="EnlighterJSRAW">_log() {
    if [ "$_DEBUG" == "true" ]; then
        echo 1&gt;&amp;2 "<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="e7c3a7">[email protected]</a>"
    fi
}
</pre>
<p> </p>
<p>于是，你就可以在你的脚本中如下使用：</p>
<p></p>
<pre data-enlighter-language="shell" class="EnlighterJSRAW"> 
_log "Copying files..."
cp src/* dst/
</pre>
<p> <br>
我们可以看到，上面那个_log函数，需要检查一个<span>_DEBUG</span> 变量，只有这个变量是真，才会真正开发输出日志。这样，你就只需要控制这个开关，而不需要删除你的debug信息。</p>
<p> </p>
<p></p>
<pre data-enlighter-language="shell" class="EnlighterJSRAW"> 
$ _DEBUG=true ./example_script.sh
</pre>
<p> </p>
<h4 id="Using_the_Bash_debugger">使用Bash专用调试器</h4>
<p>如果你在写一个相当复杂的脚本，并且，你需要一个完整的像调试别的语言一样的调试器，那么你可以试着用用这个开源软件—— <a href="http://bashdb.sourceforge.net/">bashdb</a>， 一个Bash的专用调试器。这个调试器很强大，你想得到的功能，他都有，比如，设置断点，单步跟踪，跳出函数，等等。它的用户接口很想GDB，这是他的<a href="http://bashdb.sourceforge.net/bashdb.html">文档</a> 。</p>
<p>（全文完）</p>
<p align="center"><img alt="image placeholder" >
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/8883.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/8619.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/2987.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/1539.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/19219.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/18654.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
</ul>
</div></div>
<div id="post-ratings-1379" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="46b9ea20f3">
<img alt="image placeholder" >
<meta itemprop="headline" content="如何调试bash脚本">
<meta itemprop="description" content="Bash 是Linux操作系统的默认Shell脚本。Shell是用来处理操作系统和用户交互的一个程序。Shell的脚本可以帮助用户自动化地和操作系统进行交互。你也可以理解为一种脚本式的编程。即然有编程，那么，程序的编译器，解释器，调试器就必不可少了，Bash也一样，但在调试方面可能会有一些和编程语言不一样的东西和技术，所以，下面这篇文章主要是说明调试bash脚本的各种技术。
跟踪脚本的执行
你...">
<meta itemprop="datePublished" content="2009-08-31T15:53:40+08:00">
<meta itemprop="dateModified" content="2009-08-31T15:53:40+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/1379.html">
<meta itemprop="author" content="陈皓">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/1379.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="4.55">
<meta itemprop="ratingCount" content="11">
</div>
</div>
<div id="post-ratings-1379-loading" class="post-ratings-loading">
<img alt="image placeholder" >
 ]]></content>
<pubDate>2009-08-31T15:53:40+08:00</pubDate>
<guid>https://coolshell.cn/articles/1379.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ 十个Web开发文章和教程 ]]></title>
<link>https://coolshell.cn/articles/1387.html</link>
<content><![CDATA[ 
<p>下面是十个在2009年8月份里出现的十个非常不错的Web开发方面的文章和教程。推荐给大家，当然，都是英文啦。如果你愿意，欢迎翻译后提交给<a href="https://coolshell.cn" target="_blank">酷壳</a>。</p>
<p>1）<a href="http://www.queness.com/post/530/simple-lava-lamp-menu-tutorial-with-jquery" target="_blank">一个简单的Lava 灯式的菜单</a>（使用jQuery完成）</p>
<p>2）<a href="http://www.jankoatwarpspeed.com/post/2009/08/20/Table-of-contents-using-jQuery.aspx" target="_blank">使用jQuery自动生成文章内容的目录</a>。就像是使用Word一样，设置一下标题，然后可以自动生成文章的目录。</p>
<p>3）<a href="http://www.queness.com/post/484/create-a-thumbnail-gallery-with-slick-heading-and-caption-effect-with-jquery" target="_blank">使用jQuery为图片创建图片标题和描述</a>。这是一个超Cool的效果，当你的鼠标移到图片上的时候，图片的上下会出现遮覆，上面是标题，下面是描述，相当不错的用户体验，当鼠标移开后，遮覆消失。</p>
<p><span id="more-1387"></span></p>
<p>4）<a href="http://net.tutsplus.com/videos/screencasts/a-crash-course-in-advanced-css3-effects/" target="_blank">CSS3速成教程</a>。主要讨论了CSS3的这些特性：旋转和改变大小，动画，Photoshop风格的遮罩，图片倒影，色彩渐变，转换等。有一个不错的flash视频。</p>
<p>5）<a href="http://www.hongkiat.com/blog/30-new-useful-wordpress-tricks-hacks/" target="_blank">30+相当有用的Wordpress的巧门</a>。相当相当不错的一些和Wordpress相关的插件和小巧门，非常非常地实用。</p>
<p>6）<a href="http://www.noupe.com/php/htaccess-techniques.html" target="_blank">htaccess技术的权威性指南</a>。本文给出了12个非常有用的apache的设置，可以让你更容易设置你的站点，在这篇文章的最后，还列出了一些经验上的东西。另外，你可以参考本站的《<a rel="bookmark" href="https://coolshell.cn/articles/1035.html">16个简单实用的.htaccess小贴示</a>》。</p>
<p>7）<a href="http://www.noupe.com/php/php-regular-expressions.html" target="_blank">PHP正则表达式入门</a>。一个相当不错的入门教程，写得简单易懂。</p>
<p>8）<a href="http://net.tutsplus.com/tutorials/other/8-regular-expressions-you-should-know/" target="_blank">你需要知道的8个正则表达式</a>。正则表达式很有用，但是它具体用在什么地方呢？这篇文章给你了一票非常实用的示例。相当的不错。浏览这篇文章时别忘了看一下大家的回复，那里面也有很多不错的资源。</p>
<p>9）<a href="http://speckyboy.com/2009/08/26/20-jquery-plugins-and-tutorials-to-enhance-forms/" target="_blank">20个可以改进表单的jQuery插件</a>。都是相当实用的插件，可以让你的Web表单相当的成熟和有很好的用户体验。</p>
<p>10）<a href="https://css-tricks.com/inapproprite-uses/" target="_blank">数据库，HTML，CSS，JS不适应的用法</a>。很不错的文章，你需要记住下面的这个表格。</p>
<div style="PADDING-RIGHT: 5px; PADDING-LEFT: 5px; PADDING-BOTTOM: 5px; OVERFLOW: hidden; PADDING-TOP: 5px; BORDER-BOTTOM: #cccccc 1px solid">
<div style="display: block; float: left; width: 200px; text-align: right;">Database</div>
<div>
<em style="PADDING-RIGHT: 10px; PADDING-LEFT: 10px; PADDING-BOTTOM: 0pt; PADDING-TOP: 0pt">is for</em>content</div>
</div>
<div style="PADDING-RIGHT: 5px; PADDING-LEFT: 5px; PADDING-BOTTOM: 5px; OVERFLOW: hidden; PADDING-TOP: 5px; BORDER-BOTTOM: #cccccc 1px solid">
<div style="display: block; float: left; width: 200px; text-align: right;">HTML</div>
<div>
<em style="PADDING-RIGHT: 10px; PADDING-LEFT: 10px; PADDING-BOTTOM: 0pt; PADDING-TOP: 0pt">is for</em>describing and displaying content</div>
</div>
<div style="PADDING-RIGHT: 5px; PADDING-LEFT: 5px; PADDING-BOTTOM: 5px; OVERFLOW: hidden; PADDING-TOP: 5px; BORDER-BOTTOM: #cccccc 1px solid">
<div style="display: block; float: left; width: 200px; text-align: right;">CSS</div>
<div>
<em style="PADDING-RIGHT: 10px; PADDING-LEFT: 10px; PADDING-BOTTOM: 0pt; PADDING-TOP: 0pt">is for</em>design</div>
</div>
<div style="PADDING-RIGHT: 5px; PADDING-LEFT: 5px; PADDING-BOTTOM: 5px; OVERFLOW: hidden; PADDING-TOP: 5px; BORDER-BOTTOM: #cccccc 1px solid">
<div style="display: block; float: left; width: 200px; text-align: right;">JavaScript</div>
<div>
<em style="PADDING-RIGHT: 10px; PADDING-LEFT: 10px; PADDING-BOTTOM: 0pt; PADDING-TOP: 0pt">is for</em>functionality</div>
</div>
<p>（全文完）</p>
<p align="center"><img alt="image placeholder" >
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/4795.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/3684.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/8170.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/7886.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/5224.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/5160.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
</ul>
</div></div>
<div id="post-ratings-1387" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="8fd4c9e06c">
<img alt="image placeholder" >
<meta itemprop="headline" content="十个Web开发文章和教程">
<meta itemprop="description" content="下面是十个在2009年8月份里出现的十个非常不错的Web开发方面的文章和教程。推荐给大家，当然，都是英文啦。如果你愿意，欢迎翻译后提交给酷壳。

1）一个简单的Lava 灯式的菜单（使用jQuery完成）

2）使用jQuery自动生成文章内容的目录。就像是使用Word一样，设置一下标题，然后可以自动生成文章的目录。

3）使用jQuery为图片创建图片标题和描述。这是一个超Cool的...">
<meta itemprop="datePublished" content="2009-08-31T17:18:41+08:00">
<meta itemprop="dateModified" content="2009-08-31T17:25:27+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/1387.html">
<meta itemprop="author" content="陈皓">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/1387.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="4">
<meta itemprop="ratingCount" content="8">
</div>
</div>
<div id="post-ratings-1387-loading" class="post-ratings-loading">
<img alt="image placeholder" >
 ]]></content>
<pubDate>2009-08-31T17:18:41+08:00</pubDate>
<guid>https://coolshell.cn/articles/1387.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ 编程真难啊 ]]></title>
<link>https://coolshell.cn/articles/1391.html</link>
<content><![CDATA[ 
<p>上周，在Sun的Java论坛上出现了一个这样的帖子，这个贴子的链接如下：<br>
<a href="http://forums.sun.com/thread.jspa?threadID=5404590&amp;start=0&amp;tstart=0" target="_blank">http://forums.sun.com/thread.jspa?threadID=5404590&amp;start=0&amp;tstart=0</a></p>
<p>LZ的贴子翻译如下：</p>
<blockquote><p>大家好，我是一个Java的新手，我有一个简单的问题：请问我怎么才能反转一个整数的符号啊。比如把-12转成+12。是的，毫无疑问这是个简单的问题，但我弄了一整天我也找不到什么好的方法。非常感谢如果你能告诉我Java有什么方法可以做到这个事，或者告诉我一个正确的方向——比如使用一些数学库或是二进制方法什么的。谢谢！</p></blockquote>
<p>这个贴子的沙发给出了答案：</p>
<p><span id="more-1391"></span></p>
<p style="PADDING-LEFT: 30px">n = -n;</p>
<p>LZ在四楼回复到：</p>
<blockquote><p>我知道是个很简单的事，可我没有想到居然这么简单，我觉得你可能是对的。谢谢你。</p></blockquote>
<p>过了一会，又回复到：</p>
<blockquote><p>不开玩笑地说，我试了，真的没有问题耶！</p></blockquote>
<p>看到这样的贴子，就能想到国内论坛上很多这样的“问弱智问题的贴子”，结果可能都会是比较惨！是的，国外的互联网文化和国内差不多，都是恶搞的人多于热心的人，呵呵。<strong>不过，国外的网民们有一点是好的，再恶搞也是就事搞事，不会有侮辱人的语言，这点真是值国内的人学习</strong>。</p>
<p>这本是一个平淡无奇的贴子，不过回复中那些恶搞的“解决方案”太强大了，在这里例举一下吧。</p>
<p>贴子的板凳给出了这样的答案（这是恶搞的开始）</p>
<p> </p>
<pre data-enlighter-language="java" class="EnlighterJSRAW">int x = numberToInvertSign;
boolean pos = x &gt; 0;
for(int i = 0; i &lt; 2*Math.abs(x); i++){
    if(pos){
        numberToInvertSign--;
    }
    else{
        numberToInvertSign++;
    }
}
</pre>
<p>然后，有人说，n = -n 可以是可以，但不够晦涩，于是一个晦涩的解决方案出现了：<br>
</p>
<pre data-enlighter-language="java" class="EnlighterJSRAW">int n = ....;
 n = (0xffffffff ^ n) + 1;
</pre>
<p>然后，又出现了一些看似简单，其实是比较晦涩的方案</p>
<p><code><code data-enlighter-language="java" class="EnlighterJSRAW">n = ~n + 1; </code></code></p>
<p> </p>
<p><code><code><code data-enlighter-language="java" class="EnlighterJSRAW">n = ~--n; </code></code></code></p>
<p> </p>
<p><code><code>继续，有才的人从来就不少：</code></code></p>
<p><code><code><pre data-enlighter-language="java" class="EnlighterJSRAW">n^= 0xffffffff;
int m;
for (m= 1; m != 0 &amp;&amp; ((n&amp;m) != 0); m&lt;&lt;= 1);
n|= m;
if (m == 0) n= m;
else for (m &gt;&gt;= 1; m != 0; n^= m, m&gt;&gt;=1);
</pre></code></code></p>
<p> </p>
<p><code><code>呵呵，开始越来越强大了，我以前也向大家介绍过《<a rel="bookmark" href="https://coolshell.cn/articles/933.html">如何加密/弄乱C源代码</a>》的文章，和这些恶搞的人可能有点相似吧。上面这个例子一出，大家都在讨论上面例子中的for循环语句，呵呵，很费解啊。</code></code></p>
<p><code><code>然后，后面几个就开始乱来了：</code></code></p>
<p></p>
<pre data-enlighter-language="java" class="EnlighterJSRAW">public int invert(int i) {
  return i - (i + i);
}</pre>
<p></p>
<pre data-enlighter-language="java" class="EnlighterJSRAW">switch (i)
{
  case 1: return -1;
  case 2: return -2;
  case 3: return -3;
  // ... etc, you get the proper pattern
}</pre>
<p>不过事情还没有结束，看看下面这个吧，OMG。</p>
<p></p>
<pre data-enlighter-language="java" class="EnlighterJSRAW">int absoluteValue(int num)
{
 int max = 0;
 for(int i = 0; true; ++i)
 {
  max = i &gt; max ? i : max;
  if(i == num)
  {
   if(i &gt;= max)
    return i;
   return -i;
  }
 }
}</pre>
<p> 还有用字符串的解决方案：</p>
<p></p>
<pre data-enlighter-language="java" class="EnlighterJSRAW">public int invert(int n) {
    String nStr = String.valueOf(n);
 
    if (nStr.startsWith("-")) {
        nStr = nStr.replace("-", "");
    } else {
        nStr = "-" + nStr;
    }
 
    return Integer.parseInt(nStr);
}</pre>
<p>别忘了面象对象，有最新Java支持的模板库： </p>
<p></p>
<pre data-enlighter-language="java" class="EnlighterJSRAW">public interface Negatable&lt;T extends Number&gt; {
  T value();
  T negate();
}
 
 
 
public abstract class NegatableInteger implements Negatable&lt;Integer&gt; {
  private final int value;
 
  protected NegatableInteger(int value) {
    this.value = value;
  }
 
  public static NegatableInteger createNegatableInteger(int value) {
    if (value &gt; 0) {
      return new NegatablePositiveInteger(value);
    }
    else if (value == Integer.MIN_VALUE) {
      throw new IllegalArgumentException("cannot negate " + value);
    }
    else if (value &lt; 0) {
      return new NegatableNegativeInteger(value);
    }
    else {
      return new NegatableZeroInteger(value);
    }
  }
 
  public Integer value() {
    return value;
  }
 
  public Integer negate() {
    String negatedString = negateValueAsString ();
    Integer negatedInteger = Integer.parseInt(negatedString);
    return negatedInteger;
  }
 
  protected abstract String negateValueAsString ();
}
 
 
 
public class NegatablePositiveInteger extends NegatableInteger {
  public NegatablePositiveInteger(int value) {
    super(value);
  }
 
  protected String negateValueAsString () {
    String valueAsString = String.valueOf (value());
    return "-" + valueAsString;
  }
}
 
 
 
public class NegatableNegativeInteger extends NegatableInteger {
  public NegatableNegativeInteger (int value) {
    super(value);
  }
 
  protected String negateValueAsString () {
    String valueAsString = String.valueOf (value());
    return valueAsString.substring(1);
  }
}
 
 
 
public class NegatableZeroInteger extends NegatableInteger {
  public NegatableZeroInteger (int value) {
    super(value);
  }
 
  protected String negateValueAsString () {
    return String.valueOf (value());
  }
}</pre>
<p> </p>
<p>这个贴子基本上就是两页，好像不算太严重，如果你这样想的话，你就大错特错了。这个贴子被人转到了reddit.com，于是一发不可收拾，在上面的回贴达到了490多条。链接如下：</p>
<p><a href="https://www.reddit.com/r/programming/comments/9egb6/programming_is_hard/" target="_blank">http://www.reddit.com/r/programming/comments/9egb6/programming_is_hard/</a></p>
<p>有人说，要用try catch；有人说要使用XML配置文件……，程序员们在追逐更为变态和疯狂的东西，并从中找到快乐，呵呵。</p>
<p>看完后，正如reddit.com所说——“<strong>编程好难啊</strong>”！</p>
<p>无独有偶，这并不是第一次，也不会是最后一次，让我们看看在PHP的官网上发生的类似的一幕——讨论PHP的abs取绝对值函数的函数说明文档中的回复：</p>
<p><a href="http://us.php.net/manual/en/function.abs.php#58508" target="_blank">http://us.php.net/manual/en/function.abs.php#58508</a></p>
<p>又是一个长贴，还带着很多性能分析，真的很好很强大！</p>
<p>（全文完）</p>
<p align="center"><img alt="image placeholder" >
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/4758.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/1992.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/18360.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/18024.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/8088.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/5444.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
</ul>
</div></div>
<div id="post-ratings-1391" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="a5e355618b">
<img alt="image placeholder" >
<meta itemprop="headline" content="编程真难啊">
<meta itemprop="description" content="上周，在Sun的Java论坛上出现了一个这样的帖子，这个贴子的链接如下：
http://forums.sun.com/thread.jspa?threadID=5404590&amp;start=0&amp;tstart=0

LZ的贴子翻译如下：
大家好，我是一个Java的新手，我有一个简单的问题：请问我怎么才能反转一个整数的符号啊。比如把-12转成+12。是的，毫无疑问这是个简单的问题，但我弄了一整天...">
<meta itemprop="datePublished" content="2009-09-03T22:24:57+08:00">
<meta itemprop="dateModified" content="2009-09-03T22:33:20+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/1391.html">
<meta itemprop="author" content="陈皓">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/1391.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="4.78">
<meta itemprop="ratingCount" content="63">
</div>
</div>
<div id="post-ratings-1391-loading" class="post-ratings-loading">
<img alt="image placeholder" >
 ]]></content>
<pubDate>2009-09-03T22:24:57+08:00</pubDate>
<guid>https://coolshell.cn/articles/1391.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ 8个实用而有趣Bash命令提示行 ]]></title>
<link>https://coolshell.cn/articles/1399.html</link>
<content><![CDATA[ 
<p style="margin-top: 0px; margin-right: 0px; margin-bottom: 10px; margin-left: 0px; padding-top: 2px; padding-right: 0px; padding-bottom: 2px; padding-left: 0px; line-height: 20px;">很多人都对过命令行提示的重要性不屑一顾，甚至是一点都不关心。但是我却一点都不这么认为，一个好的命令行提示可以改变你使用命令的方式。为此，我在internet上找到一些非常实用，优秀，并有趣的bash的命令行提示。下面我将我最喜欢使用的一些命令行提示罗列如下。</p>
<p style="margin-top: 0px; margin-right: 0px; margin-bottom: 10px; margin-left: 0px; padding-top: 2px; padding-right: 0px; padding-bottom: 2px; padding-left: 0px; line-height: 20px;">注意  –  要使用下面这些提示，你可以拷贝粘贴这些以”PS1″打头的内容到你的终端上，为了使你的改变永久生效，还要将这些内容粘贴到你使用用户的~/.bashrc文件中去。</p>
<p style="margin-top: 0px; margin-right: 0px; margin-bottom: 10px; margin-left: 0px; padding-top: 2px; padding-right: 0px; padding-bottom: 2px; padding-left: 0px; line-height: 20px;"><span id="more-1399"></span></p>
<h3>1. 在成功执行的命令上增加一个笑脸符号</h3>
<p style="margin-top: 0px; margin-right: 0px; margin-bottom: 10px; margin-left: 0px; padding-top: 2px; padding-right: 0px; padding-bottom: 2px; padding-left: 0px; line-height: 20px;">这个命令提示行可能是这个命令行提示列表中最有趣的一个，但是它也依然有使用的价值。这个提示的想法是基于当你命令被成功执行，你将会得到一个笑脸作为你的命令行提示，一旦的命令执行失败，命令行提示将会换成一个哭脸。</p>
<p style="margin-top: 0px; margin-right: 0px; margin-bottom: 10px; margin-left: 0px; padding-top: 2px; padding-right: 0px; padding-bottom: 2px; padding-left: 0px; line-height: 20px;">例子：</p>
<p style="margin-top: 0px; margin-right: 0px; margin-bottom: 10px; margin-left: 0px; padding-top: 2px; padding-right: 0px; padding-bottom: 2px; padding-left: 0px; line-height: 20px; text-align: center;"><img alt="image placeholder" >
<p style="margin-top: 0px; margin-right: 0px; margin-bottom: 10px; margin-left: 0px; padding-top: 2px; padding-right: 0px; padding-bottom: 2px; padding-left: 0px; line-height: 20px;">代码：</p>
<p style="margin-top: 0px; margin-right: 0px; margin-bottom: 10px; margin-left: 0px; padding-top: 2px; padding-right: 0px; padding-bottom: 2px; padding-left: 0px; line-height: 20px;">PS1=”\`if [ \$? = 0 ]; then echo \[\e[33m\]^_^\[\e[0m\]; else echo \[\e[31m\]O_O\[\e[0m\]; fi\`[\<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="f481b4">[email protected]</a>\h:\w]\\$ “</p>
<h3><strong>2.更改失败命令的颜色</strong></h3>
<p><span style="color: #000000;">下面这个命令行提示是我最喜欢的命令行之一。和上一个相似，这个命令行提示的颜色会在你最后一个命令运行失败后改变，而且这个命令行长路径会缩短输入命令的空间，这个命令提示还包含了bash 每个历史命令的命令号，以方便重新提取运行。</span></p>
<p><span style="color: #000000;">例子：</span></p>
<p style="text-align: center;"><span style="color: #000000;"><img alt="image placeholder" >
<p><span style="color: #000000;">代码：</span></p>
<p><span style="color: #000000;">PS1=”\[\033[0;33m\][\!]\`if [[ \$? = “0” ]]; then echo “\\[\\033[32m\\]”; else echo “\\[\\033[31m\\]”; fi\`[\u.\h: \`if [[ `pwd|wc -c|tr -d ” “` &gt; 18 ]]; then echo “\\W”; else echo “\\w”; fi\`]\$\[\033[0m\] “; echo -ne “\033]0;`hostname -s`:`pwd`\007″‘</span></p>
<h3 style="padding-top: 10px; padding-right: 0px; padding-bottom: 10px; padding-left: 0px; font-size: 18px; font-weight: 700; color: #333333; margin: 0px;">3. 多行提示</h3>
<p>如果你是喜欢命令行提示中包含完整信息的那一类人，那么下边就有一个适合于你的命令行提示。这个命令行提示信息中包含日期/时间，全路径，用户，主机，活动终端，甚至包含文件数和占用空间等。</p>
<p>例子：</p>
<p style="TEXT-ALIGN: center"><br style="padding: 0px; margin: 0px;"><img alt="image placeholder" >
<p style="margin-top: 0px; margin-right: 0px; margin-bottom: 10px; margin-left: 0px; padding-top: 2px; padding-right: 0px; padding-bottom: 2px; padding-left: 0px; line-height: 20px;">代码：</p>
<p style="margin-top: 0px; margin-right: 0px; margin-bottom: 10px; margin-left: 0px; padding-top: 2px; padding-right: 0px; padding-bottom: 2px; padding-left: 0px; line-height: 20px;">PROMPT_COMMAND=’PS1=”\n\[\033[35m\]\$(/bin/date)\n\[\033[32m\]\w\n\[\033[1;31m\]\<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="176257">[email protected]</a>\h: \[\033[1;34m\]\$(/usr/bin/tty | /bin/sed -e ‘s:/dev/::’): \[\033[1;36m\]\$(/bin/ls -1 | /usr/bin/wc -l | /bin/sed ‘s: ::g’) files \[\033[1;33m\]\$(/bin/ls -lah | /bin/grep -m 1 total | /bin/sed ‘s/total //’)b\[\033[0m\] -&gt; \[\033[0m\]”‘</p>
<p><span style="font-family: 'Lucida Grande'; line-height: normal;"> </span></p>
<h3 style="padding-top: 10px; padding-right: 0px; padding-bottom: 10px; padding-left: 0px; font-size: 18px; font-weight: 700; color: #333333; margin: 0px;">4. 多颜色提示</h3>
<p>这个命令行提示除了使用了不同颜色来区别不同信息外，它并没有很特别的地方。就像你看到的那样，它提供了时间，用户名，主机名，当前目录。相当少的信息，但是非常地实用。</p>
<p>例子：</p>
<p style="TEXT-ALIGN: center; PADDING-BOTTOM: 2px; LINE-HEIGHT: 20px; MARGIN: 0px 0px 10px; PADDING-LEFT: 0px; PADDING-RIGHT: 0px; PADDING-TOP: 2px"><img alt="image placeholder" >
<p style="margin-top: 0px; margin-right: 0px; margin-bottom: 10px; margin-left: 0px; padding-top: 2px; padding-right: 0px; padding-bottom: 2px; padding-left: 0px; line-height: 20px;"><span style="line-height: 20px;">代码：</span></p>
<p style="margin-top: 0px; margin-right: 0px; margin-bottom: 10px; margin-left: 0px; padding-top: 2px; padding-right: 0px; padding-bottom: 2px; padding-left: 0px; line-height: 20px;"><span style="line-height: 20px;">PS1=”\[\033[35m\]\t\[\033[m\]-\[\033[36m\]\u\[\033[m\]@\[\033[32m\]\h:\[\033[33;1m\]\w\[\033[m\]\$ “</span></p>
<p><span style="font-family: 'Lucida Grande'; line-height: normal;"> </span></p>
<h3 style="padding-top: 10px; padding-right: 0px; padding-bottom: 10px; padding-left: 0px; font-size: 18px; font-weight: 700; color: #333333; margin: 0px;">5.显示完整路径</h3>
<p>这是一个良好，简洁，最小的2行提示(加上顶上的空行)。在第一行你能得到一个全路径信息，在第二行是一个用户名。如果你对每个命令提示行的空行不爽的话，你只要移走第一个\n就OK了</p>
<p>例子：</p>
<p style="TEXT-ALIGN: center"><img alt="image placeholder" >
<p style="margin-top: 0px; margin-right: 0px; margin-bottom: 10px; margin-left: 0px; padding-top: 2px; padding-right: 0px; padding-bottom: 2px; padding-left: 0px; line-height: 20px;">代码：</p>
<p style="margin-top: 0px; margin-right: 0px; margin-bottom: 10px; margin-left: 0px; padding-top: 2px; padding-right: 0px; padding-bottom: 2px; padding-left: 0px; line-height: 20px;"><span style="line-height: 20px;">PS1=”[\[\033[32m\]\w]\[\033[0m\]\n\[\033[1;36m\]\u\[\033[1;33m\]-&gt; \[\033[0m\]”</span></p>
<p style="margin-top: 0px; margin-right: 0px; margin-bottom: 10px; margin-left: 0px; padding-top: 2px; padding-right: 0px; padding-bottom: 2px; padding-left: 0px; line-height: 20px;"><span style="line-height: 20px;"> </span></p>
<h3>6. 显示后台运行任务数</h3>
<p style="margin-top: 0px; margin-right: 0px; margin-bottom: 10px; margin-left: 0px; padding-top: 2px; padding-right: 0px; padding-bottom: 2px; padding-left: 0px; line-height: 20px;">这是另外的一个两行提示，但是这个两行提示具有更多的之前我们没有的信息。第一行是显示通常的<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="611412041321090e1215">[email protected]</a>和全路径等信息。在第二行我们可以得到命令执行历史序号和一个后台运行任务个数信息。</p>
<p style="margin-top: 0px; margin-right: 0px; margin-bottom: 10px; margin-left: 0px; padding-top: 2px; padding-right: 0px; padding-bottom: 2px; padding-left: 0px; line-height: 20px;">例子：</p>
<p style="margin-top: 0px; margin-right: 0px; margin-bottom: 10px; margin-left: 0px; padding-top: 2px; padding-right: 0px; padding-bottom: 2px; padding-left: 0px; line-height: 20px;"> </p>
<p style="margin-top: 0px; margin-right: 0px; margin-bottom: 10px; margin-left: 0px; padding-top: 2px; padding-right: 0px; padding-bottom: 2px; padding-left: 0px; line-height: 20px; text-align: center;"><img alt="image placeholder" >
<p style="margin-top: 0px; margin-right: 0px; margin-bottom: 10px; margin-left: 0px; padding-top: 2px; padding-right: 0px; padding-bottom: 2px; padding-left: 0px; line-height: 20px;">代码：</p>
<p style="margin-top: 0px; margin-right: 0px; margin-bottom: 10px; margin-left: 0px; padding-top: 2px; padding-right: 0px; padding-bottom: 2px; padding-left: 0px; line-height: 20px;">PS1=’\[\e[1;32m\]\<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="fa8fba">[email protected]</a>\H:\[\e[m\] \[\e[1;37m\]\w\[\e[m\]\n\[\e[1;33m\]hist:\! \[\e[0;33m\] \[\e[1;31m\]jobs:\j \$\[\e[m\] ‘</p>
<p style="margin-top: 0px; margin-right: 0px; margin-bottom: 10px; margin-left: 0px; padding-top: 2px; padding-right: 0px; padding-bottom: 2px; padding-left: 0px; line-height: 20px;"> </p>
<h3>7. 显示路径信息</h3>
<p style="margin-top: 0px; margin-right: 0px; margin-bottom: 10px; margin-left: 0px; padding-top: 2px; padding-right: 0px; padding-bottom: 2px; padding-left: 0px; line-height: 20px;">这是一个非常眩的设计。我们可以从这个命令行提示信息的第一行中获取到用户/主机，运行任务数，和时间日期等信息。在第二行我们可以得到当前目录的文件数和他们占用的磁盘空间。</p>
<p style="margin-top: 0px; margin-right: 0px; margin-bottom: 10px; margin-left: 0px; padding-top: 2px; padding-right: 0px; padding-bottom: 2px; padding-left: 0px; line-height: 20px;">例子：</p>
<p style="margin-top: 0px; margin-right: 0px; margin-bottom: 10px; margin-left: 0px; padding-top: 2px; padding-right: 0px; padding-bottom: 2px; padding-left: 0px; line-height: 20px;"> </p>
<p style="margin-top: 0px; margin-right: 0px; margin-bottom: 10px; margin-left: 0px; padding-top: 2px; padding-right: 0px; padding-bottom: 2px; padding-left: 0px; line-height: 20px; text-align: center;"><img alt="image placeholder" >
<p style="margin-top: 0px; margin-right: 0px; margin-bottom: 10px; margin-left: 0px; padding-top: 2px; padding-right: 0px; padding-bottom: 2px; padding-left: 0px; line-height: 20px;">代码:</p>
<p style="margin-top: 0px; margin-right: 0px; margin-bottom: 10px; margin-left: 0px; padding-top: 2px; padding-right: 0px; padding-bottom: 2px; padding-left: 0px; line-height: 20px;">PS1=”\n\[\e[30;1m\]\[\016\]l\[\017\](\[\e[34;1m\]\<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="3a4f7a">[email protected]</a>\h\[\e[30;1m\])-(\[\e[34;1m\]\j\[\e[30;1m\])-(\[\e[34;1m\]\@ \d\[\e[30;1m\])-&gt;\[\e[30;1m\]\n\[\016\]m\[\017\]-(\[\[\e[32;1m\]\w\[\e[30;1m\])-(\[\e[32;1m\]\$(/bin/ls -1 | /usr/bin/wc -l | /bin/sed ‘s: ::g’) files, \$(/bin/ls -lah | /bin/grep -m 1 total | /bin/sed ‘s/total //’)b\[\e[30;1m\])–&gt; \[\e[0m\]”</p>
<h3>8. My Prompt</h3>
<p style="margin-top: 0px; margin-right: 0px; margin-bottom: 10px; margin-left: 0px; padding-top: 2px; padding-right: 0px; padding-bottom: 2px; padding-left: 0px; line-height: 20px;">最后这个命令提示行是我个人最喜欢的使用的命令提示行。它是#7的一个修改，这个命令提示行只包含我最希望知道的信息，因此节省了它的占用空间。我偏爱两行风格，因为这样不仅可以让我看到全路径信息，而且不影响我命令输入的可视空间。</p>
<p style="margin-top: 0px; margin-right: 0px; margin-bottom: 10px; margin-left: 0px; padding-top: 2px; padding-right: 0px; padding-bottom: 2px; padding-left: 0px; line-height: 20px;">例子:</p>
<p style="margin-top: 0px; margin-right: 0px; margin-bottom: 10px; margin-left: 0px; padding-top: 2px; padding-right: 0px; padding-bottom: 2px; padding-left: 0px; line-height: 20px; text-align: center;"><img alt="image placeholder" >
<p style="margin-top: 0px; margin-right: 0px; margin-bottom: 10px; margin-left: 0px; padding-top: 2px; padding-right: 0px; padding-bottom: 2px; padding-left: 0px; line-height: 20px;">代码:</p>
<p style="margin-top: 0px; margin-right: 0px; margin-bottom: 10px; margin-left: 0px; padding-top: 2px; padding-right: 0px; padding-bottom: 2px; padding-left: 0px; line-height: 20px;">PS1=”\n\[\e[32;1m\](\[\e[37;1m\]\u\[\e[32;1m\])-(\[\e[37;1m\]jobs:\j\[\e[32;1m\])-(\[\e[37;1m\]\w\[\e[32;1m\])\n(\[\[\e[37;1m\]! \!\[\e[32;1m\])-&gt; \[\e[0m\]”</p>
<p style="margin-top: 0px; margin-right: 0px; margin-bottom: 10px; margin-left: 0px; padding-top: 2px; padding-right: 0px; padding-bottom: 2px; padding-left: 0px; line-height: 20px;">如果你愿意共享你的命令提示行，请在将这些命令提示代码加在下面的评论中。</p>
<div id="_mcePaste" style="position: absolute; overflow-x: hidden; overflow-y: hidden; width: 1px; height: 1px; top: 765px; left: -10000px;">
<p>PS1=”\n\[\033[35m\]\$(/bin/date)\n\[\033[32m\]\w\n\[\033[1;31m\]\<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="7e0b3e">[email protected]</a>\h: \[\033[1;34m\]\$(/usr/bin/tty | /bin/sed</p>
<p>-e ‘s:/dev/::’): \[\033[1;36m\]\$(/bin/ls -1 | /usr/bin/wc -l | /bin/sed ‘s: ::g’) files \[\033[1;33m\]\$(/bin/ls -lah | /bin/grep -m 1 total | /bin/sed ‘s/total //’)b\[\033[0m\] -&gt; \[\033[0m\]”</p>
</div>
<p><a title="原文出处" href="https://maketecheasier.com/8-useful-and-interesting-bash-prompts/2009/09/04" target="_blank"> 出处</a></p>
<p align="center"><img alt="image placeholder" >
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/11973.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/8883.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/8619.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/2987.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/1824.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/1574.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
</ul>
</div></div>
<div id="post-ratings-1399" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="117d4e6066">
<img alt="image placeholder" >
<meta itemprop="headline" content="8个实用而有趣Bash命令提示行">
<meta itemprop="description" content='很多人都对过命令行提示的重要性不屑一顾，甚至是一点都不关心。但是我却一点都不这么认为，一个好的命令行提示可以改变你使用命令的方式。为此，我在internet上找到一些非常实用，优秀，并有趣的bash的命令行提示。下面我将我最喜欢使用的一些命令行提示罗列如下。
注意  -  要使用下面这些提示，你可以拷贝粘贴这些以"PS1"打头的内容到你的终端上，为了使你的改变永久生效，还要将这些内容粘贴到你使用...'>
<meta itemprop="datePublished" content="2009-09-07T17:44:22+08:00">
<meta itemprop="dateModified" content="2009-09-08T13:31:48+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/1399.html">
<meta itemprop="author" content="Neo">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/1399.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="4.25">
<meta itemprop="ratingCount" content="12">
</div>
</div>
<div id="post-ratings-1399-loading" class="post-ratings-loading">
<img alt="image placeholder" >
 ]]></content>
<pubDate>2009-09-07T17:44:22+08:00</pubDate>
<guid>https://coolshell.cn/articles/1399.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ Oracle的战书！ ]]></title>
<link>https://coolshell.cn/articles/1426.html</link>
<content><![CDATA[ 
<p style="text-align: center;"><a href="http://www.oracle.com/features/suncustomers.html">http://www.oracle.com/features/suncustomers.html</a><img alt="image placeholder" >
<p></p>
<p align="center"><img alt="image placeholder" >
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/962.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/595.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/203.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/3363.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/1457.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/10427.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
</ul>
</div></div>
<div id="post-ratings-1426" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="c8edd2ee30">
<img alt="image placeholder" >
<meta itemprop="headline" content="Oracle的战书！">
<meta itemprop="description" content="http://www.oracle.com/features/suncustomers.html">
<meta itemprop="datePublished" content="2009-09-11T16:24:47+08:00">
<meta itemprop="dateModified" content="2009-09-26T09:01:23+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/1426.html">
<meta itemprop="author" content="Neo">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/1426.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="3">
<meta itemprop="ratingCount" content="4">
</div>
</div>
<div id="post-ratings-1426-loading" class="post-ratings-loading">
<img alt="image placeholder" >
 ]]></content>
<pubDate>2009-09-11T16:24:47+08:00</pubDate>
<guid>https://coolshell.cn/articles/1426.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ 编译vim解决中文支持 ]]></title>
<link>https://coolshell.cn/articles/1432.html</link>
<content><![CDATA[ 
<p>最近开始抛弃Ubuntu折腾CentOS 5.3(注：无意挑起OS之争)，每当换一个OS，第一个配置的就是VIM。</p>
<p>介于以前在MacOSX的编译经验，直接三部曲</p>
<blockquote><p><span style="color: #ff0000">./configue &amp;&amp; sudo make &amp;&amp; sudo make install</span></p></blockquote>
<p>解决的问题。  但在CentOS之后发现无论如何都不支持中文。</p>
<p>通过文档的翻阅和google的搜索，发现了问题出现在编译上。vim支持中文需要2个基本feature：multi_byte和iconv。</p>
<p><span id="more-1432"></span></p>
<p>在vim中输入 :version  发现这2个feature都是  – multi_byte 和 – iconv。看来编译的时候参数没有配置对。</p>
<p>于是重新执行以下代码</p>
<blockquote><p>./configure –prefix=/usr –with-features=huge<br>
sudo make<br>
sudo make install</p></blockquote>
<p>问题就解决了。</p>
<p>另外vim配置文件从第一行(我是unicode的统一论者)，加上</p>
<blockquote><p>set enc=utf-8<br>
set tenc=utf-8<br>
set fenc=utf-8<br>
set fencs=utf-8,usc-bom</p></blockquote>
<p>其实整个问题都很简单。 但是我发现搜索引擎里的资料 不是通过直观的关键字搜出来的。 所以这里做下一个记录，希望对以后的朋友有所帮助。</p>
<p align="center"><img alt="image placeholder" >
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/11312.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/8883.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/7829.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/7166.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/5224.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/5479.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
</ul>
</div></div>
<div id="post-ratings-1432" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="fc9d0f17aa">
<img alt="image placeholder" >
<meta itemprop="headline" content="编译vim解决中文支持">
<meta itemprop="description" content="最近开始抛弃Ubuntu折腾CentOS 5.3(注：无意挑起OS之争)，每当换一个OS，第一个配置的就是VIM。

介于以前在MacOSX的编译经验，直接三部曲
./configue &amp;&amp; sudo make &amp;&amp; sudo make install
解决的问题。  但在CentOS之后发现无论如何都不支持中文。

通过文档的翻阅和google的搜索，发现了问题出现在编译上。vim支...">
<meta itemprop="datePublished" content="2009-09-19T08:47:04+08:00">
<meta itemprop="dateModified" content="2009-09-19T08:47:04+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/1432.html">
<meta itemprop="author" content="free.wang">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/1432.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="3.25">
<meta itemprop="ratingCount" content="8">
</div>
</div>
<div id="post-ratings-1432-loading" class="post-ratings-loading">
<img alt="image placeholder" >
 ]]></content>
<pubDate>2009-09-19T08:47:04+08:00</pubDate>
<guid>https://coolshell.cn/articles/1432.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ Alice梦游UNIX仙境 ]]></title>
<link>https://coolshell.cn/articles/1439.html</link>
<content><![CDATA[ 
<p>本文来源：<a href="http://www.pma.caltech.edu/Publications/alice.in.unix.land.html">http://www.pma.caltech.edu/Publications/alice.in.unix.land.html</a><br>
（这是一篇1989年的文章）</p>
<p>Alice 正在在她的显示器上读着一些信息，她开会怀疑所有的事情并不是应该的那样。“程序太大了，而无法适应内存”，她读到。</p>
<p>“一个很奇怪的事情”，她说，“我所做的也就是在启动我的字处理程序会运行了14个TSR（terminate-and-stay-resident 常驻程序）。所有这些程序需要使用4M的内存，我希望我能使用超过640K以上的内存”。</p>
<p>就在那个时候，一个小的白色的顾问（一个非常白的顾问）跑过了房间。“哦，我的外套和领带”，他说到，“我要迟到了。并且是每小时150元。”Alice本想对他说点什么，他却跳到了Alice的显示器里并到在操作系统后面消失了。</p>
<p><span id="more-1439"></span></p>
<p>Alice 从来没有见过有人可以跳到显示器里，并且肯定不是通过操作系统干。但是，曾有人告诉他，DOS这个操作系统是非常肤浅的。于是，她没有怎么犹豫，Alice也跳了进去。</p>
<p>Alice发现她自己在一个明亮的走廊里。她不知道要做什么，她开始向前走，走过了一个拐角后，她发现她的前面有两个小胖子，他们互相搂着对对方的脖子。一个人的领口上绣着“POS”，另一个则是“NEG”。</p>
<p>“我知道”，Alice说，“你俩是晶体管”。</p>
<p>“是的”，Positive回答到。</p>
<p>“你们能帮我吗？”Alice问道。</p>
<p>“不能”，Negative回答。</p>
<p>“我在找一个白色的顾问”，Alice指着她走过来的方向，“他走的是这条路吗？”Alice继续问道。</p>
<p>“不是”，Negative回答到。</p>
<p>Alice又指了另一条路。</p>
<p>“是的”，Postive回答到。</p>
<p>很快，Alice来到了一个很大的棕色的桌前。那个顾问就在那里，名字叫Mad Hacker，并且有一些Alice并不知道的生物围在桌边。在角落里，有一个睡鼠在那熟睡。在桌子上放着一个大的标牌 ，上面写着“UNIX Conference”</p>
<p>每一个人除了那只睡鼠都有一个纸杯，纸杯里应该是奶油蛋羹的样子。“错误的佐料”，他们所有人都这么说，并把杯子传递给他们右手边的人，并且优雅地从他们的左边接过杯子。Alice 看着他们重复着这个仪式三到四次后，她也坐到了他们中间。</p>
<p>马上，一个很大的癞蛤蟆跳到了他的大腿上，并看着她就好像希望得到Alice的宠爱。“Grep”，它叫到。</p>
<p>“别介意”，Mad Hacker解释道，“他只是想查找一些字符串”。</p>
<p>“Nroff？” 蛤蟆问到。</p>
<p>Mad Hacker 给了Alice一个有看似有奶油蛋羹杯子以及一把勺子。“这里”，他问到，“你对这个有什么想法？”</p>
<p>“看起来很可爱”，Alice说，“非常甜”。她边说边尝了一勺。“讨厌！”他叫到，“真糟糕，这是什么啊？！”</p>
<p>“哦，这只不过是Unix的另一个图形界面”，Hacker回答道。</p>
<p>Alice 指着角落里的那只睡鼠说：“他是谁？”</p>
<p>“那也是一个操作系统”，Hacker解释道，“我们几乎放弃了去把他唤醒过来”。</p>
<p>就在这个时候，坐在睡鼠旁边的一个很大的蓝色的大象站了起来。“女士们，先生们”，他很傲慢地说到，“作为在这里的一个最大的生物，我感到我们必需开明地来看一下……”</p>
<p>一个在桌子另一边的年轻的“工作麻雀”愤努地站了起来。大象注意这事，并改变了他的演讲，“……什么是我们下一步的行动”。</p>
<p>有一半的生物鞠躬至敬，而另一半的生物偷偷窃笑。这个时候，睡鼠醒过来了，要和这个大象合并。没人有一丁点的惊讶。</p>
<p>“我们需要什么”，一只Sun熊宣称，他用他的长甜头舔了舔那个奶油蛋羹说道，“我们需要的是一个像Macintosh那样的调料”。</p>
<p>突然，那个白色顾问红着脸跳了起来，“不，不，不！”他尖叫着，“没有人会150元一小时的费用给Macintosh！”</p>
<p>“Awk”，青蛙说道。</p>
<p>“用户”，Sun熊解释到，“用户们希望的是那种简单到不需要学习的用户接口”。</p>
<p>“用户？”Hacker叫到“用户？！你说的是那些秘书，会计，建筑师，以及体力劳动者！”</p>
<p>“喔”Sun熊说到，“我得做点什么得让他们把系统切换到UNIX”。</p>
<p>“你们是否觉得，”一个正在桌子上打洞的啄木鸟说，“我们一同使用Unix这个名字会是一个问题？我的意思是，这样想的并不只有我一个人。”</p>
<p>“也许我们应该试试别的名字”，工作麻雀说，“比如：Brut或Rambo”。</p>
<p>“Penix” 一只企鹅说到。</p>
<p>“mount”，蛤蟆说，“spawn”。</p>
<p>Alice 拍了一下蛤蟆。“nice?” 蛤蟆问到。</p>
<p>“但是”，啄木鸟又建议到，“ShrinkWap的问题怎么办？”</p>
<p>突然，每一个人都跳了起来，而且都变得活跃起来，挥动着他们的双手大叫着，但只一会，他们又全都坐下来。</p>
<p>“现在这个问题解决了”，啄木鸟说，“让我们回到调料的问题上来吧”。</p>
<p>于是，桌子边的每个人又采样了一个新的奶油蛋羹，继续说到“错误的调料”，然后把杯子传给右边的人，并从左边的人接过杯子。</p>
<p>完全地被搞糊涂了，Alice起身离开了，她正在正在离开的过程中，她听到了身后传来了一个熟悉的声音。</p>
<p>“rem”，它说，“edlin”</p>
<p>Alice 转过身去，看到了那只蛤蟆，她微笑着。“你总是说着这些古怪发音的单词”，她说，“但至少我知道他们是什么意思”。</p>
<p>“chkdsk”， 蛤蟆说到。</p>
<p>—–By Lincoln Spector TEXAS COMPUTER CURRENTS SEPTEMBER 1989</p>
<p align="center"><img alt="image placeholder" >
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/19996.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/18360.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/17998.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/12103.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/11847.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/9410.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
</ul>
</div></div>
<div id="post-ratings-1439" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="7926c979e9">
<img alt="image placeholder" >
<meta itemprop="headline" content="Alice梦游UNIX仙境">
<meta itemprop="description" content="本文来源：http://www.pma.caltech.edu/Publications/alice.in.unix.land.html
（这是一篇1989年的文章）

Alice 正在在她的显示器上读着一些信息，她开会怀疑所有的事情并不是应该的那样。“程序太大了，而无法适应内存”，她读到。

“一个很奇怪的事情”，她说，“我所做的也就是在启动我的字处理程序会运行了14个TSR（term...">
<meta itemprop="datePublished" content="2009-09-19T10:33:00+08:00">
<meta itemprop="dateModified" content="2009-09-19T10:33:00+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/1439.html">
<meta itemprop="author" content="陈皓">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/1439.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="4">
<meta itemprop="ratingCount" content="5">
</div>
</div>
<div id="post-ratings-1439-loading" class="post-ratings-loading">
<img alt="image placeholder" >
 ]]></content>
<pubDate>2009-09-19T10:33:00+08:00</pubDate>
<guid>https://coolshell.cn/articles/1439.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ WebTTY！太酷了！ ]]></title>
<link>https://coolshell.cn/articles/1441.html</link>
<content><![CDATA[ 
<p>这真是一件很Cool的事，在Web上操作Linux，请访问下面这个链接：</p>
<p style="TEXT-ALIGN: center"><a href="http://19.testape.com/webtty_page.php" target="_blank">http://19.testape.com/webtty_page.php</a></p>
<p>于是你会看到页面中间的红色，一个小操作系统启动了，红色的最下方是一个bash-2.05b#</p>
<p>试着输入一下命令吧。</p>
<p>bash-2.05b# uname -a<br>
Linux (none) 2.6.18 #2 Mon Dec 29 19:47:06 UTC 2008 i686 GNU/Linux</p>
<p>命令支持的不多，好像只是一个单机版的虚拟机，一但你打开网页时就起动一个。当然，也不排除其完全是假的，因为太简单了，一切都可以fake出来。</p>
<p align="center"><img alt="image placeholder" >
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/2913.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/17607.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/20276.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/3572.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/5202.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/11629.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
</ul>
</div></div>
<div id="post-ratings-1441" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="0e0c085d89">
<img alt="image placeholder" >
<meta itemprop="headline" content="WebTTY！太酷了！">
<meta itemprop="description" content="这真是一件很Cool的事，在Web上操作Linux，请访问下面这个链接：
http://19.testape.com/webtty_page.php
于是你会看到页面中间的红色，一个小操作系统启动了，红色的最下方是一个bash-2.05b#

试着输入一下命令吧。

bash-2.05b# uname -a
Linux (none) 2.6.18 #2 Mon Dec 29 19:4...">
<meta itemprop="datePublished" content="2009-09-19T10:56:09+08:00">
<meta itemprop="dateModified" content="2009-09-19T10:56:09+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/1441.html">
<meta itemprop="author" content="陈皓">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/1441.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="4">
<meta itemprop="ratingCount" content="4">
</div>
</div>
<div id="post-ratings-1441-loading" class="post-ratings-loading">
<img alt="image placeholder" >
 ]]></content>
<pubDate>2009-09-19T10:56:09+08:00</pubDate>
<guid>https://coolshell.cn/articles/1441.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ C++的std::string的“读时也拷贝”技术！ ]]></title>
<link>https://coolshell.cn/articles/1443.html</link>
<content><![CDATA[ 
<p>C++的std::string的读时也拷贝技术！</p>
<p>嘿嘿，你没有看错，我也没有写错，是读时也拷贝技术。什么?我的错，你之前听说写过时才拷贝，嗯，不错的确有这门技术，英文是Copy On Write，简写就是COW,非常’牛’！那么我们就来看看这个’牛’技术的效果吧。</p>
<p>我们先编写一段程序<br>
<span id="more-1443"></span><br>
</p>
<pre data-enlighter-language="c" class="EnlighterJSRAW">#include &lt;string&gt;
#include &lt;iostream&gt;
#include &lt;sys/time.h&gt;

static long getcurrenttick()
{
    long tick ;
    struct timeval time_val;
    gettimeofday(&amp;time_val , NULL);
    tick = time_val.tv_sec * 1000 + time_val.tv_usec / 1000 ;
    return tick;
}


int main( )
{
    string the_base(1024 * 1024 * 10, 'x');
    long begin =  getcurrenttick();
    for( int i = 0 ;i&lt; 100 ;++i ) {
       string the_copy = the_base ;
    }
    fprintf(stdout,"耗时[%d] \n",getcurrenttick() - begin );
}
</pre> 
<p>嗯，一个非常大的字符串，有10M字节的x，并且执行了100此拷贝。编译执行它，非常快，在我的虚拟机甚至不要1个毫秒。</p>
<p>现在我们来对这个string加点料！</p>
<pre class="brush:c; highlight:6">int main(void) {
    string the_base(1024 * 1024 * 10, 'x');
    long begin =  getcurrenttick();
    for (int i = 0; i &lt; 100; i++) {
        string the_copy = the_base;
        the_copy[0] = 'y';
    }
    fprintf(stdout,"耗时[%d] \n",getcurrenttick() - begin );
}
</pre>
<p>现在我们再编译并执行这断程序，居然需要4~5秒！哇！非常美妙的写时才拷贝技术，性能和功能的完美统一。</p>
<p>我们再来看看另外一种情况！</p>
<pre class="brush:c">string original = "hello";
char &amp; ref = original[0];
string clone = original;
ref = 'y';
</pre>
<p>我们生成了一个string，并保留了它首字符的引用，然后复制这个string，修改string中的首字符。因为写操作只是直接的修改了内存中的指定位置，这个string就根本不能感知到有写发生，如果写时才拷贝是不成熟的，那么我们将同时会修改original和clone两个string。那岂不是灾难性的结果？幸好上述问题不会发生。clone的值肯定是没有被修改的。看来COW就是非常的牛！</p>
<p>以上都证明了我们的COW技术非常牛！</p>
<p>有太阳就有黑暗，这句说是不是有点耳熟？</p>
<pre class="brush:c; highlight:3">int main(void) {
    string the_base(1024 * 1024 * 10, 'x');
    fprintf(stdout,"the_base's first char is [%c]\n",the_base[0] );
    long begin =  getcurrenttick();
    for (int i = 0; i &lt; 100; i++) {
        string the_copy = the_base;
    }
    fprintf(stdout,"耗时[%d] \n",getcurrenttick() - begin );
}
</pre>
<p>啊，居然也是4~5秒！你可能在想，我只是做了一个读，没有写嘛，这到底是怎么回事？难道还有读时也拷贝的技术！。</p>
<p>不错，为了避免了你通过[]操作符获取string内部指针而直接修改字符串的内容，在你使用了the_base[0]后，这个字符串的写时才拷贝技术就失效了。</p>
<p>C++标准的确就是这样的，C++标准认为，当你通过迭代器或[]获取到string的内部地址的时候，string并不知道你将是要读还是要写。这是它无法确定，为此，当你获取到内部引用后，为了避免不能捕获你的写操作，它在此时废止了写时才拷贝技术！</p>
<p>这样看来我们在使用COW的时候，一定要注意，如果你不需要对string的内部进行修改，那你就千万不要使用通过[]操作符和迭代器去获取字符串的内部地址引用，如果你一定要这么做，那么你就必须要付出代价。当然，string还提供了一些使迭代器和引用失效的方法。比如说push_back，等， 你在使用[]之后再使用迭代器之后，引用就有可能失效了。那么你又回到了COW的世界！比如下面的一个例子</p>
<pre class="brush:c; highlight:7">int main( )
{
    struct timeval time_val;
    string the_base(1024 * 1024 * 10, 'x');
    long begin = 0 ;
    fprintf(stdout,"the_base's first char is [%c]\n",the_base[0] );
    the_base.push_back('y');
    begin = getcurrenttick();
    for( int i = 0 ;i&lt; 100 ;++i ) {
        string the_copy = the_base ;
    }
    fprintf(stdout,"耗时[%d] \n",getcurrenttick() - begin );
}
</pre>
<p>一切又恢复了正常！如果对[]返回引用进行了操作又会发生情况呢，有兴趣的朋友可以试试！结果非常令人惊讶。</p>
<p>另外：上述例子是在linux环境下编译的，使用STL是GNU的STL。windows上我用的是vs2003，但是非常明显vs2003一点都不支持COW。</p>
<p>这篇文章出自<a href="http://ridiculousfish.com/blog/archives/2009/09/17/i-didnt-order-that-so-why-is-it-on-my-bill-episode-2/" target="_blank">http://ridiculousfish.com/blog/archives/2009/09/17/i-didnt-order-that-so-why-is-it-on-my-bill-episode-2/</a> 这里，我使用了它的例子。但是我重新自己组织了内容。</p>
<p>编写这篇文章的同时，我还参考了耗子的<a href="http://blog.csdn.net/haoel/archive/2004/06/23/24058.aspx">《标准C＋＋类string的Copy-On-Write技术》</a>一文</p>
<p align="center"><img alt="image placeholder" >
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 - CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/20845.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/18360.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/18024.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/12052.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/12012.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/11466.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
</ul>
</div></div>
<div id="post-ratings-1443" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="b0d3e6b467">
<img alt="image placeholder" >
<meta itemprop="headline" content="C++的std::string的“读时也拷贝”技术！">
<meta itemprop="description" content="C++的std::string的读时也拷贝技术！


嘿嘿，你没有看错，我也没有写错，是读时也拷贝技术。什么?我的错，你之前听说写过时才拷贝，嗯，不错的确有这门技术，英文是Copy On Write，简写就是COW,非常'牛'！那么我们就来看看这个'牛'技术的效果吧。

我们先编写一段程序

[c]
#include &lt;string&gt;
#include &lt;iostream&gt;
#...">
<meta itemprop="datePublished" content="2009-09-19T21:19:33+08:00">
<meta itemprop="dateModified" content="2009-09-20T00:58:25+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/1443.html">
<meta itemprop="author" content="Neo">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/1443.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="3.79">
<meta itemprop="ratingCount" content="14">
</div>
</div>
<div id="post-ratings-1443-loading" class="post-ratings-loading">
<img alt="image placeholder" >
 ]]></content>
<pubDate>2009-09-19T21:19:33+08:00</pubDate>
<guid>https://coolshell.cn/articles/1443.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ 微软在从Google赢取搜索引擎市场份额 ]]></title>
<link>https://coolshell.cn/articles/1457.html</link>
<content><![CDATA[ 
<p>7月到8月，微软市场份额从8.9%到了9.3%;  Google掉了1.7%</p>
<p>Bing显然让Google有些紧张，不仅Bing在界面上赢得了一部分消费者的好评，而且其在某些垂直领域的深度整合使得Bing的盈利能力具有了相当竞争力。相信Google在幕后紧锣密鼓的测试新界面和新搜索功能的同时，也在严阵以待地部署销售团队（如果经济萧条好转，旅游和健康将会是最先复苏的领域，也是Bing目前占有优势的战场）</p>
<p>拭目以待吧！</p>
<p>原文地址：<a style="color: #3333cc;" href="http://news.bbc.co.uk/2/hi/technology/8268356.stm" target="_blank">http://news.bbc.co.uk/2/hi/technology/8268356.stm</a><br>
<span id="more-1457"></span></p>
<h1 style="margin-top: 5px; margin-right: 0px; margin-bottom: 15px; margin-left: 0px; outline-width: 0px; outline-style: initial; outline-color: initial; font-size: 2.4em; font-weight: bolder; padding: 0px;">Microsoft increases search share</h1>
<p style="padding-top: 0px; padding-right: 0px; padding-bottom: 10px; padding-left: 0px; outline-width: 0px; outline-style: initial; outline-color: initial; font-size: 13px; margin: 0px;"><strong>Microsoft’s Bing search engine is making inroads into Google’s dominance of the search market according to data from US net measurement firm ComScore.</strong></p>
<p style="padding-top: 0px; padding-right: 0px; padding-bottom: 10px; padding-left: 0px; outline-width: 0px; outline-style: initial; outline-color: initial; font-size: 13px; margin: 0px;"><span style="color: #ff0000;">Its latest figures show Microsoft’s share of the search market has grown from 8.9% in July to 9.3% in August.</span></p>
<p>The news saw Microsoft’s shares rise while Google’s dipped slightly.</p>
<p style="padding-top: 0px; padding-right: 0px; padding-bottom: 10px; padding-left: 0px; outline-width: 0px; outline-style: initial; outline-color: initial; font-size: 13px; margin: 0px;">Microsoft’s modest 9.3% share of the US search market is small but is a significant increase for a new entrant, say analysts.</p>
<p style="padding-top: 0px; padding-right: 0px; padding-bottom: 10px; padding-left: 0px; outline-width: 0px; outline-style: initial; outline-color: initial; font-size: 13px; margin: 0px;">The Bing search engine was launched by Microsoft in June 2009 and was followed in July by a search tie-up with rival Yahoo.</p>
<p style="padding-top: 0px; padding-right: 0px; padding-bottom: 10px; padding-left: 0px; outline-width: 0px; outline-style: initial; outline-color: initial; font-size: 13px; margin: 0px;">Google is still far and away the search leader, with 65% of the US market.</p>
<p style="padding-top: 0px; padding-right: 0px; padding-bottom: 10px; padding-left: 0px; outline-width: 0px; outline-style: initial; outline-color: initial; font-size: 13px; margin: 0px;"><strong>Tiny ripple</strong></p>
<p style="padding-top: 0px; padding-right: 0px; padding-bottom: 10px; padding-left: 0px; outline-width: 0px; outline-style: initial; outline-color: initial; font-size: 13px; margin: 0px;">Microsoft’s modest 9.3% share of the US search market is small but is a significant increase for a new entrant say analysts.</p>
<p style="padding-top: 0px; padding-right: 0px; padding-bottom: 10px; padding-left: 0px; outline-width: 0px; outline-style: initial; outline-color: initial; font-size: 13px; margin: 0px;">The fact Google is losing any market share to Microsoft could indicate that it is no longer the immediate choice for everyone, thinks search expert John Batelle.</p>
<p style="padding-top: 0px; padding-right: 0px; padding-bottom: 10px; padding-left: 0px; outline-width: 0px; outline-style: initial; outline-color: initial; font-size: 13px; margin: 0px;">“I think the service is starting to gain footholds with users who see it as a regular alternative to Google,” he wrote in his blog.</p>
<p style="padding-top: 0px; padding-right: 0px; padding-bottom: 10px; padding-left: 0px; outline-width: 0px; outline-style: initial; outline-color: initial; font-size: 13px; margin: 0px;">He is a fan of Bing’s newly-released visual search interface.</p>
<p style="padding-top: 0px; padding-right: 0px; padding-bottom: 10px; padding-left: 0px; outline-width: 0px; outline-style: initial; outline-color: initial; font-size: 13px; margin: 0px;">“I think it augurs some serious new – and useful – approaches to sifting through massive amounts of related data,” he said.</p>
<p style="padding-top: 0px; padding-right: 0px; padding-bottom: 10px; padding-left: 0px; outline-width: 0px; outline-style: initial; outline-color: initial; font-size: 13px; margin: 0px;">In the UK, Bing has also made small inroads into Google’s market share.</p>
<p style="padding-top: 0px; padding-right: 0px; padding-bottom: 10px; padding-left: 0px; outline-width: 0px; outline-style: initial; outline-color: initial; font-size: 13px; margin: 0px;"><span style="color: #ff0000;">In August the number of searches on Bing increased by 5%, while Google searches were down 1.7%, according to UK online measurement firm Nielsen.</span></p>
<p style="padding-top: 0px; padding-right: 0px; padding-bottom: 10px; padding-left: 0px; outline-width: 0px; outline-style: initial; outline-color: initial; font-size: 13px; margin: 0px;">“It is a very tiny ripple but reflects that Microsoft has done a lot of marketing around it and that people are curious about anything new that is launched,” said Alex Burmaster, communications director at Nielsen.</p>
<p style="padding-top: 0px; padding-right: 0px; padding-bottom: 10px; padding-left: 0px; outline-width: 0px; outline-style: initial; outline-color: initial; font-size: 13px; margin: 0px;">Google is already working on an update to its current search engine.</p>
<p style="padding-top: 0px; padding-right: 0px; padding-bottom: 10px; padding-left: 0px; outline-width: 0px; outline-style: initial; outline-color: initial; font-size: 13px; margin: 0px;">Nicknamed “Caffeine” the new version is still in the testing phase and will replace the current engine once tests are complete.</p>
<p></p>
<p align="center"><img alt="image placeholder" >
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/12136.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/9508.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/5815.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/5701.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/5224.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/3806.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
</ul>
</div></div>
<div id="post-ratings-1457" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="6ef2c42779">
<img alt="image placeholder" >
<meta itemprop="headline" content="微软在从Google赢取搜索引擎市场份额">
<meta itemprop="description" content="7月到8月，微软市场份额从8.9%到了9.3%;  Google掉了1.7%

Bing显然让Google有些紧张，不仅Bing在界面上赢得了一部分消费者的好评，而且其在某些垂直领域的深度整合使得Bing的盈利能力具有了相当竞争力。相信Google在幕后紧锣密鼓的测试新界面和新搜索功能的同时，也在严阵以待地部署销售团队（如果经济萧条好转，旅游和健康将会是最先复苏的领域，也是Bing目前占有优势...">
<meta itemprop="datePublished" content="2009-09-22T23:01:50+08:00">
<meta itemprop="dateModified" content="2009-09-22T23:43:07+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/1457.html">
<meta itemprop="author" content="mailper">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/1457.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="3.5">
<meta itemprop="ratingCount" content="6">
</div>
</div>
<div id="post-ratings-1457-loading" class="post-ratings-loading">
<img alt="image placeholder" >
 ]]></content>
<pubDate>2009-09-22T23:01:50+08:00</pubDate>
<guid>https://coolshell.cn/articles/1457.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ CentOS上php的问题及Selinux安全设置 ]]></title>
<link>https://coolshell.cn/articles/1462.html</link>
<content><![CDATA[ 
<p>最近有位站长在用我们WebIM客户端的时候，无法登录我们的WebIM服务器，十分惊讶。 在我们的用户里尚属首例，其实更惊讶的是我的CentOS也遇到了同样的问题。然后分析了这位站长的HttpResponse , Shamee :( 一样的OS.</p>
<p>搜了一下，发现的解决方法都是在代码上。 我想可能关键词有错误，因为我坚信我的问题肯定不在代码上，应该是来自OS本身的限制。于是重新debug了一下代码，报错 permission (13) connection。然后直接在洋人的邮件列表里搜了一下。</p>
<p>问题确定了 是SeLinux(<span style="color: #ff6600"><em>http://zh.wikipedia.org/wiki/SELinux</em></span>)安全策略的限制。</p>
<p><span id="more-1462"></span></p>
<p>这下问题明了了,执行 <span style="color: #ff0000">/usr/sbin/setenforce 0</span>就能迅速关闭SELINUX，或者<span style="color: #ff0000">vi /etc/selinux/config</span> 把<span style="color: #ff0000">enforcing</span>改成<span style="color: #ff0000">permissive </span>然后<span style="color: #ff0000">reboot</span>.</p>
<p>但是我想了一下，就算安全级别为B1的Linux被攻击的可能小，但是总会有面对这种问题的时候，况且这种解决访问本身并不优雅。</p>
<p>于是想了下 把Apache脱离SeLinux是一个最恰当的办法，于是执行</p>
<p>[bash]sudo  setsebool -P httpd_disable_trans 1 &amp;&amp; sudo   /etc/init.d/httpd restart[/bash]</p>
<p>这样就能保证在SeLinux的光环下,Web服务器行为不受控制。</p>
<p align="center"><img alt="image placeholder" >
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/19219.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/18654.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/18360.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/17998.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/17416.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/17200.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
</ul>
</div></div>
<div id="post-ratings-1462" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="388f296f47">
<img alt="image placeholder" >
<meta itemprop="headline" content="CentOS上php的问题及Selinux安全设置">
<meta itemprop="description" content="最近有位站长在用我们WebIM客户端的时候，无法登录我们的WebIM服务器，十分惊讶。 在我们的用户里尚属首例，其实更惊讶的是我的CentOS也遇到了同样的问题。然后分析了这位站长的HttpResponse , Shamee :( 一样的OS.

搜了一下，发现的解决方法都是在代码上。 我想可能关键词有错误，因为我坚信我的问题肯定不在代码上，应该是来自OS本身的限制。于是重新debug了一下代...">
<meta itemprop="datePublished" content="2009-09-26T09:00:54+08:00">
<meta itemprop="dateModified" content="2009-09-29T15:13:02+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/1462.html">
<meta itemprop="author" content="free.wang">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/1462.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="3">
<meta itemprop="ratingCount" content="10">
</div>
</div>
<div id="post-ratings-1462-loading" class="post-ratings-loading">
<img alt="image placeholder" >
 ]]></content>
<pubDate>2009-09-26T09:00:54+08:00</pubDate>
<guid>https://coolshell.cn/articles/1462.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ 非常简单的Python HTTP服务 ]]></title>
<link>https://coolshell.cn/articles/1480.html</link>
<content><![CDATA[ 
<p>如果你急需一个简单的Web Server，但你又不想去下载并安装那些复杂的HTTP服务程序，比如：Apache，ISS等。那么， <a href="https://www.python.org/">Python</a> 可能帮助你。使用Python可以完成一个简单的内建 HTTP 服务器。于是，你可以把你的目录和文件都以HTTP的方式展示出来。佻只需要干一件事情，那就是安装一个Python。</p>
<p>实际上来说，这是一个可以用来共享文件的非常有用的方式。实现一个微型的HTTP服务程序来说是很简单的事情，在Python下，只需要一个命令行。下面是这个命令行：（假设我们需要共享我们的目录 <tt><span>/home/haoel</span></tt> 而IP地址是192.168.1.1）<br>
</p>
<pre data-enlighter-language="shell" class="EnlighterJSRAW">$ cd /home/haoel
$ python -m SimpleHTTPServer
</pre>
<p><span id="more-1480"></span></p>
<p>这就行了，而我们的HTTP服务在8000号端口上侦听。你会得到下面的信息：</p>
<pre>Serving HTTP on 0.0.0.0 port 8000 ...</pre>
<p>你可以打开你的浏览器（IE或Firefox），然后输入下面的URL：</p>
<pre>http://192.168.1.1:8000</pre>
<p>如果你的目录下有一个叫 index.html 的文件名的文件，那么这个文件就会成为一个默认页，如果没有这个文件，那么，目录列表就会显示出来。</p>
<p>如果你想改变端口号，你可以使用如下的命令：<br>
</p>
<pre data-enlighter-language="shell" class="EnlighterJSRAW">$ python -m SimpleHTTPServer 8080
</pre>
<p>如果你只想让这个HTTP服务器服务于本地环境，那么，你需要定制一下你的Python的程序，下面是一个示例：</p>
<p>[py]<br>
import sys<br>
import BaseHTTPServer<br>
from SimpleHTTPServer import SimpleHTTPRequestHandler<br>
HandlerClass = SimpleHTTPRequestHandler<br>
ServerClass  = BaseHTTPServer.HTTPServer<br>
Protocol     = "HTTP/1.0"</p>
<p>if sys.argv[1:]:<br>
    port = int(sys.argv[1])<br>
else:<br>
    port = 8000<br>
server_address = (‘127.0.0.1’, port)</p>
<p>HandlerClass.protocol_version = Protocol<br>
httpd = ServerClass(server_address, HandlerClass)</p>
<p>sa = httpd.socket.getsockname()<br>
print "Serving HTTP on", sa[0], "port", sa[1], "…"<br>
httpd.serve_forever()<br>
[/py]</p>
<p>注意：所有的这些东西都可以在 Windows 或 <a href="https://www.cygwin.com/">Cygwin</a> 下工作。</p>
<p align="center"><img alt="image placeholder" >
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/19840.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/18360.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/18094.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/11265.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/10822.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/10169.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
</ul>
</div></div>
<div id="post-ratings-1480" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="01562bf446">
<img alt="image placeholder" >
<meta itemprop="headline" content="非常简单的Python HTTP服务">
<meta itemprop="description" content="如果你急需一个简单的Web Server，但你又不想去下载并安装那些复杂的HTTP服务程序，比如：Apache，ISS等。那么， Python 可能帮助你。使用Python可以完成一个简单的内建 HTTP 服务器。于是，你可以把你的目录和文件都以HTTP的方式展示出来。佻只需要干一件事情，那就是安装一个Python。

实际上来说，这是一个可以用来共享文件的非常有用的方式。实现一个微型的HTT...">
<meta itemprop="datePublished" content="2009-09-27T11:34:10+08:00">
<meta itemprop="dateModified" content="2009-09-27T11:34:10+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/1480.html">
<meta itemprop="author" content="陈皓">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/1480.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="3.67">
<meta itemprop="ratingCount" content="9">
</div>
</div>
<div id="post-ratings-1480-loading" class="post-ratings-loading">
<img alt="image placeholder" >
 ]]></content>
<pubDate>2009-09-27T11:34:10+08:00</pubDate>
<guid>https://coolshell.cn/articles/1480.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ TCP网络关闭的状态变换时序图 ]]></title>
<link>https://coolshell.cn/articles/1484.html</link>
<content><![CDATA[ 
<p>TCP共有11个网路状态，其中涉及到关闭的状态有5个。</p>
<p>在我们编写网络相关程序的时候，这5个状态经常出现。因为这5个状态相互关联，相互纠缠，而且状态变化触发都是由应用触发，但是又涉及操作系统和网络，所以正确的理解TCP 在关闭时网络状态变化情况，为我们诊断网络中各种问题，快速定位故障有着非常重要的作用和意义。</p>
<p style="text-align: left;">下是是根据W.Richard Stevens的《TCP/IP详解》一书的TCP状态转换图。</p>
<p><img alt="image placeholder" >
<p style="text-align: left;"><span id="more-1484"></span></p>
<p style="text-align: center;"><img alt="image placeholder" >
<p></p>
<p align="center"><img alt="image placeholder" >
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/19840.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/11609.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/11564.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/9859.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/7490.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/6548.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
</ul>
</div></div>
<div id="post-ratings-1484" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="b61307b66d">
<img alt="image placeholder" >
<meta itemprop="headline" content="TCP网络关闭的状态变换时序图">
<meta itemprop="description" content="TCP共有11个网路状态，其中涉及到关闭的状态有5个。

在我们编写网络相关程序的时候，这5个状态经常出现。因为这5个状态相互关联，相互纠缠，而且状态变化触发都是由应用触发，但是又涉及操作系统和网络，所以正确的理解TCP 在关闭时网络状态变化情况，为我们诊断网络中各种问题，快速定位故障有着非常重要的作用和意义。
下是是根据W.Richard Stevens的《TCP/IP详解》一书的TCP状...">
<meta itemprop="datePublished" content="2009-09-27T16:11:19+08:00">
<meta itemprop="dateModified" content="2011-12-30T09:39:11+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/1484.html">
<meta itemprop="author" content="Neo">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/1484.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="3.27">
<meta itemprop="ratingCount" content="11">
</div>
</div>
<div id="post-ratings-1484-loading" class="post-ratings-loading">
<img alt="image placeholder" >
 ]]></content>
<pubDate>2009-09-27T16:11:19+08:00</pubDate>
<guid>https://coolshell.cn/articles/1484.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ 算法和数据结构词典 ]]></title>
<link>https://coolshell.cn/articles/1499.html</link>
<content><![CDATA[ 
<p>我们知道，在编程的世界里，主要就是两个事，用一定的算法去处理一定的数据。算法可以理解为业务逻辑流程，而数据自然一定是按某种结构来存放，这就是数据结构。我们知道，数据结构的修改一定会导致算法的修改，我们也知道，数据结构直接关系到了整个程序的繁简性，高效性。而算法则是关系到数据处理的时间、空间性能，以及日后的扩展和维护。这两个东西是计算机科班出生的人或是需要学习编程的人必需要注意的两件头等大事。</p>
<p>下面这个网站，由 <a href="http://www.itl.nist.gov/div897/">Software and Systems Division</a>, <a href="http://www.itl.nist.gov/">Information Technology Laboratory</a> 创建。</p>
<p style="text-align: center;"><a href="http://www.itl.nist.gov/div897/sqg/dads/terms.html" target="_blank"><strong></strong></a><strong><a href="http://xlinux.nist.gov/dads/" target="_blank">http://xlinux.nist.gov/dads/</a></strong><strong> </strong></p>
<p style="text-align: center;"><img alt="image placeholder" >
<p style="text-align: left;"><span id="more-1499"></span></p>
<p>这是一个关于算法，算法技术，数据结构，系统架构等相关问题的一个词典。其中，算法包括了一些常见的算法，比如： <a href="http://xlinux.nist.gov/dads/HTML/ackermann.html" target="_blank">Ackermann’s function</a> ，一些算法问题包括了 <a href="http://xlinux.nist.gov/dads/HTML/travelingSalesman.html" target="_blank">traveling salesman</a>（销售员出差问题） and <a href="http://xlinux.nist.gov/dads/HTML/byzantine.html" target="_blank">Byzantine generals</a>（拜占庭将军问题），还有一些关于这些问题，算法的 <a href="http://xlinux.nist.gov/dads/termsImpl.html" target="_blank">实现链表</a> 以及更多的信息。而索引页包括 <a href="http://xlinux.nist.gov/dads/termsArea.html" target="_blank">领域索引</a> 和 <a href="http://xlinux.nist.gov/dads/termsType.html" target="_blank">类型索引</a>.</p>
<p>希望这个网站对有你用。当然，这个网站是英文的。</p>
<p align="center"><img alt="image placeholder" >
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/12052.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/6010.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/4671.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/4220.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/3933.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/2724.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
</ul>
</div></div>
<div id="post-ratings-1499" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="a94e0e847b">
<img alt="image placeholder" >
<meta itemprop="headline" content="算法和数据结构词典">
<meta itemprop="description" content="我们知道，在编程的世界里，主要就是两个事，用一定的算法去处理一定的数据。算法可以理解为业务逻辑流程，而数据自然一定是按某种结构来存放，这就是数据结构。我们知道，数据结构的修改一定会导致算法的修改，我们也知道，数据结构直接关系到了整个程序的繁简性，高效性。而算法则是关系到数据处理的时间、空间性能，以及日后的扩展和维护。这两个东西是计算机科班出生的人或是需要学习编程的人必需要注意的两件头等大事。
...">
<meta itemprop="datePublished" content="2009-09-28T11:33:35+08:00">
<meta itemprop="dateModified" content="2011-04-05T15:30:35+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/1499.html">
<meta itemprop="author" content="陈皓">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/1499.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="4.5">
<meta itemprop="ratingCount" content="14">
</div>
</div>
<div id="post-ratings-1499-loading" class="post-ratings-loading">
<img alt="image placeholder" >
 ]]></content>
<pubDate>2009-09-28T11:33:35+08:00</pubDate>
<guid>https://coolshell.cn/articles/1499.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ 高科技：GDB回溯调试 ]]></title>
<link>https://coolshell.cn/articles/1502.html</link>
<content><![CDATA[ 
<p>也许大家知道，GDB 版本7.0 (2009年9月release) 会是第一次开始支持Reversable Debugging （回溯调式技术），这是一种可以让在debug程序时当我们运行单步调试或是运行到断点时，可以以逆向执行程序的一种技术。（这是GNU的<a href="https://www.gnu.org/software/gdb/news/reversible.html" target="_blank">新闻链接</a>）</p>
<p>下面是GDB7.0版本所支持的回溯调试的命令，其中包括，continue，step，以及调试方向的设置。</p>
<li>
<strong>reverse-continue</strong> (‘rc’) — 继续程序运行到断点，但是是逆向运行程序。</li>
<li>
<strong>reverse-finish</strong> — 逆向运行程序直到跳出本层函数。</li>
<li>
<strong>reverse-next</strong> (‘rn’) — 语句单步向后跟踪程序。</li>
<li>
<strong>reverse-nexti</strong> (‘rni’) — 指令单步向后一条指令。</li>
<li>
<strong>reverse-step</strong> (‘rs’) — 向后执行一条语句，单步进入。</li>
<li>
<strong>reverse-stepi</strong> — 向后执行一条指令，单步进入。</li>
<li>
<strong>set exec-direction (forward/reverse)</strong> — 设置程序执行方向，向前或向后。</li>
<p><span id="more-1502"></span></p>
<p>在网上查了一下，发现VS2010好像也准备要支持这个东西，微软叫这个东西为“<a href="https://blogs.msdn.com/ianhu/archive/2009/05/13/historical-debugging-in-visual-studio-team-system-2010.aspx" target="_blank">Historical Debugging</a>”。</p>
<p>这个东西，对于我这个老家伙来说比较新鲜，而且还有点诡异。我有点没跟上这个技术，不知道这个技术主要是用来干什么？对于程序的运行的回滚？这样一来，如果，我某条语句创建了一个线程，或是一个文件，逆向执行回去，莫非它还能把这些程序创建出来的资源回收啦？就算是能回收，要是我的某个程序向网络发了些数据出去，莫非它还能给我再收回来？也许我想得太极端了，不过好像目前对这个技术的原始需求的说明不是很多，所以真不知道这个技术除了很酷，还有什么？也许是我理解错了，希望大家指点一下。</p>
<p align="center"><img alt="image placeholder" >
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/1525.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/3643.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/1719.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/1379.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/1242.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/2834.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
</ul>
</div></div>
<div id="post-ratings-1502" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="415f21c0a8">
<img alt="image placeholder" >
<meta itemprop="headline" content="高科技：GDB回溯调试">
<meta itemprop="description" content="也许大家知道，GDB 版本7.0 (2009年9月release) 会是第一次开始支持Reversable Debugging （回溯调式技术），这是一种可以让在debug程序时当我们运行单步调试或是运行到断点时，可以以逆向执行程序的一种技术。（这是GNU的新闻链接）

下面是GDB7.0版本所支持的回溯调试的命令，其中包括，continue，step，以及调试方向的设置。
	reverse...">
<meta itemprop="datePublished" content="2009-09-28T17:14:08+08:00">
<meta itemprop="dateModified" content="2009-10-15T11:08:58+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/1502.html">
<meta itemprop="author" content="陈皓">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/1502.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="3.9">
<meta itemprop="ratingCount" content="10">
</div>
</div>
<div id="post-ratings-1502-loading" class="post-ratings-loading">
<img alt="image placeholder" >
 ]]></content>
<pubDate>2009-09-28T17:14:08+08:00</pubDate>
<guid>https://coolshell.cn/articles/1502.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ mochiweb参数化模型Req相关功能 ]]></title>
<link>https://coolshell.cn/articles/1516.html</link>
<content><![CDATA[ 
<p>本文的笔记讲述如何从client请求中获取各种参数,如method, request path, headers, cookie等。</p>
<p>Mochiweb是Erlang实现的一个开源Web服务器，它设计的一个亮点就是他本身的Http请求的参数化模型。因此我们可以用OO的方式来理解它的相关用法。<br>
它的实现在mochiweb_request模块.在mochiweb中,每个client请求其构造一个 Req 对象(注：这个“对象“只是便于理解的提法), Req 可以理解成 mochiweb_request 的一个参数化或实例化.<br>
<span id="more-1516"></span></p>
<p>1.<span style="color: #339966"><strong>Req:get(method)</strong></span><strong> </strong>-&gt; ‘OPTIONS’ | ‘GET’ | ‘HEAD’ | ‘POST’ | ‘PUT’ | ‘DELETE’ | ‘TRACE’.<br>
获取Http请求的方式.</p>
<p>2.<span style="color: #339966"><strong>Req:get(raw_path)</strong> </span>-&gt; String().<br>
获取raw_path.比如 http://www.nextim.cn/session/login?username=test#p,那/session/login?username=test#p就是这个raw_path.</p>
<p>3.<span style="color: #339966"><strong>Req:get(path)</strong></span><strong> </strong>-&gt; String().<br>
获取path.比如 http://www.nextim.cn/session/login?username=test#p,那/session/login就是这个raw_path.</p>
<p>4.<span style="color: #339966"><strong>Req:parse_qs()</strong></span> -&gt; [{strng(), string()}].<br>
获取get参数.比如 http://www.nextim.cn/session/login?username=test#p,则返回[{“username”,”test”}].</p>
<p>5.<span style="color: #339966"><strong>Req:parse_post()</strong></span> -&gt; [{strng(), string()}].<br>
确保post数据类型为: application/x-www-form-urlencoded, 否则不要调用(其内部会调用Req:recv_body),返回值类似Req:parse_qs().</p>
<p>6.<span style="color: #339966"><strong>Req:get(peer)</strong></span><strong> </strong>-&gt; string().<br>
返回值为client的ip</p>
<p>7.<span style="color: #339966"><strong>Req:get_header_value(Key)</strong></span> -&gt; undefined | string().<br>
获取某个header,比如Key为”User-Agent”时，返回”Mozila…….”</p>
<p>8.<span style="color: #339966"><strong>Req:get_primary_header_value(Key) </strong></span>-&gt; undefined | string().<br>
获取http headers中某个key对应的主值(value以分号分割).<br>
举例: 假设 Content-Type 为 application/x-www-form-urlencoded; charset=utf8,则<br>
Req:get_header_value(“content-type”) 返回 application/x-www-form-urlencoded</p>
<p>9.<span style="color: #339966"><strong>Req:get(headers)</strong> </span>-&gt; dict().<br>
获取所有headers<br>
说明: 返回结果为stdlib/dict 数据结构,可以通过mochiweb_headers模块进行操作.<br>
举例: 下面代码显示请求中所有headers:<br>
Headers = Req:get(headers),<br>
lists:foreach(fun(Key, Value) -&gt;<br>
io:format(“~p : ~p ~n”, [Key, Value])<br>
end,<br>
mochiweb_headers:to_list(Headers)).</p>
<p>10.<span style="color: #339966"><strong>Req:parse_cookie()</strong></span> -&gt; [{string(), string()}].<br>
解析Cookie</p>
<p>11.<strong><span style="color: #339966">R</span></strong><span style="color: #339966"><strong><span style="color: #339966">eq:get_cookie_value(Key)</span></strong></span><strong><span style="color: #339966"> </span></strong>-&gt; string().<br>
类似<span style="color: #ffcc00">Req:get_header_value(Key)</span></p>
<div><span style="font-family: 'Lucida Grande', Verdana, Arial, 'Bitstream Vera Sans', sans-serif"><span>最近搜了下，发现用mochiweb的挺多的。但自己用的时候发现来不少疑难。以上文档皆由litaocheng总结提供。感谢所带来的帮助。希望这个对国内使用mochiweb的朋友们带来帮助。</span></span></div>
<p></p>
<p align="center"><img alt="image placeholder" >
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/2111.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/1839.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/1313.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/455.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/11973.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/5815.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
</ul>
</div></div>
<div id="post-ratings-1516" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="704eecb6e4">
<img alt="image placeholder" >
<meta itemprop="headline" content="mochiweb参数化模型Req相关功能">
<meta itemprop="description" content="本文的笔记讲述如何从client请求中获取各种参数,如method, request path, headers, cookie等。

Mochiweb是Erlang实现的一个开源Web服务器，它设计的一个亮点就是他本身的Http请求的参数化模型。因此我们可以用OO的方式来理解它的相关用法。
它的实现在mochiweb_request模块.在mochiweb中,每个client请求其构造一个...">
<meta itemprop="datePublished" content="2009-09-30T20:00:34+08:00">
<meta itemprop="dateModified" content="2009-10-01T12:06:26+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/1516.html">
<meta itemprop="author" content="free.wang">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/1516.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="3.13">
<meta itemprop="ratingCount" content="8">
</div>
</div>
<div id="post-ratings-1516-loading" class="post-ratings-loading">
<img alt="image placeholder" >
 ]]></content>
<pubDate>2009-09-30T20:00:34+08:00</pubDate>
<guid>https://coolshell.cn/articles/1516.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ GDB 7.0 发布 ]]></title>
<link>https://coolshell.cn/articles/1525.html</link>
<content><![CDATA[ 
<p><a href="https://www.gnu.org/software/gdb/mascot/"><img alt="image placeholder" >
<p>新版的GDB7.0支持如下新的平台或配置：</p>
<ul>
<li>x86/x86_64 Darwin</li>
<li>x86_64 MinGW</li>
<li>Lattice Mico32</li>
<li>x86/x86_64 DICOS</li>
<li>S+core 3</li>
<li>The remote stub now supports x86 Windows CE</li>
</ul>
<p>其主要的新加入的功能有：（看上去相当地高科技啊，很多术语都不知道怎么翻译，请注意后面的相关解释）</p>
<ul>
<li>Python 脚本调试</li>
<li>回溯调试，调式过程记录并重演。</li>
<li>不间隔调试。 Non-stop debugging</li>
<li>并行调试。 Multi-architecture debugging</li>
<li>多进程调试。Multi-inferior, multi-process debugging</li>
</ul>
<p><span id="more-1525"></span></p>
<blockquote>
<p><strong>注释：</strong></p>
<ul>
<li>Non-stop 的意思是，当我们在调试一个进程中的某一个或某一些线程时，可以让没有被调试的线程继续运行不停止。</li>
<li>Multi-architecture在字面上理解是多层架构，但应该是关于并行方面的（请大家指正），比如MIPS或SPARC等并行编程方面的。</li>
<li>Multi-inferior的意思是，你可以同时调试多个不同的进程。在某些情况下，这会更容易帮助我们了解程序的内部执行情况。</li>
</ul>
</blockquote>
<p>当然，本版本也包括了下面的一些改进和补丁：</p>
<p style="PADDING-LEFT: 30px; TEXT-ALIGN: left">* GDB 为JIT 提供了一个编译接口<br>
* Tracepoints 可以加上条件<br>
* 支持多字节和宽字符<br>
* 为”disassemble”新增加/r 和/m 参数<br>
* 对共享库的自动获取<br>
* 支持内联函数<br>
* 新的远程协议包<br>
* GDB 开始可以读取压缩调试片段<br>
* 在Tru64平台下支持线程切换<br>
* 支持Ada 任务切换<br>
* gdbserver的新功能 ——GDB remote stub<br>
* 一个新的命令，当有系统调用发生时可以停止正在运行的程序</p>
<p style="TEXT-ALIGN: left">(全文完)</p>
<p></p>
<p align="center"><img alt="image placeholder" >
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/1502.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/3643.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/1719.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/1379.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/1242.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
<li>
<a href="https://coolshell.cn/articles/8275.html" class="wp_rp_thumbnail"><img alt="image placeholder" >
</li>
</ul>
</div></div>
<div id="post-ratings-1525" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="e48da7b62a">
<img alt="image placeholder" >
<meta itemprop="headline" content="GDB 7.0 发布">
<meta itemprop="description" content="2009年10月06日，GDB7.0正式发布，新的版本你可以在这里下载。本次版本，不但有大家所关注的《GDB回溯调试技术》，同样还有其它大量的新特性，和对新平台的支持。

新版的GDB7.0支持如下新的平台或配置：

	x86/x86_64 Darwin
	x86_64 MinGW
	Lattice Mico32
	x86/x86_64 DICOS
	S+core 3
	The ...">
<meta itemprop="datePublished" content="2009-10-09T16:39:16+08:00">
<meta itemprop="dateModified" content="2009-10-15T11:07:37+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/1525.html">
<meta itemprop="author" content="陈皓">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/1525.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="2.88">
<meta itemprop="ratingCount" content="8">
</div>
</div>
<div id="post-ratings-1525-loading" class="post-ratings-loading">
<img alt="image placeholder" >
 ]]></content>
<pubDate>2009-10-09T16:39:16+08:00</pubDate>
<guid>https://coolshell.cn/articles/1525.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
</channel>
</rss>
